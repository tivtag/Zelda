<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TLoZ - Black Crown</name>
    </assembly>
    <members>
        <member name="T:Zelda.GameStates.BaseOutgameState">
            <summary>
            Represents the base class that both the <see cref="T:Zelda.GameStates.CharacterCreationState"/> and <see cref="T:Zelda.GameStates.CharacterSelectionState"/> share.
            </summary>
        </member>
        <member name="P:Zelda.GameStates.BaseOutgameState.FontLarge">
            <summary>
            Gets the large IFont used in the UserInterface.
            </summary>
        </member>
        <member name="P:Zelda.GameStates.BaseOutgameState.Font">
            <summary>
            Gets the normal IFont used in the UserInterface.
            </summary>
        </member>
        <member name="P:Zelda.GameStates.BaseOutgameState.UserInterface">
            <summary>
            Gets the UserInterface of this BaseCharacterState.
            </summary>
        </member>
        <member name="M:Zelda.GameStates.BaseOutgameState.#ctor(Zelda.ZeldaGame)">
            <summary>
            Initializes a new instance of the BaseCharacterState class.
            </summary>
            <param name="game">
            The game that owns the new BaseCharacterState.
            </param>
        </member>
        <member name="M:Zelda.GameStates.BaseOutgameState.Load">
            <summary>
            Loads the resources used by this BaseCharacterState.
            </summary>
        </member>
        <member name="M:Zelda.GameStates.BaseOutgameState.Unload">
            <summary>
            Unloads the resources used by this BaseCharacterState.
            </summary>
        </member>
        <member name="M:Zelda.GameStates.BaseOutgameState.LoadUserInterface">
            <summary>
            Loads and setups the user-interface of this BaseCharacterState.
            </summary>
        </member>
        <member name="M:Zelda.GameStates.BaseOutgameState.SetupUserInterface">
            <summary>
            Allws sub-classes to register controls at the user-interface.
            </summary>
        </member>
        <member name="M:Zelda.GameStates.BaseOutgameState.Draw(Atom.IDrawContext)">
            <summary>
            Draws this BaseCharacterState.
            </summary>
            <param name="drawContext">
            The current IDrawContext.
            </param>
        </member>
        <member name="M:Zelda.GameStates.BaseOutgameState.DrawPreScene(Zelda.ZeldaDrawContext)">
            <summary>
            Called before the scene is drawn.
            </summary>
            <param name="zeldaDrawContext">
            The current ZeldaDrawContext.
            </param>
        </member>
        <member name="M:Zelda.GameStates.BaseOutgameState.DrawBackground(Atom.Xna.ISpriteDrawContext)">
            <summary>
            Draws the background of this BaseOutgameState.
            </summary>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.GameStates.BaseOutgameState.DrawUserInterface(Atom.Xna.ISpriteDrawContext)">
            <summary>
            Draws the Normal State of the CharacterSelectionState.
            </summary>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.GameStates.BaseOutgameState.Update(Atom.IUpdateContext)">
            <summary>
            Updates this BaseCharacterState.
            </summary>
            <param name="updateContext">
            The current IUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.GameStates.BaseOutgameState.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this BaseCharacterState.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.GameStates.BaseOutgameState.OnMouseInputCore(System.Object,Microsoft.Xna.Framework.Input.MouseState@,Microsoft.Xna.Framework.Input.MouseState@)">
            <summary>
            Handles mouse input; called once every frame.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
            <param name="mouseState">
            The current state of the mouse.
            </param>
            <param name="oldMouseState">
            The state of the mouse one frame ago.
            </param>
        </member>
        <member name="M:Zelda.GameStates.BaseOutgameState.OnMouseInput(Microsoft.Xna.Framework.Input.MouseState@,Microsoft.Xna.Framework.Input.MouseState@)">
            <summary>
            Handles mouse input; called once every frame.
            </summary>
            <param name="mouseState">
            The current state of the mouse.
            </param>
            <param name="oldMouseState">
            The state of the mouse one frame ago.
            </param>
        </member>
        <member name="M:Zelda.GameStates.BaseOutgameState.OnKeyboardInputCore(System.Object,Microsoft.Xna.Framework.Input.KeyboardState@,Microsoft.Xna.Framework.Input.KeyboardState@)">
            <summary>
            Handles keyboard input; called once every frame.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
            <param name="keyState">
            The current state of the keyboard.
            </param>
            <param name="oldKeyState">
            The state of the keyboard one frame ago.
            </param>
        </member>
        <member name="M:Zelda.GameStates.BaseOutgameState.OnKeyboardInput(Microsoft.Xna.Framework.Input.KeyboardState@,Microsoft.Xna.Framework.Input.KeyboardState@)">
            <summary>
            Handles keyboard input; called once every frame.
            </summary>
            <param name="keyState">
            The current state of the keyboard.
            </param>
            <param name="oldKeyState">
            The state of the keyboard one frame ago.
            </param>
        </member>
        <member name="M:Zelda.GameStates.BaseOutgameState.HandleKeyboardInput(Microsoft.Xna.Framework.Input.KeyboardState@,Microsoft.Xna.Framework.Input.KeyboardState@)">
            <summary>
            Handles keyboard input; called once every frame.
            </summary>
            <param name="keyState">
            The current state of the keyboard.
            </param>
            <param name="oldKeyState">
            The state of the keyboard one frame ago.
            </param>
            <returns>
            true if input has been handled;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.GameStates.BaseOutgameState.LeaveToPreviousState">
            <summary>
            Called when the user has pressed the Escape key.
            </summary>
        </member>
        <member name="M:Zelda.GameStates.BaseOutgameState.ChangedFrom(Atom.IGameState)">
            <summary>
            Gets called when the focus has changed from the given IGameState to this IGameState.
            </summary>
            <param name="oldState">
            The old IGameState.
            </param>
        </member>
        <member name="M:Zelda.GameStates.BaseOutgameState.ChangedTo(Atom.IGameState)">
            <summary>
            Gets called when the focus has changed away from this IGameState to the given IGameState.
            </summary>
            <param name="newState">
            The new IGameState.
            </param>
        </member>
        <member name="F:Zelda.GameStates.BaseOutgameState.fontLarge">
            <summary>
            The fonts used in the UserInterface.
            </summary>
        </member>
        <member name="F:Zelda.GameStates.BaseOutgameState.font">
            <summary>
            The fonts used in the UserInterface.
            </summary>
        </member>
        <member name="F:Zelda.GameStates.BaseOutgameState.userInterface">
            <summary>
            The user interface of this BaseCharacterState.
            </summary>
        </member>
        <member name="F:Zelda.GameStates.BaseOutgameState.game">
            <summary>
            Represents the game that owns this BaseCharacterState.
            </summary>
        </member>
        <member name="F:Zelda.GameStates.BaseOutgameState.rand">
            <summary>
            Represents a random number generator.
            </summary>
        </member>
        <member name="F:Zelda.GameStates.BaseOutgameState.isActive">
            <summary>
            States whether this BaseCharacterState is currently active.
            </summary>
        </member>
        <member name="F:Zelda.GameStates.BaseOutgameState.scene">
            <summary>
            The scene that is drawn in the background.
            </summary>
        </member>
        <member name="F:Zelda.GameStates.BaseOutgameState.BackgroundColor">
            <summary>
            The color of the background rectangle.
            </summary>
        </member>
        <member name="T:Zelda.GameStates.CharacterCreationState">
            <summary>
            Defines the IGameState in which the user can create a new GameProfile.
            </summary>
        </member>
        <member name="P:Zelda.GameStates.CharacterCreationState.Profile">
            <summary>
            Gets the <see cref="T:Zelda.Profiles.GameProfile"/> that the player has created
            using this CharacterCreationState.
            </summary>
        </member>
        <member name="P:Zelda.GameStates.CharacterCreationState.IsUniqueProfileName">
            <summary>
            Gets a value indicating whether the entered profileName is unique.
            </summary>
            <returns>
            true if the entered name is unique;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.GameStates.CharacterCreationState.#ctor(Zelda.ZeldaGame)">
            <summary>
            Initializes a new instance of the CharacterCreationState class.
            </summary>
            <param name="game">
            The game that owns the new CharacterCreationState.
            </param>
        </member>
        <member name="M:Zelda.GameStates.CharacterCreationState.Load">
            <summary>
            Loads this CharacterCreationState.
            </summary>
        </member>
        <member name="M:Zelda.GameStates.CharacterCreationState.Unload">
            <summary>
            Unloads this CharacterCreationState.
            </summary>
        </member>
        <member name="M:Zelda.GameStates.CharacterCreationState.SetupUserInterface">
            <summary>
            Overriden to setup the UserInterface of this CharacterCreationState.
            </summary>
        </member>
        <member name="M:Zelda.GameStates.CharacterCreationState.GetAvailableDifficulties">
            <summary>
            Gets the currently available game difficulties.
            </summary>
            <returns>
            The available difficulties.
            </returns>
        </member>
        <member name="M:Zelda.GameStates.CharacterCreationState.LayoutButtons">
            <summary>
            Layouts the difficulty selection buttons.
            </summary>
        </member>
        <member name="M:Zelda.GameStates.CharacterCreationState.OnDifficultyButtonClicked(System.Object,Microsoft.Xna.Framework.Input.MouseState@,Microsoft.Xna.Framework.Input.MouseState@)">
            <summary>
            Called when the user has clicked on any of the difficulty buttons.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
            <param name="mouseState">
            The current state of the mouse.
            </param>
            <param name="oldMouseState">
            The state of the mouse one frame ago.
            </param>
        </member>
        <member name="M:Zelda.GameStates.CharacterCreationState.ChangedFrom(Atom.IGameState)">
            <summary>
            Gets called when the focus has changed from the given IGameState to this IGameState.
            </summary>
            <param name="oldState">
            The old IGameState.
            </param>
        </member>
        <member name="M:Zelda.GameStates.CharacterCreationState.ChangedTo(Atom.IGameState)">
            <summary>
            Gets called when the focus has changed away from this IGameState to the given IGameState.
            </summary>
            <param name="newState">
            The new IGameState.
            </param>
        </member>
        <member name="M:Zelda.GameStates.CharacterCreationState.DrawUserInterface(Atom.Xna.ISpriteDrawContext)">
            <summary>
            Draws the UserInterface of this CharacterSelectionState.
            </summary>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.GameStates.CharacterCreationState.DrawDifficultyButton(Atom.Xna.UI.Controls.LambdaButton,Atom.Xna.ISpriteDrawContext)">
            <summary>
            Draws the specified LambdaButton.
            </summary>
            <param name="button">
            The LambdaButton to draw.
            </param>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.GameStates.CharacterCreationState.DrawEnterNameStep(Atom.Xna.ISpriteDrawContext)">
            <summary>
            Draws the "Enter Name" UserInterface of this CharacterSelectionState.
            </summary>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.GameStates.CharacterCreationState.OnKeyboardInput(Microsoft.Xna.Framework.Input.KeyboardState@,Microsoft.Xna.Framework.Input.KeyboardState@)">
            <summary>
            Handles keyboard input; called once every frame.
            </summary>
            <param name="keyState">
            The current state of the keyboard.
            </param>
            <param name="oldKeyState">
            The state of the keyboard one frame ago.
            </param>
        </member>
        <member name="M:Zelda.GameStates.CharacterCreationState.HandleKey(Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            Handles pressing of the specified Key.
            </summary>
            <param name="key">
            The key that has been prressed.
            </param>
        </member>
        <member name="M:Zelda.GameStates.CharacterCreationState.MoveSelectedDifficulty(System.Int32)">
            <summary>
            Moves the currently selected Difficulty by the specified number of indices.
            </summary>
            <param name="by">
            The value to move for.
            </param>
        </member>
        <member name="M:Zelda.GameStates.CharacterCreationState.MoveSelectedDifficultyUp">
            <summary>
            Moves the currently selected Difficulty up by one index.
            </summary>
        </member>
        <member name="M:Zelda.GameStates.CharacterCreationState.MoveSelectedDifficultyDown">
            <summary>
            Moves the currently selected Difficulty up by down by one index.
            </summary>
        </member>
        <member name="M:Zelda.GameStates.CharacterCreationState.SelectDifficultyAt(System.Int32)">
            <summary>
            Selects the difficulty at the specified index.
            </summary>
            <param name="index">
            The index of the difficultyButton to select.
            </param>
        </member>
        <member name="M:Zelda.GameStates.CharacterCreationState.SelectDifficulty(Atom.Xna.UI.Controls.Button)">
            <summary>
            Selects the difficulty of the specified Button.
            </summary>
            <param name="button">
            The button that contain the difficulty data in its tag.
            </param>
        </member>
        <member name="M:Zelda.GameStates.CharacterCreationState.PlayDifficultySound">
            <summary>
            Plays the sound that matches the currently selectedDifficulty.
            </summary>
        </member>
        <member name="M:Zelda.GameStates.CharacterCreationState.ProceedToNextStep">
            <summary>
            Attempts to proceed to the next step in the creation process.
            </summary>
        </member>
        <member name="M:Zelda.GameStates.CharacterCreationState.ProceedToPreviousStep">
            <summary>
            Attempts to proceed to the next step in the creation process.
            </summary>
        </member>
        <member name="M:Zelda.GameStates.CharacterCreationState.IsNameValid">
            <summary>
            Gets a value indicating whether the currently enteredName is valid.
            </summary>
            <returns>
            true if the enteredName can be used;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.GameStates.CharacterCreationState.CreateCharacter">
            <summary>
            Attempts to create a new character/profile with the currently
            entered information.
            </summary>
        </member>
        <member name="M:Zelda.GameStates.CharacterCreationState.ChangeToSelectionState">
            <summary>
            Changes from this CharacterCreationState back to the CharacterSelectionState.
            </summary>
        </member>
        <member name="M:Zelda.GameStates.CharacterCreationState.ChangeStep(Zelda.GameStates.CharacterCreationState.CreationStep)">
            <summary>
            Changes the current CreationStep.
            </summary>
            <param name="step">
            The CreationStep to change to.
            </param>
        </member>
        <member name="T:Zelda.GameStates.CharacterCreationState.CreationStep">
            <summary>
            Enumerates the different steps in the Character Creation procedure.
            </summary>
        </member>
        <member name="F:Zelda.GameStates.CharacterCreationState.CreationStep.EnterName">
            <summary>
            The first step requires the player to enter a name.
            </summary>
        </member>
        <member name="F:Zelda.GameStates.CharacterCreationState.CreationStep.SelectStats">
            <summary>
            The second step requires the player to select his starting status points.
            </summary>
        </member>
        <member name="F:Zelda.GameStates.CharacterCreationState.CreationStep.SelectLooks">
            <summary>
            The third step requires the player to select how is character looks.
            </summary>
        </member>
        <member name="F:Zelda.GameStates.CharacterCreationState.CreationStep.SelectDifficulty">
            <summary>
            The last step requires the player to select a difficulty.
            </summary>
        </member>
        <member name="M:Zelda.GameStates.CharacterCreationState.LeaveToPreviousState">
            <summary>
            Called when the user has pressed the Escape key.
            </summary>
        </member>
        <member name="F:Zelda.GameStates.CharacterCreationState.linkSprites">
            <summary>
            Holds the sprites to draw link.
            </summary>
        </member>
        <member name="F:Zelda.GameStates.CharacterCreationState.blinkTimer">
            <summary>
            The time that controls the blinking of the cursor.
            </summary>
        </member>
        <member name="F:Zelda.GameStates.CharacterCreationState.spriteRotationTimer">
            <summary>
            The time that controls the rotation of the player character.
            </summary>
        </member>
        <member name="F:Zelda.GameStates.CharacterCreationState.spriteDirection">
            <summary>
            The rotation index for the rotating character.
            </summary>
        </member>
        <member name="F:Zelda.GameStates.CharacterCreationState.currentStep">
            <summary>
            Represents the current step in the character creation process.
            </summary>
        </member>
        <member name="F:Zelda.GameStates.CharacterCreationState.MaximumAllowedNameLength">
            <summary>
            Specifies the maximum number of characters the name can have.
            </summary>
        </member>
        <member name="F:Zelda.GameStates.CharacterCreationState.selectionState">
            <summary>
            Represents a reference to the CharacterSelectionState.
            </summary>
        </member>
        <member name="F:Zelda.GameStates.CharacterCreationState.sampleChannel">
            <summary>
            The currently playing sample channel.
            </summary>
        </member>
        <member name="F:Zelda.GameStates.CharacterCreationState.checkBoxHardcore">
            <summary>
            Used to allow the user to enable hardcore modus.
            </summary>
        </member>
        <member name="F:Zelda.GameStates.CharacterCreationState.characterWindow">
            <summary>
            Used to invest the status points of the player.
            </summary>
        </member>
        <member name="F:Zelda.GameStates.CharacterCreationState.statsBackgroundRectangle">
            <summary>
            UI rectangle that is sohwn behind the characterWindow, such that it becomes more readable.
            </summary>
        </member>
        <member name="F:Zelda.GameStates.CharacterCreationState.backButton">
            <summary>
            The UI-movement buttons.
            </summary>
        </member>
        <member name="F:Zelda.GameStates.CharacterCreationState.nextButton">
            <summary>
            The UI-movement buttons.
            </summary>
        </member>
        <member name="F:Zelda.GameStates.CharacterCreationState.game">
            <summary>
            Represents the game that owns this CharacterCreationState.
            </summary>
        </member>
        <member name="F:Zelda.GameStates.CharacterCreationState.difficultyButtons">
            <summary>
            Enumerates the Buttons that allow the user to change the difficulty of the game.
            </summary>
        </member>
        <member name="F:Zelda.GameStates.CharacterCreationState.colorClothSelector">
            <summary>
            Enumerates the ui elements that allow the user to change the colors of the player sprite.
            </summary>
        </member>
        <member name="F:Zelda.GameStates.CharacterCreationState.colorClothHighlightSelector">
            <summary>
            Enumerates the ui elements that allow the user to change the colors of the player sprite.
            </summary>
        </member>
        <member name="F:Zelda.GameStates.CharacterCreationState.colorHairSelector">
            <summary>
            Enumerates the ui elements that allow the user to change the colors of the player sprite.
            </summary>
        </member>
        <member name="F:Zelda.GameStates.CharacterCreationState.colorHairHighlightSelector">
            <summary>
            Enumerates the ui elements that allow the user to change the colors of the player sprite.
            </summary>
        </member>
        <member name="F:Zelda.GameStates.CharacterCreationState.randomTitleScreenEnemySpawner">
            <summary>
            Spawns the random enemies on right mouse-click.
            </summary>
        </member>
        <member name="T:Zelda.GameStates.CharacterSelectionState">
            <summary>
            Defines the IGameState in which the user
            can select the character he wishes to play.
            </summary>
        </member>
        <member name="M:Zelda.GameStates.CharacterSelectionState.#ctor(Zelda.ZeldaGame)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.GameStates.CharacterSelectionState"/> class.
            </summary>
            <param name="game">
            The ZeldaGame object.
            </param>
        </member>
        <member name="M:Zelda.GameStates.CharacterSelectionState.Load">
            <summary>
            Loads this IGameState.
            </summary>
        </member>
        <member name="M:Zelda.GameStates.CharacterSelectionState.LoadProfiles">
            <summary>
            Partially loads the profiles stored in the profile folder.
            </summary>
        </member>
        <member name="M:Zelda.GameStates.CharacterSelectionState.SetupUserInterface">
            <summary>
            Overriden to setup the UserInterface of this CharacterSelectionState.
            </summary>
        </member>
        <member name="M:Zelda.GameStates.CharacterSelectionState.LoadMusic">
            <summary>
            Loads and plays the music of the CharacterSelectionState.
            </summary>
        </member>
        <member name="M:Zelda.GameStates.CharacterSelectionState.Unload">
            <summary>
            Unloads this IGameState.
            </summary>
        </member>
        <member name="P:Zelda.GameStates.CharacterSelectionState.SelectedProfile">
            <summary>
            Gets the <see cref="T:Zelda.Profiles.GameProfile"/> which has been selected by the user in the CharacterSelectionState.
            </summary>
        </member>
        <member name="P:Zelda.GameStates.CharacterSelectionState.Profiles">
            <summary>
            Gets the <see cref="T:Zelda.Profiles.IGameProfile"/> that have been loaden.
            </summary>
        </member>
        <member name="M:Zelda.GameStates.CharacterSelectionState.DrawPreScene(Zelda.ZeldaDrawContext)">
            <summary>
            Called before the scene is drawn.
            </summary>
            <param name="zeldaDrawContext">
            The current ZeldaDrawContext.
            </param>
        </member>
        <member name="M:Zelda.GameStates.CharacterSelectionState.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this BaseCharacterState.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.GameStates.CharacterSelectionState.RefreshIndexButtonVisability">
            <summary>
            Refreshes the visability of Change Profile Buttons.
            </summary>
        </member>
        <member name="M:Zelda.GameStates.CharacterSelectionState.MoveProfileIndexLeft">
            <summary>
            Moves the currently selected profile left by one entry.
            </summary>
        </member>
        <member name="M:Zelda.GameStates.CharacterSelectionState.MoveProfileIndexRight">
            <summary>
            Moves the currently selected profile right by one entry.
            </summary>
        </member>
        <member name="M:Zelda.GameStates.CharacterSelectionState.SelectLastSavedProfile">
            <summary>
            Selects the profile the user has used last.
            </summary>
        </member>
        <member name="M:Zelda.GameStates.CharacterSelectionState.DrawBackground(Atom.Xna.ISpriteDrawContext)">
            <summary>
            Draws the background and ParticleEffect of the BaseCharacterState.
            </summary>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.GameStates.CharacterSelectionState.DrawUserInterface(Atom.Xna.ISpriteDrawContext)">
            <summary>
            Draws the Normal State of the CharacterSelectionState.
            </summary>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.GameStates.CharacterSelectionState.OnNewButtonClicked(System.Object,Microsoft.Xna.Framework.Input.MouseState@,Microsoft.Xna.Framework.Input.MouseState@)">
            <summary>
            Called when the user presses on the "New" button.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="mouseState">The current state of the mouse.</param>
            <param name="oldMouseState">The state of the mosue one frame ago.</param>
        </member>
        <member name="M:Zelda.GameStates.CharacterSelectionState.OnSettingsButtonClicked(System.Object,Microsoft.Xna.Framework.Input.MouseState@,Microsoft.Xna.Framework.Input.MouseState@)">
            <summary>
            Called when the user presses on the "Settings" button.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="mouseState">The current state of the mouse.</param>
            <param name="oldMouseState">The state of the mosue one frame ago.</param>
        </member>
        <member name="M:Zelda.GameStates.CharacterSelectionState.OnButtonProfileLeftClicked(System.Object,Microsoft.Xna.Framework.Input.MouseState@,Microsoft.Xna.Framework.Input.MouseState@)">
            <summary>
            Called when the user presses on the "Left" button.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="mouseState">The current state of the mouse.</param>
            <param name="oldMouseState">The state of the mosue one frame ago.</param>
        </member>
        <member name="M:Zelda.GameStates.CharacterSelectionState.OnButtonProfileRightClicked(System.Object,Microsoft.Xna.Framework.Input.MouseState@,Microsoft.Xna.Framework.Input.MouseState@)">
            <summary>
            Called when the user presses on the "Right" button.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="mouseState">The current state of the mouse.</param>
            <param name="oldMouseState">The state of the mosue one frame ago.</param>
        </member>
        <member name="M:Zelda.GameStates.CharacterSelectionState.OnMouseInput(Microsoft.Xna.Framework.Input.MouseState@,Microsoft.Xna.Framework.Input.MouseState@)">
            <summary>
            Handles mouse input; called once every frame.
            </summary>
            <param name="mouseState">
            The current state of the mouse.
            </param>
            <param name="oldMouseState">
            The state of the mouse one frame ago.
            </param>
        </member>
        <member name="M:Zelda.GameStates.CharacterSelectionState.EnterGame">
            <summary>
            Enters the game by loading the selected profile.
            </summary>
        </member>
        <member name="M:Zelda.GameStates.CharacterSelectionState.OnKeyboardInput(Microsoft.Xna.Framework.Input.KeyboardState@,Microsoft.Xna.Framework.Input.KeyboardState@)">
            <summary>
            Handles keyboard input; called once every frame.
            </summary> 
            <param name="keyState">
            The current state of the keyboard.
            </param>
            <param name="oldKeyState">
            The state of the keyboard one frame ago.
            </param>
        </member>
        <member name="M:Zelda.GameStates.CharacterSelectionState.LeaveToPreviousState">
            <summary>
            Called when the user has pressed the Escape key.
            </summary>
        </member>
        <member name="M:Zelda.GameStates.CharacterSelectionState.Exit">
            <summary>
            Exits the game, unless disallowExitingGameOnce is true.
            </summary>
        </member>
        <member name="M:Zelda.GameStates.CharacterSelectionState.ChangedFrom(Atom.IGameState)">
            <summary>
            Gets called when the focus has changed from the given IGameState to this IGameState.
            </summary>
            <param name="oldState">
            The old IGameState.
            </param>
        </member>
        <member name="M:Zelda.GameStates.CharacterSelectionState.LoadBackupScene">
            <summary>
            Loads a fresh background screen; e.g. when coming from a ingame state.
            </summary>
        </member>
        <member name="M:Zelda.GameStates.CharacterSelectionState.ChangedTo(Atom.IGameState)">
            <summary>
            Gets called when the focus has changed away from this IGameState to the given IGameState.
            </summary>
            <param name="newState">
            The new IGameState.
            </param>
        </member>
        <member name="F:Zelda.GameStates.CharacterSelectionState.selectedProfileIndex">
            <summary>
            The index of the currently selected IGameProfile.
            </summary>
        </member>
        <member name="F:Zelda.GameStates.CharacterSelectionState.selectedProfile">
            <summary>
            The currently selcted IGameProfile.
            </summary>
        </member>
        <member name="F:Zelda.GameStates.CharacterSelectionState.profiles">
            <summary>
            The list of IGameProfiles.
            </summary>
        </member>
        <member name="F:Zelda.GameStates.CharacterSelectionState.music">
            <summary>
            The music that is played in the background.
            </summary>
        </member>
        <member name="F:Zelda.GameStates.CharacterSelectionState.rectCharacterBackground">
            <summary>
            The rectangle that defines the area of the black character background.
            </summary>
        </member>
        <member name="F:Zelda.GameStates.CharacterSelectionState.buttonNew">
            <summary>
            The Buttons active in the UI.
            </summary>
        </member>
        <member name="F:Zelda.GameStates.CharacterSelectionState.buttonProfileLeft">
            <summary>
            The Buttons active in the UI.
            </summary>
        </member>
        <member name="F:Zelda.GameStates.CharacterSelectionState.buttonProfileRight">
            <summary>
            The Buttons active in the UI.
            </summary>
        </member>
        <member name="F:Zelda.GameStates.CharacterSelectionState.linkSprites">
            <summary>
            The sprites used to draw link.
            </summary>
        </member>
        <member name="F:Zelda.GameStates.CharacterSelectionState.difficultyIndicatorDrawer">
            <summary>
            Implements a mechanism that draws a simple indicator for the difficulty of the currently selected profile.
            </summary>
        </member>
        <member name="F:Zelda.GameStates.CharacterSelectionState.actionDisallowedTimer">
            <summary>
            The timer that controls the time for which no action, such as entering or leaving the game, are not allowed to
            be executed.
            </summary>
        </member>
        <member name="F:Zelda.GameStates.CharacterSelectionState.randomTitleScreenEnemySpawner">
            <summary>
            Spawns the random enemies on right mouse-click.
            </summary>
        </member>
        <member name="F:Zelda.GameStates.CharacterSelectionState.game">
            <summary>
            The ZeldaGame object.
            </summary>
        </member>
        <member name="T:Zelda.GameStates.IngameMenuState">
            <summary>
            The ingame options screen allows the player to change various ingame settings, save the current game
            and exit to the character selection state.
            </summary>
        </member>
        <member name="P:Zelda.GameStates.IngameMenuState.Scene">
            <summary>
            Gets the ZeldaScene that is drawn in the background of this IngameMenuState.
            </summary>
        </member>
        <member name="M:Zelda.GameStates.IngameMenuState.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the IngameOptionsScreenState class.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.GameStates.IngameMenuState.Load">
            <summary>
            Loads this IngameOptionsScreenState.
            </summary>
        </member>
        <member name="M:Zelda.GameStates.IngameMenuState.ExecuteSelectedButton">
            <summary>
            Executes the Click action of the currently selected button.
            </summary>
        </member>
        <member name="M:Zelda.GameStates.IngameMenuState.GetSelectedButton">
            <summary>
            Gets the Button that has been selected by the player.
            </summary>
            <returns>
            The Button that has been selected.
            </returns>
        </member>
        <member name="M:Zelda.GameStates.IngameMenuState.MoveSelectedButtonIndexBy(System.Int32)">
            <summary>
            Moves the selected button down or up by the specified amount.
            </summary>
            <param name="amount">
            The amount to move in index space.
            </param>
        </member>
        <member name="M:Zelda.GameStates.IngameMenuState.SelectButtonAt(System.Int32)">
            <summary>
            Selects the Button at the specified zero-based index.
            </summary>
            <param name="index">
            The zero-based index of the button to select.
            </param>
        </member>
        <member name="M:Zelda.GameStates.IngameMenuState.SelectButton(Atom.Xna.UI.Controls.Button)">
            <summary>
            Selects the specified button.
            </summary>
            <param name="button">
            The button to select.
            </param>
        </member>
        <member name="M:Zelda.GameStates.IngameMenuState.AddButton(Atom.Xna.UI.Controls.Button)">
            <summary>
            Adds the specified Button to the list of buttons that allow the player
            to excute actions in this IngameOptiosnScreenState.
            </summary>
            <param name="button">
            The button to add.
            </param>
        </member>
        <member name="M:Zelda.GameStates.IngameMenuState.OnExitButtonClicked(System.Object,Microsoft.Xna.Framework.Input.MouseState@,Microsoft.Xna.Framework.Input.MouseState@)">
            <summary>
            Called when the Exit Button has been clicked.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
            <param name="mouseState">
            The current state of the mouse.
            </param>
            <param name="oldMouseState">
            The state of the mouse one frame ago.
            </param>
        </member>
        <member name="M:Zelda.GameStates.IngameMenuState.OnSaveButtonClicked(System.Object,Microsoft.Xna.Framework.Input.MouseState@,Microsoft.Xna.Framework.Input.MouseState@)">
            <summary>
            Called when the Save Button has been clicked.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
            <param name="mouseState">
            The current state of the mouse.
            </param>
            <param name="oldMouseState">
            The state of the mouse one frame ago.
            </param>
        </member>
        <member name="M:Zelda.GameStates.IngameMenuState.OnSettingsButtonClicked(System.Object,Microsoft.Xna.Framework.Input.MouseState@,Microsoft.Xna.Framework.Input.MouseState@)">
            <summary>
            Called when the Settings Button has been clicked.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
            <param name="mouseState">
            The current state of the mouse.
            </param>
            <param name="oldMouseState">
            The state of the mouse one frame ago.
            </param>
        </member>
        <member name="M:Zelda.GameStates.IngameMenuState.Unload">
            <summary>
            Unloads this IngameOptionsScreenState.
            </summary>
        </member>
        <member name="M:Zelda.GameStates.IngameMenuState.ChangeToIngameState">
            <summary>
            Returns to the IngameState.
            </summary>
        </member>
        <member name="M:Zelda.GameStates.IngameMenuState.Draw(Atom.IDrawContext)">
            <summary>
            Draws this IngameOptionsScreenState.
            </summary>
            <param name="drawContext">
            The current IDrawContext.
            </param>
        </member>
        <member name="M:Zelda.GameStates.IngameMenuState.Update(Atom.IUpdateContext)">
            <summary>
            Updates this IngameOptionsScreenState.
            </summary>
            <param name="updateContext">
            The current IUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.GameStates.IngameMenuState.ChangedFrom(Atom.IGameState)">
            <summary>
            Gets called when the current GameState changed to this GameState.
            </summary>
            <param name="oldState">
            The old state.
            </param>
        </member>
        <member name="M:Zelda.GameStates.IngameMenuState.ChangedTo(Atom.IGameState)">
            <summary>
            Gets called when the current GameState changed away from this GameState.
            </summary>
            <param name="newState">
            The bew state.
            </param>
        </member>
        <member name="M:Zelda.GameStates.IngameMenuState.OnKeyboardInput(System.Object,Microsoft.Xna.Framework.Input.KeyboardState@,Microsoft.Xna.Framework.Input.KeyboardState@)">
            <summary>
            Called every frame to handle input.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
            <param name="keyState">
            The current state of the Keyboard.
            </param>
            <param name="oldKeyState">
            The state of the Keyboard one frame ago.
            </param>
        </member>
        <member name="F:Zelda.GameStates.IngameMenuState.timeNotCloseable">
            <summary>
            The time left this IngameOptionsScreenState can't be closed for in seconds.
            </summary>
        </member>
        <member name="F:Zelda.GameStates.IngameMenuState.TimeNotCloseable">
            <summary>
            The time this IngameOptionsScreenState can't be closed for in seconds.
            </summary>
        </member>
        <member name="F:Zelda.GameStates.IngameMenuState.ingameState">
            <summary>
            The current IngameState.
            </summary>
        </member>
        <member name="F:Zelda.GameStates.IngameMenuState.userInterface">
            <summary>
            Represents the user interface shown in the IngameOptionsScreenState.
            </summary>
        </member>
        <member name="F:Zelda.GameStates.IngameMenuState.buttons">
            <summary>
            The buttons that allow the user to execute an action in this IngameOptionsScreenState.
            </summary>
        </member>
        <member name="F:Zelda.GameStates.IngameMenuState.serviceProvider">
            <summary>
            Provides fast access to game-related services.
            </summary>
        </member>
        <member name="T:Zelda.GameStates.IngameState">
            <summary>
            Defines the the IGameState in which the actual game runs.
            </summary>
        </member>
        <member name="P:Zelda.GameStates.IngameState.IsPaused">
            <summary>
            Gets or sets a value indicating whether the game
            itself has been paused.
            </summary>
        </member>
        <member name="P:Zelda.GameStates.IngameState.Player">
            <summary>
            Gets the currently active PlayerEntity.
            </summary>
        </member>
        <member name="P:Zelda.GameStates.IngameState.Profile">
            <summary>
            Gets the <see cref="T:Zelda.Profiles.GameProfile"/> of player that is currently playing the game.
            </summary>
        </member>
        <member name="P:Zelda.GameStates.IngameState.Game">
            <summary>
            Gets the <see cref="T:Zelda.ZeldaGame"/> object.
            </summary>
        </member>
        <member name="P:Zelda.GameStates.IngameState.UserInterface">
            <summary>
            Gets the <see cref="T:Zelda.UI.IngameUserInterface"/> that contains all the UIElements shown ingame.
            </summary>
        </member>
        <member name="P:Zelda.GameStates.IngameState.BackgroundMusic">
            <summary>
            Gets the <see cref="T:Zelda.Audio.BackgroundMusicComponent"/> that manages 
            the music that is playing in the background of the game.
            </summary>
        </member>
        <member name="P:Zelda.GameStates.IngameState.Scene">
            <summary>
            Gets the current <see cref="T:Zelda.ZeldaScene"/>.
            </summary>
        </member>
        <member name="P:Zelda.GameStates.IngameState.Zelda#IIngameState#UserInterface">
            <summary>
            Gets the UserInterface shown ingame.
            </summary>
        </member>
        <member name="M:Zelda.GameStates.IngameState.#ctor(Zelda.ZeldaGame)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.GameStates.IngameState"/> class.
            </summary>
            <param name="game">
            The ZeldaGame object.
            </param>
        </member>
        <member name="M:Zelda.GameStates.IngameState.Load">
            <summary>
            Loads the IngameState.
            </summary>
        </member>
        <member name="M:Zelda.GameStates.IngameState.Unload">
            <summary>
            Unloads the IngameState.
            </summary>
        </member>
        <member name="M:Zelda.GameStates.IngameState.LoadProfile">
            <summary>
            Setups the IngameState for the currently selected profile.
            </summary>
        </member>
        <member name="M:Zelda.GameStates.IngameState.LoadScene(System.String)">
            <summary>
            Loads and changes to the ZeldaScene with the given name.
            </summary>
            <param name="name">
            The name of the scene to load.
            </param>
            <returns>
            The loaded ZeldaScene.
            </returns>
        </member>
        <member name="M:Zelda.GameStates.IngameState.ChangeScene(Zelda.ZeldaScene)">
            <summary>
            Helper method that changes the current ZeldaScene to the given ZeldaScene.
            </summary>
            <param name="scene">
            The new ZeldaScene.
            </param>
        </member>
        <member name="M:Zelda.GameStates.IngameState.Update(Atom.IUpdateContext)">
            <summary>
            Updates the IngameState.
            </summary>
            <param name="updateContext">
            The current IUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.GameStates.IngameState.TestCollisionPlayerEnemies">
            <summary>
            Tests collision of all nearby enemies with the player.
            </summary>
        </member>
        <member name="M:Zelda.GameStates.IngameState.UpdateAudioListenerPosition">
            <summary>
            Update the position of the audio listener for 2D sound.
            </summary>
        </member>
        <member name="M:Zelda.GameStates.IngameState.Draw(Atom.IDrawContext)">
            <summary>
            Draws the IngameState.
            </summary>
            <param name="drawContext">
            The current IDrawContext.
            </param>
        </member>
        <member name="M:Zelda.GameStates.IngameState.RequestSceneReload">
            <summary>
            Tells this IngameState to reload the current <see cref="T:Zelda.ZeldaScene"/>
            by discarding and the loading it again.
            </summary>
            <returns>
            The new ZeldaScene instance.
            </returns>
        </member>
        <member name="M:Zelda.GameStates.IngameState.RequestSceneChange(System.String,System.Boolean)">
            <summary>
            Tells this IngameState to change the current <see cref="T:Zelda.ZeldaScene"/>.
            </summary>
            <param name="name">
            The name that uniquely identifies the ZeldaScene to change to.
            </param>
            <param name="cachePrevious">
            States whether the previous ZeldaScene should be cached using the <see cref="T:Zelda.ZeldaScenesCache"/>.
            </param>
            <returns>
            The new current ZeldaScene.
            </returns>
        </member>
        <member name="M:Zelda.GameStates.IngameState.TryPickupOrUse">
            <summary>
            Tries to pickup or use any item the Player is interacting with.
            </summary>
        </member>
        <member name="M:Zelda.GameStates.IngameState.Save(System.Boolean)">
            <summary>
            Saves the current progress of the game.
            </summary>
            <param name="informPlayer">
            States whether the player should be informed about the save process.
            </param>
        </member>
        <member name="M:Zelda.GameStates.IngameState.ChangeDrawingPipeline(Zelda.Graphics.DrawingPipeline)">
            <summary>
            Attempts to change to the specified drawing pipeline.
            </summary>
            <param name="newDrawingPipeline">
            The DrawingPipeline to change to.
            </param>
            <returns>
            true if the change has been successful;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.GameStates.IngameState.OnKeyboardInput(System.Object,Microsoft.Xna.Framework.Input.KeyboardState@,Microsoft.Xna.Framework.Input.KeyboardState@)">
            <summary>
            Called every frame to check for keyboard input.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="keyState">The current state of the keyboard.</param>
            <param name="oldKeyState">The state of the keyboard one frame ago.</param>
        </member>
        <member name="M:Zelda.GameStates.IngameState.HandleKeyboardInput_WindowsAndSettings(Microsoft.Xna.Framework.Input.KeyboardState@,Microsoft.Xna.Framework.Input.Keys[])">
            <summary>
            Handles the keyboard input of the user;
            taking into account the keys that open/manipulate game windows and settings.
            </summary>
            <param name="oldKeyState">The state of the keyboard one frame ago.</param>
            <param name="pressedKeys">The keys the user currently has pressed.</param>
            <returns>Whether the game should stop handling input request for this frame.</returns>
        </member>
        <member name="M:Zelda.GameStates.IngameState.HandleKeyboardInput_Game(Microsoft.Xna.Framework.Input.KeyboardState@,Microsoft.Xna.Framework.Input.KeyboardState@,Microsoft.Xna.Framework.Input.Keys[])">
            <summary>
            Handles the keyboard input of the user;
            taking into account game related actions.
            </summary>
            <param name="keyState">The current state of the keyboard.</param>
            <param name="oldKeyState">The state of the keyboard one frame ago.</param>
            <param name="pressedKeys">The keys the player currently has pressed.</param>
        </member>
        <member name="M:Zelda.GameStates.IngameState.HandleQuickActionKey(Microsoft.Xna.Framework.Input.Keys,Microsoft.Xna.Framework.Input.KeyboardState@)">
            <summary>
            Handles the case of the user clicking one of the keys related to the Quick Action Buttons.
            </summary>
            <param name="key">The key to handle.</param>
            <param name="keyState">The current state of the keyboard.</param>
            <returns>Whether the keys has been handled as a Quick Action key.</returns>
        </member>
        <member name="M:Zelda.GameStates.IngameState.OnMouseInput(System.Object,Microsoft.Xna.Framework.Input.MouseState@,Microsoft.Xna.Framework.Input.MouseState@)">
            <summary>
            Called once a frame to handle general mouse input.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="mouseState">The current state of the mouse.</param>
            <param name="oldMouseState">the state of the mouse one frame ago.</param>
        </member>
        <member name="M:Zelda.GameStates.IngameState.ChangedFrom(Atom.IGameState)">
            <summary>
            Gets called the the user enters the IngameState.
            </summary>
            <param name="oldState">
            The old state of the game.
            </param>
        </member>
        <member name="M:Zelda.GameStates.IngameState.ChangedTo(Atom.IGameState)">
            <summary>
            Gets called the the user leaves the IngameState.
            </summary>
            <param name="newState">
            The new state of the game.
            </param>
        </member>
        <member name="M:Zelda.GameStates.IngameState.Dispose">
            <summary>
            Immediatly releases the unmanaged resources used by this IngameState.
            </summary>
        </member>
        <member name="M:Zelda.GameStates.IngameState.ExitToCharacterSelectionState">
            <summary>
            Exists this IngameState to the CharacterSelectionState. 
            </summary>
        </member>
        <member name="F:Zelda.GameStates.IngameState.isPaused">
            <summary>
            States whether the game is currently paused.
            </summary>
        </member>
        <member name="F:Zelda.GameStates.IngameState.player">
            <summary>
            The current player.
            </summary>
        </member>
        <member name="F:Zelda.GameStates.IngameState.profile">
            <summary>
            The profile of the player.
            </summary>
        </member>
        <member name="F:Zelda.GameStates.IngameState.scene">
            <summary>
            The current scene of the game.
            </summary>
        </member>
        <member name="F:Zelda.GameStates.IngameState.worldStatus">
            <summary>
            The current state of the game world.
            </summary>
        </member>
        <member name="F:Zelda.GameStates.IngameState.keySettings">
            <summary>
            Identifies the currently active <see cref="T:Zelda.KeySettings"/>.
            </summary>
        </member>
        <member name="F:Zelda.GameStates.IngameState.graphics">
            <summary>
            The GameGraphics object that holds all graphics-related objects.
            </summary>
        </member>
        <member name="F:Zelda.GameStates.IngameState.inactiveSceneUpdater">
            <summary>
            Reponsible for updating scenes after they have gone inactive; for example
            when the player switches the current zone.
            </summary>
        </member>
        <member name="F:Zelda.GameStates.IngameState.userInterface">
            <summary>
            The UI shown in the Ingame State.
            </summary>
        </member>
        <member name="F:Zelda.GameStates.IngameState.game">
            <summary>
            Stores a reference to the ZeldaGame object.
            </summary>
        </member>
        <member name="F:Zelda.GameStates.IngameState.backgroundMusic">
            <summary>
            Manages the background music of the game.
            </summary>
        </member>
        <member name="F:Zelda.GameStates.IngameState.audioSystem">
            <summary>
            The Atom.Fmod.AudioSystem object.
            </summary>
        </member>
        <member name="T:Zelda.GameStates.RandomTitleScreenEnemySpawner">
            <summary>
            Implements the spawning of random enemies in the title and character screens.
            </summary>
        </member>
        <member name="T:Zelda.GameStates.TitleScreenState">
            <summary>
            The Title Screen shows a short introduction to the game.
            </summary>
        </member>
        <member name="M:Zelda.GameStates.TitleScreenState.#ctor(Zelda.ZeldaGame)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.GameStates.TitleScreenState"/> class.x
            </summary>
            <param name="game">
            The game object.
            </param>
        </member>
        <member name="M:Zelda.GameStates.TitleScreenState.Load">
            <summary>
            Loads the TitleScreenState. This is automatically handled.
            </summary>
        </member>
        <member name="M:Zelda.GameStates.TitleScreenState.LoadMusic">
            <summary>
            Loads the music playn in the Title Screen.
            </summary>
        </member>
        <member name="M:Zelda.GameStates.TitleScreenState.GetMusicName">
            <summary>
            Randomly chooses the music that should be played in the title screen.
            </summary>
            <returns>
            The name that uniquely identifies the music resource to be played.
            </returns>
        </member>
        <member name="M:Zelda.GameStates.TitleScreenState.Unload">
            <summary>
            Unloads the TitleScreenState. This is automatically handled.
            </summary>
        </member>
        <member name="M:Zelda.GameStates.TitleScreenState.Draw(Atom.IDrawContext)">
            <summary>
            Draws the TitleScreenState.
            </summary>
            <param name="drawContext">
            The current IDrawContext.
            </param>
        </member>
        <member name="M:Zelda.GameStates.TitleScreenState.DrawPressSpace(Zelda.ZeldaDrawContext)">
            <summary>
            Draws the Press Space string.
            </summary>
            <param name="drawContext">
            The current ZeldaDrawContext.
            </param>
        </member>
        <member name="M:Zelda.GameStates.TitleScreenState.DrawLogo(Atom.Xna.ISpriteDrawContext)">
            <summary>
            Draws the TLoZ BC logo.
            </summary>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.GameStates.TitleScreenState.Update(Atom.IUpdateContext)">
            <summary>
            Updates the TitleScreenState.
            </summary>
            <param name="updateContext">
            The current IUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.GameStates.TitleScreenState.UpdateMusic(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates music-related stuff.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.GameStates.TitleScreenState.UpdateMusicFadeIn(Zelda.ZeldaUpdateContext)">
            <summary>
            Handles the fade-in of the background music.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.GameStates.TitleScreenState.UpdateMusicFadeOut(Zelda.ZeldaUpdateContext)">
            <summary>
            Handles the fade-out of the background music.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.GameStates.TitleScreenState.HandleInput">
            <summary>
            Handles the input of the user.
            </summary>
            <returns>
            true when the user has decided to leave the TitleScreen;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.GameStates.TitleScreenState.ShowTitleLogo">
            <summary>
            Tells the IGameState that the title-logo should be shown now.
            </summary>
        </member>
        <member name="M:Zelda.GameStates.TitleScreenState.ChangedFrom(Atom.IGameState)">
            <summary>
            Gets called when the current GameState changed to this GameState.
            </summary>
            <param name="oldState">
            The old state.
            </param>
        </member>
        <member name="M:Zelda.GameStates.TitleScreenState.ChangedTo(Atom.IGameState)">
            <summary>
            Gets called when the current GameState changed away from this GameState.
            </summary>
            <param name="newState">
            The bew state.
            </param>
        </member>
        <member name="M:Zelda.GameStates.TitleScreenState.OnMusicEnded(Atom.Fmod.Channel)">
            <summary>
            When the music stops we want to show the 'Title Logo'.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
        </member>
        <member name="F:Zelda.GameStates.TitleScreenState.scene">
            <summary>
            The scene displayed in the TitleScreenState.
            </summary>
        </member>
        <member name="F:Zelda.GameStates.TitleScreenState.spriteLogo">
            <summary>
            The logo-sprite.
            </summary>
        </member>
        <member name="F:Zelda.GameStates.TitleScreenState.isLogoShown">
            <summary>
            States whether the title-logo is shown.
            </summary>
        </member>
        <member name="F:Zelda.GameStates.TitleScreenState.logoAlpha">
            <summary>
            Alpha value of the logo. Used for blending.
            </summary>
        </member>
        <member name="F:Zelda.GameStates.TitleScreenState.pressSpaceTickTime">
            <summary>
            Stores the current tick value for the "Press Space" string.
            </summary>
        </member>
        <member name="F:Zelda.GameStates.TitleScreenState.hasScrollReachedEnd">
            <summary>
            States whether the automatic scrolling of the scene has reached the end.
            </summary>
        </member>
        <member name="F:Zelda.GameStates.TitleScreenState.userInterface">
            <summary>
            Used for input detection.
            </summary>
        </member>
        <member name="F:Zelda.GameStates.TitleScreenState.randomTitleScreenEnemySpawner">
            <summary>
            Spawns the random enemies on right mouse-click.
            </summary>
        </member>
        <member name="F:Zelda.GameStates.TitleScreenState.StringPressSpace">
            <summary>
            Stores the localized string 'Press Space'.
            </summary>
        </member>
        <member name="F:Zelda.GameStates.TitleScreenState.PressSpaceShownTime">
            <summary>
            States how long the "Press Space" string is shown.
            </summary>
        </member>
        <member name="F:Zelda.GameStates.TitleScreenState.PressSpaceTickInterval">
            <summary>
            States how long it takes until the "Press Space" string is shown again
            once it was shown.
            </summary>
        </member>
        <member name="F:Zelda.GameStates.TitleScreenState.PressSpaceShownEndTime">
            <summary>
            States when the "Press Space" string is hidden again.
            </summary>
        </member>
        <member name="F:Zelda.GameStates.TitleScreenState.music">
            <summary>
            The music that is played in the background.
            </summary>
        </member>
        <member name="F:Zelda.GameStates.TitleScreenState.musicChannel">
            <summary>
            The channel the music plays in.
            </summary>
        </member>
        <member name="F:Zelda.GameStates.TitleScreenState.fadeMusicOut">
            <summary>
            States whether the music should be faded out.
            </summary>
        </member>
        <member name="F:Zelda.GameStates.TitleScreenState.musicLogo">
            <summary>
            The music played when the user presses 'Space' for the first time.
            </summary>
        </member>
        <member name="F:Zelda.GameStates.TitleScreenState.musicFadeIner">
            <summary>
            The object responsible for fading in the background music of the TitleScreen.
            </summary>
        </member>
        <member name="F:Zelda.GameStates.TitleScreenState.font">
            <summary>
            The font used to draw the "Press Space" text.
            </summary>
        </member>
        <member name="F:Zelda.GameStates.TitleScreenState.game">
            <summary>
            The game object.
            </summary>
        </member>
        <member name="T:Zelda.Graphics.GameGraphics">
            <summary>
            Encapsulates the graphics related initialization and settings.
            </summary>
        </member>
        <member name="P:Zelda.Graphics.GameGraphics.Resolution">
            <summary>
            Gets the <see cref="T:Zelda.Graphics.IResolutionService"/> which provides access
            to the current resolution settings.
            </summary>
        </member>
        <member name="P:Zelda.Graphics.GameGraphics.Pipeline">
            <summary>
            Gets the currently used <see cref="T:Zelda.Graphics.IDrawingPipeline"/>.
            </summary>
        </member>
        <member name="P:Zelda.Graphics.GameGraphics.BloomPipeline">
            <summary>
            Gets the <see cref="T:Zelda.Graphics.BloomDrawingPipeline"/>; which may not be supported
            on the current hardware.
            </summary>
        </member>
        <member name="P:Zelda.Graphics.GameGraphics.ParticleRenderer">
            <summary>
            Gets the Atom.Xna.Particles.ParticleRenderer object.
            </summary>
        </member>
        <member name="P:Zelda.Graphics.GameGraphics.Device">
            <summary>
            Gets the xna GraphicsDevice that is required for drawing operations.
            </summary>
        </member>
        <member name="P:Zelda.Graphics.GameGraphics.DrawContext">
            <summary>
            Gets the ZeldaDrawContext that is used by default.
            </summary>
        </member>
        <member name="P:Zelda.Graphics.GameGraphics.SpriteLoader">
            <summary>
            Gets the IAssetLoader responsible for loading ISprite assets.
            </summary>
        </member>
        <member name="P:Zelda.Graphics.GameGraphics.TextureLoader">
            <summary>
            Gets the IAssetLoader responsible for loading Texture2D assets.
            </summary>
        </member>
        <member name="P:Zelda.Graphics.GameGraphics.SpriteSheetLoader">
            <summary>
            Gets the IAssetLoader responsible for loading ISpriteSheet assets.
            </summary>
        </member>
        <member name="M:Zelda.Graphics.GameGraphics.#ctor(Zelda.ZeldaGame)">
            <summary>
            Initializes a new instance of the GameGraphics class.
            </summary>
            <param name="game">
            The main game object that provides access to all game-services.
            </param>
        </member>
        <member name="M:Zelda.Graphics.GameGraphics.RegisterBasicServices">
            <summary>
            Registers the basic services this GameGraphics instance provides.
            </summary>
        </member>
        <member name="M:Zelda.Graphics.GameGraphics.RegisterServices">
            <summary>
            Registers the services this GameGraphics instance offers.
            </summary>
        </member>
        <member name="M:Zelda.Graphics.GameGraphics.OnPreparingDeviceSettings(System.Object,Microsoft.Xna.Framework.PreparingDeviceSettingsEventArgs)">
            <summary>
            Gets called when the Xna graphics device is preparing its settings.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">Stores the event arguments.</param>
        </member>
        <member name="M:Zelda.Graphics.GameGraphics.Initialize">
            <summary>
            Initializes the GameGraphics.
            </summary>
        </member>
        <member name="M:Zelda.Graphics.GameGraphics.LoadContent(System.Boolean)">
            <summary>
            Loads globally required graphics content.
            </summary>
        </member>
        <member name="M:Zelda.Graphics.GameGraphics.PreloadSprites">
            <summary>
            Loads the sprites used by the game
            </summary>
        </member>
        <member name="M:Zelda.Graphics.GameGraphics.UnloadContent">
            <summary>
            Unloads the content loaded by this GameGraphics object.
            </summary>
        </member>
        <member name="M:Zelda.Graphics.GameGraphics.ChangePipeline(Zelda.Graphics.DrawingPipeline)">
            <summary>
            Tries to change the current IDrawingPipeline.
            </summary>
            <param name="newDrawingPipeline">
            The DrawingPipeline to change to.
            </param>
            <returns>
            true if the change has been successful;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Graphics.GameGraphics.GetDrawingPipeline(Zelda.Graphics.DrawingPipeline)">
            <summary>
            Gets the IDrawingPipeline that matches the given DrawingPipeline enumeration.
            </summary>
            <param name="drawingPipeline">
            A DrawingPipeline enumeration.
            </param>
            <returns>
            The matching IDrawingPipeline.
            </returns>
        </member>
        <member name="M:Zelda.Graphics.GameGraphics.ChangePipeline(Zelda.Graphics.IDrawingPipeline)">
            <summary>
            Changes the currently used IDrawingPipeline.
            </summary>
            <param name="newDrawingPipeline">
            The IDrawingPipeline to change to.
            </param>
        </member>
        <member name="M:Zelda.Graphics.GameGraphics.SetVsync(System.Boolean)">
            <summary>
            Enables or disables V-sync.
            </summary>
            <param name="state">
            States whether to enable or disable v-sync.
            </param>
        </member>
        <member name="M:Zelda.Graphics.GameGraphics.SetFullScreen(System.Boolean)">
            <summary>
            Enables or disables fullscreen mode.
            </summary>
            <param name="state">
            States whether to enable or disable fullscreen mode.
            </param>
        </member>
        <member name="M:Zelda.Graphics.GameGraphics.ApplyChanges">
            <summary>
            Applies graphics changes done do the device.
            </summary>
        </member>
        <member name="F:Zelda.Graphics.GameGraphics.linksSprites">
            <summary>
            The sprites used to draw the main character.
            </summary>
        </member>
        <member name="F:Zelda.Graphics.GameGraphics.drawingPipeline">
            <summary>
            The IDrawingPipeline that is currently used by the game.
            </summary>
        </member>
        <member name="F:Zelda.Graphics.GameGraphics.defaultDrawingPipeline">
            <summary>
            The default IDrawingPipeline that should run on all supported platforms.
            </summary>
        </member>
        <member name="F:Zelda.Graphics.GameGraphics.bloomDrawingPipeline">
            <summary>
            The IDrawingPipeline that applies a bloom effect. Not supported on all platforms.
            </summary>
        </member>
        <member name="F:Zelda.Graphics.GameGraphics.drawContext">
            <summary>
            The IDrawContext used by the Game.
            </summary>
        </member>
        <member name="F:Zelda.Graphics.GameGraphics.rescaler">
            <summary>
            Is responsible for rescaling the drawn image to fit the whole scaled window.
            </summary>
        </member>
        <member name="F:Zelda.Graphics.GameGraphics.sceneDrawer">
            <summary>
            The ZeldaSceneDrawer that encapsulates the scene drawing operation.
            </summary>
        </member>
        <member name="F:Zelda.Graphics.GameGraphics.itemInfoVisualizer">
            <summary>
            Provides a mechanism that allows the drawing of the relevant information
            the players needs to know about an item.
            </summary>
        </member>
        <member name="F:Zelda.Graphics.GameGraphics.particleRenderer">
            <summary>
            The Atom.Xna.Particles.ParticleRenderer object.
            </summary>
        </member>
        <member name="F:Zelda.Graphics.GameGraphics.graphics">
            <summary>
            The Microsoft.Xna.Framework.GraphicsDeviceManager object.
            </summary>
        </member>
        <member name="F:Zelda.Graphics.GameGraphics.renderTargetFactory">
            <summary>
            The factory responsible for creating all full-screen RenderTargets used by the game.
            </summary>
        </member>
        <member name="F:Zelda.Graphics.GameGraphics.lightMap">
            <summary>
            The LightMap used during the light drawing pass.
            </summary>
        </member>
        <member name="F:Zelda.Graphics.GameGraphics.game">
            <summary>
            The main game object that provides access to all game-services.
            </summary>
        </member>
        <member name="F:Zelda.Graphics.GameGraphics.effectLoader">
            <summary>
            The IAssetLoader responsible for loading Effect assets.
            </summary>
        </member>
        <member name="F:Zelda.Graphics.GameGraphics.textureLoader">
            <summary>
            The IAssetLoader responsible for loading Texture2D assets.
            </summary>
        </member>
        <member name="F:Zelda.Graphics.GameGraphics.fontLoader">
            <summary>
            The IAssetLoader responsible for loading IFont assets.
            </summary>
        </member>
        <member name="F:Zelda.Graphics.GameGraphics.spriteSheetLoader">
            <summary>
            The IAssetLoader responsible for loading ISpriteSheet assets.
            </summary>
        </member>
        <member name="F:Zelda.Graphics.GameGraphics.spriteLoader">
            <summary>
            The IAssetLoader responsible for loading ISprite assets.
            </summary>
        </member>
        <member name="F:Zelda.Graphics.GameGraphics.resolution">
            <summary>
            Provides access to the current resolution that the game is running under.
            </summary>
        </member>
        <member name="T:Zelda.Graphics.ResolutionService">
            <summary>
            
            </summary>
        </member>
        <member name="P:Zelda.Graphics.ResolutionService.IsWideAspectRatio">
            <summary>
            Gets a value indicating whether the current AspectRatio is a wide-screen ratio.
            </summary>
        </member>
        <member name="P:Zelda.Graphics.ResolutionService.ViewSize">
            <summary>
            Gets the size of the area the game is drawing to.
            </summary>
            <remarks>
            The view size differs from the client bounds of the game window
            as in that the game is drawn using the ViewSize,
            and then rescaled to fill up the game window.
            </remarks>
            <value>
            This value is constant and
            won't change during the game.
            </value>
        </member>
        <member name="P:Zelda.Graphics.ResolutionService.AspectRatio">
            <summary>
            Gets the aspect ratio that the game uses.
            </summary>
            <value>
            This value is constant and
            won't change during the game.
            </value>
        </member>
        <member name="P:Zelda.Graphics.ResolutionService.IsFullscreen">
            <summary>
            Gets a value indicating whether the game is in fullscreen mode.
            </summary>
        </member>
        <member name="P:Zelda.Graphics.ResolutionService.OutputSize">
            <summary>
            Gets the size of the area the game is drawing to.
            </summary>
            <remarks>
            The view size differs from the client bounds of the game window
            as in that the game is drawn using the ViewSize,
            and then rescaled to fill up the game window.
            </remarks>
        </member>
        <member name="M:Zelda.Graphics.ResolutionService.#ctor(Microsoft.Xna.Framework.GraphicsDeviceManager,Atom.Diagnostics.ILog)">
            <summary>
            Initializes a new instance of the ResolutionService class.
            </summary>
            <param name="graphics">
            The graphics device manager with which the graphics device will be created.
            </param>
            <param name="log">
            Provides a mechanism that allows logging of information.
            </param>
        </member>
        <member name="M:Zelda.Graphics.ResolutionService.GetAdjustedBackBufferSize(Atom.Math.Point2)">
            <summary>
            Gets the size that the backbuffer should have.
            </summary>
            <param name="originalSize">
            The original size of the backbuffer.
            </param>
            <returns>
            The adjusted backbuffer size.
            </returns>
        </member>
        <member name="M:Zelda.Graphics.ResolutionService.GetViewSizeFor(Zelda.Graphics.AspectRatio)">
            <summary>
            Gets the resolution at which the game is originally would be rendered
            at when using the given aspect-ratio.
            </summary>
            <param name="aspectRatio"></param>
            <returns></returns>
        </member>
        <member name="M:Zelda.Graphics.ResolutionService.EnsureAspectRatioSupport(Microsoft.Xna.Framework.Graphics.GraphicsAdapter)">
            <summary>
            Ensures that the current aspect ratio is supported.
            </summary>
            <param name="adapter">
            The graphics adapter that will be used.
            </param>
        </member>
        <member name="F:Zelda.Graphics.ResolutionService.viewSize">
            <summary>
            The size at which the game is originally rendered at.
            </summary>
        </member>
        <member name="F:Zelda.Graphics.ResolutionService.aspectRatio">
            <summary>
            The aspect ratio that the game is currently running under.
            </summary>
        </member>
        <member name="F:Zelda.Graphics.ResolutionService.desktopDisplayMode">
            <summary>
            Stores the display-mode that the user used just when he entered the game.
            </summary>
        </member>
        <member name="F:Zelda.Graphics.ResolutionService.log">
            <summary>
            Provides a mechanism that allows logging of information.
            </summary>
        </member>
        <member name="T:Zelda.Graphics.ViewToWindowRescaler">
            <summary>
            The ViewToWindowRescaler is used to rescale the
            image drawn each frame to completly fill the game window.
            This allows the user to change the size of the window.
            This class can't be inherited.
            </summary>
        </member>
        <member name="E:Zelda.Graphics.ViewToWindowRescaler.ScaleChanged">
            <summary>
            Raised when the scaling factor of this ViewToWindowRescaler has changed.
            </summary>
        </member>
        <member name="P:Zelda.Graphics.ViewToWindowRescaler.Target">
            <summary>
            Gets the target to which this IViewToWindowRescaler draws to.
            </summary>
        </member>
        <member name="M:Zelda.Graphics.ViewToWindowRescaler.#ctor(Atom.Xna.IRenderTarget2DFactory,Zelda.ZeldaGame)">
            <summary>
            Initializes a new instance of the ViewToWindowRescaler class.
            </summary>
            <param name="renderTargetFactory">
            Provides a mechanism that allows the creation of RenderTargets.
            </param>
            <param name="game">
            The ZeldaGame object.
            </param>
        </member>
        <member name="M:Zelda.Graphics.ViewToWindowRescaler.Initialize">
            <summary>
            Initializes this ViewToWindowRescaler.
            </summary>
        </member>
        <member name="M:Zelda.Graphics.ViewToWindowRescaler.LoadContent">
            <summary>
            Loads the content used by this ViewToWindowRescaler.
            </summary>
        </member>
        <member name="M:Zelda.Graphics.ViewToWindowRescaler.Begin">
            <summary>
            Begins drawing to the RenderTarget that is used
            to scale the drawn game to fit into the complete game window.
            </summary>
        </member>
        <member name="M:Zelda.Graphics.ViewToWindowRescaler.End(Zelda.ZeldaDrawContext)">
            <summary>
            Ends drawing to the RenderTarget and then outputs the result 
            to the Back Buffer.
            </summary>
            <param name="drawContext">
            The current ZeldaDrawContext.
            </param>
        </member>
        <member name="M:Zelda.Graphics.ViewToWindowRescaler.Dispose">
            <summary>
            Immediatly releases the unmanaged resources used by this ViewToWindowRescaler.
            </summary>
        </member>
        <member name="M:Zelda.Graphics.ViewToWindowRescaler.RefreshScalingFactor">
            <summary>
            Refreshes the Scaling Factor value.
            </summary>
        </member>
        <member name="M:Zelda.Graphics.ViewToWindowRescaler.OnWindowClientSizeChanged(System.Object,System.EventArgs)">
            <summary>
            Called when the window has been resized.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The EventArgs that contains all event data.</param>
        </member>
        <member name="F:Zelda.Graphics.ViewToWindowRescaler.scalingFactor">
            <summary>
            The currently cached scaling factor.
            </summary>
        </member>
        <member name="F:Zelda.Graphics.ViewToWindowRescaler.viewOffset">
            <summary>
            The offset from the upper left corner of the screen to the upper left corner
            of the actual game view. Used to create black borders.
            </summary>
        </member>
        <member name="F:Zelda.Graphics.ViewToWindowRescaler.scalingTarget">
            <summary>
            The RenderTarget that is drawn to, instead of the Back Buffer, if isScaling is true.
            The output of the RenderTarget is then drawn into the Back Buffer, rescaled to fit the complete window.
            </summary>
        </member>
        <member name="F:Zelda.Graphics.ViewToWindowRescaler.device">
            <summary>
            The Xna graphics device required for rendering.
            </summary>
        </member>
        <member name="F:Zelda.Graphics.ViewToWindowRescaler.game">
            <summary>
            Identifies the ZeldaGame that owns this ViewToWindowRescaler.
            </summary>
        </member>
        <member name="F:Zelda.Graphics.ViewToWindowRescaler.renderTargetFactory">
            <summary>
            Provides a mechanism that allows the creation of RenderTargets.
            </summary>
        </member>
        <member name="T:Zelda.Program">
            <summary>
            Stores the entry point of the game.
            </summary>
        </member>
        <member name="M:Zelda.Program.Main">
            <summary>
            Defines the entry point of the game.
            </summary>
        </member>
        <member name="T:Zelda.Saving.WorldStatusProvider">
            <summary>
            Implements a mechanism to receive the current status of the world.
            </summary>
        </member>
        <member name="P:Zelda.Saving.WorldStatusProvider.WorldStatus">
            <summary>
            Gets the <see cref="P:Zelda.Saving.WorldStatusProvider.WorldStatus"/> object;
            responsible for holding the overal state of the game world.
            </summary>
        </member>
        <member name="M:Zelda.Saving.WorldStatusProvider.#ctor(Zelda.GameStates.IngameState)">
            <summary>
            Initializes a new instance of the WorldStatusProvider class.
            </summary>
            <param name="ingameState">
            The GameState that is running the actual game logic.
            </param>
        </member>
        <member name="F:Zelda.Saving.WorldStatusProvider.ingameState">
            <summary>
            Identifies the GameState that is running the actual game logic.
            </summary>
        </member>
        <member name="T:Zelda.Settings">
            <summary>
            Stores the configuration data of the zelda game.
            </summary>
        </member>
        <member name="P:Zelda.Settings.Width">
            <summary>
            Gets or sets the resolution of the game on the x-axis.
            </summary>
        </member>
        <member name="P:Zelda.Settings.Height">
            <summary>
            Gets or sets the resolution of the game on the y-axis.
            </summary>
        </member>
        <member name="P:Zelda.Settings.IsFullscreen">
            <summary>
            Gets or sets a value indicating whether this game
            currently runs in fullscreen mode.
            </summary>
        </member>
        <member name="P:Zelda.Settings.AspectRatio">
            <summary>
            Gets or sets the aspect ratio of the game.
            </summary>
            <remarks>
            If false then the game will
            </remarks>
        </member>
        <member name="P:Zelda.Settings.IsFullscreenStretched">
            <summary>
            Gets or sets a value indicating whether the game
            will stretch the game view to the fully available space if <see cref="P:Zelda.Settings.IsFullscreen"/> is true.
            </summary>
            <remarks>
            If false then the game will add black-borders around the un-stretched game view.
            </remarks>
        </member>
        <member name="P:Zelda.Settings.VSync">
            <summary>
            Gets or sets a value indicating whether virtual synchronisation is enabled.
            </summary>
        </member>
        <member name="P:Zelda.Settings.FixedStep">
            <summary>
            Gets or sets a value indicating whether a fixed-step game loop is used.
            </summary>
        </member>
        <member name="P:Zelda.Settings.LastSavedProfile">
            <summary>
            Gets or sets the name of the last saved profile.
            </summary>
        </member>
        <member name="P:Zelda.Settings.RubyCountShown">
            <summary>
            Gets or sets a value indicating whether the ruby count
            is permanently shown.
            </summary>
        </member>
        <member name="P:Zelda.Settings.MasterVolume">
            <summary>
            Gets or sets the master volume of the game; where 0 = silent and 1 = full volume.
            </summary>
        </member>
        <member name="P:Zelda.Settings.MusicVolume">
            <summary>
            Gets or sets the music volume of the game; where 0 = silent and 1 = full volume.
            </summary>
        </member>
        <member name="P:Zelda.Settings.EffectVolume">
            <summary>
            Gets or sets the effect volume of the game; where 0 = silent and 1 = full volume.
            </summary>
        </member>
        <member name="P:Zelda.Settings.AutoSaveEnabled">
            <summary>
            Gets or sets a value indicating whether the game automatically saves the progress of the player.
            </summary>
        </member>
        <member name="P:Zelda.Settings.ItemDescriptionBoxAlpha">
            <summary>
            Gets or sets the alpha-value of the color of the item description background. 0=invisible, 255=fully visible
            </summary>
        </member>
        <member name="P:Zelda.Settings.FileName">
            <summary>
            Gets the full path at which the settings file is located.
            </summary>
        </member>
        <member name="F:Zelda.Settings.instance">
            <summary>
            Stores the singleton instance of the Settings class.
            </summary>
        </member>
        <member name="P:Zelda.Settings.Instance">
            <summary>
            Gets the singleton instance of the Settings class.
            </summary>
        </member>
        <member name="M:Zelda.Settings.#ctor">
            <summary>
            Prevents the creation of <see cref="T:Zelda.Settings"/> class.
            </summary>
        </member>
        <member name="T:Zelda.UI.HeartBar">
            <summary>
            Visualizes the health status of the player using
            hearts, just like in any other Zelda Game.
            </summary>
            <remarks>
            The difference is that the Player isn't going to gain any hearts,
            but starts with 20.
            <para>
            20 hearts shown = 100% life
            10 hearts shown =  50% life
             0 hearts shown =   0% life
            </para>
            </remarks>
        </member>
        <member name="F:Zelda.UI.HeartBar.HeartTickTime">
            <summary>
            The time the heart animation stays in one state before changing. (little-big-little-.. tick)
            </summary>
        </member>
        <member name="F:Zelda.UI.HeartBar.HeartCount">
            <summary>
            The number of hearts used to display the player's life/maximum life ratio.
            </summary>
        </member>
        <member name="P:Zelda.UI.HeartBar.Player">
            <summary> 
            Gets or sets the PlayerEntity whos Life State
            is visualized by the <see cref="T:Zelda.UI.HeartBar"/>. 
            </summary>
        </member>
        <member name="M:Zelda.UI.HeartBar.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.UI.HeartBar"/> class.
            </summary>
            <param name="serviceProvider">
            Provides access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.UI.HeartBar.OnDraw(Atom.Xna.ISpriteDrawContext)">
            <summary>
            Called when this UIElement is drawing itself.
            </summary>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.HeartBar.OnUpdate(Atom.IUpdateContext)">
            <summary>
            Called when this UIElement is updating itself.
            </summary>
            <param name="updateContext">
            The current IUpdateContext.
            </param>
        </member>
        <member name="F:Zelda.UI.HeartBar.lastHeartTick">
            <summary>
            Current animation tick of the last heart.
            </summary>
        </member>
        <member name="F:Zelda.UI.HeartBar.spriteHeart_Big1of4">
            <summary>
            The big heart sprites.
            </summary>
        </member>
        <member name="F:Zelda.UI.HeartBar.spriteHeart_Big2of4">
            <summary>
            The big heart sprites.
            </summary>
        </member>
        <member name="F:Zelda.UI.HeartBar.spriteHeart_Big3of4">
            <summary>
            The big heart sprites.
            </summary>
        </member>
        <member name="F:Zelda.UI.HeartBar.spriteHeart_Big4of4">
            <summary>
            The big heart sprites.
            </summary>
        </member>
        <member name="F:Zelda.UI.HeartBar.spriteHeart_Small0of4">
            <summary>
            The small heart sprites.
            </summary>
        </member>
        <member name="F:Zelda.UI.HeartBar.spriteHeart_Small1of4">
            <summary>
            The small heart sprites.
            </summary>
        </member>
        <member name="F:Zelda.UI.HeartBar.spriteHeart_Small2of4">
            <summary>
            The small heart sprites.
            </summary>
        </member>
        <member name="F:Zelda.UI.HeartBar.spriteHeart_Small3of4">
            <summary>
            The small heart sprites.
            </summary>
        </member>
        <member name="F:Zelda.UI.HeartBar.spriteHeart_Small4of4">
            <summary>
            The small heart sprites.
            </summary>
        </member>
        <member name="T:Zelda.UI.ManaBar">
            <summary>
            Visualizes the mana status of the player.
            </summary>
        </member>
        <member name="F:Zelda.UI.ManaBar.Color">
            <summary>
            The color of the mana.
            </summary>
        </member>
        <member name="F:Zelda.UI.ManaBar.ColorEmpty">
            <summary>
            The color of the empty mana.
            </summary>
        </member>
        <member name="P:Zelda.UI.ManaBar.Player">
            <summary> 
            Gets or sets the PlayerEntity whos Life State
            is visualized by the <see cref="T:Zelda.UI.ManaBar"/>. 
            </summary>
        </member>
        <member name="M:Zelda.UI.ManaBar.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.UI.ManaBar"/> class.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.UI.ManaBar.OnDraw(Atom.Xna.ISpriteDrawContext)">
            <summary>
            Called when this UIElement is drawing itself.
            </summary>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.ManaBar.OnUpdate(Atom.IUpdateContext)">
            <summary>
            Called when this UIElement is updating itself.
            </summary>
            <param name="updateContext">
            The current IUpdateContext.
            </param>
        </member>
        <member name="F:Zelda.UI.ManaBar.spriteBar">
            <summary>
            The sprite that is used to visualize the ManaBar.
            </summary>
        </member>
        <member name="T:Zelda.UI.SideBar">
            <summary>
            The Side Bar provides an easy mechanism
            to open the individual windows, such as the 
            Character, Equipment, Quest or Inventory window.
            </summary>
        </member>
        <member name="F:Zelda.UI.SideBar.ColorMouseOver">
            <summary>
            The color the sprite of an element in the SideBar is tinted in
            when the player moves the mouse over it.
            </summary>
        </member>
        <member name="P:Zelda.UI.SideBar.Player">
            <summary>
            Gets or sets the <see cref="T:Zelda.Entities.PlayerEntity"/> whose settings / status / etc
            can be accessed using this SideBar.
            </summary>
        </member>
        <member name="M:Zelda.UI.SideBar.#ctor(Zelda.GameStates.IngameState)">
            <summary>
            Initializes a new instance of the SideBar class.
            </summary>
            <param name="ingameState">
            The IGameState that controls the behaviour of the actual game.
            </param>
        </member>
        <member name="M:Zelda.UI.SideBar.InitializeComponents(Zelda.IZeldaServiceProvider)">
            <summary>
            Creates and setups the buttons of the (right) sidebar.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.UI.SideBar.AddButton(System.String,Atom.Math.Vector2,Atom.Xna.UI.MouseInputEventHandler,Atom.Xna.ISpriteLoader)">
            <summary>
            Adds a new SpriteButton to this SideBar.
            </summary>
            <param name="spriteName">
            The name of the sprite.
            </param>
            <param name="position">
            The position of the new Button.
            </param>
            <param name="onClicked">
            The event that should be raised when the new Button is clicked.
            </param>
            <param name="spriteLoader">
            Provides a mechanism for loading sprite resources.
            </param>
            <returns>
            The newly created SpriteButton.
            </returns>
        </member>
        <member name="M:Zelda.UI.SideBar.AddButton(System.String,System.String,Atom.Math.Vector2,Atom.Xna.UI.MouseInputEventHandler,Atom.Xna.ISpriteLoader)">
            <summary>
            Adds a new SpriteButton to this SideBar.
            </summary>
            <param name="spriteName">
            The name of the sprite.
            </param>
            <param name="spriteSelectedName">
            The name of the sprite used when the button is selected.
            </param>
            <param name="position">
            The position of the new Button.
            </param>
            <param name="onClicked">
            The event that should be raised when the new Button is clicked.
            </param>
            <param name="spriteLoader">
            Provides a mechanism for loading sprite resources.
            </param>
            <returns>
            The newly created SpriteButton.
            </returns>
        </member>
        <member name="M:Zelda.UI.SideBar.HasButtonAt(Atom.Math.Point2)">
            <summary>
            Gets a value indicating whether there is any side-bar butotn at the given location.
            </summary>
            <param name="location">
            The location to query.
            </param>
            <returns>
            true if there is a direct hit; -or- otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.UI.SideBar.OnPlayerLevelUp(System.Object,System.EventArgs)">
            <summary>
            Raised when the player has gained a level.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
            <param name="e">
            The EventArgs that contain the event data.
            </param>
        </member>
        <member name="M:Zelda.UI.SideBar.OnCharacterWindowOpened(System.Object,System.EventArgs)">
            <summary>
            Raised when the player has opened the Character Status Window.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
            <param name="e">
            The EventArgs that contain the event data.
            </param>
        </member>
        <member name="M:Zelda.UI.SideBar.OnTalentWindowOpened(System.Object,System.EventArgs)">
            <summary>
            Raised when the player has opened the Talent Tree Window.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
            <param name="e">
            The EventArgs that contain the event data.
            </param>
        </member>
        <member name="M:Zelda.UI.SideBar.OnRecipesWindowOpened(System.Object,System.EventArgs)">
            <summary>
            Raised when the player has opened the Recipes List Window.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
            <param name="e">
            The EventArgs that contain the event data.
            </param>
        </member>
        <member name="M:Zelda.UI.SideBar.OnAdded(Atom.Xna.UI.UserInterface)">
            <summary>
            Gets called when this SideBar has been added to the given UserInterface.
            </summary>
            <param name="userInterface">
            The related UserInterface.
            </param>
        </member>
        <member name="M:Zelda.UI.SideBar.OnRemoved(Atom.Xna.UI.UserInterface)">
            <summary>
            Gets called when this SideBar has been removed from the given UserInterface.
            </summary>
            <param name="userInterface">
            The related UserInterface.
            </param>
        </member>
        <member name="M:Zelda.UI.SideBar.OnIsVisibleChanged">
            <summary>
            Gets called when the IsVisible state of this SideBar has changed.
            </summary>
        </member>
        <member name="M:Zelda.UI.SideBar.OnIsEnabledChanged">
            <summary>
            Gets called when the IsEnabled state of this SideBar has changed.
            </summary>
        </member>
        <member name="M:Zelda.UI.SideBar.OnLaternButton_Clicked(System.Object,Microsoft.Xna.Framework.Input.MouseState@,Microsoft.Xna.Framework.Input.MouseState@)">
            <summary>
            Called when the latern button is clicked.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="mouseState">The current state of the mouse.</param>
            <param name="oldMouseState">The state of the mouse one frame ago.</param>
        </member>
        <member name="M:Zelda.UI.SideBar.OnFairyButton_Clicked(System.Object,Microsoft.Xna.Framework.Input.MouseState@,Microsoft.Xna.Framework.Input.MouseState@)">
            <summary>
            Called when the Fairy button is clicked.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="mouseState">The current state of the mouse.</param>
            <param name="oldMouseState">The state of the mouse one frame ago.</param>
        </member>
        <member name="M:Zelda.UI.SideBar.OnInventoryButton_Clicked(System.Object,Microsoft.Xna.Framework.Input.MouseState@,Microsoft.Xna.Framework.Input.MouseState@)">
            <summary>
            Called when the Inventory Button is clicked.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="mouseState">The current state of the mouse.</param>
            <param name="oldMouseState">The state of the mouse one frame ago.</param>
        </member>
        <member name="M:Zelda.UI.SideBar.OnQuestLogButton_Clicked(System.Object,Microsoft.Xna.Framework.Input.MouseState@,Microsoft.Xna.Framework.Input.MouseState@)">
            <summary>
            Called when the Quest Log Button is clicked.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="mouseState">The current state of the mouse.</param>
            <param name="oldMouseState">The state of the mouse one frame ago.</param>
        </member>
        <member name="M:Zelda.UI.SideBar.OnEquipmentButton_Clicked(System.Object,Microsoft.Xna.Framework.Input.MouseState@,Microsoft.Xna.Framework.Input.MouseState@)">
            <summary>
            Called when the Equipment Window Button is clicked.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="mouseState">The current state of the mouse.</param>
            <param name="oldMouseState">The state of the mouse one frame ago.</param>
        </member>
        <member name="M:Zelda.UI.SideBar.OnCharacterButton_Clicked(System.Object,Microsoft.Xna.Framework.Input.MouseState@,Microsoft.Xna.Framework.Input.MouseState@)">
            <summary>
            Called when the Character Window Button is clicked.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="mouseState">The current state of the mouse.</param>
            <param name="oldMouseState">The state of the mouse one frame ago.</param>
        </member>
        <member name="M:Zelda.UI.SideBar.OnTalentsButton_Clicked(System.Object,Microsoft.Xna.Framework.Input.MouseState@,Microsoft.Xna.Framework.Input.MouseState@)">
            <summary>
            Called when the Talent Window Button is clicked.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="mouseState">The current state of the mouse.</param>
            <param name="oldMouseState">The state of the mouse one frame ago.</param>
        </member>
        <member name="M:Zelda.UI.SideBar.OnMagicBottleButton_Clicked(System.Object,Microsoft.Xna.Framework.Input.MouseState@,Microsoft.Xna.Framework.Input.MouseState@)">
            <summary>
            Called when the Magic Bottle Button is clicked.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="mouseState">The current state of the mouse.</param>
            <param name="oldMouseState">The state of the mouse one frame ago.</param>
        </member>
        <member name="M:Zelda.UI.SideBar.OnDraw(Atom.Xna.ISpriteDrawContext)">
            <summary>
            Called when this SideBar is drawing itself.
            </summary>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.SideBar.OnUpdate(Atom.IUpdateContext)">
            <summary>
            Called when this SideBar is updating itself.
            </summary>
            <param name="updateContext">
            The current IUpdateContext.
            </param>
        </member>
        <member name="F:Zelda.UI.SideBar.player">
            <summary>
            Represents the storage field of the Player property.
            </summary>
        </member>
        <member name="F:Zelda.UI.SideBar.buttonCharacter">
            <summary>
            The button that when clicked opens various Ingame Window.
            </summary>
        </member>
        <member name="F:Zelda.UI.SideBar.buttonTalent">
            <summary>
            The button that when clicked opens various Ingame Window.
            </summary>
        </member>
        <member name="F:Zelda.UI.SideBar.buttonBottle">
            <summary>
            The button that when clicked opens various Ingame Window.
            </summary>
        </member>
        <member name="F:Zelda.UI.SideBar.buttonEquipment">
            <summary>
            The button that when clicked opens various Ingame Window.
            </summary>
        </member>
        <member name="F:Zelda.UI.SideBar.buttonLatern">
            <summary>
            The button that when clicked opens various Ingame Window.
            </summary>
        </member>
        <member name="F:Zelda.UI.SideBar.buttonFairy">
            <summary>
            The button that when clicked opens various Ingame Window.
            </summary>
        </member>
        <member name="F:Zelda.UI.SideBar.sideBarButtons">
            <summary>
            The list of SpriteButtons in this SideBar.
            </summary>
        </member>
        <member name="F:Zelda.UI.SideBar.userInterface">
            <summary>
            Identifies the IngameUserInterface that contains this SideBar.
            </summary>
        </member>
        <member name="F:Zelda.UI.SideBar.ingameState">
            <summary>
            Identifies the IGameState that represents the actual game..
            </summary>
        </member>
        <member name="T:Zelda.UI.ColorComponentSlider">
            <summary>
            Allows the user to select the value of a single color component.
            </summary>
        </member>
        <member name="E:Zelda.UI.ColorComponentSlider.ValueChanged">
            <summary>
            Raised when the value of this ColorComponentSlider changed.
            </summary>
        </member>
        <member name="P:Zelda.UI.ColorComponentSlider.Value">
            <summary>
            Gets or sets the value of this ColorComponentSlider.
            </summary>
        </member>
        <member name="M:Zelda.UI.ColorComponentSlider.#ctor(Atom.Xna.ColorComponent,Atom.Math.Vector2)">
            <summary>
            Initializes a new instance of the ColorComponentSlider class.
            </summary>
            <param name="component">
            The component that this slider affects.
            </param>
            <param name="position">
            The position of the UIElement.
            </param>
        </member>
        <member name="M:Zelda.UI.ColorComponentSlider.OnDraw(Atom.Xna.ISpriteDrawContext)">
            <summary>
            Called when this ColorComponentSlider is drawing itself.
            </summary>
            <param name="drawContext">
            The current content.
            </param>
        </member>
        <member name="M:Zelda.UI.ColorComponentSlider.OnUpdate(Atom.IUpdateContext)">
            <summary>
            Called when this ColorComponentSlider is updating itself.
            </summary>
            <param name="updateContext">
            The current context.
            </param>
        </member>
        <member name="M:Zelda.UI.ColorComponentSlider.HandleRelatedMouseInput(Microsoft.Xna.Framework.Input.MouseState@,Microsoft.Xna.Framework.Input.MouseState@)">
            <summary>
            Callen when mouse input happened within this UIElement.
            </summary>
            <param name="mouseState">
            The current state of the mouse.
            </param>
            <param name="oldMouseState">
            The old state of the mouse.
            </param>
            <returns>
            True if input should be bassed to elements behind this element;-or- otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.UI.ColorComponentSlider.HandleMouseInput(Microsoft.Xna.Framework.Input.MouseState@,Microsoft.Xna.Framework.Input.MouseState@)">
            <summary>
            Called when mouse input happens while this UIElement is active.
            </summary>
            <param name="mouseState">
            The current state of the mouse.
            </param>
            <param name="oldMouseState">
            The old state of the mouse.
            </param>
        </member>
        <member name="M:Zelda.UI.ColorComponentSlider.OnIsVisibleChanged">
            <summary>
            Called when the IsVisible state of this UIElement has changed.
            </summary>
        </member>
        <member name="M:Zelda.UI.ColorComponentSlider.OnIsEnabledChanged">
            <summary>
            Called when the IsEnabled state of this UIElement has changed.
            </summary>
        </member>
        <member name="M:Zelda.UI.ColorComponentSlider.OnAdded(Atom.Xna.UI.UserInterface)">
            <summary>
            Called when this UIElement has been added to the UserInterface.
            </summary>
            <param name="userInterface">
            The related UserInterface.
            </param>
        </member>
        <member name="M:Zelda.UI.ColorComponentSlider.OnRemoved(Atom.Xna.UI.UserInterface)">
            <summary>
            Called when this UIElement has been removed from the UserInterface.
            </summary>
            <param name="userInterface">
            The related UserInterface.
            </param>
        </member>
        <member name="T:Zelda.UI.ColorSelector">
            <summary>
            Allows the selected of a RGB color.
            </summary>
        </member>
        <member name="E:Zelda.UI.ColorSelector.ColorChanged">
            <summary>
            Raised when the Color has changed.
            </summary>
        </member>
        <member name="P:Zelda.UI.ColorSelector.Color">
            <summary>
            Gets or sets the color used by the selector.
            </summary>
        </member>
        <member name="M:Zelda.UI.ColorSelector.#ctor(Atom.Math.Vector2,System.String)">
            <summary>
            Initializes a new instance of the ColorSelectorclass.
            </summary>
            <param name="position">
            The position of the selector element.
            </param>
            <param name="name">
            The display name of the selector.
            </param>
        </member>
        <member name="M:Zelda.UI.ColorSelector.OnDraw(Atom.Xna.ISpriteDrawContext)">
            <summary>
            Called when this Atom.Xna.UI.UIElement is drawing.
            </summary>
            <param name="drawContext">The current Atom.Xna.ISpriteDrawContext.</param>
        </member>
        <member name="M:Zelda.UI.ColorSelector.OnUpdate(Atom.IUpdateContext)">
            <summary>
            Called when this Atom.Xna.UI.UIElement is updating.
            </summary>
            <param name="updateContext">The current Atom.IUpdateContext.</param>
        </member>
        <member name="M:Zelda.UI.ColorSelector.OnAdded(Atom.Xna.UI.UserInterface)">
            <summary>
            Gets called when the Atom.Xna.UI.UIElement was added to the given Atom.Xna.UI.UserInterface.
            </summary>
            <param name="userInterface">
            The related UserInterface object.
            </param>
        </member>
        <member name="M:Zelda.UI.ColorSelector.OnRemoved(Atom.Xna.UI.UserInterface)">
            <summary>
            Gets called when the Atom.Xna.UI.UIElement was removed from the given Atom.Xna.UI.UserInterface.
            </summary>
            <param name="userInterface">
            The related UserInterface object.
            </param>
        </member>
        <member name="M:Zelda.UI.ColorSelector.OnIsEnabledChanged">
            <summary>
            Called when the IsEnabled state of this UIElement has changed.
            </summary>
        </member>
        <member name="M:Zelda.UI.ColorSelector.OnIsVisibleChanged">
            <summary>
            Called when the IsVisible state of this UIElement has changed.
            </summary>
        </member>
        <member name="T:Zelda.UI.CooldownVisualizer">
            <summary>
            Allows the visualization of <see cref="T:Zelda.Cooldown"/>s.
            </summary>
        </member>
        <member name="F:Zelda.UI.CooldownVisualizer.ElementName">
            <summary>
            Represents the (unique) name that indentifies this <see cref="T:Atom.Xna.UI.UIElement"/>.
            </summary>
        </member>
        <member name="F:Zelda.UI.CooldownVisualizer.TriangleCountForFullCooldown">
            <summary>
            The number of triangles needed for to draw a full cooldown.
            </summary>
        </member>
        <member name="F:Zelda.UI.CooldownVisualizer.MaximumCooldownCount">
            <summary>
            The maximum number of cooldowns that may be drawn at a time.
            </summary>
        </member>
        <member name="M:Zelda.UI.CooldownVisualizer.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.UI.CooldownVisualizer"/> class.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.UI.CooldownVisualizer.LoadContent">
            <summary>
            Loads the content used by this <see cref="T:Zelda.UI.CooldownVisualizer"/>.
            </summary>
        </member>
        <member name="M:Zelda.UI.CooldownVisualizer.SetupProjection(Zelda.Graphics.IResolutionService)">
            <summary>
            Setups the projection matrix that is used when rendering
            the cooldowns.
            </summary>
            <param name="resolutionService">
            Provides access to the current output resolution.
            </param>
        </member>
        <member name="M:Zelda.UI.CooldownVisualizer.UnloadContent">
            <summary>
            Unloads the content used by this <see cref="T:Zelda.UI.CooldownVisualizer"/>.
            </summary>
        </member>
        <member name="M:Zelda.UI.CooldownVisualizer.PushCooldown(Zelda.Cooldown,Atom.Math.Vector2,Atom.Math.Vector2,Microsoft.Xna.Framework.Color,System.Boolean)">
            <summary>
            Tells this CooldownVisualizer to draw the given <see cref="T:Zelda.Cooldown"/> at the given position
            using the given settings at the next Draw call.
            </summary>
            <param name="cooldown">
            The <see cref="T:Zelda.Cooldown"/> to visualize using this CooldownVisualizer.
            </param>
            <param name="position">
            The position to the draw the cooldown at.
            </param>
            <param name="drawSize">
            The drawing size of the cooldown.
            </param>
            <param name="color">
            The color of the cooldown.
            </param>
            <param name="isInversed">
            States whether the cooldown is filling up or decreasing over time.
            </param>
        </member>
        <member name="M:Zelda.UI.CooldownVisualizer.PushCooldown(System.Single,System.Single,Atom.Math.Vector2,Atom.Math.Vector2,Microsoft.Xna.Framework.Color,System.Boolean)">
            <summary>
            Tells this CooldownVisualizer to draw the given <see cref="T:Zelda.Cooldown"/> at the given position
            using the given settings at the next Draw call.
            </summary>
            <param name="timeLeft">
            The time left until the cooldown ends.
            </param>
            <param name="totalTime">
            The total duration of the cooldown.
            </param>
            <param name="position">
            The position to the draw the cooldown at.
            </param>
            <param name="drawSize">
            The drawing size of the cooldown.
            </param>
            <param name="color">
            The color of the cooldown.
            </param>
            <param name="isInversed">
            States whether the cooldown is filling up or decreasing over time.
            </param>
        </member>
        <member name="M:Zelda.UI.CooldownVisualizer.PushTriangle(Atom.Math.Vector2,Atom.Math.Vector2,Atom.Math.Vector2,Microsoft.Xna.Framework.Color)">
            <summary>
            Pushes a new triangle onto the vertex stack.
            </summary>
            <param name="vertexA">The first vertex.</param>
            <param name="vertexB">The second vertex.</param>
            <param name="vertexC">The third vertex.</param>
            <param name="color">The color of the triangle.</param>
        </member>
        <member name="M:Zelda.UI.CooldownVisualizer.OnDraw(Atom.Xna.ISpriteDrawContext)">
            <summary>
            Called when this <see cref="T:Atom.Xna.UI.UIElement"/> is drawing itself.
            </summary>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.CooldownVisualizer.OnUpdate(Atom.IUpdateContext)">
            <summary>
            Called when this <see cref="T:Atom.Xna.UI.UIElement"/> is updating itself.
            </summary>
            <param name="updateContext">
            The current IUpdateContext.
            </param>
        </member>
        <member name="F:Zelda.UI.CooldownVisualizer.vertexIndex">
            <summary>
            Stores the next index to be written at.
            </summary>
        </member>
        <member name="F:Zelda.UI.CooldownVisualizer.triangleCount">
            <summary>
            The number of triangles that have been pushed into the CooldownVisualizer.
            </summary>
        </member>
        <member name="F:Zelda.UI.CooldownVisualizer.vertices">
            <summary>
            The vertices that have been set to be send to the graphics hardware.
            </summary>
        </member>
        <member name="F:Zelda.UI.CooldownVisualizer.effectSolidColorFill">
            <summary>
            The effect which is used to draw the Cooldowns.
            </summary>
        </member>
        <member name="F:Zelda.UI.CooldownVisualizer.graphicsDevice">
            <summary>
            The XNA GraphicsDevice.
            </summary>
        </member>
        <member name="F:Zelda.UI.CooldownVisualizer.serviceProvider">
            <summary>
            Provides fast access to game related services.
            </summary>
        </member>
        <member name="T:Zelda.UI.Crafting.CraftingBottleWindow">
            <summary>
            Defines the <see cref="T:Zelda.UI.IngameWindow"/> that is used to
            visualize the <see cref="T:Zelda.Crafting.CraftingBottle"/> of the Player.
            </summary>
        </member>
        <member name="M:Zelda.UI.Crafting.CraftingBottleWindow.#ctor(Zelda.UI.CooldownVisualizer,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.UI.Crafting.CraftingBottleWindow"/> class.
            </summary>
            <param name="cooldownVisualizer">
            Provides a mechanism to visualize the cooldown on the ItemUseEffect of an item.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related servicess.
            </param>
        </member>
        <member name="M:Zelda.UI.Crafting.CraftingBottleWindow.OnDraw(Atom.Xna.ISpriteDrawContext)">
            <summary>
            Called when this CraftingCubeWindow is drawing itself.
            </summary>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.Crafting.CraftingBottleWindow.HandleMouseInput(Microsoft.Xna.Framework.Input.MouseState@,Microsoft.Xna.Framework.Input.MouseState@)">
            <summary>
            Handles mouse input related for this <see cref="T:Zelda.UI.Crafting.CraftingBottleWindow"/>.
            </summary>
            <param name="mouseState">The current state of the mouse.</param>
            <param name="oldMouseState">The state of the mouse one frame ago.</param>
        </member>
        <member name="M:Zelda.UI.Crafting.CraftingBottleWindow.HandleRelatedMouseInput(Microsoft.Xna.Framework.Input.MouseState@,Microsoft.Xna.Framework.Input.MouseState@)">
            <summary>
            Handles mouse input related to this <see cref="T:Zelda.UI.InventoryWindow"/>.
            </summary>
            <param name="mouseState">The current state of the mouse.</param>
            <param name="oldMouseState">The state of the mouse one frame ago.</param>
            <returns>Whether input should be passed to elements behind this UIElement.</returns>
        </member>
        <member name="M:Zelda.UI.Crafting.CraftingBottleWindow.OnIsEnabledChanged">
            <summary>
            Gets called when the IsEnabled state of this CraftingBottleWindow has changed.
            </summary>
        </member>
        <member name="M:Zelda.UI.Crafting.CraftingBottleWindow.OnIsVisibleChanged">
            <summary>
            Gets called when the IsVisible state of this CraftingBottleWindow has changed.
            </summary>
        </member>
        <member name="M:Zelda.UI.Crafting.CraftingBottleWindow.OnButtonTransformClicked(System.Object,Microsoft.Xna.Framework.Input.MouseState@,Microsoft.Xna.Framework.Input.MouseState@)">
            <summary>
            Gets called when the player clicks on the Transform button.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
            <param name="mouseState">
            The current state of the mouse.
            </param>
            <param name="oldMouseState">
            The state of the mouse one frame ago.
            </param>
        </member>
        <member name="M:Zelda.UI.Crafting.CraftingBottleWindow.OnButtonTransformRubiesClicked(System.Object,Microsoft.Xna.Framework.Input.MouseState@,Microsoft.Xna.Framework.Input.MouseState@)">
            <summary>
            Gets called when the player clicks on the Transform Rubies button.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
            <param name="mouseState">
            The current state of the mouse.
            </param>
            <param name="oldMouseState">
            The state of the mouse one frame ago.
            </param>
        </member>
        <member name="M:Zelda.UI.Crafting.CraftingBottleWindow.OnButtonRecipeListClicked(System.Object,Microsoft.Xna.Framework.Input.MouseState@,Microsoft.Xna.Framework.Input.MouseState@)">
            <summary>
            Gets called when the player clicks on the Recipes button.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
            <param name="mouseState">
            The current state of the mouse.
            </param>
            <param name="oldMouseState">
            The state of the mouse one frame ago.
            </param>
        </member>
        <member name="M:Zelda.UI.Crafting.CraftingBottleWindow.OnAdded(Atom.Xna.UI.UserInterface)">
            <summary>
            Gets called when this CraftingBottleWindow has been added to the given UserInterface.
            </summary>
            <param name="userInterface">
            The related UserInterface.
            </param>
        </member>
        <member name="M:Zelda.UI.Crafting.CraftingBottleWindow.OnRemoved(Atom.Xna.UI.UserInterface)">
            <summary>
            Gets called when this CraftingBottleWindow has been removed from the given UserInterface.
            </summary>
            <param name="userInterface">
            The related UserInterface.
            </param>
        </member>
        <member name="M:Zelda.UI.Crafting.CraftingBottleWindow.OnPlayerChanged">
            <summary>
            Gets called when the PlayerEntity whose Inventory is visualized by this CraftingBottleWindow has changed.
            </summary>
        </member>
        <member name="M:Zelda.UI.Crafting.CraftingBottleWindow.GetInventory">
            <summary>
            Gets the Inventory that gets visualized by this CraftingBottleWindow.
            </summary>
            <returns>
            An Inventory instance.
            </returns>
        </member>
        <member name="F:Zelda.UI.Crafting.CraftingBottleWindow.viewSize">
            <summary>
            The size of the ingame-view window.
            </summary>
        </member>
        <member name="F:Zelda.UI.Crafting.CraftingBottleWindow.player">
            <summary>
            Identifies the PlayerEntity whose Inventory is visualized using this CraftingBottleWindow.
            </summary>
        </member>
        <member name="F:Zelda.UI.Crafting.CraftingBottleWindow.buttonTransform">
            <summary>
            Identifies the buttons shown in the CraftingBottleWindow.
            </summary>
        </member>
        <member name="F:Zelda.UI.Crafting.CraftingBottleWindow.buttonTransformRubies">
            <summary>
            Identifies the buttons shown in the CraftingBottleWindow.
            </summary>
        </member>
        <member name="F:Zelda.UI.Crafting.CraftingBottleWindow.buttonRecipeList">
            <summary>
            The Button that when clicked switches to the Crafting Recipes List.
            </summary>
        </member>
        <member name="F:Zelda.UI.Crafting.CraftingBottleWindow.itemManager">
            <summary>
            Provides a mechanism to load Items.
            </summary>
        </member>
        <member name="F:Zelda.UI.Crafting.CraftingBottleWindow.recipeDatabase">
            <summary>
            Provides access to all Recipes in the game.
            </summary>
        </member>
        <member name="F:Zelda.UI.Crafting.CraftingBottleWindow.fontTitle">
            <summary>
            The IFonts used in the Crafting Bottle Window.
            </summary>
        </member>
        <member name="F:Zelda.UI.Crafting.CraftingBottleWindow.rubySample">
            <summary>
            Represents the sound sample that is played when the player transforms
            items into rubies.
            </summary>
        </member>
        <member name="T:Zelda.UI.Crafting.RecipeDetailsControl">
            <summary>
            Represents an UIElement that showns detail information about
            a single Recipe.
            </summary>
        </member>
        <member name="P:Zelda.UI.Crafting.RecipeDetailsControl.Recipe">
            <summary>
            Get or sets the Recipe whose details are shown in this RecipeDetailsControl.
            </summary>
        </member>
        <member name="M:Zelda.UI.Crafting.RecipeDetailsControl.#ctor(Zelda.UI.Items.ItemTooltipDrawElement,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the RecipeDetailsControl class.
            </summary> 
            <param name="tooltipDrawElement">
            The IooltipDrawElement responsible for drawing the actual item information
            when player moves the mouse over any of the ItemTooltip the new ItemTooltipGroup contains.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.UI.Crafting.RecipeDetailsControl.Refresh">
            <summary>
            Refreshes the content of this RecipeDetailsControl,
            based on the currently set Recipe.
            </summary>
        </member>
        <member name="M:Zelda.UI.Crafting.RecipeDetailsControl.OnDraw(Atom.Xna.ISpriteDrawContext)">
            <summary>
            Called when this RecipeDetailsControl is updating itself.
            </summary>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.Crafting.RecipeDetailsControl.DrawRequiredItems(Atom.Xna.ISpriteDrawContext)">
            <summary>
            Draws the items required by the current Recipe.
            </summary>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.Crafting.RecipeDetailsControl.DrawName(Zelda.ZeldaDrawContext)">
            <summary>
            Draws the name of the recipe.
            </summary>
            <param name="drawContext">
            The current ZeldaDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.Crafting.RecipeDetailsControl.OnUpdate(Atom.IUpdateContext)">
            <summary>
            Called when this RecipeDetailsControl is updating itself.
            </summary>
            <param name="updateContext">
            The current IUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.UI.Crafting.RecipeDetailsControl.OnAdded(Atom.Xna.UI.UserInterface)">
            <summary>
            Called when this RecipeDetailsControl has been added to the specified UserInterface.
            </summary>
            <param name="userInterface">
            The related UserInterface.
            </param>
        </member>
        <member name="M:Zelda.UI.Crafting.RecipeDetailsControl.OnRemoved(Atom.Xna.UI.UserInterface)">
            <summary>
            Called when this RecipeDetailsControl has been removed from the specified UserInterface.
            </summary>
            <param name="userInterface">
            The related UserInterface.
            </param>
        </member>
        <member name="M:Zelda.UI.Crafting.RecipeDetailsControl.OnIsEnabledChanged">
            <summary>
            Called when the IsEnabled state of this RecipeDetailsControl has changed.
            </summary>
        </member>
        <member name="F:Zelda.UI.Crafting.RecipeDetailsControl.itemTooltips">
            <summary>
            Contains the ItemTooltips this RecipeDetailsControl contains.
            </summary>
        </member>
        <member name="F:Zelda.UI.Crafting.RecipeDetailsControl.fontRecipeItemCount">
            <summary>
            Represents the font used to draw the number of times an item is required by the recipe.
            </summary>
        </member>
        <member name="F:Zelda.UI.Crafting.RecipeDetailsControl.recipe">
            <summary>
            Represents the storage field of the Recipe property.
            </summary>
        </member>
        <member name="T:Zelda.UI.Crafting.RecipeListBox">
            <summary>
            Represents a scrollable and virtualizing list of recipes.
            </summary>
        </member>
        <member name="M:Zelda.UI.Crafting.RecipeListBox.#ctor(Zelda.UI.Items.ItemTooltipDrawElement,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the RecipeListBox class.
            </summary>
            <param name="tooltipDrawElement">
            The IooltipDrawElement responsible for drawing the actual item information
            when player moves the mouse over any of the ItemTooltip the new RecipeListBox contains.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.UI.Crafting.RecipeListBox.ShowRecipes(System.Collections.Generic.IEnumerable{Zelda.Crafting.Recipe})">
            <summary>
            Shows the specified Recipes in this RecipesListBox.
            </summary>
            <param name="recipes">
            The recipes to show.
            </param>
        </member>
        <member name="M:Zelda.UI.Crafting.RecipeListBox.ClearItems">
            <summary>
            Removes all items from this RecipesListBox.
            </summary>
        </member>
        <member name="M:Zelda.UI.Crafting.RecipeListBox.OnDraw(Atom.Xna.ISpriteDrawContext)">
            <summary>
            Called when this RecipeListBox is drawing itself.
            </summary>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.Crafting.RecipeListBox.DrawScrollBorders(Atom.Xna.ISpriteDrawContext)">
            <summary>
            Draws the borders on the top/bottom that hide the items that are
            halfway 'scrolling' in or out.
            </summary>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.Crafting.RecipeListBox.OnUpdate(Atom.IUpdateContext)">
            <summary>
            Called when this RecipeListBox is updating itself.
            </summary>
            <param name="updateContext">
            The current IUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.UI.Crafting.RecipeListBox.OnAdded(Atom.Xna.UI.UserInterface)">
            <summary>
            Called when this RecipeListBox has been added to the specified UserInterface.
            </summary>
            <param name="userInterface">
            The related UserInterface.
            </param>
        </member>
        <member name="M:Zelda.UI.Crafting.RecipeListBox.OnRemoved(Atom.Xna.UI.UserInterface)">
            <summary>
            Called when this RecipeListBox has been removed from the specified UserInterface.
            </summary>
            <param name="userInterface">
            The related UserInterface.
            </param>
        </member>
        <member name="M:Zelda.UI.Crafting.RecipeListBox.OnIsEnabledChanged">
            <summary>
            Called when the IsEnabled state of this RecipeListBox has changed.
            </summary>
        </member>
        <member name="M:Zelda.UI.Crafting.RecipeListBox.CreateItem(Zelda.Crafting.Recipe)">
            <summary>
            Creates an new instance of the RecipeListItem class that contains the given Recipe.
            </summary>
            <param name="recipe">
            The input Recipe.
            </param>
            <returns>
            The newly created RecipeListItem.
            </returns>
        </member>
        <member name="F:Zelda.UI.Crafting.RecipeListBox.font">
            <summary>
            Represents the font used to draw the name of each Recipe.
            </summary>
        </member>
        <member name="F:Zelda.UI.Crafting.RecipeListBox.itemTooltips">
            <summary>
            Contains the ItemTooltips of the RecipeListItem this RecipeListBox contains.
            </summary>
        </member>
        <member name="F:Zelda.UI.Crafting.RecipeListBox.itemManager">
            <summary>
            Provides a mechanism that loads item data into memory.
            </summary>
        </member>
        <member name="T:Zelda.UI.Crafting.RecipeListBox.RecipeListItem">
            <summary>
            Represents an item within th RecipeListBox{T}.
            </summary>
        </member>
        <member name="P:Zelda.UI.Crafting.RecipeListBox.RecipeListItem.BackgroundColor">
            <summary>
            Gets the background color of this RecipeListItem.
            </summary>
        </member>
        <member name="P:Zelda.UI.Crafting.RecipeListBox.RecipeListItem.ForegroundColor">
            <summary>
            Gets the foreground color of this RecipeListItem.
            </summary>
        </member>
        <member name="P:Zelda.UI.Crafting.RecipeListBox.RecipeListItem.Item">
            <summary>
            Gets the result of Recipe of this RecipeListItem.
            </summary>
        </member>
        <member name="M:Zelda.UI.Crafting.RecipeListBox.RecipeListItem.#ctor(Zelda.UI.Crafting.RecipeListBox)">
            <summary>
            Initializes a new instance of the RecipeListItem class.
            </summary>
            <param name="list">
            The RecipeListBox that owns the new RecipeListItem.
            </param>
        </member>
        <member name="M:Zelda.UI.Crafting.RecipeListBox.RecipeListItem.OnClientAreaChanged">
            <summary>
            Called when the ClientArea of this UIElement has been refreshed.
            </summary>
        </member>
        <member name="M:Zelda.UI.Crafting.RecipeListBox.RecipeListItem.RefreshItemTooltipPosition">
            <summary>
            Refreshes the position of the ItemTooltip.
            </summary>
        </member>
        <member name="M:Zelda.UI.Crafting.RecipeListBox.RecipeListItem.OnDraw(Atom.Xna.ISpriteDrawContext)">
            <summary>
            Called when this RecipeListItem is drawing itself.
            </summary>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.Crafting.RecipeListBox.RecipeListItem.DrawSymbol(Atom.Xna.ISpriteDrawContext)">
            <summary>
            Draws the sprite of the item created by this RecipeListBox.
            </summary>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.Crafting.RecipeListBox.RecipeListItem.DrawBackground(Zelda.ZeldaDrawContext)">
            <summary>
            Draws the background of this RecipeListItem.
            </summary>
            <param name="drawContext">
            The current ZeldaDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.Crafting.RecipeListBox.RecipeListItem.DrawRecipeName(Zelda.ZeldaDrawContext)">
            <summary>
            Draws the name of the Recipe.
            </summary>
            <param name="drawContext">
            The current ZeldaDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.Crafting.RecipeListBox.RecipeListItem.OnIsVisibleChanged">
            <summary>
            Called when the visability state of this RecipeListItem has changed.
            </summary>
        </member>
        <member name="M:Zelda.UI.Crafting.RecipeListBox.RecipeListItem.LoadRecipeName">
            <summary>
            Loads and caches the name of the recipe.
            </summary>
        </member>
        <member name="M:Zelda.UI.Crafting.RecipeListBox.RecipeListItem.ShortenRecipeName">
            <summary>
            Shortens the name of the recipe to fit
            into the ListItem{T}.
            </summary>
        </member>
        <member name="M:Zelda.UI.Crafting.RecipeListBox.RecipeListItem.ShortenRecipeNameByRemovingWords">
            <summary>
            Shortens the name of the recipe to fit
            into the ListItem{T} by removing words from the
            end of the name.
            </summary>
            <example>
            "Tigersword of the Fallen Realm"
            could become
            "Tigersword of the .."
            </example>
            <returns>
            The length of the new recipe name.
            </returns>
        </member>
        <member name="F:Zelda.UI.Crafting.RecipeListBox.RecipeListItem.recipeName">
            <summary>
            Caches the name of the recipe; as displayed in the UI.
            </summary>
        </member>
        <member name="F:Zelda.UI.Crafting.RecipeListBox.RecipeListItem.itemTooltip">
            <summary>
            Represents the tooltip that is used to draw the item created by the Recipe.
            </summary>
        </member>
        <member name="F:Zelda.UI.Crafting.RecipeListBox.RecipeListItem.font">
            <summary>
            Represents the font that is used to draw the name of the Recipe.
            </summary>
        </member>
        <member name="T:Zelda.UI.Crafting.RecipesWindow">
            <summary>
            Allows the user to see what recipes he has learned so far;
            and how they work.
            </summary>
        </member>
        <member name="P:Zelda.UI.Crafting.RecipesWindow.SelectedCategory">
            <summary>
            Gets or sets the <see cref="T:Zelda.Crafting.RecipeCategory"/> that the user has currently selected.
            </summary>
        </member>
        <member name="P:Zelda.UI.Crafting.RecipesWindow.Owner">
            <summary>
            Gets the <see cref="T:Zelda.UI.IngameUserInterface"/> that owns this IngameWindow.
            </summary>
        </member>
        <member name="M:Zelda.UI.Crafting.RecipesWindow.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the RecipesWindow class.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.UI.Crafting.RecipesWindow.OnDraw(Atom.Xna.ISpriteDrawContext)">
            <summary>
            Called when this RecipesWindow is drawing itself.
            </summary>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.Crafting.RecipesWindow.OnSelectedRecipeChanged(System.Object,System.EventArgs)">
            <summary>
            Raised when the currently selected Recipe has changed.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
            <param name="e">
            The EventArgs that contain the event data.
            </param>
        </member>
        <member name="M:Zelda.UI.Crafting.RecipesWindow.OnUpdate(Atom.IUpdateContext)">
            <summary>
            Called when this RecipesWindow is updating itself.
            </summary>
            <param name="updateContext">
            The current IUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.UI.Crafting.RecipesWindow.OnPreUpdate">
            <summary>
            Called before this RecipesWindow, or any other UIElement, is updating itself.
            </summary>
        </member>
        <member name="M:Zelda.UI.Crafting.RecipesWindow.AddChildElementsTo(Atom.Xna.UI.UserInterface)">
            <summary>
            Adds the child elements of this RecipesWindow to the specified UserInterface.
            </summary>
            <param name="userInterface">
            The related UserInterface object.
            </param>
        </member>
        <member name="M:Zelda.UI.Crafting.RecipesWindow.RemoveChildElementsFrom(Atom.Xna.UI.UserInterface)">
            <summary>
            Removes the child elements of this RecipesWindow from the specified UserInterface.
            </summary>
            <param name="userInterface">
            The related UserInterface object.
            </param>
        </member>
        <member name="M:Zelda.UI.Crafting.RecipesWindow.OnIsEnabledChanged">
            <summary>
            Gets called when the IsEnabled state of this RecipesWindow has changed.
            </summary>
        </member>
        <member name="M:Zelda.UI.Crafting.RecipesWindow.HandleKeyInput(Microsoft.Xna.Framework.Input.KeyboardState@,Microsoft.Xna.Framework.Input.KeyboardState@)">
            <summary>
            Called every frame when this Atom.Xna.UI.UIElement is focused by its owning  Atom.Xna.UI.UserInterface.
            </summary>
            <param name="keyState">
            The current state of the keyboard.
            </param>
            <param name="oldKeyState">
            The state of the keyboard one frame ago.
            </param>
        </member>
        <member name="M:Zelda.UI.Crafting.RecipesWindow.OnButtonCraftingBottleClicked(System.Object,Microsoft.Xna.Framework.Input.MouseState@,Microsoft.Xna.Framework.Input.MouseState@)">
            <summary>
            Gets called when the player clicks on the Bottle button.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
            <param name="mouseState">
            The current state of the mouse.
            </param>
            <param name="oldMouseState">
            The state of the mouse one frame ago.
            </param>
        </member>
        <member name="M:Zelda.UI.Crafting.RecipesWindow.RefreshShownRecipes">
            <summary>
            Refreshes the recipes shown in the RecipesWindow;
            based on the currently selected Recipe Category.
            </summary>
        </member>
        <member name="M:Zelda.UI.Crafting.RecipesWindow.OnPlayerChanged">
            <summary>
            Called when the PlayerEntity that owns this IngameWindow has changed.
            </summary>
        </member>
        <member name="F:Zelda.UI.Crafting.RecipesWindow.database">
            <summary>
            Provides access to all of the recipes known to the game.
            </summary>
        </member>
        <member name="F:Zelda.UI.Crafting.RecipesWindow.list">
            <summary>
            Represents the list of recipes.
            </summary>
        </member>
        <member name="F:Zelda.UI.Crafting.RecipesWindow.recipeDetailsControl">
            <summary>
            Shows the details of the currently selected recipe.
            </summary>
        </member>
        <member name="F:Zelda.UI.Crafting.RecipesWindow.fontTitle">
            <summary>
            The IFonts used in the Recipes Window.
            </summary>
        </member>
        <member name="F:Zelda.UI.Crafting.RecipesWindow.itemInfoDisplay">
            <summary>
            Represents an UIControl that draws item information.
            </summary>
        </member>
        <member name="F:Zelda.UI.Crafting.RecipesWindow.buttonCraftingBottle">
            <summary>
            The Button that when clicked switches to the Crafting Bottle window.
            </summary>
        </member>
        <member name="T:Zelda.UI.BuffBarDisplay">
            <summary>
            Defines an UIElement that visualizes the visible buffs/debuffs that affect the PlayerEntity.
            </summary>
        </member>
        <member name="F:Zelda.UI.BuffBarDisplay.DefaultBuffSymbolSize">
            <summary>
            The default size of a symbol.
            </summary>
        </member>
        <member name="F:Zelda.UI.BuffBarDisplay.ColorCooldown">
            <summary>
            The color of a visualized cooldowns.
            </summary>
        </member>
        <member name="P:Zelda.UI.BuffBarDisplay.Player">
            <summary>
            Gets or sets to the PlayerEntity whos buffs/debuffs are visualized by this BuffbarDisplay.
            </summary>
        </member>
        <member name="M:Zelda.UI.BuffBarDisplay.#ctor(Zelda.UI.CooldownVisualizer,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.UI.BuffBarDisplay"/> class.
            </summary>
            <param name="cooldownVisualizer">
            Provides a mechanism to visualize the durations of buffs/debuffs.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.UI.BuffBarDisplay.OnUpdate(Atom.IUpdateContext)">
            <summary>
            Called when this <see cref="T:Zelda.UI.BuffBarDisplay"/> is updating itself.
            </summary>
            <param name="updateContext">
            THe current IUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.UI.BuffBarDisplay.OnDraw(Atom.Xna.ISpriteDrawContext)">
            <summary>
            Gets called when this <see cref="T:Zelda.UI.BuffBarDisplay"/> is drawing itself.
            </summary>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.BuffBarDisplay.DrawAura(Zelda.Status.Aura,Atom.Math.Vector2,Atom.Xna.Batches.IComposedSpriteBatch)">
            <summary>
            Draws the given buff or debuff Aura.
            </summary>
            <param name="aura">
            The aura to draw.
            </param>
            <param name="position">
            The position of the aura to draw.
            </param>
            <param name="batch">
            The XNA SpriteBatch object.
            </param>
            <returns>
            The new position.
            </returns>
        </member>
        <member name="F:Zelda.UI.BuffBarDisplay.cooldownVisualizer">
            <summary>
            Provides a mechanism to visualize the duration of timed buffs/debuffs.
            </summary>
        </member>
        <member name="T:Zelda.UI.DamageMeterDisplay">
            <summary>
            Represents an UIElement that displays the current Damage Done per seconds
            of the player.
            </summary>
        </member>
        <member name="P:Zelda.UI.DamageMeterDisplay.Player">
            <summary>
            Gets or sets the <see cref="T:Zelda.Entities.PlayerEntity"/> whose Damage Per Second
            is displayed by this DamageMeterDisplay.
            </summary>
        </member>
        <member name="M:Zelda.UI.DamageMeterDisplay.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.UI.DamageMeterDisplay"/> class.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game related services.
            </param>
        </member>
        <member name="M:Zelda.UI.DamageMeterDisplay.Toggle">
            <summary>
            Toggles this DamageMeterDisplay on and off.
            </summary>
        </member>
        <member name="M:Zelda.UI.DamageMeterDisplay.OnDraw(Atom.Xna.ISpriteDrawContext)">
            <summary>
            Called when this DamageMeterDisplay is drawing itself.
            </summary>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.DamageMeterDisplay.OnUpdate(Atom.IUpdateContext)">
            <summary>
            Called when this DamageMeterDisplay is updating itself.
            </summary>
            <param name="updateContext">
            The current IUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.UI.DamageMeterDisplay.UpdateCache(Atom.IUpdateContext)">
            <summary>
            Updates the string caching related logic.
            </summary>
            <param name="updateContext">
            The current IUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.UI.DamageMeterDisplay.UpdateCachedDps">
            <summary>
            Updates the cachedDpsString and cachedDpsValue if required.
            </summary>
        </member>
        <member name="M:Zelda.UI.DamageMeterDisplay.SetCachedDps(System.Single)">
            <summary>
            Caches the specified dps value.
            </summary>
            <param name="dps">
            The dps value to set.
            </param>
        </member>
        <member name="M:Zelda.UI.DamageMeterDisplay.GetDpsString(System.Single)">
            <summary>
            Gets the string drawn for the given dps value.
            </summary>
            <param name="dps">
            The damage per seconds value.
            </param>
            <returns>
            The damage per seconds string.
            </returns>
        </member>
        <member name="M:Zelda.UI.DamageMeterDisplay.GetCurrentDamagePerSecond">
            <summary>
            Gets the current damage per seconds; as displayed to the player.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zelda.UI.DamageMeterDisplay.OnIsEnabledChanged">
            <summary>
            Called when this DamageMeterDisplay gets enabled or disabled.
            </summary>
        </member>
        <member name="F:Zelda.UI.DamageMeterDisplay.player">
            <summary>
            Represents the storage property of the Player property.
            </summary>
        </member>
        <member name="F:Zelda.UI.DamageMeterDisplay.damageMeter">
            <summary>
            The DamageMeter that is used by this DamageMeterDisplay.
            </summary>
        </member>
        <member name="F:Zelda.UI.DamageMeterDisplay.TimeBetweenCacheUpdates">
            <summary>
            States the time between updates of the Damage Per Second string.
            </summary>
        </member>
        <member name="F:Zelda.UI.DamageMeterDisplay.timeLeftUntilCacheUpdate">
            <summary>
            The time left until the cached data is updated.
            </summary>
        </member>
        <member name="F:Zelda.UI.DamageMeterDisplay.cachedDpsValue">
            <summary>
            The last cached dps value.
            </summary>
        </member>
        <member name="F:Zelda.UI.DamageMeterDisplay.cachedDpsString">
            <summary>
            The last cached dps value; converted into the string that is displayed to the player.
            </summary>
        </member>
        <member name="F:Zelda.UI.DamageMeterDisplay.font">
            <summary>
            The IFont used to draw the dps string.
            </summary>
        </member>
        <member name="T:Zelda.UI.EnteringRegionDisplay">
            <summary>
            Displays the (blending in-and-out) name of the region 
            the player is about to enter.
            </summary> 
        </member>
        <member name="F:Zelda.UI.EnteringRegionDisplay.TextColor">
            <summary>
            The base color of the Text.
            </summary>
        </member>
        <member name="M:Zelda.UI.EnteringRegionDisplay.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the EnteringRegionDisplay class.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.UI.EnteringRegionDisplay.Show(System.String)">
            <summary>
            Commands this EnteringRegionDisplay to show 
            entering of the region with the given <paramref name="regionName"/>.
            </summary>
            <param name="regionName">
            The (localized) name of the region.
            </param>
        </member>
        <member name="M:Zelda.UI.EnteringRegionDisplay.OnBlendEffectEnded(System.Object,System.EventArgs)">
            <summary>
            Called when the blending effect applied to the Text has ended.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The EventArgs that contains the event data.</param>
        </member>
        <member name="T:Zelda.UI.RespawnTextDisplay">
            <summary>
            Defines an UIElement that informs the player
            that he has died and might respawn now by pressing the Space key.
            This class can't be inherited.
            </summary>
        </member>
        <member name="P:Zelda.UI.RespawnTextDisplay.Player">
            <summary>
            Gets or sets the Player entity
            registered to this RespawnTextDisplay.
            </summary>
        </member>
        <member name="M:Zelda.UI.RespawnTextDisplay.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the RespawnTextDisplay class.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.UI.RespawnTextDisplay.OnPlayerDied(Zelda.Status.Statable)">
            <summary>
            Called when the player has died.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
        </member>
        <member name="M:Zelda.UI.RespawnTextDisplay.OnPlayerRespawned(System.Object,System.EventArgs)">
            <summary>
            Called when the player has respawned.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
            <param name="e">
            The EventArgs that contains the event data.
            </param>
        </member>
        <member name="M:Zelda.UI.RespawnTextDisplay.OnDraw(Atom.Xna.ISpriteDrawContext)">
            <summary>
            Called when this RespawnTextDisplay is drawing itself.
            </summary>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.RespawnTextDisplay.OnUpdate(Atom.IUpdateContext)">
            <summary>
            Called when this RespawnTextDisplay is updating itself.
            </summary>
            <param name="updateContext">
            The current IUpdateContext.
            </param>
        </member>
        <member name="F:Zelda.UI.RespawnTextDisplay.textField">
            <summary>
            The TextField that is internally used.
            </summary>
        </member>
        <member name="F:Zelda.UI.RespawnTextDisplay.player">
            <summary>
            The storage field for the <see cref="P:Zelda.UI.RespawnTextDisplay.Player"/> property.
            </summary>
        </member>
        <member name="T:Zelda.UI.RubyDisplay">
            <summary>
            Defines an UIElement that visualizes how much rubies the player owns.
            </summary>
        </member>
        <member name="P:Zelda.UI.RubyDisplay.Player">
            <summary>
            Gets or sets the <see cref="P:Zelda.UI.RubyDisplay.Player"/> object.
            </summary>
        </member>
        <member name="M:Zelda.UI.RubyDisplay.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.UI.RubyDisplay"/> class.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game related services.
            </param>
        </member>
        <member name="M:Zelda.UI.RubyDisplay.OnDraw(Atom.Xna.ISpriteDrawContext)">
            <summary>
            Called when this UIElement is drawing itself.
            </summary>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.RubyDisplay.OnUpdate(Atom.IUpdateContext)">
            <summary>
            Called when this UIElement is updating itself.
            </summary>
            <param name="updateContext">
            The current IUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.UI.RubyDisplay.OnPreUpdate">
            <summary>
            Called before an update happens to this UIElement.
            </summary>
        </member>
        <member name="M:Zelda.UI.RubyDisplay.OnMouseOver(Microsoft.Xna.Framework.Input.MouseState@)">
            <summary>
            Called when the mouse is over the Atom.Xna.UI.UIElement.ClientArea of this Atom.Xna.UI.UIElement.
            </summary>
            <param name="mouseState">The state of the mouse. Passed by reference to reduce overhead.</param>
            <returns>
            True if input should be passed to elements that are behind the Atom.Xna.UI.UIElement,
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.UI.RubyDisplay.HandleRelatedMouseInput(Microsoft.Xna.Framework.Input.MouseState@,Microsoft.Xna.Framework.Input.MouseState@)">
            <summary>
            Called when the user clicks on this UIElement.
            </summary>
            <param name="mouseState">
            The current state of the mouse.
            </param>
            <param name="oldMouseState">
            The state of the mouse one frame ago.
            </param>
            <returns>
            Whether input should be passed to UIElements behing this UIElement.
            </returns>
        </member>
        <member name="F:Zelda.UI.RubyDisplay.showRubyValue">
            <summary>
            States whether to show the ruby value.
            </summary>
        </member>
        <member name="F:Zelda.UI.RubyDisplay.cachedRubyCount">
            <summary>
            Stores what ruby count is currently cached.
            </summary>
        </member>
        <member name="F:Zelda.UI.RubyDisplay.cachedRubyString">
            <summary>
            The cached ruby count string.
            </summary>
        </member>
        <member name="F:Zelda.UI.RubyDisplay.cachedRubyStringSize">
            <summary>
            The dimensions of the currently cached ruby count string.
            </summary>
        </member>
        <member name="F:Zelda.UI.RubyDisplay.isCountShownPerma">
            <summary>
            States whether the count of the RubyDisplay is shown permanently.
            </summary>
        </member>
        <member name="F:Zelda.UI.RubyDisplay.spriteRuby">
            <summary>
            The sprite of the ruby.
            </summary>
        </member>
        <member name="F:Zelda.UI.RubyDisplay.font">
            <summary>
            The font used to display the sprite count.
            </summary>
        </member>
        <member name="T:Zelda.UI.TimeDisplay">
            <summary>
            Visualizes the current ingame time.
            </summary>
        </member>
        <member name="F:Zelda.UI.TimeDisplay.TextColor">
            <summary>
            The color of the displayed text.
            </summary>
        </member>
        <member name="P:Zelda.UI.TimeDisplay.DateTime">
            <summary>
            Gets or sets the <see cref="T:Zelda.IngameDateTime"/> object,
            which captures the current date and time within the game.
            </summary>
        </member>
        <member name="M:Zelda.UI.TimeDisplay.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.UI.TimeDisplay"/> class.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game related services.
            </param>
        </member>
        <member name="M:Zelda.UI.TimeDisplay.OnDraw(Atom.Xna.ISpriteDrawContext)">
            <summary>
            Called when this UIElement is drawing itself.
            </summary>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.TimeDisplay.OnUpdate(Atom.IUpdateContext)">
            <summary>
            Called when this UIElement is updating itself.
            </summary>
            <param name="updateContext">
            The current IUpdateContext.
            </param>
        </member>
        <member name="F:Zelda.UI.TimeDisplay.font">
            <summary>
            The font used to display the date/time.
            </summary>
        </member>
        <member name="T:Zelda.UI.IngameUserInterface">
            <summary>
            Represents the UserInterface shown during the actual game.
            </summary>
        </member>
        <member name="P:Zelda.UI.IngameUserInterface.OpenWindow">
            <summary>
            Gets the currently open <see cref="T:Zelda.UI.IngameWindow"/>.
            </summary>
        </member>
        <member name="P:Zelda.UI.IngameUserInterface.SideBar">
            <summary>
            Gets the <see cref="P:Zelda.UI.IngameUserInterface.SideBar"/> associated with this IngameUserInterface.
            </summary>
        </member>
        <member name="P:Zelda.UI.IngameUserInterface.ActionSlotsDisplay">
            <summary>
            Gets the <see cref="T:Zelda.UI.QuickActionSlotsDisplay"/> associated with this IngameUserInterface.
            </summary>
        </member>
        <member name="M:Zelda.UI.IngameUserInterface.#ctor(Zelda.GameStates.IngameState)">
            <summary>
            Initializes a new instance of the IngameUserInterface class.
            </summary>
            <param name="ingameState">
            The IngameState of the game.
            </param>
        </member>
        <member name="M:Zelda.UI.IngameUserInterface.Setup(Zelda.IZeldaServiceProvider)">
            <summary>
            Setups this IngameUserInterface.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.UI.IngameUserInterface.Unload">
            <summary>
            
            </summary>
        </member>
        <member name="M:Zelda.UI.IngameUserInterface.SetupWindowRing">
            <summary>
            Setups the ring that connects each IngameWindow with two other IngameWindows.
            </summary>
        </member>
        <member name="M:Zelda.UI.IngameUserInterface.SetupForProfile(Zelda.Profiles.GameProfile)">
            <summary>
            Setups this IngameUserInterface for the given GameProfile.
            </summary>
            <param name="profile">
            The GameProfile to use.
            </param>
        </member>
        <member name="M:Zelda.UI.IngameUserInterface.SetupForScene(Zelda.ZeldaScene)">
            <summary>
            Setups this IngameUserInterface for the given ZeldaScene.
            </summary>
            <param name="scene">The ZeldaScene to use.</param>
        </member>
        <member name="M:Zelda.UI.IngameUserInterface.SetupKeyWindowMap(Zelda.KeySettings)">
            <summary>
            Setups the key - window map to use the specified keyboad settings.
            </summary>
            <param name="settings">
            The keyboard settings to use.
            </param>
        </member>
        <member name="M:Zelda.UI.IngameUserInterface.AddKeyWindowMapping(Microsoft.Xna.Framework.Input.Keys,Zelda.UI.IngameWindow[])">
            <summary>
            Adds a new mapping between keyboard key and an ingame window.
            </summary>
            <param name="key">
            The key that should open the window.
            </param>
            <param name="windows">
            The windows that should be opened. First window = normal key, second window = normal key + shift
            </param>
        </member>
        <member name="M:Zelda.UI.IngameUserInterface.ToggleWindow``1">
            <summary>
            Helper functions that toggles the IngameWindow of the given type on/off.
            </summary>
            <typeparam name="TWindow">
            The type of the window to toggle.
            </typeparam>
            <returns>
            true if the given IngameWindow has been toggled;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.UI.IngameUserInterface.ToggleWindow(Zelda.UI.IngameWindow)">
            <summary>
            Helper functions that toggles the given <see cref="T:Zelda.UI.IngameWindow"/> on/off.
            </summary>
            <param name="window">
            The window to toggle on/off.
            </param>
            <returns>
            true if the given IngameWindow has been toggled;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.UI.IngameUserInterface.ToggleWindowRight(Zelda.UI.IngameWindow)">
            <summary>
            Closes the current IngameWindow off, and opens the following IngameWindow.
            </summary>
            <param name="currentWindow">
            The current window.
            </param>
        </member>
        <member name="M:Zelda.UI.IngameUserInterface.ToggleWindowLeft(Zelda.UI.IngameWindow)">
            <summary>
            Closes the current IngameWindow off, and opens the previous IngameWindow.
            </summary>
            <param name="currentWindow">
            The current window.
            </param>
        </member>
        <member name="M:Zelda.UI.IngameUserInterface.RestoreForSaveOrExit">
            <summary>
            Restores the state of this IngameUserInterface to prepare it for saving or exiting the game.
            </summary>
        </member>
        <member name="M:Zelda.UI.IngameUserInterface.HandleKeyDown(Microsoft.Xna.Framework.Input.Keys,Microsoft.Xna.Framework.Input.KeyboardState@)">
            <summary>
            Handles the event of the player pressing any key.
            </summary>
            <param name="key">
            The key that has been pressed and should now be handled.
            </param>
            <param name="oldKeyState">
            The state of the keyboard one frame ago.
            </param>
            <returns>
            Returns whether the key has been handled by this IngameUserInterfacce.
            </returns>
        </member>
        <member name="M:Zelda.UI.IngameUserInterface.CloseOpenWindow">
            <summary>
            Closes the currently openWindow.
            </summary>
            <returns>
            true if it has been closed;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.UI.IngameUserInterface.ChangeToIngameOptionsScreen">
            <summary>
            Changes from the ingame state to the ingame options state.
            </summary>
        </member>
        <member name="M:Zelda.UI.IngameUserInterface.GetService(System.Type)">
            <summary>
            Tries to get the service of the specified type.
            </summary>
            <param name="serviceType">
            The type of service object to get.
            </param>
            <returns>
            The requested service object; or null.
            </returns>
        </member>
        <member name="M:Zelda.UI.IngameUserInterface.Dispose">
            <summary>
            Immediatly releases the unmanaged resources used by this IngameUserInterface.
            </summary>
        </member>
        <member name="F:Zelda.UI.IngameUserInterface.isSetup">
            <summary>
            States whether this IngameUserInterface has been setup.
            </summary>
        </member>
        <member name="F:Zelda.UI.IngameUserInterface.ingameState">
            <summary>
            Identifies the ingame state.
            </summary>
        </member>
        <member name="F:Zelda.UI.IngameUserInterface.cooldownVisualizer">
            <summary>
            Enables the visualization of <see cref="T:Zelda.Cooldown"/> data.
            </summary>
        </member>
        <member name="F:Zelda.UI.IngameUserInterface.cooldownVisualizerItems">
            <summary>
            Enables the visualization of <see cref="T:Zelda.Cooldown"/> data.
            </summary>
        </member>
        <member name="F:Zelda.UI.IngameUserInterface.actionSlotsDisplay">
            <summary>
            Identifies the QuickActionSlotsDisplay UIElement.
            </summary>
        </member>
        <member name="F:Zelda.UI.IngameUserInterface.openWindow">
            <summary>
            The currently active <see cref="T:Zelda.UI.IngameWindow"/>, if any.
            </summary>
            <remarks>Only one IngameWindow can be active at any time.</remarks>
        </member>
        <member name="F:Zelda.UI.IngameUserInterface.inventoryWindow">
            <summary>
            Indentifies the <see cref="T:Zelda.UI.InventoryWindow"/> UIElement.
            </summary>
        </member>
        <member name="F:Zelda.UI.IngameUserInterface.craftingBottleWindow">
            <summary>
            Indentifies the <see cref="T:Zelda.UI.Crafting.CraftingBottleWindow"/> UIElement.
            </summary>
        </member>
        <member name="F:Zelda.UI.IngameUserInterface.equipmentWindow">
            <summary>
            Indentifies the <see cref="T:Zelda.UI.EquipmentWindow"/> UIElement.
            </summary>
        </member>
        <member name="F:Zelda.UI.IngameUserInterface.characterWindow">
            <summary>
            Indentifies the <see cref="T:Zelda.UI.CharacterWindow"/> UIElement.
            </summary>
        </member>
        <member name="F:Zelda.UI.IngameUserInterface.characterDetailsWindow">
            <summary>
            Indentifies the <see cref="T:Zelda.UI.CharacterDetailsWindow"/> UIElement.
            </summary>
        </member>
        <member name="F:Zelda.UI.IngameUserInterface.talentWindow">
            <summary>
            Indentifies the <see cref="T:Zelda.UI.TalentWindow"/> UIElement.
            </summary>
        </member>
        <member name="F:Zelda.UI.IngameUserInterface.questLogWindow">
            <summary>
            Indentifies the <see cref="T:Zelda.UI.QuestLogWindow"/> UIElement.
            </summary>
        </member>
        <member name="F:Zelda.UI.IngameUserInterface.miniMapWindow">
            <summary>
            Indentifies the <see cref="T:Zelda.UI.MiniMapWindow"/> UIElement.
            </summary>
        </member>
        <member name="F:Zelda.UI.IngameUserInterface.recipesWindow">
            <summary>
            Indentifies the <see cref="T:Zelda.UI.Crafting.RecipesWindow"/> UIElement.
            </summary>
        </member>
        <member name="F:Zelda.UI.IngameUserInterface.ocarinaWindow">
            <summary>
            Indentifies the <see cref="T:Zelda.UI.Ocarina.OcarinaWindow"/> UIElement.
            </summary>
        </member>
        <member name="F:Zelda.UI.IngameUserInterface.sideBar">
            <summary>
            Indentifies the <see cref="P:Zelda.UI.IngameUserInterface.SideBar"/> UIElement.
            </summary>
        </member>
        <member name="F:Zelda.UI.IngameUserInterface.merchantWindowService">
            <summary>
            Provides a mechanism that allows the player to
            interact with the offerings of an IMerchant.
            </summary>
        </member>
        <member name="F:Zelda.UI.IngameUserInterface.inventoryService">
            <summary>
            Provides a mechanism for opening the UI for the various Inventory implementations.
            </summary>
        </member>
        <member name="F:Zelda.UI.IngameUserInterface.serviceProvider">
            <summary>
            Provides fast access to game-related services.
            </summary>
        </member>
        <member name="F:Zelda.UI.IngameUserInterface.keyWindowMap">
            <summary>
            Maps input keys onto ingame windows.
            </summary>
        </member>
        <member name="T:Zelda.UI.Items.Boxes.BoxModel">
            <summary>
            Represents an object made of individual <see cref="T:Zelda.UI.Items.Boxes.IBox"/>es.
            This class can't be inherited.
            </summary>
            <remarks>
            The BoxModel is used to calculate the size of resulting model.
            </remarks>
        </member>
        <member name="P:Zelda.UI.Items.Boxes.BoxModel.Size">
            <summary>
            Gets the size this BoxModel takes up.
            </summary>
        </member>
        <member name="M:Zelda.UI.Items.Boxes.BoxModel.#ctor(System.Collections.Generic.IList{Zelda.UI.Items.Boxes.IBox})">
            <summary>
            Initializes a new instance of the BoxModel class.
            </summary>
            <param name="boxes">
            The boxes that make up the new BoxModel.
            </param>
        </member>
        <member name="M:Zelda.UI.Items.Boxes.BoxModel.CalculateSize(Zelda.UI.Items.Boxes.IBox[])">
            <summary>
            Calculates the size the given boxes take up.
            </summary>
            <param name="boxes">
            The boxes that make up the BoxModel.
            </param>
            <returns>
            The size the boxes take up.
            </returns>
        </member>
        <member name="M:Zelda.UI.Items.Boxes.BoxModel.Draw(Zelda.ZeldaDrawContext)">
            <summary>
            Draws the content of this BoxModel.
            </summary>
            <param name="drawContext">
            The current ZeldaDrawContext.
            </param>
        </member>
        <member name="F:Zelda.UI.Items.Boxes.BoxModel.size">
            <summary>
            The total size all the boxes take up.
            </summary>
        </member>
        <member name="F:Zelda.UI.Items.Boxes.BoxModel.boxes">
            <summary>
            The boxes that make up this BoxModel.
            </summary>
        </member>
        <member name="T:Zelda.UI.Items.Boxes.BeginCompressionGroupSpacer">
            <summary>
            Represents a marker box that is used when compression is enabled
            to seperate two differently related groups of IBoxes.
            </summary>
        </member>
        <member name="F:Zelda.UI.Items.Boxes.BeginCompressionGroupSpacer.Instance">
            <summary>
            Represents an instance of the <see cref="T:Zelda.UI.Items.Boxes.BeginCompressionGroupSpacer"/> class.
            </summary>
        </member>
        <member name="M:Zelda.UI.Items.Boxes.BeginCompressionGroupSpacer.#ctor">
            <summary>
            Prevents the default creation of instances of the <see cref="T:Zelda.UI.Items.Boxes.BeginCompressionGroupSpacer"/> class.
            </summary>
        </member>
        <member name="T:Zelda.UI.Items.Boxes.CompressedSingleLineTextBox">
            <summary>
            Represents an IBox that compresses two <see cref="T:Zelda.UI.Items.Boxes.SingleLineTextBox"/>es into one line.
            </summary>
            <remarks>
            This is used when compressing a BoxModel for space.
            </remarks>
        </member>
        <member name="P:Zelda.UI.Items.Boxes.CompressedSingleLineTextBox.Size">
            <summary>
            Gets the area this IBox takes up.
            </summary>
            <returns>
            The area this IBox cowers.
            </returns>
        </member>
        <member name="M:Zelda.UI.Items.Boxes.CompressedSingleLineTextBox.#ctor(Zelda.UI.Items.Boxes.SingleLineTextBox,Zelda.UI.Items.Boxes.SingleLineTextBox)">
            <summary>
            Initializes a new instance of the CompressedSingleLineTextBox class.
            </summary>
            <param name="leftBox">
            The box to be displayed first.
            </param>
            <param name="rightBox">
            The box to be displayed on the right next to the leftBox.
            </param>
        </member>
        <member name="M:Zelda.UI.Items.Boxes.CompressedSingleLineTextBox.Draw(System.Int32,Atom.Math.Point2,Zelda.ZeldaDrawContext)">
            <summary>
            Draws the content of this IBox.
            </summary>
            <param name="verticalPosition">
            The position on the y-axis at which this IBox should be drawn at.
            </param>
            <param name="totalSize">
            The total size of the BoxModel this IBox is part of.
            </param>
            <param name="drawContext">
            The current ZeldaDrawContext.
            </param>
        </member>
        <member name="T:Zelda.UI.Items.Boxes.EndCompressionGroupSpacer">
            <summary>
            Represents a marker box that indicates that a group of related IBoxes which should be compressed has ended.
            </summary>
            <seealso cref="T:Zelda.UI.Items.Boxes.BeginCompressionGroupSpacer"/>
        </member>
        <member name="F:Zelda.UI.Items.Boxes.EndCompressionGroupSpacer.Instance">
            <summary>
            Represents an instance of the <see cref="T:Zelda.UI.Items.Boxes.EndCompressionGroupSpacer"/> class.
            </summary>
        </member>
        <member name="M:Zelda.UI.Items.Boxes.EndCompressionGroupSpacer.#ctor">
            <summary>
            Prevents the default creation of instances of the <see cref="T:Zelda.UI.Items.Boxes.EndCompressionGroupSpacer"/> class.
            </summary>
        </member>
        <member name="T:Zelda.UI.Items.Boxes.IBox">
            <summary>
            IBoxes are the building blocks of BlockModels.
            </summary>
        </member>
        <member name="P:Zelda.UI.Items.Boxes.IBox.Size">
            <summary>
            Gets the area this IBox takes up.
            </summary>
            <returns>
            The area this IBox cowers.
            </returns>
        </member>
        <member name="M:Zelda.UI.Items.Boxes.IBox.Draw(System.Int32,Atom.Math.Point2,Zelda.ZeldaDrawContext)">
            <summary>
            Draws the content of this IBox.
            </summary>
            <param name="verticalPosition">
            The position on the y-axis at which this IBox should be drawn at.
            </param>
            <param name="totalSize">
            The total size of the BoxModel this IBox is part of.
            </param>
            <param name="drawContext">
            The current ZeldaDrawContext.
            </param>
        </member>
        <member name="T:Zelda.UI.Items.Boxes.MultiLineTextBox">
            <summary>
            Represents an IBox that takes multiple lines of text
            as its input. This class can't be inherited.
            </summary>
        </member>
        <member name="P:Zelda.UI.Items.Boxes.MultiLineTextBox.Size">
            <summary>
            Gets the area this IBox takes up.
            </summary>
            <returns>
            The area this IBox cowers.
            </returns>
        </member>
        <member name="M:Zelda.UI.Items.Boxes.MultiLineTextBox.#ctor(System.String[],System.Int32,Atom.Xna.Fonts.IFont,Microsoft.Xna.Framework.Color,Atom.Xna.Fonts.TextAlign)">
            <summary>
            Initializes a new instance of the MultiLineTextBox class.
            </summary>
            <param name="splitText">
            The text to visualize; split by line.
            </param>
            <param name="additionalHorizontalSize">
            The additional horizontal pixel size.
            </param>
            <param name="font">
            The IFont that should be used to draw the specified text.
            </param>
            <param name="color">
            The color of the text.
            </param>
            <param name="textAlign">
            The text alignment that should be used relative to the full box model.
            </param>
        </member>
        <member name="M:Zelda.UI.Items.Boxes.MultiLineTextBox.CalculateSize(System.String[],System.Int32,Atom.Xna.Fonts.IFont)">
            <summary>
            Calculates the size of a MultiLineTextBox.
            </summary>
            <param name="splitText">
            The text to visualize; split by line.
            </param>
            <param name="additionalHorizontalSize">
            The additional horizontal pixel size.
            </param>
            <param name="font">
            The IFont that should be used to draw the specified text.
            </param>
            <returns></returns>
        </member>
        <member name="M:Zelda.UI.Items.Boxes.MultiLineTextBox.Draw(System.Int32,Atom.Math.Point2,Zelda.ZeldaDrawContext)">
            <summary>
            Draws the content of this MultiLineTextBox.
            </summary>
            <param name="verticalPosition">
            The position on the y-axis at which this IBox should be drawn at.
            </param>
            <param name="totalSize">
            The total size of the BoxModel this IBox is part of.
            </param>
            <param name="drawContext">
            The current ZeldaDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.Items.Boxes.MultiLineTextBox.GetDrawPosition(System.Int32,Atom.Math.Point2)">
            <summary>
            Gets the position at which the text should be drawn.
            </summary>
            <param name="verticalPosition">
            The position on the y-axis at which this IBox should be drawn at.
            </param>
            <param name="totalSize">
            The total size of the BoxModel this IBox is part of.
            </param>
            <returns>
            The position.
            </returns>
        </member>
        <member name="T:Zelda.UI.Items.Boxes.NoOpBox">
            <summary>
            Represents an IBox that does absolutely nothing.
            </summary>
        </member>
        <member name="P:Zelda.UI.Items.Boxes.NoOpBox.Size">
            <summary>
            Gets the area this IBox takes up.
            </summary>
            <returns>
            The area this IBox cowers.
            </returns>
        </member>
        <member name="M:Zelda.UI.Items.Boxes.NoOpBox.Draw(System.Int32,Atom.Math.Point2,Zelda.ZeldaDrawContext)">
            <summary>
            Draws the content of this IBox.
            </summary>
            <param name="verticalPosition">
            The position on the y-axis at which this IBox should be drawn at.
            </param>
            <param name="totalSize">
            The total size of the BoxModel this IBox is part of.
            </param>
            <param name="drawContext">
            The current ZeldaDrawContext.
            </param>
        </member>
        <member name="T:Zelda.UI.Items.Boxes.SingleLineLeftRightTextBox">
            <summary>
            Implements an IBox that contains a left-aligned and a right-aligned text on
            the same line.
            </summary>
        </member>
        <member name="P:Zelda.UI.Items.Boxes.SingleLineLeftRightTextBox.Size">
            <summary>
            Gets the area this IBox takes up.
            </summary>
            <returns>
            The area this IBox cowers.
            </returns>
        </member>
        <member name="M:Zelda.UI.Items.Boxes.SingleLineLeftRightTextBox.#ctor(System.String,System.String,System.Int32,System.Int32,Atom.Xna.Fonts.IFont,Microsoft.Xna.Framework.Color)">
            <summary>
            Initializes a new instance of the SingleLineLeftRightTextBox class.
            </summary>
            <param name="leftText">
            The left-aligned text.
            </param>
            <param name="rightText">
            The right-aligned text.
            </param>
            <param name="minimumGap">
            The minimum pixel gap that should be between the two texts.
            </param>
            <param name="additionalVerticalSize">
            The additional height of the new SingleLineLeftRightTextBox.
            </param>
            <param name="font">
            The font that should be used to draw the text.
            </param>
            <param name="color">
            The color of the text.
            </param>
        </member>
        <member name="M:Zelda.UI.Items.Boxes.SingleLineLeftRightTextBox.#ctor(System.String,System.String,System.Int32,System.Int32,Atom.Xna.Fonts.IFont,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color)">
            <summary>
            Initializes a new instance of the SingleLineLeftRightTextBox class.
            </summary>
            <param name="leftText">
            The left-aligned text.
            </param>
            <param name="rightText">
            The right-aligned text.
            </param>
            <param name="minimumGap">
            The minimum pixel gap that should be between the two texts.
            </param>
            <param name="additionalVerticalSize">
            The additional height of the new SingleLineLeftRightTextBox.
            </param>
            <param name="font">
            The font that should be used to draw the text.
            </param>
            <param name="leftColor">
            The color of the left text.
            </param>
            <param name="rightColor">
            The color of the left text.
            </param>
        </member>
        <member name="M:Zelda.UI.Items.Boxes.SingleLineLeftRightTextBox.Draw(System.Int32,Atom.Math.Point2,Zelda.ZeldaDrawContext)">
            <summary>
            Draws the content of this LeftRightTextBox.
            </summary>
            <param name="verticalPosition">
            The position on the y-axis at which this IBox should be drawn at.
            </param>
            <param name="totalSize">
            The total size of the BoxModel this IBox is part of.
            </param>
            <param name="drawContext">
            The current ZeldaDrawContext.
            </param>
        </member>
        <member name="T:Zelda.UI.Items.Boxes.SingleLineTextBox">
            <summary>
            Represents an IBox that contains a single line of text.
            </summary>
        </member>
        <member name="P:Zelda.UI.Items.Boxes.SingleLineTextBox.Size">
            <summary>
            Gets the area this IBox takes up.
            </summary>
            <returns>
            The area this IBox cowers.
            </returns>
        </member>
        <member name="P:Zelda.UI.Items.Boxes.SingleLineTextBox.Text">
            <summary>
            Gets the text this SingleLineTextBox contains.
            </summary>
        </member>
        <member name="P:Zelda.UI.Items.Boxes.SingleLineTextBox.Font">
            <summary>
            Gets the IFont this SingleLineTextBox uses to draw the Text.
            </summary>
        </member>
        <member name="P:Zelda.UI.Items.Boxes.SingleLineTextBox.HorizontalOffset">
            <summary>
            Gets the additional horizontal pixel offset before the text.
            </summary>
        </member>
        <member name="P:Zelda.UI.Items.Boxes.SingleLineTextBox.Color">
            <summary>
            Gets the Xna.Color the Text contained in this SingleLineTextBox is drawn in.
            </summary>
        </member>
        <member name="M:Zelda.UI.Items.Boxes.SingleLineTextBox.#ctor(System.String,Atom.Xna.Fonts.IFont,Microsoft.Xna.Framework.Color,Atom.Xna.Fonts.TextAlign)">
            <summary>
            Initializes a new instance of the SingleLineTextBox class.
            </summary>
            <param name="text">
            The text that should be fit into the new SingleLineTextBox.
            </param>
            <param name="font">
            The IFont that should be used to draw the specified text.
            </param>
            <param name="color">
            The color of the text.
            </param>
            <param name="textAlign">
            The text alignment that should be used relative to the full box model.
            </param>
        </member>
        <member name="M:Zelda.UI.Items.Boxes.SingleLineTextBox.#ctor(System.String,System.Int32,System.Int32,Atom.Xna.Fonts.IFont,Microsoft.Xna.Framework.Color,Atom.Xna.Fonts.TextAlign)">
            <summary>
            Initializes a new instance of the SingleLineTextBox class.
            </summary>
            <param name="text">
            The text that should be fit into the new SingleLineTextBox.
            </param>
            <param name="horizontalOffset">
            The additional horizontal pixel offset before the text.
            </param>
            <param name="additionalHorizontalSize">
            The additional size of the SingleLineTextBox on the x-axis.
            </param>
            <param name="font">
            The IFont that should be used to draw the specified text.
            </param>
            <param name="color">
            The color of the text.
            </param>
            <param name="textAlign">
            The text alignment that should be used relative to the full box model.
            </param>
        </member>
        <member name="M:Zelda.UI.Items.Boxes.SingleLineTextBox.#ctor(System.String,System.Int32,System.Int32,System.Int32,Atom.Xna.Fonts.IFont,Microsoft.Xna.Framework.Color,Atom.Xna.Fonts.TextAlign)">
            <summary>
            Initializes a new instance of the SingleLineTextBox class.
            </summary>
            <param name="text">
            The text that should be fit into the new SingleLineTextBox.
            </param>
            <param name="horizontalOffset">
            The additional horizontal pixel offset before the text.
            </param>
            <param name="additionalHorizontalSize">
            The additional size of the SingleLineTextBox on the x-axis.
            </param>
            <param name="additionalVerticalSize">
            The additional size of the SingleLineTextBox on the y-axis.
            </param>
            <param name="font">
            The IFont that should be used to draw the specified text.
            </param>
            <param name="color">
            The color of the text.
            </param>
            <param name="textAlign">
            The text alignment that should be used relative to the full box model.
            </param>
        </member>
        <member name="M:Zelda.UI.Items.Boxes.SingleLineTextBox.Draw(System.Int32,Atom.Math.Point2,Zelda.ZeldaDrawContext)">
            <summary>
            Draws the content of this MultiLineSingleLineTextBox.
            </summary>
            <param name="verticalPosition">
            The position on the y-axis at which this IBox should be drawn at.
            </param>
            <param name="totalSize">
            The total size of the BoxModel this IBox is part of.
            </param>
            <param name="drawContext">
            The current ZeldaDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.Items.Boxes.SingleLineTextBox.GetDrawPosition(System.Int32,Atom.Math.Point2)">
            <summary>
            Gets the position at which the text should be drawn.
            </summary>
            <param name="verticalPosition">
            The position on the y-axis at which this IBox should be drawn at.
            </param>
            <param name="totalSize">
            The total size of the BoxModel this IBox is part of.
            </param>
            <returns>
            The position.
            </returns>
        </member>
        <member name="T:Zelda.UI.Items.Boxes.ItemBoxModel">
            <summary>
            Represents a BoxModel that descripes the properties of an Item.
            </summary>
        </member>
        <member name="F:Zelda.UI.Items.Boxes.ItemBoxModel.VerticalBorderWidth">
            <summary>
            The width of the border on the left and right side of the ItemBoxModel.
            </summary>
        </member>
        <member name="F:Zelda.UI.Items.Boxes.ItemBoxModel.HorizontalBorderHeight">
            <summary>
            The height of the border on the top and bottom side of the ItemBoxModel
            </summary>
        </member>
        <member name="P:Zelda.UI.Items.Boxes.ItemBoxModel.TotalSize">
            <summary>
            Gets the total size this ItemBoxModel takes up;
            including the border.
            </summary>
        </member>
        <member name="M:Zelda.UI.Items.Boxes.ItemBoxModel.#ctor(System.Collections.Generic.IList{Zelda.UI.Items.Boxes.IBox})">
            <summary>
            Initializes a new instance of the ItemBoxModel class.
            </summary>
            <param name="boxes">
            The boxes that make up the new ItemBoxModel.
            </param>
        </member>
        <member name="T:Zelda.UI.Items.Boxes.ItemInfoBoxBuilder">
            <summary>
            Implements a mechanism that breaks down the individual fields that descripe
            an Item into boxes that can be used to correctly draw the information.
            </summary>
        </member>
        <member name="F:Zelda.UI.Items.Boxes.ItemInfoBoxBuilder.HorizontalEffectOffset">
            <summary>
            The offset on the x-axis applied to the additional StatusEffects
            given by Equipment, Weapons and Gems.
            </summary>
        </member>
        <member name="F:Zelda.UI.Items.Boxes.ItemInfoBoxBuilder.HorizontalSocketEffectOffset">
            <summary>
            The offset on the x-axis applied to the StatusEffects gems inside
            an Equipment or Weapon provide.
            </summary>
        </member>
        <member name="F:Zelda.UI.Items.Boxes.ItemInfoBoxBuilder.HorizontalOffsetSetItems">
            <summary>
            The offset on the x-axis applied to the inidividual items
            of a set.
            </summary>
        </member>
        <member name="F:Zelda.UI.Items.Boxes.ItemInfoBoxBuilder.FormatRequiresStrength">
            <summary>
            The format string smiliar to 'Requires {0} Strength'.
            </summary>
        </member>
        <member name="F:Zelda.UI.Items.Boxes.ItemInfoBoxBuilder.FormatRequiresDexterity">
            <summary>
            The format string smiliar to 'Requires {0} Dexterity'.
            </summary>
        </member>
        <member name="F:Zelda.UI.Items.Boxes.ItemInfoBoxBuilder.FormatRequiresAgility">
            <summary>
            The format string smiliar to 'Requires {0} Agility'.
            </summary>
        </member>
        <member name="F:Zelda.UI.Items.Boxes.ItemInfoBoxBuilder.FormatRequiresVitality">
            <summary>
            The format string smiliar to 'Requires {0} Vitality'.
            </summary>
        </member>
        <member name="F:Zelda.UI.Items.Boxes.ItemInfoBoxBuilder.FormatRequiresIntelligence">
            <summary>
            The format string smiliar to 'Requires {0} Vitality'.
            </summary>
        </member>
        <member name="F:Zelda.UI.Items.Boxes.ItemInfoBoxBuilder.FormatRequiresLuck">
            <summary>
            The format string smiliar to 'Requires {0} Luck'.
            </summary>
        </member>
        <member name="M:Zelda.UI.Items.Boxes.ItemInfoBoxBuilder.#ctor(Zelda.UI.Items.ItemInfoResources)">
            <summary>
            Initializes a new instance of the ItemInfoBoxBuilder class.
            </summary>
            <param name="resources">
            The resources used by the new ItemInfoBoxBuilder.
            </param>
        </member>
        <member name="M:Zelda.UI.Items.Boxes.ItemInfoBoxBuilder.Build(Zelda.Items.ItemInstance,Zelda.Status.ExtendedStatable,Zelda.Items.EquipmentStatus)">
            <summary>
            Builds up the IBoxes that are required to visualize the ItemInstance.
            </summary>
            <param name="itemInstance">
            The instance of the Item to visualize.
            </param>
            <param name="statable">
            The ExtendedStatable component of the entity that owns the given ItemInstance.
            </param>
            <param name="equipmentStatus">
            The EquipmentStatus component of the entity that owns the given ItemInstance.
            </param>
            <returns>
            The build model.
            </returns>
        </member>
        <member name="M:Zelda.UI.Items.Boxes.ItemInfoBoxBuilder.BuildCompressed(Zelda.Items.ItemInstance,Zelda.UI.Items.Boxes.ItemBoxModel,Zelda.Status.ExtendedStatable,Zelda.Items.EquipmentStatus)">
            <summary>
            Builds up the IBoxes that are required to visualize the ItemInstance.
            </summary>
            <param name="itemInstance">
            The instance of the Item to visualize.
            </param>
            <param name="uncompressedBoxModel">
            The BoxModel that has been build normally using <see cref="M:Zelda.UI.Items.Boxes.ItemInfoBoxBuilder.Build(Zelda.Items.ItemInstance,Zelda.Status.ExtendedStatable,Zelda.Items.EquipmentStatus)"/>,
            before trying to build a compressed one.
            </param>
            <param name="statable">
            The ExtendedStatable component of the entity that owns the given ItemInstance.
            </param>
            <param name="equipmentStatus">
            The EquipmentStatus component of the entity that owns the given ItemInstance.
            </param>
        </member>
        <member name="M:Zelda.UI.Items.Boxes.ItemInfoBoxBuilder.BuildEquipment(Zelda.Items.EquipmentInstance,Zelda.Status.ExtendedStatable,Zelda.Items.EquipmentStatus)">
            <summary>
            Builds up the IBoxes that are required to visualize the EquipmentInstance.
            </summary>
            <param name="equipmentInstance">
            The instance of the Equipment to visualize.
            </param>
            <param name="statable">
            The ExtendedStatable component of the entity that owns the given EquipmentInstance.
            </param>
            <param name="equipmentStatus">
            The EquipmentStatus component of the entity that owns the given WeaponInstance.
            </param>
        </member>
        <member name="M:Zelda.UI.Items.Boxes.ItemInfoBoxBuilder.BuildWeapon(Zelda.Items.WeaponInstance,Zelda.Status.ExtendedStatable,Zelda.Items.EquipmentStatus)">
            <summary>
            Builds up the IBoxes that are required to visualize the WeaponInstance.
            </summary>
            <param name="weaponInstance">
            The instance of the Weapon to visualize.
            </param>
            <param name="statable">
            The ExtendedStatable component of the entity that owns the given WeaponInstance.
            </param>
            <param name="equipmentStatus">
            The EquipmentStatus component of the entity that owns the given WeaponInstance.
            </param>
        </member>
        <member name="M:Zelda.UI.Items.Boxes.ItemInfoBoxBuilder.BuildGem(Zelda.Items.GemInstance,Zelda.Status.ExtendedStatable)">
            <summary>
            Builds up the IBoxes that are required to visualize the GemInstance.
            </summary>
            <param name="gemInstance">
            The instance of the Gem to visualize.
            </param>
            <param name="statable">
            The ExtendedStatable component of the entity that owns the given GemInstance.
            </param>
        </member>
        <member name="M:Zelda.UI.Items.Boxes.ItemInfoBoxBuilder.BuildItem(Zelda.Items.ItemInstance,Zelda.Status.ExtendedStatable)">
            <summary>
            Builds up the IBoxes that are required to visualize the ItemInstance.
            </summary>
            <param name="itemInstance">
            The instance of the Item to visualize.
            </param>
            <param name="statable">
            The ExtendedStatable component of the entity that owns the given ItemInstance.
            </param>
        </member>
        <member name="M:Zelda.UI.Items.Boxes.ItemInfoBoxBuilder.AddName(Zelda.Items.Item)">
            <summary>
            Adds an IBox to the BoxModel that contains the name of the given Item.
            </summary>
            <param name="item">
            The item that is currently processed.
            </param>
        </member>
        <member name="M:Zelda.UI.Items.Boxes.ItemInfoBoxBuilder.AddArmor(Zelda.Items.Equipment)">
            <summary>
            Adds, if required, an IBox to the BoxModel that contains the
            amount of armor the given equipment gives.
            </summary>
            <param name="equipment">
            The equipment that is currently processed.
            </param>
        </member>
        <member name="M:Zelda.UI.Items.Boxes.ItemInfoBoxBuilder.AddStats(Zelda.Items.Equipment)">
            <summary>
            Adds, if required, IBoxes to the BoxModel that contain
            the individual stats of the given Equipment.
            </summary>
            <param name="equipment">
            The equipment that is currently processed.
            </param>
        </member>
        <member name="M:Zelda.UI.Items.Boxes.ItemInfoBoxBuilder.AddStats(System.Int32,Zelda.Status.Stat)">
            <summary>
            Adds, if required, an IBox to the BoxModel that contains the given Stat.
            </summary>
            <param name="amount">
            The amount of the stat.
            </param>
            <param name="stat">
            The stat to add.
            </param>
        </member>
        <member name="M:Zelda.UI.Items.Boxes.ItemInfoBoxBuilder.AddRequirements(Zelda.Items.Equipment)">
            <summary>
            Adds, if required, IBoxes to the BoxModel that descripe
            the requirements of the given Equipment.
            </summary>
            <param name="equipment">
            The equipment to process.
            </param>
        </member>
        <member name="M:Zelda.UI.Items.Boxes.ItemInfoBoxBuilder.AddStatRequirement(System.Int32,System.String)">
            <summary>
            Adds an IBox that descripes a stat requirement of the Equipment or Weapon.
            </summary>
            <param name="stat">
            The amount required.
            </param>
            <param name="formatString">
            The format string to use to create the description text.
            </param>
        </member>
        <member name="M:Zelda.UI.Items.Boxes.ItemInfoBoxBuilder.AddLevelRequirement(System.Int32)">
            <summary>
            Adds, if required, an IBox that descripes that the item requires
            a specific level.
            </summary>
            <param name="requiredLevel">
            The level required by the Weapon, Equipment or Gem.
            </param>
        </member>
        <member name="M:Zelda.UI.Items.Boxes.ItemInfoBoxBuilder.AddUseEffect(Zelda.Items.Item)">
            <summary>
            Adds, if required, an IBox to the BoxModel that contains a description
            of the UseEffect of the given Item.
            </summary>
            <param name="item">
            The item that is currently processed.
            </param>
        </member>
        <member name="M:Zelda.UI.Items.Boxes.ItemInfoBoxBuilder.AddSet(Zelda.Items.EquipmentInstance)">
            <summary>
            Adds, if required, IBoxes to the BoxModel that descripe the set properties of the item.
            </summary>
            <param name="equipmentInstance">
            The equipment to process.
            </param>
        </member>
        <member name="M:Zelda.UI.Items.Boxes.ItemInfoBoxBuilder.AddSocketProperties(Zelda.Items.ItemSocketProperties)">
            <summary>
            Adds, if required, IBoxes to the BoxModel that descripe the gems and sockets of the item.
            </summary>
            <param name="socketProperties">
            The ItemSocketProperties to process.
            </param>
        </member>
        <member name="M:Zelda.UI.Items.Boxes.ItemInfoBoxBuilder.AddEffects(System.Collections.Generic.IEnumerable{Zelda.Status.StatusEffect},System.Int32,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color,System.Int32)">
            <summary>
            Adds IBoxes to the BoxModel containing the given StatusEffects.
            </summary>
            <param name="effects">
            The effects to process.
            </param>
            <param name="effectCount">
            The number of StatusEffects. Used for optimization.
            </param>
            <param name="colorEffect">
            The color of the effect is it is considered 'good'.
            </param>
            <param name="colorBadEffect">
            The color of the effect is it is considered 'bad'.
            </param>
            <param name="horizontalOffset">
            The offset on the x-axis before the effect text.
            </param>
        </member>
        <member name="M:Zelda.UI.Items.Boxes.ItemInfoBoxBuilder.AddEffects(Zelda.Status.PermanentAura)">
            <summary>
            Adds, if required, IBoxes to the BoxModel that descripe the
            effect of the given PermanentAura.
            </summary>
            <param name="aura">
            The effect aura to process.
            </param>
        </member>
        <member name="M:Zelda.UI.Items.Boxes.ItemInfoBoxBuilder.AddEquipmentEffects(Zelda.Items.Equipment)">
            <summary>
            Adds, if required, IBoxes to the BoxModel that descripe
            the additional StatusEffects the given Equipment provides.
            </summary>
            <param name="equipment">
            The equipment to process.
            </param>
        </member>
        <member name="M:Zelda.UI.Items.Boxes.ItemInfoBoxBuilder.AddDescriptionAndRubyBox(Zelda.Items.Item,Zelda.UI.Items.Boxes.RubyBox)">
            <summary>
            Adds a box containing the description of the given Item
            and the given RubyBox to the BoxModel.
            </summary>
            <param name="item">
            The item that is currently processed.
            </param>
            <param name="rubyBox">
            The RubyBox of the item currently processed.
            </param>
        </member>
        <member name="M:Zelda.UI.Items.Boxes.ItemInfoBoxBuilder.CreateRubyBox(Zelda.Items.Item)">
            <summary>
            Creates the RubyBox for the given Item.
            </summary>
            <param name="item">
            The item that is currently processed.
            </param>
            <returns>
            The newly created RubyBox.
            </returns>
        </member>
        <member name="M:Zelda.UI.Items.Boxes.ItemInfoBoxBuilder.AddDpsAndSpeed(Zelda.Items.Weapon)">
            <summary>
            Adds an IBox to the BoxModel that descripes the dps andd speed of the given Weapon.
            </summary>
            <param name="weapon">
            The weapon to process.
            </param>
        </member>
        <member name="M:Zelda.UI.Items.Boxes.ItemInfoBoxBuilder.GetDamageRangeString(Zelda.Items.Weapon)">
            <summary>
            Gets a string descriping the damage range of the given Weapon.
            </summary>
            <param name="weapon">
            The weapon to process.
            </param>
            <returns>
            A string descriping the damage range of the given Weapon.
            </returns>
        </member>
        <member name="M:Zelda.UI.Items.Boxes.ItemInfoBoxBuilder.GetRubyBoxHeight(Zelda.Items.Item)">
            <summary>
            Calculates and returns the size of the RubyBox.
            </summary>
            <param name="item">
            The item that is currently processed.
            </param>
            <returns>
            The height of the RubyBox in pixels.
            </returns>
        </member>
        <member name="M:Zelda.UI.Items.Boxes.ItemInfoBoxBuilder.GetString(Zelda.Items.ItemUseEffect)">
            <summary>
            Gets a string that descripes the given ItemUseEffect.
            </summary>
            <param name="useEffect">
            The ItemUseEffect to descripe.
            </param>
            <returns>
            A string that descripes the given ItemUseEffect.
            </returns>
        </member>
        <member name="M:Zelda.UI.Items.Boxes.ItemInfoBoxBuilder.GetStatString(System.Int32,Zelda.Status.Stat)">
            <summary>
            Gets the string to show for the given Stat.
            </summary>
            <param name="amount">
            The amount of the stat.
            </param>
            <param name="stat">
            Specifies what kind of stat is meant.
            </param>
            <returns>
            A string descriping the input parameters.
            </returns>
        </member>
        <member name="M:Zelda.UI.Items.Boxes.ItemInfoBoxBuilder.PreBuild(Zelda.Status.ExtendedStatable)">
            <summary>
            Setups this ItemInfoBoxBuilder before a build operation
            is executed.
            </summary>
            <param name="statable">
            The ExtendedStatable component of the entity that owns the ItemInstance
            whose box model is about to be build.
            </param>
        </member>
        <member name="M:Zelda.UI.Items.Boxes.ItemInfoBoxBuilder.BeginBoxGroup">
            <summary>
            Marks the beginning of a group of related IBoxes.
            </summary>
        </member>
        <member name="M:Zelda.UI.Items.Boxes.ItemInfoBoxBuilder.EndBoxGroup">
            <summary>
            Marks the end of a group of related IBoxes.
            </summary>
        </member>
        <member name="M:Zelda.UI.Items.Boxes.ItemInfoBoxBuilder.FinishBuild">
            <summary>
            Finishes building the ItemBoxModel.
            </summary>
            <returns>
            The BoxModel that has been build.
            </returns>
        </member>
        <member name="M:Zelda.UI.Items.Boxes.ItemInfoBoxBuilder.CompressAdjacentSingleLineBoxesWithinSameGroup">
            <summary>
            Tries to compress adjacent SingleLineTextBox pairs that are within the 
            same group of elements indicated by CompressionGroupSpacers.
            </summary>
        </member>
        <member name="M:Zelda.UI.Items.Boxes.ItemInfoBoxBuilder.ShouldCompress(Zelda.UI.Items.Boxes.SingleLineTextBox,Zelda.UI.Items.Boxes.SingleLineTextBox)">
            <summary> 
            Gets a value indicating whether the specified SingleLineTextBoxes should
            be compressed into a single CompressedSingleLineTextBox.
            </summary>
            <param name="currentC">
            The currently processed box.
            </param>
            <param name="lastC">
            The previously processed box.
            </param>
            <returns>
            true if they should be compressed;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.UI.Items.Boxes.ItemInfoBoxBuilder.AddBox(Zelda.UI.Items.Boxes.IBox)">
            <summary>
            Adds the given IBox ontop of the list of boxes.
            </summary>
            <param name="box">
            The box to add.
            </param>
        </member>
        <member name="M:Zelda.UI.Items.Boxes.ItemInfoBoxBuilder.CreateTextBox(System.String,System.Int32,Atom.Xna.Fonts.IFont,Microsoft.Xna.Framework.Color)">
            <summary>
            Utility method that based on the content of the given text creates
            a left-aligned TextBox or SingleLineTextBox.
            </summary>
            <param name="text">
            The text that should be fit into the new TextBox.
            </param>
            <param name="horizontalOffset">
            The additional horizontal pixel offset before the text.
            </param>
            <param name="font">
            The IFont that should be used to draw the specified text.
            </param>
            <param name="color">
            The color of the text.
            </param>
            <returns>
            The newly created TextBox or SingleLineTextBox.
            </returns>
        </member>
        <member name="M:Zelda.UI.Items.Boxes.ItemInfoBoxBuilder.CompareBoxesByWidth(Zelda.UI.Items.Boxes.IBox,Zelda.UI.Items.Boxes.IBox)">
            <summary>
            Compares the given IBoxes by their pixel width.
            </summary>
            <param name="first">
            The first IBox.
            </param>
            <param name="second">
            The second IBox.
            </param>
            <returns>
            A signed value that compares the width of the given boxes relative to each other.
            </returns>
        </member>
        <member name="F:Zelda.UI.Items.Boxes.ItemInfoBoxBuilder.statable">
            <summary>
            Captures the ExtendedStatable component that wants to visualize the ItemInstance
            currently build up.
            </summary>
        </member>
        <member name="F:Zelda.UI.Items.Boxes.ItemInfoBoxBuilder.uncompressedBoxModel">
            <summary>
            The ItemBoxModel of the previously build BoxModel while compression was disabled.
            Is used during compression.
            </summary>
        </member>
        <member name="F:Zelda.UI.Items.Boxes.ItemInfoBoxBuilder.compressionEnabled">
            <summary>
            States whether this ItemInfoBoxBuilder should try to keep the size of the output BoxModel small.
            </summary>
        </member>
        <member name="F:Zelda.UI.Items.Boxes.ItemInfoBoxBuilder.boxes">
            <summary>
            The list of IBoxes that have been build up.
            </summary>
        </member>
        <member name="F:Zelda.UI.Items.Boxes.ItemInfoBoxBuilder.culture">
            <summary>
            The culture used when formatting strings.
            </summary>
        </member>
        <member name="F:Zelda.UI.Items.Boxes.ItemInfoBoxBuilder.resources">
            <summary>
            The resources that are used to visualize item information.
            </summary>
        </member>
        <member name="T:Zelda.UI.Items.Boxes.ItemNameTextBox">
            <summary>
            Implements an IBox that contains the name of an Item.
            </summary>
        </member>
        <member name="F:Zelda.UI.Items.Boxes.ItemNameTextBox.MaximimWidthForNormalFont">
            <summary>
            States the maximum number of pixels the Item Name is allowed to
            have to use the normal font. If it is greater an alternative smaller font is used.
            </summary>
        </member>
        <member name="F:Zelda.UI.Items.Boxes.ItemNameTextBox.AdditionalWidth">
            <summary>
            The additional horizontal pixel size the ItemNameTextBox has.
            </summary>
        </member>
        <member name="P:Zelda.UI.Items.Boxes.ItemNameTextBox.Size">
            <summary>
            Gets the area this IBox takes up.
            </summary>
            <returns>
            The area this IBox cowers.
            </returns>
        </member>
        <member name="M:Zelda.UI.Items.Boxes.ItemNameTextBox.#ctor(System.String,Atom.Xna.Fonts.IFont,Atom.Xna.Fonts.IFont,Microsoft.Xna.Framework.Color)">
            <summary>
            Initializes a new instance of the ItemNameTextBox class.
            </summary>
            <param name="itemName">
            The name of the item that should be fit into the new ItemNameTextBox.
            </param>
            <param name="spriteFont">
            The IFont that should be used to draw the specified text.
            </param>
            <param name="spriteFontSmall">
            The IFont that should be used to draw the specified text;
            incase the itemName is too large.
            </param>
            <param name="color">
            The color of the itenName.
            </param>
        </member>
        <member name="M:Zelda.UI.Items.Boxes.ItemNameTextBox.Draw(System.Int32,Atom.Math.Point2,Zelda.ZeldaDrawContext)">
            <summary>
            Draws the content of this MultiLineTextBox.
            </summary>
            <param name="verticalPosition">
            The position on the y-axis at which this IBox should be drawn at.
            </param>
            <param name="totalSize">
            The total size of the BoxModel this IBox is part of.
            </param>
            <param name="drawContext">
            The current ZeldaDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.Items.Boxes.ItemNameTextBox.GetDrawPosition(System.Int32,Atom.Math.Point2)">
            <summary>
            Gets the position at which the text should be drawn.
            </summary>
            <param name="verticalPosition">
            The position on the y-axis at which this IBox should be drawn at.
            </param>
            <param name="totalSize">
            The total size of the BoxModel this IBox is part of.
            </param>
            <returns>
            The position.
            </returns>
        </member>
        <member name="T:Zelda.UI.Items.Boxes.RubyBox">
            <summary>
            Represents an IBox that is used to draw how much an Item
            is worth in rubees.
            </summary>
        </member>
        <member name="P:Zelda.UI.Items.Boxes.RubyBox.Size">
            <summary>
            Gets the area this IBox takes up.
            </summary>
            <returns>
            The area this IBox cowers.
            </returns>
        </member>
        <member name="M:Zelda.UI.Items.Boxes.RubyBox.#ctor(System.Int32,System.String,Atom.Xna.Sprite,Atom.Xna.Fonts.IFont)">
            <summary>
            Initializes a new instance of the RubyBox class.
            </summary>
            <param name="boxHeight">
            The height of the new RubyBox in pixels.
            </param>
            <param name="rubyString">
            The string representing how many rubees the item is worth.
            </param>
            <param name="rubySprite">
            The sprite used to signalize what the string represents.
            </param>
            <param name="font">
            The font used to draw the rubyString.
            </param>
        </member>
        <member name="M:Zelda.UI.Items.Boxes.RubyBox.Draw(System.Int32,Atom.Math.Point2,Zelda.ZeldaDrawContext)">
            <summary>
            Draws the content of this MultiLineTextBox.
            </summary>
            <param name="verticalPosition">
            The position on the y-axis at which this IBox should be drawn at.
            </param>
            <param name="totalSize">
            The total size of the BoxModel this IBox is part of.
            </param>
            <param name="drawContext">
            The current ZeldaDrawContext.
            </param>
        </member>
        <member name="T:Zelda.UI.Items.Boxes.TextBox">
            <summary>
            Implements an IBox that contains some simple text.
            </summary>
        </member>
        <member name="P:Zelda.UI.Items.Boxes.TextBox.Size">
            <summary>
            Gets the area this IBox takes up.
            </summary>
            <returns>
            The area this IBox cowers.
            </returns>
        </member>
        <member name="M:Zelda.UI.Items.Boxes.TextBox.#ctor(System.String,Atom.Xna.Fonts.IFont,Microsoft.Xna.Framework.Color,Atom.Xna.Fonts.TextAlign)">
            <summary>
            Initializes a new instance of the TextBox class.
            </summary>
            <param name="text">
            The text that should be fit into the new TextBox.
            </param>
            <param name="font">
            The IFont that should be used to draw the specified text.
            </param>
            <param name="color">
            The color of the text.
            </param>
            <param name="textAlign">
            The text alignment that should be used relative to the full box model.
            </param>
        </member>
        <member name="M:Zelda.UI.Items.Boxes.TextBox.#ctor(System.String,System.Int32,System.Int32,Atom.Xna.Fonts.IFont,Microsoft.Xna.Framework.Color,Atom.Xna.Fonts.TextAlign)">
            <summary>
            Initializes a new instance of the TextBox class.
            </summary>
            <param name="text">
            The text that should be fit into the new TextBox.
            </param>
            <param name="horizontalOffset">
            The additional horizontal pixel offset before the text.
            </param>
            <param name="additionalHorizontalSize">
            The additional size of the TextBox on the x-axis.
            </param>
            <param name="font">
            The IFont that should be used to draw the specified text.
            </param>
            <param name="color">
            The color of the text.
            </param>
            <param name="textAlign">
            The text alignment that should be used relative to the full box model.
            </param>
        </member>
        <member name="M:Zelda.UI.Items.Boxes.TextBox.#ctor(System.String,System.Int32,System.Int32,System.Int32,Atom.Xna.Fonts.IFont,Microsoft.Xna.Framework.Color,Atom.Xna.Fonts.TextAlign)">
            <summary>
            Initializes a new instance of the TextBox class.
            </summary>
            <param name="text">
            The text that should be fit into the new TextBox.
            </param>
            <param name="horizontalOffset">
            The additional horizontal pixel offset before the text.
            </param>
            <param name="additionalHorizontalSize">
            The additional size of the TextBox on the x-axis.
            </param>
            <param name="additionalVerticalSize">
            The additional size of the TextBox on the y-axis.
            </param>
            <param name="font">
            The IFont that should be used to draw the specified text.
            </param>
            <param name="color">
            The color of the text.
            </param>
            <param name="textAlign">
            The text alignment that should be used relative to the full box model.
            </param>
        </member>
        <member name="M:Zelda.UI.Items.Boxes.TextBox.Draw(System.Int32,Atom.Math.Point2,Zelda.ZeldaDrawContext)">
            <summary>
            Draws the content of this MultiLineTextBox.
            </summary>
            <param name="verticalPosition">
            The position on the y-axis at which this IBox should be drawn at.
            </param>
            <param name="totalSize">
            The total size of the BoxModel this IBox is part of.
            </param>
            <param name="drawContext">
            The current ZeldaDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.Items.Boxes.TextBox.GetDrawPosition(System.Int32,Atom.Math.Point2)">
            <summary>
            Gets the position at which the text should be drawn.
            </summary>
            <param name="verticalPosition">
            The position on the y-axis at which this IBox should be drawn at.
            </param>
            <param name="totalSize">
            The total size of the BoxModel this IBox is part of.
            </param>
            <returns>
            The position.
            </returns>
        </member>
        <member name="T:Zelda.UI.Items.ItemInfo">
            <summary>
            Stores the rendered item information of an <see cref="T:Zelda.Items.ItemInstance"/>.
            This class can't be inherited.
            </summary>
        </member>
        <member name="P:Zelda.UI.Items.ItemInfo.Item">
            <summary>
            Gets the item this ItemInfo instance is visualizing.
            </summary>
        </member>
        <member name="P:Zelda.UI.Items.ItemInfo.Size">
            <summary>
            Gets the pixels this ItemInfo takes up in total.
            </summary>
        </member>
        <member name="P:Zelda.UI.Items.ItemInfo.IsInvalid">
            <summary>
            Gets a value indicating whether this ItemInfo is invalid;
            and as such must be re-
            </summary>
        </member>
        <member name="M:Zelda.UI.Items.ItemInfo.#ctor(Zelda.UI.Items.Boxes.ItemInfoBoxBuilder,Zelda.UI.Items.ItemInfoRenderer)">
            <summary>
            Initializes a new instance of the CachingItemInfo class.
            </summary>
            <param name="boxBuilder">
            The ItemInfoBoxBuilder the new CachingItemInfo should use to split Items
            into individual boxes that can be rendered by the given ItemInfoRenderer.
            </param>
            <param name="renderer">
            The ItemInfoRenderer the new CachingItemInfo should use to render the ItemInfo.
            </param>
        </member>
        <member name="M:Zelda.UI.Items.ItemInfo.Setup(Zelda.IZeldaServiceProvider)">
            <summary>
            Setups this ItemInfoRenderer.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.UI.Items.ItemInfo.RenderCache(Zelda.UI.ItemInfoVisualizationDrawContext)">
            <summary>
            Renders the given ItemInstance into this CachingItemInfo.
            </summary>
            <param name="context">
            Encapsulates all draw and configuration data required for this operation.
            </param>
        </member>
        <member name="M:Zelda.UI.Items.ItemInfo.Draw(Atom.Math.Vector2,System.Single,System.Single,Zelda.ZeldaDrawContext)">
            <summary>
            Draws the ItemInfo cached in this CachingItemInfo.
            </summary>
            <param name="position">
            The position to draw the ItemInfo at.
            </param>
            <param name="depth">
            The depth at which the ItemInfo should be drawn at.
            </param>
            <param name="alpha">
            The alpha color. 1=fully visible.
            </param>
            <param name="drawContext">
            The current ZeldaDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.Items.ItemInfo.Invalidate">
            <summary>
            Invalidates this ItemInfo; requiring it to be redrawn using <see cref="M:Zelda.UI.Items.ItemInfo.RenderCache(Zelda.UI.ItemInfoVisualizationDrawContext)"/>.
            </summary>
        </member>
        <member name="F:Zelda.UI.Items.ItemInfo.item">
            <summary>
            The item this ItemInfo instance is visualizing.
            </summary>
        </member>
        <member name="F:Zelda.UI.Items.ItemInfo.renderTarget">
            <summary>
            The offscreen target into which this I
            </summary>
        </member>
        <member name="F:Zelda.UI.Items.ItemInfo.size">
            <summary>
            The pixels the rendered Into Information takes up in the RenderTarget.
            </summary>
        </member>
        <member name="F:Zelda.UI.Items.ItemInfo.viewSize">
            <summary>
            The size of the game view.
            </summary>
        </member>
        <member name="F:Zelda.UI.Items.ItemInfo.texture">
            <summary>
            The texture that contains the result of drawing the information about the item.
            </summary>
        </member>
        <member name="F:Zelda.UI.Items.ItemInfo.renderer">
            <summary>
            The ItemInfoRenderer this CachingItemInfo uses to render itself.
            </summary>
        </member>
        <member name="F:Zelda.UI.Items.ItemInfo.boxBuilder">
            <summary>
            The ItemInfoBoxBuilder this CachingItemInfo uses to build a box model
            from the ItemInstance.
            </summary>
        </member>
        <member name="T:Zelda.UI.Items.ItemInfoCache">
            <summary>
            Implements the chaching mechanism for the <see cref="T:Zelda.UI.Items.ItemInfo"/> class.
            </summary>
        </member>
        <member name="M:Zelda.UI.Items.ItemInfoCache.#ctor(Zelda.UI.Items.Boxes.ItemInfoBoxBuilder,Zelda.UI.Items.ItemInfoRenderer)">
            <summary>
            Initializes a new instance of the ItemInfoCache class.
            </summary>
            <param name="boxBuilder">
            The ItemInfoBoxBuilder to use when preparing ItemInstances
            for rendering into the new CachingItemInfo.
            </param>
            <param name="renderer">
            The ItemInfoRenderer to use when rendering ItemInstances
            into the new CachingItemInfo.
            </param>
        </member>
        <member name="M:Zelda.UI.Items.ItemInfoCache.Setup(Zelda.IZeldaServiceProvider)">
            <summary>
            Setups this ItemInfoCache.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.UI.Items.ItemInfoCache.GetItemInfoFor(Zelda.UI.ItemInfoVisualizationDrawContext)">
            <summary>
            Gets the ItemInfo for the given ItemInstance.
            </summary>
            <param name="context">
            Encapsulates all draw and configuration data required for this operation.
            </param>
            <returns></returns>
        </member>
        <member name="M:Zelda.UI.Items.ItemInfoCache.Invalidate">
            <summary>
            Invalidates this ItemInfoCache.
            </summary>
        </member>
        <member name="F:Zelda.UI.Items.ItemInfoCache.cache">
            <summary>
            The ItemInfo that contains the last rendered item data.
            </summary>
        </member>
        <member name="F:Zelda.UI.Items.ItemInfoCache.renderer">
            <summary>
            The ItemInfoRenderer that is used to render the ItemInstances
            into CachingItemInfos.
            </summary>
        </member>
        <member name="F:Zelda.UI.Items.ItemInfoCache.boxBuilder">
            <summary>
            The ItemInfoBoxBuilder that is used to split items into individual
            renderable boxes that contain information.
            </summary>
        </member>
        <member name="T:Zelda.UI.Items.ItemInfoColors">
            <summary>
            Provides access to the colors used to visualize the properties
            of items.
            </summary>
        </member>
        <member name="F:Zelda.UI.Items.ItemInfoColors.Background">
            <summary>
            The color of the item information background.
            </summary>
        </member>
        <member name="F:Zelda.UI.Items.ItemInfoColors.Description">
            <summary>
            The color of the description of an item.
            </summary>
        </member>
        <member name="F:Zelda.UI.Items.ItemInfoColors.RequirementNotFulfilled">
            <summary>
            The color of a not fulfilled requirement.
            </summary>
        </member>
        <member name="F:Zelda.UI.Items.ItemInfoColors.BadEffect">
            <summary>
            The color of a bad Status Effect.
            </summary>
        </member>
        <member name="F:Zelda.UI.Items.ItemInfoColors.Effect">
            <summary>
            The color of an additonal effect.
            </summary>
        </member>
        <member name="F:Zelda.UI.Items.ItemInfoColors.GemEffect">
            <summary>
            The color of an additonal effect gained by gems.
            </summary>
        </member>
        <member name="F:Zelda.UI.Items.ItemInfoColors.Set">
            <summary>
            The color of a set.
            </summary>
        </member>
        <member name="F:Zelda.UI.Items.ItemInfoColors.SetEffect">
            <summary>
            The color of an effect of a set.
            </summary>
        </member>
        <member name="F:Zelda.UI.Items.ItemInfoColors.SetItemNotEquipped">
            <summary>
            The color of a set item that has not beed equipped.
            </summary>
        </member>
        <member name="T:Zelda.UI.Items.ItemInfoDisplay">
            <summary>
            Enables the visualization of any <see cref="P:Zelda.UI.Items.ItemInfoDisplay.ItemInstance"/>.
            This class can't be inherited.
            </summary>
        </member>
        <member name="P:Zelda.UI.Items.ItemInfoDisplay.ItemInstance">
            <summary>
            Gets or sets the <see cref="P:Zelda.UI.Items.ItemInfoDisplay.ItemInstance"/> whose ItemInfo gets visualized by this ItemInfoDisplay.
            </summary>
        </member>
        <member name="P:Zelda.UI.Items.ItemInfoDisplay.Player">
            <summary>
            Gets or sets the <see cref="T:Zelda.Entities.PlayerEntity"/> that wants to see the item info.
            </summary>
        </member>
        <member name="P:Zelda.UI.Items.ItemInfoDisplay.Alpha">
            <summary>
            Gets the alpha color of the ItemInfoDisplay.
            </summary>
        </member>
        <member name="M:Zelda.UI.Items.ItemInfoDisplay.#ctor(Zelda.UI.IItemInfoVisualizer)">
            <summary>
            Initializes a new instance of the ItemInfoDisplay class.
            </summary>
            <param name="itemInfoVisualizer">
            The <see cref="T:Zelda.UI.IItemInfoVisualizer"/> that provides a mechanism to draw
            the Item information.
            </param>
        </member>
        <member name="M:Zelda.UI.Items.ItemInfoDisplay.OnDraw(Atom.Xna.ISpriteDrawContext)">
            <summary>
            Called when this ItemInfoDisplay is drawing itself.
            </summary>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.Items.ItemInfoDisplay.OnUpdate(Atom.IUpdateContext)">
            <summary>
            Called when this ItemInfoDisplay is updating itself.
            </summary>
            <param name="updateContext">
            The current IUpdateContext.
            </param>
        </member>
        <member name="F:Zelda.UI.Items.ItemInfoDisplay.visualizer">
            <summary>
            Provides a mechanism that allows the drawing of the exact information 
            that descripes what an Item does.
            </summary>
        </member>
        <member name="T:Zelda.UI.Items.ItemInfoRenderer">
            <summary>
            Implements a mechanism that renders an ItemBoxModel to a Texture.
            </summary>
        </member>
        <member name="M:Zelda.UI.Items.ItemInfoRenderer.CreateRenderTarget">
            <summary>
            Creates a RenderTarget to which this ItemInfoRenderer
            should render ItemInfos to.
            </summary>
            <returns>
            A newly created RenderTarget2D.
            </returns>
        </member>
        <member name="M:Zelda.UI.Items.ItemInfoRenderer.Setup(Zelda.IZeldaServiceProvider)">
            <summary>
            Setups this ItemInfoRenderer.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.UI.Items.ItemInfoRenderer.Render(Zelda.UI.Items.Boxes.ItemBoxModel,Microsoft.Xna.Framework.Graphics.RenderTarget2D)">
            <summary>
            Renders the given BoxModel to
            </summary>
            <param name="itemBoxModel">
            The BoxModel of the item to draw.
            </param>
            <param name="renderTarget">
            The target to render to.
            </param>
        </member>
        <member name="M:Zelda.UI.Items.ItemInfoRenderer.ActualyDraw(Zelda.UI.Items.Boxes.ItemBoxModel)">
            <summary>
            Executes the actual drawing logic.
            </summary>
            <param name="itemBoxModel">
            The BoxModel of the item to draw.
            </param>
        </member>
        <member name="F:Zelda.UI.Items.ItemInfoRenderer.device">
            <summary>
            The xna graphics device that used during rendering.
            </summary>
        </member>
        <member name="F:Zelda.UI.Items.ItemInfoRenderer.drawContext">
            <summary>
            The context to which
            </summary>
        </member>
        <member name="F:Zelda.UI.Items.ItemInfoRenderer.serviceProvider">
            <summary>
            Provides fast access to game-related services.
            </summary>
        </member>
        <member name="T:Zelda.UI.Items.ItemInfoResources">
            <summary>
            Provides access to the resources required to visualize items.
            </summary>
        </member>
        <member name="P:Zelda.UI.Items.ItemInfoResources.FontText">
            <summary>
            The <see cref="T:Atom.Xna.Fonts.IFont"/> that is used to draw an Item's info-text.
            </summary>
        </member>
        <member name="P:Zelda.UI.Items.ItemInfoResources.FontSmallText">
            <summary>
            The <see cref="T:Atom.Xna.Fonts.IFont"/> that is used to draw most of the info text.
            </summary>
        </member>
        <member name="P:Zelda.UI.Items.ItemInfoResources.FontSmallBoldText">
            <summary>
            The <see cref="T:Atom.Xna.Fonts.IFont"/> that is used to draw various important things.
            </summary>
        </member>
        <member name="P:Zelda.UI.Items.ItemInfoResources.FontLargeText">
            <summary>
            The <see cref="T:Atom.Xna.Fonts.IFont"/> that is used to draw an Item's name.
            </summary>
        </member>
        <member name="P:Zelda.UI.Items.ItemInfoResources.SpriteRuby">
            <summary>
            Gets the sprite that is used to visualize.
            </summary>
        </member>
        <member name="M:Zelda.UI.Items.ItemInfoResources.Setup(Zelda.IZeldaServiceProvider)">
            <summary>
            Setups and loads the ItemVisualizationResources.
            </summary>
            <param name="serviceProvider">
            Provides access to game-related services.
            </param>
        </member>
        <member name="F:Zelda.UI.Items.ItemInfoResources.spriteRuby">
            <summary>
            Gets a UserInterface Ruby Sprite.
            </summary>
        </member>
        <member name="F:Zelda.UI.Items.ItemInfoResources.fontText">
            <summary>
            The <see cref="T:Atom.Xna.Fonts.IFont"/> that is used to draw an Item's info-text.
            </summary>
        </member>
        <member name="F:Zelda.UI.Items.ItemInfoResources.fontSmallText">
            <summary>
            The <see cref="T:Atom.Xna.Fonts.IFont"/> that is used to draw most of the info text.
            </summary>
        </member>
        <member name="F:Zelda.UI.Items.ItemInfoResources.fontSmallBoldText">
            <summary>
            The <see cref="T:Atom.Xna.Fonts.IFont"/> that is used to draw various important things.
            </summary>
        </member>
        <member name="F:Zelda.UI.Items.ItemInfoResources.fontLargeText">
            <summary>
            The <see cref="T:Atom.Xna.Fonts.IFont"/> that is used to draw an Item's name.
            </summary>
        </member>
        <member name="T:Zelda.UI.Items.ItemInfoVisualizer">
            <summary>
            Implements an IItemInfoVisualizer that creates ItemInfos by splitting Items into
            individual IBoxes of data and provides caching of the last draw ItemInfos.
            </summary>
        </member>
        <member name="M:Zelda.UI.Items.ItemInfoVisualizer.#ctor">
            <summary>
            Initializes a new instance of the ItemInfoVisualizer class.
            </summary>
        </member>
        <member name="M:Zelda.UI.Items.ItemInfoVisualizer.Setup(Zelda.IZeldaServiceProvider)">
            <summary>
            Setups this NewItemInfoVisualizer.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.UI.Items.ItemInfoVisualizer.Draw(Zelda.UI.ItemInfoVisualizationDrawContext)">
            <summary>
            Draws information about the given Item at the given position and depth,
            selecting the correct drawing method.
            </summary>
            <param name="context">
            Encapsulates all draw and configuration data required for this operation.
            </param>
        </member>
        <member name="M:Zelda.UI.Items.ItemInfoVisualizer.GetDrawPosition(System.Int32,System.Int32,Zelda.UI.Items.ItemInfo,Zelda.ZeldaDrawContext)">
            <summary>
            Tries to ensure that the given position is drawing the given
            ItemInfo within the game view.
            </summary>
            <param name="positionX"></param>
            <param name="positionY"></param>
            <param name="itemInfo"></param>
            <param name="drawContext">
            The current ZeldaDrawContext.
            </param>
            <returns>
            The draw position.
            </returns>
        </member>
        <member name="M:Zelda.UI.Items.ItemInfoVisualizer.ResetCache">
            <summary>
            Clears the Item Info cache used by this IItemInfoVisualizer.
            </summary>
        </member>
        <member name="T:Zelda.UI.Items.ItemSocketRenderer">
            <summary>
            Responsible for rendering the sockets and gems of an EquipmentInstance.
            </summary>
        </member>
        <member name="M:Zelda.UI.Items.ItemSocketRenderer.#ctor(Atom.Xna.ISpriteLoader)">
            <summary>
            Initializes a new instance of the ItemSocketRenderer class.
            </summary>
            <param name="spriteLoader">
            Provides a mechanism that allows the loading of Sprite assets.
            </param>
        </member>
        <member name="M:Zelda.UI.Items.ItemSocketRenderer.DrawSockets(Zelda.Items.ItemInstance,Atom.Math.Vector2,System.Single,Atom.Xna.Batches.ISpriteBatch)">
            <summary>
            Draws the Sockets of the given ItemInstance at the given position.
            </summary>
            <param name="itemInstance">
            The ItemInstance whose sockets should be drawn.
            </param>
            <param name="drawPosition">
            The position the ItemInstance was drawn.
            </param>
            <param name="depth">
            The depth to draw at.
            </param>
            <param name="batch">
            The XNA SpriteBatch object to use.
            </param>
        </member>
        <member name="M:Zelda.UI.Items.ItemSocketRenderer.GetSocketOffset(System.Int32,Zelda.Items.Item)">
            <summary>
            Gets the socket position at the given index relative to the given Item.
            </summary>
            <param name="socketIndex">
            The index of the socket.
            </param>
            <param name="item">
            The Item to which the the socket position should be relative to.
            </param>
            <returns>
            The position.
            </returns>
        </member>
        <member name="M:Zelda.UI.Items.ItemSocketRenderer.GetSocketSprite(Zelda.Status.ElementalSchool)">
            <summary>
            Gets the cell sprite associated with Gem of the given ElementalSchool.
            </summary>
            <param name="gemColor">
            The color of the Gem.
            </param>
            <returns>
            The requested Sprite.
            </returns>
        </member>
        <member name="F:Zelda.UI.Items.ItemSocketRenderer.spriteFireSocket">
            <summary>
            The sprites used to visualize the gem slots of an item.
            </summary>
        </member>
        <member name="F:Zelda.UI.Items.ItemSocketRenderer.spriteWaterSocket">
            <summary>
            The sprites used to visualize the gem slots of an item.
            </summary>
        </member>
        <member name="F:Zelda.UI.Items.ItemSocketRenderer.spriteLightSocket">
            <summary>
            The sprites used to visualize the gem slots of an item.
            </summary>
        </member>
        <member name="F:Zelda.UI.Items.ItemSocketRenderer.spriteNatureSocket">
            <summary>
            The sprites used to visualize the gem slots of an item.
            </summary>
        </member>
        <member name="F:Zelda.UI.Items.ItemSocketRenderer.spriteShadowSocket">
            <summary>
            The sprites used to visualize the gem slots of an item.
            </summary>
        </member>
        <member name="F:Zelda.UI.Items.ItemSocketRenderer.spritePristmaticSocket">
            <summary>
            The sprites used to visualize the gem slots of an item.
            </summary>
        </member>
        <member name="T:Zelda.UI.Items.ItemTooltip">
            <summary>
            
            </summary>
        </member>
        <member name="P:Zelda.UI.Items.ItemTooltip.Item">
            <summary>
            Gets or sets the Item that is shown in this ItemTooltip.
            </summary>
        </member>
        <member name="P:Zelda.UI.Items.ItemTooltip.ItemInstance">
            <summary>
            Gets the ItemInstance that is shown by this ItemTooltip.
            </summary>
        </member>
        <member name="M:Zelda.UI.Items.ItemTooltip.#ctor(Zelda.UI.Items.ItemTooltipDrawElement)">
            <summary>
            Initializes a new instance of the ItemTooltip class.
            </summary>
            <param name="tooltipDrawElement">
            The IooltipDrawElement responsible for drawing the actual item information
            when player moves the mouse over this ItemTooltip.
            </param>
        </member>
        <member name="M:Zelda.UI.Items.ItemTooltip.RefreshClientArea">
            <summary>
            Refreshes the area the tooltip takes up.
            </summary>
        </member>
        <member name="M:Zelda.UI.Items.ItemTooltip.DrawItemSprite(Atom.Xna.ISpriteDrawContext)">
            <summary>
            Draws the item's sprite at the center of this ItemTooltip.
            </summary>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.Items.ItemTooltip.OnUpdate(Atom.IUpdateContext)">
            <summary>
            Called when this ItemTooltip is updating itself.
            </summary>
            <param name="updateContext">
            The current IUpdateContext.
            </param>
        </member>
        <member name="F:Zelda.UI.Items.ItemTooltip.item">
            <summary>
            Represents the storage field of Item property.
            </summary>
        </member>
        <member name="F:Zelda.UI.Items.ItemTooltip.itemInstance">
            <summary>
            Represents the instance of the Item that has been created to draw this ItemTooltip.
            </summary>
        </member>
        <member name="F:Zelda.UI.Items.ItemTooltip.itemSprite">
            <summary>
            Represents the sprite of the item.
            </summary>
        </member>
        <member name="T:Zelda.UI.Items.ItemTooltipDrawElement">
            <summary>
            
            </summary>
        </member>
        <member name="M:Zelda.UI.Items.ItemTooltipDrawElement.#ctor(Zelda.UI.Items.ItemInfoDisplay)">
            <summary>
            Initializes a new instance of the ItemTooltipDrawElement class.
            </summary>
            <param name="itemInfoDisplay">
            Represents the UI element that executes the actual item information drawing logic.
            </param>
        </member>
        <member name="M:Zelda.UI.Items.ItemTooltipDrawElement.OnTooltipChanged">
            <summary>
            Called when the Tooltip drawn by this ItemTooltipDrawElement has changed.
            </summary>
        </member>
        <member name="F:Zelda.UI.Items.ItemTooltipDrawElement.itemInfoDisplay">
            <summary>
            Represents the UI element that executes the actual item information drawing logic.
            </summary>
        </member>
        <member name="T:Zelda.UI.Items.ItemTooltipGroup">
            <summary>
            Represents a group of ItemTooltips to which mouse input data is only passed
            when the mouse input data lies within the client area of the ItemTooltipGroup.
            </summary>
        </member>
        <member name="M:Zelda.UI.Items.ItemTooltipGroup.#ctor(Zelda.UI.Items.ItemTooltipDrawElement)">
            <summary>
            Initializes a new instance of the ItemTooltipGroup class.
            </summary>
            <param name="tooltipDrawElement">
            The IooltipDrawElement responsible for drawing the actual item information
            when player moves the mouse over any of the ItemTooltip the new ItemTooltipGroup contains.
            </param>
        </member>
        <member name="M:Zelda.UI.Items.ItemTooltipGroup.OnDraw(Atom.Xna.ISpriteDrawContext)">
            <summary>
            Called when this ItemTooltipGroup is drawing itself.
            </summary>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.Items.ItemTooltipGroup.OnPreUpdate">
            <summary>
            Gets called before this ItemTooltipGroup is updated.
            </summary>
        </member>
        <member name="M:Zelda.UI.Items.ItemTooltipGroup.OnUpdate(Atom.IUpdateContext)">
            <summary>
            Called when this ItemTooltipGroup is updating itself.
            </summary>
            <param name="updateContext">
            The current IUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.UI.Items.ItemTooltipGroup.HandleMouseInput(Microsoft.Xna.Framework.Input.MouseState@,Microsoft.Xna.Framework.Input.MouseState@)">
            <summary>
            Called once per frame to handle mouse input.
            </summary>
            <param name="mouseState">
            The state of the <see cref="T:Microsoft.Xna.Framework.Input.Mouse"/>.
            </param>
            <param name="oldMouseState">
            The state of the <see cref="T:Microsoft.Xna.Framework.Input.Mouse"/> one frame ago.
            </param>
        </member>
        <member name="M:Zelda.UI.Items.ItemTooltipGroup.AddNew(Zelda.Items.Item)">
            <summary>
            Adds a new ItemTooltip to this ItemTooltipGroup.
            </summary>
            <param name="item">
            The Item for which a new ItemTooltip should be created.
            </param>
            <returns>
            The newly created ItemTooltip.
            </returns>
        </member>
        <member name="M:Zelda.UI.Items.ItemTooltipGroup.Clear">
            <summary>
            Removes all ItemTooltips from this ItemTooltipGroup.
            </summary>
        </member>
        <member name="M:Zelda.UI.Items.ItemTooltipGroup.GetEnumerator">
            <summary>
            Gets an enumerator that iterates over the ItemTooltips this ItemTooltipGroup contains.
            </summary>
            <returns>
            A new enumerator.
            </returns>
        </member>
        <member name="M:Zelda.UI.Items.ItemTooltipGroup.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator that iterates over the ItemTooltips this ItemTooltipGroup contains.
            </summary>
            <returns>
            A new enumerator.
            </returns>
        </member>
        <member name="F:Zelda.UI.Items.ItemTooltipGroup.tooltips">
            <summary>
            The ItemTooltips that are part of this ItemTooltipGroup.
            </summary>
        </member>
        <member name="F:Zelda.UI.Items.ItemTooltipGroup.tooltipDrawElement">
            <summary>
            The IooltipDrawElement responsible for drawing the actual item information
            when player moves the mouse over this ItemTooltip.
            </summary>
        </member>
        <member name="T:Zelda.UI.Items.InventoryService">
            <summary>
            Implements a mechanism for opening/closing the UI for the various Inventory implementations.
            </summary>
        </member>
        <member name="M:Zelda.UI.Items.InventoryService.#ctor(Zelda.UI.IngameUserInterface)">
            <summary>
            Initializes a new instance of the OpenInventoryService class.
            </summary>
            <param name="userInterface">
            The UserInterface that contains the related UI elements.
            </param>
        </member>
        <member name="M:Zelda.UI.Items.InventoryService.Open``1">
            <summary>
            Opens the inventory of the specified type.
            </summary>
            <typeparam name="TInventory">
            The exact type of the Inventory to open.
            </typeparam>
        </member>
        <member name="M:Zelda.UI.Items.InventoryService.Close``1">
            <summary>
            Closes the inventory of the specified type.
            </summary>
            <typeparam name="TInventory">
            The exact type of the Inventory to close.
            </typeparam>
        </member>
        <member name="M:Zelda.UI.Items.InventoryService.GetWindow``1">
            <summary>
            Gets the IngameWindow associated with the inventory of the specified type.
            </summary>
            <typeparam name="TInventory">
            The exact type of the Inventory.
            </typeparam>
            <returns>
            The associated IngameWindow.
            </returns>
        </member>
        <member name="M:Zelda.UI.Items.InventoryService.PlayOpenChestSound">
            <summary>
            Plays the sound sample for opening a chest.
            </summary>
        </member>
        <member name="M:Zelda.UI.Items.InventoryService.Setup(Zelda.IZeldaServiceProvider)">
            <summary>
            Setups this OpenInventoryService.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="F:Zelda.UI.Items.InventoryService.serviceProvider">
            <summary>
            Provides fast access to game-related services.
            </summary>
        </member>
        <member name="F:Zelda.UI.Items.InventoryService.userInterface">
            <summary>
            The UserInterface that contains the related UI elements.
            </summary>
        </member>
        <member name="T:Zelda.UI.PickedupItemDisplay">
            <summary>
            Enables the visualization of the item the PlayerEntity has currently picked up.
            </summary>
        </member>
        <member name="P:Zelda.UI.PickedupItemDisplay.Player">
            <summary>
            Gets or sets the PlayerEntity whos currently PickedUpItem (if any)
            is visualized by the <see cref="T:Zelda.UI.PickedupItemDisplay"/>.
            </summary>
        </member>
        <member name="M:Zelda.UI.PickedupItemDisplay.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.UI.PickedupItemDisplay"/> class.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game related services.
            </param>
        </member>
        <member name="M:Zelda.UI.PickedupItemDisplay.OnDraw(Atom.Xna.ISpriteDrawContext)">
            <summary>
            Called when this <see cref="T:Zelda.UI.PickedupItemDisplay"/> is drawing itself.
            </summary>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.PickedupItemDisplay.OnUpdate(Atom.IUpdateContext)">
            <summary>
            Called when this <see cref="T:Zelda.UI.PickedupItemDisplay"/> is updating itself.
            </summary>
            <param name="updateContext">
            The current IUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.UI.PickedupItemDisplay.HandleMouseInput(Microsoft.Xna.Framework.Input.MouseState@,Microsoft.Xna.Framework.Input.MouseState@)">
            <summary>
            Gets called once per frame to handle mouse input.
            </summary>
            <param name="mouseState">The current state of the mouse.</param>
            <param name="oldMouseState">The state of the mouse one frame ago.</param>
        </member>
        <member name="F:Zelda.UI.PickedupItemDisplay.fontItemCount">
            <summary>
            The IFont that is used when drawing the Item Count.
            </summary>
        </member>
        <member name="T:Zelda.UI.NavButton">
            <summary>
            Represents a Button that is used to navigate back and forth in e.g. a wizard-style UI.
            </summary>
        </member>
        <member name="T:Zelda.UI.NavButton.Mode">
            <summary>
            Enumerates the different modes that the NavButton can be in.
            </summary>
        </member>
        <member name="F:Zelda.UI.NavButton.Mode.None">
            <summary>
            A disabled NavButton.
            </summary>
        </member>
        <member name="F:Zelda.UI.NavButton.Mode.Back">
            <summary>
            The NavButton navigates backwards.
            </summary>
        </member>
        <member name="F:Zelda.UI.NavButton.Mode.Next">
            <summary>
            The NavButton navigates forwards.
            </summary>
        </member>
        <member name="F:Zelda.UI.NavButton.Mode.Complete">
            <summary>
            The NavButton completes the process.
            </summary>
        </member>
        <member name="P:Zelda.UI.NavButton.ButtonMode">
            <summary>
            Gets or sets the current Mode of the NavButton.
            </summary>
        </member>
        <member name="M:Zelda.UI.NavButton.#ctor(System.String,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the NavButton class.
            </summary>
            <param name="name">The name fo the button.</param>
            <param name="serviceProvider">Provides fast access to game-related services.</param>
        </member>
        <member name="M:Zelda.UI.NavButton.SetUseable(System.Boolean)">
            <summary>
            Gets or sets a value indicating whether this NavButton is currently enabled and useable.
            </summary>
            <param name="useable">true if the button is useable; -or- otherwise false.</param>
        </member>
        <member name="T:Zelda.UI.Ocarina.ComposedSongListElement">
            <summary>
            Visualizes the list of Ocarina Songs the Player knows.
            </summary>
        </member>
        <member name="M:Zelda.UI.Ocarina.ComposedSongListElement.#ctor(Zelda.UI.Ocarina.NoteVisualizer,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the ComposedSongListElement class.
            </summary>
            <param name="noteVisualizer">
            Provides a mechanism to draw song notes.
            </param>
            <param name="serviceProvider">
            Provides fast access to game related services.
            </param>
        </member>
        <member name="M:Zelda.UI.Ocarina.ComposedSongListElement.Reset">
            <summary>
            Resets this ComposedSongListElement. 
            </summary>
        </member>
        <member name="M:Zelda.UI.Ocarina.ComposedSongListElement.OnUpdate(Atom.IUpdateContext)">
            <summary>
            Called when this OcarinaSongListDisplay is updating itself.
            </summary>
            <param name="updateContext">
            The current IUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.UI.Ocarina.ComposedSongListElement.OnDraw(Atom.Xna.ISpriteDrawContext)">
            <summary>
            Called when this OcarinaSongListDisplay is drawing itself.
            </summary>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.Ocarina.ComposedSongListElement.OnAdded(Atom.Xna.UI.UserInterface)">
            <summary>
            Gets called when the UIElement was added to the given UserInterface.
            </summary>
            <param name="userInterface">
            The related UserInterface.
            </param>
        </member>
        <member name="M:Zelda.UI.Ocarina.ComposedSongListElement.OnRemoved(Atom.Xna.UI.UserInterface)">
            <summary>
            Gets called when the UIElement was removed from the given UserInterface.
            </summary>
            <param name="userInterface">
            The related UserInterface.
            </param>
        </member>
        <member name="M:Zelda.UI.Ocarina.ComposedSongListElement.OnIsVisibleChanged">
            <summary>
            Called when the visability state of this OcarinaSongListDisplay has changed.
            </summary>
        </member>
        <member name="M:Zelda.UI.Ocarina.ComposedSongListElement.Toggle(System.Boolean)">
            <summary>
            Toggles the internal song list display on or off.
            </summary>
            <param name="on">
            States whether the list should be toggled on; or off.
            </param>
        </member>
        <member name="M:Zelda.UI.Ocarina.ComposedSongListElement.OnSelectedSongChanged(System.Object,Zelda.Ocarina.Song)">
            <summary>
            Called when the currently selected Song has changed.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
            <param name="song">
            The now selected Song.
            </param>
        </member>
        <member name="F:Zelda.UI.Ocarina.ComposedSongListElement.selectionElement">
            <summary>
            The UIElement that exposes the list of Songs the user might select.
            </summary>
        </member>
        <member name="F:Zelda.UI.Ocarina.ComposedSongListElement.descriptionElement">
            <summary>
            The UIElement that shows information about the currently selected Song.
            </summary>
        </member>
        <member name="T:Zelda.UI.Ocarina.NoteVisualizer">
            <summary>
            Provides a mechanism to visualize the notes of an Ocarina Song.
            </summary>
        </member>
        <member name="M:Zelda.UI.Ocarina.NoteVisualizer.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the NoteVisualizer class.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.UI.Ocarina.NoteVisualizer.Draw(Zelda.Ocarina.Note,Atom.Math.Vector2,Atom.Xna.Batches.ISpriteBatch)">
            <summary>
            Draws the given Note at the given position.
            </summary>
            <param name="note">The note to draw.</param>
            <param name="postion">The drawing position.</param>
            <param name="batch">The XNA SpriteBatch.</param>
        </member>
        <member name="M:Zelda.UI.Ocarina.NoteVisualizer.Draw(Zelda.Ocarina.Note,Atom.Math.Vector2,Microsoft.Xna.Framework.Color,Atom.Xna.Batches.ISpriteBatch)">
            <summary>
            Draws the given Note at the given position.
            </summary>
            <param name="note">The note to draw.</param>
            <param name="postion">The drawing position.</param>
            <param name="color">The color the Note should be tinted in.</param>
            <param name="batch">The XNA SpriteBatch.</param>
        </member>
        <member name="M:Zelda.UI.Ocarina.NoteVisualizer.GetSprite(Zelda.Ocarina.Note)">
            <summary>
            Gets the Sprite associated with the given Note.
            </summary>
            <param name="note">
            The input Note.
            </param>
            <returns>
            The sprite related to the given note.
            </returns>
        </member>
        <member name="F:Zelda.UI.Ocarina.NoteVisualizer.spriteNoteLeft">
            <summary>
            The sprites that represent the notes.
            </summary>
        </member>
        <member name="F:Zelda.UI.Ocarina.NoteVisualizer.spriteNoteRight">
            <summary>
            The sprites that represent the notes.
            </summary>
        </member>
        <member name="F:Zelda.UI.Ocarina.NoteVisualizer.spriteNoteUp">
            <summary>
            The sprites that represent the notes.
            </summary>
        </member>
        <member name="F:Zelda.UI.Ocarina.NoteVisualizer.spriteNoteDown">
            <summary>
            The sprites that represent the notes.
            </summary>
        </member>
        <member name="T:Zelda.UI.Ocarina.OcarinaWindow">
            <summary>
            The <see cref="T:Zelda.UI.Ocarina.OcarinaWindow"/> is used to allow the
            player access to his ocarina skills.
            </summary>
        </member>
        <member name="F:Zelda.UI.Ocarina.OcarinaWindow.MaximumPlayedNotes">
            <summary>
            The maximum number of notes a song can have.
            </summary>
        </member>
        <member name="F:Zelda.UI.Ocarina.OcarinaWindow.NoteCooldown">
            <summary>
            The minimum time that must have been passed 
            before another note can be played.
            </summary>
        </member>
        <member name="P:Zelda.UI.Ocarina.OcarinaWindow.OcarinaBox">
            <summary>
            Gets the OcarinaBox associated with the current player.
            </summary>
        </member>
        <member name="P:Zelda.UI.Ocarina.OcarinaWindow.Instrument">
            <summary>
            Gets the currently used Instrument.
            </summary>
        </member>
        <member name="P:Zelda.UI.Ocarina.OcarinaWindow.CanBeOpened">
            <summary>
            Gets a value indicating whether this IngameWindow can currently be opened.
            </summary>
        </member>
        <member name="M:Zelda.UI.Ocarina.OcarinaWindow.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the OcarinaWindow class.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game related services.
            </param>
        </member>
        <member name="M:Zelda.UI.Ocarina.OcarinaWindow.OnDraw(Atom.Xna.ISpriteDrawContext)">
            <summary>
            Called when this OcarinaWindow is drawing itself.
            </summary>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.Ocarina.OcarinaWindow.DrawBoxAndNotes(Atom.Xna.Batches.ISpriteBatch)">
            <summary>
            Draws the ocarina note box and the currently played notes.
            </summary>
            <param name="batch">
            The current SpriteBatch.
            </param>
        </member>
        <member name="M:Zelda.UI.Ocarina.OcarinaWindow.GetOffsetY(Zelda.Ocarina.Note)">
            <summary>
            Gets the offset on the y-axis the given Note should be drawn at.
            </summary>
            <param name="note">
            The input Note.
            </param>
            <returns>
            The offset related to the given note.
            </returns>
        </member>
        <member name="M:Zelda.UI.Ocarina.OcarinaWindow.OnUpdate(Atom.IUpdateContext)">
            <summary>
            Called when this OcarinaWindow is updating itself.
            </summary>
            <param name="updateContext">
            The current IUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.UI.Ocarina.OcarinaWindow.Opening">
            <summary>
            Called when this OcarinaWindow is opening.
            </summary>
        </member>
        <member name="M:Zelda.UI.Ocarina.OcarinaWindow.Closing">
            <summary>
            Called when this OcarinaWindow is closing.
            </summary>
        </member>
        <member name="M:Zelda.UI.Ocarina.OcarinaWindow.PlayNote(Zelda.Ocarina.Note)">
            <summary>
            Plays the given Note.
            </summary>
            <param name="note">
            The Note to play.
            </param>
        </member>
        <member name="M:Zelda.UI.Ocarina.OcarinaWindow.AnalyzePlayedNotes">
            <summary>
            Analyzes the notes the player has played, so far.
            </summary>
        </member>
        <member name="M:Zelda.UI.Ocarina.OcarinaWindow.ClearNotes">
            <summary>
            Clears the list of notes the player has played.
            </summary>
        </member>
        <member name="M:Zelda.UI.Ocarina.OcarinaWindow.DeleteLastNote">
            <summary>
            Attempts to remove the last played note.
            </summary>
        </member>
        <member name="M:Zelda.UI.Ocarina.OcarinaWindow.HandleKeyInput(Microsoft.Xna.Framework.Input.KeyboardState@,Microsoft.Xna.Framework.Input.KeyboardState@)">
            <summary>
            Handles keyboard input related to the OcarinaWindow.
            </summary>
            <param name="keyState">The current state of the keyboard.</param>
            <param name="oldKeyState">The state of the keyboard one frame ago.</param>
        </member>
        <member name="M:Zelda.UI.Ocarina.OcarinaWindow.AddChildElementsTo(Atom.Xna.UI.UserInterface)">
            <summary>
            Adds the child elements of this IngameWindow to the specified UserInterface.
            </summary>
            <param name="userInterface">
            The related UserInterface object.
            </param>
        </member>
        <member name="M:Zelda.UI.Ocarina.OcarinaWindow.RemoveChildElementsFrom(Atom.Xna.UI.UserInterface)">
            <summary>
            Removes the child elements of this IngameWindow from the specified UserInterface.
            </summary>
            <param name="userInterface">
            The related UserInterface object.
            </param>
        </member>
        <member name="M:Zelda.UI.Ocarina.OcarinaWindow.OnPlayerChanged">
            <summary>
            Called when the PlayerEntity that owns this IngameWindow has changed.
            </summary>
        </member>
        <member name="F:Zelda.UI.Ocarina.OcarinaWindow.firstOpen">
            <summary>
            States whether the OcarinaWindow was open before.
            </summary>
        </member>
        <member name="F:Zelda.UI.Ocarina.OcarinaWindow.noteCooldown">
            <summary>
            States the time until another note can be played.
            </summary>
        </member>
        <member name="F:Zelda.UI.Ocarina.OcarinaWindow.playedNotes">
            <summary>
            The Notes that have been played by the player.
            </summary>
        </member>
        <member name="F:Zelda.UI.Ocarina.OcarinaWindow.songListElement">
            <summary>
            Shows all songs known to the player.
            </summary>
        </member>
        <member name="F:Zelda.UI.Ocarina.OcarinaWindow.noteVisualizer">
            <summary>
            Provides a mechanism to draw the notes on the Ocarina Window.
            </summary>
        </member>
        <member name="F:Zelda.UI.Ocarina.OcarinaWindow.oldPlayerAnimation">
            <summary>
            Stores the animation the player was in before he was playing on the Ocarina.
            </summary>
        </member>
        <member name="F:Zelda.UI.Ocarina.OcarinaWindow.spriteBox">
            <summary>
            The Sprite that represents the box in which the notes/notes are shown.
            </summary>
        </member>
        <member name="T:Zelda.UI.Ocarina.SongDescriptionElement">
            <summary>
            Displays information about a single <see cref="T:Zelda.Ocarina.Song"/>.
            </summary>
        </member>
        <member name="M:Zelda.UI.Ocarina.SongDescriptionElement.#ctor(Zelda.UI.Ocarina.NoteVisualizer)">
            <summary>
            Initializes a new instance of the SongDescriptionElement class.
            </summary>
            <param name="noteVisualizer">
            Provides a mechanism to draw song notes.
            </param>
        </member>
        <member name="M:Zelda.UI.Ocarina.SongDescriptionElement.OnDraw(Atom.Xna.ISpriteDrawContext)">
            <summary>
            Called when this SongDescriptionElement is drawing itself.
            </summary>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.Ocarina.SongDescriptionElement.DrawSongName(Atom.Xna.ISpriteDrawContext)">
            <summary>
            Draws the name string of the Song.
            </summary>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.Ocarina.SongDescriptionElement.DrawNotes(Atom.Xna.Batches.ISpriteBatch)">
            <summary>
            Draws the notes of the Song.
            </summary>
            <param name="batch">
            A XNA SpriteBatch object.
            </param>
        </member>
        <member name="M:Zelda.UI.Ocarina.SongDescriptionElement.OnUpdate(Atom.IUpdateContext)">
            <summary>
            Called when this SongDescriptionElement is updating itself.
            </summary>
            <param name="updateContext">
            The current IUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.UI.Ocarina.SongDescriptionElement.ShowSong(Zelda.Ocarina.Song)">
            <summary>
            Shows the description of the specified Song.
            </summary>
            <param name="song">
            The song whose description should be shown.
            Null resets the current description.
            </param>
        </member>
        <member name="F:Zelda.UI.Ocarina.SongDescriptionElement.song">
            <summary>
            The currently selected Song.
            </summary>
        </member>
        <member name="F:Zelda.UI.Ocarina.SongDescriptionElement.descriptionField">
            <summary>
            The TextField that shows the description of the Song.
            </summary>
        </member>
        <member name="F:Zelda.UI.Ocarina.SongDescriptionElement.fontName">
            <summary>
            The font used to draw the name of the Song.
            </summary>
        </member>
        <member name="F:Zelda.UI.Ocarina.SongDescriptionElement.noteVisualizer">
            <summary>
            Provides a mechanism to draw song notes.
            </summary>
        </member>
        <member name="T:Zelda.UI.Ocarina.SongSelectionElement">
            <summary>
            Allows the player to select a song from a list of all Songs
            the player has learned.
            </summary>
        </member>
        <member name="F:Zelda.UI.Ocarina.SongSelectionElement.MaximumVisibleSongCount">
            <summary>
            The maximum number of songs that can be seen at the same time in the Song Selection Element.
            </summary>
        </member>
        <member name="E:Zelda.UI.Ocarina.SongSelectionElement.SelectedSongChanged">
            <summary>
            Fired when the currently selected Song has changed.
            </summary>
        </member>
        <member name="P:Zelda.UI.Ocarina.SongSelectionElement.Player">
            <summary>
            Gets the PlayerEntity whose songs are selectable in this SongSelectionElement.
            </summary>
        </member>
        <member name="M:Zelda.UI.Ocarina.SongSelectionElement.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the SongSelectionElement class.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.UI.Ocarina.SongSelectionElement.SetupNoteButtons(Zelda.IZeldaServiceProvider)">
            <summary>
            Setups and creates the note buttons of this SongSelectionElement.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.UI.Ocarina.SongSelectionElement.CreateAndSetupNoteButton(System.Int32,Atom.Xna.Sprite)">
            <summary>
            Creates and setups a new note button.
            </summary>
            <param name="index">The index of the new button.</param>
            <param name="spriteNote">The note sprite.</param>
            <returns>The newly created button.</returns>
        </member>
        <member name="M:Zelda.UI.Ocarina.SongSelectionElement.ShowEnableAndRefresh">
            <summary>
            Shows, enables and refreshes this SongSelectionSelement.
            </summary>
        </member>
        <member name="M:Zelda.UI.Ocarina.SongSelectionElement.SelectSongIfNoneSelected">
            <summary>
            Selects a Song if no Song is currently selected.
            </summary>
        </member>
        <member name="M:Zelda.UI.Ocarina.SongSelectionElement.DeselectSong">
            <summary>
            Deselects the currently selected song (if any).
            </summary>
        </member>
        <member name="M:Zelda.UI.Ocarina.SongSelectionElement.RefreshNoteButtons">
            <summary>
            Refreshes the state of all note buttons that link to the Songs
            of the player.
            </summary>
        </member>
        <member name="M:Zelda.UI.Ocarina.SongSelectionElement.RefreshNoteButton(System.Int32,Zelda.Ocarina.OcarinaBox)">
            <summary>
            Refreshes the note button at the given index.
            </summary>
            <param name="noteIndex">
            The index of the note button to refresh
            </param>
            <param name="ocarinaBox">
            The OcarinaBox that contains the Songs the player knows.
            </param>
        </member>
        <member name="M:Zelda.UI.Ocarina.SongSelectionElement.RefreshNoteButton(Zelda.Ocarina.Song,Atom.Xna.UI.Controls.SpriteButton)">
            <summary>
            Refreshes the given note button to link to the given Song.
            </summary>
            <param name="song">
            The Song the note button should link to. 
            If null the button is totally un-linked.
            </param>
            <param name="button">
            The note button to refresh.
            </param>
        </member>
        <member name="M:Zelda.UI.Ocarina.SongSelectionElement.GetDefaultButtonColor(Zelda.Ocarina.SongDescriptionData)">
            <summary>
            Gets the default color of a note button.
            </summary>
            <param name="descriptionData">
            The data descriping the visualization data of the Song.
            </param>
            <returns>
            The Xna.Color the note button should have when not selected.
            </returns>
        </member>
        <member name="M:Zelda.UI.Ocarina.SongSelectionElement.GetSelectedButtonColor(Zelda.Ocarina.SongDescriptionData)">
            <summary>
            Gets the selected color of a note button.
            </summary>
            <param name="descriptionData">
            The data descriping the visualization data of the Song.
            </param>
            <returns>
            The Xna.Color the note button should have when selected.
            </returns>
        </member>
        <member name="M:Zelda.UI.Ocarina.SongSelectionElement.OnAdded(Atom.Xna.UI.UserInterface)">
            <summary>
            Called when this SongSelectionElement has been added to the given UserInterface.
            </summary>
            <param name="userInterface">
            The related UserInterface.
            </param>
        </member>
        <member name="M:Zelda.UI.Ocarina.SongSelectionElement.OnRemoved(Atom.Xna.UI.UserInterface)">
            <summary>
            Called when this SongSelectionElement has been removed from the given UserInterface.
            </summary>
            <param name="userInterface">
            The related UserInterface.
            </param>
        </member>
        <member name="M:Zelda.UI.Ocarina.SongSelectionElement.OnIsEnabledChanged">
            <summary>
            Gets called when this SongSelectionElement gets enabled or disabled.
            </summary>
        </member>
        <member name="M:Zelda.UI.Ocarina.SongSelectionElement.OnIsVisibleChanged">
            <summary>
            Gets called when this SongSelectionElement gets hidden or shown.
            </summary>
        </member>
        <member name="M:Zelda.UI.Ocarina.SongSelectionElement.OnNoteButtonClicked(System.Object,Microsoft.Xna.Framework.Input.MouseState@,Microsoft.Xna.Framework.Input.MouseState@)">
            <summary>
            Called when the player clicks on one of the note buttons.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="mouseState">The current state of the mouse.</param>
            <param name="oldMouseState">The state of the mouse last frame.</param>
        </member>
        <member name="M:Zelda.UI.Ocarina.SongSelectionElement.HandleClick(Atom.Xna.UI.Controls.Button)">
            <summary>
            Handles the clicking of the given note button.
            </summary>
            <param name="noteButton">
            The button that should be toggled.
            </param>
        </member>
        <member name="M:Zelda.UI.Ocarina.SongSelectionElement.Select(Atom.Xna.UI.Controls.Button)">
            <summary>
            Selects the given note button; changing
            the currently selected Song.
            </summary>
            <param name="noteButton">
            The note button to select.
            </param>
        </member>
        <member name="M:Zelda.UI.Ocarina.SongSelectionElement.ShouldNotSelect(Atom.Xna.UI.Controls.Button)">
            <summary>
            Gets a value indicating whether selection should
            change to the given note button.
            </summary>
            <param name="noteButton">
            The note button to select.
            </param>
            <returns>
            True if the given button should not selected;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.UI.Ocarina.SongSelectionElement.OnSelectedSongChanged(Zelda.Ocarina.Song)">
            <summary>
            Fires the <see cref="E:Zelda.UI.Ocarina.SongSelectionElement.SelectedSongChanged"/> event.
            </summary>
            <param name="song">
            The now selected song.
            </param>
        </member>
        <member name="M:Zelda.UI.Ocarina.SongSelectionElement.GetSongRelatedTo(Atom.Xna.UI.Controls.Button)">
            <summary>
            Gets the Song the given note button is related to.
            </summary>
            <param name="noteButton">
            The button.
            </param>
            <returns>
            The song related to the given note button.
            </returns>
        </member>
        <member name="M:Zelda.UI.Ocarina.SongSelectionElement.OnDraw(Atom.Xna.ISpriteDrawContext)">
            <summary>
            Called when this SongSelectionElement is drawing itself.
            </summary>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.Ocarina.SongSelectionElement.OnUpdate(Atom.IUpdateContext)">
            <summary>
            Called when this SongSelectionElement is updating itself.
            </summary>
            <param name="updateContext">
            The current IUpdateContext.
            </param>
        </member>
        <member name="F:Zelda.UI.Ocarina.SongSelectionElement.indexOffset">
            <summary>
            The index offset from the array of buttons to the list of songs the player knows.
            </summary>
        </member>
        <member name="F:Zelda.UI.Ocarina.SongSelectionElement.selectedNoteButton">
            <summary>
            The currently selected note button.
            </summary>
        </member>
        <member name="F:Zelda.UI.Ocarina.SongSelectionElement.selectedSong">
            <summary>
            The currently selected song.
            </summary>
        </member>
        <member name="F:Zelda.UI.Ocarina.SongSelectionElement.noteButtons">
            <summary>
            The buttons that when clicked change the currently selected note.
            </summary>
        </member>
        <member name="T:Zelda.UI.QuickActionSlotDrawer">
            <summary>
            Encapsulates the process of drawing a Quick Action Slot.
            </summary>
        </member>
        <member name="F:Zelda.UI.QuickActionSlotDrawer.SlotWidth">
            <summary>
            The size of a QuickActionSlot in pixels.
            </summary>
        </member>
        <member name="F:Zelda.UI.QuickActionSlotDrawer.SlotHeight">
            <summary>
            The size of a QuickActionSlot in pixels.
            </summary>
        </member>
        <member name="F:Zelda.UI.QuickActionSlotDrawer.ColorUnuseableAction">
            <summary>
             Specifies the color of a quick action that is not useable.
            </summary>
        </member>
        <member name="F:Zelda.UI.QuickActionSlotDrawer.ColorInactiveAction">
            <summary>
             Specifies the color of a quick action that is not useable.
            </summary>
        </member>
        <member name="M:Zelda.UI.QuickActionSlotDrawer.#ctor(Zelda.UI.CooldownVisualizer,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the QuickActionSlotDrawer class.
            </summary>
            <param name="cooldownVisualizer">
            Allows the visualization of <see cref="T:Zelda.Cooldown"/> data.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.UI.QuickActionSlotDrawer.Draw(Zelda.QuickActions.IQuickAction,Atom.Math.Vector2,Zelda.ZeldaDrawContext)">
            <summary>
            Visualizes the given IQuickAction.
            </summary>
            <param name="quickAction">The IQuickAction to draw.</param>
            <param name="drawPosition">The drawing position.</param>
            <param name="drawContext">The current IDrawContext.</param>
        </member>
        <member name="M:Zelda.UI.QuickActionSlotDrawer.DrawSymbol(Zelda.QuickActions.IQuickAction,Atom.Math.Vector2,System.Single,Zelda.ZeldaDrawContext)">
            <summary>
            Draws the symbol sprite of the IQuickAction.
            </summary>
            <param name="quickAction">The IQuickAction this operation works on.</param>
            <param name="drawPosition">The drawing position.</param>
            <param name="layerDepth">The layer depth value.</param>
            <param name="drawContext">The current IDrawContext.</param>
        </member>
        <member name="M:Zelda.UI.QuickActionSlotDrawer.HasDefaultSize(Atom.Xna.ISprite)">
            <summary>
            Gets a value indicating whether the given Sprite has the deafult size of a quick slot.
            </summary>
            <param name="sprite">
            The sprite shown in the QuickActionSlot.
            </param>
            <returns>
            true if the Sprite has the default size;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.UI.QuickActionSlotDrawer.DrawCooldown(Zelda.QuickActions.IQuickAction,Atom.Math.Vector2)">
            <summary>
            Draws the cooldown of the QuickAction; if there is any.
            </summary>
            <param name="quickAction">The IQuickAction this operation works on.</param>
            <param name="drawPosition">The drawing position.</param>
        </member>
        <member name="M:Zelda.UI.QuickActionSlotDrawer.DrawIndicators(Zelda.QuickActions.IQuickAction,Atom.Math.Vector2,Zelda.ZeldaDrawContext)">
            <summary>
            Draws additional useability indicators ontop of the rest.
            </summary>
            <param name="quickAction">The IQuickAction this operation works on.</param>
            <param name="drawPosition">The drawing position.</param>
            <param name="drawContext">The current IDrawContext.</param>
        </member>
        <member name="M:Zelda.UI.QuickActionSlotDrawer.IsLimitedByAnythingButCooldown(Zelda.QuickActions.IQuickAction)">
            <summary>
            Gets a value indicating whether the given IQuickAction is not 
            useable and limited by something else rather than its cooldown.
            </summary>
            <param name="quickAction">
            The IQuickAction this operation works on.
            </param>
            <returns></returns>
        </member>
        <member name="F:Zelda.UI.QuickActionSlotDrawer.defaultSprite">
            <summary>
            The sprite that is used to draw a QuickActionSlot if
            no specific Sprite is specified.
            </summary>
        </member>
        <member name="F:Zelda.UI.QuickActionSlotDrawer.cooldownVisualizer">
            <summary>
            Allows the visualization of <see cref="T:Zelda.Cooldown"/> data.
            </summary>
        </member>
        <member name="T:Zelda.UI.QuickActionSlotElement">
            <summary>
            Represents and visualizes a single QuickActionSlot.
            </summary>
        </member>
        <member name="F:Zelda.UI.QuickActionSlotElement.SlotWidth">
            <summary>
            The size of a QuickActionSlot in pixels.
            </summary>
        </member>
        <member name="F:Zelda.UI.QuickActionSlotElement.SlotHeight">
            <summary>
            The size of a QuickActionSlot in pixels.
            </summary>
        </member>
        <member name="E:Zelda.UI.QuickActionSlotElement.Clicked">
            <summary>
            Fired when this QuickActionSlot has been clicked.
            </summary>
        </member>
        <member name="P:Zelda.UI.QuickActionSlotElement.Slot">
            <summary>
            Gets or sets the QuickActionSlot that is associated with this QuickActionSlotElement.
            </summary>
        </member>
        <member name="P:Zelda.UI.QuickActionSlotElement.QuickAction">
            <summary>
            Gets the IQuickAction that is associated with the QuickActionSlot
            visualized by this QuickActionSlotElement.
            </summary>
        </member>
        <member name="M:Zelda.UI.QuickActionSlotElement.#ctor(Zelda.UI.QuickActionSlotDrawer)">
            <summary>
            Initializes a new instance of the QuickActionSlotElement class.
            </summary>
            <param name="slotDrawer">
            Provides a mechanism to draw a QuickActionSlot.
            </param>
        </member>
        <member name="M:Zelda.UI.QuickActionSlotElement.OnDraw(Atom.Xna.ISpriteDrawContext)">
            <summary>
            Called when this QuickActionSlotElement is drawing itself.
            </summary>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.QuickActionSlotElement.OnUpdate(Atom.IUpdateContext)">
            <summary>
            Called when this QuickActionSlotElement is updating itself.
            </summary>
            <param name="updateContext">
            The current IUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.UI.QuickActionSlotElement.HandleRelatedMouseInput(Microsoft.Xna.Framework.Input.MouseState@,Microsoft.Xna.Framework.Input.MouseState@)">
            <summary>
            Handles mouse input related to this QuickActionSlotElement.
            </summary>
            <param name="mouseState">The current state of the mouse.</param>
            <param name="oldMouseState">The state of the mouse last frame.</param>
            <returns>Whether input should be passed to elements behind this element.</returns>
        </member>
        <member name="F:Zelda.UI.QuickActionSlotElement.slot">
            <summary>
            Identifies the QuickActionSlot that gets visualized by this QuickActionSlotElement.
            </summary>
        </member>
        <member name="F:Zelda.UI.QuickActionSlotElement.slotDrawer">
            <summary>
            Provides a mechanism to draw a QuickActionSlot.
            </summary>
        </member>
        <member name="T:Zelda.UI.QuickActionSlotsDisplay">
            <summary>
            Visualizes and encapsulates all Quick Action Slots of the Player.
            </summary>
        </member>
        <member name="P:Zelda.UI.QuickActionSlotsDisplay.Player">
            <summary>
            Sets the PlayerEntity whose QuickActionSlots are visualized by this QuickActionSlotsDisplay.
            </summary>
        </member>
        <member name="M:Zelda.UI.QuickActionSlotsDisplay.#ctor(Zelda.UI.CooldownVisualizer,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the QuickActionSlotsDisplay class.
            </summary>
            <param name="cooldownVisualizer">
            Allows the visualization of <see cref="T:Zelda.Cooldown"/> data.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.UI.QuickActionSlotsDisplay.CreateSlots(Zelda.IZeldaServiceProvider)">
            <summary>
            Creates the QuickActionSlotElements of this QuickActionSlotsDisplay.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.UI.QuickActionSlotsDisplay.CreateSlot(System.Int32,Atom.Math.Point2)">
            <summary>
            Creates a single QuickActionSlotElement.
            </summary>
            <param name="index">
            The index of the slot to create.
            </param>
            <param name="viewSize">
            The view size of the game.
            </param>
            <returns>
            A newly created QuickActionSlotElement.
            </returns>
        </member>
        <member name="M:Zelda.UI.QuickActionSlotsDisplay.GetSlotPosition(System.Int32,Atom.Math.Point2)">
            <summary>
            Gets the position of a new QuickActionSlotElement.
            </summary>
            <param name="index">
            The index of the slot.
            </param>
            <param name="viewSize">
            The view size of the game.
            </param>
            <returns>
            The requested position.
            </returns>
        </member>
        <member name="M:Zelda.UI.QuickActionSlotsDisplay.SetupSlots(Zelda.Entities.PlayerEntity)">
            <summary>
            Setups the QuickActionSlotElements of this QuickActionSlotsDisplay to visualize the slots
            of the given PlayerEntity.
            </summary>
            <param name="player">
            The related PlayerEntity.
            </param>
        </member>
        <member name="M:Zelda.UI.QuickActionSlotsDisplay.RestorePickedUp">
            <summary>
            Restores the currently picked-up Quick Action.
            </summary>
        </member>
        <member name="M:Zelda.UI.QuickActionSlotsDisplay.OnDraw(Atom.Xna.ISpriteDrawContext)">
            <summary>
            Called when this QuickActionSlotsDisplay is drawing itself.
            </summary>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.QuickActionSlotsDisplay.ShouldDrawEmptySlots">
            <summary>
            Gets a value indicating whether the empty slots should be drawn.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zelda.UI.QuickActionSlotsDisplay.IsAllowedOrNoWindowOpenAndHasPickedUpUseableItem">
            <summary>
            Gets a value indicating whether no ne of the allowed IngameWindow is 
            currently open and that the player currently has picked-up an useable item.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zelda.UI.QuickActionSlotsDisplay.IsAllowedOrNoWindowOpen">
            <summary>
            Gets a value indicating whether no or one of the allowed IngameWindow is currently open.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zelda.UI.QuickActionSlotsDisplay.HasPickedUpUseableItem">
            <summary>
            Gets a value indicating whether the player currently has picked-up an useable item.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zelda.UI.QuickActionSlotsDisplay.DrawEmptySlots(Zelda.ZeldaDrawContext)">
            <summary>
            Draws an indicator for each slot that has no action.
            </summary>
            <param name="zeldaDrawContext">
            The current ZeldaDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.QuickActionSlotsDisplay.OnUpdate(Atom.IUpdateContext)">
            <summary>
            Called when this QuickActionSlotsDisplay is updating itself.
            </summary>
            <param name="updateContext">
            The current IUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.UI.QuickActionSlotsDisplay.ManuallyClick(Microsoft.Xna.Framework.Input.MouseState@,Microsoft.Xna.Framework.Input.MouseState@)">
            <summary>
            Manually handles clicking on any of the QuickActionSlots.
            </summary>
            <param name="mouseState">The current state of the mouse.</param>
            <param name="oldMouseState">The state of the mouse one frame ago.</param>
            <returns>
            Returns true if any of the QuickActionSlots was clicked;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.UI.QuickActionSlotsDisplay.OnQuickSlotClicked(System.Object,Microsoft.Xna.Framework.Input.MouseState@,Microsoft.Xna.Framework.Input.MouseState@)">
            <summary>
            Called when the player has clicked on one of the Action Quick Slots.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="mouseState">The current state of the mouse.</param>
            <param name="oldMouseState">The state of the mouse one frame ago.</param>
        </member>
        <member name="M:Zelda.UI.QuickActionSlotsDisplay.HandleClick(Zelda.UI.QuickActionSlotElement,Microsoft.Xna.Framework.Input.MouseState@,Microsoft.Xna.Framework.Input.MouseState@)">
            <summary>
            Handles clicking of the given QuickActionSlotElement.
            </summary>
            <param name="slotElement">The QuickActionSlotElement that was clicked.</param>
            <param name="mouseState">The current state of the mouse.</param>
            <param name="oldMouseState">The state of the mouse one frame ago.</param>
            <returns>
            true if input should be passed to elements
            behind the clicked element;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.UI.QuickActionSlotsDisplay.HandleRightClick(Zelda.QuickActions.QuickActionSlot)">
            <summary>
            Handles right-clicking of a Quick Action Slot.
            </summary>
            <param name="slot">The slot that has been clicked.</param>
        </member>
        <member name="M:Zelda.UI.QuickActionSlotsDisplay.HandleLeftMouseClick(Zelda.QuickActions.QuickActionSlot,Zelda.UI.QuickActionSlotElement,Microsoft.Xna.Framework.Input.MouseState@)">
            <summary>
            Handles left-clicking of a Quick Action Slot.
            </summary>
            <param name="slot">The slot that has been clicked.</param>
            <param name="slotElement">The slot UIElement that has been clicked.</param>
            <param name="mouseState">The current state of the mouse.</param>
        </member>
        <member name="M:Zelda.UI.QuickActionSlotsDisplay.HandleLeftMouseRelease(Zelda.QuickActions.QuickActionSlot,Zelda.UI.QuickActionSlotElement,Microsoft.Xna.Framework.Input.MouseState@)">
            <summary>
            Handles releasing of the left mouse button above a Quick Action Slot.
            </summary>
            <param name="slot">The slot that has been clicked.</param>
            <param name="slotElement">The slot UIElement that has been clicked.</param>
            <param name="mouseState">The current state of the mouse.</param>
            <returns>
            true if input should be passed to elements
            behind the clicked element;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.UI.QuickActionSlotsDisplay.StorePickedUpItem(Zelda.QuickActions.QuickActionSlot)">
            <summary>
            Stores the currently picked-up Item in the given QuickActionSlot.
            </summary>
            <param name="slot">
            The QuickActionSlot to store the item in.
            </param>
            <returns>
            true if the picked-up item has been stored
            in the given QuickActionSlot; otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.UI.QuickActionSlotsDisplay.HandleMouseInput(Microsoft.Xna.Framework.Input.MouseState@,Microsoft.Xna.Framework.Input.MouseState@)">
            <summary>
            Handles mouse input for this QuickActionSlotsDisplay.
            </summary>
            <param name="mouseState">The current state of the mouse.</param>
            <param name="oldMouseState">The state of the mouse one frame ago.</param>
        </member>
        <member name="F:Zelda.UI.QuickActionSlotsDisplay.player">
            <summary>
            The PlayerEntity whose QuickActionSlots are visualized by this QuickActionSlotsDisplay.
            </summary>
        </member>
        <member name="F:Zelda.UI.QuickActionSlotsDisplay.ignoreReleaseOnce">
            <summary>
            States whether the next mouse release should be ignored.
            </summary>
        </member>
        <member name="F:Zelda.UI.QuickActionSlotsDisplay.pickedUp">
            <summary>
            Holds and visualizes the IQuickAction the player has picked-up.
            </summary>
        </member>
        <member name="F:Zelda.UI.QuickActionSlotsDisplay.slots">
            <summary>
            The QuickActionSlotElements that visualize the individual QuickActionSlots of the PlayerEntity.
            </summary>
        </member>
        <member name="F:Zelda.UI.QuickActionSlotsDisplay.slotDrawer">
            <summary>
            The QuickActionSlotDrawer that encapsulates the drawing process and data.
            </summary>
        </member>
        <member name="T:Zelda.UI.QuickActionSlotsDisplay.PickedupQuickActionDisplay">
            <summary>
            Visualizes the currently picked up IQuickAction.
            </summary>
        </member>
        <member name="P:Zelda.UI.QuickActionSlotsDisplay.PickedupQuickActionDisplay.DrawOffset">
            <summary>
            Gets or sets the draw offset applied when drawing the Picked Up Action.
            </summary>
        </member>
        <member name="P:Zelda.UI.QuickActionSlotsDisplay.PickedupQuickActionDisplay.Action">
            <summary>
            Gets or sets the IQuickAction that has been picked-up.
            </summary>
        </member>
        <member name="P:Zelda.UI.QuickActionSlotsDisplay.PickedupQuickActionDisplay.OriginalSlot">
            <summary>
            Gets or sets the QuickActionSlot the IQuickAction that has been picked-up was originally in.
            </summary>
        </member>
        <member name="M:Zelda.UI.QuickActionSlotsDisplay.PickedupQuickActionDisplay.#ctor(Zelda.UI.QuickActionSlotDrawer)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.UI.QuickActionSlotsDisplay.PickedupQuickActionDisplay"/> class.
            </summary>
            <param name="slotDrawer">
            Provides a mechanism to draw a QuickActionSlot.
            </param>
        </member>
        <member name="M:Zelda.UI.QuickActionSlotsDisplay.PickedupQuickActionDisplay.Restore(Zelda.QuickActions.QuickActionSlotList)">
            <summary>
            Restores the currently picked-up Quick Action.
            </summary>
            <param name="actionSlots">
            The list of quick slots.
            </param>
        </member>
        <member name="M:Zelda.UI.QuickActionSlotsDisplay.PickedupQuickActionDisplay.RestoreInOriginalSlot(Zelda.QuickActions.QuickActionSlotList)">
            <summary>
            Restores the Action to its OriginalSlot.
            </summary>
            <param name="actionSlots">
            The list of quick slots.
            </param>
        </member>
        <member name="M:Zelda.UI.QuickActionSlotsDisplay.PickedupQuickActionDisplay.Exchange(Zelda.QuickActions.QuickActionSlot)">
            <summary>
            Exchanges the picked-up action with the action in the given QuickActionSlot.
            </summary>
            <param name="slot">
            The QuickActionSlot to exchange the IQuickAction with.
            </param>
        </member>
        <member name="M:Zelda.UI.QuickActionSlotsDisplay.PickedupQuickActionDisplay.Take(Zelda.QuickActions.QuickActionSlot)">
            <summary>
            Takes the action of the given QuickActionSlot.
            </summary>
            <param name="slot">
            The QuickActionSlot to take.
            </param>
        </member>
        <member name="M:Zelda.UI.QuickActionSlotsDisplay.PickedupQuickActionDisplay.OnDraw(Atom.Xna.ISpriteDrawContext)">
            <summary>
            Called when this <see cref="T:Zelda.UI.QuickActionSlotsDisplay.PickedupQuickActionDisplay"/> is drawing itself.
            </summary>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.QuickActionSlotsDisplay.PickedupQuickActionDisplay.OnUpdate(Atom.IUpdateContext)">
            <summary>
            Called when this <see cref="T:Zelda.UI.QuickActionSlotsDisplay.PickedupQuickActionDisplay"/> is updating itself.
            </summary>
            <param name="updateContext">
            The current IUpdateContext.
            </param>
        </member>
        <member name="F:Zelda.UI.QuickActionSlotsDisplay.PickedupQuickActionDisplay.slotDrawer">
            <summary>
            Provides a mechanism to draw a QuickActionSlot.
            </summary>
        </member>
        <member name="T:Zelda.UI.RectangleUIElement">
            <summary>
            Represents a simple colored rectangle; usually used as a background element.
            </summary>
        </member>
        <member name="P:Zelda.UI.RectangleUIElement.Color">
            <summary>
            Gets or sets the color of the rectangle.
            </summary>
        </member>
        <member name="M:Zelda.UI.RectangleUIElement.OnDraw(Atom.Xna.ISpriteDrawContext)">
            <summary>
            Called when this Atom.Xna.UI.UIElement is drawing.
            </summary>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.RectangleUIElement.OnUpdate(Atom.IUpdateContext)">
            <summary>
            Called when this Atom.Xna.UI.UIElement is updating.
            </summary>
            <param name="updateContext">
            The current IUpdateContext.
            </param>
        </member>
        <member name="T:Zelda.UI.Trading.MerchantItemContainer">
            <summary>
            Represents the place in which the item of a MerchantItemElement is actually
            stored.
            </summary>
        </member>
        <member name="P:Zelda.UI.Trading.MerchantItemContainer.MerchantItem">
            <summary>
            Gets or sets the MerchantItem this MerchantItemContainer contains.
            </summary>
        </member>
        <member name="M:Zelda.UI.Trading.MerchantItemContainer.InitializeForItem">
            <summary>
            Initializes this MerchantItemContainer for the MerchantItem.
            </summary>
        </member>
        <member name="M:Zelda.UI.Trading.MerchantItemContainer.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the MerchantItemContainer class.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.UI.Trading.MerchantItemContainer.OnDraw(Atom.Xna.ISpriteDrawContext)">
            <summary>
            Called when this <see cref="T:Zelda.UI.Trading.MerchantItemContainer"/> is drawing itself.
            </summary>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.Trading.MerchantItemContainer.DrawCells(Atom.Xna.ISpriteDrawContext)">
            <summary>
            Draws the cells of this MerchantItemContainer.
            </summary>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.Trading.MerchantItemContainer.DrawItemSprite(Atom.Xna.ISpriteDrawContext)">
            <summary>
            Draws the sprite of the MerchantItem.
            </summary>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.Trading.MerchantItemContainer.OnUpdate(Atom.IUpdateContext)">
            <summary>
            Called when this <see cref="T:Zelda.UI.Trading.MerchantItemContainer"/> is updating itself.
            </summary>
            <param name="updateContext">
            The current IUpdateContext.
            </param>
        </member>
        <member name="F:Zelda.UI.Trading.MerchantItemContainer.merchantItem">
            <summary>
            The MerchantItem this MerchantItemContainer contains. 
            </summary>
        </member>
        <member name="F:Zelda.UI.Trading.MerchantItemContainer.spriteCell">
            <summary>
            The sprite that is used to visualize a single InventoryCell.
            </summary>
        </member>
        <member name="T:Zelda.UI.Trading.MerchantItemElement">
            <summary>
            Visualizes a single <see cref="P:Zelda.UI.Trading.MerchantItemElement.MerchantItem"/>.
            </summary>
        </member>
        <member name="F:Zelda.UI.Trading.MerchantItemElement.ElementWidthDefault">
            <summary>
            The width of a single MerchantItemElement.
            </summary>
        </member>
        <member name="F:Zelda.UI.Trading.MerchantItemElement.ElementWidthSmall">
            <summary>
            The width of a single MerchantItemElement.
            </summary>
        </member>
        <member name="P:Zelda.UI.Trading.MerchantItemElement.MerchantItem">
            <summary>
            Gets or sets the MerchantItem this MerchantItemElement visualizes.
            </summary>
        </member>
        <member name="P:Zelda.UI.Trading.MerchantItemElement.ElementWidth">
            <summary>
            Gets or sets the width of this element.
            </summary>
        </member>
        <member name="P:Zelda.UI.Trading.MerchantItemElement.Buyer">
            <summary>
            Gets or sets the entity that wants to buy this MerchantItemElement.
            </summary>
        </member>
        <member name="P:Zelda.UI.Trading.MerchantItemElement.Alignment">
            <summary>
            Gets or sets the aligment of the content within this MerchantItemElement.
            </summary>
        </member>
        <member name="P:Zelda.UI.Trading.MerchantItemElement.IsSelected">
            <summary>
            Gets or sets a value indicating whether this MerchantItemElement is selected.
            </summary>
        </member>
        <member name="P:Zelda.UI.Trading.MerchantItemElement.ContainerArea">
            <summary>
            Gets the area of the MerchantItemContainer of this MerchantItemElement.
            </summary>
        </member>
        <member name="M:Zelda.UI.Trading.MerchantItemElement.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the MerchantItemElement class.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.UI.Trading.MerchantItemElement.InitializeForItem">
            <summary>
            Initializes this MerchantItemElement for the current MerchantItem.
            </summary>
        </member>
        <member name="M:Zelda.UI.Trading.MerchantItemElement.PositionAt(Atom.Math.Vector2)">
            <summary>
            Positions this MerchantItemElement at the given position.
            </summary>
            <param name="position">
            The position this MerchantItemElement should be positioned at.
            </param>
        </member>
        <member name="M:Zelda.UI.Trading.MerchantItemElement.OnDraw(Atom.Xna.ISpriteDrawContext)">
            <summary>
            Called when this <see cref="T:Zelda.UI.Trading.MerchantItemElement"/> is drawing itself.
            </summary>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.Trading.MerchantItemElement.DrawBackground(Zelda.ZeldaDrawContext)">
            <summary>
            Draws the background of this MerchantItemElement.
            </summary>
            <param name="drawContext">
            The current ZeldaDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.Trading.MerchantItemElement.DrawBorders(Zelda.ZeldaDrawContext)">
            <summary>
            Draws the borders around this MerchantItemElement.
            </summary>
            <param name="drawContext">
            The current ZeldaDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.Trading.MerchantItemElement.DrawBorder(Atom.Math.Rectangle,Zelda.ZeldaDrawContext)">
            <summary>
            Draws a border at the given rectangle.
            </summary>
            <param name="rectangle">
            The area of the border.
            </param>
            <param name="drawContext">
            The current ZeldaDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.Trading.MerchantItemElement.GetBackgroundColor">
            <summary>
            Gets the background color of this MerchantItemElement.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zelda.UI.Trading.MerchantItemElement.DrawQuantity(Zelda.ZeldaDrawContext)">
            <summary>
            Draws the stock count of the MerchantItem.
            </summary>
            <param name="drawContext">
            The current ZeldaDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.Trading.MerchantItemElement.DrawPrice(Zelda.ZeldaDrawContext)">
            <summary>
            Draws the price of the MerchantItem.
            </summary>
            <param name="drawContext">
            The current ZeldaDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.Trading.MerchantItemElement.GetPriceFontColor">
            <summary>
            Gets the font color for drawing the price of this MerchantItemElement.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zelda.UI.Trading.MerchantItemElement.GetFontColor">
            <summary>
            Gets the font color of this MerchantItemElement.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zelda.UI.Trading.MerchantItemElement.OnUpdate(Atom.IUpdateContext)">
            <summary>
            Called when this <see cref="T:Zelda.UI.Trading.MerchantItemElement"/> is updating itself.
            </summary>
            <param name="updateContext">
            The current IUpdateContext.
            </param>
        </member>
        <member name="F:Zelda.UI.Trading.MerchantItemElement.container">
            <summary>
            The UIElement that draw the actual item.
            </summary>
        </member>
        <member name="F:Zelda.UI.Trading.MerchantItemElement.spriteRuby">
            <summary>
            The sprite that represents a ruby.
            </summary>
        </member>
        <member name="F:Zelda.UI.Trading.MerchantItemElement.fontItemCount">
            <summary>
            The IFont that is used when drawing the ItemCount.
            </summary>
        </member>
        <member name="T:Zelda.UI.Trading.MerchantWindow">
            <summary>
            Provides the UI required to interact with an IMerchant.s
            </summary>
        </member>
        <member name="F:Zelda.UI.Trading.MerchantWindow.MaximumStackHeight">
            <summary>
            The maximum size of one stack of items.
            A new stack is created when this value is exceeded.
            </summary>
        </member>
        <member name="F:Zelda.UI.Trading.MerchantWindow.OffsetBetweenElements">
            <summary>
            The offset between individual elements in a stack.
            </summary>
        </member>
        <member name="F:Zelda.UI.Trading.MerchantWindow.OffsetBetweenStacks">
            <summary>
            The horizontal offset between two stacks.
            </summary>
        </member>
        <member name="F:Zelda.UI.Trading.MerchantWindow.OffsetBetweenStacksSmall">
            <summary>
            The horizontal offset between two stacks.
            </summary>
        </member>
        <member name="F:Zelda.UI.Trading.MerchantWindow.DoubleClickTime">
            <summary>
            The time in seconds two clicks must be within to still count as a double-click.
            </summary>
        </member>
        <member name="F:Zelda.UI.Trading.MerchantWindow.TimeDoubleClickDisabledAfterAction">
            <summary>
            The time in seconds for which double-clicking is disabled
            after the player has bought an item via double-clicking.
            </summary>
        </member>
        <member name="P:Zelda.UI.Trading.MerchantWindow.Merchant">
            <summary>
            Sets the Merchant visualized by this MerchantWindow.
            </summary>
        </member>
        <member name="P:Zelda.UI.Trading.MerchantWindow.Buyer">
            <summary>
            Gets or sets the Entity that wants to buy from the Merchant.
            </summary>
        </member>
        <member name="M:Zelda.UI.Trading.MerchantWindow.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.UI.Trading.MerchantWindow"/> class.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related servicess.
            </param>
        </member>
        <member name="M:Zelda.UI.Trading.MerchantWindow.CreateContent">
            <summary>
            Creates the content of this MerchantWindow.
            </summary>
        </member>
        <member name="M:Zelda.UI.Trading.MerchantWindow.AddShowEnableElements">
            <summary>
            Adds, shows and enables all MerchantItemElements. 
            </summary>
        </member>
        <member name="M:Zelda.UI.Trading.MerchantWindow.DestroyElements">
            <summary>
            Destroys, hides and removes all MerchantItemElements.
            </summary>
        </member>
        <member name="M:Zelda.UI.Trading.MerchantWindow.CreateElements">
            <summary>
            Creates the MerchantItemElements required to visualize the 
            items the Merchant is selling.
            </summary>
        </member>
        <member name="M:Zelda.UI.Trading.MerchantWindow.ArrangeElements">
            <summary>
            Arranges the MerchantItemElements.
            </summary>
        </member>
        <member name="M:Zelda.UI.Trading.MerchantWindow.GetArrangedInStacks(System.Collections.Generic.IList{Zelda.UI.Trading.MerchantItemElement},System.Single@)">
            <summary>
            Arranges the given list of MerchantItemElements into stacks
            that don't overflow this MerchantWindow.
            </summary>
            <param name="elements">
            The elemetns to arrange into stacks.
            </param>
            <param name="greatestStackHeight">
            Will contain the height of the greatest stack.
            </param>
            <returns></returns>
        </member>
        <member name="M:Zelda.UI.Trading.MerchantWindow.GetTotalWidthOfStacks(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the total width the given number of MerchantItemElements
            stacks would cower.
            </summary>
            <param name="stackCount">
            The number of stacks.
            </param>
            <param name="offsetBetweenStacks">
            The number of pixels between two stacks.
            </param>
            <param name="elementWidth">
            The width of a single element of a stack in pixels.
            </param>
            <returns>
            The total width in pixels.
            </returns>
        </member>
        <member name="M:Zelda.UI.Trading.MerchantWindow.SellSelectedToBuyer(System.Boolean)">
            <summary>
            Sells the selected item to the buyer.
            </summary>
            <param name="sellFullStock">
            States whether
            </param>
        </member>
        <member name="M:Zelda.UI.Trading.MerchantWindow.OnItemSold(Zelda.UI.Trading.MerchantItemElement)">
            <summary>
            Called when atleast one item of the given MerchantItem has been sold.
            </summary>
            <param name="itemElement">
            The MerchantItemElement that has been sold.
            </param>
        </member>
        <member name="M:Zelda.UI.Trading.MerchantWindow.OnItemStockSoldOut(Zelda.UI.Trading.MerchantItemElement)">
            <summary>
            Called when the item stock of the given MerchantItemElement 
            has been completely sold out.
            </summary>
            <param name="itemElement">
            The MerchantItemElement that has been sold.
            </param>
        </member>
        <member name="M:Zelda.UI.Trading.MerchantWindow.IsValidElementIndex(System.Int32)">
            <summary>
            Gets a value indicating whether the given index
            into the elements list is valid.
            </summary>
            <param name="index">
            The index to verify.
            </param>
            <returns></returns>
        </member>
        <member name="M:Zelda.UI.Trading.MerchantWindow.SellFullStock(Zelda.Trading.MerchantItem)">
            <summary>
            Sells the full stock of items to the buyer. 
            </summary>
            <param name="merchantItem">
            The MerchantItem to sell.
            </param>
            <returns>
            true if atleast one item was sold;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.UI.Trading.MerchantWindow.Sell(Zelda.Trading.MerchantItem)">
            <summary>
            Tries to sell the given MerchantItem to the Buyer.
            </summary>
            <param name="merchantItem">
            The MerchantItem to sell.
            </param>
            <returns>
            true if the item has been sold;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.UI.Trading.MerchantWindow.PlaySoldSound(Zelda.Trading.MerchantItem)">
            <summary>
            Plays the sound associated with selling
            the given ItemInstance.
            </summary>
            <param name="merchantItem">
            The item that has been sold.
            </param>
        </member>
        <member name="M:Zelda.UI.Trading.MerchantWindow.RefreshWindowTitle">
            <summary>
            Refershes the title that is shown in this MerchantWindow.
            </summary>
        </member>
        <member name="M:Zelda.UI.Trading.MerchantWindow.GetMerchantName">
            <summary>
            Gets the localized name of the Merchant.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zelda.UI.Trading.MerchantWindow.SelectElement(Zelda.UI.Trading.MerchantItemElement)">
            <summary>
            Selects the given MerchantItemElement.
            </summary>
            <param name="element">
            The MerchantItemElement to select.
            </param>
        </member>
        <member name="M:Zelda.UI.Trading.MerchantWindow.UnselectElement">
            <summary>
            Unselects the currently selected MerchantItemElement.
            </summary>
        </member>
        <member name="M:Zelda.UI.Trading.MerchantWindow.OnDraw(Atom.Xna.ISpriteDrawContext)">
            <summary>
            Called when this <see cref="T:Zelda.UI.CharacterWindow"/> is drawing itself.
            </summary>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.Trading.MerchantWindow.HandleRelatedMouseInput(Microsoft.Xna.Framework.Input.MouseState@,Microsoft.Xna.Framework.Input.MouseState@)">
            <summary>
            Called when MouseInput happens that is related to this Atom.Xna.UI.UIElement; aka. inside the Element.
            </summary>
            <param name="mouseState">
            The state of the Microsoft.Xna.Framework.Input.Mouse.
            </param>
            <param name="oldMouseState">
            The state of the Microsoft.Xna.Framework.Input.Mouse one frame ago.
            </param>
            <returns>
            Returns true if input should be passed to elements that are behind the Atom.Xna.UI.UIElement, otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.UI.Trading.MerchantWindow.UpdateMouseHoveredItem">
            <summary>
            Updates the currently shown item instance.
            </summary>
        </member>
        <member name="M:Zelda.UI.Trading.MerchantWindow.GetMouseOveredItem(System.Int32,System.Int32)">
            <summary>
            Gets the item that is at the given position; if any.
            </summary>
            <param name="x">The position on the x-axis.</param>
            <param name="y">The position on the y-axis.</param>
            <returns>
            The item at the give position;
            or null.
            </returns>
        </member>
        <member name="M:Zelda.UI.Trading.MerchantWindow.OnMouseClick(System.Int32,System.Int32)">
            <summary>
            Called when the user has clicked the left mouse-button.
            </summary>
            <param name="x">
            The position of the mouse on the x-axis.
            </param>
            <param name="y">
            The position of the mouse on the y-axis.
            </param>
        </member>
        <member name="M:Zelda.UI.Trading.MerchantWindow.OnActionShouldSellFullStock">
            <summary>
            Gets a value indicating whether the full stock
            should be sold.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zelda.UI.Trading.MerchantWindow.OnUpdate(Atom.IUpdateContext)">
            <summary>
            Called when this <see cref="T:Zelda.UI.CharacterWindow"/> is updating itself.
            </summary>
            <param name="updateContext">
            The current IUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.UI.Trading.MerchantWindow.Opening">
            <summary>
            Called when this MerchantWindow is opening.
            </summary>
        </member>
        <member name="M:Zelda.UI.Trading.MerchantWindow.Closing">
            <summary>
            Called when this MerchantWindow is closing.
            </summary>
        </member>
        <member name="M:Zelda.UI.Trading.MerchantWindow.HandleKeyInput(Microsoft.Xna.Framework.Input.KeyboardState@,Microsoft.Xna.Framework.Input.KeyboardState@)">
            <summary>
            Handles keyboard input for the MerchantWindow.
            </summary>
            <param name="keyState">
            The current state of the keyboard.
            </param>
            <param name="oldKeyState">
            The state of the keyboard one frame ago.
            </param>
        </member>
        <member name="M:Zelda.UI.Trading.MerchantWindow.MoveSelectionUp">
            <summary>
            Moves the current element selection up by one index.
            </summary>
        </member>
        <member name="M:Zelda.UI.Trading.MerchantWindow.MoveSelectionDown">
            <summary>
            Moves the current element selection down by one index.
            </summary>
        </member>
        <member name="M:Zelda.UI.Trading.MerchantWindow.SelectElement(System.Int32)">
            <summary>
            Selects the MerchantItemElement at the given elements index.
            </summary>
            <param name="elementIndex">
            The zero-based index into the elements list.
            </param>
        </member>
        <member name="M:Zelda.UI.Trading.MerchantWindow.GetSelectedElementIndex">
            <summary>
            Gets the zero-based index into the elements list
            of the currently selected element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zelda.UI.Trading.MerchantWindow.OnIsVisibleChanged">
            <summary>
            Called when the IsVisible state of this MerchantWindow has changed.
            </summary>
        </member>
        <member name="M:Zelda.UI.Trading.MerchantWindow.OnIsEnabledChanged">
            <summary>
            Called when the IsEnabled state of this MerchantWindow has changed.
            </summary>
        </member>
        <member name="M:Zelda.UI.Trading.MerchantWindow.OnAdded(Atom.Xna.UI.UserInterface)">
            <summary>
            Callde when this MerchantWindow has been added to an UserInterface.
            </summary>
            <param name="userInterface">
            The related UserInterface.
            </param>
        </member>
        <member name="M:Zelda.UI.Trading.MerchantWindow.OnRemoved(Atom.Xna.UI.UserInterface)">
            <summary>
            Callde when this MerchantWindow has been removed from an UserInterface.
            </summary>
            <param name="userInterface">
            The related UserInterface.
            </param>
        </member>
        <member name="F:Zelda.UI.Trading.MerchantWindow.merchant">
            <summary>
            The storage field of the <see cref="P:Zelda.UI.Trading.MerchantWindow.Merchant"/> property.
            </summary>
        </member>
        <member name="F:Zelda.UI.Trading.MerchantWindow.selectedElement">
            <summary>
            The currently selected MerchantItemElement.
            </summary>
        </member>
        <member name="F:Zelda.UI.Trading.MerchantWindow.elements">
            <summary>
            The list of MerchantItemElements this MerchantWindow consists of.
            </summary>
        </member>
        <member name="F:Zelda.UI.Trading.MerchantWindow.isCapturingForDoubleClick">
            <summary>
            States whether the MerchantWindow is currently capturing double-clicks.
            </summary>
        </member>
        <member name="F:Zelda.UI.Trading.MerchantWindow.timeSinceLastClick">
            <summary>
            States the time the last left mouse-click.
            Used to capture double clicks.
            </summary>
        </member>
        <member name="F:Zelda.UI.Trading.MerchantWindow.timeLeftDoubleClickDisabled">
            <summary>
            The time left for which double-clicking is disabled.
            </summary>
        </member>
        <member name="F:Zelda.UI.Trading.MerchantWindow.itemInfoDisplay">
            <summary>
            The ItemInfoDisplay that is responsible for drawing the Item Information
            when the user mouse-overs an item.
            </summary>
        </member>
        <member name="F:Zelda.UI.Trading.MerchantWindow.fontTitle">
            <summary>
            The font used to draw the title string.
            </summary>
        </member>
        <member name="F:Zelda.UI.Trading.MerchantWindow.title">
            <summary>
            The cached title that should be displayed for the Merchant.
            </summary>
        </member>
        <member name="F:Zelda.UI.Trading.MerchantWindow.serviceProvider">
            <summary>
            Provides fast access to game-related services.
            </summary>
        </member>
        <member name="T:Zelda.UI.Trading.MerchantWindowProvider">
            <summary>
            Provides a mechanism that allows the player to
            interact with the offerings of an IMerchant.
            </summary>
        </member>
        <member name="M:Zelda.UI.Trading.MerchantWindowProvider.#ctor(Zelda.UI.IngameUserInterface,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the MerchantWindowProvider class.
            </summary>
            <param name="userInterface">
            The IngameUserInterface that provides the new MerchantWindowProvider.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.UI.Trading.MerchantWindowProvider.Show(Zelda.Trading.IMerchant,Zelda.Entities.PlayerEntity)">
            <summary>
            Shows the UIElement responsible for allowing the
            player to interact with the offerings of the given IMerchant.
            </summary>
            <param name="merchant">
            The <see cref="T:Zelda.Trading.IMerchant"/> whose offerings should be presented
            to the player.
            </param>
            <param name="buyer">
            The entity that wants to buy from the merchant.
            </param>
            <returns>
            true if the window has been opened;
            otherwise false.
            </returns>
        </member>
        <member name="F:Zelda.UI.Trading.MerchantWindowProvider.window">
            <summary>
            The IngameWindow that is used to visualize the Merchant.
            </summary>
        </member>
        <member name="F:Zelda.UI.Trading.MerchantWindowProvider.userInterface">
            <summary>
            The IngameUserInterface that provides the new MerchantWindowProvider.
            </summary>
        </member>
        <member name="T:Zelda.UI.UIConstants">
            <summary>
            Enumerates various constants that are shared over multiple
            UI-related classes.
            </summary>
        </member>
        <member name="F:Zelda.UI.UIConstants.CellSize">
            <summary>
            The size of a single cell.
            </summary>
        </member>
        <member name="T:Zelda.UI.BaseCharacterWindow">
            <summary>
            Represents the abstract base IngameWindow class for the <see cref="T:Zelda.UI.CharacterWindow"/> and <see cref="T:Zelda.UI.CharacterDetailsWindow"/>
            classes.
            </summary>
        </member>
        <member name="M:Zelda.UI.BaseCharacterWindow.#ctor(Zelda.IZeldaServiceProvider,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.UI.CharacterWindow"/> class.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related servicess.
            </param>
            <param name="offsetY">
            An optional offset applied to the window's position.
            </param>
        </member>
        <member name="M:Zelda.UI.BaseCharacterWindow.DrawBackground(Atom.Xna.ISpriteDrawContext)">
            <summary>
            Draws the background of this BaseCharacterWindow. 
            </summary>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.BaseCharacterWindow.DrawBasicStatistics(Atom.Xna.ISpriteDrawContext)">
            <summary>
            Draws the basic background and statistics all BaseCharacterWindows share.
            </summary>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.BaseCharacterWindow.DrawText(Atom.Xna.Fonts.IFont,System.String,Atom.Math.Vector2,Microsoft.Xna.Framework.Color,Atom.Xna.ISpriteDrawContext)">
            <summary>
            Helper function that draws the given text.
            </summary>
            <param name="font">The font to draw the text with.</param>
            <param name="text">The text to draw.</param>
            <param name="position">The position to draw the text at.</param>
            <param name="color">The color of the text.</param>
            <param name="drawContext">The current ISpriteDrawContext</param>
        </member>
        <member name="M:Zelda.UI.BaseCharacterWindow.GetCharacterClassName">
            <summary>
            Gets the (localized) name of the character class of the player.
            </summary>
        </member>
        <member name="M:Zelda.UI.BaseCharacterWindow.OnUpdate(Atom.IUpdateContext)">
            <summary>
            Called when this BaseCharacterWindow is updating itself.
            </summary>
            <param name="updateContext">
            The current IUpdateContext.
            </param>
        </member>
        <member name="F:Zelda.UI.BaseCharacterWindow.spriteBackground">
            <summary>
            The background sprite.
            </summary>
        </member>
        <member name="F:Zelda.UI.BaseCharacterWindow.CenterX">
            <summary>
            Cached ingame coordinate.
            </summary>
        </member>
        <member name="F:Zelda.UI.BaseCharacterWindow.LineStartY">
            <summary>
            Cached ingame coordinate.
            </summary>
        </member>
        <member name="F:Zelda.UI.BaseCharacterWindow.LineSpacing">
            <summary>
            Cached ingame coordinate.
            </summary>
        </member>
        <member name="F:Zelda.UI.BaseCharacterWindow.leftSpritePosition">
            <summary>
            The upper positions of the background sprite.
            </summary>
        </member>
        <member name="F:Zelda.UI.BaseCharacterWindow.rightSpritePosition">
            <summary>
            The upper positions of the background sprite.
            </summary>
        </member>
        <member name="F:Zelda.UI.BaseCharacterWindow.fontLargeText">
            <summary>
            The fonts used in the CharacterWindow.
            </summary>
        </member>
        <member name="F:Zelda.UI.BaseCharacterWindow.fontText">
            <summary>
            The fonts used in the CharacterWindow.
            </summary>
        </member>
        <member name="F:Zelda.UI.BaseCharacterWindow.fontSmallText">
            <summary>
            The fonts used in the CharacterWindow.
            </summary>
        </member>
        <member name="F:Zelda.UI.BaseCharacterWindow.fontVerySmallText">
            <summary>
            The fonts used in the CharacterWindow.
            </summary>
        </member>
        <member name="F:Zelda.UI.BaseCharacterWindow.difficultyIndicatorDrawer">
            <summary>
            Implements a mechanism that allows the visualization of the difficulty the current
            character has choosen.
            </summary>
        </member>
        <member name="T:Zelda.UI.CharacterCreationStatusWindow">
            <summary>
            Represents a slight modification of the <see cref="T:Zelda.UI.CharacterWindow"/> used while creating the character.
            </summary>
        </member>
        <member name="M:Zelda.UI.CharacterCreationStatusWindow.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.UI.CharacterCreationStatusWindow"/> class.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related servicess.
            </param>
        </member>
        <member name="M:Zelda.UI.CharacterCreationStatusWindow.SetupStatDownButtons">
            <summary>
            Setups the Stat-Down buttons, called once on creation of the window.
            </summary>
        </member>
        <member name="M:Zelda.UI.CharacterCreationStatusWindow.OnStatDownButtonMouseEntering(Atom.Xna.UI.UIElement)">
            <summary>
            Called when the mouse is entering the client area of any of the stat-up buttons.
            </summary>
            <param name="element">
            The stat-up button that the mouse has entered.
            </param>
        </member>
        <member name="M:Zelda.UI.CharacterCreationStatusWindow.CaptureStatDownCost(Zelda.UI.CharacterWindow.StatUpButton)">
            <summary>
            Stores the number of points that are required to undo the investment into the Stat
            that the specified StatUpButton is responsible for.
            </summary>
            <param name="button">
            The button whose related stat-down cost will be captured.
            </param>
        </member>
        <member name="M:Zelda.UI.CharacterCreationStatusWindow.OnStatDownButtonClicked(System.Object,Microsoft.Xna.Framework.Input.MouseState@,Microsoft.Xna.Framework.Input.MouseState@)">
            <summary>
            Called when one of the stat-down buttons gets clicked.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="mouseState">The current state of the mouse.</param>
            <param name="oldMouseState">The state of the mouse one frame ago.</param>
        </member>
        <member name="M:Zelda.UI.CharacterCreationStatusWindow.RefreshStatDownButtonVisability">
            <summary>
            Refreshes what StatDown buttons are visible.
            </summary>
        </member>
        <member name="M:Zelda.UI.CharacterCreationStatusWindow.Opening">
            <summary>    
            Gets called when this CharacterCreationStatusWindow is opening.
            </summary>
        </member>
        <member name="M:Zelda.UI.CharacterCreationStatusWindow.Closing">
            <summary>
            Gets called when this CharacterCreationStatusWindow is closing.
            </summary>
        </member>
        <member name="M:Zelda.UI.CharacterCreationStatusWindow.AddChildElementsTo(Atom.Xna.UI.UserInterface)">
            <summary>
            Adds the child elements of this CharacterCreationStatusWindow to the given UserInterface.
            </summary>
            <param name="userInterface">
            The related UserInterface.
            </param>
        </member>
        <member name="M:Zelda.UI.CharacterCreationStatusWindow.RemoveChildElementsFrom(Atom.Xna.UI.UserInterface)">
            <summary>
            Removes the child elements of this CharacterCreationStatusWindow from the given UserInterface.
            </summary>
            <param name="userInterface">
            The related UserInterface.
            </param>
        </member>
        <member name="F:Zelda.UI.CharacterCreationStatusWindow.statDownButtons">
            <summary>
            Enumerates the StatUpButton for point reduction shown in the CharacterCreationStatusWindow.
            </summary>
        </member>
        <member name="T:Zelda.UI.CharacterDetailsWindow">
            <summary>
            Allows the player to see detailed character status information.
            </summary>
        </member>
        <member name="M:Zelda.UI.CharacterDetailsWindow.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.UI.CharacterDetailsWindow"/> class.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related servicess.
            </param>
        </member>
        <member name="M:Zelda.UI.CharacterDetailsWindow.SetupTooltips(Zelda.IZeldaServiceProvider)">
            <summary>
            Setups the tooltips of this CharacterDetailsWindow.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related servicess.
            </param>
        </member>
        <member name="M:Zelda.UI.CharacterDetailsWindow.AddInlineTooltip(System.String,Atom.Math.Vector2,System.Action{Atom.Xna.UI.Tooltips.Tooltip,Atom.Xna.ISpriteDrawContext})">
            <summary>
            Adds a new InlineTooltip to this CharacterDetailsWindow.
            </summary>
            <param name="header">
            The text that should be displayed within the box.
            </param>
            <param name="position">
            The position of the box.
            </param>
            <param name="drawAction">
            The action that should be executed when the players moves the mouse
            over the header text.
            </param>
        </member>
        <member name="M:Zelda.UI.CharacterDetailsWindow.DrawMovementSpeedTooltip(Atom.Xna.UI.Tooltips.Tooltip,Atom.Xna.ISpriteDrawContext)">
            <summary>
            Draws the 'Potion Effectiveness' tooltip.
            </summary>
            <param name="tooltip">
            The tooltip that is active.
            </param>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.CharacterDetailsWindow.DrawCriticalBonusTooltip(Atom.Xna.UI.Tooltips.Tooltip,Atom.Xna.ISpriteDrawContext)">
            <summary>
            Draws the 'Critical Bonus' tooltip.
            </summary>
            <param name="tooltip">
            The tooltip that is active.
            </param>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.CharacterDetailsWindow.DrawPotionEffectivenessTooltip(Atom.Xna.UI.Tooltips.Tooltip,Atom.Xna.ISpriteDrawContext)">
            <summary>
            Draws the 'Potion Effectiveness' tooltip.
            </summary>
            <param name="tooltip">
            The tooltip that is active.
            </param>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.CharacterDetailsWindow.DrawArmorIgnoreTooltip(Atom.Xna.UI.Tooltips.Tooltip,Atom.Xna.ISpriteDrawContext)">
            <summary>
            Draws the 'Armor Ignore' tooltip.
            </summary>
            <param name="tooltip">
            The tooltip that is active.
            </param>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.CharacterDetailsWindow.DrawPushingForceTooltip(Atom.Xna.UI.Tooltips.Tooltip,Atom.Xna.ISpriteDrawContext)">
            <summary>
            Draws the 'Pushing Force' tooltip.
            </summary>
            <param name="tooltip">
            The tooltip that is active.
            </param>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.CharacterDetailsWindow.DrawMiscellaneousTooltip(Atom.Xna.UI.Tooltips.Tooltip,Atom.Xna.ISpriteDrawContext)">
            <summary>
            Draws the 'Miscellaneous' tooltip.
            </summary>
            <param name="tooltip">
            The tooltip that is active.
            </param>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.CharacterDetailsWindow.DrawPiercingChanceTooltip(Atom.Xna.UI.Tooltips.Tooltip,Atom.Xna.ISpriteDrawContext)">
            <summary>
            Draws the 'Ranged Piercing Chance' tooltip.
            </summary>
            <param name="tooltip">
            The tooltip that is active.
            </param>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.CharacterDetailsWindow.DrawSpellPowerTooltip(Atom.Xna.UI.Tooltips.Tooltip,Atom.Xna.ISpriteDrawContext)">
            <summary>
            Draws the 'Spell Power' tooltip.
            </summary>
            <param name="tooltip">
            The tooltip that is active.
            </param>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.CharacterDetailsWindow.DrawSpellPower(Zelda.Status.ElementalSchool,Atom.Math.Vector2,Atom.Math.Vector2,Atom.Xna.ISpriteDrawContext)">
            <summary>
            Draws a sub part of the Spell Power Tooltip, detailing the restistance of the specified ElementalSchool.
            </summary>
            <param name="element">
            The resistance type to draw.
            </param>
            <param name="left">
            The position of the header text on the left.
            </param>
            <param name="right">
            The position of the value text on the right.
            </param>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.CharacterDetailsWindow.DrawStatisticsTooltip(Atom.Xna.UI.Tooltips.Tooltip,Atom.Xna.ISpriteDrawContext)">
            <summary>
            Draws the 'Statistics' tooltip.
            </summary>
            <param name="tooltip">
            The tooltip that is active.
            </param>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.CharacterDetailsWindow.DrawResistanceTooltip(Atom.Xna.UI.Tooltips.Tooltip,Atom.Xna.ISpriteDrawContext)">
            <summary>
            Draws the 'Resistance' tooltip.
            </summary>
            <param name="tooltip">
            The tooltip that is active.
            </param>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.CharacterDetailsWindow.DrawResistance(Zelda.Status.ElementalSchool,Atom.Math.Vector2,Atom.Math.Vector2,Atom.Xna.ISpriteDrawContext)">
            <summary>
            Draws a sub part of the Resistance Tooltip, detailing the restistance of the specified ElementalSchool.
            </summary>
            <param name="element">
            The resistance type to draw.
            </param>
            <param name="left">
            The position of the header text on the left.
            </param>
            <param name="right">
            The position of the value text on the right.
            </param>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.CharacterDetailsWindow.DrawChanceToTooltip(Atom.Xna.UI.Tooltips.Tooltip,Atom.Xna.ISpriteDrawContext)">
            <summary>
            Draws the 'Chance to' tooltip.
            </summary>
            <param name="tooltip">
            The tooltip that is active.
            </param>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.CharacterDetailsWindow.DrawChanceToBeTooltip(Atom.Xna.UI.Tooltips.Tooltip,Atom.Xna.ISpriteDrawContext)">
            <summary>
            Draws the 'Chance to Be' tooltip.
            </summary>
            <param name="tooltip">
            The tooltip that is active.
            </param>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.CharacterDetailsWindow.DrawBlockTooltip(Atom.Xna.UI.Tooltips.Tooltip,Atom.Xna.ISpriteDrawContext)">
            <summary>
            Draws the 'Block' tooltip.
            </summary>
            <param name="tooltip">
            The tooltip that is active.
            </param>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.CharacterDetailsWindow.DrawReputationTooltip(Atom.Xna.UI.Tooltips.Tooltip,Atom.Xna.ISpriteDrawContext)">
            <summary>
            Draws the 'Block' tooltip.
            </summary>
            <param name="tooltip">
            The tooltip that is active.
            </param>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.CharacterDetailsWindow.DrawTextAsPercent(System.String,System.Double,Atom.Math.Vector2,Atom.Math.Vector2,Atom.Xna.ISpriteDrawContext)">
            <summary>
            Draws a labeled value plus a '%' sign at the specified positions.
            </summary>
            <param name="label">
            The label of the value. E.g.: "Armor"
            </param>
            <param name="value">
            The value that will be alligned to the right. E.g.: "1000.0"
            </param>
            <param name="left">
            The position of the label.
            </param>
            <param name="right">
            The position of the value.
            </param>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.CharacterDetailsWindow.DrawTextAsPercent(System.String,System.Double,Atom.Math.Vector2,Atom.Math.Vector2,Microsoft.Xna.Framework.Color,Atom.Xna.ISpriteDrawContext)">
            <summary>
            Draws a labeled value plus a '%' sign at the specified positions.
            </summary>
            <param name="label">
            The label of the value. E.g.: "Armor"
            </param>
            <param name="value">
            The value that will be alligned to the right. E.g.: "1000.0"
            </param>
            <param name="left">
            The position of the label.
            </param>
            <param name="right">
            The position of the value.
            </param>
            <param name="valueColor">
            The color of the value text.
            </param>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.CharacterDetailsWindow.DrawText(System.String,System.String,Atom.Math.Vector2,Atom.Math.Vector2,Atom.Xna.ISpriteDrawContext)">
            <summary>
            Draws a labeled text at the specified positions.
            </summary>
            <param name="label">
            The label of the value. E.g.: "Armor"
            </param>
            <param name="value">
            The value that will be alligned to the right. E.g.: "1000"
            </param>
            <param name="left">
            The position of the label.
            </param>
            <param name="right">
            The position of the value.
            </param>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.CharacterDetailsWindow.DrawText(System.String,System.String,Atom.Math.Vector2,Atom.Math.Vector2,Microsoft.Xna.Framework.Color,Atom.Xna.ISpriteDrawContext)">
            <summary>
            Draws a labeled text at the specified positions.
            </summary>
            <param name="label">
            The label of the value. E.g.: "Armor"
            </param>
            <param name="value">
            The value that will be alligned to the right. E.g.: "1000"
            </param>
            <param name="left">
            The position of the label.
            </param>
            <param name="right">
            The position of the value.
            </param>
            <param name="valueColor">
            The color the value text will be tinted in.
            </param>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.CharacterDetailsWindow.DrawText(System.String,Atom.Math.Vector2,Atom.Math.Vector2,Microsoft.Xna.Framework.Color,Atom.Xna.ISpriteDrawContext)">
            <summary>
            Draws an unlabeled text at the specified positions.
            </summary>
            <param name="value">
            The value that will be alligned to the right. E.g.: "1000"
            </param>
            <param name="left">
            The position of the label.
            </param>
            <param name="right">
            The position of the value.
            </param>
            <param name="valueColor">
            The color the value text will be tinted in.
            </param>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.CharacterDetailsWindow.DrawTooltipBackground(Atom.Math.Rectangle,Zelda.ZeldaDrawContext)">
            <summary>
            Draws the background of an InlineTooltip.
            </summary>
            <param name="area">
            the area the tooltip is taking up.
            </param>
            <param name="drawContext">
            The current ZeldaDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.CharacterDetailsWindow.ConvertModifierToString(System.Single,System.Int32)">
            <summary>
            Converts the specified value multiplier into a percentage string.
            </summary>
            <param name="modifier">
            The input modifier.
            </param>
            <param name="digits">
            The number of significant digits to keep.
            </param>
            <returns>
            The converted output value.
            </returns>
        </member>
        <member name="M:Zelda.UI.CharacterDetailsWindow.ConvertToPercentage(System.Single,System.Int32)">
            <summary>
            Converts the specified value multiplier into a percentage.
            </summary>
            <param name="modifier">
            The input modifier.
            </param>
            <param name="digits">
            The number of significant digits to keep.
            </param>
            <returns>
            The converted output value.
            </returns>
        </member>
        <member name="M:Zelda.UI.CharacterDetailsWindow.OnDraw(Atom.Xna.ISpriteDrawContext)">
            <summary>
            Called when this CharacterDetailsWindow is drawing itself.
            </summary>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.CharacterDetailsWindow.OnIsEnabledChanged">
            <summary>
            Called when the IsEnabled state of this CharacterDetailsWindow has changed.
            </summary>
        </member>
        <member name="M:Zelda.UI.CharacterDetailsWindow.OnIsVisibleChanged">
            <summary>
            Called when the IsVisible state of this CharacterDetailsWindow has changed.
            </summary>
        </member>
        <member name="M:Zelda.UI.CharacterDetailsWindow.AddChildElementsTo(Atom.Xna.UI.UserInterface)">
            <summary>
            Adds the child elements of this IngameWindow to the specified UserInterface.
            </summary>
            <param name="userInterface">
            The related UserInterface object.
            </param>
        </member>
        <member name="M:Zelda.UI.CharacterDetailsWindow.RemoveChildElementsFrom(Atom.Xna.UI.UserInterface)">
            <summary>
            Removes the child elements of this IngameWindow from the specified UserInterface.
            </summary>
            <param name="userInterface">
            The related UserInterface object.
            </param>
        </member>
        <member name="F:Zelda.UI.CharacterDetailsWindow.inlineTooltips">
            <summary>
            The InlineTooltip this CharacterDetailsWindow contains.
            </summary>
        </member>
        <member name="T:Zelda.UI.CharacterDetailsWindow.InlineTooltip">
            <summary>
            Represents a Tooltip that renders a header text inline and when hoverer over
            draws the actual tooltip text.
            </summary>
        </member>
        <member name="M:Zelda.UI.CharacterDetailsWindow.InlineTooltip.#ctor(System.String,Atom.Xna.Fonts.IFont,System.Action{Atom.Xna.UI.Tooltips.Tooltip,Atom.Xna.ISpriteDrawContext})">
            <summary>
            Initializes a new instance of the InlineTooltip class.
            </summary>
            <param name="header">
            The text that represents the content of the tooltip.
            </param>
            <param name="font">
            The font with which the header text should be drawn.
            </param>
            <param name="drawAction">
            The action to execute when drawing the actual tooltip.
            </param>
        </member>
        <member name="M:Zelda.UI.CharacterDetailsWindow.InlineTooltip.OnDraw(Atom.Xna.ISpriteDrawContext)">
            <summary>
            Called when this InlineTooltip is drawing itself.
            </summary>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="F:Zelda.UI.CharacterDetailsWindow.InlineTooltip.header">
            <summary>
            The text that represents the content of the tooltip.
            </summary>
        </member>
        <member name="F:Zelda.UI.CharacterDetailsWindow.InlineTooltip.font">
            <summary>
            The font with which the header text is drawn.
            </summary>
        </member>
        <member name="T:Zelda.UI.CharacterWindow">
            <summary>
            Allows the player to see basic character status information and invest status points.
            </summary>
        </member>
        <member name="F:Zelda.UI.CharacterWindow.CenterStatNamesX">
            <summary>
            The coordinate constants used by the CharacterWindow.
            </summary>
        </member>
        <member name="F:Zelda.UI.CharacterWindow.CenterStatValuesX">
            <summary>
            The coordinate constants used by the CharacterWindow.
            </summary>
        </member>
        <member name="F:Zelda.UI.CharacterWindow.ColorStatName">
            <summary>
            The color constants used by the CharacterWindow.
            </summary>
        </member>
        <member name="F:Zelda.UI.CharacterWindow.ColorStatValue">
            <summary>
            The color constants used by the CharacterWindow.
            </summary>
        </member>
        <member name="P:Zelda.UI.CharacterWindow.ShowsStatValueTooltips">
            <summary>
            Gets or sets a value indicating whether the value tooltips are shown. E.g. "12 + 3"
            </summary>
        </member>
        <member name="M:Zelda.UI.CharacterWindow.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.UI.CharacterWindow"/> class.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related servicess.
            </param>
        </member>
        <member name="M:Zelda.UI.CharacterWindow.SetupStatUpButtons">
            <summary>
            Setups the StatUp buttons, called once on creation of the window.
            </summary>
        </member>
        <member name="M:Zelda.UI.CharacterWindow.SetupStatTooltips">
            <summary>
            Setups and creates the stat tooltips.
            </summary>
        </member>
        <member name="M:Zelda.UI.CharacterWindow.CreateStatTooltip(System.String,System.Single,Atom.Xna.UI.ITextBlockSplitter)">
            <summary>
            Creates a new TextTooltip that is shown when the player moves over one of the stat names; Strength, Dexterity, ..
            </summary>
            <param name="tooltipText">
            The text to show when the player moves into the tooltip area.
            </param>
            <param name="positionY">
            The position of the tooltip area on the y-axis.
            </param>
            <param name="blockSplitter">
            The ITextBlockSplitter that should be used to split the given tooltipText into multiple lines.
            </param>
            <returns>
            The newly created TextTooltip.
            </returns>
        </member>
        <member name="M:Zelda.UI.CharacterWindow.SetupStatValueTooltips">
            <summary>
            Setups and creates the stat tooltips.
            </summary>
        </member>
        <member name="M:Zelda.UI.CharacterWindow.CreateStatValueTooltip(Zelda.Status.Stat,System.Single,Zelda.UI.TextBlockSplitter)">
            <summary>
            Creates a new TextTooltip that is shown when the player moves over one of the stat values.
            </summary>
            <param name="stat">
            The stat value for which extra information should be displayed when the player moves his mouse
            over the tooltip area.
            </param>
            <param name="positionY">
            The position of the tooltip area on the y-axis.
            </param>
            <param name="blockSplitter">
            The ITextBlockSplitter that should be used to split the given tooltipText into multiple lines.
            </param>
            <returns>
            The newly created TextTooltip.
            </returns>
        </member>
        <member name="M:Zelda.UI.CharacterWindow.OnDraw(Atom.Xna.ISpriteDrawContext)">
            <summary>
            Called when this <see cref="T:Zelda.UI.CharacterWindow"/> is drawing itself.
            </summary>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.CharacterWindow.DrawDetailedInfos(Atom.Xna.ISpriteDrawContext)">
            <summary>
            Draws the detailed character information.
            </summary>
            <param name="drawContext">
            The current ISpriteDrawContext
            </param>
        </member>
        <member name="M:Zelda.UI.CharacterWindow.GetRangedDamageInfoString(Zelda.Status.ExtendedStatable)">
            <summary>
            Gets the ranged damage information for the given ExtendedStatable.
            </summary>
            <param name="statable">
            The ExtendedStatable to inspect.
            </param>
            <returns>
            An informative string.
            </returns>
        </member>
        <member name="M:Zelda.UI.CharacterWindow.GetRangedAttackSpeedString(Zelda.Status.ExtendedStatable)">
            <summary>
            Gets the ranged attack speed information for the given ExtendedStatable.
            </summary>
            <param name="statable">
            The ExtendedStatable to inspect.
            </param>
            <returns>
            An informative string.
            </returns>
        </member>
        <member name="M:Zelda.UI.CharacterWindow.GetMeleeDamageInfoString(Zelda.Status.ExtendedStatable)">
            <summary>
            Gets the melee damage information for the given ExtendedStatable.
            </summary>
            <param name="statable">
            The ExtendedStatable to inspect.
            </param>
            <returns>
            An informative string.
            </returns>
        </member>
        <member name="M:Zelda.UI.CharacterWindow.GetMeleeAttackSpeedString(Zelda.Status.ExtendedStatable)">
            <summary>
            Gets the melee attack speed information for the given ExtendedStatable.
            </summary>
            <param name="statable">
            The ExtendedStatable to inspect.
            </param>
            <returns>
            An informative string.
            </returns>
        </member>
        <member name="M:Zelda.UI.CharacterWindow.GetSpellDamageInfoString(Zelda.Status.ExtendedStatable)">
            <summary>
            Gets the spell damage information for the given ExtendedStatable.
            </summary>
            <param name="statable">
            The ExtendedStatable to inspect.
            </param>
            <returns>
            An informative string.
            </returns>
        </member>
        <member name="M:Zelda.UI.CharacterWindow.GetCastSpeedString(Zelda.Status.ExtendedStatable)">
            <summary>
            Gets the cast speed information for the given ExtendedStatable.
            </summary>
            <param name="statable">
            The ExtendedStatable to inspect.
            </param>
            <returns>
            An informative string.
            </returns>
        </member>
        <member name="M:Zelda.UI.CharacterWindow.DrawStatIndicators(Atom.Xna.ISpriteDrawContext)">
            <summary>
            Draws the strings that indicate how much of each <see cref="T:Zelda.Status.Stat"/> the player has.
            </summary>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.CharacterWindow.OnStatUpButtonMouseEntering(Atom.Xna.UI.UIElement)">
            <summary>
            Called when the mouse is entering the client area of any of the stat-up buttons.
            </summary>
            <param name="element">
            The stat-up button that the mouse has entered.
            </param>
        </member>
        <member name="M:Zelda.UI.CharacterWindow.CaptureStatUpCost(Zelda.UI.CharacterWindow.StatUpButton)">
            <summary>
            Stores the number of points that are required to invest into the Stat
            that the specified StatUpButton is responsible for.
            </summary>
            <param name="button">
            The button whose related stat-up cost will be captured.
            </param>
        </member>
        <member name="M:Zelda.UI.CharacterWindow.ResetStatUpCost">
            <summary>
            Resets the captured stat-up cost.
            </summary>
        </member>
        <member name="M:Zelda.UI.CharacterWindow.OnStatUpButtonMouseLeaving(Atom.Xna.UI.UIElement)">
            <summary>
            Called when the mouse is leaving the client area of any of the stat-up buttons.
            </summary>
            <param name="element">
            The stat-up button that the mouse has left.
            </param>
        </member>
        <member name="M:Zelda.UI.CharacterWindow.OnStatUpButtonClicked(System.Object,Microsoft.Xna.Framework.Input.MouseState@,Microsoft.Xna.Framework.Input.MouseState@)">
            <summary>
            Called when one of the StatUp buttons gets clicked.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="mouseState">The current state of the mouse.</param>
            <param name="oldMouseState">The state of the mouse one frame ago.</param>
        </member>
        <member name="M:Zelda.UI.CharacterWindow.RefreshStatUpButtonVisability">
            <summary>
            Refreshes what StatUp buttons are visible.
            </summary>
        </member>
        <member name="M:Zelda.UI.CharacterWindow.AddChildElementsTo(Atom.Xna.UI.UserInterface)">
            <summary>
            Adds the child elements of this CharacterWindow to the given UserInterface.
            </summary>
            <param name="userInterface">
            The related UserInterface.
            </param>
        </member>
        <member name="M:Zelda.UI.CharacterWindow.RemoveChildElementsFrom(Atom.Xna.UI.UserInterface)">
            <summary>
            Removes the child elements of this CharacterWindow from the given UserInterface.
            </summary>
            <param name="userInterface">
            The related UserInterface.
            </param>
        </member>
        <member name="M:Zelda.UI.CharacterWindow.Opening">
            <summary>
            Gets called when this CharacterWindow is opening.
            </summary>
        </member>
        <member name="M:Zelda.UI.CharacterWindow.Closing">
            <summary>
            Gets called when this CharacterWindow is closing.
            </summary>
        </member>
        <member name="F:Zelda.UI.CharacterWindow.statUpCost">
            <summary>
            The number of status points that are required to invest one point
            into the stat that the player is hovering the invest button on.
            </summary>
        </member>
        <member name="F:Zelda.UI.CharacterWindow.statUpButtons">
            <summary>
            Enumerates the StatUpButton shown in the CharacterWindow.
            </summary>
        </member>
        <member name="F:Zelda.UI.CharacterWindow.statTooltips">
            <summary>
            Enumerates the tooltips shown in the CharacterWindow.
            </summary>
        </member>
        <member name="F:Zelda.UI.CharacterWindow.statValueTooltips">
            <summary>
            Enumerates the tooltips shown in the CharacterWindow.
            </summary>
        </member>
        <member name="F:Zelda.UI.CharacterWindow.toolTipDrawElement">
            <summary>
            Defines the IToolTipDrawElement which draws the default tooltips shown in this CharacterWindow.
            </summary>
        </member>
        <member name="F:Zelda.UI.CharacterWindow.statValueToolTipDrawElement">
            <summary>
            Defines the IToolTipDrawElement which draws the tooltips shown
            when the player moves the mouse over a stat value in this CharacterWindow.
            </summary>
        </member>
        <member name="T:Zelda.UI.CharacterWindow.StatUpButton">
            <summary>
            Defines the class of buttons that
            when pressed increase a Stat of the player
            by one.
            </summary>
        </member>
        <member name="F:Zelda.UI.CharacterWindow.StatUpButton.Stat">
            <summary>
            The Stat that is manipulated by this StatUpButton.
            </summary>
        </member>
        <member name="M:Zelda.UI.CharacterWindow.StatUpButton.#ctor(Zelda.Status.Stat)">
            <summary>
            Initializes a new instance of the StatUpButton class.
            </summary>
            <param name="stat">
            The Stat that is manipulated by the new StatUpButton.
            </param>
        </member>
        <member name="T:Zelda.UI.CharacterWindow.ToolTipDrawElement">
            <summary>
            Defines the UIElement that draws the Tooltips shown in the Character Window.
            </summary>
        </member>
        <member name="M:Zelda.UI.CharacterWindow.ToolTipDrawElement.#ctor(Atom.Math.Point2)">
            <summary>
            Initializes a new instance of the ToolTipDrawElement class.
            </summary>
            <param name="viewSize">
            The original size of the game-window (before it gets rescaled).
            </param>
        </member>
        <member name="M:Zelda.UI.CharacterWindow.ToolTipDrawElement.OnDraw(Atom.Xna.ISpriteDrawContext)">
            <summary>
            Called when this ToolTipDrawElement is drawing itself.
            </summary>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="T:Zelda.UI.CharacterWindow.StatValueToolTipDrawElement">
            <summary>
            Defines the UIElement that draws the Tooltips 
            shown when the player mouse-overs one of the stat values
            in the Character Window.
            </summary>
        </member>
        <member name="M:Zelda.UI.CharacterWindow.StatValueToolTipDrawElement.#ctor(Zelda.UI.CharacterWindow)">
            <summary>
            Initializes a new instance of the StatValueToolTipDrawElement class.
            </summary>
            <param name="window">
            The CharacterWindow that owns the new StatValueToolTipDrawElement.
            </param>
        </member>
        <member name="M:Zelda.UI.CharacterWindow.StatValueToolTipDrawElement.OnDraw(Atom.Xna.ISpriteDrawContext)">
            <summary>
            Called when this StatValueToolTipDrawElement is drawing itself.
            </summary>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.CharacterWindow.StatValueToolTipDrawElement.OnUpdate(Atom.IUpdateContext)">
            <summary>
            Called when this StatValueToolTipDrawElement is updating itself.
            </summary>
            <param name="updateContext">
            The current IUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.UI.CharacterWindow.StatValueToolTipDrawElement.OnTooltipChanged">
            <summary>
            Gets called when the TextTooltip this StatValueToolTipDrawElement is visualizing has changed.
            </summary>
        </member>
        <member name="F:Zelda.UI.CharacterWindow.StatValueToolTipDrawElement.window">
            <summary>
            Identifies the CharacterWindow that owns this StatValueToolTipDrawElement.
            </summary>
        </member>
        <member name="T:Zelda.UI.EquipmentWindow">
            <summary>
            The <see cref="T:Zelda.UI.EquipmentWindow"/> is used to visualize the
            player's equipment status information.
            </summary>
        </member>
        <member name="F:Zelda.UI.EquipmentWindow.ColorRequirementsNotFullfilled">
            <summary>
            The color of the rectangle that is drawn above items
            whose requirements are currently not fullfilled.
            </summary>
        </member>
        <member name="M:Zelda.UI.EquipmentWindow.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.UI.EquipmentWindow"/> class.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related servicess.
            </param>
        </member>
        <member name="M:Zelda.UI.EquipmentWindow.OnDraw(Atom.Xna.ISpriteDrawContext)">
            <summary>
            Called when this <see cref="T:Zelda.UI.EquipmentWindow"/> is drawing itself.
            </summary>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.EquipmentWindow.OnUpdate(Atom.IUpdateContext)">
            <summary>
            Called when this <see cref="T:Zelda.UI.EquipmentWindow"/> is updating itself.
            </summary>
            <param name="updateContext">
            The current IUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.UI.EquipmentWindow.HandleMouseInput(Microsoft.Xna.Framework.Input.MouseState@,Microsoft.Xna.Framework.Input.MouseState@)">
            <summary>
            Handles mouse input for this EquipmentWindow.
            </summary>
            <param name="mouseState">The current state of the mouse.</param>
            <param name="oldMouseState">The state of the mouse one frame ago.</param>
        </member>
        <member name="M:Zelda.UI.EquipmentWindow.HandleLeftClickOnField(Zelda.UI.EquipmentWindow.EquipmentField)">
            <summary>
            Called when a simple left click occurs on the specified <see cref="T:Zelda.UI.EquipmentWindow.EquipmentField"/>.
            </summary>
            <param name="field">The field that was clicked on, if any.</param>
        </member>
        <member name="M:Zelda.UI.EquipmentWindow.OnPlayerChanged">
            <summary>
            Called when the PlayerEntity that owns this IngameWindow has changed.
            </summary>
        </member>
        <member name="M:Zelda.UI.EquipmentWindow.OnIsEnabledChanged">
            <summary>
            Gets called when the IsEnabled state of this InventoryWindow has changed.
            </summary>
        </member>
        <member name="M:Zelda.UI.EquipmentWindow.OnIsVisibleChanged">
            <summary>
            Gets called when the IsVisible state of this InventoryWindow has changed.
            </summary>
        </member>
        <member name="M:Zelda.UI.EquipmentWindow.AddChildElementsTo(Atom.Xna.UI.UserInterface)">
            <summary>
            Adds the child elements of this IngameWindow to the specified UserInterface.
            </summary>
            <param name="userInterface">
            The related UserInterface object.
            </param>
        </member>
        <member name="M:Zelda.UI.EquipmentWindow.RemoveChildElementsFrom(Atom.Xna.UI.UserInterface)">
            <summary>
            Removes the child elements of this IngameWindow from the specified UserInterface.
            </summary>
            <param name="userInterface">
            The related UserInterface object.
            </param>
        </member>
        <member name="F:Zelda.UI.EquipmentWindow.fields">
            <summary>
            The list of <see cref="T:Zelda.UI.EquipmentWindow.EquipmentField"/>s.
            </summary>
        </member>
        <member name="F:Zelda.UI.EquipmentWindow.fieldMouseOver">
            <summary>
            Stores the <see cref="T:Zelda.UI.EquipmentWindow.EquipmentField"/> the player has his mouse
            currently over, if any.
            </summary>
        </member>
        <member name="F:Zelda.UI.EquipmentWindow.mousePosition">
            <summary>
            The position of the mouse.
            </summary>
        </member>
        <member name="F:Zelda.UI.EquipmentWindow.itemInfoDisplay">
            <summary>
            Used to visualize the information about an item.
            </summary>
        </member>
        <member name="F:Zelda.UI.EquipmentWindow.fontTitle">
            <summary>
            The IFonts used in the Equipment Window.
            </summary>
        </member>
        <member name="T:Zelda.UI.EquipmentWindow.EquipmentField">
            <summary>
            The EquipmentField stores the information needed to draw
            a single EquipmentStatusSlot.
            </summary>
        </member>
        <member name="F:Zelda.UI.EquipmentWindow.EquipmentField.Slot">
            <summary>
            The EquipmentStatusSlot this EquipmentField is related to.
            </summary>
        </member>
        <member name="F:Zelda.UI.EquipmentWindow.EquipmentField.area">
            <summary>
            The area this EquipmentField covers.
            </summary>
        </member>
        <member name="F:Zelda.UI.EquipmentWindow.EquipmentField.slotSprite">
            <summary>
            The sprite of this EquipmentField.
            </summary>
        </member>
        <member name="M:Zelda.UI.EquipmentWindow.EquipmentField.#ctor(Zelda.Items.EquipmentStatusSlot,System.Int32,System.Int32,Atom.Xna.Sprite)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.UI.EquipmentWindow.EquipmentField"/> class.
            </summary>
            <param name="slot">
            The EquipmentStatusSlot the new EquipmentField is related to.
            </param>
            <param name="x">The position of the new EquipmentField on the x-axis.</param>
            <param name="y">The position of the new EquipmentField on the y-axis.</param>
            <param name="sprite">The background sprite of the new EquipmentField.</param>
        </member>
        <member name="M:Zelda.UI.EquipmentWindow.EquipmentField.Draw(Zelda.Items.EquipmentStatus,Zelda.ZeldaDrawContext)">
            <summary>
            Draws the <see cref="T:Zelda.UI.EquipmentWindow.EquipmentField"/>.
            </summary>
            <param name="equipment">
            The related EquipmentStatus object.
            </param>
            <param name="drawContext">
            The current ZeldaDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.EquipmentWindow.EquipmentField.IsInside(System.Int32,System.Int32)">
            <summary>
            Gets whether the specified points is inside of the <see cref="T:Zelda.UI.EquipmentWindow.EquipmentField"/>.
            </summary>
            <param name="x">The position of the point on the x-axis.</param>
            <param name="y">The position of the point on the y-axis.</param>
            <returns>
            true if the given point is inside this EquipmentField's area;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.UI.IngameWindow">
            <summary>
            Represents the base class of all Ingame Windows.
            </summary>
        </member>
        <member name="E:Zelda.UI.IngameWindow.Opened">
            <summary>
            Raised when this IngameWindow has been opened.
            </summary>
        </member>
        <member name="P:Zelda.UI.IngameWindow.Player">
            <summary> 
            Gets or sets the PlayerEntity whose status is visualized by this IngameWindow.
            </summary>
        </member>
        <member name="P:Zelda.UI.IngameWindow.Next">
            <summary>
            Gets or sets the next <see cref="T:Zelda.UI.IngameWindow"/> in the closed ring of IngameWindows.
            </summary>
        </member>
        <member name="P:Zelda.UI.IngameWindow.Previous">
            <summary>
            Gets or sets the previous <see cref="T:Zelda.UI.IngameWindow"/> in the closed ring of IngameWindows.
            </summary>
        </member>
        <member name="P:Zelda.UI.IngameWindow.IsOpen">
            <summary>
            Gets a value indicating whether this <see cref="T:Zelda.UI.IngameWindow"/> is currently open.
            </summary>
        </member>
        <member name="P:Zelda.UI.IngameWindow.CanBeOpened">
            <summary>
            Gets a value indicating whether this IngameWindow can currently be opened.
            </summary>
            <value>The default value is true.</value>
        </member>
        <member name="M:Zelda.UI.IngameWindow.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.UI.IngameWindow"/> class.
            </summary>
        </member>
        <member name="M:Zelda.UI.IngameWindow.Open">
            <summary>
            Opens this <see cref="T:Zelda.UI.IngameWindow"/>.
            </summary>
        </member>
        <member name="M:Zelda.UI.IngameWindow.Close">
            <summary>
            Closes this <see cref="T:Zelda.UI.IngameWindow"/>.
            </summary>
        </member>
        <member name="M:Zelda.UI.IngameWindow.OpeningCore">
            <summary>
            Called when this IngameWindow is about to be opened.
            </summary>
        </member>
        <member name="M:Zelda.UI.IngameWindow.ClosingCore">
            <summary>
            Called when this IngameWindow is about to be closed.
            </summary>
        </member>
        <member name="M:Zelda.UI.IngameWindow.Opening">
            <summary>
            Gets called when this <see cref="T:Zelda.UI.IngameWindow"/> is opening.
            </summary>
        </member>
        <member name="M:Zelda.UI.IngameWindow.Closing">
            <summary>
            Gets called when this <see cref="T:Zelda.UI.IngameWindow"/> is closing.
            </summary>
        </member>
        <member name="M:Zelda.UI.IngameWindow.OnPlayerChanged">
            <summary>
            Called when the PlayerEntity that owns this IngameWindow has changed.
            </summary>
        </member>
        <member name="M:Zelda.UI.IngameWindow.AddChildElementsTo(Atom.Xna.UI.UserInterface)">
            <summary>
            Adds the child elements of this IngameWindow to the specified UserInterface.
            </summary>
            <param name="userInterface">
            The related UserInterface object.
            </param>
        </member>
        <member name="M:Zelda.UI.IngameWindow.RemoveChildElementsFrom(Atom.Xna.UI.UserInterface)">
            <summary>
            Removes the child elements of this IngameWindow from the specified UserInterface.
            </summary>
            <param name="userInterface">
            The related UserInterface object.
            </param>
        </member>
        <member name="M:Zelda.UI.IngameWindow.OnRemoved(Atom.Xna.UI.UserInterface)">
            <summary>
            Gets called when this IngameWindow gets removed from an UserInterface.
            </summary>
            <param name="userInterface">
            The related UserInterface object.
            </param>
        </member>
        <member name="F:Zelda.UI.IngameWindow.player">
            <summary>
            Represents the storage field of the Player property.
            </summary>
        </member>
        <member name="T:Zelda.UI.InventoryBaseWindow">
            <summary>
            Factors out common functionality used by the <see cref="T:Zelda.UI.InventoryWindow"/>
            and the <see cref="T:Zelda.UI.Crafting.CraftingBottleWindow"/> class.
            </summary>
        </member>
        <member name="F:Zelda.UI.InventoryBaseWindow.CellSize">
            <summary>
            The size of a single cell.
            </summary>
        </member>
        <member name="F:Zelda.UI.InventoryBaseWindow.ColorItemBackground">
            <summary>
            Specifies the color of the rectangle that is drawn behind items.
            </summary>
        </member>
        <member name="F:Zelda.UI.InventoryBaseWindow.ColorItemOnUseCooldown">
            <summary>
            Specifies the color of the visualization of an item's on-use-effect cooldown.
            </summary>
        </member>
        <member name="F:Zelda.UI.InventoryBaseWindow.ColorPickedUpItemBackground">
            <summary>
            Specifies the color of the rectangle that fills the cell under the currently picked-up item.
            </summary>
        </member>
        <member name="P:Zelda.UI.InventoryBaseWindow.ItemInfoDisplay">
            <summary>
            Gets the <see cref="P:Zelda.UI.InventoryBaseWindow.ItemInfoDisplay"/> used by this InventoryBaseWindow to display Item Information.
            </summary>
        </member>
        <member name="P:Zelda.UI.InventoryBaseWindow.ItemInfoVisualizer">
            <summary>
            Gets the <see cref="T:Zelda.UI.IItemInfoVisualizer"/> used by this InventoryBaseWindow to display Item Information.
            </summary>
        </member>
        <member name="P:Zelda.UI.InventoryBaseWindow.MousePosition">
            <summary>
            Gets the last captured position of the mouse.
            </summary>
        </member>
        <member name="P:Zelda.UI.InventoryBaseWindow.Owner">
            <summary>
            Gets the <see cref="T:Zelda.UI.IngameUserInterface"/> that owns this IngameWindow.
            </summary>
        </member>
        <member name="M:Zelda.UI.InventoryBaseWindow.#ctor(Zelda.UI.CooldownVisualizer,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.UI.InventoryBaseWindow"/> class.
            </summary>
            <param name="cooldownVisualizer">
            Provides a mechanism to visualize the cooldown on the ItemUseEffect of an item.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.UI.InventoryBaseWindow.OnUpdate(Atom.IUpdateContext)">
            <summary>
            Called when this InventoryBaseWindow is updating itself.
            </summary>
            <param name="updateContext">
            The current IUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.UI.InventoryBaseWindow.DrawCellsAndItems(Atom.Xna.ISpriteDrawContext)">
            <summary>
            Draws the Inventory Cells and Items.
            </summary>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.InventoryBaseWindow.DrawItem(Zelda.Items.ItemInstance,System.Int32,System.Int32,Atom.Xna.ISpriteDrawContext)">
            <summary>
            Draws the given ItemInstance at the given cell position.
            </summary>
            <param name="itemInstance">
            The ItemInstance to draw.
            </param>
            <param name="cellX">
            The position of the starting cell on the x-axis.
            </param>
            <param name="cellY">
            The position of the starting cell on the y-axis.
            </param>
            <param name="drawContext">
            The current ISpriteDrawContext
            </param>
        </member>
        <member name="M:Zelda.UI.InventoryBaseWindow.DrawItemCount(Zelda.Items.ItemInstance,Atom.Math.Vector2,Atom.Xna.ISpriteDrawContext)">
            <summary>
            Draws the number of items that are on the same stack.
            </summary>
            <param name="itemInstance">
            The ItemInstance whose Count should be visualized.
            </param>
            <param name="drawPositon">
            The original drawing position.
            </param>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.InventoryBaseWindow.DrawUseCooldown(Zelda.Items.Item,Atom.Math.Vector2)">
            <summary>
            Draws the cooldown of the UseEffect of the given Item.
            </summary>
            <param name="item">The item to process.</param>
            <param name="drawPosition">The drawing position of the currently processed item.</param>
        </member>
        <member name="M:Zelda.UI.InventoryBaseWindow.DrawPickedUpItemIndicator(Zelda.Items.ItemInstance,Atom.Math.Vector2,Zelda.ZeldaDrawContext)">
            <summary>
            Draws a rectangle below the given item to indicate
            where the item would go into the inventory.
            </summary>
            <param name="pickedUpItem">
            The currently picked up item.
            </param>
            <param name="mousePosition">
            The current position of the mouse.
            </param>
            <param name="drawContext">
            The current ZeldaDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.InventoryBaseWindow.ShouldShowItemInfoFor(Zelda.Items.ItemInstance)">
            <summary>
            Gets a value indicating whether the Item Information should be shown for the given ItemInstance.
            </summary>
            <param name="itemInstance">
            The ItemInstance that is supposed to be shown.
            </param>
            <returns>
            Returns true if the information about the ItemInstance should be shown;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.UI.InventoryBaseWindow.GetMouseOverItemOrEquippedItemForComparison(Zelda.Items.ItemInstance,Zelda.Entities.PlayerEntity,Atom.Xna.UI.UserInterface)">
            <summary>
            Gets the given item or the equipped item that fits into the same slot as the given item if the user has pressed the right ALT/CTRL modifier keys for item comparison.
            </summary>
            <param name="itemInstance">
            The item instance that the user has mouse-hovered.
            </param>
            <param name="player">
            The PlayerEntity.
            </param>
            <param name="userInterface">
            The UI object.
            </param>
            <returns>
            The item to show to the user.
            </returns>
        </member>
        <member name="M:Zelda.UI.InventoryBaseWindow.HandleMouseInput(Microsoft.Xna.Framework.Input.MouseState@,Microsoft.Xna.Framework.Input.MouseState@)">
            <summary>
            Handles mouse input related for this <see cref="T:Zelda.UI.InventoryWindow"/>.
            </summary>
            <param name="mouseState">The current state of the mouse.</param>
            <param name="oldMouseState">The state of the mouse one frame ago.</param>
        </member>
        <member name="M:Zelda.UI.InventoryBaseWindow.GetInventory">
            <summary>
            Gets the Inventory that gets visualized by this InventoryBaseWindow.
            </summary>
            <returns>
            An Inventory instance.
            </returns>
        </member>
        <member name="M:Zelda.UI.InventoryBaseWindow.OnPlayerChanged">
            <summary>
            Gets called when the PlayerEntity whose Inventory is visualized by this InventoryBaseWindow has changed.
            </summary>
        </member>
        <member name="M:Zelda.UI.InventoryBaseWindow.OnIsEnabledChanged">
            <summary>
            Gets called when the IsEnabled state of this CraftingBottleWindow has changed.
            </summary>
        </member>
        <member name="M:Zelda.UI.InventoryBaseWindow.OnIsVisibleChanged">
            <summary>
            Gets called when the IsVisible state of this CraftingBottleWindow has changed.
            </summary>
        </member>
        <member name="M:Zelda.UI.InventoryBaseWindow.OnAdded(Atom.Xna.UI.UserInterface)">
            <summary>
            Gets called when this InventoryWindow has been added to the given UserInterface.
            </summary>
            <param name="userInterface">
            The related UserInterface.
            </param>
        </member>
        <member name="M:Zelda.UI.InventoryBaseWindow.OnRemoved(Atom.Xna.UI.UserInterface)">
            <summary>
            Gets called when this InventoryWindow has been removed from the given UserInterface.
            </summary>
            <param name="userInterface">
            The related UserInterface.
            </param>
        </member>
        <member name="F:Zelda.UI.InventoryBaseWindow.mousePosition">
            <summary>
            Captures tThe mouse's current position.
            </summary>
        </member>
        <member name="F:Zelda.UI.InventoryBaseWindow.itemInfoDisplay">
            <summary>
            The ItemInfoDisplay that is responsible for drawing the Item Information
            when the user mouse-overs an item.
            </summary>
        </member>
        <member name="F:Zelda.UI.InventoryBaseWindow.itemInfoVisualizer">
            <summary>
            Provides a mechanism for visualizing an item.
            </summary>
        </member>
        <member name="F:Zelda.UI.InventoryBaseWindow.spriteCell">
            <summary>
            The sprite that is used to visualize a single cell of the inventory's grid.
            </summary>
        </member>
        <member name="F:Zelda.UI.InventoryBaseWindow.fontItemCount">
            <summary>
            The IFont that is used when drawing the Item Count.
            </summary>
        </member>
        <member name="F:Zelda.UI.InventoryBaseWindow.cooldownVisualizer">
            <summary>
            Provides a mechanism to visualize the cooldown on the ItemUseEffect of an item.
            </summary>
        </member>
        <member name="F:Zelda.UI.InventoryBaseWindow.socketRenderer">
            <summary>
            Responsible for rendering the sockets and gems of an EquipmentInstance.
            </summary>
        </member>
        <member name="T:Zelda.UI.InventoryWindow">
            <summary>
            Defines the <see cref="T:Zelda.UI.IngameWindow"/> that is used to
            visualize the <see cref="T:Zelda.Items.Inventory"/> of the Player.
            </summary>
        </member>
        <member name="P:Zelda.UI.InventoryWindow.SideBar">
            <summary>
            Gets or sets the SideBar UIElement that is part of the User Interface.
            </summary>
        </member>
        <member name="M:Zelda.UI.InventoryWindow.#ctor(Zelda.UI.CooldownVisualizer,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.UI.InventoryWindow"/> class.
            </summary>
            <param name="cooldownVisualizer">
            Provides a mechanism to visualize the cooldown on the ItemUseEffect of an item.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related servicess.
            </param>
        </member>
        <member name="M:Zelda.UI.InventoryWindow.OnDraw(Atom.Xna.ISpriteDrawContext)">
            <summary>
            Called when this <see cref="T:Zelda.UI.InventoryWindow"/> is drawing itself.
            </summary>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.InventoryWindow.HandleRelatedMouseInput(Microsoft.Xna.Framework.Input.MouseState@,Microsoft.Xna.Framework.Input.MouseState@)">
            <summary>
            Handles mouse input related to this <see cref="T:Zelda.UI.InventoryWindow"/>.
            </summary>
            <param name="mouseState">The current state of the mouse.</param>
            <param name="oldMouseState">The state of the mouse one frame ago.</param>
            <returns>Whether input should be passed to elements behind this UIElement.</returns>
        </member>
        <member name="M:Zelda.UI.InventoryWindow.HandleMouseInput(Microsoft.Xna.Framework.Input.MouseState@,Microsoft.Xna.Framework.Input.MouseState@)">
            <summary>
            Handles mouse input related for this <see cref="T:Zelda.UI.InventoryWindow"/>.
            </summary>
            <param name="mouseState">The current state of the mouse.</param>
            <param name="oldMouseState">The state of the mouse one frame ago.</param>
        </member>
        <member name="M:Zelda.UI.InventoryWindow.Opening">
            <summary>
            Gets called when this <see cref="T:Zelda.UI.IngameWindow"/> is opening.
            </summary>
        </member>
        <member name="M:Zelda.UI.InventoryWindow.OnPlayerChanged">
            <summary>
            Gets called when the PlayerEntity whose Inventory is visualized by this InventoryWindow has changed.
            </summary>
        </member>
        <member name="M:Zelda.UI.InventoryWindow.OnPlayerLevelUp(System.Object,System.EventArgs)">
            <summary>
            Called when the player got a levelup.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
            <param name="e">
            The EventArgs that contain the event data.
            </param>
        </member>
        <member name="M:Zelda.UI.InventoryWindow.GetInventory">
            <summary>
            Gets the Inventory that gets visualized by this InventoryWindow.
            </summary>
            <returns>
            An Inventory instance.
            </returns>
        </member>
        <member name="F:Zelda.UI.InventoryWindow.player">
            <summary>
            Identifies the PlayerEntity whose Inventory is visualized using this InventoryWindow.
            </summary>
        </member>
        <member name="T:Zelda.UI.MiniMapWindow">
            <summary>
            This ingame window draws the
            mini map of the current ZeldaScene.
            </summary>
        </member>
        <member name="F:Zelda.UI.MiniMapWindow.HorizontalBorderSize">
            <summary>
            The size of the border on the x-axis.
            </summary>
        </member>
        <member name="F:Zelda.UI.MiniMapWindow.VerticalBorderSize">
            <summary>
            The size of the border on the y-axis.
            </summary>
        </member>
        <member name="F:Zelda.UI.MiniMapWindow.ColorBackground">
            <summary>
            The color of the background rectangle.
            </summary>
        </member>
        <member name="P:Zelda.UI.MiniMapWindow.Scene">
            <summary>
            Sets the <see cref="T:Zelda.ZeldaScene"/> whose map
            is shown in this MiniMapWindow.
            </summary>
        </member>
        <member name="M:Zelda.UI.MiniMapWindow.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the MiniMapWindow class.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.UI.MiniMapWindow.OnDraw(Atom.Xna.ISpriteDrawContext)">
            <summary>
            Called when this MiniMapWindow is drawing itself.
            </summary>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.MiniMapWindow.DrawMap(Zelda.ZeldaDrawContext)">
            <summary>
            Draws the map.
            </summary>
            <param name="drawContext">
            The current ZeldaDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.MiniMapWindow.DrawFogOfWar(Zelda.ZeldaDrawContext)">
            <summary>
            Draws the Fog of War on-top of the map.
            </summary>
            <param name="zeldaDrawContext">
            The current ZeldaDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.MiniMapWindow.DrawPlayer(Atom.Xna.Batches.ISpriteBatch)">
            <summary>
            Draws a blinking sprite at the position of the player.
            </summary>
            <param name="batch">
            The SpriteBatch to use.
            </param>
        </member>
        <member name="M:Zelda.UI.MiniMapWindow.CreateMap">
            <summary>
            Draws the map; storing it in the mapTexture.
            </summary>
        </member>
        <member name="M:Zelda.UI.MiniMapWindow.ShouldDrawAmbientLayer">
            <summary>
            Gets a value indicating whether a rectangle containing
            the ambient color should be drawn on-top of the scene.
            </summary>
            <returns>
            true if the ambient color should be drawn
            above the scene; otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.UI.MiniMapWindow.OnUpdate(Atom.IUpdateContext)">
            <summary>
            Called when this MiniMapWindow is updating itself.
            </summary>
            <param name="updateContext">
            The current IUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.UI.MiniMapWindow.OnDeviceReset(System.Object,System.EventArgs)">
            <summary>
            Called when the XNA device has been reset.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
            <param name="e">
            The EventArgs that contains the event data.
            </param>
        </member>
        <member name="M:Zelda.UI.MiniMapWindow.Dispose">
            <summary>
            Immediatly releases the unmanaged resources used by this MiniMapWindow.
            </summary>
        </member>
        <member name="F:Zelda.UI.MiniMapWindow.scene">
            <summary>
            The scene whose map is currently shown.
            </summary>
        </member>
        <member name="F:Zelda.UI.MiniMapWindow.mapTexture">
            <summary>
            The texture that contains the complete map.
            </summary>
        </member>
        <member name="F:Zelda.UI.MiniMapWindow.tickTimeBlinkingHead">
            <summary>
            Used to make the spriteLinkHead blink.
            </summary>
        </member>
        <member name="F:Zelda.UI.MiniMapWindow.spriteLinkHead">
            <summary>
            The sprite of link's head.
            </summary>
        </member>
        <member name="F:Zelda.UI.MiniMapWindow.renderTarget">
            <summary>
            The target the map is drawn onto.
            </summary>
        </member>
        <member name="F:Zelda.UI.MiniMapWindow.redrawContext">
            <summary>
            The draw context used when drawing the map
            </summary>
        </member>
        <member name="F:Zelda.UI.MiniMapWindow.device">
            <summary>
            Indentifies the XNA graphics device.
            </summary>
        </member>
        <member name="T:Zelda.UI.QuestLogWindow">
            <summary>
            Defines an IngameWindow that visualizes the QuestLog of the player.
            </summary>
        </member>
        <member name="F:Zelda.UI.QuestLogWindow.QuestListLength">
            <summary>
            The maximum number of quests shown at a time in the Quest List.
            </summary>
        </member>
        <member name="F:Zelda.UI.QuestLogWindow.QuestListOffsetX">
            <summary>
            Position constant(s) used in this QuestLogWindow.
            </summary>
        </member>
        <member name="F:Zelda.UI.QuestLogWindow.QuestListOffsetY">
            <summary>
            Position constant(s) used in this QuestLogWindow.
            </summary>
        </member>
        <member name="F:Zelda.UI.QuestLogWindow.QuestListEntrySize">
            <summary>
            Position constant(s) used in this QuestLogWindow.
            </summary>
        </member>
        <member name="F:Zelda.UI.QuestLogWindow.ColorBackground">
            <summary>
            The color of the background rectangle.
            </summary>
        </member>
        <member name="F:Zelda.UI.QuestLogWindow.ColorQuestField">
            <summary>
            The color of a quest field.
            </summary>
        </member>
        <member name="F:Zelda.UI.QuestLogWindow.ColorMainQuest">
            <summary>
            The color of the main quest indicators.
            </summary>
        </member>
        <member name="F:Zelda.UI.QuestLogWindow.ColorSelectedQuestField">
            <summary>
            The color of a selected quest field.
            </summary>
        </member>
        <member name="T:Zelda.UI.QuestLogWindow.WindowState">
            <summary>
            Enumerates the different possible states the QuestLogWindow can be in.
            </summary>
        </member>
        <member name="F:Zelda.UI.QuestLogWindow.WindowState.QuestList">
            <summary>
            In this state the QuestLogWindow shows the currently active quests.
            </summary>
        </member>
        <member name="F:Zelda.UI.QuestLogWindow.WindowState.SelectedQuest">
            <summary>
            In this state the QuestLogWindow shows the currently selected quest.
            </summary>
        </member>
        <member name="P:Zelda.UI.QuestLogWindow.QuestLog">
            <summary>
            Gets or sets the <see cref="P:Zelda.UI.QuestLogWindow.QuestLog"/> that gets visualized by this QuestLogWindow.
            </summary>
        </member>
        <member name="M:Zelda.UI.QuestLogWindow.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the QuestLogWindow class.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.UI.QuestLogWindow.OnDraw(Atom.Xna.ISpriteDrawContext)">
            <summary>
            Called when this QuestLogWindow is drawing itself.
            </summary>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.QuestLogWindow.Draw_QuestList(Zelda.ZeldaDrawContext)">
            <summary>
            Draws this QuestLogWindow, showing the quest list.
            </summary>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.QuestLogWindow.DrawQuestState(Zelda.Quests.Quest,System.Int32,Atom.Xna.ISpriteDrawContext)">
            <summary>
            Draws the state of the quest in the quest list.
            </summary>
            <param name="quest">The quest whose state should be drawn.</param>
            <param name="offsetY">The drawing offset on the y-axis.</param>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.QuestLogWindow.GetQuestStateString(Zelda.Quests.Quest,System.Int32)">
            <summary>
            Gets a string that represents the current state of the specified Quest.
            </summary>
            <param name="quest">The quest to investigate.</param>
            <param name="state">The state of the speciefied Quest; as a value from 0 to 100%.</param>
            <returns>
            A short human-readable string that descripes the state of the specified Quest.
            </returns>
        </member>
        <member name="M:Zelda.UI.QuestLogWindow.ShouldHideQuestState(Zelda.Quests.Quest,System.Int32)">
            <summary>
            Gets a value indicating whether the specified Quest should hide its quest state.
            </summary>
            <param name="quest">The quest to investigate.</param>
            <param name="state">The state of the speciefied Quest; as a value from 0 to 100%.</param>
            <returns>
            true if the true quest state should be hidden from the player;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.UI.QuestLogWindow.Draw_SelectedQuest(Atom.Xna.ISpriteDrawContext)">
            <summary>
            Draws this QuestLogWindow, showing the currently selected quest.
            </summary>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.QuestLogWindow.DrawSelectedQuestState(Atom.Xna.ISpriteDrawContext)">
            <summary>
            Draws the current state of the selected quest in detail.
            </summary>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.QuestLogWindow.OnUpdate(Atom.IUpdateContext)">
            <summary>
            Called when this QuestLogWindow is updating itself.
            </summary>
            <param name="updateContext">
            The current IUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.UI.QuestLogWindow.HandleMouseInput(Microsoft.Xna.Framework.Input.MouseState@,Microsoft.Xna.Framework.Input.MouseState@)">
            <summary>
            Handles mouse input related to this QuestLogWindow.
            </summary>
            <param name="mouseState">
            The current state of the mouse.
            </param>
            <param name="oldMouseState">
            The state of the mouse one frame ago.
            </param>
        </member>
        <member name="M:Zelda.UI.QuestLogWindow.HandleKeyInput(Microsoft.Xna.Framework.Input.KeyboardState@,Microsoft.Xna.Framework.Input.KeyboardState@)">
            <summary>
            Called every frame when this Atom.Xna.UI.UIElement is focused by its owning Atom.Xna.UI.UserInterface.
            </summary>
            <param name="keyState">The state of the Microsoft.Xna.Framework.Input.Keyboard.</param>
            <param name="oldKeyState">The state of the Microsoft.Xna.Framework.Input.Keyboard one frame ago.</param>
        </member>
        <member name="M:Zelda.UI.QuestLogWindow.ChangeSelectedQuest(Zelda.Quests.Quest)">
            <summary>
            Sets the currently selectedQuest to the given quest. 
            </summary>
            <param name="quest">
            The Quest to set. Can be null.
            </param>
        </member>
        <member name="M:Zelda.UI.QuestLogWindow.OnBackButtonClicked(System.Object,Microsoft.Xna.Framework.Input.MouseState@,Microsoft.Xna.Framework.Input.MouseState@)">
            <summary>
            Called when the user clicks on the Back-button in the quest details.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="mouseState">
            The current state of the mouse.
            </param>
            <param name="oldMouseState">
            The state of the mouse one frame ago.
            </param>
        </member>
        <member name="M:Zelda.UI.QuestLogWindow.AddChildElementsTo(Atom.Xna.UI.UserInterface)">
            <summary>
            Adds the child elements of this IngameWindow to the specified UserInterface.
            </summary>
            <param name="userInterface">
            The related UserInterface object.
            </param>
        </member>
        <member name="M:Zelda.UI.QuestLogWindow.RemoveChildElementsFrom(Atom.Xna.UI.UserInterface)">
            <summary>
            Removes the child elements of this IngameWindow from the specified UserInterface.
            </summary>
            <param name="userInterface">
            The related UserInterface object.
            </param>
        </member>
        <member name="M:Zelda.UI.QuestLogWindow.ChangeState(Zelda.UI.QuestLogWindow.WindowState)">
            <summary>
            Changes the current state of this <see cref="T:Zelda.UI.QuestLogWindow"/>.
            </summary>
            <param name="newState">
            The state to change to.
            </param>
        </member>
        <member name="M:Zelda.UI.QuestLogWindow.Opening">
            <summary>
            Called when this QuestLogWindow is opening.
            </summary>
        </member>
        <member name="M:Zelda.UI.QuestLogWindow.Closing">
            <summary>
            Called when this QuestLogWindow is closing.
            </summary>
        </member>
        <member name="F:Zelda.UI.QuestLogWindow.mouseHoveredQuestIndex">
            <summary>
            The index of the currently mouse-hovered quest.
            </summary>
        </member>
        <member name="F:Zelda.UI.QuestLogWindow.selectedQuest">
            <summary>
            The currently selected Quest.
            </summary>
        </member>
        <member name="F:Zelda.UI.QuestLogWindow.state">
            <summary>
            The current state of this QuestLogWindow.
            </summary>
        </member>
        <member name="F:Zelda.UI.QuestLogWindow.spriteSkull">
            <summary>
            The sprite used for the main quest indicator.
            </summary>
        </member>
        <member name="F:Zelda.UI.QuestLogWindow.textFieldQuestDetails">
            <summary>
            The TextField that is used to show the details about this Quest.
            </summary>
        </member>
        <member name="F:Zelda.UI.QuestLogWindow.fontTitle">
            <summary>
            Identifies the IFont(s) that is used in this IngameWindow.
            </summary>
        </member>
        <member name="F:Zelda.UI.QuestLogWindow.fontQuestListEntry">
            <summary>
            Identifies the IFont(s) that is used in this IngameWindow.
            </summary>
        </member>
        <member name="F:Zelda.UI.QuestLogWindow.fontQuestState">
            <summary>
            Identifies the IFont(s) that is used in this IngameWindow.
            </summary>
        </member>
        <member name="F:Zelda.UI.QuestLogWindow.fontQuestGoalState">
            <summary>
            Identifies the IFont(s) that is used in this IngameWindow.
            </summary>
        </member>
        <member name="T:Zelda.UI.SharedChestWindow">
            <summary>
            Defines the <see cref="T:Zelda.UI.IngameWindow"/> that is used to
            visualize the <see cref="T:Zelda.Items.SharedChest"/> of the Player.
            </summary>
        </member>
        <member name="M:Zelda.UI.SharedChestWindow.#ctor(Zelda.UI.CooldownVisualizer,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the SharedChestWindow class.
            </summary>
            <param name="cooldownVisualizer">
            Provides a mechanism to visualize the cooldown on the ItemUseEffect of an item.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related servicess.
            </param>
        </member>
        <member name="M:Zelda.UI.SharedChestWindow.UpdateGridTransform">
            <summary>
            Updates the position and size of the cell grid.
            </summary>
        </member>
        <member name="M:Zelda.UI.SharedChestWindow.OnDraw(Atom.Xna.ISpriteDrawContext)">
            <summary>
            Called when this CraftingCubeWindow is drawing itself.
            </summary>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.SharedChestWindow.OnPlayerChanged">
            <summary>
            Gets called when the PlayerEntity whose Inventory is visualized by this InventoryBaseWindow has changed.
            </summary>
        </member>
        <member name="M:Zelda.UI.SharedChestWindow.GetInventory">
            <summary>
            Gets the Inventory that gets visualized by this InventoryBaseWindow.
            </summary>
            <returns>
            An Inventory instance.
            </returns>
        </member>
        <member name="M:Zelda.UI.SharedChestWindow.HandleMouseInput(Microsoft.Xna.Framework.Input.MouseState@,Microsoft.Xna.Framework.Input.MouseState@)">
            <summary>
            Handles mouse input related for this <see cref="T:Zelda.UI.InventoryBaseWindow"/>.
            </summary>
            <param name="mouseState">The current state of the mouse.</param>
            <param name="oldMouseState">The state of the mouse one frame ago.</param>
        </member>
        <member name="M:Zelda.UI.SharedChestWindow.HandleRelatedMouseInput(Microsoft.Xna.Framework.Input.MouseState@,Microsoft.Xna.Framework.Input.MouseState@)">
            <summary>
            Handles mouse input related to this <see cref="T:Zelda.UI.InventoryBaseWindow"/>.
            </summary>
            <param name="mouseState">The current state of the mouse.</param>
            <param name="oldMouseState">The state of the mouse one frame ago.</param>
            <returns>Whether input should be passed to elements behind this UIElement.</returns>
        </member>
        <member name="F:Zelda.UI.SharedChestWindow.currentGridSize">
            <summary>
            The size of the currently displayed cell grid (in cell space).
            </summary>
        </member>
        <member name="F:Zelda.UI.SharedChestWindow.viewSize">
            <summary>
            The size of the ingame-view window.
            </summary>
        </member>
        <member name="T:Zelda.UI.TalentWindow">
            <summary>
            Defines an IngameWindow that allows the user to interact with
            the Talent Tree of this character.
            </summary>
        </member>
        <member name="F:Zelda.UI.TalentWindow.ColorFollowUpNotFulfilled">
            <summary>
            The color of the network's lines that connects the talents.
            </summary>
        </member>
        <member name="F:Zelda.UI.TalentWindow.ColorReqFulfilledInner">
            <summary>
            The color of the network's lines that connects the talents.
            </summary>
        </member>
        <member name="F:Zelda.UI.TalentWindow.ColorReqFulfilled">
            <summary>
            The color of the network's lines that connects the talents.
            </summary>
        </member>
        <member name="F:Zelda.UI.TalentWindow.ColorReqNotFulfilledInner">
            <summary>
            The color of the network's lines that connects the talents.
            </summary>
        </member>
        <member name="F:Zelda.UI.TalentWindow.ColorReqNotFulfilled">
            <summary>
            The color of the network's lines that connects the talents.
            </summary>
        </member>
        <member name="F:Zelda.UI.TalentWindow.ColorBackground">
            <summary>
            The color of the background rectangle.
            </summary>
        </member>
        <member name="F:Zelda.UI.TalentWindow.RowUpY">
            <summary>
            The coordinate constants of the rows.
            </summary>
        </member>
        <member name="F:Zelda.UI.TalentWindow.RowMiddleY">
            <summary>
            The coordinate constants of the rows.
            </summary>
        </member>
        <member name="F:Zelda.UI.TalentWindow.RowDownY">
            <summary>
            The coordinate constants of the rows.
            </summary>
        </member>
        <member name="F:Zelda.UI.TalentWindow.ColumnLeftX">
            <summary>
            The coordinate constants of the columns.
            </summary>
        </member>
        <member name="F:Zelda.UI.TalentWindow.ColumnMiddleX">
            <summary>
            The coordinate constants of the columns.
            </summary>
        </member>
        <member name="F:Zelda.UI.TalentWindow.ColumnRightX">
            <summary>
            The coordinate constants of the columns.
            </summary>
        </member>
        <member name="P:Zelda.UI.TalentWindow.SelectedTalent">
            <summary>
            Gets or sets the currently selected talent.
            </summary>
        </member>
        <member name="P:Zelda.UI.TalentWindow.ShownSelectedTalentLevel">
            <summary>
            Gets the level for which information about the selected talent should be shown.
            </summary>
        </member>
        <member name="T:Zelda.UI.TalentWindow.TalentAccessButtonTag">
            <summary>
            Enumerates the tags set for the Talent Access buttons.
            </summary>
        </member>
        <member name="F:Zelda.UI.TalentWindow.TalentAccessButtonTag.RequirementFirst">
            <summary>
            The first talent requisite; displayed in the middle row.
            </summary>
        </member>
        <member name="F:Zelda.UI.TalentWindow.TalentAccessButtonTag.RequirementSecond">
            <summary>
            The second talent requisite; displayed in the upper row.
            </summary>
        </member>
        <member name="F:Zelda.UI.TalentWindow.TalentAccessButtonTag.RequirementThird">
            <summary>
            The third talent requisite; displayed in the bottum row.
            </summary>
        </member>
        <member name="F:Zelda.UI.TalentWindow.TalentAccessButtonTag.FollowingFirst">
            <summary>
            The first talent that follows the selected talent; displayed in the middle row.
            </summary>
        </member>
        <member name="F:Zelda.UI.TalentWindow.TalentAccessButtonTag.FollowingSecond">
            <summary>
            The second talent that follows the selected talent; displayed in the upper row.
            </summary>
        </member>
        <member name="F:Zelda.UI.TalentWindow.TalentAccessButtonTag.FollowingThird">
            <summary>
            The third talent that follows the selected talent; displayed in the bottum row.
            </summary>
        </member>
        <member name="M:Zelda.UI.TalentWindow.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.UI.TalentWindow"/> class.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.UI.TalentWindow.SetupButtons">
            <summary>
            Setups the buttons used by this TalentWindow.
            </summary>
        </member>
        <member name="M:Zelda.UI.TalentWindow.SetupTalentQuickAccessButtons">
            <summary>
            Setups the quick access buttons.
            </summary>
        </member>
        <member name="M:Zelda.UI.TalentWindow.SetupTalentAccessButton(Atom.Xna.UI.Controls.DynamicSpriteButton,Zelda.UI.TalentWindow.TalentAccessButtonTag,Atom.Math.Vector2,Atom.Xna.UI.Controls.DynamicSpriteButtonSpriteReceiver,Atom.Xna.UI.MouseInputEventHandler)">
            <summary>
            Setups the given talent access button.
            </summary>
            <param name="button">The button to setup.</param>
            <param name="tag">The tag that uniquely identifies the button.</param>
            <param name="position">The position of the button.</param>
            <param name="spriteReceiver">The SpriteReceiver delegate that decides what sprite the button uses.</param>
            <param name="clickedHandler">The event handler that gets invoked when the button was pressed.</param>
        </member>
        <member name="M:Zelda.UI.TalentWindow.SetupQuickAccessButton(Atom.Xna.UI.Controls.SpriteButton,Zelda.Talents.Talent,Atom.Math.Vector2)">
            <summary>
            Setups the given button to allow quick access to the given talent.
            </summary>
            <param name="button">The button to setup.</param>
            <param name="talent">The talent the quick access button leads to.</param>
            <param name="position">The position of the button.</param>
        </member>
        <member name="M:Zelda.UI.TalentWindow.OnDraw(Atom.Xna.ISpriteDrawContext)">
            <summary>
            Called when this TalentWindow is drawing itself.
            </summary>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.TalentWindow.DrawFreeTalentPoints(Atom.Xna.ISpriteDrawContext)">
            <summary>
            Draws the number of free talent points the player currently has.
            </summary>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.TalentWindow.DrawDescription(Atom.Xna.ISpriteDrawContext)">
            <summary>
            Draws the description of the currently selected Talent.
            </summary>
            <param name="drawContext">
            The current ZeldaDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.TalentWindow.DrawLinesToFollowingTalents(Atom.Xna.ISpriteDrawContext)">
            <summary>
            Draws the lines that connect the current talent with the 
            talents that follow it.
            </summary>
            <param name="drawContext">
            The current ZeldaDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.TalentWindow.DrawLinesToRequiredTalents(Atom.Xna.ISpriteDrawContext)">
            <summary>
            Draws the lines that connect the current talent with the 
            talents it requires.
            </summary>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.TalentWindow.OnUpdate(Atom.IUpdateContext)">
            <summary>
            Called when this TalentWindow is updating itself.
            </summary>
            <param name="updateContext">
            The current IUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.UI.TalentWindow.Opening">
            <summary>
            Gets called when this <see cref="T:Zelda.UI.TalentWindow"/> is opening.
            </summary>
        </member>
        <member name="M:Zelda.UI.TalentWindow.Closing">
            <summary>
            Gets called when this <see cref="T:Zelda.UI.TalentWindow"/> is closing.
            </summary>
        </member>
        <member name="M:Zelda.UI.TalentWindow.AddChildElementsTo(Atom.Xna.UI.UserInterface)">
            <summary>
            Adds the child elements of this IngameWindow to the specified UserInterface.
            </summary>
            <param name="userInterface">
            The related UserInterface object.
            </param>
        </member>
        <member name="M:Zelda.UI.TalentWindow.RemoveChildElementsFrom(Atom.Xna.UI.UserInterface)">
            <summary>
            Removes the child elements of this IngameWindow from the specified UserInterface.
            </summary>
            <param name="userInterface">
            The related UserInterface object.
            </param>
        </member>
        <member name="M:Zelda.UI.TalentWindow.RefreshInvestButtonVisablity">
            <summary>
            Refreshes the visablity state of the Invest button
            based on the player's number of free talent points and
            the level of the selected talent.
            </summary>
        </member>
        <member name="M:Zelda.UI.TalentWindow.ShouldShowInvestButton">
            <summary>
            Gets a value indicating whether the Talent Invest button should be visible.
            </summary>
            <returns>
            true if it should be visible;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.UI.TalentWindow.RefreshTalentAccessButtonVisability">
            <summary>
            Refreshes the visability of the Talent Access buttons
            based on the currently selected talent.
            </summary>
        </member>
        <member name="M:Zelda.UI.TalentWindow.OnPlayerChanged">
            <summary>
            Called when the PlayerEntity that owns this IngameWindow has changed.
            </summary>
        </member>
        <member name="M:Zelda.UI.TalentWindow.OnTtalentQuickAccessButton_Clicked(System.Object,Microsoft.Xna.Framework.Input.MouseState@,Microsoft.Xna.Framework.Input.MouseState@)">
            <summary>
            Called when any of the talent quick access buttons has been clicked.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="mouseState">The current state of the mouse.</param>
            <param name="oldMouseState">The state of the mouse one frame ago.</param>
        </member>
        <member name="M:Zelda.UI.TalentWindow.OnInvestButtonClicked(System.Object,Microsoft.Xna.Framework.Input.MouseState@,Microsoft.Xna.Framework.Input.MouseState@)">
            <summary>
            Called when the user clicks on the invest button.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="mouseState">The current state of the mouse.</param>
            <param name="oldMouseState">The state of the mouse one frame ago.</param>
        </member>
        <member name="M:Zelda.UI.TalentWindow.OnTalentAccessButtonClicked(System.Object,Microsoft.Xna.Framework.Input.MouseState@,Microsoft.Xna.Framework.Input.MouseState@)">
            <summary>
            Called when any of the talent access buttons has been clicked.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="mouseState">The current state of the mouse.</param>
            <param name="oldMouseState">The state of the mouse one frame ago.</param>
        </member>
        <member name="M:Zelda.UI.TalentWindow.TalentAccessButton_SpriteReceiver(Atom.Xna.UI.Controls.DynamicSpriteButton,Atom.Xna.ISprite@,Atom.Xna.ISprite@)">
            <summary>
            Called by the TalentAccess buttons when they wish to receiv their sprite data.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="spriteDefault">Will contain the default sprite.</param>
            <param name="spriteSelected">Will contain the selected sprite.</param>
        </member>
        <member name="F:Zelda.UI.TalentWindow.selectedTalent">
            <summary> 
            Identifies the currently selected talent. 
            </summary>
        </member>
        <member name="F:Zelda.UI.TalentWindow.fontLargeText">
            <summary>
            IFonts used for text rendering.
            </summary>
        </member>
        <member name="F:Zelda.UI.TalentWindow.fontText">
            <summary>
            IFonts used for text rendering.
            </summary>
        </member>
        <member name="F:Zelda.UI.TalentWindow.fontSmallText">
            <summary>
            IFonts used for text rendering.
            </summary>
        </member>
        <member name="F:Zelda.UI.TalentWindow.buttonInvest">
            <summary>
            The button that when clicked invests one talent point into the currently selected talent.
            </summary>
        </member>
        <member name="F:Zelda.UI.TalentWindow.talentQuickAccessButtons">
            <summary>
            The buttons that provide quick access to the root talents (melee, ranged, magic, support).
            </summary>
        </member>
        <member name="F:Zelda.UI.TalentWindow.talentButtons">
            <summary>
            The buttons that provide access to the pre-requisite and following talents.
            </summary>
        </member>
        <member name="T:Zelda.ZeldaGame">
            <summary>
            Defines the <see cref="T:Microsoft.Xna.Framework.Game"/> object
            that runs the main loop of the game.
            </summary>
            <remarks>
            The game class is responsible for creating all game managers, services, etc.
            </remarks>
        </member>
        <member name="P:Zelda.ZeldaGame.States">
            <summary>
            Gets the object which manages the current IGameState.
            </summary>
        </member>
        <member name="P:Zelda.ZeldaGame.BehaviourManager">
            <summary>
            Gets the <see cref="T:Zelda.Entities.Behaviours.BehaviourManager"/> object.
            </summary>
        </member>
        <member name="P:Zelda.ZeldaGame.DrawStrategyManager">
            <summary>
            Gets the <see cref="T:Zelda.Entities.Drawing.DrawStrategyManager"/> object.
            </summary>
        </member>
        <member name="P:Zelda.ZeldaGame.EntityReaderWriterManager">
            <summary>
            Gets the Zelda.Entities.ObjectReaderWriterManager object.
            </summary>
        </member>
        <member name="P:Zelda.ZeldaGame.EntityTemplateManager">
            <summary>
            Gets the Zelda.Entities.EntityTemplateManager object.
            </summary>
        </member>
        <member name="P:Zelda.ZeldaGame.ItemManager">
            <summary>
            Gets the Zelda.Items.ItemManager object.
            </summary>
        </member>
        <member name="P:Zelda.ZeldaGame.Graphics">
            <summary>
            Gets the <see cref="T:Zelda.Graphics.GameGraphics"/> object that encapsulate
            all graphics related logic.
            </summary>
        </member>
        <member name="P:Zelda.ZeldaGame.SpriteLoader">
            <summary>
            Gets the IAssetLoader responsible for loading ISprite assets.
            </summary>
        </member>
        <member name="P:Zelda.ZeldaGame.TextureLoader">
            <summary>
            Gets the IAssetLoader responsible for loading Texture2D assets.
            </summary>
        </member>
        <member name="P:Zelda.ZeldaGame.SpriteSheetLoader">
            <summary>
            Gets the IAssetLoader responsible for loading ISpriteSheet assets.
            </summary>
        </member>
        <member name="P:Zelda.ZeldaGame.ViewSize">
            <summary>
            Gets the size of the area the game is drawing to.
            </summary>
            <remarks>
            The view size differs from the client bounds of the game window
            as in that the game is drawn using the ViewSize,
            and then rescaled to fill up the game window.
            </remarks>
        </member>
        <member name="P:Zelda.ZeldaGame.AudioSystem">
            <summary>
            Gets the <see cref="T:Zelda.Audio.ZeldaAudioSystem"/> object.
            </summary>
        </member>
        <member name="P:Zelda.ZeldaGame.Log">
            <summary>
            Gets the main <see cref="T:Atom.Diagnostics.ILog"/> object used by the <see cref="T:Zelda.ZeldaGame"/>.
            </summary>
        </member>
        <member name="P:Zelda.ZeldaGame.Rand">
            <summary>
            Gets a random number generator.
            </summary>
        </member>
        <member name="P:Zelda.ZeldaGame.GlobalKeySettings">
            <summary>
            Gets the globally active KeySettings instance.
            </summary>
        </member>
        <member name="P:Zelda.ZeldaGame.ErrorReporter">
            <summary>
            Gets the error reporter to which all errors are passed.
            </summary>
        </member>
        <member name="P:Zelda.ZeldaGame.Zelda#IZeldaServiceProvider#Game">
            <summary>
            Gets the Xna application object.
            </summary>
        </member>
        <member name="M:Zelda.ZeldaGame.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.ZeldaGame"/> class.
            </summary>
        </member>
        <member name="M:Zelda.ZeldaGame.RegisterServices">
            <summary>
            Registers additional services at the GameServicesContainer.
            </summary>
        </member>
        <member name="M:Zelda.ZeldaGame.RegisterIoC">
            <summary>
            Registers IObjectProviders.
            </summary>
        </member>
        <member name="M:Zelda.ZeldaGame.CreateErrorReporter">
            <summary>
            Creates the IErrorReporter to which all unhandled IErrors are passed.
            </summary>
            <returns>
            The newly created Atom.ErrorReporting.IErrorReporter.
            </returns>
        </member>
        <member name="M:Zelda.ZeldaGame.Initialize">
            <summary>
            Initializes the ZeldaGame.
            </summary>
        </member>
        <member name="M:Zelda.ZeldaGame.InitializeAudio">
            <summary>
            Initializes the Fmod audio sub-system.
            </summary>
        </member>
        <member name="M:Zelda.ZeldaGame.LoadContent">
            <summary>
            Loads all commonly used content.
            </summary>
        </member>
        <member name="M:Zelda.ZeldaGame.UnloadContent">
            <summary>
            Unloads all commonly used content.
            </summary>
        </member>
        <member name="M:Zelda.ZeldaGame.OnExiting(System.Object,System.EventArgs)">
            <summary>
            Called when the game is exiting.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="args">The EventArgs that contains the event data.</param>
        </member>
        <member name="M:Zelda.ZeldaGame.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Updates the Game.
            </summary>
            <param name="gameTime">
            The current GameTime.
            </param>
        </member>
        <member name="M:Zelda.ZeldaGame.Draw(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Draws the Game.
            </summary>
            <param name="gameTime">
            The current GameTime.
            </param>
        </member>
        <member name="M:Zelda.ZeldaGame.GetService(System.Type)">
            <summary>
            Tries to receive the service object of the given <see cref="T:System.Type"/>.
            </summary>
            <param name="serviceType">
            The type of the service object to receive.
            </param>
            <returns>
            The requested service object;
            or null if the service couldn't be found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="serviceType"/> is null.
            </exception>
        </member>
        <member name="M:Zelda.ZeldaGame.TryGetObjectProvider(System.Type)">
            <summary>
            Attempts to receive the IObjectProvider for the specified object type.
            </summary>
            <param name="type">
            The type of object for which an IObjectProvider should be requested.
            </param>
            <returns>
            The associated IObjectProvider; -or- null if no IObjectProvider has been registered
            at this IObjectProviderContainer for the specified <see cref="T:System.Type"/>.
            </returns>
        </member>
        <member name="M:Zelda.ZeldaGame.ReportError(System.Exception,System.Boolean)">
            <summary>
            Reports the given exception.
            </summary>
            <param name="exc">
            The error that has occurred.
            </param>
            <param name="isFatal">
            States whether the error was fatal.
            </param>
        </member>
        <member name="F:Zelda.ZeldaGame.updateContext">
            <summary>
            The IUpdateContext used by the Game.
            </summary>
        </member>
        <member name="F:Zelda.ZeldaGame.audioSystem">
            <summary>
            The Fmod AudioSystem object.
            </summary>
        </member>
        <member name="F:Zelda.ZeldaGame.graphics">
            <summary>
            Encapsulates all graphics related game behaviour.
            </summary>
        </member>
        <member name="F:Zelda.ZeldaGame.spriteLoader">
            <summary>
            Represents a cached reference to the ISpriteLoader the GameGraphics object exposes.
            </summary>
        </member>
        <member name="F:Zelda.ZeldaGame.ingameState">
            <summary>
            Identifies the IngameState GameState.
            </summary>
        </member>
        <member name="F:Zelda.ZeldaGame.providerContainer">
            <summary>
            Provides a mechanism for receiving and registering IObjectProviders.
            </summary>
        </member>
        <member name="F:Zelda.ZeldaGame.states">
            <summary>
            Manages the current state of the Game.
            </summary>
        </member>
        <member name="F:Zelda.ZeldaGame.behaviourManager">
            <summary>
            Stores the Zelda.Entities.Behaviours.BehaviourManager object.
            </summary>
        </member>
        <member name="F:Zelda.ZeldaGame.drawStrategyManager">
            <summary>
            Stores the <see cref="T:Zelda.Entities.Drawing.DrawStrategyManager"/> object.
            </summary>
        </member>
        <member name="F:Zelda.ZeldaGame.objectReaderWriterManager">
            <summary>
            Stores the Zelda.Entities.ObjectReaderWriterManager object.
            </summary>
        </member>
        <member name="F:Zelda.ZeldaGame.entityTemplateManager">
            <summary>
            Stores the Zelda.Entities.EntityTemplateManager object.
            </summary>
        </member>
        <member name="F:Zelda.ZeldaGame.flyingTextManager">
            <summary>
            Stores the Zelda.FlyingTextManager object.
            </summary>
        </member>
        <member name="F:Zelda.ZeldaGame.itemManager">
            <summary>
            Stores the Zelda.Items.ItemManager object.
            </summary>
        </member>
        <member name="F:Zelda.ZeldaGame.recipeDatabase">
            <summary>
            Provides access to all <see cref="T:Zelda.Crafting.Recipe"/>s of the game.
            </summary>
        </member>
        <member name="F:Zelda.ZeldaGame.setDatabase">
            <summary>
            Provides a mechanism that allows receiving of ISets.
            </summary>
        </member>
        <member name="F:Zelda.ZeldaGame.errorHook">
            <summary>
            The hook onto which the error handling logic is attached.
            </summary>
        </member>
        <member name="F:Zelda.ZeldaGame.errorReporter">
            <summary>
            The reporter to which all errors are passed.
            </summary>        
        </member>
        <member name="F:Zelda.ZeldaGame.log">
            <summary>
            Defines the main-log of the game.
            </summary>
        </member>
        <member name="F:Zelda.ZeldaGame.rand">
            <summary>
            Defines a random number generator.
            </summary>
        </member>
        <member name="F:Zelda.ZeldaGame.globalKeySettings">
            <summary>
            The globally active KeySettings instance.
            </summary>
        </member>
    </members>
</doc>
