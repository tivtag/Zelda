<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Atom.Math</name>
    </assembly>
    <members>
        <member name="T:Atom.Math.Complex">
            <summary>
            Defines a complex number (x,yi). C = x + yi, where i^2=(-1). 
            </summary>
            <remarks>
            Complexs numbers are an extension of the real numbers to allow 
            the representation of square roots of negative numbers.
            Any real number is a complex number of type (x,0).
            Any complex number of type (0,-y) is a square root of a negative real number.
            </remarks>
        </member>
        <member name="F:Atom.Math.Complex.Real">
            <summary>
            The real part of this <see cref="T:Atom.Math.Complex"/> number.
            </summary>
        </member>
        <member name="F:Atom.Math.Complex.Imag">
            <summary>
            The imaginary part of this <see cref="T:Atom.Math.Complex"/> number.
            </summary>
        </member>
        <member name="P:Atom.Math.Complex.Zero">
            <summary>
            Gets the <see cref="T:Atom.Math.Complex"/> number with both of its elements set to zero.
            </summary>
            <value>The complex number (0 + 0i).</value>
        </member>
        <member name="P:Atom.Math.Complex.One">
            <summary>
            Gets the <see cref="T:Atom.Math.Complex"/> number which represents the real value 'one'.
            </summary>
            <value>The complex number (1 + 0i).</value>
        </member>
        <member name="P:Atom.Math.Complex.I">
            <summary>
            Gets the <see cref="T:Atom.Math.Complex"/> number which represents the imaginary value 'one'.
            </summary>
            <value>The complex number (0 + 1i).</value>
        </member>
        <member name="P:Atom.Math.Complex.NaN">
            <summary>
            Gets the <see cref="T:Atom.Math.Complex"/> value that is not a number.</summary>
            <value>The complex number (NaN + NaNi).</value>
        </member>
        <member name="P:Atom.Math.Complex.Infinity">
            <summary>
            Gets the <see cref="T:Atom.Math.Complex"/> number which represents infinity.
            </summary>
            <value>The complex number (PositiveInfinity + PositiveInfinityi).</value>
        </member>
        <member name="P:Atom.Math.Complex.Length">
            <summary>
            Gets or sets the length (also called modulus) of this <see cref="T:Atom.Math.Complex"/> number.
            </summary>
            <value>The length (also called modulus) of this <see cref="T:Atom.Math.Complex"/> number.</value>
        </member>
        <member name="P:Atom.Math.Complex.SquaredLength">
            <summary>
            Gets or sets the squared length (also called modulus) of this <see cref="T:Atom.Math.Complex"/> number.
            </summary>
            <value>The squared length (also called modulus) of this <see cref="T:Atom.Math.Complex"/> number.</value>
        </member>
        <member name="P:Atom.Math.Complex.Angle">
            <summary>
            Gets or sets the angle (also called argument) of this <see cref="T:Atom.Math.Complex"/> number.
            </summary>
            <value>The angle (also called argument) of this Complex number (in radians).</value>
        </member>
        <member name="P:Atom.Math.Complex.Conjugate">
            <summary> 
            Gets or sets the conjugate of this <see cref="T:Atom.Math.Complex"/> number.
            </summary>
            <value>The conjugate of this Complex number.</value>
        </member>
        <member name="P:Atom.Math.Complex.Sin">
            <summary>
            Gets the Sine (sin) of this <see cref="T:Atom.Math.Complex"/> number.
            </summary>
            <value>The sine of this Complex number.</value>
        </member>
        <member name="P:Atom.Math.Complex.Asin">
            <summary>
            Gets the Arcus Sine of this <see cref="T:Atom.Math.Complex"/> number.
            </summary>
            <value>The arcus sine of this Complex number.</value>
        </member>
        <member name="P:Atom.Math.Complex.Sinh">
            <summary>
            Gets the Sine Hyperbolicus of this <see cref="T:Atom.Math.Complex"/> number.
            </summary>
            <value>The sine hyperbolicus of this Complex number.</value>
        </member>
        <member name="P:Atom.Math.Complex.Asinh">
            <summary>
            Gets the Arcus(Area) Sine Hyperbolicus of this <see cref="T:Atom.Math.Complex"/> number.
            </summary>
            <value>The arcus sine hyperbolicus of this Complex number.</value>
        </member>
        <member name="P:Atom.Math.Complex.Cos">
            <summary>
            Gets the Cosine (cos) of this <see cref="T:Atom.Math.Complex"/> number.
            </summary>
            <value>The cosine of this Complex number.</value>
        </member>
        <member name="P:Atom.Math.Complex.Cosh">
            <summary>
            Gets the Cosine Hyperbolicus of this <see cref="T:Atom.Math.Complex"/> number.
            </summary>
            <value>The cosine hyperbolicus of this Complex number.</value>
        </member>
        <member name="P:Atom.Math.Complex.Acos">
            <summary>
            Gets the Arcus(Area) Cosine of this <see cref="T:Atom.Math.Complex"/> number.
            </summary>
            <value>The acrus cosine of this Complex number.</value>
        </member>
        <member name="P:Atom.Math.Complex.Acosh">
            <summary>
            Gets the Arcus(Area) Cosine Hyperbolicus of this <see cref="T:Atom.Math.Complex"/> number.
            </summary>
            <value>The arcus cosine hyperbolicus of this Complex number.</value>
        </member>
        <member name="P:Atom.Math.Complex.Tan">
            <summary>
            Gets the Tangent (tan) of this <see cref="T:Atom.Math.Complex"/> number.
            </summary>
            <value>The tangent of this Complex number.</value>
        </member>
        <member name="P:Atom.Math.Complex.Atan">
            <summary>
            Gets the Arcus Tangent (Atan) of this <see cref="T:Atom.Math.Complex"/> number.
            </summary>
            <remarks>
            The Arcus Tangent is the inverse function of the Tangent.
            </remarks>
            <value>The arcus tangent of this Complex number.</value>
        </member>
        <member name="P:Atom.Math.Complex.Tanh">
            <summary>
            Gets the Hyperbolic Tangent (Tanh) of this <see cref="T:Atom.Math.Complex"/> number.
            </summary>
            <value>The tangent hyperbolicus of this Complex number.</value>
        </member>
        <member name="P:Atom.Math.Complex.Atanh">
            <summary>
            Gets the Arcus(Area) Tangent Hyperbolicus of this <see cref="T:Atom.Math.Complex"/> number.
            </summary>
            <value>The arcus tangent hyperbolicus of this Complex number.</value>
        </member>
        <member name="P:Atom.Math.Complex.Cotan">
            <summary>
            Gets the Cotangent of this <see cref="T:Atom.Math.Complex"/> number.
            </summary>
            <value>The cotangent of this Complex number.</value>
        </member>
        <member name="P:Atom.Math.Complex.Acotan">
            <summary>
            Gets the Arcus Cotangens of this <see cref="T:Atom.Math.Complex"/> number.
            </summary>
            <value>The arcus cotangent of this Complex number.</value>
        </member>
        <member name="P:Atom.Math.Complex.Cotanh">
            <summary>
            Gets the Hyperbolic Cotangent of this <see cref="T:Atom.Math.Complex"/> number.
            </summary>
            <value>The hyperbolic contangent of this Complex number.</value>
        </member>
        <member name="P:Atom.Math.Complex.Acotanh">
            <summary>
            Gets the Arcus(Area) Hyperbolic Cotangent of this <see cref="T:Atom.Math.Complex"/> number.
            </summary>
            <value>The arcus hyperbolic contangent of this Complex number.</value>
        </member>
        <member name="P:Atom.Math.Complex.Sec">
            <summary>
            Gets the Secant of this <see cref="T:Atom.Math.Complex"/> number.
            </summary>
            <value>The secant of this Complex number.</value>
        </member>
        <member name="P:Atom.Math.Complex.Cosec">
            <summary>
            Gets the Cosecant (csc, Cosekans) of this <c>Complex</c>.
            </summary>
            <value>The cosecant of this Complex number.</value>
        </member>
        <member name="P:Atom.Math.Complex.Sech">
            <summary>
            Gets the Secant Hyperbolicus (Sech) of this <c>Complex</c>.
            </summary>
            <value>The secant hyperbolicus of this Complex number.</value>
        </member>
        <member name="P:Atom.Math.Complex.Cosech">
            <summary>
            Gets the Cosecant Hyperbolicus (Csech) of this <c>Complex</c>.
            </summary>
            <value>The cosecant hyperbolicus of this Complex number.</value>
        </member>
        <member name="P:Atom.Math.Complex.Asec">
            <summary>
            Gets the Arcus Secant of this <see cref="T:Atom.Math.Complex"/> number.
            </summary>
            <value>The arcus secant of this Complex number.</value>
        </member>
        <member name="P:Atom.Math.Complex.Asech">
            <summary>
            Gets the Arcus Secant Hyperbolicus of this <see cref="T:Atom.Math.Complex"/> number.
            </summary>
            <value>The arcus secant hyperbolicus of this Complex number.</value>
        </member>
        <member name="P:Atom.Math.Complex.Acosec">
            <summary>
            Gets the Arcus Cosecant of this <see cref="T:Atom.Math.Complex"/> number.
            </summary>
            <value>The arcus cosecant of this Complex number.</value>
        </member>
        <member name="P:Atom.Math.Complex.Acosech">
            <summary>
            Gets the Arcus(Area) Cosecant Hyperbolicus of this <see cref="T:Atom.Math.Complex"/> number.
            </summary>
            <value>The arcus cosecant hyperbolicus of this Complex number.</value>
        </member>
        <member name="P:Atom.Math.Complex.Exp">
            <summary>
            Gets the exponential of this <see cref="T:Atom.Math.Complex"/> number.
            </summary>
            <value>The exponential of this Complex number.</value>
        </member>
        <member name="P:Atom.Math.Complex.Log">
            <summary>
            Gets the natural logarithm of this <see cref="T:Atom.Math.Complex"/> number.
            </summary>
            <value>The natural logarithm of this Complex number.</value>
        </member>
        <member name="P:Atom.Math.Complex.Square">
            <summary>
            Gets this <see cref="T:Atom.Math.Complex"/> number squared.
            </summary>
            <value>The square of this Complex number.</value>
        </member>
        <member name="P:Atom.Math.Complex.SquareRoot">
            <summary>
            Gets the Square Root of this <see cref="T:Atom.Math.Complex"/> number.
            </summary>
            <value>The square root of this Complex number.</value>
        </member>
        <member name="P:Atom.Math.Complex.Abs">
            <summary>
            Gets the absolute value of this <see cref="T:Atom.Math.Complex"/> number.
            </summary>
            <value>The absolute of this Complex number.</value>
        </member>
        <member name="P:Atom.Math.Complex.IsZero">
            <summary>
            Gets a value indicating whether this <see cref="T:Atom.Math.Complex"/> number is zero.
            </summary>
            <value>
            Returns <see langword="true"/> if both elements of this Complex number are approximately zero;
            otherwise <see langword="false"/>.
            </value>
        </member>
        <member name="P:Atom.Math.Complex.IsReal">
            <summary>
            Gets a value indicating whether this <see cref="T:Atom.Math.Complex"/> number is a real number.
            </summary>
            <value>
            Returns <see langword="true"/> if the imaginary part of this Complex number is approximately zero;
            otherwise <see langword="false"/>.
            </value>
        </member>
        <member name="P:Atom.Math.Complex.IsRealNonNegative">
            <summary>
            Gets a value indicating whether this <see cref="T:Atom.Math.Complex"/> number is a real non-negative number.
            </summary>
            <value>
            Returns <see langword="true"/> if the real part of this Complex number is positive and the imaginary part approximately zero;
            otherwise <see langword="false"/>.
            </value>
        </member>
        <member name="P:Atom.Math.Complex.IsNaN">
            <summary> 
            Gets a value indicating whether this <see cref="T:Atom.Math.Complex"/> number is NaN (Not a number).
            </summary>
            <value>
            Returns <see langword="true"/> if any of the elements of this Complex number is NaN;
            otherwise <see langword="false"/>.
            </value>
        </member>
        <member name="P:Atom.Math.Complex.IsInfinity">
            <summary>
            Gets a value indicating whether this <see cref="T:Atom.Math.Complex"/> number represents infinity.
            </summary>
            <remarks>
            True if it either the real or imaginary part represents positive or negative infinity.
            </remarks>
            <value>
            Returns <see langword="true"/> if any of the elements of this Complex number is infinite;
            otherwise <see langword="false"/>.
            </value>
        </member>
        <member name="M:Atom.Math.Complex.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.Complex"/> structure.
            </summary>
            <param name="real"> The real part of the <see cref="T:Atom.Math.Complex"/> number. </param>
            <param name="imag"> The imaginary part of the <see cref="T:Atom.Math.Complex"/> number. </param>
        </member>
        <member name="M:Atom.Math.Complex.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.Complex"/> structure.
            </summary>
            <remarks> The double precision is lost when cast to single precision. </remarks>
            <param name="real"> The real part of the <see cref="T:Atom.Math.Complex"/> number. </param>
            <param name="imag"> The imaginary part of the <see cref="T:Atom.Math.Complex"/> number. </param>
        </member>
        <member name="M:Atom.Math.Complex.FromLengthAngle(System.Single,System.Single)">
            <summary>
            Constructs a <c>Complex</c> number from its modulus and argument.</summary>
            <param name="length"> The length (or modulus) of the <see cref="T:Atom.Math.Complex"/> number. Must be positive. </param>
            <param name="angle"> The angle (or argument) of the <see cref="T:Atom.Math.Complex"/> number. </param>
            <returns>The constructed Complex number.</returns>
        </member>
        <member name="M:Atom.Math.Complex.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> 
            Initializes a new instance of the <see cref="T:Atom.Math.Complex"/> structure and
            sets the real and imaginary values of the new <see cref="T:Atom.Math.Complex"/> to the "Real" and "Imag"
            values inside the specified <see cref="T:System.Runtime.Serialization.SerializationInfo"/>.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds
            the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that 
            contains contextual information about the source or destination.
            Can be null.
            </param>
        </member>
        <member name="M:Atom.Math.Complex.Pow(Atom.Math.Complex)">
            <summary>
            Returns the result of raising this <see cref="T:Atom.Math.Complex"/> number
            by the given <paramref name="exponent"/>.
            </summary>
            <param name="exponent">
            The input exponent.
            </param>
            <returns>The calculated complex value.</returns>
        </member>
        <member name="M:Atom.Math.Complex.Root(Atom.Math.Complex)">
            <summary>
            Returns the result of raising this <see cref="T:Atom.Math.Complex"/> number
            by the inverse of the given <paramref name="rootExponent"/>.
            </summary>
            <param name="rootExponent">
            The input root exponent.
            </param>
            <returns>The calculated complex value.</returns>
        </member>
        <member name="M:Atom.Math.Complex.Normalize">
            <summary>
            Normalizes the <see cref="T:Atom.Math.Complex"/> number 
            to have a length of one.
            </summary>
        </member>
        <member name="M:Atom.Math.Complex.Add(Atom.Math.Complex,Atom.Math.Complex)">
            <summary>
            Returns the result of adding 
            the <paramref name="right"/> <see cref="T:Atom.Math.Complex"/> number to the <paramref name="left"/>
            <see cref="T:Atom.Math.Complex"/> number.
            </summary>
            <param name="left"> The <see cref="T:Atom.Math.Complex"/> number on the left side. </param>
            <param name="right">The <see cref="T:Atom.Math.Complex"/> number on the right side. </param>
            <returns> The result of the operation. </returns>
        </member>
        <member name="M:Atom.Math.Complex.Add(Atom.Math.Complex,System.Single)">
            <summary>
            Returns the result of adding 
            the <paramref name="right"/> real number to the <paramref name="left"/>
            <see cref="T:Atom.Math.Complex"/> number.
            </summary>
            <param name="left"> The <see cref="T:Atom.Math.Complex"/> number on the left side. </param>
            <param name="right">The <see cref="T:Atom.Math.Complex"/> number on the right side. </param>
            <returns> The result of the operation. </returns>
        </member>
        <member name="M:Atom.Math.Complex.Add(System.Single,Atom.Math.Complex)">
            <summary>
            Returns the result of adding 
            the <paramref name="left"/> real number to the <paramref name="right"/>
            <see cref="T:Atom.Math.Complex"/> number.
            </summary>
            <param name="left"> The <see cref="T:Atom.Math.Complex"/> number on the left side. </param>
            <param name="right">The <see cref="T:Atom.Math.Complex"/> number on the right side. </param>
            <returns> The result of the operation. </returns>
        </member>
        <member name="M:Atom.Math.Complex.Negate(Atom.Math.Complex)">
            <summary>
            Negates the specified <see cref="T:Atom.Math.Complex"/> number.
            </summary>
            <param name="number"> The number to negate. </param>
            <returns> The result of the operation. </returns>
        </member>
        <member name="M:Atom.Math.Complex.Subtract(Atom.Math.Complex,Atom.Math.Complex)">
            <summary>
            Returns the result of subtracting the <paramref name="right"/> <see cref="T:Atom.Math.Complex"/> number
            from the left <see cref="T:Atom.Math.Complex"/> number.
            </summary>
            <param name="left"> The <see cref="T:Atom.Math.Complex"/> number on the left side. </param>
            <param name="right">The <see cref="T:Atom.Math.Complex"/> number on the right side. </param>
            <returns> The result of the operation. </returns>
        </member>
        <member name="M:Atom.Math.Complex.Subtract(System.Single,Atom.Math.Complex)">
            <summary>
            Returns the result of subtracting the <paramref name="right"/> <see cref="T:Atom.Math.Complex"/> 
            number from the <paramref name="left"/> real number.
            </summary>
            <param name="left"> The real number on the left side. </param>
            <param name="right">The <see cref="T:Atom.Math.Complex"/> number on the right side. </param>
            <returns> The result of the operation. </returns>/param>
            <returns></returns>
        </member>
        <member name="M:Atom.Math.Complex.Subtract(Atom.Math.Complex,System.Single)">
            <summary>
            Returns the result of subtracting the <paramref name="right"/> real number 
            number from the <paramref name="left"/> <see cref="T:Atom.Math.Complex"/> number.
            </summary>
            <param name="left"> The <see cref="T:Atom.Math.Complex"/> number on the left side. </param>
            <param name="right">The real number on the right side. </param>
            <returns> The result of the operation. </returns>/param>
            <returns></returns>
        </member>
        <member name="M:Atom.Math.Complex.Multiply(System.Single,Atom.Math.Complex)">
            <summary>
            Multiplies the elements of the <see cref="T:Atom.Math.Complex"/> number with the real number.
            </summary>
            <param name="left"> The real number on the left side. </param>
            <param name="right">The <see cref="T:Atom.Math.Complex"/> number on the right side. </param>
            <returns> The result of the operation. </returns>
        </member>
        <member name="M:Atom.Math.Complex.Multiply(Atom.Math.Complex,System.Single)">
            <summary>
            Multiplies the elements of the <see cref="T:Atom.Math.Complex"/> number with the real number.
            </summary>
            <param name="left"> The <see cref="T:Atom.Math.Complex"/> number on the left side. </param>
            <param name="right">The real number on the right side. </param>
            <returns> The result of the operation. </returns>
        </member>
        <member name="M:Atom.Math.Complex.Multiply(Atom.Math.Complex,Atom.Math.Complex)">
            <summary>
            Multiplies the left <see cref="T:Atom.Math.Complex"/> number with the right <see cref="T:Atom.Math.Complex"/> number.
            </summary>
            <remarks>
            Remember that left*right may not be equal to right*left.
            </remarks>
            <param name="left"> The <see cref="T:Atom.Math.Complex"/> number on the left side. </param>
            <param name="right">The <see cref="T:Atom.Math.Complex"/> number on the right side. </param>
            <returns> The result of the operation. </returns>
        </member>
        <member name="M:Atom.Math.Complex.Divide(Atom.Math.Complex,Atom.Math.Complex)">
            <summary>
            Divides the left <see cref="T:Atom.Math.Complex"/> number through the right.
            </summary>
            <param name="left"> The <see cref="T:Atom.Math.Complex"/> number on the left side. </param>
            <param name="right">The <see cref="T:Atom.Math.Complex"/> number on the right side. </param>
            <returns> The result of the operation. </returns>
        </member>
        <member name="M:Atom.Math.Complex.Divide(System.Single,Atom.Math.Complex)">
            <summary>
            Divides the left real number through the right <see cref="T:Atom.Math.Complex"/> number.
            </summary>
            <param name="left"> The real number on the left side. </param>
            <param name="right">The <see cref="T:Atom.Math.Complex"/> number on the right side. </param>
            <returns> The result of the operation. </returns>
        </member>
        <member name="M:Atom.Math.Complex.Divide(Atom.Math.Complex,System.Single)">
            <summary>
            Divides the left <see cref="T:Atom.Math.Complex"/> number through the right real number.
            </summary>
            <param name="left"> The <see cref="T:Atom.Math.Complex"/> number on the left side. </param>
            <param name="right">The real number on the right side. </param>
            <returns> The result of the operation. </returns>
        </member>
        <member name="M:Atom.Math.Complex.Equals(System.Object)">
            <summary> Gets whether the specified <see cref="T:System.Object"/> is equal to this <see cref="T:Atom.Math.Complex"/>. </summary>
            <param name="obj"> The object to test against. </param>
            <returns>true if they are equal, otherwise false. </returns>
        </member>
        <member name="M:Atom.Math.Complex.Equals(Atom.Math.Complex)">
            <summary> 
            Gets whether the specified <see cref="T:Atom.Math.Complex"/> number is equal 
            to this <see cref="T:Atom.Math.Complex"/> number. 
            </summary>
            <param name="other"> The number to test against. </param>
            <returns>true if they are equal, otherwise false. </returns>
        </member>
        <member name="M:Atom.Math.Complex.GetHashCode">
            <summary> 
            Returns the hash code of this <see cref="T:Atom.Math.Complex"/> number.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Atom.Math.Complex.ToString">
            <summary>
            Overriden to return a human-readable string that descripes the Complex number.
            </summary>
            <returns>A string that descripes the Complex number.</returns>
        </member>
        <member name="M:Atom.Math.Complex.ToString(System.IFormatProvider)">
            <summary>
            Returns a human-readable text representation of the Complex number.
            </summary>
            <param name="formatProvider">
            The <see cref="T:System.IFormatProvider"/> that supplies culture specific formatting information.
            </param>
            <returns>A human-readable text representation of the Complex number.</returns>
        </member>
        <member name="M:Atom.Math.Complex.System#ICloneable#Clone">
            <summary> This is a private implementation of an Interface. </summary>
            <returns> Cloned <see cref="T:Atom.Math.Complex"/> as an object.</returns>
        </member>
        <member name="M:Atom.Math.Complex.Clone">
            <summary> Creates a copy of this <see cref="T:Atom.Math.Complex"/> number. </summary>
            <returns> Cloned <see cref="T:Atom.Math.Complex"/>. </returns>
        </member>
        <member name="M:Atom.Math.Complex.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            with the data needed to serialize the <see cref="T:Atom.Math.Complex"/>.
            </summary>
            <remarks>
            real component: "Real"
            imaginary component: "Imag"
            </remarks>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            to populate with data.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the given info is null.
            </exception>
            <param name="context"> 
            The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>)
            for this serialization.
            </param>
        </member>
        <member name="M:Atom.Math.Complex.Parse(System.String)">
            <summary>
            Tries to parse the specified <paramref name="text"/> into this <see cref="T:Atom.Math.Complex"/> object
            using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException"> If <paramref name="text"/> is null. </exception>
            <exception cref="T:System.FormatException"> If the specified <paramref name="text"/> is in an invalid format. </exception>
            <param name="text"> The text to parse. Must be in format "real imag". </param>
        </member>
        <member name="M:Atom.Math.Complex.Parse(System.String,System.IFormatProvider)">
            <summary>
            Tries to parse the specified <paramref name="text"/> into this <see cref="T:Atom.Math.Complex"/> object.
            </summary>
            <exception cref="T:System.ArgumentNullException"> If <paramref name="text"/> is null. </exception>
            <exception cref="T:System.FormatException"> If the specified <paramref name="text"/> is in an invalid format. </exception>
            <param name="text"> The text to parse. Must be in format "real imag". </param>
            <param name="formatProvider"> The format settings to use. </param>
        </member>
        <member name="M:Atom.Math.Complex.ToParseable">
            <summary>
            Converts this <see cref="T:Atom.Math.Complex"/> object into a string that 
            can be parsed back via Parse using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
            <exception cref="T:System.FormatException"> If an format exception occured. </exception>
            <returns> A parseable string in the format "real imag". </returns>
        </member>
        <member name="M:Atom.Math.Complex.ToParseable(System.IFormatProvider)">
            <summary>
            Converts this <see cref="T:Atom.Math.Complex"/> object into a string that can be parsed back via Parse.
            </summary>
            <exception cref="T:System.FormatException"> If an format exception occured. </exception>
            <param name="formatProvider"> The format settings to use. </param>
            <returns> A parseable string in the format "real imag". </returns>
        </member>
        <member name="M:Atom.Math.Complex.GetEnumerator">
            <summary>
            Returns an enumerator that iterates over the components of this <see cref="T:Atom.Math.Complex"/> number.
            </summary>
            <returns>An enumerator.</returns>
        </member>
        <member name="M:Atom.Math.Complex.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates over the components of this <see cref="T:Atom.Math.Complex"/> number.
            </summary>
            <returns>An enumerator.</returns>
        </member>
        <member name="M:Atom.Math.Complex.op_Equality(Atom.Math.Complex,Atom.Math.Complex)">
            <summary>
            Returns whether the given Complex numbers are equal.
            </summary>
            <param name="left">
            The Complex number on the left side of the equation.
            </param>
            <param name="right">
            The Complex number on the right side of the equation.
            </param>
            <returns>
            True if they are approximately equal; otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Math.Complex.op_Inequality(Atom.Math.Complex,Atom.Math.Complex)">
            <summary>
            Returns whether the given Complex numbers are not equal.
            </summary>
            <param name="left">
            The Complex number on the left side of the equation.
            </param>
            <param name="right">
            The Complex number on the right side of the equation.
            </param>
            <returns>
            True if they are approximately not equal; otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Math.Complex.op_Implicit(System.Single)~Atom.Math.Complex">
            <summary>
            Provides implicit casting of a real number into a Complex number.
            </summary>
            <param name="value">The real number to convert.</param>
            <returns>The converted Complex number that represents the real value.</returns>
        </member>
        <member name="M:Atom.Math.Complex.op_Addition(Atom.Math.Complex,Atom.Math.Complex)">
            <summary>
            Returns the result of adding 
            the <paramref name="right"/> <see cref="T:Atom.Math.Complex"/> number to the <paramref name="left"/>
            <see cref="T:Atom.Math.Complex"/> number.
            </summary>
            <param name="left"> The <see cref="T:Atom.Math.Complex"/> number on the left side. </param>
            <param name="right">The <see cref="T:Atom.Math.Complex"/> number on the right side. </param>
            <returns> The result of the operation. </returns>
        </member>
        <member name="M:Atom.Math.Complex.op_Addition(Atom.Math.Complex,System.Single)">
            <summary>
            Returns the result of adding 
            the <paramref name="right"/> real number to the <paramref name="left"/>
            <see cref="T:Atom.Math.Complex"/> number.
            </summary>
            <param name="left"> The <see cref="T:Atom.Math.Complex"/> number on the left side. </param>
            <param name="right">The <see cref="T:Atom.Math.Complex"/> number on the right side. </param>
            <returns> The result of the operation. </returns>
        </member>
        <member name="M:Atom.Math.Complex.op_Addition(System.Single,Atom.Math.Complex)">
            <summary>
            Returns the result of adding 
            the <paramref name="left"/> real number to the <paramref name="right"/>
            <see cref="T:Atom.Math.Complex"/> number.
            </summary>
            <param name="left"> The <see cref="T:Atom.Math.Complex"/> number on the left side. </param>
            <param name="right">The <see cref="T:Atom.Math.Complex"/> number on the right side. </param>
            <returns> The result of the operation. </returns>
        </member>
        <member name="M:Atom.Math.Complex.op_UnaryNegation(Atom.Math.Complex)">
            <summary>
            Negates the specified <see cref="T:Atom.Math.Complex"/> number.
            </summary>
            <param name="number"> The number to negate. </param>
            <returns> The result of the operation. </returns>
        </member>
        <member name="M:Atom.Math.Complex.op_Subtraction(Atom.Math.Complex,Atom.Math.Complex)">
            <summary>
            Returns the result of subtracting the <paramref name="right"/> <see cref="T:Atom.Math.Complex"/> number
            from the left <see cref="T:Atom.Math.Complex"/> number.
            </summary>
            <param name="left"> The <see cref="T:Atom.Math.Complex"/> number on the left side. </param>
            <param name="right">The <see cref="T:Atom.Math.Complex"/> number on the right side. </param>
            <returns> The result of the operation. </returns>
        </member>
        <member name="M:Atom.Math.Complex.op_Subtraction(System.Single,Atom.Math.Complex)">
            <summary>
            Returns the result of subtracting the <paramref name="right"/> <see cref="T:Atom.Math.Complex"/> 
            number from the <paramref name="left"/> real number.
            </summary>
            <param name="left"> The real number on the left side. </param>
            <param name="right">The <see cref="T:Atom.Math.Complex"/> number on the right side. </param>
            <returns> The result of the operation. </returns>/param>
            <returns></returns>
        </member>
        <member name="M:Atom.Math.Complex.op_Subtraction(Atom.Math.Complex,System.Single)">
            <summary>
            Returns the result of subtracting the <paramref name="right"/> real number 
            number from the <paramref name="left"/> <see cref="T:Atom.Math.Complex"/> number.
            </summary>
            <param name="left"> The <see cref="T:Atom.Math.Complex"/> number on the left side. </param>
            <param name="right">The real number on the right side. </param>
            <returns> The result of the operation. </returns>/param>
            <returns></returns>
        </member>
        <member name="M:Atom.Math.Complex.op_Multiply(System.Single,Atom.Math.Complex)">
            <summary>
            Multiplies the elements of the <see cref="T:Atom.Math.Complex"/> number with the real number.
            </summary>
            <param name="left"> The real number on the left side. </param>
            <param name="right">The <see cref="T:Atom.Math.Complex"/> number on the right side. </param>
            <returns> The result of the operation. </returns>
        </member>
        <member name="M:Atom.Math.Complex.op_Multiply(Atom.Math.Complex,System.Single)">
            <summary>
            Multiplies the elements of the <see cref="T:Atom.Math.Complex"/> number with the real number.
            </summary>
            <param name="left"> The <see cref="T:Atom.Math.Complex"/> number on the left side. </param>
            <param name="right">The real number on the right side. </param>
            <returns> The result of the operation. </returns>
        </member>
        <member name="M:Atom.Math.Complex.op_Multiply(Atom.Math.Complex,Atom.Math.Complex)">
            <summary>
            Multiplies the left <see cref="T:Atom.Math.Complex"/> number with the right <see cref="T:Atom.Math.Complex"/> number.
            </summary>
            <remarks>
            Remember that left*right may not be equal to right*left.
            </remarks>
            <param name="left"> The <see cref="T:Atom.Math.Complex"/> number on the left side. </param>
            <param name="right">The <see cref="T:Atom.Math.Complex"/> number on the right side. </param>
            <returns> The result of the operation. </returns>
        </member>
        <member name="M:Atom.Math.Complex.op_Division(Atom.Math.Complex,Atom.Math.Complex)">
            <summary>
            Divides the left <see cref="T:Atom.Math.Complex"/> number through the right.
            </summary>
            <param name="left"> The <see cref="T:Atom.Math.Complex"/> number on the left side. </param>
            <param name="right">The <see cref="T:Atom.Math.Complex"/> number on the right side. </param>
            <returns> The result of the operation. </returns>
        </member>
        <member name="M:Atom.Math.Complex.op_Division(System.Single,Atom.Math.Complex)">
            <summary>
            Divides the left real number through the right <see cref="T:Atom.Math.Complex"/> number.
            </summary>
            <param name="left"> The real number on the left side. </param>
            <param name="right">The <see cref="T:Atom.Math.Complex"/> number on the right side. </param>
            <returns> The result of the operation. </returns>
        </member>
        <member name="M:Atom.Math.Complex.op_Division(Atom.Math.Complex,System.Single)">
            <summary>
            Divides the left <see cref="T:Atom.Math.Complex"/> number through the right real number.
            </summary>
            <param name="left"> The <see cref="T:Atom.Math.Complex"/> number on the left side. </param>
            <param name="right">The real number on the right side. </param>
            <returns> The result of the operation. </returns>
        </member>
        <member name="T:Atom.Math.Quaternion">
            <summary>
            Defines a Quaternion (V, s). 
            Where V is the point part (x, y, z) and
            s the scalar part (w) of the Quaternion.
            Quaternions can be used to represent rotation in 3D space.
            </summary>
        </member>
        <member name="F:Atom.Math.Quaternion.X">
            <summary>
            The X-value of the point component of this <see cref="T:Atom.Math.Quaternion"/>.
            </summary>
        </member>
        <member name="F:Atom.Math.Quaternion.Y">
            <summary>
            The Y-value of the point component of this <see cref="T:Atom.Math.Quaternion"/>.
            </summary>
        </member>
        <member name="F:Atom.Math.Quaternion.Z">
            <summary>
            The Z-value of the point component of this <see cref="T:Atom.Math.Quaternion"/>.
            </summary>
        </member>
        <member name="F:Atom.Math.Quaternion.W">
            <summary>
            The value of the scalar component of this <see cref="T:Atom.Math.Quaternion"/>.
            </summary>
        </member>
        <member name="P:Atom.Math.Quaternion.Identity">
            <summary>
            Gets the identity <see cref="T:Atom.Math.Quaternion"/>, Which is a Quaternion that represents no rotation.
            </summary>
            <value>The identity Quaternion (0, 0, 0, 1).</value>
        </member>
        <member name="P:Atom.Math.Quaternion.Length">
            <summary> 
            Gets the 'length' (also called norm) of this <see cref="T:Atom.Math.Quaternion"/>.
            </summary>
            <value>
            The length (also called norm and magnitude) of this Quaternion.
            </value>
        </member>
        <member name="P:Atom.Math.Quaternion.SquaredLength">
            <summary>
            Gets the squared 'length' (also called norm) of this <see cref="T:Atom.Math.Quaternion"/>.
            </summary>
            <value>
            The squared length (also called norm and magnitude) of this Quaternion.
            </value>
        </member>
        <member name="P:Atom.Math.Quaternion.AxisX">
            <summary>
            Gets the local X-axis portion of the rotation this <see cref="T:Atom.Math.Quaternion"/> descripes.
            </summary>
            <value>The local X-axis portion of the rotation.</value>
        </member>
        <member name="P:Atom.Math.Quaternion.AxisY">
            <summary>
            Gets the local Y-axis portion of the rotation this <see cref="T:Atom.Math.Quaternion"/> descripes.
            </summary>
            <value>The local Y-axis portion of the rotation.</value>
        </member>
        <member name="P:Atom.Math.Quaternion.AxisZ">
            <summary>
            Gets the local Z-axis portion of the rotation this <see cref="T:Atom.Math.Quaternion"/> descripes.
            </summary>
            <value>The local Z-axis portion of the rotation.</value>
        </member>
        <member name="P:Atom.Math.Quaternion.Conjugate">
            <summary> 
            Gets or sets the conjugate of this <see cref="T:Atom.Math.Quaternion"/>.
            </summary>
            <remarks>
            The conjugate of a Quaterion is the same quaternion 
            but with a negated point component.
            </remarks>
            <value>The conjugate of this Quaternion.</value>
        </member>
        <member name="P:Atom.Math.Quaternion.Inverse">
            <summary> 
            Gets the inverse of this <see cref="T:Atom.Math.Quaternion"/>.
            </summary>
            <value>The inverse of this Quaternion.</value>
        </member>
        <member name="P:Atom.Math.Quaternion.Log">
            <summary>
            Gets the natural logarithm of this <see cref="T:Atom.Math.Quaternion"/>.
            </summary>
            <value>The natural logarithm of this Quaternion.</value>
        </member>
        <member name="P:Atom.Math.Quaternion.Exp">
            <summary>
            Gets the exponential of this <see cref="T:Atom.Math.Quaternion"/>.
            </summary>
            <value>The exponential of this Quaternion.</value>
        </member>
        <member name="M:Atom.Math.Quaternion.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.Quaternion"/> struct.
            </summary>
            <param name="x">
            The x-value of the point component of the new Quaternion.
            </param>
            <param name="y">
            The y-value of the point component of the new Quaternion.
            </param>
            <param name="z">
            The z-value of the point component of the new Quaternion.
            </param>
            <param name="w">
            The value of the scalar component of the new Quaternion.
            </param>
        </member>
        <member name="M:Atom.Math.Quaternion.#ctor(Atom.Math.Vector3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.Quaternion"/> struct.
            </summary>
            <param name="vectorPart">
            The point component of the new Quaternion.
            </param>
            <param name="scalarPart">
            The scalar component of the new Quaternion.
            </param>
        </member>
        <member name="M:Atom.Math.Quaternion.Normalize">
            <summary>
            Normalizes this Quaternion, setting its length to one.
            </summary>
        </member>
        <member name="M:Atom.Math.Quaternion.Normalize(Atom.Math.Quaternion)">
            <summary>
            Returns the result of normalizing the given Quaternion.
            </summary>
            <param name="quaternion">The quaternion to normalize.</param>
            <returns>
            The result of the operation.
            </returns>
        </member>
        <member name="M:Atom.Math.Quaternion.Normalize(Atom.Math.Quaternion@,Atom.Math.Quaternion@)">
            <summary>
            Stores the result of normalizing the given Vector in the given <paramref name="result"/> Vector.
            </summary>
            <param name="quaternion">The quaternion to normalize. This value will not be modified by this method.</param>
            <param name="result">This value will store the result of the operation.</param>
        </member>
        <member name="M:Atom.Math.Quaternion.Invert">
            <summary>
            Inverts this <see cref="T:Atom.Math.Quaternion"/>.
            </summary>
        </member>
        <member name="M:Atom.Math.Quaternion.Dot(Atom.Math.Quaternion,Atom.Math.Quaternion)">
            <summary>
            Returns the dot(scalar) product of the given <see cref="T:Atom.Math.Quaternion"/>s.
            </summary>
            <param name="left">The Quaternion on the left side of the equation.</param>
            <param name="right">The Quaternion on the right side of the equation.</param>
            <returns>The dot product.</returns>
        </member>
        <member name="M:Atom.Math.Quaternion.Dot(Atom.Math.Quaternion@,Atom.Math.Quaternion@,System.Single@)">
            <summary>
            Returns the dot(scalar) product of the given <see cref="T:Atom.Math.Quaternion"/>s.
            </summary>
            <param name="left">The Quaternion on the left side of the equation. This value will not be modified by this method.</param>
            <param name="right">The Quaternion on the right side of the equation. This value will not be modified by this method.</param>
            <param name="result">This value will contain the result of this operation.</param>
        </member>
        <member name="M:Atom.Math.Quaternion.Concatenate(Atom.Math.Quaternion,Atom.Math.Quaternion)">
            <summary>
            Concatenates two Quaternions; the result represents 
            the <paramref name="left"/> rotation followed by the <paramref name="right"/> rotation.
            </summary>
            <param name="left">The first Quaternion rotation in the series.</param>
            <param name="right">The second Quaternion rotation in the series.</param>
            <returns>
            A new Quaternion representing the concatenation of the <paramref name="left"/> rotation 
            followed by the <paramref name="right"/> rotation. 
            </returns>
        </member>
        <member name="M:Atom.Math.Quaternion.Add(Atom.Math.Quaternion,Atom.Math.Quaternion)">
            <summary>
            Returns the result of adding the <paramref name="right"/> Quaternion to the <paramref name="left"/> Quaternion.
            </summary>
            <param name="left">The value on the left side of the equation.</param>
            <param name="right">The value on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Quaternion.Add(Atom.Math.Quaternion@,Atom.Math.Quaternion@,Atom.Math.Quaternion@)">
            <summary>
            Stores the result of adding the <paramref name="right"/> Quaternion to the <paramref name="left"/> Quaternion
            in the given Quaternion.
            </summary>
            <param name="left">The value on the left side of the equation. This value will not be modified by this method.</param>
            <param name="right">The value on the right side of the equation. This value will not be modified by this method.</param>
            <param name="result">Will contain the result fo the operation.</param>
        </member>
        <member name="M:Atom.Math.Quaternion.Plus(Atom.Math.Quaternion)">
            <summary>
            This method returns the specified Quaternion.
            </summary>
            <remarks>
            Is equal to "+Quaternion".
            </remarks>
            <param name="quaternion">
            The input Quaternion.
            </param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Quaternion.Plus(Atom.Math.Quaternion@,Atom.Math.Quaternion@)">
            <summary>
            This method stores the specified Quaternion in the specified result value.
            </summary>
            <remarks>
            Is equal to "+Quaternion".
            </remarks>
            <param name="quaternion">
            The input Quaternion.
            </param>
            <param name="result">
            Will contain the result of the operation.
            </param>
        </member>
        <member name="M:Atom.Math.Quaternion.Subtract(Atom.Math.Quaternion,Atom.Math.Quaternion)">
            <summary>
            Returns the result of subtracting the <paramref name="right"/> Quaternion from the <paramref name="left"/> Quaternion.
            </summary>
            <param name="left">The value on the left side of the equation.</param>
            <param name="right">The value on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Quaternion.Subtract(Atom.Math.Quaternion@,Atom.Math.Quaternion@,Atom.Math.Quaternion@)">
            <summary>
            Stores the result of subtracting the <paramref name="right"/> Quaternion frpm the <paramref name="left"/> Quaternion
            in the given Quaternion.
            </summary>
            <param name="left">The value on the left side of the equation. This value will not be modified by this method.</param>
            <param name="right">The value on the right side of the equation. This value will not be modified by this method.</param>
            <param name="result">Will contain the result fo the operation.</param>
        </member>
        <member name="M:Atom.Math.Quaternion.Negate(Atom.Math.Quaternion)">
            <summary>
            Returns the result of negating the elements of the given <paramref name="quaternion"/>.
            </summary>
            <param name="quaternion">
            The Quaternion to negate.
            </param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Quaternion.Negate(Atom.Math.Quaternion@,Atom.Math.Quaternion@)">
            <summary>
            Stores the result of negating the elements of the given <paramref name="quaternion"/> in the given Quaternion.
            </summary>
            <param name="quaternion">
            The Quaternion to negate. This value will not be modified by this method.
            </param>
            <param name="result">Will contain the result of the operation.</param>
        </member>
        <member name="M:Atom.Math.Quaternion.Multiply(Atom.Math.Quaternion,System.Single)">
            <summary>
            Returns the result of multiplying the given <paramref name="quaternion"/> by the given <paramref name="scalar"/>.
            </summary>
            <param name="quaternion">The Quaternion on the left side of the equation.</param>
            <param name="scalar">The scalar on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Quaternion.Multiply(Atom.Math.Quaternion@,System.Single,Atom.Math.Quaternion@)">
            <summary>
            Stores the result of multiplying the given <paramref name="quaternion"/> by the given <paramref name="scalar"/>.
            in the given Quaternion.
            </summary>
            <param name="quaternion">
            The Quaternion on the left side of the equation. This value will not be modified by this method.
            </param>
            <param name="scalar">The scalar on the right side of the equation.</param>
            <param name="result">Will contain the result fo the operation.</param>
        </member>
        <member name="M:Atom.Math.Quaternion.Multiply(System.Single,Atom.Math.Quaternion@,Atom.Math.Quaternion@)">
            <summary>
            Stores the result of multiplying the given <paramref name="quaternion"/> by the given <paramref name="scalar"/>.
            in the given Quaternion.
            </summary>
            <param name="scalar">
            The scalar on the left side of the equation.
            </param>
            <param name="quaternion">
            The Quaternion on the right side of the equation. This value will not be modified by this method.
            </param>
            <param name="result">
            Will contain the result fo the operation.
            </param>
        </member>
        <member name="M:Atom.Math.Quaternion.Multiply(Atom.Math.Quaternion,Atom.Math.Quaternion)">
            <summary>
            Returns the result of multiplying the left Quaternion by the right Quaternion.
            </summary>
            <param name="left">The Quaternion on the left side of the equation.</param>
            <param name="right">The Quaternion on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Quaternion.Multiply(Atom.Math.Quaternion@,Atom.Math.Quaternion@,Atom.Math.Quaternion@)">
            <summary>
            Stores the result of multiplying the left Quaternion by the right Quaternion.
            in the given result Quaternion.
            </summary>
            <param name="left">The Quaternion on the left side of the equation. This value will not be modified by this method.</param>
            <param name="right">The Quaternion on the right side of the equation. This value will not be modified by this method.</param>
            <param name="result">Will contain the result of the operation.</param>
        </member>
        <member name="M:Atom.Math.Quaternion.Divide(Atom.Math.Quaternion,Atom.Math.Quaternion)">
            <summary>
            Returns the result of dividing the left Quaternion through the right Quaternion component-by-component.
            </summary>
            <param name="left">The Quaternion on the left side of the equation.</param>
            <param name="right">The Quaternion on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Quaternion.Divide(Atom.Math.Quaternion@,Atom.Math.Quaternion@,Atom.Math.Quaternion@)">
            <summary>
            Stores the result of dividing the left Quaternion through the right Quaternion component-by-component.
            in the given result Quaternion.
            </summary>
            <param name="left">The Quaternion on the left side of the equation. This value will not be modified by this method.</param>
            <param name="right">The Quaternion on the right side of the equation. This value will not be modified by this method.</param>
            <param name="result">Will store the result of the operation.</param>
        </member>
        <member name="M:Atom.Math.Quaternion.Lerp(Atom.Math.Quaternion,Atom.Math.Quaternion,System.Single)">
            <summary>
            Performs a Linear intERPolation between two <see cref="T:Atom.Math.Quaternion"/>s.
            </summary>
            <param name="start">
            The source Quaternion that represents the start value.
            </param>
            <param name="end">
            The source Quaternion that represents the end value.
            </param>
            <param name="amount">
            Value indicating how far to interpolate between the quaternions.
            </param>
            <returns>The linear interpolation of the two Quaternions.</returns>
        </member>
        <member name="M:Atom.Math.Quaternion.Lerp(Atom.Math.Quaternion@,Atom.Math.Quaternion@,System.Single,Atom.Math.Quaternion@)">
            <summary>
            Performs a Linear intERPolation between two <see cref="T:Atom.Math.Quaternion"/>s.
            </summary>
            <param name="start">
            The source Quaternion that represents the start value. This value will not be modified by this method.
            </param>
            <param name="end">
            The source Quaternion that represents the end value. This value will not be modified by this method.
            </param>
            <param name="amount">
            Value indicating how far to interpolate between the quaternions.
            </param>
            <param name="result">
            Will contain the linear interpolation of the two Quaternions.
            </param>
        </member>
        <member name="M:Atom.Math.Quaternion.Slerp(Atom.Math.Quaternion,Atom.Math.Quaternion,System.Single)">
            <summary>
            Performs a Sperical Linear intERPolation between two <see cref="T:Atom.Math.Quaternion"/>s.
            </summary>
            <param name="start">
            The source Quaternion that represents the start value.
            </param>
            <param name="end">
            The source Quaternion that represents the end value.
            </param>
            <param name="amount">
            Value indicating how far to interpolate between the quaternions.
            </param>
            <returns>The interpolated value.</returns>
        </member>
        <member name="M:Atom.Math.Quaternion.Slerp(Atom.Math.Quaternion@,Atom.Math.Quaternion@,System.Single,Atom.Math.Quaternion@)">
            <summary>
            Performs a Sperical Linear intERPolation between two <see cref="T:Atom.Math.Quaternion"/>s.
            </summary>
            <param name="start">
            The source Quaternion that represents the start value. This value will not be modified by this method.
            </param>
            <param name="end">
            The source Quaternion that represents the end value. This value will not be modified by this method.
            </param>
            <param name="amount">
            Value indicating how far to interpolate between the quaternions.
            </param>
            <param name="result">
            This value will contain the result of this operation.
            </param>
        </member>
        <member name="M:Atom.Math.Quaternion.Slerp(Atom.Math.Quaternion,Atom.Math.Quaternion,System.Boolean,System.Single)">
            <summary>
            Performs Spherical Linear intERPolation between two <see cref="T:Atom.Math.Quaternion"/>s.
            </summary>
            <param name="quatA">The first <see cref="T:Atom.Math.Quaternion"/>. </param>
            <param name="quatB">The second <see cref="T:Atom.Math.Quaternion"/>.</param>
            <param name="useShortestPath">
            States whether to use the shortest path from between the <see cref="T:Atom.Math.Quaternion"/>s.
            </param>
            <param name="amount">
            Value indicating how far to interpolate between the quaternions.
            </param>
            <returns> The interpolated quaternion. </returns>
        </member>
        <member name="M:Atom.Math.Quaternion.Slerp(Atom.Math.Quaternion@,Atom.Math.Quaternion@,System.Boolean,System.Single,Atom.Math.Quaternion@)">
            <summary>
            Performs Spherical Linear intERPolation between two <see cref="T:Atom.Math.Quaternion"/>s.
            </summary>
            <param name="quatA">The first <see cref="T:Atom.Math.Quaternion"/>. This value will not be modified by this method.</param>
            <param name="quatB">The second <see cref="T:Atom.Math.Quaternion"/>. This value will not be modified by this method.</param>
            <param name="useShortestPath">
            States whether to use the shortest path from between the <see cref="T:Atom.Math.Quaternion"/>s.
            </param>
            <param name="amount">
            Value indicating how far to interpolate between the quaternions.
            </param>
            <param name="result">
            This value will contain the result of this operation.
            </param>
        </member>
        <member name="M:Atom.Math.Quaternion.Squad(Atom.Math.Quaternion,Atom.Math.Quaternion,Atom.Math.Quaternion,Atom.Math.Quaternion,System.Single)">
            <summary>
            Performs spherical quadratic interpolation.
            </summary>
            <param name="quatP">The first input Quaternion.</param>
            <param name="quatA">The seciond input Quaternion.</param>
            <param name="quatB">The third input Quaternion.</param>
            <param name="quatQ">The fourth input Quaternion.</param>
            <param name="amount">
            The time to travel.
            </param>
            <returns>
            The interpolated <see cref="T:Atom.Math.Quaternion"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.Quaternion.Squad(Atom.Math.Quaternion,Atom.Math.Quaternion,Atom.Math.Quaternion,Atom.Math.Quaternion,System.Boolean,System.Single)">
            <summary>
            Performs spherical quadratic interpolation.
            </summary>
            <param name="quatP">The first input Quaternion.</param>
            <param name="quatA">The seciond input Quaternion.</param>
            <param name="quatB">The third input Quaternion.</param>
            <param name="quatQ">The fourth input Quaternion.</param>
            <param name="useShortestPath">
            States whether to use the shortest path from between the <see cref="T:Atom.Math.Quaternion"/>s.
            </param>
            <param name="amount">
            The time to travel.
            </param>
            <returns>
            The interpolated <see cref="T:Atom.Math.Quaternion"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.Quaternion.FromAxisAngle(Atom.Math.Vector3,System.Single)">
            <summary>
            Creates a new <see cref="T:Atom.Math.Quaternion"/> given an
            <paramref name="axis"/> and an <paramref name="angle"/>.
            </summary>
            <param name="axis">
            The axis to rotate about.
            </param>
            <param name="angle">
            The angle to rotate around the axis in radians.
            </param>
            <returns>
            The converted Quaternion.
            </returns>
        </member>
        <member name="M:Atom.Math.Quaternion.FromRotationMatrix(Atom.Math.Matrix3)">
            <summary>
            Converts the given rotation <see cref="T:Atom.Math.Matrix3"/> into a <see cref="T:Atom.Math.Quaternion"/>.
            </summary>
            <param name="matrix">
            The matrix to convert.
            </param>
            <returns>
            The converted Quaternion.
            </returns>
        </member>
        <member name="M:Atom.Math.Quaternion.FromRotationMatrix(Atom.Math.Matrix4)">
            <summary>
            Converts the given rotation <see cref="T:Atom.Math.Matrix4"/> into a <see cref="T:Atom.Math.Quaternion"/>.
            </summary>
            <param name="matrix">
            The matrix to convert.
            </param>
            <returns>
            The converted Quaternion.
            </returns>
        </member>
        <member name="M:Atom.Math.Quaternion.FromRotationMatrix(Atom.Math.Matrix4@,Atom.Math.Quaternion@)">
            <summary>
            Converts the given rotation <see cref="T:Atom.Math.Matrix4"/> into a <see cref="T:Atom.Math.Quaternion"/>.
            </summary>
            <param name="matrix">
            The matrix to convert.
            </param>
            <param name="result">Will contain the converted Quaternion.</param>
        </member>
        <member name="M:Atom.Math.Quaternion.FromYawPitchRoll(System.Single,System.Single,System.Single)">
            <summary>
            Creates a new <see cref="T:Atom.Math.Quaternion"/> from specified
            <paramref name="yaw"/>, <paramref name="pitch"/>, and <paramref name="roll"/> angles. 
            </summary>
            <param name="yaw">The yaw angle, in radians, around the y-axis.</param>
            <param name="pitch">The pitch angle, in radians, around the x-axis.</param>
            <param name="roll">The roll angle, in radians, around the z-axis.</param>
            <returns>
            A new Quaternion expressing the specified yaw, pitch, and roll angles.
            </returns>
        </member>
        <member name="M:Atom.Math.Quaternion.Equals(Atom.Math.Quaternion)">
            <summary>
            Returns Whether the given <see cref="T:Atom.Math.Quaternion"/> has the
            same indices set as this Quaternion.
            </summary>
            <param name="other">The Quaternion to test against.</param>
            <returns>
            Returns <see langword="true"/> if the components of the Quaternions are equal;
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.Quaternion.Equals(System.Object)">
            <summary>
            Returns whether the given <see cref="T:System.Object"/> is equal to this Quaternion.
            </summary>
            <param name="obj">The Object to test against.</param>
            <returns>
            Returns <see langword="true"/> if they are equal;
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.Quaternion.ToString">
            <summary>
            Overriden to return a human-readable text representation of the Quaternion.
            </summary>
            <returns>A human-readable text representation of the Quaternion.</returns>
        </member>
        <member name="M:Atom.Math.Quaternion.ToString(System.IFormatProvider)">
            <summary>
            Returns a human-readable text representation of the Quaternion.
            </summary>
            <param name="formatProvider">
            The <see cref="T:System.IFormatProvider"/> that supplies culture specific formatting information.
            </param>
            <returns>A human-readable text representation of the Quaternion.</returns>
        </member>
        <member name="M:Atom.Math.Quaternion.ToVector4">
            <summary>
            Converts the <see cref="T:Atom.Math.Quaternion"/> into a <see cref="T:Atom.Math.Vector4"/>.
            </summary>
            <returns>The converted point.</returns>
        </member>
        <member name="M:Atom.Math.Quaternion.GetHashCode">
            <summary>
            Overriden to return the hashcode of the <see cref="T:Atom.Math.Quaternion"/>.
            </summary>
            <returns>The simple Xor-ed hashcode.</returns>
        </member>
        <member name="M:Atom.Math.Quaternion.GetEnumerator">
            <summary>
            Returns an enumerator that iterates over the components of this <see cref="T:Atom.Math.Quaternion"/>.
            </summary>
            <returns>An enumerator.</returns>
        </member>
        <member name="M:Atom.Math.Quaternion.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates over the components of this <see cref="T:Atom.Math.Quaternion"/>.
            </summary>
            <returns>An enumerator.</returns>
        </member>
        <member name="M:Atom.Math.Quaternion.op_Addition(Atom.Math.Quaternion,Atom.Math.Quaternion)">
            <summary>
            Returns the result of adding the <paramref name="right"/> Quaternion to the <paramref name="left"/> Quaternion.
            </summary>
            <param name="left">The value on the left side of the equation.</param>
            <param name="right">The value on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Quaternion.op_UnaryPlus(Atom.Math.Quaternion)">
            <summary>
            This method returns the specified Quaternion.
            </summary>
            <remarks>
            Is equal to "+Quaternion".
            </remarks>
            <param name="quaternion">The input Quaternion.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Quaternion.op_Subtraction(Atom.Math.Quaternion,Atom.Math.Quaternion)">
            <summary>
            Returns the result of subtracting the <paramref name="right"/> Quaternion from the <paramref name="left"/> Quaternion.
            </summary>
            <param name="left">The value on the left side of the equation.</param>
            <param name="right">The value on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Quaternion.op_UnaryNegation(Atom.Math.Quaternion)">
            <summary>
            Returns the result of negating the elements of the given <paramref name="quaternion"/>.
            </summary>
            <param name="quaternion">
            The Quaternion to negate.
            </param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Quaternion.op_Multiply(Atom.Math.Quaternion,System.Single)">
            <summary>
            Returns the result of multiplying the given <paramref name="quaternion"/> by the given <paramref name="scalar"/>.
            </summary>
            <param name="quaternion">The Quaternion on the left side of the equation.</param>
            <param name="scalar">The scalar on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Quaternion.op_Multiply(System.Single,Atom.Math.Quaternion)">
            <summary>
            Returns the result of multiplying the given <paramref name="quaternion"/> by the given <paramref name="scalar"/>.
            </summary>
            <param name="scalar">The scalar on the left side of the equation.</param>
            <param name="quaternion">The Quaternion on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Quaternion.op_Multiply(Atom.Math.Quaternion,Atom.Math.Quaternion)">
            <summary>
            Returns the result of multiplying the left Quaternion by the right Quaternion.
            </summary>
            <param name="left">The Quaternion on the left side of the equation.</param>
            <param name="right">The Quaternion on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Quaternion.op_Division(Atom.Math.Quaternion,Atom.Math.Quaternion)">
            <summary>
            Returns the result of dividing the left Quaternion through the right Quaternion component-by-component.
            </summary>
            <param name="left">The Quaternion on the left side of the equation.</param>
            <param name="right">The Quaternion on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Quaternion.op_Equality(Atom.Math.Quaternion,Atom.Math.Quaternion)">
            <summary>
            Returns whether the specified <see cref="T:Atom.Math.Quaternion"/>s are equal.
            </summary>
            <param name="left">The Quaternion of the left side of the equation.</param>
            <param name="right">The Quaternion of the right side of the equation.</param>
            <returns>
            Returns <see langword="true"/> if the corresponding elements of the specified Quaternions are approximately equal;
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.Quaternion.op_Inequality(Atom.Math.Quaternion,Atom.Math.Quaternion)">
            <summary>
            Returns whether the specified <see cref="T:Atom.Math.Quaternion"/>s are not equal.
            </summary>
            <param name="left">The Quaternion of the left side of the equation.</param>
            <param name="right">The Quaternion of the right side of the equation.</param>
            <returns>
            Returns <see langword="true"/> if any of the corresponding elements of the specified Quaternions are approximately not equal;
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Atom.Math.Constants">
            <summary>
            Static class that contains single-precision mathematical constants.
            </summary>
        </member>
        <member name="F:Atom.Math.Constants.E">
            <summary>
            Represents the mathematical constant e.
            </summary>
        </member>
        <member name="F:Atom.Math.Constants.Log10E">
            <summary> 
            Represents the log base ten of e.
            </summary>
        </member>
        <member name="F:Atom.Math.Constants.Log2E">
            <summary>
            Represents the log base two of e.
            </summary>
        </member>
        <member name="F:Atom.Math.Constants.Pi">
            <summary>
            Represents the value of pi.
            </summary>
        </member>
        <member name="F:Atom.Math.Constants.PiOver2">
            <summary>
            Represents the value of pi divided by two.
            </summary>
        </member>
        <member name="F:Atom.Math.Constants.PiOver4">
            <summary>
            Represents the value of pi divided by four.
            </summary>
        </member>
        <member name="F:Atom.Math.Constants.TwoPi">
            <summary>
            Represents the value of pi times two.
            </summary>
        </member>
        <member name="F:Atom.Math.Constants.Epsilon">
            <summary> 
             Epsilon, a fairly small value for a single precision floating point (0.00001f).
            </summary>
        </member>
        <member name="F:Atom.Math.Constants.SqrtOfFive">
            <summary>
            The square root of five.
            </summary>
        </member>
        <member name="F:Atom.Math.Constants.EarthVelocity">
            <summary> 
            Represents the earth velocity constant.  9.80665 Rows / s².
            </summary>
        </member>
        <member name="F:Atom.Math.Constants.Gravity">
            <summary>
            Represents the gravity constant. (6.6742e-11f) Unit: Rows³ / km*s².
            </summary>
        </member>
        <member name="F:Atom.Math.Constants.Avogadro">
            <summary>
            Represents the avogadro constant. 6.0221367e26fkml^-1.
            </summary>
        </member>
        <member name="F:Atom.Math.Constants.Boltzmann">
            <summary>
            Represents the boltzmann constant. 1.3807 * 10 ^ -23.
            </summary>
        </member>
        <member name="F:Atom.Math.Constants.Catalan">
            <summary>
            Represents the catalan constant.
            </summary>
            <remarks>Sum(k=0 -> inf){ (-1)^k/(2*k + 1)2 }</remarks>
        </member>
        <member name="F:Atom.Math.Constants.EulerGamma">
            <summary>
            Represents the Euler-Mascheroni constant.
            </summary>
            <remarks>lim(n -> inf){ Sum(k=1 -> n) { 1/k - log(n) } }</remarks>
        </member>
        <member name="F:Atom.Math.Constants.GoldenRatio">
            <summary>
            Represents the golden ratio constant. (1+sqrt(5))/2.
            </summary>
        </member>
        <member name="F:Atom.Math.Constants.Glaisher">
            <summary>
            Represents the glaisher constant.
            </summary>
            <remarks>e^(1/12 - Zeta(-1))</remarks>
        </member>
        <member name="F:Atom.Math.Constants.Khinchin">
            <summary>
            Represents the khinchin constant.
            </summary>
            <remarks>prod(k=1 -> inf){1+1/(k*(k+2))^log(k,2)}</remarks>
        </member>
        <member name="T:Atom.Math.Constantsd">
            <summary>
            Static class that contains double-precision mathematical constants.
            </summary>
        </member>
        <member name="F:Atom.Math.Constantsd.RelativeAccuracy">
            <summary>
            The number 2^(-53).
            </summary>
        </member>
        <member name="F:Atom.Math.Constantsd.PositiveRelativeAccuracy">
            <summary>
            The number 2^(-52).
            </summary>
        </member>
        <member name="F:Atom.Math.Constantsd.DefaultRelativeAccuracy">
            <summary>
            The number 10 * 2^(-52).
            </summary>
        </member>
        <member name="F:Atom.Math.Constantsd.SqrtOneHalf">
            <summary>
            The square root of 0.5.
            As in sqrt(1/2) = 1/sqrt(2) = sqrt(2)/2.
            </summary>
        </member>
        <member name="F:Atom.Math.Constantsd.SqrtFive">
            <summary>
            The square root of five.
            </summary>
        </member>
        <member name="F:Atom.Math.Constantsd.Catalan">
            <summary>The catalan constant.</summary>
            <remarks>Sum(k=0 -> inf){ (-1)^k/(2*k + 1)2 }</remarks>
        </member>
        <member name="F:Atom.Math.Constantsd.EulerGamma">
            <summary>The Euler-Mascheroni constant.</summary>
            <remarks>lim(n -> inf){ Sum(k=1 -> n) { 1/k - log(n) } }</remarks>
        </member>
        <member name="F:Atom.Math.Constantsd.GoldenRatio">
            <summary>The golden ratio constant '(1+sqrt(5))/2'. </summary>
        </member>
        <member name="F:Atom.Math.Constantsd.Glaisher">
            <summary>The glaisher constant.</summary>
            <remarks>e^(1/12 - Zeta(-1))</remarks>
        </member>
        <member name="F:Atom.Math.Constantsd.Khinchin">
            <summary>The khinchin constant.</summary>
            <remarks>prod(k=1 -> inf){1+1/(k*(k+2))^log(k,2)}</remarks>
        </member>
        <member name="T:Atom.Math.CachedCurve">
            <summary>
            Defines a <see cref="T:Atom.Math.Curve"/> that is caching the result 
            of the last evaluation using an arabitary resolution.
            </summary>
            <remarks>
            A <see cref="T:Atom.Math.CachedCurve"/> should be used over an <see cref="T:Atom.Math.Curve"/>
            if the Evulation method is used frequently.
            </remarks>
        </member>
        <member name="M:Atom.Math.CachedCurve.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.CachedCurve"/> class.
            </summary>
            <exception cref="T:System.ArgumentException">
            If <paramref name="sampleCount"/> is less than or equal to zero.
            </exception>
            <param name="sampleCount"> 
            The number of samples to create for the curve. 
            This value affects the resoultion of the Evulation data.
            </param>
        </member>
        <member name="M:Atom.Math.CachedCurve.#ctor(Atom.Math.CachedCurve)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.CachedCurve"/> class;
            cloning the given Curve.
            </summary>
            <param name="curve">The curve to clone.</param>
        </member>
        <member name="M:Atom.Math.CachedCurve.Evaluate(System.Single)">
            <summary>
            Finds the value at a position of the <see cref="T:Atom.Math.Curve"/>.
            </summary>
            <param name="position">
            The position on the Curve. A value between 0.0f and 1.0f.
            </param>
            <returns>
            The evulated value.
            </returns>
        </member>
        <member name="M:Atom.Math.CachedCurve.PreCalculate">
            <summary>
            Pre-Calculates the data of the curve.
            </summary>
        </member>
        <member name="M:Atom.Math.CachedCurve.Flush">
            <summary>
            Resets all pre-calculated data.
            </summary>
        </member>
        <member name="M:Atom.Math.CachedCurve.Clone">
            <summary>
            Returns a clone of the <see cref="T:Atom.Math.CachedCurve"/>.
            </summary>
            <returns>The clone.</returns>
        </member>
        <member name="M:Atom.Math.CachedCurve.System#ICloneable#Clone">
            <summary>
            Returns a clone of the <see cref="T:Atom.Math.CachedCurve"/>.
            </summary>
            <returns>The clone.</returns>
        </member>
        <member name="F:Atom.Math.CachedCurve.sampleCount">
            <summary>
            The number of samples that from the curve.
            </summary>
        </member>
        <member name="F:Atom.Math.CachedCurve.data">
            <summary>
            The cached data.
            </summary>
        </member>
        <member name="T:Atom.Math.CurveTangent">
            <summary>
            Specifies different tangent types to be calculated for CurveKey points in a Curve.
            </summary>
        </member>
        <member name="F:Atom.Math.CurveTangent.Flat">
            <summary>
            A Flat tangent always has a value equal to zero.
            </summary>
        </member>
        <member name="F:Atom.Math.CurveTangent.Linear">
            <summary>
            A Linear tangent at a CurveKey is equal to the difference between its CurveKey.Value and the Value
            of the preceding or succeeding CurveKey.
            </summary>
            <example>
            For example, in Curve MyCurve, where i is greater than zero and (i + 1) is less than 
            the total number of CurveKeys in MyCurve, the linear CurveKey.TangentIn of MyCurve.Keys[i] is equal to:
            ( MyCurve.Keys[i].Value - MyCurve.Keys[i - 1].Value )Similarly, the linear CurveKey.TangentOut is equal to: 
            ( MyCurve.Keys[i + 1].Value - MyCurve.Keys[i].Value.)
            </example>
        </member>
        <member name="F:Atom.Math.CurveTangent.Smooth">
            <summary>
            A Smooth tangent smooths the inflection between a CurveKey.TangentIn and CurveKey.TangentOut
            by taking into account the values of both neighbors of the CurveKey.
            </summary>
            <example>
            <para>
            The smooth CurveKey.TangentIn of MyCurve.Keys[i] is equal to: 
            ( ( MyCurve.Keys[i + 1].Value - MyCurve.Keys[i - 1].Value ) * 
            ( ( MyCurve.Keys[i].Position - MyCurve.Keys[i - 1].Position ) / 
            ( MyCurve.Keys[i + 1].Position - MyCurve.Keys[i-1].Position ) ) )
            </para><para>
            Similarly, the smooth CurveKey.TangentOut is equal to: 
            ( ( MyCurve.Keys[i + 1].Value - MyCurve.Keys[i - 1].Value ) *
            ( ( MyCurve.Keys[i + 1].Position - MyCurve.Keys[i].Position ) /
            ( MyCurve.Keys[i + 1].Position - MyCurve.Keys[i - 1].Position ) ) )
            </para>
            </example>
        </member>
        <member name="T:Atom.Math.CurveLoopType">
            <summary>
            Defines how the value of a Curve will be determined for positions
            before the first point on the Curve or after the last point on the Curve.
            </summary>
        </member>
        <member name="F:Atom.Math.CurveLoopType.Constant">
            <summary>
            The Curve will evaluate to its first key for positions before 
            the first point in the Curve and to the last key for positions after the last point.
            </summary>
        </member>
        <member name="F:Atom.Math.CurveLoopType.Cycle">
            <summary>
            Positions specified past the ends of the curve will wrap around to the opposite side of the Curve.
            </summary>
        </member>
        <member name="F:Atom.Math.CurveLoopType.CycleOffset">
            <summary>
            Positions specified past the ends of the curve will wrap around to the opposite side of the Curve.
            The value will be offset by the difference between the values of the first and last CurveKey multiplied
            by the number of times the position wraps around. If the position is before the first point in the Curve,
            the difference will be subtracted from its value; otherwise, the difference will be added.
            </summary>
        </member>
        <member name="F:Atom.Math.CurveLoopType.Oscillate">
            <summary>
            Linear interpolation will be performed to determine the value.
            </summary>
        </member>
        <member name="F:Atom.Math.CurveLoopType.Linear">
            <summary>
            Positions specified past the ends of the Curve act as an offset from the same side of the Curve toward the opposite side.
            </summary>
        </member>
        <member name="T:Atom.Math.CurveContinuity">
            <summary>
            Defines the continuity of CurveKeys on a Curve.
            </summary>
        </member>
        <member name="F:Atom.Math.CurveContinuity.Smooth">
            <summary>
            Interpolation can be used between this CurveKey and the next.
            </summary>
        </member>
        <member name="F:Atom.Math.CurveContinuity.Step">
            <summary>
            Interpolation cannot be used between this CurveKey and the next. 
            Specifying a position between the two points returns this point.
            </summary>
        </member>
        <member name="T:Atom.Math.Curve">
            <summary>
            Stores an arbitrary collection of 2D CurveKey points, 
            and provides methods for evaluating features of the curve they define.
            </summary>
        </member>
        <member name="P:Atom.Math.Curve.IsConstant">
            <summary>
            Gets a value indicating whether this Curve is constant.
            </summary>
            <value>
            Returns <see langword="true"/> if the curve is constant (has one or fewer points);
            otherwise <see langword="false"/>.
            </value>
        </member>
        <member name="P:Atom.Math.Curve.Keys">
            <summary>
            Gets the <see cref="T:Atom.Math.CurveKeyCollection"/> that contains
            the <see cref="T:Atom.Math.CurveKey"/>s that make-up this Curve.
            </summary>
            <value>
            The reference of the <see cref="T:Atom.Math.CurveKeyCollection"/> that contains the <see cref="T:Atom.Math.CurveKey"/>s that make-up this Curve.
            </value>
        </member>
        <member name="P:Atom.Math.Curve.PostLoop">
            <summary>
            Gets or sets how to handle weighting values that are greater than the last control point in the curve.
            </summary>
            <value>Specifies how to handle weighting values.</value>
        </member>
        <member name="P:Atom.Math.Curve.PreLoop">
            <summary>
            Gets or sets how to handle weighting values that are less than the first control point in the curve.
            </summary>
            <value>Specifies how to handle weighting values.</value>
        </member>
        <member name="M:Atom.Math.Curve.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.Curve"/> class.
            </summary>
        </member>
        <member name="M:Atom.Math.Curve.#ctor(Atom.Math.Curve)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.Curve"/> class,
            cloning the given Curve.
            </summary>
            <param name="curve">The curve to clone.</param>
        </member>
        <member name="M:Atom.Math.Curve.ComputeTangent(System.Int32,Atom.Math.CurveTangent)">
            <summary>
            Computes both the CurveKey.TangentIn and the CurveKey.TangentOut for a CurveKey specified by its index.
            </summary>
            <param name="keyIndex">
            The index of the CurveKey for which to compute tangents (in the Curve.Keys collection of the Curve).
            </param>
            <param name="tangentType">
            The type of tangents to compute.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If the given <paramref name="keyIndex"/> is out of valid range.
            </exception>
        </member>
        <member name="M:Atom.Math.Curve.ComputeTangent(System.Int32,Atom.Math.CurveTangent,Atom.Math.CurveTangent)">
            <summary>
            Computes a specified type of CurveKey.TangentIn and a specified type of CurveKey.TangentOut for a given CurveKey. 
            </summary>
            <param name="keyIndex">
            The index of the CurveKey for which to compute tangents (in the Curve.Keys collection of the Curve).
            </param>
            <param name="tangentInType">
            The type of CurveKey.TangentIn to compute.
            </param>
            <param name="tangentOutType">
            The type of CurveKey.TangentOut to compute.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If the given <paramref name="keyIndex"/> is out of valid range.
            </exception>
        </member>
        <member name="M:Atom.Math.Curve.ComputeTangents(Atom.Math.CurveTangent)">
            <summary>
            Computes all tangents for all CurveKeys in the Curve, 
            using a specified tangent type for both CurveKey.TangentIn and CurveKey.TangentOut. 
            </summary>
            <param name="tangentType">
            The type of CurveKey.TangentOut and CurveKey.TangentIn to compute.
            </param>
        </member>
        <member name="M:Atom.Math.Curve.ComputeTangents(Atom.Math.CurveTangent,Atom.Math.CurveTangent)">
            <summary>
            Computes all tangents for all CurveKeys in the Curve, 
            using different tangent types for CurveKey.TangentOut and CurveKey.TangentIn. 
            </summary>
            <param name="tangentInType">The type of CurveKey.TangentIn to compute.</param>
            <param name="tangentOutType">The type of CurveKey.TangentOut to compute.</param>
        </member>
        <member name="M:Atom.Math.Curve.Evaluate(System.Single)">
            <summary>
            Finds the value at a position on the Curve.
            </summary>
            <param name="position">The position on the Curve.</param>
            <returns>The value at the position on the Curve.</returns>
        </member>
        <member name="M:Atom.Math.Curve.CalcCycle(System.Single)">
            <summary>
            Calculates ... .
            </summary>
            <param name="time">
            The time to move on the Curve.
            </param>
            <returns>
            The calculated value.
            </returns>
        </member>
        <member name="M:Atom.Math.Curve.FindSegment(System.Single,Atom.Math.CurveKey@,Atom.Math.CurveKey@)">
            <summary>
            Finds the curve segment at the given <paramref name="time"/>.
            </summary>
            <param name="time">The time to move on the Curve.</param>
            <param name="keyA">Will contains the first CurveKey of the segement.</param>
            <param name="keyB">Will contains the second CurveKey of the segement.</param>
            <returns>The position on the Curve that marks the segment.</returns>
        </member>
        <member name="M:Atom.Math.Curve.Hermite(Atom.Math.CurveKey,Atom.Math.CurveKey,System.Single)">
            <summary>
            Performs hermite-spline interpolation on two CurveKeys.
            </summary>
            <param name="keyA">The first key.</param>
            <param name="keyB">The second key.</param>
            <param name="time">The weighting factor.</param>
            <returns>The interpolated value. </returns>
        </member>
        <member name="M:Atom.Math.Curve.Clone">
            <summary>
            Creates a clone of the <see cref="T:Atom.Math.Curve"/>.
            </summary>
            <returns>The cloned curve.</returns>
        </member>
        <member name="M:Atom.Math.Curve.System#ICloneable#Clone">
            <summary>
            Creates a clone of the <see cref="T:Atom.Math.Curve"/>.
            </summary>
            <returns>The cloned curve.</returns>
        </member>
        <member name="F:Atom.Math.Curve.keys">
            <summary>
            The collection of CurveKeys that make up this Curve.
            </summary>
        </member>
        <member name="T:Atom.Math.CurveKey">
            <summary>
            Represents a point in a multi-point curve.
            </summary>
        </member>
        <member name="P:Atom.Math.CurveKey.Continuity">
            <summary>
            Gets or sets a value that describes whether the segment between 
            this point and the next point in the curve is discrete or continuous.
            </summary>
            <value>The CurveContinuity at this CurveKey.</value>
        </member>
        <member name="P:Atom.Math.CurveKey.Position">
            <summary>
            Gets or sets the position of this CurveKey in the curve.
            </summary>
            <value>The position of this CurveKey.</value>
        </member>
        <member name="P:Atom.Math.CurveKey.TangentIn">
            <summary>
            Gets or sets the value that descripes tangent when approaching this point to the next point in the curve.
            </summary>
            <value>The tangent when approaching.</value>
        </member>
        <member name="P:Atom.Math.CurveKey.TangentOut">
            <summary>
            Gets or sets the value that descripes tangent when leaving this point to the next point in the curve.
            </summary>
            <value>The tangent when leaving.</value>
        </member>
        <member name="P:Atom.Math.CurveKey.Value">
            <summary>
            Gets or sets the value at this CurveKey.
            </summary>
            <value>The value at this CurveKey.</value>
        </member>
        <member name="M:Atom.Math.CurveKey.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.CurveKey"/> class.
            </summary>
        </member>
        <member name="M:Atom.Math.CurveKey.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.CurveKey"/> class.
            </summary>
            <param name="position">The position in the curve.</param>
            <param name="value">The value of the control point.</param>
        </member>
        <member name="M:Atom.Math.CurveKey.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.CurveKey"/> class.
            </summary>
            <param name="position">The position in the curve.</param>
            <param name="value">The value of the control point.</param>
            <param name="tangentIn">
            The tangent approaching point from the previous point in the curve.
            </param>
            <param name="tangentOut">
            The tangent leaving point toward  the next point in the curve.
            </param>
        </member>
        <member name="M:Atom.Math.CurveKey.#ctor(System.Single,System.Single,System.Single,System.Single,Atom.Math.CurveContinuity)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.CurveKey"/> class.
            </summary>
            <param name="position">The position in the curve.</param>
            <param name="value">The value of the control point.</param>
            <param name="tangentIn">
            The tangent approaching point from the previous point in the curve.
            </param>
            <param name="tangentOut">
            The tangent leaving point toward  the next point in the curve.
            </param>
            <param name="continuity">
            Enum indicating whether the curve is discrete or continuous.
            </param>
        </member>
        <member name="M:Atom.Math.CurveKey.Equals(Atom.Math.CurveKey)">
            <summary>
            Determines whether the specified System.Object is equal to the CurveKey. 
            </summary>
            <param name="other">The CurveKey to compare with the current CurveKey.</param>
            <returns>true if the specified System.Object is equal to the current CurveKey; false otherwise. </returns>
        </member>
        <member name="M:Atom.Math.CurveKey.Equals(System.Object)">
            <summary>
            Determines whether the specified System.Object is equal to the CurveKey. 
            </summary>
            <param name="obj">The System.Object to compare with the current CurveKey.</param>
            <returns>true if the specified System.Object is equal to the current CurveKey; false otherwise. </returns>
        </member>
        <member name="M:Atom.Math.CurveKey.CompareTo(Atom.Math.CurveKey)">
            <summary>
            Compares this instance to another CurveKey and returns an indication of their relative values.
            </summary>
            <param name="other">CurveKey to compare to.</param>
            <returns>
            Zero if the positions are the same; 
            -1 if this CurveKey comes before other and
            1 if this CurveKey comes after other.
            </returns>
        </member>
        <member name="M:Atom.Math.CurveKey.Clone">
            <summary>
            Returns a clone of the <see cref="T:Atom.Math.CurveKey"/>.
            </summary>
            <returns>The cloned CurveKey.</returns>
        </member>
        <member name="M:Atom.Math.CurveKey.System#ICloneable#Clone">
            <summary>
            Returns a clone of the <see cref="T:Atom.Math.CurveKey"/>.
            </summary>
            <returns>The cloned CurveKey.</returns>
        </member>
        <member name="M:Atom.Math.CurveKey.GetHashCode">
            <summary>
            Overriden to return the hash-code of the CurveKey.
            </summary>
            <returns>The hash-code.</returns>
        </member>
        <member name="M:Atom.Math.CurveKey.op_Equality(Atom.Math.CurveKey,Atom.Math.CurveKey)">
            <summary>
            Returns whether the given CurveKeys are equal.
            </summary>
            <param name="left">The CurveKey instance on the left side of the equation.</param>
            <param name="right">The CurveKey instance on the right side of the equation.</param>
            <returns>
            Returns <see langword="true"/> if they are equal; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.CurveKey.op_Inequality(Atom.Math.CurveKey,Atom.Math.CurveKey)">
            <summary>
            Returns whether the given CurveKeys are inequal.
            </summary>
            <param name="left">The CurveKey instance on the left side of the equation.</param>
            <param name="right">The CurveKey instance on the right side of the equation.</param>
            <returns>
            Returns <see langword="true"/> if they are not equal; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.CurveKey.op_LessThan(Atom.Math.CurveKey,Atom.Math.CurveKey)">
            <summary>
            Returns whether the given <see cref="T:Atom.Math.CurveKey"/> on the <paramref name="left"/> side 
            is less than the <see cref="T:Atom.Math.CurveKey"/> on the <paramref name="right"/> side.
            </summary>
            <param name="left">The CurveKey instance on the left side of the equation.</param>
            <param name="right">The CurveKey instance on the right side of the equation.</param>
            <returns>The result of the comparisation.</returns>
        </member>
        <member name="M:Atom.Math.CurveKey.op_LessThanOrEqual(Atom.Math.CurveKey,Atom.Math.CurveKey)">
            <summary>
            Returns whether the given <see cref="T:Atom.Math.CurveKey"/> on the <paramref name="left"/> side 
            is less than or equal the <see cref="T:Atom.Math.CurveKey"/> on the <paramref name="right"/> side.
            </summary>
            <param name="left">The CurveKey instance on the left side of the equation.</param>
            <param name="right">The CurveKey instance on the right side of the equation.</param>
            <returns>The result of the comparisation.</returns>
        </member>
        <member name="M:Atom.Math.CurveKey.op_GreaterThan(Atom.Math.CurveKey,Atom.Math.CurveKey)">
            <summary>
            Returns whether the given <see cref="T:Atom.Math.CurveKey"/> on the <paramref name="left"/> side 
            is greater than the <see cref="T:Atom.Math.CurveKey"/> on the <paramref name="right"/> side.
            </summary>
            <param name="left">The CurveKey instance on the left side of the equation.</param>
            <param name="right">The CurveKey instance on the right side of the equation.</param>
            <returns>The result of the comparisation.</returns>
        </member>
        <member name="M:Atom.Math.CurveKey.op_GreaterThanOrEqual(Atom.Math.CurveKey,Atom.Math.CurveKey)">
            <summary>
            Returns whether the given <see cref="T:Atom.Math.CurveKey"/> on the <paramref name="left"/> side 
            is great than or equal the <see cref="T:Atom.Math.CurveKey"/> on the <paramref name="right"/> side.
            </summary>
            <param name="left">The CurveKey instance on the left side of the equation.</param>
            <param name="right">The CurveKey instance on the right side of the equation.</param>
            <returns>The result of the comparisation.</returns>
        </member>
        <member name="M:Atom.Math.CurveKey.Compare(Atom.Math.CurveKey,Atom.Math.CurveKey)">
            <summary>
            Helper method that compares the given instances,
            taking into account the .net design guidelines.
            </summary>
            <param name="left">The CurveKey instance on the left side of the equation.</param>
            <param name="right">The CurveKey instance on the right side of the equation.</param>
            <returns>
            0 : if the given instances are equal, or both null.
            1 : if right is greater than left, or left is null.
            -1 : if right is less than left, or right is null.
            </returns>
        </member>
        <member name="T:Atom.Math.CurveKeyCollection">
            <summary>
            Stores the CurveKeys making up a Curve.
            This is a sealed class.
            </summary>
        </member>
        <member name="P:Atom.Math.CurveKeyCollection.Count">
            <summary>
            Gets the number of elements contained in the CurveKeyCollection.
            </summary>
            <value>The number of elements in the CurveKeyCollection.</value>
        </member>
        <member name="P:Atom.Math.CurveKeyCollection.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            Set: If <paramref name="value"/> is null.
            </exception>
            <param name="index">The zero-based array index of the element.</param>
            <returns>The CurveKey at the specified index.</returns>
        </member>
        <member name="P:Atom.Math.CurveKeyCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the CurveKeyCollection is read-only.
            </summary>
            <value>
            Always returns <see langword="false"/>.
            </value>
        </member>
        <member name="P:Atom.Math.CurveKeyCollection.InvTimeRange">
            <summary>
            Gets the inversed time range.
            </summary>
            <value>The <see cref="P:Atom.Math.CurveKeyCollection.TimeRange"/> property; inversed.</value>
        </member>
        <member name="P:Atom.Math.CurveKeyCollection.IsCacheAvailable">
            <summary>
            Gets a value indicating whether the cache is currently available, 
            or needs to be updated.
            </summary>
            <value>
            Returns <see langword="true"/> if the cache is currently available;
            or otherwise <see langword="false"/> if the cache needs to be updated.
            </value>
        </member>
        <member name="P:Atom.Math.CurveKeyCollection.TimeRange">
            <summary>
            Gets the total time the CurvedKeys have when added together.
            </summary>
            <value>The total time the Curve takes up.</value>
        </member>
        <member name="M:Atom.Math.CurveKeyCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.CurveKeyCollection"/> class.
            </summary>
        </member>
        <member name="M:Atom.Math.CurveKeyCollection.#ctor(System.Collections.Generic.IEnumerable{Atom.Math.CurveKey})">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.CurveKeyCollection"/> class.
            </summary>
            <param name="keys">
            The keys that make-up the curve.
            </param>
        </member>
        <member name="M:Atom.Math.CurveKeyCollection.Add(Atom.Math.CurveKey)">
            <summary>
            Adds a CurveKey to the CurveKeyCollection.
            </summary>
            <param name="item">The CurveKey to add.</param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="item"/> is null.
            </exception>
        </member>
        <member name="M:Atom.Math.CurveKeyCollection.Insert(System.Int32,Atom.Math.CurveKey)">
            <summary>
            Inserts the given <see cref="T:Atom.Math.CurveKey"/> into the <see cref="T:Atom.Math.CurveKeyCollection"/> at the specified <paramref name="index"/>.
            </summary>
            <param name="index">The zero-based index at which the <paramref name="item"/> should be inserted.</param>
            <param name="item">The CurveKey to insert.</param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="item"/> is null.
            </exception>
        </member>
        <member name="M:Atom.Math.CurveKeyCollection.Clear">
            <summary>
            Removes all CurveKeys from the CurveKeyCollection.
            </summary>
        </member>
        <member name="M:Atom.Math.CurveKeyCollection.ComputeCacheValues">
            <summary>
            Computes internal cached values.
            </summary>
        </member>
        <member name="M:Atom.Math.CurveKeyCollection.Clone">
            <summary>
            Creates a clone of the CurveKeyCollection.
            </summary>
            <returns>The cloned CurveKeyCollection.</returns>
        </member>
        <member name="M:Atom.Math.CurveKeyCollection.System#ICloneable#Clone">
            <summary>
            Creates a clone of the CurveKeyCollection.
            </summary>
            <returns>The cloned CurveKeyCollection.</returns>
        </member>
        <member name="M:Atom.Math.CurveKeyCollection.Contains(Atom.Math.CurveKey)">
            <summary>
            Determines whether the CurveKeyCollection contains a specific CurveKey.
            </summary>
            <param name="item">
            The CurveKey to locate in the CurveKeyCollection.
            </param>
            <returns>
            Returns <see langword="true"/> if the CurveKey is found in the CurveKeyCollection; 
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.CurveKeyCollection.CopyTo(Atom.Math.CurveKey[],System.Int32)">
            <summary>
            Copies the CurveKeys of the CurveKeyCollection to an array, starting at the array index provided.
            </summary>
            <param name="array">
            The destination of the CurveKeys copied from CurveKeyCollection. The array must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in the array to start copying from.</param>
        </member>
        <member name="M:Atom.Math.CurveKeyCollection.IndexOf(Atom.Math.CurveKey)">
            <summary>
            Determines the index of a CurveKey in the CurveKeyCollection.
            </summary>
            <param name="item">The CurveKey to locate in the CurveKeyCollection.</param>
            <returns>
            The index of the CurveKey if found in the CurveKeyCollection;
            −1 otherwise.
            </returns>
        </member>
        <member name="M:Atom.Math.CurveKeyCollection.Remove(Atom.Math.CurveKey)">
            <summary>
            Removes the first occurrence of a specific CurveKey from the CurveKeyCollection.
            </summary>
            <param name="item">The CurveKey to remove from the CurveKeyCollection.</param>
            <returns>true if CurveKey is successfully removed; false otherwise.</returns>
        </member>
        <member name="M:Atom.Math.CurveKeyCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the CurveKey at the specified zero-based index.
            </summary>
            <param name="index">
            The zero-based index of the item to remove.
            </param>
        </member>
        <member name="M:Atom.Math.CurveKeyCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the CurveKeyCollection.
            </summary>
            <returns>An enumerator for the CurveKeyCollection.</returns>
        </member>
        <member name="M:Atom.Math.CurveKeyCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the CurveKeyCollection.
            </summary>
            <returns>An enumerator for the CurveKeyCollection.</returns>
        </member>
        <member name="M:Atom.Math.CurveKeyCollection.System#Collections#IList#RemoveAt(System.Int32)">
            <summary>
            Removes the CurveKey at the specified zero-based index.
            </summary>
            <param name="index">
            The zero-based index of the item to remove.
            </param>
        </member>
        <member name="F:Atom.Math.CurveKeyCollection.keys">
            <summary>
            The list that is internally used to store the keys.
            </summary>
        </member>
        <member name="M:Atom.Math.CurveKeyCollection.System#Collections#IList#Add(System.Object)">
            <summary>
            Adds a CurveKey to the CurveKeyCollection.
            </summary>
            <param name="value">The CurveKey to add.</param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="value"/> is null.
            </exception>
            <returns>The position at which the item was added.</returns>
        </member>
        <member name="M:Atom.Math.CurveKeyCollection.System#Collections#IList#Contains(System.Object)">
            <summary>
            Determines whether the CurveKeyCollection contains a specific CurveKey.
            </summary>
            <param name="value">
            The CurveKey to locate in the CurveKeyCollection.
            </param>
            <returns>
            Returns <see langword="true"/> if the CurveKey is found in the CurveKeyCollection; 
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.CurveKeyCollection.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            Determines the index of a CurveKey in the CurveKeyCollection.
            </summary>
            <param name="value">The CurveKey to locate in the CurveKeyCollection.</param>
            <returns>
            The index of the CurveKey if found in the CurveKeyCollection;
            −1 otherwise.
            </returns>
        </member>
        <member name="M:Atom.Math.CurveKeyCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            Inserts the given <see cref="T:Atom.Math.CurveKey"/> into the <see cref="T:Atom.Math.CurveKeyCollection"/> at the specified <paramref name="index"/>.
            </summary>
            <param name="index">The zero-based index at which the <paramref name="value"/> should be inserted.</param>
            <param name="value">The CurveKey to insert.</param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="value"/> is null.
            </exception>
        </member>
        <member name="P:Atom.Math.CurveKeyCollection.System#Collections#IList#IsFixedSize">
            <summary>
            Gets a value indicating whether the CurveKeyCollection is of fixed size.
            </summary>
            <value>
            Always returns <see langword="false"/>.
            </value>
        </member>
        <member name="M:Atom.Math.CurveKeyCollection.System#Collections#IList#Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specific CurveKey from the CurveKeyCollection.
            </summary>
            <param name="value">The CurveKey to remove from the CurveKeyCollection.</param>
        </member>
        <member name="P:Atom.Math.CurveKeyCollection.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            Set: If <paramref name="value"/> is null.
            </exception>
            <param name="index">The zero-based array index of the element.</param>
            <returns>The CurveKey at the specified index.</returns>
        </member>
        <member name="M:Atom.Math.CurveKeyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the CurveKeys of the CurveKeyCollection to an array, starting at the array index provided.
            </summary>
            <param name="array">
            The destination of the CurveKeys copied from CurveKeyCollection. The array must have zero-based indexing.
            </param>
            <param name="index">The zero-based index in the array to start copying from.</param>
        </member>
        <member name="P:Atom.Math.CurveKeyCollection.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether the CurveKeyCollection is synchronized.
            </summary>
            <value>
            Always returns <see langword="false"/>.
            </value>
        </member>
        <member name="P:Atom.Math.CurveKeyCollection.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets the snyc root object.
            </summary>
            <value>
            Always returns <see langword="null"/>.
            </value>
        </member>
        <member name="T:Atom.Math.DelaunyTriangulation">
            <summary>
            Performs the Delauney triangulation on a set of vertices.
            Only returns expected results with non-complex, convex polygons.
            </summary>
            <remarks>
            Based on Paul Bourke's "An Algorithm for Interpolating Irregularly-Spaced Data
            with Applications in Terrain Modelling" (http://astronomy.swin.edu.au/~pbourke/modelling/triangulate/).
            </remarks>
        </member>
        <member name="M:Atom.Math.DelaunyTriangulation.Triangulate(System.Collections.Generic.IList{Atom.Math.Vector2})">
            <summary>
            Performs Delauney triangulation on a set of points.
            </summary>
            <remarks>
            <para>
            The triangulation doesn't support multiple points with the same planar location.
            Vertex-lists with duplicate points may result in strange triangulation with intersecting edges.
            To avoid adding multiple points to your vertex-list you can use the following anonymous predicate method:
            <code>
            if(!vertices.Exists(delegate(Vector2 p) { return pNew == p; }))
                vertices.Add(pNew);
            </code>
            </para>
            <para>The triangulation algorithm may be described in pseudo-code as follows:
            <code>
            subroutine Triangulate
            input : vertex list
            output : triangle list
               initialize the triangle list
               determine the supertriangle
               add supertriangle vertices to the end of the vertex list
               add the supertriangle to the triangle list
               for each sample point in the vertex list
                  initialize the edge buffer
                  for each triangle currently in the triangle list
                     calculate the triangle circumcircle center and radius
                     if the point lies in the triangle circumcircle then
                        add the three triangle edges to the edge buffer
                        remove the triangle from the triangle list
                     endif
                  endfor
                  delete all doubly specified edges from the edge buffer
                     this leaves the edges of the enclosing polygon only
                  add to the triangle list all triangles formed between the point
                     and the edges of the enclosing polygon
               endfor
               remove any triangles from the triangle list that use the supertriangle vertices
               remove the supertriangle vertices from the vertex list
            end
            </code>
            </para>
            </remarks>
            <param name="vertices">The list of vertices to triangulate.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="vertices"/> is null.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="vertices"/> contains less than 3 vertices.</exception>
            <returns>Triangles referencing vertex indices arranged in clockwise order.</returns>
        </member>
        <member name="T:Atom.Math.Design.BoxConverter">
            <summary>
            Provides a unified way of converting <see cref="T:Atom.Math.Box"/> values to other types, 
            as well as for accessing standard values and subproperties.
            This class can't be inherited.
            </summary>
        </member>
        <member name="M:Atom.Math.Design.BoxConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.Design.BoxConverter"/> class. 
            </summary>
        </member>
        <member name="M:Atom.Math.Design.BoxConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, 
            using the specified context and culture information.
            </summary>
            <param name="context">The format context.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <param name="value">The object to convert.</param>
            <param name="destinationType">The destination type.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Atom.Math.Design.BoxConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            Creates an instance of the type that this <see cref="T:Atom.Math.Design.BoxConverter"/> is associated with, 
            using the specified context, given a set of property values for the object.
            </summary>
            <param name="context">The format context.</param>
            <param name="propertyValues">The new property values.</param>
            <returns>
            An object representing propertyValues, or null if the object cannot be created.
            </returns>
        </member>
        <member name="T:Atom.Math.Design.CircleConverter">
            <summary>
            Provides a unified way of converting <see cref="T:Atom.Math.Circle"/> values to other types, 
            as well as for accessing standard values and subproperties.
            This class can't be inherited.
            </summary>
        </member>
        <member name="M:Atom.Math.Design.CircleConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.Design.CircleConverter"/> class.
            </summary>
        </member>
        <member name="M:Atom.Math.Design.CircleConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information. 
            </summary>
            <param name="context">The format context.</param>
            <param name="culture">The current culture.</param>
            <param name="value">The object to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Atom.Math.Design.CircleConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">The format context.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <param name="value">The object to convert.</param>
            <param name="destinationType">The destination type.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Atom.Math.Design.CircleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            Creates an instance of the type that this CircleConverter is associated with, 
            using the specified context, given a set of property values for the object. 
            </summary>
            <param name="context">The format context.</param>
            <param name="propertyValues">The new property values.</param>
            <returns>An object representing propertyValues, or null if the object cannot be created.</returns>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="propertyValues"/> is null.
            </exception>
        </member>
        <member name="T:Atom.Math.Design.ComplexConverter">
            <summary>
            Provides a unified way of converting <see cref="T:Atom.Math.Complex"/> values to other types, 
            as well as for accessing standard values and subproperties.
            This class can't be inherited.
            </summary>
        </member>
        <member name="M:Atom.Math.Design.ComplexConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.Design.ComplexConverter"/> class.
            </summary>
        </member>
        <member name="M:Atom.Math.Design.ComplexConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information. 
            </summary>
            <param name="context">The format context.</param>
            <param name="culture">The current culture.</param>
            <param name="value">The object to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Atom.Math.Design.ComplexConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">The format context.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <param name="value">The object to convert.</param>
            <param name="destinationType">The destination type.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Atom.Math.Design.ComplexConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            Creates an instance of the type that this ComplexConverter is associated with, 
            using the specified context, given a set of property values for the object. 
            </summary>
            <param name="context">The format context.</param>
            <param name="propertyValues">The new property values.</param>
            <returns>An object representing propertyValues, or null if the object cannot be created.</returns>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="propertyValues"/> is null.
            </exception>
        </member>
        <member name="T:Atom.Math.Design.FloatRangeConverter">
            <summary>
            Provides a unified way of converting <see cref="T:Atom.Math.FloatRange"/> values to other types, 
            as well as for accessing standard values and subproperties.
            This class can't be inherited.
            </summary>
        </member>
        <member name="M:Atom.Math.Design.FloatRangeConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.Design.FloatRangeConverter"/> class.
            </summary>
        </member>
        <member name="M:Atom.Math.Design.FloatRangeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information. 
            </summary>
            <param name="context">The format context.</param>
            <param name="culture">The current culture.</param>
            <param name="value">The object to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Atom.Math.Design.FloatRangeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">The format context.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <param name="value">The object to convert.</param>
            <param name="destinationType">The destination type.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Atom.Math.Design.FloatRangeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">The format context.</param>
            <param name="sourceType">The type you want to convert from.</param>
            <returns>true if this converter can perform the conversion; false otherwise.</returns>
        </member>
        <member name="M:Atom.Math.Design.FloatRangeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of one type to the type of this converter. 
            </summary>
            <param name="context">The format context.</param>
            <param name="destinationType">The destination type.</param>
            <returns>true if this converter can perform the conversion; false otherwise.</returns>
        </member>
        <member name="M:Atom.Math.Design.FloatRangeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            Creates an instance of the type that this FloatRangeConverter is associated with, 
            using the specified context, given a set of property values for the object. 
            </summary>
            <param name="context">The format context.</param>
            <param name="propertyValues">The new property values.</param>
            <returns>An object representing propertyValues, or null if the object cannot be created.</returns>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="propertyValues"/> is null.
            </exception>
        </member>
        <member name="T:Atom.Math.Design.IntegerRangeConverter">
            <summary>
            Provides a unified way of converting <see cref="T:Atom.Math.IntegerRange"/> values to other types, 
            as well as for accessing standard values and subproperties.
            This class can't be inherited.
            </summary>
        </member>
        <member name="M:Atom.Math.Design.IntegerRangeConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.Design.IntegerRangeConverter"/> class.
            </summary>
        </member>
        <member name="M:Atom.Math.Design.IntegerRangeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information. 
            </summary>
            <param name="context">The format context.</param>
            <param name="culture">The current culture.</param>
            <param name="value">The object to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Atom.Math.Design.IntegerRangeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">The format context.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <param name="value">The object to convert.</param>
            <param name="destinationType">The destination type.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Atom.Math.Design.IntegerRangeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">The format context.</param>
            <param name="sourceType">The type you want to convert from.</param>
            <returns>true if this converter can perform the conversion; false otherwise.</returns>
        </member>
        <member name="M:Atom.Math.Design.IntegerRangeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of one type to the type of this converter. 
            </summary>
            <param name="context">The format context.</param>
            <param name="destinationType">The destination type.</param>
            <returns>true if this converter can perform the conversion; false otherwise.</returns>
        </member>
        <member name="M:Atom.Math.Design.IntegerRangeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            Creates an instance of the type that this IntegerRangeConverter is associated with, 
            using the specified context, given a set of property values for the object. 
            </summary>
            <param name="context">The format context.</param>
            <param name="propertyValues">The new property values.</param>
            <returns>An object representing propertyValues, or null if the object cannot be created.</returns>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="propertyValues"/> is null.
            </exception>
        </member>
        <member name="T:Atom.Math.Design.MathTypeConverter">
            <summary>
            Provides a unified way of converting math type values to other types, 
            as well as for accessing standard values and subproperties.
            </summary>
        </member>
        <member name="P:Atom.Math.Design.MathTypeConverter.PropertyDescriptions">
            <summary>
            Gets or sets a collection of System.ComponentModel.PropertyDescriptor objects. 
            </summary>
            <value>A collection of System.ComponentModel.PropertyDescriptor objects.</value>
        </member>
        <member name="P:Atom.Math.Design.MathTypeConverter.SupportStringConvert">
            <summary>
            Gets or sets a value indicating whether string conversion is supported by this MathTypeConverter.
            </summary>
            <value>
            If <see langword="true"/> this MathTypeConverter supports converting to and from string values.
            </value>
        </member>
        <member name="M:Atom.Math.Design.MathTypeConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.Design.MathTypeConverter"/> class.
            </summary>
        </member>
        <member name="M:Atom.Math.Design.MathTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">The format context.</param>
            <param name="sourceType">The type you want to convert from.</param>
            <returns>true if this converter can perform the conversion; false otherwise.</returns>
        </member>
        <member name="M:Atom.Math.Design.MathTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of one type to the type of this converter. 
            </summary>
            <param name="context">The format context.</param>
            <param name="destinationType">The destination type.</param>
            <returns>true if this converter can perform the conversion; false otherwise.</returns>
        </member>
        <member name="M:Atom.Math.Design.MathTypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether changing a value on this object 
            requires a call to CreateInstance to create a new value,
            using the specified context. 
            </summary>
            <param name="context">The format context.</param>
            <returns>
            Returns true if changing a property on this object requires a call to CreateInstance to create a new value; 
            otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Math.Design.MathTypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Returns a collection of properties for the type of array specified by the value parameter.
            </summary>
            <param name="context">The format context.</param>
            <param name="value">The type of array for which to get properties.</param>
            <param name="attributes">An array to use as a filter.</param>
            <returns>The properties that are exposed for this data type, or null if there are no properties.</returns>
        </member>
        <member name="M:Atom.Math.Design.MathTypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether this object supports properties, using the specified context.
            </summary>
            <param name="context">The format context.</param>
            <returns>true if GetProperties should be called to find the properties of this object; false otherwise. </returns>
        </member>
        <member name="T:Atom.Math.Design.Matrix4Converter">
            <summary>
            Provides a unified way of converting <see cref="T:Atom.Math.Matrix4"/> values to other types, 
            as well as for accessing standard values and subproperties.
            This class can't be inherited.
            </summary>
        </member>
        <member name="M:Atom.Math.Design.Matrix4Converter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.Design.Matrix4Converter"/> class.
            </summary>
        </member>
        <member name="M:Atom.Math.Design.Matrix4Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type,
            using the specified context and culture information.
            </summary>
            <param name="context">The format context.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <param name="value">The object to convert.</param>
            <param name="destinationType">The destination type.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Atom.Math.Design.Matrix4Converter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            Creates an instance of the type that this <see cref="T:Atom.Math.Design.Matrix4Converter"/> is associated with,
            using the specified context, given a set of property values for the object.
            </summary>
            <param name="context">The format context.</param>
            <param name="propertyValues">The new property values.</param>
            <returns>
            An object representing propertyValues, or null if the object cannot be created.
            </returns>
        </member>
        <member name="T:Atom.Math.Design.Plane3Converter">
            <summary>
            Provides a unified way of converting <see cref="T:Atom.Math.Design.Plane3Converter"/> values to other types, 
            as well as for accessing standard values and subproperties.
            This class can't be inherited.
            </summary>
        </member>
        <member name="M:Atom.Math.Design.Plane3Converter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.Design.Plane3Converter"/> class.
            </summary>
        </member>
        <member name="M:Atom.Math.Design.Plane3Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, 
            using the specified context and culture information.
            </summary>
            <param name="context">The format context.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <param name="value">The object to convert.</param>
            <param name="destinationType">The destination type.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Atom.Math.Design.Plane3Converter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            Creates an instance of the type that this <see cref="T:Atom.Math.Design.Plane3Converter"/> is associated with, 
            using the specified context, given a set of property values for the object.
            </summary>
            <param name="context">The format context.</param>
            <param name="propertyValues">The new property values.</param>
            <returns>An object representing propertyValues, or null if the object cannot be created.</returns>
        </member>
        <member name="T:Atom.Math.Design.Point2Converter">
            <summary>
            Provides a unified way of converting <see cref="T:Atom.Math.Point2"/> values to other types, 
            as well as for accessing standard values and subproperties.
            This class can't be inherited.
            </summary>
        </member>
        <member name="M:Atom.Math.Design.Point2Converter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.Design.Point2Converter"/> class.
            </summary>
        </member>
        <member name="M:Atom.Math.Design.Point2Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information. 
            </summary>
            <param name="context">The format context.</param>
            <param name="culture">The current culture.</param>
            <param name="value">The object to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Atom.Math.Design.Point2Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">The format context.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <param name="value">The object to convert.</param>
            <param name="destinationType">The destination type.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Atom.Math.Design.Point2Converter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">The format context.</param>
            <param name="sourceType">The type you want to convert from.</param>
            <returns>true if this converter can perform the conversion; false otherwise.</returns>
        </member>
        <member name="M:Atom.Math.Design.Point2Converter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of one type to the type of this converter. 
            </summary>
            <param name="context">The format context.</param>
            <param name="destinationType">The destination type.</param>
            <returns>true if this converter can perform the conversion; false otherwise.</returns>
        </member>
        <member name="M:Atom.Math.Design.Point2Converter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            Creates an instance of the type that this Point2Converter is associated with, 
            using the specified context, given a set of property values for the object. 
            </summary>
            <param name="context">The format context.</param>
            <param name="propertyValues">The new property values.</param>
            <returns>An object representing propertyValues, or null if the object cannot be created.</returns>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="propertyValues"/> is null.
            </exception>
        </member>
        <member name="T:Atom.Math.Design.Point3Converter">
            <summary>
            Provides a unified way of converting <see cref="T:Atom.Math.Point3"/> values to other types, 
            as well as for accessing standard values and subproperties.
            This class can't be inherited.
            </summary>
        </member>
        <member name="M:Atom.Math.Design.Point3Converter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.Design.Point3Converter"/> class.
            </summary>
        </member>
        <member name="M:Atom.Math.Design.Point3Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information. 
            </summary>
            <param name="context">The format context.</param>
            <param name="culture">The current culture.</param>
            <param name="value">The object to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Atom.Math.Design.Point3Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">The format context.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <param name="value">The object to convert.</param>
            <param name="destinationType">The destination type.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Atom.Math.Design.Point3Converter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">The format context.</param>
            <param name="sourceType">The type you want to convert from.</param>
            <returns>true if this converter can perform the conversion; false otherwise.</returns>
        </member>
        <member name="M:Atom.Math.Design.Point3Converter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of one type to the type of this converter. 
            </summary>
            <param name="context">The format context.</param>
            <param name="destinationType">The destination type.</param>
            <returns>true if this converter can perform the conversion; false otherwise.</returns>
        </member>
        <member name="M:Atom.Math.Design.Point3Converter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            Creates an instance of the type that this Point3Converter is associated with, 
            using the specified context, given a set of property values for the object. 
            </summary>
            <param name="context">The format context.</param>
            <param name="propertyValues">The new property values.</param>
            <returns>An object representing propertyValues, or null if the object cannot be created.</returns>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="propertyValues"/> is null.
            </exception>
        </member>
        <member name="T:Atom.Math.Design.Point4Converter">
            <summary>
            Provides a unified way of converting <see cref="T:Atom.Math.Point4"/> values to other types, 
            as well as for accessing standard values and subproperties.
            This class can't be inherited.
            </summary>
        </member>
        <member name="M:Atom.Math.Design.Point4Converter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.Design.Point4Converter"/> class.
            </summary>
        </member>
        <member name="M:Atom.Math.Design.Point4Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information. 
            </summary>
            <param name="context">The format context.</param>
            <param name="culture">The current culture.</param>
            <param name="value">The object to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Atom.Math.Design.Point4Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">The format context.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <param name="value">The object to convert.</param>
            <param name="destinationType">The destination type.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Atom.Math.Design.Point4Converter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">The format context.</param>
            <param name="sourceType">The type you want to convert from.</param>
            <returns>true if this converter can perform the conversion; false otherwise.</returns>
        </member>
        <member name="M:Atom.Math.Design.Point4Converter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of one type to the type of this converter. 
            </summary>
            <param name="context">The format context.</param>
            <param name="destinationType">The destination type.</param>
            <returns>true if this converter can perform the conversion; false otherwise.</returns>
        </member>
        <member name="M:Atom.Math.Design.Point4Converter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            Creates an instance of the type that this Point4Converter is associated with, 
            using the specified context, given a set of property values for the object. 
            </summary>
            <param name="context">The format context.</param>
            <param name="propertyValues">The new property values.</param>
            <returns>An object representing propertyValues, or null if the object cannot be created.</returns>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="propertyValues"/> is null.
            </exception>
        </member>
        <member name="T:Atom.Math.Design.QuaternionConverter">
            <summary>
            Provides a unified way of converting <see cref="T:Atom.Math.Quaternion"/> values to other types, 
            as well as for accessing standard values and subproperties.
            This class can't be inherited.
            </summary>
        </member>
        <member name="M:Atom.Math.Design.QuaternionConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.Design.QuaternionConverter"/> class.
            </summary>
        </member>
        <member name="M:Atom.Math.Design.QuaternionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information. 
            </summary>
            <param name="context">The format context.</param>
            <param name="culture">The current culture.</param>
            <param name="value">The object to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Atom.Math.Design.QuaternionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">The format context.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <param name="value">The object to convert.</param>
            <param name="destinationType">The destination type.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Atom.Math.Design.QuaternionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">The format context.</param>
            <param name="sourceType">The type you want to convert from.</param>
            <returns>true if this converter can perform the conversion; false otherwise.</returns>
        </member>
        <member name="M:Atom.Math.Design.QuaternionConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of one type to the type of this converter. 
            </summary>
            <param name="context">The format context.</param>
            <param name="destinationType">The destination type.</param>
            <returns>true if this converter can perform the conversion; false otherwise.</returns>
        </member>
        <member name="M:Atom.Math.Design.QuaternionConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            Creates an instance of the type that this QuaternionConverter is associated with, 
            using the specified context, given a set of property values for the object. 
            </summary>
            <param name="context">The format context.</param>
            <param name="propertyValues">The new property values.</param>
            <returns>An object representing propertyValues, or null if the object cannot be created.</returns>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="propertyValues"/> is null.
            </exception>
        </member>
        <member name="T:Atom.Math.Design.Ray2Converter">
            <summary>
            Provides a unified way of converting <see cref="T:Atom.Math.Ray2"/> values to other types, 
            as well as for accessing standard values and subproperties.
            </summary>
        </member>
        <member name="M:Atom.Math.Design.Ray2Converter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.Design.Ray2Converter"/> class.
            </summary>
        </member>
        <member name="M:Atom.Math.Design.Ray2Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type,
            using the specified context and culture information.
            </summary>
            <param name="context">The format context.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <param name="value">The object to convert.</param>
            <param name="destinationType">The destination type.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Atom.Math.Design.Ray2Converter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            Creates an instance of the type that this <see cref="T:Atom.Math.Design.Ray2Converter"/> is associated with,
            using the specified context, given a set of property values for the object.
            </summary>
            <param name="context">The format context.</param>
            <param name="propertyValues">The new property values.</param>
            <returns>
            An object representing propertyValues, or null if the object cannot be created.
            </returns>
        </member>
        <member name="T:Atom.Math.Design.Ray3Converter">
            <summary>
            Provides a unified way of converting <see cref="T:Atom.Math.Ray3"/> values to other types, 
            as well as for accessing standard values and subproperties.
            This class can't be inherited.
            </summary>
        </member>
        <member name="M:Atom.Math.Design.Ray3Converter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.Design.Ray3Converter"/> class.
            </summary>
        </member>
        <member name="M:Atom.Math.Design.Ray3Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type,
            using the specified context and culture information.
            </summary>
            <param name="context">The format context.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <param name="value">The object to convert.</param>
            <param name="destinationType">The destination type.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Atom.Math.Design.Ray3Converter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            Creates an instance of the type that this <see cref="T:Atom.Math.Design.Ray3Converter"/> is associated with,
            using the specified context, given a set of property values for the object.
            </summary>
            <param name="context">The format context.</param>
            <param name="propertyValues">The new property values.</param>
            <returns>
            An object representing propertyValues, or null if the object cannot be created.
            </returns>
        </member>
        <member name="T:Atom.Math.Design.RectangleConverter">
            <summary>
            Provides a unified way of converting <see cref="T:Atom.Math.Rectangle"/> values to other types,
            as well as for accessing standard values and subproperties.
            This class can't be inherited.
            </summary>
        </member>
        <member name="M:Atom.Math.Design.RectangleConverter.#ctor">
            <summary>
            Initializes a new instance of the RectangleConverter class.
            </summary>
        </member>
        <member name="M:Atom.Math.Design.RectangleConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, 
            using the specified context and culture information.
            </summary>
            <param name="context">The format context.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <param name="value">The object to convert.</param>
            <param name="destinationType">The destination type.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Atom.Math.Design.RectangleConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of one type to the type of this converter. 
            </summary>
            <param name="context">The format context.</param>
            <param name="destinationType">The destination type.</param>
            <returns>true if this converter can perform the conversion; false otherwise.</returns>
        </member>
        <member name="M:Atom.Math.Design.RectangleConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information. 
            </summary>
            <param name="context">The format context.</param>
            <param name="culture">The current culture.</param>
            <param name="value">The object to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Atom.Math.Design.RectangleConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type 
            to the type of this converter, using the specified context.
            </summary>
            <param name="context">The format context.</param>
            <param name="sourceType">The type you want to convert from.</param>
            <returns>true if this converter can perform the conversion; false otherwise.</returns>
        </member>
        <member name="M:Atom.Math.Design.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            Creates an instance of the type that this RectangleConverter is associated with, 
            using the specified context, given a set of property values for the object. 
            </summary>
            <param name="context">The format context.</param>
            <param name="propertyValues">The new property values.</param>
            <returns>
            An object representing propertyValues, or null if the object cannot be created.
            </returns>
        </member>
        <member name="T:Atom.Math.Design.RectangleFConverter">
            <summary>
            Provides a unified way of converting <see cref="T:Atom.Math.RectangleF"/> values to other types,
            as well as for accessing standard values and subproperties.
            This class can't be inherited.
            </summary>
        </member>
        <member name="M:Atom.Math.Design.RectangleFConverter.#ctor">
            <summary>
            Initializes a new instance of the RectangleFConverter class.
            </summary>
        </member>
        <member name="M:Atom.Math.Design.RectangleFConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, 
            using the specified context and culture information.
            </summary>
            <param name="context">The format context.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <param name="value">The object to convert.</param>
            <param name="destinationType">The destination type.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Atom.Math.Design.RectangleFConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of one type to the type of this converter. 
            </summary>
            <param name="context">The format context.</param>
            <param name="destinationType">The destination type.</param>
            <returns>true if this converter can perform the conversion; false otherwise.</returns>
        </member>
        <member name="M:Atom.Math.Design.RectangleFConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information. 
            </summary>
            <param name="context">The format context.</param>
            <param name="culture">The current culture.</param>
            <param name="value">The object to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Atom.Math.Design.RectangleFConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type 
            to the type of this converter, using the specified context.
            </summary>
            <param name="context">The format context.</param>
            <param name="sourceType">The type you want to convert from.</param>
            <returns>true if this converter can perform the conversion; false otherwise.</returns>
        </member>
        <member name="M:Atom.Math.Design.RectangleFConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            Creates an instance of the type that this RectangleFConverter is associated with, 
            using the specified context, given a set of property values for the object. 
            </summary>
            <param name="context">The format context.</param>
            <param name="propertyValues">The new property values.</param>
            <returns>
            An object representing propertyValues, or null if the object cannot be created.
            </returns>
        </member>
        <member name="T:Atom.Math.Design.SphereConverter">
            <summary>
            Provides a unified way of converting <see cref="T:Atom.Math.Sphere"/> values to other types,
            as well as for accessing standard values and subproperties.
            </summary>
        </member>
        <member name="M:Atom.Math.Design.SphereConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.Design.SphereConverter"/> class.
            </summary>
        </member>
        <member name="M:Atom.Math.Design.SphereConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, 
            using the specified context and culture information.
            </summary>
            <param name="context">The format context.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <param name="value">The object to convert.</param>
            <param name="destinationType">The destination type.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Atom.Math.Design.SphereConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            Creates an instance of the type that this <see cref="T:Atom.Math.Design.SphereConverter"/> is associated with,
            using the specified context, given a set of property values for the object.
            </summary>
            <param name="context">The format context.</param>
            <param name="propertyValues">The new property values.</param>
            <returns>
            An object representing propertyValues, or null if the object cannot be created.
            </returns>
        </member>
        <member name="T:Atom.Math.Design.Vector2Converter">
            <summary>
            Provides a unified way of converting <see cref="T:Atom.Math.Vector2"/> values to other types, 
            as well as for accessing standard values and subproperties.
            This class can't be inherited.
            </summary>
        </member>
        <member name="M:Atom.Math.Design.Vector2Converter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.Design.Vector2Converter"/> class.
            </summary>
        </member>
        <member name="M:Atom.Math.Design.Vector2Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information. 
            </summary>
            <param name="context">The format context.</param>
            <param name="culture">The current culture.</param>
            <param name="value">The object to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Atom.Math.Design.Vector2Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">The format context.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <param name="value">The object to convert.</param>
            <param name="destinationType">The destination type.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Atom.Math.Design.Vector2Converter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">The format context.</param>
            <param name="sourceType">The type you want to convert from.</param>
            <returns>true if this converter can perform the conversion; false otherwise.</returns>
        </member>
        <member name="M:Atom.Math.Design.Vector2Converter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of one type to the type of this converter. 
            </summary>
            <param name="context">The format context.</param>
            <param name="destinationType">The destination type.</param>
            <returns>true if this converter can perform the conversion; false otherwise.</returns>
        </member>
        <member name="M:Atom.Math.Design.Vector2Converter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            Creates an instance of the type that this Vector2Converter is associated with, 
            using the specified context, given a set of property values for the object. 
            </summary>
            <param name="context">The format context.</param>
            <param name="propertyValues">The new property values.</param>
            <returns>An object representing propertyValues, or null if the object cannot be created.</returns>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="propertyValues"/> is null.
            </exception>
        </member>
        <member name="T:Atom.Math.Design.Vector3Converter">
            <summary>
            Provides a unified way of converting <see cref="T:Atom.Math.Vector3"/> values to other types, 
            as well as for accessing standard values and subproperties.
            This class can't be inherited.
            </summary>
        </member>
        <member name="M:Atom.Math.Design.Vector3Converter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.Design.Vector3Converter"/> class.
            </summary>
        </member>
        <member name="M:Atom.Math.Design.Vector3Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information. 
            </summary>
            <param name="context">The format context.</param>
            <param name="culture">The current culture.</param>
            <param name="value">The object to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Atom.Math.Design.Vector3Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">The format context.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <param name="value">The object to convert.</param>
            <param name="destinationType">The destination type.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Atom.Math.Design.Vector3Converter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">The format context.</param>
            <param name="sourceType">The type you want to convert from.</param>
            <returns>true if this converter can perform the conversion; false otherwise.</returns>
        </member>
        <member name="M:Atom.Math.Design.Vector3Converter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of one type to the type of this converter. 
            </summary>
            <param name="context">The format context.</param>
            <param name="destinationType">The destination type.</param>
            <returns>true if this converter can perform the conversion; false otherwise.</returns>
        </member>
        <member name="M:Atom.Math.Design.Vector3Converter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            Creates an instance of the type that this Vector3Converter is associated with, 
            using the specified context, given a set of property values for the object. 
            </summary>
            <param name="context">The format context.</param>
            <param name="propertyValues">The new property values.</param>
            <returns>An object representing propertyValues, or null if the object cannot be created.</returns>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="propertyValues"/> is null.
            </exception>
        </member>
        <member name="T:Atom.Math.Design.Vector4Converter">
            <summary>
            Provides a unified way of converting <see cref="T:Atom.Math.Vector4"/> values to other types, 
            as well as for accessing standard values and subproperties.
            This class can't be inherited.
            </summary>
        </member>
        <member name="M:Atom.Math.Design.Vector4Converter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.Design.Vector4Converter"/> class.
            </summary>
        </member>
        <member name="M:Atom.Math.Design.Vector4Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information. 
            </summary>
            <param name="context">The format context.</param>
            <param name="culture">The current culture.</param>
            <param name="value">The object to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Atom.Math.Design.Vector4Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">The format context.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <param name="value">The object to convert.</param>
            <param name="destinationType">The destination type.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Atom.Math.Design.Vector4Converter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">The format context.</param>
            <param name="sourceType">The type you want to convert from.</param>
            <returns>true if this converter can perform the conversion; false otherwise.</returns>
        </member>
        <member name="M:Atom.Math.Design.Vector4Converter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of one type to the type of this converter. 
            </summary>
            <param name="context">The format context.</param>
            <param name="destinationType">The destination type.</param>
            <returns>true if this converter can perform the conversion; false otherwise.</returns>
        </member>
        <member name="M:Atom.Math.Design.Vector4Converter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            Creates an instance of the type that this Vector4Converter is associated with, 
            using the specified context, given a set of property values for the object. 
            </summary>
            <param name="context">The format context.</param>
            <param name="propertyValues">The new property values.</param>
            <returns>An object representing propertyValues, or null if the object cannot be created.</returns>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="propertyValues"/> is null.
            </exception>
        </member>
        <member name="T:Atom.Math.TurnDirection">
            <summary>
            Enumerates the different turn direction.
            </summary>
        </member>
        <member name="F:Atom.Math.TurnDirection.None">
            <summary>
            No specified direction.
            </summary>
        </member>
        <member name="F:Atom.Math.TurnDirection.Clockwise">
            <summary>
            A clockwise turn.
            </summary>
        </member>
        <member name="F:Atom.Math.TurnDirection.AntiClockwise">
            <summary>
            A anti(counter) clockwise turn.
            </summary>
        </member>
        <member name="T:Atom.Math.ContainmentType">
            <summary>
            Indicates the extent to which bounding volumes intersect or contain one another.
            </summary>
        </member>
        <member name="F:Atom.Math.ContainmentType.Disjoint">
            <summary>
            Indicates there is no overlap between the bounding volumes.
            </summary>
        </member>
        <member name="F:Atom.Math.ContainmentType.Contains">
            <summary>
            Indicates that one bounding volume completely contains the other.
            </summary>
        </member>
        <member name="F:Atom.Math.ContainmentType.Intersects">
            <summary>
            Indicates that the bounding volumes partially overlap.
            </summary>
        </member>
        <member name="T:Atom.Math.Direction4">
            <summary>
            Enumerates the four main direction on the 2d plane.
            </summary>
        </member>
        <member name="F:Atom.Math.Direction4.None">
            <summary> No specified direction. </summary>
        </member>
        <member name="F:Atom.Math.Direction4.Left">
            <summary> Left (west). </summary>
        </member>
        <member name="F:Atom.Math.Direction4.Right">
            <summary> Right (east). </summary>
        </member>
        <member name="F:Atom.Math.Direction4.Up">
            <summary> Up (north). </summary>
        </member>
        <member name="F:Atom.Math.Direction4.Down">
            <summary> Down (south). </summary>
        </member>
        <member name="T:Atom.Math.Directions">
            <summary>
            Enumerates the four main direction on the 2d plane.
            This enumeration can be combined.
            </summary>
        </member>
        <member name="F:Atom.Math.Directions.None">
            <summary> No specified direction. </summary>
        </member>
        <member name="F:Atom.Math.Directions.Left">
            <summary> Left (west). </summary>
        </member>
        <member name="F:Atom.Math.Directions.Right">
            <summary> Right (east). </summary>
        </member>
        <member name="F:Atom.Math.Directions.Up">
            <summary> Up (north). </summary>
        </member>
        <member name="F:Atom.Math.Directions.Down">
            <summary> Down (south). </summary>
        </member>
        <member name="T:Atom.Math.HorizontalDirection">
            <summary>
            Enumerates the horizontal directions on the 2d plane.
            </summary>
        </member>
        <member name="F:Atom.Math.HorizontalDirection.None">
            <summary> No specified direction. </summary>
        </member>
        <member name="F:Atom.Math.HorizontalDirection.Left">
            <summary> Left (west). </summary>
        </member>
        <member name="F:Atom.Math.HorizontalDirection.Right">
            <summary> Right (east). </summary>
        </member>
        <member name="T:Atom.Math.VerticalDirection">
            <summary>
            Enumerates the vertical directions on the 2d plane.
            </summary>
        </member>
        <member name="F:Atom.Math.VerticalDirection.None">
            <summary> No specified direction. </summary>
        </member>
        <member name="F:Atom.Math.VerticalDirection.Up">
            <summary> Up (north). </summary>
        </member>
        <member name="F:Atom.Math.VerticalDirection.Down">
            <summary> Down (south). </summary>
        </member>
        <member name="T:Atom.Math.Direction8">
            <summary>
            Enumerates the eight direction on the 2d plane.
            </summary>
        </member>
        <member name="F:Atom.Math.Direction8.None">
            <summary> No specified direction. </summary>
        </member>
        <member name="F:Atom.Math.Direction8.Left">
            <summary> Left (west). </summary>
        </member>
        <member name="F:Atom.Math.Direction8.LeftUp">
            <summary> Left and Up (west north). </summary>
        </member>
        <member name="F:Atom.Math.Direction8.LeftDown">
            <summary> Left and Down (west south). </summary>
        </member>
        <member name="F:Atom.Math.Direction8.Right">
            <summary> Right (east). </summary>
        </member>
        <member name="F:Atom.Math.Direction8.RightUp">
            <summary> Right and Up (east north). </summary>
        </member>
        <member name="F:Atom.Math.Direction8.RightDown">
            <summary> Right and Down (east south). </summary>
        </member>
        <member name="F:Atom.Math.Direction8.Up">
            <summary> Up (north). </summary>
        </member>
        <member name="F:Atom.Math.Direction8.Down">
            <summary> Down (south). </summary>
        </member>
        <member name="T:Atom.Math.QuadCorner">
            <summary>
            Enumerates the four corners of a quad or rectangle.
            </summary>
        </member>
        <member name="F:Atom.Math.QuadCorner.UpperLeft">
            <summary> The upper left corner. </summary>
        </member>
        <member name="F:Atom.Math.QuadCorner.UpperRight">
            <summary> The upper right corner. </summary>
        </member>
        <member name="F:Atom.Math.QuadCorner.BottomLeft">
            <summary> The bottom left corner. </summary>
        </member>
        <member name="F:Atom.Math.QuadCorner.BottomRight">
            <summary> The bottom right corner. </summary>
        </member>
        <member name="T:Atom.Math.TriangularMatrixType">
            <summary>
            Enumerates the different types of Triangular Matrices.
            </summary>
        </member>
        <member name="F:Atom.Math.TriangularMatrixType.None">
            <summary>
            A non-triangular Matrix.
            </summary>
        </member>
        <member name="F:Atom.Math.TriangularMatrixType.Upper">
            <summary>
            An upper-triangular Matrix.
            </summary>
        </member>
        <member name="F:Atom.Math.TriangularMatrixType.Lower">
            <summary>
            A lower-triangular Matrix.
            </summary>
        </member>
        <member name="F:Atom.Math.TriangularMatrixType.Diagonal">
            <summary>
            A diagonal Matrix.
            </summary>
        </member>
        <member name="T:Atom.Math.PlaneIntersectionType">
            <summary>
            Enumerates the possible intersection types
            between a Plane and any bounding volume.
            </summary>
        </member>
        <member name="F:Atom.Math.PlaneIntersectionType.Front">
            <summary>
            The bounding volume is infront of the Plane.
            </summary>
        </member>
        <member name="F:Atom.Math.PlaneIntersectionType.Back">
            <summary>
            The bounding volume is behind of the Plane.
            </summary>
        </member>
        <member name="F:Atom.Math.PlaneIntersectionType.Intersecting">
            <summary>
            The plane is directly intersecting with the bounding volume.
            </summary>
        </member>
        <member name="T:Atom.Math.Sign">
            <summary>
            Enumerates the different signs.
            </summary>
        </member>
        <member name="F:Atom.Math.Sign.None">
            <summary>
            Represents no specific sign.
            </summary>
        </member>
        <member name="F:Atom.Math.Sign.Plus">
            <summary>
            Represents the plus sign.
            </summary>
        </member>
        <member name="F:Atom.Math.Sign.Minus">
            <summary>
            Represents the minus sign.
            </summary>
        </member>
        <member name="T:Atom.Math.HorizontalAlignment">
            <summary>
            Enumerates the alignments on x-axis.
            </summary>
        </member>
        <member name="F:Atom.Math.HorizontalAlignment.None">
            <summary>
            No specific alignment.
            </summary>
        </member>
        <member name="F:Atom.Math.HorizontalAlignment.Left">
            <summary>
            Left alignment.
            </summary>
        </member>
        <member name="F:Atom.Math.HorizontalAlignment.Center">
            <summary>
            Center alignment.
            </summary>
        </member>
        <member name="F:Atom.Math.HorizontalAlignment.Right">
            <summary>
            Right alignment.
            </summary>
        </member>
        <member name="T:Atom.Math.VerticalAlignment">
            <summary>
            Enumerates the alignments on y-axis.
            </summary>
        </member>
        <member name="F:Atom.Math.VerticalAlignment.None">
            <summary>
            No specific alignment.
            </summary>
        </member>
        <member name="F:Atom.Math.VerticalAlignment.Top">
            <summary>
            Top alignment.
            </summary>
        </member>
        <member name="F:Atom.Math.VerticalAlignment.Center">
            <summary>
            Center alignment.
            </summary>
        </member>
        <member name="F:Atom.Math.VerticalAlignment.Bottom">
            <summary>
            Bottom alignment.
            </summary>
        </member>
        <member name="T:Atom.Math.Orientation">
            <summary>
            Enumerates the various orientations on the 2D-plane.
            </summary>
        </member>
        <member name="F:Atom.Math.Orientation.None">
            <summary>
            No specific orientation.
            </summary>
        </member>
        <member name="F:Atom.Math.Orientation.Vertical">
            <summary>
            The object is oriented vertically.
            </summary>
        </member>
        <member name="F:Atom.Math.Orientation.Horizontal">
            <summary>
            The object is oriented horizontally.
            </summary>
        </member>
        <member name="T:Atom.Math.Axis2">
            <summary>
            Enumerates the axes of 2D-space.
            </summary>
        </member>
        <member name="F:Atom.Math.Axis2.None">
            <summary>
            No specific axis.
            </summary>
        </member>
        <member name="F:Atom.Math.Axis2.X">
            <summary>
            The x-axis. (horizontal)
            </summary>
        </member>
        <member name="F:Atom.Math.Axis2.Y">
            <summary>
            The y-axis. (vertical)
            </summary>
        </member>
        <member name="T:Atom.Math.Axis3">
            <summary>
            Enumerates the axes of 3D-space.
            </summary>
        </member>
        <member name="F:Atom.Math.Axis3.None">
            <summary>
            No specific axis.
            </summary>
        </member>
        <member name="F:Atom.Math.Axis3.X">
            <summary>
            The x-axis. (horizontal)
            </summary>
        </member>
        <member name="F:Atom.Math.Axis3.Y">
            <summary>
            The y-axis. (vertical)
            </summary>
        </member>
        <member name="F:Atom.Math.Axis3.Z">
            <summary>
            The z-axis. (in-/outwards)
            </summary>
        </member>
        <member name="T:Atom.Math.FloatRange">
            <summary>
            Represents a range of single-precision floating-point numbers that lie within [Minimum; Maximum].
            </summary>
        </member>
        <member name="P:Atom.Math.FloatRange.Minimum">
            <summary>
            Gets or sets the minimum value of this <see cref="T:Atom.Math.FloatRange"/>.
            </summary>
        </member>
        <member name="P:Atom.Math.FloatRange.Maximum">
            <summary>
            Gets or sets the maximum value of this <see cref="T:Atom.Math.FloatRange"/>.
            </summary>
        </member>
        <member name="P:Atom.Math.FloatRange.Middle">
            <summary>
            Gets the middle point of this FloatRange.
            </summary>
        </member>
        <member name="M:Atom.Math.FloatRange.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the FloatRange structure.
            </summary>
            <param name="minimum">
            The minimum value of the new FloatRange.
            </param>
            <param name="maximum">
            The maximum value of the new FloatRange.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If <paramref name="minimum"/> is greater than <paramref name="maximum"/>.
            </exception>
        </member>
        <member name="M:Atom.Math.FloatRange.GetRandomValue(Atom.Math.IRand)">
            <summary>
            Gets a random value that lies within [<see cref="P:Atom.Math.FloatRange.Minimum"/>; <see cref="P:Atom.Math.FloatRange.Maximum"/>].
            </summary>
            <param name="rand">
            The random number generator to use.
            </param>
            <returns>
            A value that lies within this FloatRange.
            </returns>
        </member>
        <member name="M:Atom.Math.FloatRange.Contains(System.Single)">
            <summary>
            Gets a value indicating whether the given value is within the inteval [minimum..maximum].
            </summary>
            <param name="value">
            The value to check.
            </param>
            <returns>
            True if the value is contained in this range; -or- otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Math.FloatRange.GetHashCode">
            <summary>
            Gets the hash code for this FloatRange instance.
            </summary>
            <returns>
            A 32-bit signed hash code.
            </returns>
        </member>
        <member name="M:Atom.Math.FloatRange.op_Explicit(Atom.Math.VariableFloat)~Atom.Math.FloatRange">
            <summary>
            Explicitely converts a VariableFloat into a FloatRange.
            </summary>
            <param name="variableFloat">
            The VariableFloat to convert.
            </param>
            <returns>
            The converted FloatRange.
            </returns>
        </member>
        <member name="M:Atom.Math.FloatRange.Equals(Atom.Math.FloatRange)">
            <summary>
            Returns whether the given FloatRange is equal to this FloatRange.
            </summary>
            <param name="other">
            The FloatRange to compare with this FloatRange.
            </param>
            <returns>
            True if they are equal; otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Math.FloatRange.Equals(System.Object)">
            <summary>
            Returns whether the given Object is equal to this FloatRange.
            </summary>
            <param name="obj">
            The Object to compare with this FloatRange.
            </param>
            <returns>
            True if they are equal; otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Math.FloatRange.op_Equality(Atom.Math.FloatRange,Atom.Math.FloatRange)">
            <summary>
            Returns whether the specified <see cref="T:Atom.Math.FloatRange"/> instances are equal.
            </summary>
            <param name="left">The value on the left side of the equation.</param>
            <param name="right">The value on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.FloatRange.op_Inequality(Atom.Math.FloatRange,Atom.Math.FloatRange)">
            <summary>
            Returns whether the specified <see cref="T:Atom.Math.FloatRange"/> instances are inequal.
            </summary>
            <param name="left">The value on the left side of the equation.</param>
            <param name="right">The value on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.FloatRange.ToString">
            <summary>
            Overriden to return a human-readable text representation of this FloatRange.
            </summary>
            <returns>A human-readable text representation of this FloatRange.</returns>
        </member>
        <member name="M:Atom.Math.FloatRange.ToString(System.IFormatProvider)">
            <summary>
            Returns a human-readable text representation of this FloatRange.
            </summary>
            <param name="formatProvider">
            The <see cref="T:System.IFormatProvider"/> that supplies culture specific formatting information.
            </param>
            <returns>A human-readable text representation of this FloatRange.</returns>
        </member>
        <member name="F:Atom.Math.FloatRange.minimum">
            <summary>
            The storage field of the <see cref="P:Atom.Math.FloatRange.Minimum"/> property.
            </summary>
        </member>
        <member name="F:Atom.Math.FloatRange.maximum">
            <summary>
            The storage field of the <see cref="P:Atom.Math.FloatRange.Maximum"/> property.
            </summary>
        </member>
        <member name="T:Atom.Math.IntegerRange">
            <summary>
            Represents a range of intergers that lie within
            a given [Minimum; Maximum].
            </summary>
        </member>
        <member name="P:Atom.Math.IntegerRange.Minimum">
            <summary>
            Gets or sets the minimum value of this <see cref="T:Atom.Math.IntegerRange"/>.
            </summary>
        </member>
        <member name="P:Atom.Math.IntegerRange.Maximum">
            <summary>
            Gets or sets the maximum value of this <see cref="T:Atom.Math.IntegerRange"/>.
            </summary>
        </member>
        <member name="M:Atom.Math.IntegerRange.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the IntegerRange structure.
            </summary>
            <param name="minimum">
            The minimum value of the new IntegerRange.
            </param>
            <param name="maximum">
            The maximum value of the new IntegerRange.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If <paramref name="minimum"/> is greater than <paramref name="maximum"/>.
            </exception>
        </member>
        <member name="M:Atom.Math.IntegerRange.GetRandomValue(Atom.Math.IRand)">
            <summary>
            Gets a random value that lies within [<see cref="P:Atom.Math.IntegerRange.Minimum"/>; <see cref="P:Atom.Math.IntegerRange.Maximum"/>].
            </summary>
            <param name="rand">
            The random number generator to use.
            </param>
            <returns>
            A value that lies within this IntegerRange.
            </returns>
        </member>
        <member name="M:Atom.Math.IntegerRange.Contains(System.Int32)">
            <summary>
            Gets a value indicating whether the given value is within the inteval [minimum..maximum].
            </summary>
            <param name="value">
            The value to check.
            </param>
            <returns>
            True if the value is contained in this range; -or- otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Math.IntegerRange.GetHashCode">
            <summary>
            Gets the hash code for this IntegerRange instance.
            </summary>
            <returns>
            A 32-bit signed integer hash code.
            </returns>
        </member>
        <member name="M:Atom.Math.IntegerRange.op_Addition(Atom.Math.IntegerRange,Atom.Math.IntegerRange)">
            <summary>
            Returns the result of adding the right IntegerRange to the left IntegerRange.
            </summary>
            <param name="left">
            The IntegerRange on the left side.
            </param>
            <param name="right">
            The IntegerRange on the right side.
            </param>
            <returns>
            The result of the operation.
            </returns>
        </member>
        <member name="M:Atom.Math.IntegerRange.op_Addition(Atom.Math.IntegerRange,System.Int32)">
            <summary>
            Returns the result of adding a value to an IntegerRange.
            </summary>
            <param name="range">
            The IntegerRange on the left side.
            </param>
            <param name="value">
            The value on the right side.
            </param>
            <returns>
            The result of the operation.
            </returns>
        </member>
        <member name="M:Atom.Math.IntegerRange.Add(Atom.Math.IntegerRange,Atom.Math.IntegerRange)">
            <summary>
            Returns the result of adding the right IntegerRange to the left IntegerRange.
            </summary>
            <param name="left">
            The IntegerRange on the left side.
            </param>
            <param name="right">
            The IntegerRange on the right side.
            </param>
            <returns>
            The result of the operation.
            </returns>
        </member>
        <member name="M:Atom.Math.IntegerRange.Add(Atom.Math.IntegerRange,System.Int32)">
            <summary>
            Returns the result of adding a value to an IntegerRange.
            </summary>
            <param name="range">
            The IntegerRange on the left side.
            </param>
            <param name="value">
            The value on the right side.
            </param>
            <returns>
            The result of the operation.
            </returns>
        </member>
        <member name="M:Atom.Math.IntegerRange.Equals(Atom.Math.IntegerRange)">
            <summary>
            Returns whether the given IntegerRange is equal to this IntegerRange.
            </summary>
            <param name="other">
            The IntegerRange to compare with this IntegerRange.
            </param>
            <returns>
            True if they are equal; otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Math.IntegerRange.Equals(System.Object)">
            <summary>
            Returns whether the given Object is equal to this IntegerRange.
            </summary>
            <param name="obj">
            The Object to compare with this IntegerRange.
            </param>
            <returns>
            True if they are equal; otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Math.IntegerRange.op_Equality(Atom.Math.IntegerRange,Atom.Math.IntegerRange)">
            <summary>
            Returns whether the specified <see cref="T:Atom.Math.IntegerRange"/> instances are equal.
            </summary>
            <param name="left">The value on the left side of the equation.</param>
            <param name="right">The value on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.IntegerRange.op_Inequality(Atom.Math.IntegerRange,Atom.Math.IntegerRange)">
            <summary>
            Returns whether the specified <see cref="T:Atom.Math.IntegerRange"/> instances are inequal.
            </summary>
            <param name="left">The value on the left side of the equation.</param>
            <param name="right">The value on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.IntegerRange.ToString">
            <summary>
            Overriden to return a human-readable text representation of this IntegerRange.
            </summary>
            <returns>A human-readable text representation of this IntegerRange.</returns>
        </member>
        <member name="M:Atom.Math.IntegerRange.ToString(System.IFormatProvider)">
            <summary>
            Returns a human-readable text representation of this IntegerRange.
            </summary>
            <param name="formatProvider">
            The <see cref="T:System.IFormatProvider"/> that supplies culture specific formatting information.
            </param>
            <returns>A human-readable text representation of this IntegerRange.</returns>
        </member>
        <member name="F:Atom.Math.IntegerRange.minimum">
            <summary>
            The storage field of the <see cref="P:Atom.Math.IntegerRange.Minimum"/> property.
            </summary>
        </member>
        <member name="F:Atom.Math.IntegerRange.maximum">
            <summary>
            The storage field of the <see cref="P:Atom.Math.IntegerRange.Maximum"/> property.
            </summary>
        </member>
        <member name="T:Atom.Math.IPositionable2">
            <summary>
            Provides a mechanism to get or sets the position
            of an object in two-dimensional space.
            </summary>
        </member>
        <member name="P:Atom.Math.IPositionable2.Position">
            <summary>
            Gets or sets the position of the IPositionable2 object.
            </summary>
            <value>The position of the object.</value>
        </member>
        <member name="T:Atom.Math.IPositionable3">
            <summary>
            Provides a mechanism to get or sets the position
            of an object in three-dimensional space.
            </summary>
        </member>
        <member name="P:Atom.Math.IPositionable3.Position">
            <summary>
            Gets or sets the position of the IPositionable3 object.
            </summary>
            <value>The position of the object.</value>
        </member>
        <member name="T:Atom.Math.ISizeable2">
            <summary>
            Represents an object that has a two-dimensional size.
            </summary>
        </member>
        <member name="P:Atom.Math.ISizeable2.Height">
            <summary>
            Gets the height of this ISizeable2 object.
            </summary>
        </member>
        <member name="P:Atom.Math.ISizeable2.Width">
            <summary>
            Gets the width of this ISizeable2 object.
            </summary>
        </member>
        <member name="P:Atom.Math.ISizeable2.Size">
            <summary>
            Gets the width and height of this ISizeable2 object.
            </summary>
        </member>
        <member name="T:Atom.Math.LagrangePolynomial">
            <summary>
            The Lagrange Polynom descripes an arabitary function of N points.
            </summary>
        </member>
        <member name="P:Atom.Math.LagrangePolynomial.Item(System.Int32)">
            <summary>
            Gets the control point at the specified index of this LagrangePolynomial.
            </summary>
            <param name="index">
            The zero-based index of the point to get.
            </param>
        </member>
        <member name="M:Atom.Math.LagrangePolynomial.#ctor(System.Collections.Generic.IEnumerable{Atom.Math.Vector2})">
            <summary>
            Initializes a new instance of the LagrangePolynomial class.
            </summary>
            <param name="points">
            The control points of the LagrangePolynomial.
            </param>
        </member>
        <member name="M:Atom.Math.LagrangePolynomial.ObjectInvariant">
            <summary>
            Descripes the invariant properties of the LagrangePolynomial.
            </summary>
        </member>
        <member name="M:Atom.Math.LagrangePolynomial.GetY(System.Single)">
            <summary>
            Gets the value of this LagrangePolynomial at the given x-position.
            </summary>
            <param name="x">
            The position on the x-axis.
            </param>
            <returns>
            The position on the y-axis.
            </returns>
        </member>
        <member name="M:Atom.Math.LagrangePolynomial.CalculateFactors(System.Single)">
            <summary>
            Updates the <see cref="F:Atom.Math.LagrangePolynomial.factors"/> to descripe the function at the given x-position.
            </summary>
            <param name="x">
            The position on the x-axis.
            </param>
        </member>
        <member name="F:Atom.Math.LagrangePolynomial.points">
            <summary>
            The control points that descripe this LagrangePolynomial.
            </summary>
        </member>
        <member name="F:Atom.Math.LagrangePolynomial.factors">
            <summary>
            The factors that have been calculated.
            </summary>
        </member>
        <member name="T:Atom.Math.MathErrorStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Atom.Math.MathErrorStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Atom.Math.MathErrorStrings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Atom.Math.MathErrorStrings.ArgumentInIntervalXYInclusive">
            <summary>
              Looks up a localized string similar to The argument is expected to be between {0} and {1} (including {0} and {1})..
            </summary>
        </member>
        <member name="P:Atom.Math.MathErrorStrings.ArgumentIsInfinityNaN">
            <summary>
              Looks up a localized string similar to The given argument is infinite or NaN. This is not allowed..
            </summary>
        </member>
        <member name="P:Atom.Math.MathErrorStrings.ArgumentTooLargeForIterationLimit">
            <summary>
              Looks up a localized string similar to The given argument is too large for the set iteration limit..
            </summary>
        </member>
        <member name="P:Atom.Math.MathErrorStrings.CantReceiveValueVertexOrderIsNone">
            <summary>
              Looks up a localized string similar to Can&apos;t receive the value. The vertex order is &apos;TurnDirection.None&apos;..
            </summary>
        </member>
        <member name="P:Atom.Math.MathErrorStrings.CantSetVertexOrderToNone">
            <summary>
              Looks up a localized string similar to Can&apos;t set the vertex order to &apos;TurnDirection.None&apos;..
            </summary>
        </member>
        <member name="P:Atom.Math.MathErrorStrings.IncompatibleMatricesTimes">
            <summary>
              Looks up a localized string similar to The size of the matrices is incompatible for this operation..
            </summary>
        </member>
        <member name="P:Atom.Math.MathErrorStrings.MatrixDimensionsMismatch">
            <summary>
              Looks up a localized string similar to Dimensions mismatch. This operation requires the matrices to be of the same size..
            </summary>
        </member>
        <member name="P:Atom.Math.MathErrorStrings.MatrixIsSingular">
            <summary>
              Looks up a localized string similar to The Matrix is singular/degenerated. (--&gt; The Matrix is not 	invertible).
            </summary>
        </member>
        <member name="P:Atom.Math.MathErrorStrings.MatrixMustBeSquare">
            <summary>
              Looks up a localized string similar to The Matrix must be a square matrix..
            </summary>
        </member>
        <member name="P:Atom.Math.MathErrorStrings.MatrixMustBeSymmetric">
            <summary>
              Looks up a localized string similar to The matrix must be symmetric..
            </summary>
        </member>
        <member name="P:Atom.Math.MathErrorStrings.MatrixMustBeSymmetricPositiveDefinite">
            <summary>
              Looks up a localized string similar to The Matrix must be symmetric positive definite for this operation..
            </summary>
        </member>
        <member name="P:Atom.Math.MathErrorStrings.MatrixNotPositiveDefinite">
            <summary>
              Looks up a localized string similar to The matrix is not positive definite..
            </summary>
        </member>
        <member name="P:Atom.Math.MathErrorStrings.MatrixRankIsNotFull">
            <summary>
              Looks up a localized string similar to The matrix&apos;s rank is not full..
            </summary>
        </member>
        <member name="P:Atom.Math.MathErrorStrings.MatrixRowCountMismatch">
            <summary>
              Looks up a localized string similar to The number of rows of the Matrices doesn&apos;t match..
            </summary>
        </member>
        <member name="P:Atom.Math.MathErrorStrings.MatrixVectorDimensionsMismatch">
            <summary>
              Looks up a localized string similar to Dimensions mismatch. This operation requires the matrix and the vector to be of the same size..
            </summary>
        </member>
        <member name="P:Atom.Math.MathErrorStrings.NegativePlaneDistance">
            <summary>
              Looks up a localized string similar to The plane distance {0} is negative. This is not supported..
            </summary>
        </member>
        <member name="P:Atom.Math.MathErrorStrings.OperationInvalidOnZeroVector">
            <summary>
              Looks up a localized string similar to This operation is invalid on a 0-vector..
            </summary>
        </member>
        <member name="P:Atom.Math.MathErrorStrings.OperationRequiresAtleastOnePoint">
            <summary>
              Looks up a localized string similar to This operation requires at least one point..
            </summary>
        </member>
        <member name="P:Atom.Math.MathErrorStrings.OppositePlanes">
            <summary>
              Looks up a localized string similar to The near plane distance is larger than the far plane distance. This is not allowed..
            </summary>
        </member>
        <member name="P:Atom.Math.MathErrorStrings.OutRangeFieldOfView">
            <summary>
              Looks up a localized string similar to The field of view value &apos;{0}&apos; is out of valid range of 0 and PI (180 degree)..
            </summary>
        </member>
        <member name="P:Atom.Math.MathErrorStrings.SpecifiedAngleXGreaterTwoPi">
            <summary>
              Looks up a localized string similar to The specified angle &apos;{0}&apos; is greater than two Pi..
            </summary>
        </member>
        <member name="P:Atom.Math.MathErrorStrings.TriangulationRequiresAtLeastThreeVertices">
            <summary>
              Looks up a localized string similar to Triangulation requires at least 3 vertices as its input..
            </summary>
        </member>
        <member name="P:Atom.Math.MathErrorStrings.ValueGreaterThanMaximum">
            <summary>
              Looks up a localized string similar to The given value is greater than the maximum..
            </summary>
        </member>
        <member name="P:Atom.Math.MathErrorStrings.ValueLessThanMinimum">
            <summary>
              Looks up a localized string similar to The given value is less than the minimum..
            </summary>
        </member>
        <member name="P:Atom.Math.MathErrorStrings.VectorLengthMismatch">
            <summary>
              Looks up a localized string similar to Vector length mismatch. This operation only works with Vectors that have the same number of elements..
            </summary>
        </member>
        <member name="P:Atom.Math.MathErrorStrings.VectorSizeMatrixRowCountMismatch">
            <summary>
              Looks up a localized string similar to The vector must have the same number of elements as the number of rows of the matrix..
            </summary>
        </member>
        <member name="P:Atom.Math.MathErrorStrings.VertexCountIsZero">
            <summary>
              Looks up a localized string similar to The vertex count is zero..
            </summary>
        </member>
        <member name="T:Atom.Math.ComplexMatrix">
            <summary>
            Represents a NxM matrix whose elements are <see cref="T:Atom.Math.Complex"/> numbers.
            </summary>
        </member>
        <member name="P:Atom.Math.ComplexMatrix.Transpose">
            <summary>
            Gets the non-conjugated transpose of this <see cref="T:Atom.Math.ComplexMatrix"/>.
            </summary>
            <remarks>
            The transpose of a Matrix is the same Matrix but with exchanged rows and columns.
            </remarks>
            <value>The transposed ComplexMatrix.</value>
        </member>
        <member name="P:Atom.Math.ComplexMatrix.HermitianTranspose">
            <summary>
            Gets the conjugated transpose of this <see cref="T:Atom.Math.ComplexMatrix"/>.
            </summary>
            <remarks>
            The transpose of a Matrix is the same Matrix but with exchanged rows and columns.
            </remarks>
            <value>The conjugated transposed ComplexMatrix.</value>
        </member>
        <member name="P:Atom.Math.ComplexMatrix.ManhattanNorm">
            <summary>
            Gets the 1-norm of this <see cref="T:Atom.Math.ComplexMatrix"/>.
            </summary>
            <value>
            The greatest absolute column length of the ComplexMatrix.
            </value>
        </member>
        <member name="M:Atom.Math.ComplexMatrix.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.ComplexMatrix"/> class.
            </summary>
            <param name="rowCount">
            The number of rows the new ComplexMatrix should have.
            </param>
            <param name="columnCount">
            The number of columns the new ComplexMatrix should have.
            </param>
            <exception cref="T:System.ArgumentException">
            If <paramref name="rowCount"/> or <paramref name="columnCount"/> is less than or equal 0.
            </exception>
        </member>
        <member name="M:Atom.Math.ComplexMatrix.#ctor(Atom.Math.Complex[0:,0:])">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.ComplexMatrix"/> class.
            </summary>
            <param name="elements">
            The elements of the new ComplexMatrix.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="elements"/> is null.
            </exception>
        </member>
        <member name="M:Atom.Math.ComplexMatrix.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> 
            Initializes a new instance of the <see cref="T:Atom.Math.ComplexMatrix"/> class; and
            sets values of the new <see cref="T:Atom.Math.ComplexMatrix"/> to the
            values specified by the <see cref="T:System.Runtime.Serialization.SerializationInfo"/>.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds
            the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that 
            contains contextual information about the source or destination.
            Can be null.
            </param>
        </member>
        <member name="M:Atom.Math.ComplexMatrix.Kronecker(Atom.Math.ComplexMatrix,Atom.Math.ComplexMatrix)">
            <summary>
            Returns the kronecker product of the given complex matrices.
            </summary>
            <param name="matrixA">The matrix on the left side. May not be null.</param>
            <param name="matrixB">The matrix on the right side. May not be null.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.ComplexMatrix.op_Multiply(Atom.Math.ComplexMatrix,Atom.Math.Complex)">
            <summary>
            Returns the result of scaling the given <see cref="T:Atom.Math.ComplexMatrix"/> by the given <see cref="T:Atom.Math.Complex"/> scalar.
            </summary>
            <param name="matrix">The input matrix.</param>
            <param name="scalar">The input scalar value.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.ComplexMatrix.Multiply(Atom.Math.ComplexMatrix,Atom.Math.Complex)">
            <summary>
            Returns the result scaling the given <see cref="T:Atom.Math.ComplexMatrix"/> by the given <see cref="T:Atom.Math.Complex"/> scalar.
            </summary>
            <param name="matrix">The input matrix.</param>
            <param name="scalar">The input scalar value.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.ComplexMatrix.GetRow(System.Int32)">
            <summary>
            Gets the row at the specified zero-based index.
            </summary>
            <param name="row">
            The zero-based index of the row to get.
            </param>
            <returns>
            A ComplexVector containing the values of the requested row.
            </returns>
        </member>
        <member name="M:Atom.Math.ComplexMatrix.GetColumn(System.Int32)">
            <summary>
            Gets the column at the specified zero-based index.
            </summary>
            <param name="column">
            The zero-based index of the column to get.
            </param>
            <returns>
            A ComplexVector containing the values of the requested column.
            </returns>
        </member>
        <member name="M:Atom.Math.ComplexMatrix.GetSubMatrix(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets a sub matrix of this <see cref="T:Atom.Math.ComplexMatrix"/>.
            </summary>
            <param name="rowStart">
            The row start index.
            </param>
            <param name="columnStart">
            The column start index.
            </param>
            <param name="rowCount">
            The number of rows to get.
            </param>
            <param name="columnCount">
            The number of columns to get.
            </param>
            <returns>
            The sub matrix of the current matrix.
            </returns>
        </member>
        <member name="M:Atom.Math.ComplexMatrix.Equals(System.Object)">
            <summary>
            Returns whether the specified <see cref="T:System.Object"/>
            is equal to this <see cref="T:Atom.Math.ComplexMatrix"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to test against. Can be null.
            </param>
            <returns>
            Returns <see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to this <see cref="T:Atom.Math.ComplexMatrix"/>;
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.ComplexMatrix.Equals(Atom.Math.ComplexMatrix)">
            <summary>
            Returns whether the specified <see cref="T:Atom.Math.ComplexMatrix"/>
            is equal to this <see cref="T:Atom.Math.ComplexMatrix"/>.
            </summary>
            <param name="other">
            The <see cref="T:Atom.Math.ComplexMatrix"/> to test against. Can be null.
            </param>
            <returns>
            Returns <see langword="true"/> if the specified <see cref="T:Atom.Math.ComplexMatrix"/> is equal to this <see cref="T:Atom.Math.ComplexMatrix"/>;
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.ComplexMatrix.GetHashCode">
            <summary>
            Returns the hash code of this <see cref="T:Atom.Math.Matrix"/> instance.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Atom.Math.ComplexMatrix.Clone">
            <summary>
            Returns a clone of this <see cref="T:Atom.Math.Matrix"/>.
            </summary>
            <returns>
            A clone of this Matrix.
            </returns>
        </member>
        <member name="M:Atom.Math.ComplexMatrix.System#ICloneable#Clone">
            <summary>
            Returns a clone of this <see cref="T:Atom.Math.Matrix"/>.
            </summary>
            <returns>
            A clone of this Matrix.
            </returns>
        </member>
        <member name="M:Atom.Math.ComplexMatrix.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            with the data needed to serialize the <see cref="T:Atom.Math.ComplexMatrix"/>.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            to populate with data.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the given info is null.
            </exception>
            <param name="context"> 
            The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>)
            for this serialization. Can be null.
            </param>
        </member>
        <member name="M:Atom.Math.ComplexMatrix.ToString">
            <summary>
            Returns a humen-readable representation of the <see cref="T:Atom.Collections.ObjectMatrix`1"/>.
            </summary>
            <returns>A string representing this ObjectMatrix.</returns>
        </member>
        <member name="M:Atom.Math.ComplexMatrix.ToString(System.IFormatProvider)">
            <summary>
            Returns a humen-readable representation of the <see cref="T:Atom.Collections.ObjectMatrix`1"/>.
            </summary>
            <param name="formatProvider">
            Provides access to culture-sensitive formatting information.
            </param>
            <returns>A string representing this ObjectMatrix.</returns>
        </member>
        <member name="T:Atom.Math.CholeskyDecomposition">
            <summary>
            Implements Cholesky Decomposition of a rectangular <see cref="T:Atom.Math.Matrix"/>.
            This class can't be inherited.
            </summary>
            <remarks>
            Adapted from
            the NGenerics framework,
            the JAMA package : http://math.nist.gov/javanumerics/jama/
            and from Numerical recipes.
            </remarks>
        </member>
        <member name="P:Atom.Math.CholeskyDecomposition.LeftFactor">
            <summary>
            Gets the lower triangular factor U^T, with A=U^T x U.
            </summary>
            <value>The triangular factor 'L'.</value>
        </member>
        <member name="P:Atom.Math.CholeskyDecomposition.RightFactor">
            <summary>
            Gets the upper triangular factor U, with A=U^T x U.
            </summary>
            <value>The transpose of the triangular factor 'L'.</value>
        </member>
        <member name="P:Atom.Math.CholeskyDecomposition.TriangularFactorL">
            <summary>
            Gets the triangular factor 'L'.
            </summary>
            <value>The triangular factor 'L'.</value>
        </member>
        <member name="M:Atom.Math.CholeskyDecomposition.#ctor(Atom.Math.Matrix)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.CholeskyDecomposition"/> class.
            </summary>
            <param name="matrix">
            A square, symmetric input matrix. 
            </param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is null.</exception>
            <exception cref="T:System.ArgumentException">If the specified <paramref name="matrix"/> is a not symmetric.</exception>
            <exception cref="T:System.ArgumentException">If the specified <paramref name="matrix"/> is a not square.</exception>
        </member>
        <member name="M:Atom.Math.CholeskyDecomposition.Decompose(Atom.Math.Matrix)">
            <summary>
            Given a positive-definite symmetric matrix <c>A[0..n][0..n]</c>, 
            this routine constructs its Cholesky decomposition,  <c> A = L*(L^T) </c>. 
            </summary>
            <remarks>
            The operations count is <c>(N^3)/6</c> executions of the inner loop (consisting of 
            one multiply and one subtract), with also N square roots. 
            This is about a factor 2 better than LU decomposition of <c>A</c> 
            (where its symmetry would be ignored).
            </remarks>
            <param name="matrix">
            The square symmetric definite-defined input matrix A. 
            </param>
        </member>
        <member name="M:Atom.Math.CholeskyDecomposition.QuickDecompose(Atom.Math.Matrix)">
            <summary>
            Given a positive-definite symmetric matrix <c>A[0..n][0..n]</c>, 
            this routine constructs its Cholesky decomposition,  <c> A = L*(L^T) </c>. 
            </summary>
            <remarks>
            The operations count is <c>(N^3)/6</c> executions of the inner loop (consisting of 
            one multiply and one subtract), with also N square roots. 
            This is about a factor 2 better than LU decomposition of <c>A</c> 
            (where its symmetry would be ignored).
            </remarks>
            <param name="matrix">
            The square symmetric definite-defined input matrix A. 
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="matrix"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            If <paramref name="matrix"/> is not symmetric.</exception>
            <exception cref="T:System.ArgumentException">
            If <paramref name="matrix"/> is not square.
            </exception>
            <returns>
            The Cholesky factor L.
            </returns>
        </member>
        <member name="M:Atom.Math.CholeskyDecomposition.QuickSolveLinearEquation(Atom.Math.Matrix,System.Single[])">
            <summary>
            Solves the set of <c>n</c> linear equations <c> A * x = b </c>.
            </summary>
            <param name="matrix">
            A positive-definite symmetric input matrix <c>[0..n][0..n]</c>.
            </param>
            <param name="vector">
            The right-hand side input vector <c>[0..n]</c>.
            </param>
            <returns>
            The solution vector is returned as <c>[0..n]</c>.
            </returns>
        </member>
        <member name="M:Atom.Math.CholeskyDecomposition.Solve(Atom.Math.Matrix)">
            <summary>
            Solves the equation A*X = B.
            </summary>
            <param name="matrixB">
            The input matrix B, with as many rows as A and any number of columns.
            </param>
            <returns>
            The matrix X; so that L*L'*X = B.
            </returns>
        </member>
        <member name="F:Atom.Math.CholeskyDecomposition.l">
            <summary>
            Array for internal storage of decomposition.
            </summary>
        </member>
        <member name="F:Atom.Math.CholeskyDecomposition.dimension">
            <summary>
            Row and column dimension (square matrix).
            </summary> 
        </member>
        <member name="T:Atom.Math.EigenvalueDecomposition">
            <summary>
            Provides decomposition of a square real <see cref="T:Atom.Math.Matrix"/>
            into its eigenvalues and eigenvectors. 
            </summary>
            <remarks>
            Big thanks to Paul Selormey for the implementation of this algorithm.
            See http://www.codeproject.com/KB/recipes/psdotnetmatrix.aspx for the original source code.
            </remarks>
        </member>
        <member name="M:Atom.Math.EigenvalueDecomposition.GetEigenvalues">
            <summary>
            Gets the eigenvalues as a <see cref="T:Atom.Math.ComplexVector"/>.
            </summary>
            <returns>
            A new ComplexVector that contains the decomposed eigenvalues.
            </returns>
        </member>
        <member name="M:Atom.Math.EigenvalueDecomposition.GetDiagonalEigenvalues">
            <summary>
            Gets the block diagonal eigenvalue matrix.
            </summary>
            <returns>
            A new Matrix that contains the decomposed eigenvalues in diagonal form.
            </returns>
        </member>
        <member name="M:Atom.Math.EigenvalueDecomposition.GetEigenvectorMatrix">
            <summary>
            Gets the eigenvector <see cref="T:Atom.Math.Matrix"/>.
            </summary>
            <returns>
            A new Matrix that contains the decomposed eigenvectors.
            </returns>
        </member>
        <member name="M:Atom.Math.EigenvalueDecomposition.GetRealEigenvalues">
            <summary>
            Gets the real parts of the eigenvalues.
            </summary>
            <returns>
            A new array that contains the decomposed real eigenvalues.
            </returns>
        </member>
        <member name="M:Atom.Math.EigenvalueDecomposition.GetImagEigenvalues">
            <summary>
            Getsthe imaginary parts of the eigenvalues.
            </summary>
            <returns>
            A new array that contains the decomposed imaginary eigenvalues.
            </returns>
        </member>
        <member name="M:Atom.Math.EigenvalueDecomposition.#ctor(Atom.Math.Matrix)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.EigenvalueDecomposition"/> class.
            </summary>
            <param name="matrix">
            The square input matrix.
            </param>
        </member>
        <member name="M:Atom.Math.EigenvalueDecomposition.ReduceHouseholderToTridiagonal">
            <summary>
            Symmetric Householder reduction to tridiagonal form.
            </summary>
        </member>
        <member name="M:Atom.Math.EigenvalueDecomposition.TridiagonalQL">
            <summary>
            Symmetric tridiagonal QL algorithm.
            </summary>
        </member>
        <member name="M:Atom.Math.EigenvalueDecomposition.ReduceToHessenberg">
            <summary>
            Nonsymmetric reduction to Hessenberg form.
            </summary>
        </member>
        <member name="F:Atom.Math.EigenvalueDecomposition.cdivr">
            <summary>
            Stores the result of the last call to <see cref="M:Atom.Math.EigenvalueDecomposition.Divide(System.Double,System.Double,System.Double,System.Double)"/>.
            </summary>
        </member>
        <member name="F:Atom.Math.EigenvalueDecomposition.cdivi">
            <summary>
            Stores the result of the last call to <see cref="M:Atom.Math.EigenvalueDecomposition.Divide(System.Double,System.Double,System.Double,System.Double)"/>.
            </summary>
        </member>
        <member name="M:Atom.Math.EigenvalueDecomposition.Divide(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Complex scalar division, storing the result in the cdivr, cdivi fields.
            </summary>
            <param name="realA">The real part of the first complex number.</param>
            <param name="imagA">The imaginary part of the first complex number.</param>
            <param name="realB">The real part of the second complex number.</param>
            <param name="imagB">The imaginary part of the second complex number.</param>
        </member>
        <member name="M:Atom.Math.EigenvalueDecomposition.ReduceHessenbergToSchur">
            <summary>
            Non-symmetric reduction from Hessenberg to real Schur form.
            </summary>
        </member>
        <member name="M:Atom.Math.EigenvalueDecomposition.ReduceHessenbergToSchurOuterLoop(System.Double)">
            <summary>
            The outer loop of the non-symmetric reduction from Hessenberg
            to real Schur form function.
            </summary>
            <param name="norm">
            The norm of the Hessenberg matrix.
            </param>
        </member>
        <member name="M:Atom.Math.EigenvalueDecomposition.DoubleStepQR(System.Int32,System.Int32,System.Int32,System.Int32,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Int32,System.Int32)">
            <summary>
            Double QR step involving rows l:n and columns m:n.
            </summary>
            <param name="nn"></param>
            <param name="n"></param>
            <param name="low"></param>
            <param name="high"></param>
            <param name="p"></param>
            <param name="r"></param>
            <param name="s"></param>
            <param name="q"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="l"></param>
            <param name="m"></param>
        </member>
        <member name="M:Atom.Math.EigenvalueDecomposition.ReduceHessenbergToSchurBacksubstitue(System.Double)">
            <summary>
            Backsubstitute to find vectors of upper triangular form
            in the non-symmetric reduction from Hessenberg to real Schur form function.
            </summary>
            <param name="norm">
            The norm of the Hessenberg matrix.
            </param>
        </member>
        <member name="F:Atom.Math.EigenvalueDecomposition.size">
            <summary>
            Row and column dimension (square matrix).
            </summary>
        </member>
        <member name="F:Atom.Math.EigenvalueDecomposition.isSymmetric">
            <summary>Symmetry flag.</summary>
        </member>
        <member name="F:Atom.Math.EigenvalueDecomposition.realEigenvalues">
            <summary>
            Arrays for internal storage of eigenvalues.
            </summary>
        </member>
        <member name="F:Atom.Math.EigenvalueDecomposition.imagEigenvalues">
            <summary>
            Arrays for internal storage of eigenvalues.
            </summary>
        </member>
        <member name="F:Atom.Math.EigenvalueDecomposition.eigenvectors">
            <summary>
            Array for internal storage of eigenvectors.
            </summary>
        </member>
        <member name="F:Atom.Math.EigenvalueDecomposition.H">
            <summary>
            Array for internal storage of nonsymmetric Hessenberg form.
            </summary>
        </member>
        <member name="F:Atom.Math.EigenvalueDecomposition.ort">
            <summary>
            Working storage for nonsymmetric algorithm.
            </summary>
        </member>
        <member name="T:Atom.Math.LUDecomposition">
            <summary> 
            Implements LU decomposition of rectangular Matrices.
            This is a sealed class.
            </summary>
            <remarks>
            Given a m-by-n Matrix A (with m >= n),
            the LU decomposition is 
            a m-by-n unit lower triangular Matrix L,
            a n-by-n upper triangular Matrix U and 
            a permutation point PIV of length m
            so that A(piv)=L*U.
            If m &lt; n, then L is m-bx-m and U m-by-n.
            </remarks>
            <remarks>
            Adapted from the JAMA package : http://math.nist.gov/javanumerics/jama/
            </remarks>
        </member>
        <member name="P:Atom.Math.LUDecomposition.LeftFactor">
            <summary>
            Gets the lower triangular factor L, with A=LU.
            </summary>
            <value>The lower triangular factor.</value>
        </member>
        <member name="P:Atom.Math.LUDecomposition.RightFactor">
            <summary>
            Gets the upper triangular factor U, with A=LU.
            </summary>
            <value>The upper triangular factor.</value>
        </member>
        <member name="P:Atom.Math.LUDecomposition.RowCountLU">
            <summary>
            Gets the row-count of the decomposed matrix.
            </summary>
        </member>
        <member name="P:Atom.Math.LUDecomposition.ColumnCountLU">
            <summary>
            Gets the column-count of the decomposed matrix.
            </summary>
        </member>
        <member name="P:Atom.Math.LUDecomposition.IsSingular">
            <summary>
            Gets a value indicating whether the decomposed <see cref="T:Atom.Math.Matrix"/> is singular.
            </summary>
            <value>
            Returns <see langword="true"/> if the Matrix is singular; otherwise <see langword="false"/>.
            </value>
        </member>
        <member name="P:Atom.Math.LUDecomposition.Determinant">
            <summary>
            Gets the determinant of the decomposed <see cref="T:Atom.Math.Matrix"/>.
            </summary>
            <value>The determinant.</value>
        </member>
        <member name="P:Atom.Math.LUDecomposition.LowerTriangularFactor">
            <summary>
            Gets the lower triangular factor L, with A=LU.
            </summary>
            <value>The lower triangular factor.</value>
        </member>
        <member name="P:Atom.Math.LUDecomposition.UpperTriangularFactor">
            <summary>
            Gets the upper triangular factor U, with A=LU.
            </summary>
            <value>The upper triangular factor.</value>
        </member>
        <member name="M:Atom.Math.LUDecomposition.#ctor(Atom.Math.Matrix)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.LUDecomposition"/> class.
            </summary>
            <param name="matrix">The matrix.</param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="matrix"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the specified <paramref name="matrix"/> is not a square Matrix.
            </exception>
        </member>
        <member name="M:Atom.Math.LUDecomposition.Decompose(Atom.Math.Matrix)">
            <summary>
            Decomposes the specified matrix using a LU decomposition.
            </summary>
            <param name="matrix">The matrix to decompose.</param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="matrix"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the specified <paramref name="matrix"/> is not a square Matrix.
            </exception>
        </member>
        <member name="M:Atom.Math.LUDecomposition.Solve(Atom.Math.Matrix)">
            <summary>
            Solves the equation A*X = B.
            </summary>
            <param name="matrixB">
            A <see cref="T:Atom.Math.Matrix"/> with as many rows as A and any number of columns.
            </param>
            <returns>
            The Matrix X, so that A*X = B.
            </returns>
        </member>
        <member name="M:Atom.Math.LUDecomposition.GetSubMatrix(Atom.Math.Matrix,System.Int32[],System.Int32,System.Int32)">
            <summary>
            Helper method that gets the sub matrix specified 
            with the row indices, the start column, and the end column.
            </summary>
            <param name="matrix">The given Matrix.</param>
            <param name="rows">The row indices.</param>
            <param name="columnStart">The column start.</param>
            <param name="columnEnd">The column end.</param>
            <returns>The sub matrix.</returns>
        </member>
        <member name="F:Atom.Math.LUDecomposition.lu">
            <summary>
            Stores the LU docompusation.
            </summary>
        </member>
        <member name="F:Atom.Math.LUDecomposition.pivotSign">
            <summary>
            Stores the sign of permutation point.
            </summary>
        </member>
        <member name="F:Atom.Math.LUDecomposition.pivots">
            <summary>
            The permutation point. 
            </summary>
        </member>
        <member name="T:Atom.Math.QRDecomposition">
            <summary>
            In linear algebra, the QR decomposition (also called the QR factorization) of a <see cref="T:Atom.Math.Matrix"/> 
            is a decomposition of the matrix into an orthogonal and a triangular matrix. 
            The QR decomposition is often used to solve the linear least squares problem.
            The QR decomposition is also the basis for a particular eigenvalue algorithm, the QR algorithm.
            </summary>
            <remarks>
            Given a Row-by-Columns matrix A (with Rows >= Columns),
            the result of the QR decomposition is 
            a Rows-by-Columns orthogonal matrix Q and
            a Columns-by-Columns upper triangular matrix R
            so that A = Q*R.
            </remarks>
            <remarks>
            Adapted from the JAMA package : http://math.nist.gov/javanumerics/jama/
            </remarks>
        </member>
        <member name="P:Atom.Math.QRDecomposition.LeftFactor">
            <summary>
            Gets the (economy-sized) orthogonal factor Q, with A=QR.
            </summary>
            <value>The orthogonal factor.</value>
        </member>
        <member name="P:Atom.Math.QRDecomposition.RightFactor">
            <summary>
            Gets the the upper triangular factor R, with A=QR.
            </summary>
            <value>The upper triangular factor.</value>
        </member>
        <member name="P:Atom.Math.QRDecomposition.RowCountQR">
            <summary>
            Gets the row-count of the decomposed matrix.
            </summary>
        </member>
        <member name="P:Atom.Math.QRDecomposition.ColumnCountQR">
            <summary>
            Gets the column-count of the decomposed matrix.
            </summary>
        </member>
        <member name="P:Atom.Math.QRDecomposition.IsFullRank">
            <summary>
            Gets a value indicating whether the matrix is full rank.
            </summary>
            <value>
            Returns <see langword="true"/> if R, and hence A, has full rank; otherwise <see langword="false"/>.
            </value>
        </member>
        <member name="P:Atom.Math.QRDecomposition.HouseholderVectors">
            <summary>
            Gets the Householder vectors.
            </summary>
            <value>Lower trapezoidal matrix whose columns define the reflections.</value>
        </member>
        <member name="P:Atom.Math.QRDecomposition.UpperTriangularFactorR">
            <summary>
            Gets the the upper triangular factor of the decomposition.
            </summary>
            <value>A new Matrix that contains the upper triangular factor.</value>
        </member>
        <member name="P:Atom.Math.QRDecomposition.OrthogonalFactorQ">
            <summary>
            Gets the (economy-sized) orthogonal factor.
            </summary>
            <value>A new Matrix that contains the (economy-sized) orthogonal factor.</value>
        </member>
        <member name="M:Atom.Math.QRDecomposition.#ctor(Atom.Math.Matrix)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.QRDecomposition"/> class.
            </summary>
            <param name="matrix">A rectangular matrix.</param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="matrix"/> is null.
            </exception>
        </member>
        <member name="M:Atom.Math.QRDecomposition.Decompose(Atom.Math.Matrix)">
            <summary>
            Decomposes the specified matrix, using a QR decomposition.
            </summary>
            <param name="matrix">The matrix to decompose.</param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="matrix"/> is null.
            </exception>
        </member>
        <member name="M:Atom.Math.QRDecomposition.Solve(Atom.Math.Matrix)">
            <summary>
            Computes the least squares solution of A*X = B.
            </summary>
            <param name="matrixB">
            A Matrix with as many rows as A and any number of columns.
            </param>
            <returns>
            The Matrix X that minimizes the two norm of Q*R*X-B.
            </returns>
            <exception cref="T:System.ArgumentException">The row dimensions of the matrices must agree.</exception>
            <exception cref="T:System.InvalidOperationException">Matrix is rank deficient.</exception>
        </member>
        <member name="F:Atom.Math.QRDecomposition.qr">
            <summary>
            Stores the result of the the QR decomposition.
            </summary>
        </member>
        <member name="F:Atom.Math.QRDecomposition.diagonal">
            <summary>
            Stores the diagonale of R.
            </summary>
        </member>
        <member name="T:Atom.Math.SingularValueDecomposition">
            <summary>
            Implements Singular Value decomposition of rectangular Matrices.
            This is a sealed class.
            </summary>
            <remarks>
            <para>
            For an m-by-n matrix A with m >= n, the singular value decomposition 
            is an m-by-n orthogonal matrix U, an n-by-n diagonal matrix S, and
            an n-by-n orthogonal matrix V so that A = U*S*V'.
            </para><para>
            The singular values, sigma[k] = S[k, k], are ordered so that
            sigma[0] >= sigma[1] >= ... >= sigma[n-1].
            </para><para>
            The singular value decompostion always exists, so the constructor will
            never fail.  The matrix condition number and the effective numerical
            rank can be computed from this decomposition.
            </para>
            </remarks>
        </member>
        <member name="P:Atom.Math.SingularValueDecomposition.Norm2">
            <summary>
            Gets the two norm.
            </summary>
            <value>The two norm; max(S).</value>
        </member>
        <member name="P:Atom.Math.SingularValueDecomposition.Condition">
            <summary>
            Gets the two-norm condition number.
            </summary>
            <value>The two-norm condition number; max(S)/min(S).</value>
        </member>
        <member name="P:Atom.Math.SingularValueDecomposition.Rank">
            <summary>
            Gets the effective numerical matrix rank.
            </summary>
            <value>The number of non-negligible singular values.</value>
        </member>
        <member name="M:Atom.Math.SingularValueDecomposition.GetSingularValues">
            <summary>
            Gets the one-dimensional array of singular values.
            </summary>
            <remarks>This operation clones internal data, be careful when calling this method.</remarks>
            <returns>The diagonal matrix of S. </returns>
        </member>
        <member name="M:Atom.Math.SingularValueDecomposition.GetDiagonalSingularValues">
            <summary>
            Gets the diagonal matrix of singular values.
            </summary>
            <remarks>This operation clones internal data, be careful when calling this method.</remarks>
            <returns>A new Matrix that contains the singular values of the decomposed Matrix.</returns>
        </member>
        <member name="M:Atom.Math.SingularValueDecomposition.GetLeftSingularVectors">
            <summary>
            Gets the left singular vectors (U matrix).
            </summary>
            <remarks>This operation clones internal data, be careful when calling this method.</remarks>
            <returns>A new Matrix that contains the left singular vectors (U matrix).</returns>
        </member>
        <member name="M:Atom.Math.SingularValueDecomposition.GetRightSingularVectors">
            <summary>
            Gets the right singular vectors (V matrix).
            </summary>
            <remarks>This operation clones internal data, be careful when calling this method.</remarks>
            <returns>A new Matrix that contains the right singular vectors (V matrix).</returns>
        </member>
        <member name="M:Atom.Math.SingularValueDecomposition.#ctor(Atom.Math.Matrix)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.SingularValueDecomposition"/> class.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="argument"/> is null.
            </exception>
            <param name="argument">
            A rectangular input matrix.
            </param>
        </member>
        <member name="M:Atom.Math.SingularValueDecomposition.ReduceToBidiagonal(Atom.Math.Matrix,System.Single[],System.Int32@)">
            <summary>
            Reduce A to bidiagonal form, storing the diagonal elements
            in s and the super-diagonal elements in e.
            </summary>
            <param name="matrixA">The input matrix.</param>
            <param name="e">
            Will contain the the super-diagonal elements.
            </param>
            <param name="order">Will contain the order of the reduced bidiagonal matrix.</param>
        </member>
        <member name="M:Atom.Math.SingularValueDecomposition.ReduceBidiagonalComputeRowTransformation(Atom.Math.Matrix,System.Single[],System.Single[],System.Int32)">
            <summary>
            Computes the k-th row transformation and place the k-th super-diagonal in e[k].
            </summary>
            <remarks>
            Computes 2-norm without under/overflow.
            </remarks>
            <param name="matrixA">
            The input matrix.
            </param>
            <param name="e">
            Will contain the the super-diagonal elements.
            </param>
            <param name="work">An array that may be used for internal work.</param>
            <param name="k">The current index.</param>
        </member>
        <member name="M:Atom.Math.SingularValueDecomposition.ReduceToBidiagonalGenerateU(System.Int32,System.Int32)">
            <summary>
            Generates the U factor.
            </summary>
            <param name="minDimension">
            The smaller dimension.
            </param>
            <param name="nct">
            The column start index.
            </param>
        </member>
        <member name="M:Atom.Math.SingularValueDecomposition.ReduceToBidiagonalGenerateV(System.Single[],System.Int32,System.Int32)">
            <summary>
            Generates the V factor.
            </summary>
            <param name="e">
            Will contain the the super-diagonal elements.
            </param>
            <param name="minDimension">
            The smaller dimension.
            </param>
            <param name="nrt">
            The row start index.
            </param>
        </member>
        <member name="M:Atom.Math.SingularValueDecomposition.MainIterationLoop(System.Single[],System.Int32)">
            <summary>
            The main iteration loop for finding the singular values.
            </summary>
            <param name="e">Contains the the super-diagonal elements.</param>
            <param name="order">Will contain the order of the reduced bidiagonal matrix.</param>
        </member>
        <member name="M:Atom.Math.SingularValueDecomposition.PerformStepQR(System.Single[],System.Int32,System.Int32@,System.Int32)">
            <summary>
            Performs a single QR step.
            </summary>
            <param name="e">
            Will contain the the super-diagonal elements.
            </param>
            <param name="order"></param>
            <param name="iter"></param>
            <param name="k"></param>
        </member>
        <member name="M:Atom.Math.SingularValueDecomposition.SplitAtNegligibles(System.Single[],System.Int32,System.Int32)">
             <summary>
             Executes the Split at negligibles task.
             </summary>
             <param name="e">
             Will contain the the super-diagonal elements.
            </param>
             <param name="order"></param>
             <param name="k"></param>
        </member>
        <member name="M:Atom.Math.SingularValueDecomposition.DeflateNegligible(System.Single[],System.Int32,System.Int32)">
             <summary>
             Executes the Deflate Negligibles task.
             </summary>
             <param name="e">
             Will contain the the super-diagonal elements.
            </param>
             <param name="order"></param>
             <param name="k"></param>
        </member>
        <member name="M:Atom.Math.SingularValueDecomposition.Convergence(System.Int32,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Executes the Convergence task.
            </summary>
            <param name="lastOrder"></param>
            <param name="order"></param>
            <param name="iter"></param>
            <param name="k"></param>
        </member>
        <member name="F:Atom.Math.SingularValueDecomposition.factorU">
            <summary>
            The matrices that store the U and V factors.
            </summary>
        </member>
        <member name="F:Atom.Math.SingularValueDecomposition.factorV">
            <summary>
            The matrices that store the U and V factors.
            </summary>
        </member>
        <member name="F:Atom.Math.SingularValueDecomposition.wantU">
            <summary>
            States whether U factor is required to be calcualted.
            </summary>
        </member>
        <member name="F:Atom.Math.SingularValueDecomposition.wantV">
            <summary>
            States whether U factor is required to be calcualted.
            </summary>
        </member>
        <member name="F:Atom.Math.SingularValueDecomposition.values">
            <summary>
            The array for internal storage of singular values.
            </summary>
        </member>
        <member name="F:Atom.Math.SingularValueDecomposition.rowCount">
            <summary>
            The number of rows of the input matrix.
            </summary>
        </member>
        <member name="F:Atom.Math.SingularValueDecomposition.columnCount">
            <summary>
            The number of columns of the input matrix.
            </summary>
        </member>
        <member name="F:Atom.Math.SingularValueDecomposition.toTranspose">
            <summary>
            States whether all the results provided by the method or properties should be transposed.
            </summary>
            <remarks>
            (vermorel) The initial implementation was assuming that
            m &gt;= n, but in fact, it is easy to handle the case m &lt; n
            by transposing all the results.
            </remarks>
        </member>
        <member name="T:Atom.Math.Matrix">
            <summary>
            Represents a N x M single-precission floating point Matrix.
            </summary>
        </member>
        <member name="P:Atom.Math.Matrix.Transpose">
            <summary>
            Gets the transpose of this <see cref="T:Atom.Math.Matrix"/>.
            </summary>
            <remarks>
            The transpose of a Matrix is the same Matrix but with exchanged rows and columns.
            </remarks>
            <value>The transposed Matrix.</value>
        </member>
        <member name="P:Atom.Math.Matrix.Inverse">
            <summary>
            Gets the inverse of this <see cref="T:Atom.Math.Matrix"/>.
            </summary>
            <value>
            The inverse of a matrix A is called A^-1
            and can be used to 'undo' the the matrix:
            A * A^-1 = I (Identity).
            </value>
        </member>
        <member name="P:Atom.Math.Matrix.Determinant">
            <summary>
            Gets the determinant of this <see cref="T:Atom.Math.Matrix"/>.
            </summary>
            <value>If the determinant of a matrix is zero then the matrix is not invertable.</value>
        </member>
        <member name="P:Atom.Math.Matrix.Trace">
            <summary>
            Gets the trace of this <see cref="T:Atom.Math.Matrix"/>,
            which is the sum of the diagonal elements of the Matrix.
            </summary>
            <value>The sum of the diagonal elements of the matrix.</value>
        </member>
        <member name="P:Atom.Math.Matrix.Rank">
            <summary> 
            Gets the effective numerical rank of this <see cref="T:Atom.Math.Matrix"/>.
            </summary>
            <remarks>
            This property re-calculates the <see cref="T:Atom.Math.SingularValueDecomposition"/> of this Matrix,
            consider caching the decomposition or the value.
            </remarks>
            <value>
            The effective numerical rank, obtained from <see cref="T:Atom.Math.SingularValueDecomposition"/>.
            </value>
        </member>
        <member name="P:Atom.Math.Matrix.IsSymmetric">
            <summary>
            Gets a value indicating whether this <see cref="T:Atom.Math.Matrix"/> is symmetric.
            </summary>
            <remarks>
            A symmetric matrix is a square matrix, that is equal to its transpose.
            </remarks>
            <value>
            Returns <see langword="true"/> if this Matrix is symmetric;
            otherwise <see langword="false"/>.
            </value>
        </member>
        <member name="P:Atom.Math.Matrix.IsDiagonal">
            <summary>
            Gets a value indicating whether this <see cref="T:Atom.Math.Matrix"/> is diagonal.
            </summary>
            <remarks>
            A diagonal matrix is a square matrix in which 
            the entries outside the main diagonal (↘) are all zero.
            </remarks>
            <value>
            Returns <see langword="true"/> if the Matrix is diagonal; otherwise <see langword="false"/>.
            </value>
        </member>
        <member name="P:Atom.Math.Matrix.IsSingular">
            <summary>
            Gets a value indicating whether this <see cref="T:Atom.Math.Matrix"/> is singular.
            </summary>
            <remarks>
            A square matrix is singular or degenerated
            if its not invertable. (The <see cref="P:Atom.Math.Matrix.Determinant"/> is zero.)
            </remarks>
            <value>
            Returns <see langword="true"/> if the Matrix is singular; otherwise <see langword="false"/>.
            </value>
        </member>
        <member name="P:Atom.Math.Matrix.IsTriangular">
            <summary>
            Gets a value indicating whether this <see cref="T:Atom.Math.Matrix"/> is triangular.
            </summary>
            <value>
            A <see cref="T:Atom.Math.TriangularMatrixType"/> enum value indicating whether 
            the matrix is UpperTriangular, LowerTriangular, Diagonal or not.
            </value>      
        </member>
        <member name="P:Atom.Math.Matrix.Condition">
            <summary>
            Gets the 2-norm condition number of this Matrixs;
            which is the ratio of largest to smallest singular value.
            </summary>
            <remarks>
            This property re-calculates the <see cref="T:Atom.Math.SingularValueDecomposition"/> of this Matrix,
            consider caching the decomposition or the value.
            </remarks>
            <value>The ratio of largest to smallest singular value.</value>
        </member>
        <member name="P:Atom.Math.Matrix.ManhattanNorm">
            <summary>
            Gets the 1-norm of this <see cref="T:Atom.Math.Matrix"/>,
            which is the greatest absolute column sum of the Matrix.
            </summary>
            <value>
            The greatest absolute column sum of the Matrix.
            </value>
        </member>
        <member name="P:Atom.Math.Matrix.InfinityNorm">
            <summary>
            Gets the infinity norm of this <see cref="T:Atom.Math.Matrix"/>,
            which is the greatest absolute row sum of the Matrix.
            </summary>
            <value>
            The greatest absolute row sum of the Matrix.
            </value>
        </member>
        <member name="P:Atom.Math.Matrix.FrobeniusNorm">
            <summary>
            Gets the Frobenius Norm of this <see cref="T:Atom.Math.Matrix"/>,
            which is the square root of sum of squares of all elements.
            </summary>
            <value>The square root of sum of squares of all elements.</value>
        </member>
        <member name="M:Atom.Math.Matrix.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.Matrix"/> class.
            </summary>
            <param name="rowCount">
            The number of rows the new Matrix should have.
            </param>
            <param name="columnCount">
            The number of columns the new Matrix should have.
            </param>
            <exception cref="T:System.ArgumentException">
            If <paramref name="rowCount"/> or <paramref name="columnCount"/> is less than or equal 0.
            </exception>
        </member>
        <member name="M:Atom.Math.Matrix.#ctor(Atom.Math.Matrix2)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.Matrix"/> class,
            cloning the given 2x2 <see cref="T:Atom.Math.Matrix2"/>.
            </summary>
            <param name="matrix">
            The matrix to clone.
            </param>
        </member>
        <member name="M:Atom.Math.Matrix.#ctor(Atom.Math.Matrix4)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.Matrix"/> class,
            cloning the given 4x4 <see cref="T:Atom.Math.Matrix4"/>.
            </summary>
            <param name="matrix">
            The matrix to clone.
            </param>
        </member>
        <member name="M:Atom.Math.Matrix.#ctor(System.Single[0:,0:])">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.Matrix"/> class.
            </summary>
            <param name="elements">
            The elements of the new Matrix.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="elements"/> is null.
            </exception>
        </member>
        <member name="M:Atom.Math.Matrix.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> 
            Initializes a new instance of the <see cref="T:Atom.Math.Matrix"/> class; and
            sets values of the new <see cref="T:Atom.Math.Matrix"/> to the
            values specified by the <see cref="T:System.Runtime.Serialization.SerializationInfo"/>.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds
            the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that 
            contains contextual information about the source or destination.
            Can be null.
            </param>
        </member>
        <member name="M:Atom.Math.Matrix.Solve(Atom.Math.Matrix,Atom.Math.Matrix)">
            <summary>
            Calculates the LHS solution point if the matrix is square or the least squares solution otherwise.
            </summary>
            <param name="left">The Matrix on the left side.</param>
            <param name="right">The Matrix on the right side.</param>
            <returns>Returns the LHS solution point if the matrix is square or the least squares solution otherwise.</returns>
        </member>
        <member name="M:Atom.Math.Matrix.Concatenate(Atom.Math.Matrix,Atom.Math.Matrix)">
            <summary>
            Concatenates two matrices in horizontal manner.
            </summary>
            <param name="left">The matrix on the left side of the equation.</param>
            <param name="right">The matrix on the right side of the equation.</param>
            <returns>The result of the concatenate operation.</returns>
        </member>
        <member name="M:Atom.Math.Matrix.GetRow(System.Int32)">
            <summary>
            Gets the row at the specified zero-based index.
            </summary>
            <param name="row">
            The zero-based index of the row to get.
            </param>
            <returns>
            A Vector containing the values of the requested row.
            </returns>
        </member>
        <member name="M:Atom.Math.Matrix.GetColumn(System.Int32)">
            <summary>
            Gets the column at the specified zero-based index.
            </summary>
            <param name="column">
            The zero-based index of the column to get.
            </param>
            <returns>
            A Vector containing the values of the requested column.
            </returns>
        </member>
        <member name="M:Atom.Math.Matrix.GetSubMatrix(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets a sub matrix of this <see cref="T:Atom.Math.Matrix"/>.
            </summary>
            <param name="rowStart">
            The row start index.
            </param>
            <param name="columnStart">
            The column start index.
            </param>
            <param name="rowCount">
            The number of rows to get.
            </param>
            <param name="columnCount">
            The number of columns to get.
            </param>
            <returns>
            The sub matrix of the current matrix.
            </returns>
        </member>
        <member name="M:Atom.Math.Matrix.Multiply(Atom.Math.Matrix,Atom.Math.Matrix)">
            <summary>
            Returns the result of multiplying two matrices.
            </summary>
            <param name="left">The matrix on the left side of the equation.</param>
            <param name="right">The matrix on the right side of the equation.</param>
            <returns>The result of the times operation.</returns>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="left"/> or <paramref name="right"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the <see cref="P:Atom.Collections.ObjectMatrix`1.ColumnCount"/> of the left Matrix is
            not equal the <see cref="P:Atom.Collections.ObjectMatrix`1.RowCount"/> of the right Matrix.
            </exception>
        </member>
        <member name="M:Atom.Math.Matrix.Multiply(Atom.Math.Matrix,System.Single)">
            <summary>
            Multiplies the given <see cref="T:Atom.Math.Matrix"/> by the given <paramref name="scalar"/>.
            </summary>
            <param name="matrix">The <see cref="T:Atom.Math.Matrix"/> on the left side of the equation.</param>
            <param name="scalar">The scalar on the right side of the equation.</param>
            <returns>
            The result of the operation.
            </returns>
        </member>
        <member name="M:Atom.Math.Matrix.MultiplyParallel(Atom.Math.Matrix,Atom.Math.Matrix)">
            <summary>
            Returns the result of multiplying two matrices.
            This operation tries to use parallism to calcualte the result.
            </summary>
            <param name="left">The matrix on the left side of the equation.</param>
            <param name="right">The matrix on the right side of the equation.</param>
            <returns>The result of the times operation.</returns>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="left"/> or <paramref name="right"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the <see cref="P:Atom.Collections.ObjectMatrix`1.ColumnCount"/> of the left Matrix is
            not equal the <see cref="P:Atom.Collections.ObjectMatrix`1.RowCount"/> of the right Matrix.
            </exception>
        </member>
        <member name="M:Atom.Math.Matrix.Add(Atom.Math.Matrix,Atom.Math.Matrix)">
            <summary>
            Returns the result of adding 
            the <paramref name="right"/> <see cref="T:Atom.Math.Matrix"/> to
            the <paramref name="left"/> <see cref="T:Atom.Math.Matrix"/>.
            </summary>
            <param name="left">The Matrix on the left side of the equation.</param>
            <param name="right">The Matrix on the right side of the equation.</param>    
            <returns>
            The result of the operation.
            </returns>
        </member>
        <member name="M:Atom.Math.Matrix.Subtract(Atom.Math.Matrix,Atom.Math.Matrix)">
            <summary>
            Returns the result of subtracting 
            the <paramref name="right"/> <see cref="T:Atom.Math.Matrix"/> from
            the <paramref name="left"/> <see cref="T:Atom.Math.Matrix"/>.
            </summary>
            <param name="left">The Matrix on the left side of the equation.</param>
            <param name="right">The Matrix on the right side of the equation.</param>    
            <returns>
            The result of the operation.
            </returns>     
            <exception cref="T:System.ArgumentNullException">
            If any of the specified Matrices is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the dimensions of the specified Matrices is not equal.
            </exception>
        </member>
        <member name="M:Atom.Math.Matrix.Negate(Atom.Math.Matrix)">
            <summary>
            Returns the result of negating the specified <see cref="T:Atom.Math.Matrix"/>.
            </summary>
            <param name="matrix">
            The Matrix to negate.
            </param>
            <returns>
            The result of the operation.
            </returns>
        </member>
        <member name="M:Atom.Math.Matrix.Identity(System.Int32,System.Int32)">
            <summary>
            Constructs an identity <see cref="T:Atom.Math.Matrix"/> of the specified size.
            </summary>
            <param name="rowCount">The number of rows.</param>
            <param name="columnCount">The number of columns.</param>
            <returns>An identity matrix of the specified size.</returns>
        </member>
        <member name="M:Atom.Math.Matrix.Diagonal(System.Int32,System.Int32,System.Single)">
            <summary>
            Constructs a diagonal <see cref="T:Atom.Math.Matrix"/> of the specified size with the specified value.
            </summary>
            <param name="rowCount">The number of rows.</param>
            <param name="columnCount">The number of columns.</param>
            <param name="value">The value of diagonal elements.</param>
            <returns>A diagonal matrix of the specified size.</returns>
        </member>
        <member name="M:Atom.Math.Matrix.Equals(System.Object)">
            <summary>
            Returns whether the specified <see cref="T:System.Object"/>
            is equal to this <see cref="T:Atom.Math.Matrix"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to test against. Can be null.
            </param>
            <returns>
            Returns <see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to this <see cref="T:Atom.Math.Matrix"/>;
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.Matrix.Equals(Atom.Math.Matrix)">
            <summary>
            Returns whether the specified <see cref="T:Atom.Math.Matrix"/>
            is equal to this <see cref="T:Atom.Math.Matrix"/>.
            </summary>
            <param name="other">
            The <see cref="T:Atom.Math.Matrix"/> to test against. Can be null.
            </param>
            <returns>
            Returns <see langword="true"/> if the specified <see cref="T:Atom.Math.Matrix"/> is equal to this <see cref="T:Atom.Math.Matrix"/>;
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.Matrix.GetHashCode">
            <summary>
            Returns the hash code of this <see cref="T:Atom.Math.Matrix"/> instance.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Atom.Math.Matrix.Clone">
            <summary>
            Returns a clone of this <see cref="T:Atom.Math.Matrix"/>.
            </summary>
            <returns>
            A clone of this Matrix.
            </returns>
        </member>
        <member name="M:Atom.Math.Matrix.System#ICloneable#Clone">
            <summary>
            Returns a clone of this <see cref="T:Atom.Math.Matrix"/>.
            </summary>
            <returns>
            A clone of this Matrix.
            </returns>
        </member>
        <member name="M:Atom.Math.Matrix.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            with the data needed to serialize the <see cref="T:Atom.Math.Matrix"/>.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            to populate with data.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the given info is null.
            </exception>
            <param name="context"> 
            The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>)
            for this serialization.
            </param>
        </member>
        <member name="M:Atom.Math.Matrix.ToString">
            <summary>
            Returns a humen-readable representation of the <see cref="T:Atom.Math.Matrix"/>.
            </summary>
            <returns>A string representing this ObjectMatrix.</returns>
        </member>
        <member name="M:Atom.Math.Matrix.ToString(System.IFormatProvider)">
            <summary>
            Returns a humen-readable representation of the <see cref="T:Atom.Math.Matrix"/>.
            </summary>
            <param name="formatProvider">
            Provides access to culture-sensitive formatting information.
            </param>
            <returns>A string representing this ObjectMatrix.</returns>
        </member>
        <member name="M:Atom.Math.Matrix.ToStringNoZero">
            <summary>
            Returns a humen-readable representation of the <see cref="T:Atom.Math.Matrix"/>,
            replacing all zeroes with an empty space.
            </summary>
            <returns>A string representing this ObjectMatrix.</returns>
        </member>
        <member name="M:Atom.Math.Matrix.ToStringNoZero(System.IFormatProvider)">
            <summary>
            Returns a humen-readable representation of the <see cref="T:Atom.Math.Matrix"/>,
            replacing all zeroes with an empty space.
            </summary>
            <param name="formatProvider">
            Provides access to culture-sensitive formatting information.
            </param>
            <returns>A string representing this ObjectMatrix.</returns>
        </member>
        <member name="M:Atom.Math.Matrix.op_Multiply(Atom.Math.Matrix,Atom.Math.Matrix)">
            <summary>
            Returns the result of multiplying two matrices.
            </summary>
            <param name="left">The matrix on the left side of the equation.</param>
            <param name="right">The matrix on the right side of the equation.</param>
            <returns>The result of the times operation.</returns>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="left"/> or <paramref name="right"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the <see cref="P:Atom.Collections.ObjectMatrix`1.ColumnCount"/> of the left Matrix is
            not equal the <see cref="P:Atom.Collections.ObjectMatrix`1.RowCount"/> of the right Matrix.
            </exception>
        </member>
        <member name="M:Atom.Math.Matrix.op_Multiply(Atom.Math.Matrix,System.Single)">
            <summary>
            Multiplies the given <see cref="T:Atom.Math.Matrix"/> by the given <paramref name="scalar"/>.
            </summary>
            <param name="matrix">The <see cref="T:Atom.Math.Matrix"/> on the left side of the equation.</param>
            <param name="scalar">The scalar on the right side of the equation.</param>
            <returns>
            The result of the operation.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="matrix"/> is null.
            </exception>
        </member>
        <member name="M:Atom.Math.Matrix.op_Multiply(System.Single,Atom.Math.Matrix)">
            <summary>
            Multiplies the given <see cref="T:Atom.Math.Matrix"/> by the given <paramref name="scalar"/>.
            </summary>
            <param name="scalar">The scalar on the left side of the equation.</param>
            <param name="matrix">The <see cref="T:Atom.Math.Matrix"/> on the right side of the equation.</param>
            <returns>
            The result of the operation.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="matrix"/> is null.
            </exception>
        </member>
        <member name="M:Atom.Math.Matrix.op_Addition(Atom.Math.Matrix,Atom.Math.Matrix)">
            <summary>
            Returns the result of adding 
            the <paramref name="right"/> <see cref="T:Atom.Math.Matrix"/> to
            the <paramref name="left"/> <see cref="T:Atom.Math.Matrix"/>.
            </summary>
            <param name="left">The Matrix on the left side of the equation.</param>
            <param name="right">The Matrix on the right side of the equation.</param>    
            <returns>
            The result of the operation.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If any of the specified Matrices is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the dimensions of the specified Matrices is not equal.
            </exception>
        </member>
        <member name="M:Atom.Math.Matrix.op_Subtraction(Atom.Math.Matrix,Atom.Math.Matrix)">
            <summary>
            Returns the result of subtracting 
            the <paramref name="right"/> <see cref="T:Atom.Math.Matrix"/> from
            the <paramref name="left"/> <see cref="T:Atom.Math.Matrix"/>.
            </summary>
            <param name="left">The Matrix on the left side of the equation.</param>
            <param name="right">The Matrix on the right side of the equation.</param>    
            <returns>
            The result of the operation.
            </returns>     
            <exception cref="T:System.ArgumentNullException">
            If any of the specified Matrices is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the dimensions of the specified Matrices is not equal.
            </exception>
        </member>
        <member name="M:Atom.Math.Matrix.op_UnaryNegation(Atom.Math.Matrix)">
            <summary>
            Returns the result of negating the specified <see cref="T:Atom.Math.Matrix"/>.
            </summary>
            <param name="matrix">
            The Matrix to negate.
            </param>
            <returns>
            The result of the operation.
            </returns>
        </member>
        <member name="M:Atom.Math.Matrix.op_Equality(Atom.Math.Matrix,Atom.Math.Matrix)">
            <summary>
            Returns whether given <see cref="T:Atom.Math.Matrix"/> instances are equal.
            </summary>
            <param name="left">The Matrix on the left side of the equation.</param>
            <param name="right">The Matrix on the right side of the equation.</param>
            <returns>
            Returns <see langword="true"/> if they are equal; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.Matrix.op_Inequality(Atom.Math.Matrix,Atom.Math.Matrix)">
            <summary>
            Returns whether given <see cref="T:Atom.Math.Matrix"/> instances are not equal.
            </summary>
            <param name="left">The Matrix on the left side of the equation.</param>
            <param name="right">The Matrix on the right side of the equation.</param>
            <returns>
            Returns <see langword="true"/> if they are not equal; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Atom.Math.Matrix2">
            <summary> 
            Represents a 2x2 homogenous single-precission floating point Matrix. 
            </summary>
        </member>
        <member name="F:Atom.Math.Matrix2.Identity">
            <summary> 
            The identity matrix. (1, 0, 0, 1) This is a readonly field.
            </summary>
        </member>
        <member name="F:Atom.Math.Matrix2.Zero">
            <summary> 
            A matrix that contains only zeros. (0, 0, 0, 0) This is a readonly field.
            </summary>
        </member>
        <member name="F:Atom.Math.Matrix2.M11">
            <summary> 
            Element of the first row of the Matrix.
            </summary>
        </member>
        <member name="F:Atom.Math.Matrix2.M12">
            <summary> 
            Element of the first row of the Matrix.
            </summary>
        </member>
        <member name="F:Atom.Math.Matrix2.M21">
            <summary> 
            Element of the second row of the Matrix.
            </summary>
        </member>
        <member name="F:Atom.Math.Matrix2.M22">
            <summary> 
            Element of the second row of the Matrix.
            </summary>
        </member>
        <member name="P:Atom.Math.Matrix2.IsSymmetric">
            <summary>
            Gets a value indicating whether this <see cref="T:Atom.Math.Matrix2"/> is symmetric.
            </summary>   
            <remarks>
            A symmetric matrix is a square matrix, that is equal to its transpose.
            </remarks>
            <value>
            Returns <see langword="true"/> if the Matrix is symmetric; otherwise <see langword="false"/>.
            </value>
        </member>
        <member name="P:Atom.Math.Matrix2.IsSingular">
            <summary>
            Gets a value indicating whether this <see cref="T:Atom.Math.Matrix2"/> is singular/degenerated.
            A matrix has no inverse if its singular.
            </summary>
            <remarks>
            A matrix is singular if its determinant is zero.
            Another way to test for singularity is to prove that
            there exists a vector x (x!= null-vector) where:
            Ax=0-vector.
            </remarks>
            <value>
            Returns <see langword="true"/> if the Matrix is singular; otherwise <see langword="false"/>.
            </value>
        </member>
        <member name="P:Atom.Math.Matrix2.Transpose">
            <summary>
            Gets the transpose of this <see cref="T:Atom.Math.Matrix2"/>. 
            </summary>
            <value>
            The transpose of this Matrix. T(T(m)) == m.
            </value>
        </member>
        <member name="P:Atom.Math.Matrix2.Inverse">
            <summary> 
            Gets the inverse of this <see cref="T:Atom.Math.Matrix2"/>.
            </summary>
            <value>
            Adjoint / Determinant is the Inverse of the matrix. 
            A matrix doesn't has an inverse if the determinant is zero.
            </value>
        </member>
        <member name="P:Atom.Math.Matrix2.Adjoint">
            <summary>
            Gets the adjoint of this Matrix2.
            </summary>
            <value>
            Adjoint / Determinant is the Inverse of the matrix.
            </value>
        </member>
        <member name="P:Atom.Math.Matrix2.Determinant">
            <summary>
            Gets the determinant of this <see cref="T:Atom.Math.Matrix2"/>. 
            </summary>
            <value> 
            A Matrix has no inverse if its Determinant is zero.
            </value>
        </member>
        <member name="P:Atom.Math.Matrix2.Angle">
            <summary>
            Gets the angle of this Matrix2, starting from the <see cref="F:Atom.Math.Matrix2.Identity"/>.
            </summary>
            <value>The angle in radians.</value>
        </member>
        <member name="P:Atom.Math.Matrix2.ReflectionY">
            <summary> 
            Gets the reflection of this <see cref="T:Atom.Math.Matrix2"/> through the Y-axis. 
            </summary>
            <value>The reflection of this <see cref="T:Atom.Math.Matrix2"/> through the Y-axis.</value>
        </member>
        <member name="P:Atom.Math.Matrix2.ReflectionX">
            <summary> 
            Gets the reflection of this <see cref="T:Atom.Math.Matrix2"/> through the X-axis. 
            </summary>
            <value>The reflection of this <see cref="T:Atom.Math.Matrix2"/> through the X-axis.</value>
        </member>
        <member name="P:Atom.Math.Matrix2.ReflectionYX">
            <summary> 
            Gets the reflection of this <see cref="T:Atom.Math.Matrix2"/> through the (Y+X)-axis. 
            </summary>
            <value>The reflection of this <see cref="T:Atom.Math.Matrix2"/> through the (Y+X)-axis.</value>
        </member>
        <member name="P:Atom.Math.Matrix2.ReflectionYMinusX">
            <summary> 
            Gets the reflection of this <see cref="T:Atom.Math.Matrix2"/> through the (Y-X)-axis. 
            </summary>
            <value>The reflection of this <see cref="T:Atom.Math.Matrix2"/> through the (Y-X)-axis.</value>
        </member>
        <member name="P:Atom.Math.Matrix2.Trace">
            <summary>
            Gets the trace of this <see cref="T:Atom.Math.Matrix2"/>;
            which is the sum of its diagonal elements.
            </summary>
            <value>The trace value of this Matrix.</value>
        </member>
        <member name="P:Atom.Math.Matrix2.Item(System.Int32)">
            <summary>
            Gets or sets the element of this <see cref="T:Atom.Math.Matrix2"/> at the given index. (M11=0, M12=1, M21=2, M22=3).
            </summary>
            <param name="index">The zero-based index.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"> 
            If the <paramref name="index"/> is invalid.
            </exception>
        </member>
        <member name="P:Atom.Math.Matrix2.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the matrix element in the specified <paramref name="row"/> and <paramref name="column"/>.
            </summary>
            <param name="row">The zero-based row index.</param>
            <param name="column">The zero-based column index.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"> 
            If the <paramref name="row"/> or <paramref name="column"/> is invalid.
            </exception>
        </member>
        <member name="M:Atom.Math.Matrix2.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.Matrix2"/> struct.
            </summary>
            <param name="m11">
            The X-coordiante of the x-axis.
            </param>
            <param name="m12">
            The Y-coordiante of the x-axis.
            </param>
            <param name="m21">
            The X-coordiante of the y-axis.
            </param>
            <param name="m22">
            The Y-coordiante of the y-axis.
            </param>
        </member>
        <member name="M:Atom.Math.Matrix2.#ctor(Atom.Math.Vector2,Atom.Math.Vector2)">
            <summary> 
            Initializes a new instance of the <see cref="T:Atom.Math.Matrix2"/> struct. 
            </summary>
            <param name="axisX"> The x-axis of the new <see cref="T:Atom.Math.Matrix2"/> (m00, m10). </param>
            <param name="axisY"> The y-axis of the new <see cref="T:Atom.Math.Matrix2"/> (m01, m11). </param>
        </member>
        <member name="M:Atom.Math.Matrix2.#ctor(Atom.Math.Matrix2)">
            <summary> 
            Initializes a new instance of the <see cref="T:Atom.Math.Matrix2"/> struct;
            and copies the elements from the given <see cref="T:Atom.Math.Matrix2"/> into the new one.
            </summary>
            <param name="matrix"> <see cref="T:Atom.Math.Matrix2"/> to copy. </param>
        </member>
        <member name="M:Atom.Math.Matrix2.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.Matrix2"/> struct.
            </summary>
            <param name="elements">
            The elements of the new Matrix.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="elements"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the length of the specified <paramref name="elements"/> array is less than 4.
            </exception>
        </member>
        <member name="M:Atom.Math.Matrix2.GetRow(System.Int32)">
            <summary>
            Gets the row at the specified <paramref name="rowIndex"/>.
            </summary>
            <param name="rowIndex">
            The index of the row to get.
            </param>
            <returns> An array contain the row of the specifie index. </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If <paramref name="rowIndex"/> is not 0 or 1.
            </exception>
        </member>
        <member name="M:Atom.Math.Matrix2.GetColumn(System.Int32)">
            <summary>
            Gets the column at the specified <paramref name="columnIndex"/>.
            </summary>
            <param name="columnIndex"> The index of the column to get. </param>
            <returns> An array contain the column of the specifie index. </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If <paramref name="columnIndex"/> is not 0 or 1.
            </exception>
        </member>
        <member name="M:Atom.Math.Matrix2.OrthoNormalize">
            <summary>
            Orthogonal normalization algorithm. (Gram-Schmidt)
            Can be used to regenerate a degenerated orthogonal matrix. Such degeneration
            can happen because of floating point errors.
            </summary>
            <remarks>
            If the matrix is M = [m0|left], then orthonormal output matrix is Q = [q0|q1].
            </remarks>
        </member>
        <member name="M:Atom.Math.Matrix2.TransposeTimes(Atom.Math.Matrix2,Atom.Math.Matrix2)">
            <summary> TransposeTimes method. </summary>
            <remarks> P = matrix^VertexData*B, P[r][c] = sum_m matrix[Rows][r]*B[Rows][c]</remarks>
            <param name="left">The matrix on the left side of the equation.</param>
            <param name="right">The matrix on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Matrix2.TimesTranspose(Atom.Math.Matrix2,Atom.Math.Matrix2)">
            <summary> TimesTranspose method. </summary>
            <remarks> P = matrix*B^VertexData, P[r][c] = sum_m matrix[r][Rows]*B[c][Rows]</remarks>
            <param name="left">The matrix on the left side of the equation.</param>
            <param name="right">The matrix on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Matrix2.Tensor(Atom.Math.Matrix2,Atom.Math.Matrix2)">
            <summary>
            Returns the tensor product (also called outer product) of the given 2x2 matrices. </summary>
            <remarks>
            See http://en.wikipedia.org/wiki/Tensor_product for more information.
            </remarks>
            <param name="left">The first input matrix.</param>
            <param name="right">The second input matrix.</param>
            <returns> The result of the operation. </returns>
        </member>
        <member name="M:Atom.Math.Matrix2.Tensor(Atom.Math.Matrix2@,Atom.Math.Matrix2@,Atom.Math.Matrix4@)">
            <summary>
            Returns the tensor product (also called outer product) of the given 2x2 matrices. </summary>
            <remarks>
            See http://en.wikipedia.org/wiki/Tensor_product for more information.
            </remarks>
            <param name="left">The first input matrix. This value will not be modified by this method.</param>
            <param name="right">The second input matrix. This value will not be modified by this method.</param>
            <param name="result"> Will contain the result of the operation. </param>
        </member>
        <member name="M:Atom.Math.Matrix2.EigenDecomposition(Atom.Math.Matrix2,Atom.Math.Matrix2@,Atom.Math.Matrix2@)">
            <summary>
            Decomposites the specified <paramref name="matrix"/> into
            a <paramref name="rotation"/> matrix and a <paramref name="diagonal"/> matrix.
            </summary>
            <param name="matrix">
            The matrix to decompose.
            </param>
            <param name="rotation">
            Will contain the rotational portion of the <see cref="T:Atom.Math.Matrix2"/>.
            </param>
            <param name="diagonal">
            Will contain the diagonal portion of the <see cref="T:Atom.Math.Matrix2"/>.
            </param>
        </member>
        <member name="M:Atom.Math.Matrix2.GetEigenValues(Atom.Math.Complex@,Atom.Math.Complex@)">
            <summary>
            Finds the eigen values of this <see cref="T:Atom.Math.Matrix2"/>.
            </summary>
            <param name="lambdaA">
            Will contain the first eigen value.
            </param>
            <param name="lambdaB">
            Will contain the second eigen value.
            </param>
        </member>
        <member name="M:Atom.Math.Matrix2.GetEigenVectors(Atom.Math.ComplexVector2@,Atom.Math.ComplexVector2@)">
            <summary>
            Receives the eigenvectors of this <see cref="T:Atom.Math.Matrix2"/>.
            </summary>
            <param name="eigenVectorA">
            Will contain the first eigenvector of this <see cref="T:Atom.Math.Matrix2"/>.
            </param>
            <param name="eigenVectorB">
            Will contain the second eigenvector of this <see cref="T:Atom.Math.Matrix2"/>.
            </param>
        </member>
        <member name="M:Atom.Math.Matrix2.GetEigenVectors(Atom.Math.Complex,Atom.Math.Complex,Atom.Math.ComplexVector2@,Atom.Math.ComplexVector2@)">
            <summary>
            Receives the eigenvectors of this <see cref="T:Atom.Math.Matrix2"/>.
            </summary>
            <param name="eigenValueA">
            The first pre-computed eigenvalue of this <see cref="T:Atom.Math.Matrix2"/>.
            </param>
            <param name="eigenValueB">
            The second pre-computed eigenvalue of this <see cref="T:Atom.Math.Matrix2"/>.
            </param>
            <param name="eigenVectorA">
            Will contain the first eigenvector of this <see cref="T:Atom.Math.Matrix2"/>.
            </param>
            <param name="eigenVectorB">
            Will contain the second eigenvector of this <see cref="T:Atom.Math.Matrix2"/>.
            </param>
        </member>
        <member name="M:Atom.Math.Matrix2.Add(Atom.Math.Matrix2,Atom.Math.Matrix2)">
            <summary>
            Returns the result of adding the right <see cref="T:Atom.Math.Matrix2"/> to the left <see cref="T:Atom.Math.Matrix2"/>. 
            </summary>
            <param name="left"> The <see cref="T:Atom.Math.Matrix2"/> on the left side of the equation. </param>
            <param name="right"> The <see cref="T:Atom.Math.Matrix2"/> on the right side of the equation. </param>
            <returns>
            The result of this operation.
            </returns>
        </member>
        <member name="M:Atom.Math.Matrix2.Add(Atom.Math.Matrix2@,Atom.Math.Matrix2@,Atom.Math.Matrix2@)">
            <summary>
            Stores the result of adding the right <see cref="T:Atom.Math.Matrix2"/> to the left <see cref="T:Atom.Math.Matrix2"/>
            in the given <paramref name="result"/> variable.
            </summary>
            <param name="left">
            The <see cref="T:Atom.Math.Matrix2"/> on the left side of the equation. This value will not be modified by this method.
            </param>
            <param name="right">
            The <see cref="T:Atom.Math.Matrix2"/> on the right side of the equation. This value will not be modified by this method.
            </param>
            <param name="result">Will contain the result of the operation.</param>
        </member>
        <member name="M:Atom.Math.Matrix2.Subtract(Atom.Math.Matrix2,Atom.Math.Matrix2)">
            <summary>
            Returns the result of subtracting the right <see cref="T:Atom.Math.Matrix2"/> from the left <see cref="T:Atom.Math.Matrix2"/>. 
            </summary>
            <param name="left"> The <see cref="T:Atom.Math.Matrix2"/> on the left side of the equation. </param>
            <param name="right"> The <see cref="T:Atom.Math.Matrix2"/> on the right side of the equation. </param>
            <returns>
            The result of this operation.
            </returns>
        </member>
        <member name="M:Atom.Math.Matrix2.Subtract(Atom.Math.Matrix2@,Atom.Math.Matrix2@,Atom.Math.Matrix2@)">
            <summary>
            Stores the result of subtracting the right <see cref="T:Atom.Math.Matrix2"/> from the left <see cref="T:Atom.Math.Matrix2"/>
            in the given <paramref name="result"/> variable.
            </summary>
            <param name="left">
            The <see cref="T:Atom.Math.Matrix2"/> on the left side of the equation. This value will not be modified by this method.
            </param>
            <param name="right">
            The <see cref="T:Atom.Math.Matrix2"/> on the right side of the equation. This value will not be modified by this method.
            </param>
            <param name="result">Will contain the result of the operation.</param>
        </member>
        <member name="M:Atom.Math.Matrix2.Multiply(Atom.Math.Matrix2,Atom.Math.Matrix2)">
            <summary>
            Returns the result of multiplying the left <see cref="T:Atom.Math.Matrix2"/> by the right <see cref="T:Atom.Math.Matrix2"/>. 
            </summary>
            <param name="left">
            The <see cref="T:Atom.Math.Matrix2"/> on the left side of the equation.
            </param>
            <param name="right">
            The <see cref="T:Atom.Math.Matrix2"/> on the right side of the equation.
            </param>
            <returns>
            The result of this operation.
            </returns>
        </member>
        <member name="M:Atom.Math.Matrix2.Multiply(Atom.Math.Matrix2@,Atom.Math.Matrix2@,Atom.Math.Matrix2@)">
            <summary>
            Stores the result of multiplying the left <see cref="T:Atom.Math.Matrix2"/> by the right <see cref="T:Atom.Math.Matrix2"/>
            in the given <paramref name="result"/> variable.
            </summary>
            <param name="left">
            The <see cref="T:Atom.Math.Matrix2"/> on the left side of the equation. This value will not be modified by this method.
            </param>
            <param name="right">
            The <see cref="T:Atom.Math.Matrix2"/> on the right side of the equation. This value will not be modified by this method.
            </param>
            <param name="result">Will contain the result of the operation.</param>
        </member>
        <member name="M:Atom.Math.Matrix2.Multiply(Atom.Math.Matrix2,System.Single)">
            <summary>
            Returns the result of multiplying the given <see cref="T:Atom.Math.Matrix2"/> by the given <paramref name="scalar"/>. 
            </summary>
            <param name="matrix">
            The <see cref="T:Atom.Math.Matrix2"/> on the left side of the equation.
            </param>
            <param name="scalar">
            The scalar on the right side of the equation.
            </param>
            <returns>
            The result of this operation.
            </returns>
        </member>
        <member name="M:Atom.Math.Matrix2.Multiply(Atom.Math.Matrix2@,System.Single,Atom.Math.Matrix2@)">
            <summary>
            Stores the result of multiplying the given <see cref="T:Atom.Math.Matrix2"/> by the given <paramref name="scalar"/>
            in the given <paramref name="result"/> variable. 
            </summary>
            <param name="matrix">
            The <see cref="T:Atom.Math.Matrix2"/> on the left side of the equation. This value will not be modified by this method.
            </param>
            <param name="scalar">
            The scalar on the right side of the equation.
            </param>
            <param name="result">
            Will contain the result of the operation.
            </param>
        </member>
        <member name="M:Atom.Math.Matrix2.Multiply(System.Single,Atom.Math.Matrix2)">
            <summary>
            Returns the result of multiplying the given <see cref="T:Atom.Math.Matrix2"/> by the given <paramref name="scalar"/>. 
            </summary>
            <param name="scalar">
            The scalar on the left side of the equation.
            </param>
            <param name="matrix">
            The <see cref="T:Atom.Math.Matrix2"/> on the right side of the equation.
            </param>
            <returns>
            The result of this operation.
            </returns>
        </member>
        <member name="M:Atom.Math.Matrix2.Multiply(System.Single,Atom.Math.Matrix2@,Atom.Math.Matrix2@)">
            <summary>
            Stores the result of multiplying the given <see cref="T:Atom.Math.Matrix2"/> by the given <paramref name="scalar"/>
            in the given <paramref name="result"/> variable. 
            </summary>
            <param name="scalar">
            The scalar on the left side of the equation.
            </param>
            <param name="matrix">
            The <see cref="T:Atom.Math.Matrix2"/> on the right side of the equation. This value will not be modified by this method.
            </param>
            <param name="result">
            Will contain the result of the operation.
            </param>
        </member>
        <member name="M:Atom.Math.Matrix2.FromAngle(System.Single)">
            <summary>
            Creates a new <see cref="T:Atom.Math.Matrix2"/> the represents the specified <paramref name="angle"/>. 
            </summary>
            <param name="angle"> 
            The angle of the new <see cref="T:Atom.Math.Matrix2"/> in radians.
            </param>
            <returns>The newly created Matrix2.</returns>
        </member>
        <member name="M:Atom.Math.Matrix2.CreateOrthographicProjection(Atom.Math.Vector2)">
            <summary>
            Creates an orthopgrahic projection matrix.
            </summary>
            <param name="normal">
            The normal of the plane to project onto.
            </param>
            <returns>
            A new <see cref="T:Atom.Math.Matrix2"/> instance.
            </returns>
        </member>
        <member name="M:Atom.Math.Matrix2.Equals(System.Object)">
            <summary>
            Returns whether the specified <see cref="T:System.Object"/>
            is equal to this <see cref="T:Atom.Math.Matrix2"/> instance.
            </summary>
            <param name="obj">The object to test against.</param>
            <returns>true if they are equal; otherwise false.</returns>
        </member>
        <member name="M:Atom.Math.Matrix2.Equals(Atom.Math.Matrix2)">
            <summary>
            Returns whether the specified <see cref="T:Atom.Math.Matrix2"/> instance
            is equal to this <see cref="T:Atom.Math.Matrix2"/> instance.
            </summary>
            <param name="other">The object to test against.</param>
            <returns>true if they are equal; otherwise false.</returns>
        </member>
        <member name="M:Atom.Math.Matrix2.ToString">
            <summary> 
            Returns a human-readable representation of this <see cref="T:Atom.Math.Matrix2"/>.
            </summary>
            <returns> 
            A string representation of this <see cref="T:Atom.Math.Matrix2"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.Matrix2.ToString(System.IFormatProvider)">
            <summary> 
            Returns a human-readable representation of this <see cref="T:Atom.Math.Matrix2"/>.
            </summary>
            <param name="formatProvider">
            The <see cref="T:System.IFormatProvider"/> that supplies culture specific formatting information.
            </param>
            <returns> 
            A string representation of this <see cref="T:Atom.Math.Matrix2"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.Matrix2.GetHashCode">
            <summary>
            Gets the hash code of this <see cref="T:Atom.Math.Matrix2"/> instance.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Atom.Math.Matrix2.op_Multiply(Atom.Math.Matrix2,Atom.Math.Matrix2)">
            <summary>
            Returns the result of multiplying the left <see cref="T:Atom.Math.Matrix2"/> by the right <see cref="T:Atom.Math.Matrix2"/>. 
            </summary>
            <param name="left"> The <see cref="T:Atom.Math.Matrix2"/> on the left side of the equation. </param>
            <param name="right"> The <see cref="T:Atom.Math.Matrix2"/> on the right side of the equation. </param>
            <returns>
            The result of this operation.
            </returns>
        </member>
        <member name="M:Atom.Math.Matrix2.op_Multiply(Atom.Math.Matrix2,System.Single)">
            <summary>
            Returns the result of multiplying the given <see cref="T:Atom.Math.Matrix2"/> by the given <paramref name="scalar"/>. 
            </summary>
            <param name="matrix">
            The <see cref="T:Atom.Math.Matrix2"/> on the left side of the equation.
            </param>
            <param name="scalar">
            The scalar on the right side of the equation.
            </param>
            <returns>
            The result of this operation.
            </returns>
        </member>
        <member name="M:Atom.Math.Matrix2.op_Multiply(System.Single,Atom.Math.Matrix2)">
            <summary>
            Returns the result of multiplying the given <see cref="T:Atom.Math.Matrix2"/> by the given <paramref name="scalar"/>. 
            </summary>
            <param name="scalar"> The scalar on the left side of the equation. </param>
            <param name="matrix"> The <see cref="T:Atom.Math.Matrix2"/> on the right side of the equation. </param>
            <returns>
            The result of this operation.
            </returns>
        </member>
        <member name="M:Atom.Math.Matrix2.op_Multiply(Atom.Math.Vector2,Atom.Math.Matrix2)">
            <summary>
            Transforms a Vector2 by the given Matrix2.
            </summary>
            <param name="vector">The source Vector2.</param>
            <param name="matrix">The transformation Matrix2.</param>
            <returns>The Vector2 resulting from the transformation.</returns>
        </member>
        <member name="M:Atom.Math.Matrix2.op_Multiply(Atom.Math.Matrix2,Atom.Math.Vector2)">
            <summary>
            Transforms a Vector2 by the given Matrix2.
            </summary>
            <param name="matrix">The transformation Matrix2.</param>
            <param name="vector">The source Vector2.</param>
            <returns>The Vector2 resulting from the transformation.</returns>
        </member>
        <member name="M:Atom.Math.Matrix2.op_Addition(Atom.Math.Matrix2,Atom.Math.Matrix2)">
            <summary>
            Returns the result of adding the right <see cref="T:Atom.Math.Matrix2"/> to the left <see cref="T:Atom.Math.Matrix2"/>. 
            </summary>
            <param name="left"> The <see cref="T:Atom.Math.Matrix2"/> on the left side of the equation. </param>
            <param name="right"> The <see cref="T:Atom.Math.Matrix2"/> on the right side of the equation. </param>
            <returns>
            The result of this operation.
            </returns>
        </member>
        <member name="M:Atom.Math.Matrix2.op_Subtraction(Atom.Math.Matrix2,Atom.Math.Matrix2)">
            <summary>
            Returns the result of subtracting the right <see cref="T:Atom.Math.Matrix2"/> from the left <see cref="T:Atom.Math.Matrix2"/>. 
            </summary>
            <param name="left"> The <see cref="T:Atom.Math.Matrix2"/> on the left side of the equation. </param>
            <param name="right"> The <see cref="T:Atom.Math.Matrix2"/> on the right side of the equation. </param>
            <returns>
            The result of this operation.
            </returns>
        </member>
        <member name="M:Atom.Math.Matrix2.op_Equality(Atom.Math.Matrix2,Atom.Math.Matrix2)">
            <summary>
            Returns whether the specified <see cref="T:Atom.Math.Matrix2"/>s are equal.
            </summary>
            <param name="left">The Matrix of the left side of the equation.</param>
            <param name="right">The Matrix of the right side of the equation.</param>
            <returns>
            Returns <see langword="true"/> if the corresponding elements of the specified Matrices are approximately equal;
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.Matrix2.op_Inequality(Atom.Math.Matrix2,Atom.Math.Matrix2)">
            <summary>
            Returns whether the specified <see cref="T:Atom.Math.Matrix2"/>s are not equal.
            </summary>
            <param name="left">The Quaternion of the left side of the equation.</param>
            <param name="right">The Quaternion of the right side of the equation.</param>
            <returns>
            Returns <see langword="true"/> if any of the corresponding elements of the specified Matrices are approximately not equal;
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Atom.Math.Matrix3">
            <summary> 
            Represents a 3x3 homogenous single-precission floating point Matrix. 
            </summary>
        </member>
        <member name="F:Atom.Math.Matrix3.Identity">
            <summary> 
            Specifies the Identity Matrix,
            which is a matrix that represents no chance in rotation.
            This is a readonly field.
            </summary>
        </member>
        <member name="F:Atom.Math.Matrix3.Zero">
            <summary> 
            A matrix that contains only zeros. ( 0, 0, 0, 0 ) This is a readonly field.
            </summary>
        </member>
        <member name="F:Atom.Math.Matrix3.M11">
            <summary>
            Element of the first row of the Matrix.
            </summary>
        </member>
        <member name="F:Atom.Math.Matrix3.M12">
            <summary>
            Element of the first row of the Matrix.
            </summary>
        </member>
        <member name="F:Atom.Math.Matrix3.M13">
            <summary>
            Element of the first row of the Matrix.
            </summary>
        </member>
        <member name="F:Atom.Math.Matrix3.M21">
            <summary>
            Element of the second row of the Matrix.
            </summary>
        </member>
        <member name="F:Atom.Math.Matrix3.M22">
            <summary>
            Element of the second row of the Matrix.
            </summary>
        </member>
        <member name="F:Atom.Math.Matrix3.M23">
            <summary>
            Element of the second row of the Matrix.
            </summary>
        </member>
        <member name="F:Atom.Math.Matrix3.M31">
            <summary>
            Element of the third row of the Matrix.
            </summary>
        </member>
        <member name="F:Atom.Math.Matrix3.M32">
            <summary>
            Element of the third row of the Matrix.
            </summary>
        </member>
        <member name="F:Atom.Math.Matrix3.M33">
            <summary>
            Element of the third row of the Matrix.
            </summary>
        </member>
        <member name="P:Atom.Math.Matrix3.IsSingular">
            <summary>
            Gets a value indicating whether this <see cref="T:Atom.Math.Matrix3"/> is singular/degenerated.
            </summary>
            <remarks>
            A matrix has no inverse if its singular.
            </remarks>
            <value>
            A matrix is singular if its determinant is zero.
            Another way to test for singularity is to prove that
            there exists a vector x (x!= null-vector) where:
            Ax=0-vector.
            </value>
        </member>
        <member name="P:Atom.Math.Matrix3.Determinant">
            <summary>
            Gets the determinant of this <see cref="T:Atom.Math.Matrix3"/>.
            </summary>
            <value> 
            A Matrix has no inverse if its Determinant is zero.
            </value>
        </member>
        <member name="M:Atom.Math.Matrix3.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary> 
            Initializes a new instance of the <see cref="T:Atom.Math.Matrix3"/> struct. 
            </summary>
            <param name="m00">The X-coordiante of the x-axis. </param>
            <param name="m01">The Y-coordiante of the x-axis. </param>
            <param name="m02">The Z-coordiante of the x-axis. </param>
            <param name="m10">The X-coordiante of the y-axis. </param>
            <param name="m11">The Y-coordiante of the y-axis. </param>
            <param name="m12">The Z-coordiante of the y-axis. </param>     
            <param name="m20">The X-coordiante of the z-axis. </param>
            <param name="m21">The Y-coordiante of the z-axis. </param>
            <param name="m22">The Z-coordiante of the z-axis. </param>
        </member>
        <member name="M:Atom.Math.Matrix3.#ctor(Atom.Math.Vector3,Atom.Math.Vector3,Atom.Math.Vector3)">
            <summary> 
            Initializes a new instance of the <see cref="T:Atom.Math.Matrix3"/> struct. 
            </summary>
            <param name="axisX"> The-x axis of the new <see cref="T:Atom.Math.Matrix3"/> (m00, m10, m20). </param>
            <param name="axisY"> The-y axis of the new <see cref="T:Atom.Math.Matrix3"/> (m01, m11, n21). </param>
            <param name="axisZ"> The-z axis of the new <see cref="T:Atom.Math.Matrix3"/> (m02, m12, n22). </param>
        </member>
        <member name="M:Atom.Math.Matrix3.#ctor(Atom.Math.Matrix3)">
            <summary> 
            Initializes a new instance of the <see cref="T:Atom.Math.Matrix3"/> struct;
            and copies the elements from the given <see cref="T:Atom.Math.Matrix3"/> into the new one.
            </summary>
            <param name="matrix"> 
            The <see cref="T:Atom.Math.Matrix3"/> to copy.
            </param>
        </member>
        <member name="M:Atom.Math.Matrix3.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.Matrix3"/> struct.
            </summary>
            <param name="elements">
            The elements of the new Matrix.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="elements"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the length of the specified <paramref name="elements"/> array is less than 9.
            </exception>
        </member>
        <member name="M:Atom.Math.Matrix3.FromQuaternion(Atom.Math.Quaternion)">
            <summary>
            Creates a rotation Matrix given a <see cref="T:Atom.Math.Quaternion"/>.
            </summary>
            <param name="quaternion">
            The quaterion to convert.
            </param>
            <returns>
            The converted <see cref="T:Atom.Math.Matrix3"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.Matrix3.Equals(System.Object)">
            <summary>
            Returns whether the specified <see cref="T:System.Object"/> 
            is equal to this <see cref="T:Atom.Math.Matrix3"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to test against.
            </param>
            <returns>
            Returns <see lang="true"/> if they are equal;
            otherwise <see lang="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.Matrix3.Equals(Atom.Math.Matrix3)">
            <summary>
            Returns whether the specified Matrix3 instance 
            is approximately equal to this <see cref="T:Atom.Math.Matrix3"/>.
            </summary>
            <param name="other">
            The <see cref="T:Atom.Math.Matrix3"/> instance to test against.
            </param>
            <returns>
            Returns <see lang="true"/> if the elements of the matrices are (approximately) equal;
            otherwise <see lang="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.Matrix3.ToString">
            <summary> 
            Returns a human-readable representation of this <see cref="T:Atom.Math.Matrix3"/>.
            </summary>
            <returns> 
            A string representation of this <see cref="T:Atom.Math.Matrix3"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.Matrix3.ToString(System.IFormatProvider)">
            <summary> 
            Returns a human-readable representation of this <see cref="T:Atom.Math.Matrix3"/>.
            </summary>
            <param name="formatProvider">
            The <see cref="T:System.IFormatProvider"/> that supplies culture specific formatting information.
            </param>
            <returns> 
            A string representation of this <see cref="T:Atom.Math.Matrix3"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.Matrix3.GetHashCode">
            <summary>
            Gets the hash code of this <see cref="T:Atom.Math.Matrix3"/> instance.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Atom.Math.Matrix3.op_Equality(Atom.Math.Matrix3,Atom.Math.Matrix3)">
            <summary>
            Returns whether the specified <see cref="T:Atom.Math.Matrix3"/>s are equal.
            </summary>
            <param name="left">The Matrix of the left side of the equation.</param>
            <param name="right">The Matrix of the right side of the equation.</param>
            <returns>
            Returns <see lang="true"/> if the corresponding elements of the specified Matrices are approximately equal;
            otherwise <see lang="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.Matrix3.op_Inequality(Atom.Math.Matrix3,Atom.Math.Matrix3)">
            <summary>
            Returns whether the specified <see cref="T:Atom.Math.Matrix3"/>s are not equal.
            </summary>
            <param name="left">The Quaternion of the left side of the equation.</param>
            <param name="right">The Quaternion of the right side of the equation.</param>
            <returns>
            Returns <see lang="true"/> if any of the corresponding elements of the specified Quaternions are approximately not equal;
            otherwise <see lang="false"/>.
            </returns>
        </member>
        <member name="T:Atom.Math.Matrix4">
            <summary> 
            Represents a 4x4 homogenous single-precission floating point result. 
            </summary>
        </member>
        <member name="F:Atom.Math.Matrix4.M11">
            <summary>Value at row 1 column 1 of the Matrix.</summary>
        </member>
        <member name="F:Atom.Math.Matrix4.M12">
            <summary>Value at row 1 column 2 of the Matrix.</summary>
        </member>
        <member name="F:Atom.Math.Matrix4.M13">
            <summary>Value at row 1 column 3 of the Matrix.</summary>
        </member>
        <member name="F:Atom.Math.Matrix4.M14">
            <summary>Value at row 1 column 4 of the Matrix.</summary>
        </member>
        <member name="F:Atom.Math.Matrix4.M21">
            <summary>Value at row 2 column 1 of the Matrix.</summary>
        </member>
        <member name="F:Atom.Math.Matrix4.M22">
            <summary>Value at row 2 column 2 of the Matrix.</summary>
        </member>
        <member name="F:Atom.Math.Matrix4.M23">
            <summary>Value at row 2 column 3 of the Matrix.</summary>
        </member>
        <member name="F:Atom.Math.Matrix4.M24">
            <summary>Value at row 2 column 4 of the Matrix.</summary>
        </member>
        <member name="F:Atom.Math.Matrix4.M31">
            <summary>Value at row 3 column 1 of the Matrix.</summary>
        </member>
        <member name="F:Atom.Math.Matrix4.M32">
            <summary>Value at row 3 column 2 of the Matrix.</summary>
        </member>
        <member name="F:Atom.Math.Matrix4.M33">
            <summary>Value at row 3 column 3 of the Matrix.</summary>
        </member>
        <member name="F:Atom.Math.Matrix4.M34">
            <summary>Value at row 3 column 4 of the Matrix.</summary>
        </member>
        <member name="F:Atom.Math.Matrix4.M41">
            <summary>Value at row 4 column 1 of the Matrix.</summary>
        </member>
        <member name="F:Atom.Math.Matrix4.M42">
            <summary>Value at row 4 column 2 of the Matrix.</summary>
        </member>
        <member name="F:Atom.Math.Matrix4.M43">
            <summary>Value at row 4 column 3 of the Matrix.</summary>
        </member>
        <member name="F:Atom.Math.Matrix4.M44">
            <summary>Value at row 4 column 4 of the Matrix.</summary>
        </member>
        <member name="F:Atom.Math.Matrix4.identity">
            <summary>
            The 4x4 identity matrix.
            </summary>
        </member>
        <member name="P:Atom.Math.Matrix4.Identity">
            <summary>
            Gets the 4x4 identity Matrix,
            which is a matrix that represents no chance in rotation.
            </summary>
            <value>The identity result.</value>
        </member>
        <member name="P:Atom.Math.Matrix4.Up">
            <summary>Gets or sets the up point of the Matrix4.</summary>
            <value>The up point of the Matrix4.</value>
        </member>
        <member name="P:Atom.Math.Matrix4.Down">
            <summary>Gets or sets the down point of the Matrix4.</summary>
            <value>The down point of the Matrix4.</value>
        </member>
        <member name="P:Atom.Math.Matrix4.Right">
            <summary>Gets or sets the right point of the Matrix4.</summary>
            <value>The right point of the Matrix4.</value>
        </member>
        <member name="P:Atom.Math.Matrix4.Left">
            <summary>Gets or sets the left point of the Matrix4.</summary>
            <value>The left point of the Matrix4.</value>
        </member>
        <member name="P:Atom.Math.Matrix4.Forward">
            <summary>Gets or sets the forward point of the Matrix4.</summary>
            <value>The forward point of the Matrix4.</value>
        </member>
        <member name="P:Atom.Math.Matrix4.Backward">
            <summary>Gets or sets the backward point of the Matrix4.</summary>
            <value>The backward point of the Matrix4.</value>
        </member>
        <member name="P:Atom.Math.Matrix4.Translation">
            <summary>Gets or sets the translation point of the Matrix4.</summary>
            <value>The translation point of the Matrix4.</value>
        </member>
        <member name="P:Atom.Math.Matrix4.Determinant">
            <summary>
            Gets the determinant of this <see cref="T:Atom.Math.Matrix4"/>.
            </summary>
            <remarks>
            A matrix cannot be inverted if its determinant is zero.
            </remarks>
            <value>The determinant of the result.</value>
        </member>
        <member name="P:Atom.Math.Matrix4.Inverse">
            <summary>
            Gets the inverse of this <see cref="T:Atom.Math.Matrix4"/>.
            </summary>
            <value>
            The inverse of a matrix A is called A^-1
            and can be used to 'undo' the the matrix:
            A * A^-1 = I (Identity).
            </value>
        </member>
        <member name="P:Atom.Math.Matrix4.Trace">
            <summary>
            Gets the trace of this <see cref="T:Atom.Math.Matrix4"/>,
            which is the sum of its diagonal elements.
            </summary>
            <value> The trace value of the <see cref="T:Atom.Math.Matrix4"/>. </value>
        </member>
        <member name="P:Atom.Math.Matrix4.IsSymmetric">
            <summary>
            Gets a value indicating whether this Matrix4 is symmetric.
            </summary>   
            <remarks>
            A symmetric matrix is a square matrix, that is equal to its transpose.
            </remarks>
            <value>
            Returns <see langword="true"/> if this Matrix is symmetric;
            otherwise <see langword="false"/>.
            </value>
        </member>
        <member name="P:Atom.Math.Matrix4.Item(System.Int32)">
            <summary> Gets/Sets the element of the <see cref="T:Atom.Math.Matrix4"/> at the specified <paramref name="index"/>. </summary>
            <param name="index"> An index value. Indices=[0, 1, 2, .., 13, 14, 15]. </param>
            <returns> The value at the specified <paramref name="index"/>. </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> 
            If the <paramref name="index"/> is invalid.
            </exception>
        </member>
        <member name="P:Atom.Math.Matrix4.Item(System.Int32,System.Int32)">
            <summary>
            Gets/Sets the element of the <see cref="T:Atom.Math.Matrix4"/> 
            at the specified <paramref name="column"/> and <paramref name="row"/>. 
            </summary>
            <param name="row"> The matrix row. Valid values: [0, 1, 2, 3].</param>
            <param name="column"> The matrix column. Valid values: [0, 1, 2, 3].</param>
            <exception cref="T:System.ArgumentOutOfRangeException"> 
            If the <paramref name="row"/> or <paramref name="column"/> is invalid.
            </exception>
            <returns>
            The matrix element at the specified <paramref name="row"/> and <paramref name="column"/>,
            </returns>
        </member>
        <member name="M:Atom.Math.Matrix4.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.Matrix4"/> structure.
            </summary>
            <param name="m11">Value to initialize m11 to.</param>
            <param name="m12">Value to initialize m12 to.</param>
            <param name="m13">Value to initialize m13 to.</param>
            <param name="m14">Value to initialize m14 to.</param>
            <param name="m21">Value to initialize m21 to.</param>
            <param name="m22">Value to initialize m22 to.</param>
            <param name="m23">Value to initialize m23 to.</param>
            <param name="m24">Value to initialize m24 to.</param>
            <param name="m31">Value to initialize m31 to.</param>
            <param name="m32">Value to initialize m32 to.</param>
            <param name="m33">Value to initialize m33 to.</param>
            <param name="m34">Value to initialize m34 to.</param>
            <param name="m41">Value to initialize m41 to.</param>
            <param name="m42">Value to initialize m42 to.</param>
            <param name="m43">Value to initialize m43 to.</param>
            <param name="m44">Value to initialize m44 to.</param>
        </member>
        <member name="M:Atom.Math.Matrix4.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.Matrix4"/> structure.
            </summary>
            <param name="elements">
            The elements of the new Matrix.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="elements"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the length of the specified <paramref name="elements"/> array is less than 16.
            </exception>
        </member>
        <member name="M:Atom.Math.Matrix4.Transform(Atom.Math.Matrix4,Atom.Math.Quaternion)">
            <summary>
            Transforms a result by applying a Quaternion rotation.
            </summary>
            <param name="matrix">The result to transform.</param>
            <param name="rotation">The rotation to apply, expressed as a Quaternion.</param>
            <returns>
            A new result that is the result of the transform.
            </returns>
        </member>
        <member name="M:Atom.Math.Matrix4.Transform(Atom.Math.Matrix4@,Atom.Math.Quaternion@,Atom.Math.Matrix4@)">
            <summary>
            Transforms a result by applying a Quaternion rotation.
            </summary>
            <param name="matrix">The result to transform.</param>
            <param name="rotation">The rotation to apply, expressed as a Quaternion.</param>
            <param name="result">An existing result filled in with the result of the transform.</param>
        </member>
        <member name="M:Atom.Math.Matrix4.Transpose(Atom.Math.Matrix4)">
            <summary>Transposes the rows and columns of a result.</summary>
            <param name="matrix">The source result.</param>
            <returns>Transposed result.</returns>
        </member>
        <member name="M:Atom.Math.Matrix4.Transpose(Atom.Math.Matrix4@,Atom.Math.Matrix4@)">
            <summary>Transposes the rows and columns of a result.</summary>
            <param name="matrix">Source result.</param>
            <param name="result">Transposed result.</param>
        </member>
        <member name="M:Atom.Math.Matrix4.Invert(Atom.Math.Matrix4)">
            <summary>Calculates the inverse of a result.</summary>
            <param name="matrix">Source result.</param>
            <returns>The inverse of the result.</returns>
        </member>
        <member name="M:Atom.Math.Matrix4.Invert(Atom.Math.Matrix4@,Atom.Math.Matrix4@)">
            <summary>Calculates the inverse of a result.</summary>
            <param name="matrix">Source result.</param>
            <param name="result">The inverse of the result.</param>
        </member>
        <member name="M:Atom.Math.Matrix4.Add(Atom.Math.Matrix4,Atom.Math.Matrix4)">
            <summary>
            Returns the result of adding the <paramref name="right"/> Matrix
            to the <paramref name="left"/> Matrix.
            </summary>
            <param name="left">The Matrix on the left side of the equation.</param>
            <param name="right">The Matrix on the right side of the equation.</param>
            <returns>
            The result of this operation.
            </returns>
        </member>
        <member name="M:Atom.Math.Matrix4.Add(Atom.Math.Matrix4@,Atom.Math.Matrix4@,Atom.Math.Matrix4@)">
            <summary>
            Stores the result of adding the <paramref name="right"/> Matrix
            to the <paramref name="left"/> Matrix in the specified <paramref name="result"/> value.
            </summary>
            <param name="left">The Matrix on the left side of the equation. This value will not be modified by this method.</param>
            <param name="right">The Matrix on the right side of the equation. This value will not be modified by this method.</param>
            <param name="result">Will contain the result of this operation.</param>
        </member>
        <member name="M:Atom.Math.Matrix4.Subtract(Atom.Math.Matrix4,Atom.Math.Matrix4)">
            <summary>
            Returns the result of subtracting the <paramref name="right"/> Matrix
            from the <paramref name="left"/> Matrix.
            </summary>
            <param name="left">The Matrix on the left side of the equation.</param>
            <param name="right">The Matrix on the right side of the equation.</param>
            <returns>
            The result of the subtraction.
            </returns>
        </member>
        <member name="M:Atom.Math.Matrix4.Subtract(Atom.Math.Matrix4@,Atom.Math.Matrix4@,Atom.Math.Matrix4@)">
            <summary>
            Stores the result of subtracting the <paramref name="right"/> Matrix
            from the <paramref name="left"/> Matrix im the specified <paramref name="result"/> value.
            </summary>
            <param name="left">The Matrix on the left side of the equation. This value will not be modified by this method.</param>
            <param name="right">The Matrix on the right side of the equation. This value will not be modified by this method.</param>
            <param name="result">Will contain the result of the subtraction.</param>
        </member>
        <member name="M:Atom.Math.Matrix4.Negate(Atom.Math.Matrix4)">
            <summary>
            Returns the result of negating the specified <see cref="T:Atom.Math.Matrix4"/>.
            </summary>
            <param name="matrix">The input matrix.</param>
            <returns>The negated matrix.</returns>
        </member>
        <member name="M:Atom.Math.Matrix4.Negate(Atom.Math.Matrix4@,Atom.Math.Matrix4@)">
            <summary>
            Stores the result of negating the specified <see cref="T:Atom.Math.Matrix4"/>
            in the specified <paramref name="result"/> value.
            </summary>
            <param name="matrix">The input matrix. This value will not be modified by this method.</param>
            <param name="result">Will contain the negated matrix.</param>
        </member>
        <member name="M:Atom.Math.Matrix4.Multiply(Atom.Math.Matrix4,Atom.Math.Matrix4)">
            <summary>
            Returns the result of multiplying the <paramref name="left"/> Matrix
            by the <paramref name="right"/> Matrix.
            Matrix multiplication can be used to 'combine' the rotations the matrices represent.
            </summary>
            <param name="left">The Matrix on the left side of the equation.</param>
            <param name="right">The Matrix on the right side of the equation.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Atom.Math.Matrix4.Multiply(Atom.Math.Matrix4@,Atom.Math.Matrix4@,Atom.Math.Matrix4@)">
            <summary>
            Stores the result of multiplying the <paramref name="left"/> Matrix
            by the <paramref name="right"/> Matrix in the specified <paramref name="result"/> value.
            Matrix multiplication can be used to 'combine' the rotations the matrices represent.
            </summary>
            <param name="left">The Matrix on the left side of the equation. This value will not be modified by this method.</param>
            <param name="right">The Matrix on the right side of the equation. This value will not be modified by this method.</param>
            <param name="result">Will contain the result of the multiplication.</param>
        </member>
        <member name="M:Atom.Math.Matrix4.Multiply(Atom.Math.Matrix4,System.Single)">
            <summary>
            Returns the result of multiplying the specified <see cref="T:Atom.Math.Matrix4"/>
            by the specified <paramref name="scalar"/>.
            </summary>
            <param name="matrix">The Matrix on the left side of the equation.</param>
            <param name="scalar">The scalar value on the right side of the equation.</param>
            <returns>Result of the multiplication.</returns>
        </member>
        <member name="M:Atom.Math.Matrix4.Multiply(Atom.Math.Matrix4@,System.Single,Atom.Math.Matrix4@)">
            <summary>
            Stores the result of multiplying the specified <see cref="T:Atom.Math.Matrix4"/>
            by the specified <paramref name="scalar"/> in the specified <paramref name="result"/> value.
            </summary>
            <param name="matrix">The Matrix on the left side of the equation. This value will not be modified by this method.</param>
            <param name="scalar">The scalar value on the right side of the equation.</param>
            <param name="result">Will contain the result of the multiplication.</param>
        </member>
        <member name="M:Atom.Math.Matrix4.Divide(Atom.Math.Matrix4,Atom.Math.Matrix4)">
            <summary>
            Returns the result of dividing the <paramref name="left"/> Matrix
            through the <paramref name="right"/> Matrix - component wise.
            </summary>
            <param name="left">The matrix on the left side of the equation.</param>
            <param name="right">The matrix on the right side of the equation.</param>
            <returns>
            The result of the division.
            </returns>
        </member>
        <member name="M:Atom.Math.Matrix4.Divide(Atom.Math.Matrix4@,Atom.Math.Matrix4@,Atom.Math.Matrix4@)">
            <summary>
            Stores the result of dividing the <paramref name="left"/> Matrix
            through the <paramref name="right"/> Matrix - component wise
            in the specified <paramref name="result"/> value.
            </summary>
            <param name="left">The matrix on the left side of the equation. This value will not be modified by this method.</param>
            <param name="right">The matrix on the right side of the equation. This value will not be modified by this method.</param>
            <param name="result">Will contain the result of the division.</param>
        </member>
        <member name="M:Atom.Math.Matrix4.Divide(Atom.Math.Matrix4,System.Single)">
            <summary>
            Returns the result of dividing the specified <paramref name="matrix"/>
            through the specified <paramref name="divider"/> componentwise.
            </summary>
            <param name="matrix">The matrix on the left side of the equation.</param>
            <param name="divider">The scalar on the left side of the equation.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Atom.Math.Matrix4.Divide(Atom.Math.Matrix4@,System.Single,Atom.Math.Matrix4@)">
            <summary>
            Stores the result of dividing the specified <paramref name="matrix"/>
            through the specified <paramref name="divider"/> componentwise
            in the specified <paramref name="result"/> value.
            </summary>
            <param name="matrix">The matrix on the left side of the equation. This value will not be modified by this method.</param>
            <param name="divider">The scalar on the left side of the equation.</param>
            <param name="result">Will contain the result of the division.</param>
        </member>
        <member name="M:Atom.Math.Matrix4.Lerp(Atom.Math.Matrix4,Atom.Math.Matrix4,System.Single)">
            <summary>Linearly interpolates between the corresponding values of two matrices.</summary>
            <param name="start">The start value.</param>
            <param name="end">The end value.</param>
            <param name="amount">The amount to interpolate from the start to the end value.</param>
            <returns>The interpolated value.</returns>
        </member>
        <member name="M:Atom.Math.Matrix4.Lerp(Atom.Math.Matrix4@,Atom.Math.Matrix4@,System.Single,Atom.Math.Matrix4@)">
            <summary>Linearly interpolates between the corresponding values of two matrices.</summary>
            <param name="start">The start value. The value of this argument will not be changed.</param>
            <param name="end">The end value. The value of this argument will not be changed.</param>
            <param name="amount">The amount to interpolate from the start to the end value.</param>
            <param name="result">Will contain the interpolated value.</param>
        </member>
        <member name="M:Atom.Math.Matrix4.FromAxisAngle(Atom.Math.Vector3,System.Single)">
            <summary>Creates a new result that rotates around an arbitrary point.</summary>
            <param name="axis">The axis to rotate around.</param>
            <param name="angle">The angle to rotate around the point.</param>
            <returns>The created result.</returns>
        </member>
        <member name="M:Atom.Math.Matrix4.FromAxisAngle(Atom.Math.Vector3@,System.Single,Atom.Math.Matrix4@)">
            <summary>
            Creates a new result that rotates around an arbitrary point.
            </summary>
            <param name="axis">The axis to rotate around.</param>
            <param name="angle">The angle to rotate around the point.</param>
            <param name="result">The created result.</param>
        </member>
        <member name="M:Atom.Math.Matrix4.FromQuaternion(Atom.Math.Quaternion)">
            <summary>Creates a rotation result from a Quaternion.</summary>
            <param name="quaternion">Quaternion to create the result from.</param>
            <returns>The created result.</returns>
        </member>
        <member name="M:Atom.Math.Matrix4.FromQuaternion(Atom.Math.Quaternion@,Atom.Math.Matrix4@)">
            <summary>
            Creates a rotation result from a Quaternion.
            </summary>
            <param name="quaternion">Quaternion to create the result from.</param>
            <param name="result">The created result.</param>
        </member>
        <member name="M:Atom.Math.Matrix4.FromYawPitchRoll(System.Single,System.Single,System.Single)">
            <summary>Creates a new rotation result from a specified yaw, pitch, and roll.</summary>
            <param name="yaw">Angle of rotation, in radians, around the y-axis.</param>
            <param name="pitch">Angle of rotation, in radians, around the x-axis.</param>
            <param name="roll">Angle of rotation, in radians, around the z-axis.</param>
            <returns>A new rotation result with the specified yaw, pitch, and roll.</returns>
        </member>
        <member name="M:Atom.Math.Matrix4.FromYawPitchRoll(System.Single,System.Single,System.Single,Atom.Math.Matrix4@)">
            <summary>Fills in a rotation result from a specified yaw, pitch, and roll.</summary>
            <param name="yaw">Angle of rotation, in radians, around the y-axis.</param>
            <param name="pitch">Angle of rotation, in radians, around the x-axis.</param>
            <param name="roll">Angle of rotation, in radians, around the z-axis.</param>
            <param name="result">An existing result filled in to represent the specified yaw, pitch, and roll.</param>
        </member>
        <member name="M:Atom.Math.Matrix4.CreateBillboard(Atom.Math.Vector3,Atom.Math.Vector3,Atom.Math.Vector3,System.Nullable{Atom.Math.Vector3})">
            <summary>Creates a spherical billboard that rotates around a specified object position.</summary>
            <param name="objectPosition">Position of the object the billboard will rotate around.</param>
            <param name="cameraPosition">Position of the camera.</param>
            <param name="cameraUpVector">The up point of the camera.</param>
            <param name="cameraForwardVector">Optional forward point of the camera.</param>
            <returns>The created billboard result.</returns>
        </member>
        <member name="M:Atom.Math.Matrix4.CreateBillboard(Atom.Math.Vector3@,Atom.Math.Vector3@,Atom.Math.Vector3@,System.Nullable{Atom.Math.Vector3},Atom.Math.Matrix4@)">
            <summary>Creates a spherical billboard that rotates around a specified object position.</summary>
            <param name="objectPosition">Position of the object the billboard will rotate around.</param>
            <param name="cameraPosition">Position of the camera.</param>
            <param name="cameraUpVector">The up point of the camera.</param>
            <param name="cameraForwardVector">Optional forward point of the camera.</param>
            <param name="result">The created billboard result.</param>
        </member>
        <member name="M:Atom.Math.Matrix4.CreateConstrainedBillboard(Atom.Math.Vector3,Atom.Math.Vector3,Atom.Math.Vector3,System.Nullable{Atom.Math.Vector3},System.Nullable{Atom.Math.Vector3})">
            <summary>Creates a cylindrical billboard that rotates around a specified axis.</summary>
            <param name="objectPosition">Position of the object the billboard will rotate around.</param>
            <param name="cameraPosition">Position of the camera.</param>
            <param name="rotateAxis">Axis to rotate the billboard around.</param>
            <param name="cameraForwardVector">Optional forward point of the camera.</param>
            <param name="objectForwardVector">Optional forward point of the object.</param>
            <returns>The created billboard result.</returns>
        </member>
        <member name="M:Atom.Math.Matrix4.CreateConstrainedBillboard(Atom.Math.Vector3@,Atom.Math.Vector3@,Atom.Math.Vector3@,System.Nullable{Atom.Math.Vector3},System.Nullable{Atom.Math.Vector3},Atom.Math.Matrix4@)">
            <summary>Creates a cylindrical billboard that rotates around a specified axis.</summary>
            <param name="objectPosition">Position of the object the billboard will rotate around.</param>
            <param name="cameraPosition">Position of the camera.</param>
            <param name="rotateAxis">Axis to rotate the billboard around.</param>
            <param name="cameraForwardVector">Optional forward point of the camera.</param>
            <param name="objectForwardVector">Optional forward point of the object.</param>
            <param name="result">The created billboard result.</param>
        </member>
        <member name="M:Atom.Math.Matrix4.CreateTranslation(Atom.Math.Vector3)">
            <summary>
            Creates a translation result.
            </summary>
            <param name="position">Amounts to translate by on the x, y, and z axes.</param>
            <returns>The created translation result.</returns>
        </member>
        <member name="M:Atom.Math.Matrix4.CreateTranslation(Atom.Math.Vector3@,Atom.Math.Matrix4@)">
            <summary>
            Creates a translation result.
            </summary>
            <param name="position">Amounts to translate by on the x, y, and z axes.</param>
            <param name="result">The created translation result.</param>
        </member>
        <member name="M:Atom.Math.Matrix4.CreateTranslation(System.Single,System.Single,System.Single)">
            <summary>
            Creates a translation result.
            </summary>
            <param name="positionX">Value to translate by on the x-axis.</param>
            <param name="positionY">Value to translate by on the y-axis.</param>
            <param name="positionZ">Value to translate by on the z-axis.</param>
            <returns>The created translation result.</returns>
        </member>
        <member name="M:Atom.Math.Matrix4.CreateTranslation(System.Single,System.Single,System.Single,Atom.Math.Matrix4@)">
            <summary>
            Creates a translation result.
            </summary>
            <param name="positionX">Value to translate by on the x-axis.</param>
            <param name="positionY">Value to translate by on the y-axis.</param>
            <param name="positionZ">Value to translate by on the z-axis.</param>
            <param name="result">The created translation result.</param>
        </member>
        <member name="M:Atom.Math.Matrix4.CreateScale(System.Single,System.Single,System.Single)">
            <summary>
            Creates a scaling result.
            </summary>
            <param name="scaleX">Value to scale by on the x-axis.</param>
            <param name="scaleY">Value to scale by on the y-axis.</param>
            <param name="scaleZ">Value to scale by on the z-axis.</param>
            <returns>
            The created scaling result.
            </returns>
        </member>
        <member name="M:Atom.Math.Matrix4.CreateScale(System.Single,System.Single,System.Single,Atom.Math.Matrix4@)">
            <summary>
            Creates a scaling result.
            </summary>
            <param name="scaleX">Value to scale by on the x-axis.</param>
            <param name="scaleY">Value to scale by on the y-axis.</param>
            <param name="scaleZ">Value to scale by on the z-axis.</param>
            <param name="result">The created scaling result.</param>
        </member>
        <member name="M:Atom.Math.Matrix4.CreateScale(Atom.Math.Vector3)">
            <summary>
            Creates a scaling result.
            </summary>
            <param name="scales">Amounts to scale by on the x, y, and z axes.</param>
            <returns>
            The created scaling result.
            </returns>
        </member>
        <member name="M:Atom.Math.Matrix4.CreateScale(Atom.Math.Vector3@,Atom.Math.Matrix4@)">
            <summary>
            Creates a scaling result.
            </summary>
            <param name="scales">Amounts to scale by on the x, y, and z axes.</param>
            <param name="result">The created scaling result.</param>
        </member>
        <member name="M:Atom.Math.Matrix4.CreateScale(System.Single)">
            <summary>Creates a scaling result.</summary>
            <param name="scale">Amount to scale by.</param>
            <returns>The created scaling result.</returns>
        </member>
        <member name="M:Atom.Math.Matrix4.CreateScale(System.Single,Atom.Math.Matrix4@)">
            <summary>
            Creates a scaling result.
            </summary>
            <param name="scale">Value to scale by.</param>
            <param name="result">The created scaling result.</param>
        </member>
        <member name="M:Atom.Math.Matrix4.CreateRotationX(System.Single)">
            <summary>Returns an x-axis rotation result.</summary>
            <param name="radians">The rotation in radians.</param>
            <returns>The rotation result.</returns>
        </member>
        <member name="M:Atom.Math.Matrix4.CreateRotationX(System.Single,Atom.Math.Matrix4@)">
            <summary>Returns an x-axis rotation result.</summary>
            <param name="radians">The rotation in radians.</param>
            <param name="result">The rotation result.</param>
        </member>
        <member name="M:Atom.Math.Matrix4.CreateRotationY(System.Single)">
            <summary>Returns a y-axis rotation result.</summary>
            <param name="radians">The rotation in radians.</param>
            <returns>The rotation result.</returns>
        </member>
        <member name="M:Atom.Math.Matrix4.CreateRotationY(System.Single,Atom.Math.Matrix4@)">
            <summary>Returns a y-axis rotation result.</summary>
            <param name="radians">The rotation in radians.</param>
            <param name="result">The rotation result.</param>
        </member>
        <member name="M:Atom.Math.Matrix4.CreateRotationZ(System.Single)">
            <summary>Returns a z-axis rotation result.</summary>
            <param name="radians">The rotation in radians.</param>
            <returns>The rotation result.</returns>
        </member>
        <member name="M:Atom.Math.Matrix4.CreateRotationZ(System.Single,Atom.Math.Matrix4@)">
            <summary>Returns an z-axis rotation result.</summary>
            <param name="radians">The rotation in radians.</param>
            <param name="result">The rotation result.</param>
        </member>
        <member name="M:Atom.Math.Matrix4.CreatePerspectiveFieldOfView(System.Single,System.Single,System.Single,System.Single)">
            <summary>Builds a perspective projection result based on a field of view.</summary>
            <param name="fieldOfView">Field of view in radians.</param>
            <param name="aspectRatio">Aspect ratio, defined as view space width divided by height.</param>
            <param name="nearPlaneDistance">Distance to the near view plane.</param>
            <param name="farPlaneDistance">Distance to the far view plane.</param>
            <returns>The perspective projection result.</returns>
        </member>
        <member name="M:Atom.Math.Matrix4.CreatePerspective(System.Single,System.Single,System.Single,System.Single)">
            <summary>Builds a perspective projection result.</summary>
            <param name="width">Width of the view volume at the near view plane.</param>
            <param name="height">Height of the view volume at the near view plane.</param>
            <param name="nearPlaneDistance">Distance to the near view plane.</param>
            <param name="farPlaneDistance">Distance to the far view plane.</param>
            <returns>The projection result.</returns>
        </member>
        <member name="M:Atom.Math.Matrix4.CreatePerspectiveOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>Builds a customized, perspective projection result.</summary>
            <param name="left">Minimum x-value of the view volume at the near view plane.</param>
            <param name="right">Maximum x-value of the view volume at the near view plane.</param>
            <param name="bottom">Minimum y-value of the view volume at the near view plane.</param>
            <param name="top">Maximum y-value of the view volume at the near view plane.</param>
            <param name="nearPlaneDistance">Distance to the near view plane.</param>
            <param name="farPlaneDistance">Distance to of the far view plane.</param>
            <returns>The created projection result.</returns>
        </member>
        <member name="M:Atom.Math.Matrix4.CreateOrthographic(System.Single,System.Single,System.Single,System.Single)">
            <summary>Builds an orthogonal projection result.</summary>
            <param name="width">Width of the view volume.</param>
            <param name="height">Height of the view volume.</param>
            <param name="nearPlaneZ">Minimum z-value of the view volume.</param>
            <param name="farPlaneZ">Maximum z-value of the view volume.</param>
            <returns>The projection result.</returns>
        </member>
        <member name="M:Atom.Math.Matrix4.CreateOrthographicOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>Builds a customized, orthogonal projection result.</summary>
            <param name="left">Minimum x-value of the view volume.</param>
            <param name="right">Maximum x-value of the view volume.</param>
            <param name="bottom">Minimum y-value of the view volume.</param>
            <param name="top">Maximum y-value of the view volume.</param>
            <param name="nearPlaneZ">Minimum z-value of the view volume.</param>
            <param name="farPlaneZ">Maximum z-value of the view volume.</param>
            <returns>The projection result.</returns>
        </member>
        <member name="M:Atom.Math.Matrix4.CreateLookAt(Atom.Math.Vector3,Atom.Math.Vector3,Atom.Math.Vector3)">
            <summary>Creates a view result.</summary>
            <param name="cameraPosition">The position of the camera.</param>
            <param name="cameraTarget">The direction that the camera is pointing.</param>
            <param name="cameraUpVector">The direction that is "up" from the camera's point of view.</param>
            <returns>The created view result.</returns>
        </member>
        <member name="M:Atom.Math.Matrix4.CreateLookAt(Atom.Math.Vector3@,Atom.Math.Vector3@,Atom.Math.Vector3@,Atom.Math.Matrix4@)">
            <summary>Creates a view result.</summary>
            <param name="cameraPosition">The position of the camera.</param>
            <param name="cameraTarget">The direction that the camera is pointing.</param>
            <param name="cameraUpVector">The direction that is "up" from the camera's point of view.</param>
            <param name="result">The created view result.</param>
        </member>
        <member name="M:Atom.Math.Matrix4.CreateWorld(Atom.Math.Vector3,Atom.Math.Vector3,Atom.Math.Vector3)">
            <summary>Creates a world result with the specified parameters.</summary>
            <param name="position">Position of the object. This value is used in translation operations.</param>
            <param name="forward">Forward direction of the object.</param>
            <param name="up">Upward direction of the object; usually [0, 1, 0].</param>
            <returns>The created world result.</returns>
        </member>
        <member name="M:Atom.Math.Matrix4.CreateWorld(Atom.Math.Vector3@,Atom.Math.Vector3@,Atom.Math.Vector3@,Atom.Math.Matrix4@)">
            <summary>Creates a world result with the specified parameters.</summary>
            <param name="position">Position of the object. This value is used in translation operations.</param>
            <param name="forward">Forward direction of the object.</param>
            <param name="up">Upward direction of the object; usually [0, 1, 0].</param>
            <param name="result">The created world result.</param>
        </member>
        <member name="M:Atom.Math.Matrix4.CreateReflection(Atom.Math.Plane3)">
            <summary>
            Creates a <see cref="T:Atom.Math.Matrix4"/> that reflects the coordinate system 
            about the specified <see cref="T:Atom.Math.Plane3"/>.
            </summary>
            <param name="plane">The Plane about which to create a reflection.</param>
            <returns>
            A new result expressing the reflection.
            </returns>
        </member>
        <member name="M:Atom.Math.Matrix4.CreateReflection(Atom.Math.Plane3@,Atom.Math.Matrix4@)">
            <summary>Fills in an existing result so that it reflects the coordinate system about a specified Plane.</summary>
            <param name="plane">The Plane about which to create a reflection.</param>
            <param name="result">A result that creates the reflection.</param>
        </member>
        <member name="M:Atom.Math.Matrix4.CreateShadow(Atom.Math.Vector3,Atom.Math.Plane3)">
            <summary>
            Creates a result that flattens geometry into a specified Plane3 as if casting a shadow from a specified light source.
            </summary>
            <param name="lightDirection">A Vector3 specifying the direction from which the light that will cast the shadow is coming.</param>
            <param name="plane">The Plane onto which the new result should flatten geometry so as to cast a shadow.</param>
            <returns>
            A new result that can be used to flatten geometry onto the specified plane from the specified direction.
            </returns>
        </member>
        <member name="M:Atom.Math.Matrix4.CreateShadow(Atom.Math.Vector3@,Atom.Math.Plane3@,Atom.Math.Matrix4@)">
            <summary>Fills in a result to flatten geometry into a specified Plane as if casting a shadow from a specified light source.</summary>
            <param name="lightDirection">A Vector3 specifying the direction from which the light that will cast the shadow is coming.</param>
            <param name="plane">The Plane onto which the new result should flatten geometry so as to cast a shadow.</param>
            <param name="result">A result that can be used to flatten geometry onto the specified plane from the specified direction.</param>
        </member>
        <member name="M:Atom.Math.Matrix4.Equals(System.Object)">
            <summary>
            Returns whether the specified <see cref="T:System.Object"/> 
            is equal to this <see cref="T:Atom.Math.Matrix4"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to test against.
            </param>
            <returns>
            Returns <see langword="true"/> if they are equal;
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.Matrix4.Equals(Atom.Math.Matrix4)">
            <summary>
            Returns whether the specified Matrix44 instance 
            is approximately equal to this <see cref="T:Atom.Math.Matrix4"/>.
            </summary>
            <param name="other">
            The <see cref="T:Atom.Math.Matrix4"/> instance to test against.
            </param>
            <returns>
            Returns <see langword="true"/> if the elements of the matrices are (approximately) equal;
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.Matrix4.ToString">
            <summary> 
            Returns a human-readable representation of this <see cref="T:Atom.Math.Matrix4"/>.
            </summary>
            <returns> 
            A string representation of this <see cref="T:Atom.Math.Matrix4"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.Matrix4.ToString(System.IFormatProvider)">
            <summary> 
            Returns a human-readable representation of this <see cref="T:Atom.Math.Matrix4"/>.
            </summary>
            <param name="formatProvider">
            The <see cref="T:System.IFormatProvider"/> that supplies culture specific formatting information.
            </param>
            <returns> 
            A string representation of this <see cref="T:Atom.Math.Matrix4"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.Matrix4.GetHashCode">
            <summary>
            Gets the hash code of this <see cref="T:Atom.Math.Matrix4"/> instance.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Atom.Math.Matrix4.op_Addition(Atom.Math.Matrix4,Atom.Math.Matrix4)">
            <summary>
            Returns the result of adding the <paramref name="right"/> Matrix
            to the <paramref name="left"/> Matrix.
            </summary>
            <param name="left">The Matrix on the left side of the equation.</param>
            <param name="right">The Matrix on the right side of the equation.</param>
            <returns>
            The result of this operation.
            </returns>
        </member>
        <member name="M:Atom.Math.Matrix4.op_Subtraction(Atom.Math.Matrix4,Atom.Math.Matrix4)">
            <summary>
            Returns the result of subtracting the <paramref name="right"/> Matrix
            from the <paramref name="left"/> Matrix.
            </summary>
            <param name="left">The Matrix on the left side of the equation.</param>
            <param name="right">The Matrix on the right side of the equation.</param>
            <returns>
            The result of the subtraction.
            </returns>
        </member>
        <member name="M:Atom.Math.Matrix4.op_UnaryNegation(Atom.Math.Matrix4)">
            <summary>
            Returns the result of negating the specified <see cref="T:Atom.Math.Matrix4"/>.
            </summary>
            <param name="matrix">The input matrix.</param>
            <returns>The negated matrix.</returns>
        </member>
        <member name="M:Atom.Math.Matrix4.op_Multiply(Atom.Math.Matrix4,Atom.Math.Matrix4)">
            <summary>
            Returns the result of multiplying the <paramref name="left"/> Matrix
            by the <paramref name="right"/> Matrix.
            Matrix multiplication can be used to 'combine' the rotations the matrices represent.
            </summary>
            <param name="left">The Matrix on the left side of the equation.</param>
            <param name="right">The Matrix on the right side of the equation.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Atom.Math.Matrix4.op_Multiply(Atom.Math.Matrix4,System.Single)">
            <summary>
            Returns the result of multiplying the specified <see cref="T:Atom.Math.Matrix4"/>
            by the specified <paramref name="scalar"/>.
            </summary>
            <param name="matrix">The Matrix on the left side of the equation.</param>
            <param name="scalar">The scalar value on the right side of the equation.</param>
            <returns>Result of the multiplication.</returns>
        </member>
        <member name="M:Atom.Math.Matrix4.op_Division(Atom.Math.Matrix4,Atom.Math.Matrix4)">
            <summary>
            Returns the result of dividing the <paramref name="left"/> Matrix
            through the <paramref name="right"/> Matrix - component wise.
            </summary>
            <param name="left">The matrix on the left side of the equation.</param>
            <param name="right">The matrix on the right side of the equation.</param>
            <returns>
            The result of the division.
            </returns>
        </member>
        <member name="M:Atom.Math.Matrix4.op_Division(Atom.Math.Matrix4,System.Single)">
            <summary>
            Returns the result of dividing the specified <paramref name="matrix"/>
            through the specified <paramref name="divider"/> componentwise.
            </summary>
            <param name="matrix">The matrix on the left side of the equation.</param>
            <param name="divider">The scalar on the left side of the equation.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Atom.Math.Matrix4.op_Equality(Atom.Math.Matrix4,Atom.Math.Matrix4)">
            <summary>
            Returns whether the specified <see cref="T:Atom.Math.Matrix4"/>s are equal.
            </summary>
            <param name="left">The result of the left side of the equation.</param>
            <param name="right">The result of the right side of the equation.</param>
            <returns>
            Returns <see langword="true"/> if the corresponding elements of the specified Matrices are approximately equal;
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.Matrix4.op_Inequality(Atom.Math.Matrix4,Atom.Math.Matrix4)">
            <summary>
            Returns whether the specified <see cref="T:Atom.Math.Matrix4"/>s are not equal.
            </summary>
            <param name="left">The result of the left side of the equation.</param>
            <param name="right">The result of the right side of the equation.</param>
            <returns>
            Returns <see langword="true"/> if any of the corresponding elements of the specified Matrices are approximately not equal;
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Atom.Math.BaseValueModifier`2">
            <summary>
            Represents an abstract base implemention of the <see cref="T:Atom.Math.IValueModifier`2"/> interface.
            </summary>
            <typeparam name="TInput">
            The type of the input value.
            </typeparam>
            <typeparam name="TOutput">
            The type of the output value.
            </typeparam>
        </member>
        <member name="E:Atom.Math.BaseValueModifier`2.Changed">
            <summary>
            Raised when this IValueModifier{TInput, TOutput} has been modified in a way that might require
            previously modified input values to be re-evualated again.
            </summary>
        </member>
        <member name="M:Atom.Math.BaseValueModifier`2.Apply(`0)">
            <summary>
            Applies this IValueModifier{TInput, TOutput} to the specified <paramref name="input"/> value
            and returns the resulting value.
            </summary>
            <param name="input">
            The input value.
            </param>
            <returns>
            The output value.
            </returns>
        </member>
        <member name="M:Atom.Math.BaseValueModifier`2.OnChanged">
            <summary>
            Raises the <see cref="E:Atom.Math.BaseValueModifier`2.Changed"/> of this BaseValueModifier{TInput, TOutput}.
            </summary>
        </member>
        <member name="M:Atom.Math.BaseValueModifier`2.OnChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Atom.Math.BaseValueModifier`2.Changed"/> of this BaseValueModifier{TInput, TOutput}.
            </summary>
            <param name="e">
            The EventArgs to pass to the event.
            </param>
        </member>
        <member name="T:Atom.Math.IValueModifier`2">
            <summary>
            Represents an ecapsulated function that modifies an input value to produce an output value.
            </summary>
            <typeparam name="TInput">
            The type of the input value.
            </typeparam>
            <typeparam name="TOutput">
            The type of the output value.
            </typeparam>
        </member>
        <member name="E:Atom.Math.IValueModifier`2.Changed">
            <summary>
            Raised when this IValueModifier{TInput, TOutput} has been modified in a way that might require
            previously modified input values to be re-evualated again.
            </summary>
        </member>
        <member name="M:Atom.Math.IValueModifier`2.Apply(`0)">
            <summary>
            Applies this IValueModifier{TInput, TOutput} to the specified <paramref name="input"/> value
            and returns the resulting value.
            </summary>
            <param name="input">
            The input value.
            </param>
            <returns>
            The output value.
            </returns>
        </member>
        <member name="T:Atom.Math.Modifiers.LambdaValueModifier`2">
            <summary>
            Represents an <see cref="T:Atom.Math.IValueModifier`2"/> that uses a lambda function to modify its value.
            </summary>
            <typeparam name="TInput">
            The type of the input value.
            </typeparam>
            <typeparam name="TOutput">
            The type of the output value.
            </typeparam>
        </member>
        <member name="P:Atom.Math.Modifiers.LambdaValueModifier`2.Lambda">
            <summary>
            Gets or sets the lambda function that is applied by this LambdaValueModifier{TInput, TOutput}.
            </summary>
        </member>
        <member name="M:Atom.Math.Modifiers.LambdaValueModifier`2.Apply(`0)">
            <summary>
            Applies this IValueModifier{TInput, TOutput} to the specified <paramref name="input"/> value
            and returns the resulting value.
            </summary>
            <param name="input">
            The input value.
            </param>
            <returns>
            The output value.
            </returns>
        </member>
        <member name="F:Atom.Math.Modifiers.LambdaValueModifier`2._lambda">
            <summary>
            Represents the storage field of the <see cref="P:Atom.Math.Modifiers.LambdaValueModifier`2.Lambda"/> property.
            </summary>
        </member>
        <member name="T:Atom.Math.Plane3">
            <summary>
            Defines a plane in 3D space.
            </summary>
        </member>
        <member name="F:Atom.Math.Plane3.Normal">
            <summary>
            The normal point of this Plane.
            </summary>
        </member>
        <member name="F:Atom.Math.Plane3.Distance">
            <summary>
            The distance of the Plane along its normal from the origin.
            </summary>
        </member>
        <member name="M:Atom.Math.Plane3.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.Plane3"/> struct.
            </summary>
            <param name="x">X component of the normal defining the Plane.</param>
            <param name="y">Y component of the normal defining the Plane.</param>
            <param name="z">Z component of the normal defining the Plane.</param>
            <param name="distance">Distance of the Plane along its normal from the origin.</param>
        </member>
        <member name="M:Atom.Math.Plane3.#ctor(Atom.Math.Vector3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.Plane3"/> struct.
            </summary>
            <param name="normal">
            The normal point to the Plane.
            </param>
            <param name="distance">
            The Plane's distance along its normal from the origin.
            </param>
        </member>
        <member name="M:Atom.Math.Plane3.#ctor(Atom.Math.Vector4)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.Plane3"/> struct.
            </summary>
            <param name="value">
            A <see cref="T:Atom.Math.Vector4"/> where the X, Y, and Z components define the normal of the new Plane,
            and the W component defines the distance of the Plane along the normal from the origin.
            </param>
        </member>
        <member name="M:Atom.Math.Plane3.#ctor(Atom.Math.Vector3,Atom.Math.Vector3,Atom.Math.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.Plane3"/> struct.
            </summary>
            <param name="pointA">
            The first point of a triangle defining the Plane.
            </param>
            <param name="pointB">
            The second point of a triangle defining the Plane.
            </param>
            <param name="pointC">
            The third point of a triangle defining the Plane.
            </param>
        </member>
        <member name="M:Atom.Math.Plane3.Normalize">
            <summary>
            Changes the coefficients of the Plane.Normal point of this Plane to make it of unit length.
            </summary>
        </member>
        <member name="M:Atom.Math.Plane3.Normalize(Atom.Math.Plane3)">
            <summary>
            Changes the coefficients of the Plane.Normal point of a Plane to make it of unit length.
            </summary>
            <param name="value">The Plane to normalize.</param>
            <returns>A new Plane with a normal having unit length.</returns>
        </member>
        <member name="M:Atom.Math.Plane3.Normalize(Atom.Math.Plane3@,Atom.Math.Plane3@)">
            <summary>
            Changes the coefficients of the Plane.Normal point of a Plane to make it of unit length.
            </summary>
            <param name="value">The Plane to normalize.</param>
            <param name="result">An existing plane Plane filled in with a normalized version of the specified plane.</param>
        </member>
        <member name="M:Atom.Math.Plane3.Transform(Atom.Math.Plane3,Atom.Math.Matrix4)">
            <summary>
            Returns the result of transforming the specified
            normalized Plane by the specified <see cref="T:Atom.Math.Matrix4"/>.
            </summary>
            <param name="plane">The normalized Plane to transform. This Plane must already be normalized, so that its Plane.Normal point is of unit length, before this method is called.</param>
            <param name="matrix">The transform Matrix to apply to the Plane.</param>
            <returns>
            A new Plane that results from applying the transform.
            </returns>
        </member>
        <member name="M:Atom.Math.Plane3.Transform(Atom.Math.Plane3@,Atom.Math.Matrix4@,Atom.Math.Plane3@)">
            <summary>
            Stores the result of transforming the specified
            normalized Plane by the specified <see cref="T:Atom.Math.Matrix4"/>
            in the specified <paramref name="result"/> value.
            </summary>
            <param name="plane">
            The normalized Plane to transform. This Plane must already be normalized,
            so that its Plane.Normal point is of unit length, before this method is called.
            </param>
            <param name="matrix">The transform Matrix to apply to the Plane.</param>
            <param name="result">An existing Plane filled in with the results of applying the transform.</param>
        </member>
        <member name="M:Atom.Math.Plane3.Transform(Atom.Math.Plane3,Atom.Math.Quaternion)">
            <summary>
            Transforms a normalized Plane by a Quaternion rotation.
            </summary>
            <param name="plane">The normalized Plane to transform. This Plane must already be normalized, so that its Plane.Normal point is of unit length, before this method is called.</param>
            <param name="rotation">The Quaternion rotation to apply to the Plane.</param>
            <returns>
            A new Plane that results from applying the rotation.
            </returns>
        </member>
        <member name="M:Atom.Math.Plane3.Transform(Atom.Math.Plane3@,Atom.Math.Quaternion@,Atom.Math.Plane3@)">
            <summary>
            Transforms a normalized Plane by a Quaternion rotation.
            </summary>
            <param name="plane">The normalized Plane to transform. This Plane must already be normalized, so that its Plane.Normal point is of unit length, before this method is called.</param>
            <param name="rotation">The Quaternion rotation to apply to the Plane.</param>
            <param name="result">An existing Plane filled in with the results of applying the rotation.</param>
        </member>
        <member name="M:Atom.Math.Plane3.Dot(Atom.Math.Vector4)">
            <summary>
            Calculates the dot product of a specified Vector4 and this Plane.
            </summary>
            <param name="value">The Vector4 to multiply this Plane by.</param>
            <returns>
            The dot product of the specified Vector4 and this Plane.
            </returns>
        </member>
        <member name="M:Atom.Math.Plane3.Dot(Atom.Math.Vector4@,System.Single@)">
            <summary>
            Calculates the dot product of a specified Vector4 and this Plane.
            </summary>
            <param name="value">The Vector4 to multiply this Plane by.</param>
            <param name="result">The dot product of the specified Vector4 and this Plane.</param>
        </member>
        <member name="M:Atom.Math.Plane3.DotCoordinate(Atom.Math.Vector3)">
            <summary>
            Returns the dot product of a specified Vector3 and the Plane.Normal point of this
            Plane plus the Plane.Distance value of this Plane.
            </summary>
            <param name="value">The Vector3 to multiply by.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Atom.Math.Plane3.DotCoordinate(Atom.Math.Vector3@,System.Single@)">
            <summary>
            Returns the dot product of a specified Vector3 and the Plane.Normal point of this
            Plane plus the Plane.Distance value of this Plane.
            </summary>
            <param name="value">The Vector3 to multiply by.</param>
            <param name="result">The resulting value.</param>
        </member>
        <member name="M:Atom.Math.Plane3.DotNormal(Atom.Math.Vector3)">
            <summary>
            Returns the dot product of a specified Vector3
            and the Plane.Normal point of this Plane.
            </summary>
            <param name="value">The Vector3 to multiply by.</param>
            <returns>The resulting dot product.</returns>
        </member>
        <member name="M:Atom.Math.Plane3.DotNormal(Atom.Math.Vector3@,System.Single@)">
            <summary>
            Returns the dot product of a specified Vector3 
            and the Plane.Normal point of this Plane.
            </summary>
            <param name="value">The Vector3 to multiply by.</param>
            <param name="result">The resulting dot product.</param>
        </member>
        <member name="M:Atom.Math.Plane3.Intersects(Atom.Math.Sphere)">
            <summary>
            Checks whether this <see cref="T:Atom.Math.Plane3"/> intersects the specified <see cref="T:Atom.Math.Sphere"/>.
            </summary>
            <param name="sphere">The <see cref="T:Atom.Math.Sphere"/> to check for intersection with.</param>
            <returns>An enumeration indicating the relationship between the Plane and the Sphere.</returns>
        </member>
        <member name="M:Atom.Math.Plane3.Intersects(Atom.Math.Sphere@,Atom.Math.PlaneIntersectionType@)">
            <summary>
            Checks whether this <see cref="T:Atom.Math.Plane3"/> intersects the specified <see cref="T:Atom.Math.Sphere"/>.
            </summary>
            <param name="sphere">The <see cref="T:Atom.Math.Sphere"/> to check for intersection with.</param>
            <param name="result">An enumeration indicating whether the Plane intersects the Sphere.</param>
        </member>
        <member name="M:Atom.Math.Plane3.Intersects(Atom.Math.Box)">
            <summary>Checks whether this <see cref="T:Atom.Math.Plane3"/> intersects the specified <see cref="T:Atom.Math.Box"/>.</summary>
            <param name="box">The <see cref="T:Atom.Math.Box"/> to test for intersection with.</param>
            <returns>An enumeration indicating the relationship between the Plane and the Box.</returns>
        </member>
        <member name="M:Atom.Math.Plane3.Intersects(Atom.Math.Box@,Atom.Math.PlaneIntersectionType@)">
            <summary>
            Checks whether the current Plane intersects a Box.
            </summary>
            <param name="box">The Box to check for intersection with.</param>
            <param name="result">An enumeration indicating whether the Plane intersects the Box.</param>
        </member>
        <member name="M:Atom.Math.Plane3.Equals(Atom.Math.Plane3)">
            <summary>
            Determines whether the specified <see cref="T:Atom.Math.Plane3"/> is equal to this <see cref="T:Atom.Math.Plane3"/>.
            </summary>
            <param name="other">The Plane to compare with the current Plane.</param>
            <returns>true if the specified Plane is equal to the current Plane; false otherwise.
            </returns>
        </member>
        <member name="M:Atom.Math.Plane3.Equals(System.Object)">
            <summary>
            Determines whether the specified System.Object is equal to this <see cref="T:Atom.Math.Plane3"/>.
            </summary>
            <param name="obj">The System.Object to compare with the current Plane.</param>
            <returns>true if the specified System.Object is equal to the current Plane; false otherwise.
            </returns>
        </member>
        <member name="M:Atom.Math.Plane3.GetHashCode">
            <summary>Gets the hash code of this <see cref="T:Atom.Math.Plane3"/> instance.</summary>
            <returns>
            A hash code for the current Plane.
            </returns>
        </member>
        <member name="M:Atom.Math.Plane3.ToString">
            <summary>
            Returns a human-readable text representation of the Plane3.
            </summary>
            <returns>A human-readable text representation of the Plane3.</returns>
        </member>
        <member name="M:Atom.Math.Plane3.ToString(System.IFormatProvider)">
            <summary>
            Returns a human-readable text representation of the Plane3.
            </summary>
            <param name="formatProvider">
            The <see cref="T:System.IFormatProvider"/> that supplies culture specific formatting information.
            </param>
            <returns>A human-readable text representation of the Plane3.</returns>
        </member>
        <member name="M:Atom.Math.Plane3.op_Equality(Atom.Math.Plane3,Atom.Math.Plane3)">
            <summary>
            Determines whether two instances of Plane are equal.
            </summary>
            <param name="left">The object to the left of the equality operator.</param>
            <param name="right">The object to the right of the equality operator.</param>
            <returns>true if left is equal to right; false otherwise.
            </returns>
        </member>
        <member name="M:Atom.Math.Plane3.op_Inequality(Atom.Math.Plane3,Atom.Math.Plane3)">
            <summary>
            Determines whether two instances of Plane are not equal.
            </summary>
            <param name="left">The object to the left of the inequality operator.</param>
            <param name="right">The object to the right of the inequality operator.</param>
            <returns>true if left is not equal to right; false otherwise.
            </returns>
        </member>
        <member name="T:Atom.Math.Point2">
            <summary>
            Represents a point in two dimensional space.
            </summary>
        </member>
        <member name="F:Atom.Math.Point2.X">
            <summary>
            The X-coordinate of the Point.
            </summary>
        </member>
        <member name="F:Atom.Math.Point2.Y">
            <summary>
            The Y-coordinate of the Point.
            </summary>
        </member>
        <member name="P:Atom.Math.Point2.Zero">
            <summary>
            Gets a <see cref="T:Atom.Math.Point2"/> with the coordinates (0, 0).
            </summary>
            <value>The point (0, 0).</value>
        </member>
        <member name="P:Atom.Math.Point2.One">
            <summary>
            Gets a <see cref="T:Atom.Math.Point2"/> with the coordinates (1, 1).
            </summary>
            <value>The point (1, 1).</value>
        </member>
        <member name="P:Atom.Math.Point2.UnitX">
            <summary>
            Gets a <see cref="T:Atom.Math.Point2"/> with the coordinates (1, 0).
            </summary>
            <value>The point (1, 0).</value>
        </member>
        <member name="P:Atom.Math.Point2.UnitY">
            <summary>
            Gets a <see cref="T:Atom.Math.Point2"/> with the coordinates (0, 1).
            </summary>
            <value>The point (0, 1).</value>
        </member>
        <member name="M:Atom.Math.Point2.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.Point2"/> structure.
            </summary>
            <param name="x">The X-coordinate of the new Point.</param>
            <param name="y">The Y-coordinate of the new Point.</param>
        </member>
        <member name="M:Atom.Math.Point2.Add(Atom.Math.Point2,Atom.Math.Point2)">
            <summary>
            Returns the result of adding the <paramref name="right"/> Vector to the <paramref name="left"/> Vector.
            </summary>
            <param name="left">The value on the left side of the equation.</param>
            <param name="right">The value on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Point2.Add(Atom.Math.Point2@,Atom.Math.Point2@,Atom.Math.Point2@)">
            <summary>
            Stores the result of adding the <paramref name="right"/> Vector to the <paramref name="left"/> Vector
            in the given Vector.
            </summary>
            <param name="left">The value on the left side of the equation. This value will not be modified by this method.</param>
            <param name="right">The value on the right side of the equation. This value will not be modified by this method.</param>
            <param name="result">Will contain the result fo the operation.</param>
        </member>
        <member name="M:Atom.Math.Point2.Add(Atom.Math.Point2,System.Int32)">
            <summary>
            Returns the result of adding the given <paramref name="scalar"/> to the given <paramref name="point"/>.
            </summary>
            <param name="point">The point on the left side of the equation.</param>
            <param name="scalar">The scalar on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Point2.Add(Atom.Math.Point2@,System.Int32,Atom.Math.Point2@)">
            <summary>
            Stores the result of adding the given <paramref name="scalar"/> to the given <paramref name="point"/>
            in the given Vector.
            </summary>
            <param name="point">The point on the left side of the equation. This value will not be modified by this method.</param>
            <param name="scalar">The scalar on the right side of the equation. </param>
            <param name="result">Will contain the result fo the operation.</param>
        </member>
        <member name="M:Atom.Math.Point2.Plus(Atom.Math.Point2)">
            <summary>
            This method returns the specified Vector.
            </summary>
            <remarks>
            Is equal to "+point".
            </remarks>
            <param name="point">The point.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Point2.Plus(Atom.Math.Point2@,Atom.Math.Point2@)">
            <summary>
            This method stores the specified Vector in the specified result value.
            </summary>
            <remarks>
            Is equal to "+point".
            </remarks>
            <param name="point">The point.</param>
            <param name="result">Will contain the result of the operation.</param>
        </member>
        <member name="M:Atom.Math.Point2.Subtract(Atom.Math.Point2,Atom.Math.Point2)">
            <summary>
            Returns the result of subtracting the <paramref name="right"/> Vector from the <paramref name="left"/> Vector.
            </summary>
            <param name="left">The value on the left side of the equation.</param>
            <param name="right">The value on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Point2.Subtract(Atom.Math.Point2@,Atom.Math.Point2@,Atom.Math.Point2@)">
            <summary>
            Stores the result of subtracting the <paramref name="right"/> Vector frpm the <paramref name="left"/> Vector
            in the given Vector.
            </summary>
            <param name="left">The value on the left side of the equation. This value will not be modified by this method.</param>
            <param name="right">The value on the right side of the equation. This value will not be modified by this method.</param>
            <param name="result">Will contain the result fo the operation.</param>
        </member>
        <member name="M:Atom.Math.Point2.Subtract(Atom.Math.Point2,System.Int32)">
            <summary>
            Returns the result of subtracting the given <paramref name="scalar"/> from the given <paramref name="point"/>.
            </summary>
            <param name="point">The point on the left side of the equation.</param>
            <param name="scalar">The scalar on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Point2.Subtract(Atom.Math.Point2@,System.Int32,Atom.Math.Point2@)">
            <summary>
            Stores the result of subtracting the given <paramref name="scalar"/> from the given <paramref name="point"/>
            in the given Vector.
            </summary>
            <param name="point">The point on the left side of the equation. This value will not be modified by this method.</param>
            <param name="scalar">The scalar on the right side of the equation.</param>
            <param name="result">Will contain the result fo the operation.</param>
        </member>
        <member name="M:Atom.Math.Point2.Negate(Atom.Math.Point2)">
            <summary>
            Returns the result of negating the elements of the given <paramref name="point"/>.
            </summary>
            <param name="point">
            The point to negate.
            </param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Point2.Negate(Atom.Math.Point2@,Atom.Math.Point2@)">
            <summary>
            Stores the result of negating the elements of the given <paramref name="point"/> in the given Vector.
            </summary>
            <param name="point">
            The point to negate. This value will not be modified by this method.
            </param>
            <param name="result">Will contain the result of the operation.</param>
        </member>
        <member name="M:Atom.Math.Point2.Multiply(Atom.Math.Point2,System.Int32)">
            <summary>
            Returns the result of multiplying the given <paramref name="point"/> by the given <paramref name="scalar"/>.
            </summary>
            <param name="point">The point on the left side of the equation.</param>
            <param name="scalar">The scalar on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Point2.Multiply(Atom.Math.Point2@,System.Int32,Atom.Math.Point2@)">
            <summary>
            Stores the result of multiplying the given <paramref name="point"/> by the given <paramref name="scalar"/>.
            in the given Vector.
            </summary>
            <param name="point">The point on the left side of the equation. This value will not be modified by this method.</param>
            <param name="scalar">The scalar on the right side of the equation.</param>
            <param name="result">Will contain the result fo the operation.</param>
        </member>
        <member name="M:Atom.Math.Point2.Multiply(Atom.Math.Point2,Atom.Math.Point2)">
            <summary>
            Returns the result of multiplying the left Vector by the right Vector component-by-component.
            </summary>
            <param name="left">The point on the left side of the equation.</param>
            <param name="right">The point on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Point2.Multiply(Atom.Math.Point2@,Atom.Math.Point2@,Atom.Math.Point2@)">
            <summary>
            Stores the result of multiplying the left Vector by the right Vector component-by-component.
            in the given result Vector.
            </summary>
            <param name="left">The point on the left side of the equation. This value will not be modified by this method.</param>
            <param name="right">The point on the right side of the equation. This value will not be modified by this method.</param>
            <param name="result">Will contain the result of the operation.</param>
        </member>
        <member name="M:Atom.Math.Point2.Divide(Atom.Math.Point2,System.Int32)">
            <summary>
            Returns the result of dividing the given <paramref name="point"/> through the given <paramref name="scalar"/>.
            </summary>
            <param name="point">The point on the left side of the equation.</param>
            <param name="scalar">The scalar on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Point2.Divide(Atom.Math.Point2@,System.Int32,Atom.Math.Point2@)">
            <summary>
            Stores the result of dividing the given <paramref name="point"/> through the given <paramref name="scalar"/>
            in the given result Vector.
            </summary>
            <param name="point">The point on the left side of the equation. This value will not be modified by this method.</param>
            <param name="scalar">The scalar on the right side of the equation.</param>
            <param name="result">Will contain the result fo the operation.</param>
        </member>
        <member name="M:Atom.Math.Point2.Divide(Atom.Math.Point2,Atom.Math.Point2)">
            <summary>
            Returns the result of dividing the left Vector through the right Vector component-by-component.
            </summary>
            <param name="left">The point on the left side of the equation.</param>
            <param name="right">The point on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Point2.Divide(Atom.Math.Point2@,Atom.Math.Point2@,Atom.Math.Point2@)">
            <summary>
            Stores the result of dividing the left Vector through the right Vector component-by-component.
            in the given result Vector.
            </summary>
            <param name="left">The point on the left side of the equation. This value will not be modified by this method.</param>
            <param name="right">The point on the right side of the equation. This value will not be modified by this method.</param>
            <param name="result">Will store the result of the operation.</param>
        </member>
        <member name="M:Atom.Math.Point2.Equals(Atom.Math.Point2)">
            <summary>
            Returns whether the given <see cref="T:Atom.Math.Point2"/> has the
            same indices set as this Point2.
            </summary>
            <param name="other">The Point2 to test against.</param>
            <returns>true if the indices are equal; otherwise false.</returns>
        </member>
        <member name="M:Atom.Math.Point2.Equals(System.Object)">
            <summary>
            Returns whether the given <see cref="T:System.Object"/> is equal to this Point2.
            </summary>
            <param name="obj">The Object to test against.</param>
            <returns>true if they are equal; otherwise false.</returns>
        </member>
        <member name="M:Atom.Math.Point2.ToString">
            <summary>
            Overriden to return a human-readable text representation of the Point.
            </summary>
            <returns>A human-readable text representation of the Point.</returns>
        </member>
        <member name="M:Atom.Math.Point2.ToString(System.IFormatProvider)">
            <summary>
            Overriden to return a human-readable text representation of the Point
            using the given formatting information provider.
            </summary>
            <param name="formatProvider">Provides culture-sensitive formatting information.</param>
            <returns>A human-readable text representation of the Point.</returns>
        </member>
        <member name="M:Atom.Math.Point2.GetHashCode">
            <summary>
            Overriden to return the hashcode of the <see cref="T:Atom.Math.Point2"/>.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Atom.Math.Point2.op_Addition(Atom.Math.Point2,Atom.Math.Point2)">
            <summary>
            Returns the result of adding the <paramref name="right"/> Vector to the the <paramref name="left"/> Vector.
            </summary>
            <param name="left">The value on the left side of the equation.</param>
            <param name="right">The value on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Point2.op_Addition(Atom.Math.Point2,System.Int32)">
            <summary>
            Returns the result of adding the given <paramref name="scalar"/> to the thegiven <paramref name="point"/>.
            </summary>
            <param name="point">The point on the left side of the equation.</param>
            <param name="scalar">The scalar on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Point2.op_UnaryPlus(Atom.Math.Point2)">
            <summary>
            Returns the original specified point, doing nothing.
            </summary>
            <param name="point">The point.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Point2.op_Subtraction(Atom.Math.Point2,Atom.Math.Point2)">
            <summary>
            Returns the result of subtracting the <paramref name="right"/> Vector from the the <paramref name="left"/> Vector.
            </summary>
            <param name="left">The value on the left side of the equation.</param>
            <param name="right">The value on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Point2.op_Subtraction(Atom.Math.Point2,System.Int32)">
            <summary>
            Returns the result of subtracting the given <paramref name="scalar"/> from the given <paramref name="point"/>.
            </summary>
            <param name="point">The point on the left side of the equation.</param>
            <param name="scalar">The scalar on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Point2.op_UnaryNegation(Atom.Math.Point2)">
            <summary>
            Returns the result of negating the given <paramref name="point"/>.
            </summary>
            <param name="point">The point.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Point2.op_Multiply(Atom.Math.Point2,System.Int32)">
            <summary>
            Returns the result of multiplcing the given <paramref name="point"/> by the given <paramref name="scalar"/>.
            </summary>
            <param name="point">The point on the left side of the equation.</param>
            <param name="scalar">The scalar on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Point2.op_Multiply(Atom.Math.Point2,Atom.Math.Point2)">
            <summary>
            Returns the result of multiplying the left Vector by the right Vector component-by-component.
            </summary>
            <param name="left">The point on the left side of the equation.</param>
            <param name="right">The point on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Point2.op_Division(Atom.Math.Point2,System.Int32)">
            <summary>
            Returns the result of dividing the given <paramref name="point"/> by the given <paramref name="scalar"/>.
            </summary>
            <param name="point">The point on the left side of the equation.</param>
            <param name="scalar">The scalar on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Point2.op_Division(Atom.Math.Point2,System.Single)">
            <summary>
            Returns the result of dividing the given <paramref name="point"/> by the given <paramref name="scalar"/>.
            </summary>
            <param name="point">The point on the left side of the equation.</param>
            <param name="scalar">The scalar on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Point2.op_Division(Atom.Math.Point2,Atom.Math.Point2)">
            <summary>
            Returns the result of dividing the left Vector through the right Vector element-by-element.
            </summary>
            <param name="left">The point on the left side of the equation.</param>
            <param name="right">The point on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Point2.op_Equality(Atom.Math.Point2,Atom.Math.Point2)">
            <summary>
            Returns whether the specified <see cref="T:Atom.Math.Point2"/> instances are (approximately) equal.
            </summary>
            <param name="left">The value on the left side of the equation.</param>
            <param name="right">The value on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Point2.op_Inequality(Atom.Math.Point2,Atom.Math.Point2)">
            <summary>
            Returns whether the specified <see cref="T:Atom.Math.Point2"/> instances are (approximately) inequal.
            </summary>
            <param name="left">The value on the left side of the equation.</param>
            <param name="right">The value on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Point2.op_Implicit(Atom.Math.Point2)~Atom.Math.Vector2">
            <summary>
            Implicit cast operator that implements conversion
            from a <see cref="T:Atom.Math.Vector2"/> to a <see cref="T:Atom.Math.Point2"/>.
            </summary>
            <param name="point">
            The input point.
            </param>
            <returns>
            The converted value.
            </returns>
        </member>
        <member name="T:Atom.Math.Point3">
            <summary>
            Represents a point in three dimensional space.
            </summary>
        </member>
        <member name="F:Atom.Math.Point3.X">
            <summary>
            The X-coordinate of the Point.
            </summary>
        </member>
        <member name="F:Atom.Math.Point3.Y">
            <summary>
            The Y-coordinate of the Point.
            </summary>
        </member>
        <member name="F:Atom.Math.Point3.Z">
            <summary>
            The Z-coordinate of the Point.
            </summary>
        </member>
        <member name="P:Atom.Math.Point3.Zero">
            <summary>
            Gets a <see cref="T:Atom.Math.Point3"/> with the coordinates (0, 0).
            </summary>
            <value>The point (0, 0, 0).</value>
        </member>
        <member name="P:Atom.Math.Point3.One">
            <summary>
            Gets a <see cref="T:Atom.Math.Point3"/> with the coordinates (1, 1, 1).
            </summary>
            <value>The point (1, 1, 1).</value>
        </member>
        <member name="P:Atom.Math.Point3.UnitX">
            <summary>
            Gets a <see cref="T:Atom.Math.Point3"/> with the coordinates (1, 0, 0).
            </summary>
            <value>The point (1, 0, 0).</value>
        </member>
        <member name="P:Atom.Math.Point3.UnitY">
            <summary>
            Gets a <see cref="T:Atom.Math.Point3"/> with the coordinates (0, 1, 0).
            </summary>
            <value>The point (0, 1, 0).</value>
        </member>
        <member name="P:Atom.Math.Point3.UnitZ">
            <summary>
            Gets a <see cref="T:Atom.Math.Point3"/> with the coordinates (0, 0, 1).
            </summary>
            <value>The point (0, 0, 1).</value>
        </member>
        <member name="M:Atom.Math.Point3.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.Point3"/> structure.
            </summary>
            <param name="x">The X-coordinate of the new Point.</param>
            <param name="y">The Y-coordinate of the new Point.</param>
            <param name="z">The Z-coordinate of the new Point.</param>
        </member>
        <member name="M:Atom.Math.Point3.Add(Atom.Math.Point3,Atom.Math.Point3)">
            <summary>
            Returns the result of adding the <paramref name="right"/> Vector to the <paramref name="left"/> Vector.
            </summary>
            <param name="left">The value on the left side of the equation.</param>
            <param name="right">The value on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Point3.Add(Atom.Math.Point3@,Atom.Math.Point3@,Atom.Math.Point3@)">
            <summary>
            Stores the result of adding the <paramref name="right"/> Vector to the <paramref name="left"/> Vector
            in the given Vector.
            </summary>
            <param name="left">The value on the left side of the equation. This value will not be modified by this method.</param>
            <param name="right">The value on the right side of the equation. This value will not be modified by this method.</param>
            <param name="result">Will contain the result fo the operation.</param>
        </member>
        <member name="M:Atom.Math.Point3.Add(Atom.Math.Point3,System.Int32)">
            <summary>
            Returns the result of adding the given <paramref name="scalar"/> to the given <paramref name="point"/>.
            </summary>
            <param name="point">The point on the left side of the equation.</param>
            <param name="scalar">The scalar on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Point3.Add(Atom.Math.Point3@,System.Int32,Atom.Math.Point3@)">
            <summary>
            Stores the result of adding the given <paramref name="scalar"/> to the given <paramref name="point"/>
            in the given Vector.
            </summary>
            <param name="point">The point on the left side of the equation. This value will not be modified by this method.</param>
            <param name="scalar">The scalar on the right side of the equation. </param>
            <param name="result">Will contain the result fo the operation.</param>
        </member>
        <member name="M:Atom.Math.Point3.Plus(Atom.Math.Point3)">
            <summary>
            This method returns the specified Vector.
            </summary>
            <remarks>
            Is equal to "+point".
            </remarks>
            <param name="point">The point.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Point3.Plus(Atom.Math.Point3@,Atom.Math.Point3@)">
            <summary>
            This method stores the specified Vector in the specified result value.
            </summary>
            <remarks>
            Is equal to "+point".
            </remarks>
            <param name="point">The point.</param>
            <param name="result">Will contain the result of the operation.</param>
        </member>
        <member name="M:Atom.Math.Point3.Subtract(Atom.Math.Point3,Atom.Math.Point3)">
            <summary>
            Returns the result of subtracting the <paramref name="right"/> Vector from the <paramref name="left"/> Vector.
            </summary>
            <param name="left">The value on the left side of the equation.</param>
            <param name="right">The value on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Point3.Subtract(Atom.Math.Point3@,Atom.Math.Point3@,Atom.Math.Point3@)">
            <summary>
            Stores the result of subtracting the <paramref name="right"/> Vector frpm the <paramref name="left"/> Vector
            in the given Vector.
            </summary>
            <param name="left">The value on the left side of the equation. This value will not be modified by this method.</param>
            <param name="right">The value on the right side of the equation. This value will not be modified by this method.</param>
            <param name="result">Will contain the result fo the operation.</param>
        </member>
        <member name="M:Atom.Math.Point3.Subtract(Atom.Math.Point3,System.Int32)">
            <summary>
            Returns the result of subtracting the given <paramref name="scalar"/> from the given <paramref name="point"/>.
            </summary>
            <param name="point">The point on the left side of the equation.</param>
            <param name="scalar">The scalar on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Point3.Subtract(Atom.Math.Point3@,System.Int32,Atom.Math.Point3@)">
            <summary>
            Stores the result of subtracting the given <paramref name="scalar"/> from the given <paramref name="point"/>
            in the given Vector.
            </summary>
            <param name="point">The point on the left side of the equation. This value will not be modified by this method.</param>
            <param name="scalar">The scalar on the right side of the equation.</param>
            <param name="result">Will contain the result fo the operation.</param>
        </member>
        <member name="M:Atom.Math.Point3.Negate(Atom.Math.Point3)">
            <summary>
            Returns the result of negating the elements of the given <paramref name="point"/>.
            </summary>
            <param name="point">
            The point to negate.
            </param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Point3.Negate(Atom.Math.Point3@,Atom.Math.Point3@)">
            <summary>
            Stores the result of negating the elements of the given <paramref name="point"/> in the given Vector.
            </summary>
            <param name="point">
            The point to negate. This value will not be modified by this method.
            </param>
            <param name="result">Will contain the result of the operation.</param>
        </member>
        <member name="M:Atom.Math.Point3.Multiply(Atom.Math.Point3,System.Int32)">
            <summary>
            Returns the result of multiplying the given <paramref name="point"/> by the given <paramref name="scalar"/>.
            </summary>
            <param name="point">The point on the left side of the equation.</param>
            <param name="scalar">The scalar on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Point3.Multiply(Atom.Math.Point3@,System.Int32,Atom.Math.Point3@)">
            <summary>
            Stores the result of multiplying the given <paramref name="point"/> by the given <paramref name="scalar"/>.
            in the given Vector.
            </summary>
            <param name="point">The point on the left side of the equation. This value will not be modified by this method.</param>
            <param name="scalar">The scalar on the right side of the equation.</param>
            <param name="result">Will contain the result fo the operation.</param>
        </member>
        <member name="M:Atom.Math.Point3.Multiply(Atom.Math.Point3,Atom.Math.Point3)">
            <summary>
            Returns the result of multiplying the left Vector by the right Vector component-by-component.
            </summary>
            <param name="left">The point on the left side of the equation.</param>
            <param name="right">The point on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Point3.Multiply(Atom.Math.Point3@,Atom.Math.Point3@,Atom.Math.Point3@)">
            <summary>
            Stores the result of multiplying the left Vector by the right Vector component-by-component.
            in the given result Vector.
            </summary>
            <param name="left">The point on the left side of the equation. This value will not be modified by this method.</param>
            <param name="right">The point on the right side of the equation. This value will not be modified by this method.</param>
            <param name="result">Will contain the result of the operation.</param>
        </member>
        <member name="M:Atom.Math.Point3.Divide(Atom.Math.Point3,System.Int32)">
            <summary>
            Returns the result of dividing the given <paramref name="point"/> through the given <paramref name="scalar"/>.
            </summary>
            <param name="point">The point on the left side of the equation.</param>
            <param name="scalar">The scalar on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Point3.Divide(Atom.Math.Point3@,System.Int32,Atom.Math.Point3@)">
            <summary>
            Stores the result of dividing the given <paramref name="point"/> through the given <paramref name="scalar"/>
            in the given result Vector.
            </summary>
            <param name="point">The point on the left side of the equation. This value will not be modified by this method.</param>
            <param name="scalar">The scalar on the right side of the equation.</param>
            <param name="result">Will contain the result fo the operation.</param>
        </member>
        <member name="M:Atom.Math.Point3.Divide(Atom.Math.Point3,Atom.Math.Point3)">
            <summary>
            Returns the result of dividing the left Vector through the right Vector component-by-component.
            </summary>
            <param name="left">The point on the left side of the equation.</param>
            <param name="right">The point on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Point3.Divide(Atom.Math.Point3@,Atom.Math.Point3@,Atom.Math.Point3@)">
            <summary>
            Stores the result of dividing the left Vector through the right Vector component-by-component.
            in the given result Vector.
            </summary>
            <param name="left">The point on the left side of the equation. This value will not be modified by this method.</param>
            <param name="right">The point on the right side of the equation. This value will not be modified by this method.</param>
            <param name="result">Will store the result of the operation.</param>
        </member>
        <member name="M:Atom.Math.Point3.Equals(Atom.Math.Point3)">
            <summary>
            Returns whether the given <see cref="T:Atom.Math.Point3"/> has the
            same indices set as this Point3.
            </summary>
            <param name="other">The Point3 to test against.</param>
            <returns>true if the indices are equal; otherwise false.</returns>
        </member>
        <member name="M:Atom.Math.Point3.Equals(System.Object)">
            <summary>
            Returns whether the given <see cref="T:System.Object"/> is equal to this Point3.
            </summary>
            <param name="obj">The Object to test against.</param>
            <returns>true if they are equal; otherwise false.</returns>
        </member>
        <member name="M:Atom.Math.Point3.ToString">
            <summary>
            Overriden to return a human-readable text representation of the Point.
            </summary>
            <returns>A human-readable text representation of the Point.</returns>
        </member>
        <member name="M:Atom.Math.Point3.ToString(System.IFormatProvider)">
            <summary>
            Overriden to return a human-readable text representation of the Point
            using the given formatting information provider.
            </summary>
            <param name="formatProvider">Provides culture-sensitive formatting information.</param>
            <returns>A human-readable text representation of the Point.</returns>
        </member>
        <member name="M:Atom.Math.Point3.GetHashCode">
            <summary>
            Overriden to return the hashcode of the <see cref="T:Atom.Math.Point3"/>.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Atom.Math.Point3.op_Addition(Atom.Math.Point3,Atom.Math.Point3)">
            <summary>
            Returns the result of adding the <paramref name="right"/> Vector to the the <paramref name="left"/> Vector.
            </summary>
            <param name="left">The value on the left side of the equation.</param>
            <param name="right">The value on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Point3.op_Addition(Atom.Math.Point3,System.Int32)">
            <summary>
            Returns the result of adding the given <paramref name="scalar"/> to the thegiven <paramref name="point"/>.
            </summary>
            <param name="point">The point on the left side of the equation.</param>
            <param name="scalar">The scalar on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Point3.op_UnaryPlus(Atom.Math.Point3)">
            <summary>
            Returns the original specified point, doing nothing.
            </summary>
            <param name="point">The point.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Point3.op_Subtraction(Atom.Math.Point3,Atom.Math.Point3)">
            <summary>
            Returns the result of subtracting the <paramref name="right"/> Vector from the the <paramref name="left"/> Vector.
            </summary>
            <param name="left">The value on the left side of the equation.</param>
            <param name="right">The value on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Point3.op_Subtraction(Atom.Math.Point3,System.Int32)">
            <summary>
            Returns the result of subtracting the given <paramref name="scalar"/> from the given <paramref name="point"/>.
            </summary>
            <param name="point">The point on the left side of the equation.</param>
            <param name="scalar">The scalar on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Point3.op_UnaryNegation(Atom.Math.Point3)">
            <summary>
            Returns the result of negating the given <paramref name="point"/>.
            </summary>
            <param name="point">The point.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Point3.op_Multiply(Atom.Math.Point3,System.Int32)">
            <summary>
            Returns the result of multiplcing the given <paramref name="point"/> by the given <paramref name="scalar"/>.
            </summary>
            <param name="point">The point on the left side of the equation.</param>
            <param name="scalar">The scalar on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Point3.op_Multiply(System.Int32,Atom.Math.Point3)">
            <summary>
            Returns the result of multiplcing the given <paramref name="scalar"/> by the given <paramref name="point"/>.
            </summary>
            <param name="scalar">The scalar on the left side of the equation.</param>
            <param name="point">The point on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Point3.op_Multiply(Atom.Math.Point3,Atom.Math.Point3)">
            <summary>
            Returns the result of multiplying the left Vector by the right Vector component-by-component.
            </summary>
            <param name="left">The point on the left side of the equation.</param>
            <param name="right">The point on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Point3.op_Division(Atom.Math.Point3,System.Int32)">
            <summary>
            Returns the result of dividing the given <paramref name="point"/> by the given <paramref name="scalar"/>.
            </summary>
            <param name="point">The point on the left side of the equation.</param>
            <param name="scalar">The scalar on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Point3.op_Division(Atom.Math.Point3,Atom.Math.Point3)">
            <summary>
            Returns the result of dividing the left Vector through the right Vector element-by-element.
            </summary>
            <param name="left">The point on the left side of the equation.</param>
            <param name="right">The point on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Point3.op_Equality(Atom.Math.Point3,Atom.Math.Point3)">
            <summary>
            Returns whether the specified <see cref="T:Atom.Math.Point3"/> instances are (approximately) equal.
            </summary>
            <param name="left">The value on the left side of the equation.</param>
            <param name="right">The value on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Point3.op_Inequality(Atom.Math.Point3,Atom.Math.Point3)">
            <summary>
            Returns whether the specified <see cref="T:Atom.Math.Point3"/> instances are (approximately) inequal.
            </summary>
            <param name="left">The value on the left side of the equation.</param>
            <param name="right">The value on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Point3.op_Implicit(Atom.Math.Point3)~Atom.Math.Vector3">
            <summary>
            Implicit cast operator that implements conversion
            from a <see cref="T:Atom.Math.Vector3"/> to a <see cref="T:Atom.Math.Point3"/>.
            </summary>
            <param name="point">
            The input point.
            </param>
            <returns>
            The converted value.
            </returns>
        </member>
        <member name="T:Atom.Math.Point4">
            <summary>
            Represents a point in four dimensional space.
            </summary>
        </member>
        <member name="F:Atom.Math.Point4.X">
            <summary>
            The X-coordinate of the Point.
            </summary>
        </member>
        <member name="F:Atom.Math.Point4.Y">
            <summary>
            The Y-coordinate of the Point.
            </summary>
        </member>
        <member name="F:Atom.Math.Point4.Z">
            <summary>
            The Z-coordinate of the Point.
            </summary>
        </member>
        <member name="F:Atom.Math.Point4.W">
            <summary>
            The W-coordinate of the Point.
            </summary>
        </member>
        <member name="P:Atom.Math.Point4.Zero">
            <summary>
            Gets a <see cref="T:Atom.Math.Point4"/> with the coordinates (0, 0).
            </summary>
            <value>The point (0, 0, 0, 0).</value>
        </member>
        <member name="P:Atom.Math.Point4.One">
            <summary>
            Gets a <see cref="T:Atom.Math.Point4"/> with the coordinates (1, 1, 1, 1).
            </summary>
            <value>The point (1, 1, 1, 1).</value>
        </member>
        <member name="P:Atom.Math.Point4.UnitX">
            <summary>
            Gets a <see cref="T:Atom.Math.Point4"/> with the coordinates (1, 0, 0, 0).
            </summary>
            <value>The point (1, 0, 0, 0).</value>
        </member>
        <member name="P:Atom.Math.Point4.UnitY">
            <summary>
            Gets a <see cref="T:Atom.Math.Point4"/> with the coordinates (0, 1, 0, 0).
            </summary>
            <value>The point (0, 1, 0, 0).</value>
        </member>
        <member name="P:Atom.Math.Point4.UnitZ">
            <summary>
            Gets a <see cref="T:Atom.Math.Point4"/> with the coordinates (0, 0, 1, 0).
            </summary>
            <value>The point (0, 0, 1, 0).</value>
        </member>
        <member name="P:Atom.Math.Point4.UnitW">
            <summary>
            Gets a <see cref="T:Atom.Math.Point4"/> with the coordinates (0, 0, 0, 1).
            </summary>
            <value>The point (0, 0, 0, 1).</value>
        </member>
        <member name="M:Atom.Math.Point4.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.Point4"/> structure.
            </summary>
            <param name="x">The X-coordinate of the new Point.</param>
            <param name="y">The Y-coordinate of the new Point.</param>
            <param name="z">The Z-coordinate of the new Point.</param>
            <param name="w">The W-coordinate of the new Point.</param>
        </member>
        <member name="M:Atom.Math.Point4.Add(Atom.Math.Point4,Atom.Math.Point4)">
            <summary>
            Returns the result of adding the <paramref name="right"/> Vector to the <paramref name="left"/> Vector.
            </summary>
            <param name="left">The value on the left side of the equation.</param>
            <param name="right">The value on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Point4.Add(Atom.Math.Point4@,Atom.Math.Point4@,Atom.Math.Point4@)">
            <summary>
            Stores the result of adding the <paramref name="right"/> Vector to the <paramref name="left"/> Vector
            in the given Vector.
            </summary>
            <param name="left">The value on the left side of the equation. This value will not be modified by this method.</param>
            <param name="right">The value on the right side of the equation. This value will not be modified by this method.</param>
            <param name="result">Will contain the result fo the operation.</param>
        </member>
        <member name="M:Atom.Math.Point4.Add(Atom.Math.Point4,System.Int32)">
            <summary>
            Returns the result of adding the given <paramref name="scalar"/> to the given <paramref name="point"/>.
            </summary>
            <param name="point">The point on the left side of the equation.</param>
            <param name="scalar">The scalar on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Point4.Add(Atom.Math.Point4@,System.Int32,Atom.Math.Point4@)">
            <summary>
            Stores the result of adding the given <paramref name="scalar"/> to the given <paramref name="point"/>
            in the given Vector.
            </summary>
            <param name="point">The point on the left side of the equation. This value will not be modified by this method.</param>
            <param name="scalar">The scalar on the right side of the equation. </param>
            <param name="result">Will contain the result fo the operation.</param>
        </member>
        <member name="M:Atom.Math.Point4.Plus(Atom.Math.Point4)">
            <summary>
            This method returns the specified Vector.
            </summary>
            <remarks>
            Is equal to "+point".
            </remarks>
            <param name="point">The point.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Point4.Plus(Atom.Math.Point4@,Atom.Math.Point4@)">
            <summary>
            This method stores the specified Vector in the specified result value.
            </summary>
            <remarks>
            Is equal to "+point".
            </remarks>
            <param name="point">The point.</param>
            <param name="result">Will contain the result of the operation.</param>
        </member>
        <member name="M:Atom.Math.Point4.Subtract(Atom.Math.Point4,Atom.Math.Point4)">
            <summary>
            Returns the result of subtracting the <paramref name="right"/> Vector from the <paramref name="left"/> Vector.
            </summary>
            <param name="left">The value on the left side of the equation.</param>
            <param name="right">The value on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Point4.Subtract(Atom.Math.Point4@,Atom.Math.Point4@,Atom.Math.Point4@)">
            <summary>
            Stores the result of subtracting the <paramref name="right"/> Vector frpm the <paramref name="left"/> Vector
            in the given Vector.
            </summary>
            <param name="left">The value on the left side of the equation. This value will not be modified by this method.</param>
            <param name="right">The value on the right side of the equation. This value will not be modified by this method.</param>
            <param name="result">Will contain the result fo the operation.</param>
        </member>
        <member name="M:Atom.Math.Point4.Subtract(Atom.Math.Point4,System.Int32)">
            <summary>
            Returns the result of subtracting the given <paramref name="scalar"/> from the given <paramref name="point"/>.
            </summary>
            <param name="point">The point on the left side of the equation.</param>
            <param name="scalar">The scalar on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Point4.Subtract(Atom.Math.Point4@,System.Int32,Atom.Math.Point4@)">
            <summary>
            Stores the result of subtracting the given <paramref name="scalar"/> from the given <paramref name="point"/>
            in the given Vector.
            </summary>
            <param name="point">The point on the left side of the equation. This value will not be modified by this method.</param>
            <param name="scalar">The scalar on the right side of the equation.</param>
            <param name="result">Will contain the result fo the operation.</param>
        </member>
        <member name="M:Atom.Math.Point4.Negate(Atom.Math.Point4)">
            <summary>
            Returns the result of negating the elements of the given <paramref name="point"/>.
            </summary>
            <param name="point">
            The point to negate.
            </param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Point4.Negate(Atom.Math.Point4@,Atom.Math.Point4@)">
            <summary>
            Stores the result of negating the elements of the given <paramref name="point"/> in the given Vector.
            </summary>
            <param name="point">
            The point to negate. This value will not be modified by this method.
            </param>
            <param name="result">Will contain the result of the operation.</param>
        </member>
        <member name="M:Atom.Math.Point4.Multiply(Atom.Math.Point4,System.Int32)">
            <summary>
            Returns the result of multiplying the given <paramref name="point"/> by the given <paramref name="scalar"/>.
            </summary>
            <param name="point">The point on the left side of the equation.</param>
            <param name="scalar">The scalar on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Point4.Multiply(Atom.Math.Point4@,System.Int32,Atom.Math.Point4@)">
            <summary>
            Stores the result of multiplying the given <paramref name="point"/> by the given <paramref name="scalar"/>.
            in the given Vector.
            </summary>
            <param name="point">The point on the left side of the equation. This value will not be modified by this method.</param>
            <param name="scalar">The scalar on the right side of the equation.</param>
            <param name="result">Will contain the result fo the operation.</param>
        </member>
        <member name="M:Atom.Math.Point4.Multiply(Atom.Math.Point4,Atom.Math.Point4)">
            <summary>
            Returns the result of multiplying the left Vector by the right Vector component-by-component.
            </summary>
            <param name="left">The point on the left side of the equation.</param>
            <param name="right">The point on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Point4.Multiply(Atom.Math.Point4@,Atom.Math.Point4@,Atom.Math.Point4@)">
            <summary>
            Stores the result of multiplying the left Vector by the right Vector component-by-component.
            in the given result Vector.
            </summary>
            <param name="left">The point on the left side of the equation. This value will not be modified by this method.</param>
            <param name="right">The point on the right side of the equation. This value will not be modified by this method.</param>
            <param name="result">Will contain the result of the operation.</param>
        </member>
        <member name="M:Atom.Math.Point4.Divide(Atom.Math.Point4,System.Int32)">
            <summary>
            Returns the result of dividing the given <paramref name="point"/> through the given <paramref name="scalar"/>.
            </summary>
            <param name="point">The point on the left side of the equation.</param>
            <param name="scalar">The scalar on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Point4.Divide(Atom.Math.Point4@,System.Int32,Atom.Math.Point4@)">
            <summary>
            Stores the result of dividing the given <paramref name="point"/> through the given <paramref name="scalar"/>
            in the given result Vector.
            </summary>
            <param name="point">The point on the left side of the equation. This value will not be modified by this method.</param>
            <param name="scalar">The scalar on the right side of the equation.</param>
            <param name="result">Will contain the result fo the operation.</param>
        </member>
        <member name="M:Atom.Math.Point4.Divide(Atom.Math.Point4,Atom.Math.Point4)">
            <summary>
            Returns the result of dividing the left Vector through the right Vector component-by-component.
            </summary>
            <param name="left">The point on the left side of the equation.</param>
            <param name="right">The point on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Point4.Divide(Atom.Math.Point4@,Atom.Math.Point4@,Atom.Math.Point4@)">
            <summary>
            Stores the result of dividing the left Vector through the right Vector component-by-component.
            in the given result Vector.
            </summary>
            <param name="left">The point on the left side of the equation. This value will not be modified by this method.</param>
            <param name="right">The point on the right side of the equation. This value will not be modified by this method.</param>
            <param name="result">Will store the result of the operation.</param>
        </member>
        <member name="M:Atom.Math.Point4.Equals(Atom.Math.Point4)">
            <summary>
            Returns whether the given <see cref="T:Atom.Math.Point4"/> has the
            same indices set as this Point4.
            </summary>
            <param name="other">The Point4 to test against.</param>
            <returns>true if the indices are equal; otherwise false.</returns>
        </member>
        <member name="M:Atom.Math.Point4.Equals(System.Object)">
            <summary>
            Returns whether the given <see cref="T:System.Object"/> is equal to this Point4.
            </summary>
            <param name="obj">The Object to test against.</param>
            <returns>true if they are equal; otherwise false.</returns>
        </member>
        <member name="M:Atom.Math.Point4.ToString">
            <summary>
            Overriden to return a human-readable text representation of the Point.
            </summary>
            <returns>A human-readable text representation of the Point.</returns>
        </member>
        <member name="M:Atom.Math.Point4.ToString(System.IFormatProvider)">
            <summary>
            Overriden to return a human-readable text representation of the Point
            using the given formatting information provider.
            </summary>
            <param name="formatProvider">Provides culture-sensitive formatting information.</param>
            <returns>A human-readable text representation of the Point.</returns>
        </member>
        <member name="M:Atom.Math.Point4.GetHashCode">
            <summary>
            Overriden to return the hashcode of the <see cref="T:Atom.Math.Point4"/>.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Atom.Math.Point4.op_Addition(Atom.Math.Point4,Atom.Math.Point4)">
            <summary>
            Returns the result of adding the <paramref name="right"/> Vector to the the <paramref name="left"/> Vector.
            </summary>
            <param name="left">The value on the left side of the equation.</param>
            <param name="right">The value on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Point4.op_Addition(Atom.Math.Point4,System.Int32)">
            <summary>
            Returns the result of adding the given <paramref name="scalar"/> to the thegiven <paramref name="point"/>.
            </summary>
            <param name="point">The point on the left side of the equation.</param>
            <param name="scalar">The scalar on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Point4.op_UnaryPlus(Atom.Math.Point4)">
            <summary>
            Returns the original specified point, doing nothing.
            </summary>
            <param name="point">The point.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Point4.op_Subtraction(Atom.Math.Point4,Atom.Math.Point4)">
            <summary>
            Returns the result of subtracting the <paramref name="right"/> Vector from the the <paramref name="left"/> Vector.
            </summary>
            <param name="left">The value on the left side of the equation.</param>
            <param name="right">The value on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Point4.op_Subtraction(Atom.Math.Point4,System.Int32)">
            <summary>
            Returns the result of subtracting the given <paramref name="scalar"/> from the given <paramref name="point"/>.
            </summary>
            <param name="point">The point on the left side of the equation.</param>
            <param name="scalar">The scalar on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Point4.op_UnaryNegation(Atom.Math.Point4)">
            <summary>
            Returns the result of negating the given <paramref name="point"/>.
            </summary>
            <param name="point">The point.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Point4.op_Multiply(Atom.Math.Point4,System.Int32)">
            <summary>
            Returns the result of multiplcing the given <paramref name="point"/> by the given <paramref name="scalar"/>.
            </summary>
            <param name="point">The point on the left side of the equation.</param>
            <param name="scalar">The scalar on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Point4.op_Multiply(Atom.Math.Point4,Atom.Math.Point4)">
            <summary>
            Returns the result of multiplying the left Vector by the right Vector component-by-component.
            </summary>
            <param name="left">The point on the left side of the equation.</param>
            <param name="right">The point on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Point4.op_Division(Atom.Math.Point4,System.Int32)">
            <summary>
            Returns the result of dividing the given <paramref name="point"/> by the given <paramref name="scalar"/>.
            </summary>
            <param name="point">The point on the left side of the equation.</param>
            <param name="scalar">The scalar on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Point4.op_Division(Atom.Math.Point4,Atom.Math.Point4)">
            <summary>
            Returns the result of dividing the left Vector through the right Vector element-by-element.
            </summary>
            <param name="left">The point on the left side of the equation.</param>
            <param name="right">The point on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Point4.op_Equality(Atom.Math.Point4,Atom.Math.Point4)">
            <summary>
            Returns whether the specified <see cref="T:Atom.Math.Point4"/> instances are (approximately) equal.
            </summary>
            <param name="left">The value on the left side of the equation.</param>
            <param name="right">The value on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Point4.op_Inequality(Atom.Math.Point4,Atom.Math.Point4)">
            <summary>
            Returns whether the specified <see cref="T:Atom.Math.Point4"/> instances are (approximately) inequal.
            </summary>
            <param name="left">The value on the left side of the equation.</param>
            <param name="right">The value on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Point4.op_Implicit(Atom.Math.Point4)~Atom.Math.Vector4">
            <summary>
            Implicit cast operator that implements conversion
            from a <see cref="T:Atom.Math.Vector4"/> to a <see cref="T:Atom.Math.Point4"/>.
            </summary>
            <param name="point">
            The input point.
            </param>
            <returns>
            The converted value.
            </returns>
        </member>
        <member name="T:Atom.Math.Box">
            <summary>
            Represents an axis-aligned box-shaped 3D volume.
            </summary>
        </member>
        <member name="F:Atom.Math.Box.CornerCount">
            <summary>
            Specifies the total number of corners (8) in the Box.
            </summary>
        </member>
        <member name="F:Atom.Math.Box.Minimum">
            <summary>
            Gets or sets the minimum point of this <see cref="T:Atom.Math.Box"/>.
            </summary>
        </member>
        <member name="F:Atom.Math.Box.Maximum">
            <summary>
            Gets or sets the maximum point of this <see cref="T:Atom.Math.Box"/>.
            </summary>
        </member>
        <member name="M:Atom.Math.Box.GetCorners">
            <summary>
            Gets an array of points that make up the corners of the Box.
            </summary>
            <returns>
            An array of Vector3 points that represent the corners of the Box.
            </returns>
        </member>
        <member name="M:Atom.Math.Box.GetCorners(Atom.Math.Vector3[])">
            <summary>
            Gets the array of points that make up the corners of the Box.
            </summary>
            <param name="corners">
            An existing array of at least 8 Vector3 points where the corners of the Box are written.
            </param>
        </member>
        <member name="M:Atom.Math.Box.#ctor(Atom.Math.Vector3,Atom.Math.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.Box"/> struct.
            </summary>
            <param name="minimum">The minimum point the Box includes.</param>
            <param name="maximum">The maximum point the Box includes.</param>
        </member>
        <member name="M:Atom.Math.Box.Merge(Atom.Math.Box,Atom.Math.Box)">
            <summary>
            Creates the smallest <see cref="T:Atom.Math.Box"/> that contains the two specified <see cref="T:Atom.Math.Box"/> instances.
            </summary>
            <param name="original">The original Box.</param>
            <param name="additional">The Box to merge with the <paramref name="original"/> Box.</param>
            <returns>The created Box.</returns>
        </member>
        <member name="M:Atom.Math.Box.Merge(Atom.Math.Box@,Atom.Math.Box@,Atom.Math.Box@)">
            <summary>
            Creates the smallest Box that contains the two specified Box instances.
            </summary>
            <param name="original">The original Box.</param>
            <param name="additional">The Box to merge with the <paramref name="original"/> Box.</param>
            <param name="result">
            Will contain the created Box.
            </param>
        </member>
        <member name="M:Atom.Math.Box.FromSphere(Atom.Math.Sphere)">
            <summary>
            Creates the smallest Box that will contain the specified <see cref="T:Atom.Math.Sphere"/>.
            </summary>
            <param name="sphere">The BoundingSphere to contain.</param>
            <returns>The created Box.</returns>
        </member>
        <member name="M:Atom.Math.Box.FromSphere(Atom.Math.Sphere@,Atom.Math.Box@)">
            <summary>
            Creates the smallest Box that will contain the specified BoundingSphere.
            </summary>
            <param name="sphere">The BoundingSphere to contain.</param>
            <param name="result">The created Box.</param>
        </member>
        <member name="M:Atom.Math.Box.FromPoints(System.Collections.Generic.IEnumerable{Atom.Math.Vector3})">
            <summary>Creates the smallest Box that will contain a group of points.</summary>
            <param name="points">A list of points the Box should contain.</param>
            <returns>The created Box.</returns>
        </member>
        <member name="M:Atom.Math.Box.Equals(System.Object)">
            <summary>
            Returns whether the specified <see cref="T:System.Object"/> is equal to this <see cref="T:Atom.Math.Box"/>.
            </summary>
            <param name="obj">The System.Object to compare with this Box.</param>
            <returns>
            Returns <see langword="true"/> if the specified System.Object is equal to this Box; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.Box.Equals(Atom.Math.Box)">
            <summary>
            Returns whether the specified <see cref="T:Atom.Math.Box"/> is equal to this <see cref="T:Atom.Math.Box"/>.
            </summary>
            <param name="other">The Box to compare with this Box.</param>
            <returns>
            Returns <see langword="true"/> if the specified Box is equal to this Box; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.Box.GetHashCode">
            <summary>
            Gets the hash code for this <see cref="T:Atom.Math.Box"/>.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Atom.Math.Box.ToString">
            <summary>
            Returns a human-readable text representation of the Box.
            </summary>
            <returns>A human-readable text representation of the Box.</returns>
        </member>
        <member name="M:Atom.Math.Box.ToString(System.IFormatProvider)">
            <summary>
            Returns a human-readable text representation of the Box.
            </summary>
            <param name="formatProvider">
            The <see cref="T:System.IFormatProvider"/> that supplies culture specific formatting information.
            </param>
            <returns>A human-readable text representation of the Box.</returns>
        </member>
        <member name="M:Atom.Math.Box.Intersects(Atom.Math.Box)">
            <summary>
            Checks whether this <see cref="T:Atom.Math.Box"/> intersects the specified <see cref="T:Atom.Math.Box"/>.
            </summary>
            <param name="box">The Box to check for intersection with.</param>
            <returns>
            Returns <see langword="true"/> if the Box instances intersect; 
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.Box.Intersects(Atom.Math.Box@,System.Boolean@)">
            <summary>
            Checks whether this <see cref="T:Atom.Math.Box"/> intersects the specified <see cref="T:Atom.Math.Box"/>.
            </summary>
            <param name="box">The Box to check for intersection with.</param>
            <param name="result">
            Will be <see langword="true"/> if the Box instances intersect; 
            otherwise <see langword="false"/>.
            </param>
        </member>
        <member name="M:Atom.Math.Box.Intersects(Atom.Math.Plane3)">
            <summary>
            Checks whether this <see cref="T:Atom.Math.Box"/> intersects with the specified <see cref="T:Atom.Math.Plane3"/>.
            </summary>
            <param name="plane">The Plane to check for intersection with.</param>
            <returns>An enumeration indicating whether the Box intersects the Plane.</returns>
        </member>
        <member name="M:Atom.Math.Box.Intersects(Atom.Math.Plane3@,Atom.Math.PlaneIntersectionType@)">
            <summary>
            Checks whether this <see cref="T:Atom.Math.Box"/> intersects with the specified <see cref="T:Atom.Math.Plane3"/>.
            </summary>
            <param name="plane">The Plane to check for intersection with.</param>
            <param name="result">An enumeration indicating whether the Box intersects the Plane.</param>
        </member>
        <member name="M:Atom.Math.Box.Intersects(Atom.Math.Ray3)">
            <summary>
            Checks whether the current Box intersects a Ray.
            </summary>
            <param name="ray">The Ray to check for intersection with.</param>
            <returns>
            The distance at which the ray intersects the Box, or null if there is no intersection.
            </returns>
        </member>
        <member name="M:Atom.Math.Box.Intersects(Atom.Math.Ray3@,System.Nullable{System.Single}@)">
            <summary>
            Checks whether the current Box intersects a Ray.
            </summary>
            <param name="ray">The Ray to check for intersection with.</param>
            <param name="result">Distance at which the ray intersects the Box, or null if there is no intersection.</param>
        </member>
        <member name="M:Atom.Math.Box.Intersects(Atom.Math.Sphere)">
            <summary>
            Checks whether this <see cref="T:Atom.Math.Box"/> intersects the specified <see cref="T:Atom.Math.Sphere"/>.
            </summary>
            <param name="sphere">The Sphere to check for intersection with.</param>
            <returns>
            Returns <see langword="true"/> if the Box and the Sphere intersect; 
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.Box.Intersects(Atom.Math.Sphere@,System.Boolean@)">
            <summary>
            Checks whether this <see cref="T:Atom.Math.Box"/> intersects the specified <see cref="T:Atom.Math.Sphere"/>.
            </summary>
            <param name="sphere">The Sphere to check for intersection with.</param>     
            <param name="result">
            Will contain <see langword="true"/> if the Box and the Sphere intersect; 
            otherwise <see langword="false"/>.
            </param>
        </member>
        <member name="M:Atom.Math.Box.Contains(Atom.Math.Box)">
            <summary>Tests whether the Box contains another Box.</summary>
            <param name="box">The Box to test for overlap.</param>
            <returns>Enumeration indicating the extent of overlap.</returns>
        </member>
        <member name="M:Atom.Math.Box.Contains(Atom.Math.Box@,Atom.Math.ContainmentType@)">
            <summary>
            Tests whether the Box contains a Box.
            </summary>
            <param name="box">The Box to test for overlap.</param>
            <param name="result">Enumeration indicating the extent of overlap.</param>
        </member>
        <member name="M:Atom.Math.Box.Contains(Atom.Math.Vector3)">
            <summary>Tests whether the Box contains a point.</summary>
            <param name="point">The point to test for overlap.</param>
            <returns>Enumeration indicating the extent of overlap.</returns>
        </member>
        <member name="M:Atom.Math.Box.Contains(Atom.Math.Vector3@,Atom.Math.ContainmentType@)">
            <summary>
            Tests whether the Box contains a point.
            </summary>
            <param name="point">The point to test for overlap.</param>
            <param name="result">Enumeration indicating the extent of overlap.</param>
        </member>
        <member name="M:Atom.Math.Box.Contains(Atom.Math.Sphere)">
            <summary>
            Returns whether this <see cref="T:Atom.Math.Box"/> contains the specified <see cref="T:Atom.Math.Sphere"/>.
            </summary>
            <param name="sphere">The Sphere to test for overlap.</param>
            <returns>Enumeration indicating the extent of overlap.</returns>
        </member>
        <member name="M:Atom.Math.Box.Contains(Atom.Math.Sphere@,Atom.Math.ContainmentType@)">
            <summary>
            Returns whether this <see cref="T:Atom.Math.Box"/> contains the specified <see cref="T:Atom.Math.Sphere"/>.
            </summary>
            <param name="sphere">The Sphere to test for overlap.</param>
            <param name="result">Enumeration indicating the extent of overlap.</param>
        </member>
        <member name="M:Atom.Math.Box.op_Equality(Atom.Math.Box,Atom.Math.Box)">
            <summary>
            Returns whether the specified <see cref="T:Atom.Math.Box"/> instances are equal.
            </summary>
            <param name="left">The <see cref="T:Atom.Math.Box"/> instance on the left side of the equation.</param>
            <param name="right">The <see cref="T:Atom.Math.Box"/> instance on the right side of the equation.</param>
            <returns>true if the two Boxes are equal; false otherwise.</returns>
        </member>
        <member name="M:Atom.Math.Box.op_Inequality(Atom.Math.Box,Atom.Math.Box)">
            <summary>
            Returns whether the specified <see cref="T:Atom.Math.Box"/> instances are not equal.
            </summary>
            <param name="left">The <see cref="T:Atom.Math.Box"/> instance on the left side of the equation.</param>
            <param name="right">The <see cref="T:Atom.Math.Box"/> instance on the right side of the equation.</param>
            <returns>true if the two Boxes are not equal; false otherwise.</returns>
        </member>
        <member name="T:Atom.Math.Circle">
            <summary>
            Represents a Circle that is defined by a center point and a radius value.
            </summary>
        </member>
        <member name="F:Atom.Math.Circle.Center">
            <summary>
            The position of the center of the Circle.
            </summary>
        </member>
        <member name="F:Atom.Math.Circle.Radius">
            <summary>
            The radius of the Circle.
            </summary>
        </member>
        <member name="M:Atom.Math.Circle.#ctor(Atom.Math.Vector2,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.Circle"/> structure.
            </summary>
            <param name="center">
            The position of the center of the Circle.
            </param>
            <param name="radius">
            The radius of the Circle.
            </param>
        </member>
        <member name="M:Atom.Math.Circle.#ctor(Atom.Math.Point2,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.Circle"/> structure.
            </summary>
            <param name="center">
            The position of the center of the Circle.
            </param>
            <param name="radius">
            The radius of the Circle.
            </param>
        </member>
        <member name="M:Atom.Math.Circle.Contains(Atom.Math.Vector2)">
            <summary>
            Returns whether the given <paramref name="point"/>
            is contained by the <see cref="T:Atom.Math.Circle"/>.
            </summary>
            <param name="point">The point to test.</param>
            <returns>true if the Circle contains the given point; otherwise false.</returns>
        </member>
        <member name="M:Atom.Math.Circle.Contains(Atom.Math.Point2)">
            <summary>
            Returns whether the given <paramref name="point"/>
            is contained by the <see cref="T:Atom.Math.Circle"/>.
            </summary>
            <param name="point">The point to test.</param>
            <returns>true if the Circle contains the given point; otherwise false.</returns>
        </member>
        <member name="M:Atom.Math.Circle.IsInside(Atom.Math.Vector2,Atom.Math.Vector2,Atom.Math.Vector2,Atom.Math.Vector2)">
            <summary>
            Returns whether the given <paramref name="point"/> lies inside the circumcircle made up by points (A,B,C).
            </summary>
            <remarks>
            NOTE: A point on the edge is inside the circumcircle.
            </remarks>
            <param name="point">The point to check.</param>
            <param name="circlePointA">First point on the circle.</param>
            <param name="circlePointB">Second point on the circle.</param>
            <param name="circlePointC">Third point on the circle.</param>
            <returns>
            Returns <see langword="true"/> if the <paramref name="point"/> is inside circle;
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.Circle.GetHashCode">
            <summary>
            Gets the hash code of the Circle object.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Atom.Math.Circle.Equals(System.Object)">
            <summary>
            Returns whether the given Object is equal to the Circle.
            </summary>
            <param name="obj">The object to test against.</param>
            <returns>true if they are equal, otherwise false.</returns>
        </member>
        <member name="M:Atom.Math.Circle.Equals(Atom.Math.Circle)">
            <summary>
            Returns whether the given Circle is equal to the Circle.
            </summary>
            <param name="other">The Circle to test against.</param>
            <returns>true if they are equal, otherwise false.</returns>
        </member>
        <member name="M:Atom.Math.Circle.ToString">
            <summary>
            Overriden to return a human-readable string that descripes the Circle.
            </summary>
            <returns>A string that descripes the Circle.</returns>
        </member>
        <member name="M:Atom.Math.Circle.ToString(System.IFormatProvider)">
            <summary>
            Returns a human-readable text representation of the Circle.
            </summary>
            <param name="formatProvider">
            The <see cref="T:System.IFormatProvider"/> that supplies culture specific formatting information.
            </param>
            <returns>A human-readable text representation of the Circle.</returns>
        </member>
        <member name="M:Atom.Math.Circle.FromRectangle(Atom.Math.Rectangle)">
            <summary>
            Creates a <see cref="T:Atom.Math.Circle"/> given an axis aligned <see cref="T:Atom.Math.Rectangle"/>.
            </summary>
            <param name="rectangle">
            The input rectangle.
            </param>
            <returns>
            The converted circle.
            </returns>
        </member>
        <member name="M:Atom.Math.Circle.FromRectangle(Atom.Math.RectangleF)">
            <summary>
            Creates a <see cref="T:Atom.Math.Circle"/> given an axis aligned <see cref="T:Atom.Math.RectangleF"/>.
            </summary>
            <param name="rectangle">
            The input rectangle.
            </param>
            <returns>
            The converted circle.
            </returns>
        </member>
        <member name="M:Atom.Math.Circle.op_Equality(Atom.Math.Circle,Atom.Math.Circle)">
            <summary>
            Returns whether the given Circles are equal in position and radius.
            </summary>
            <param name="left">The Circle on the left side of the equation.</param>
            <param name="right">The Circle on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Circle.op_Inequality(Atom.Math.Circle,Atom.Math.Circle)">
            <summary>
            Returns whether the given Circles are inequal in position or radius.
            </summary>
            <param name="left">The Circle on the left side of the equation.</param>
            <param name="right">The Circle on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="T:Atom.Math.FastLineSegment2">
            <summary>
            Represents an inmutable representation of a line segment in 2D space.
            </summary>
            <remarks>
            The speed and perfomance characteristics are, 
            in return of greatly reduces feature richness, 
            much better than of the <see cref="T:Atom.Math.LineSegment2"/> class.
            </remarks>
            <seealso cref="T:Atom.Math.LineSegment2"/>
        </member>
        <member name="F:Atom.Math.FastLineSegment2.Start">
            <summary>
            The starting point of the line segment.
            </summary>
        </member>
        <member name="F:Atom.Math.FastLineSegment2.End">
            <summary>
            The ending point of the line segment.
            </summary>
        </member>
        <member name="M:Atom.Math.FastLineSegment2.#ctor(Atom.Math.Vector2,Atom.Math.Vector2)">
            <summary>
            Initializes a new instance of the FastLineSegment2 structure.
            </summary>
            <param name="start">
            The starting point of the new line segment.
            </param>
            <param name="end">
            The ending point of the new line segment.
            </param>
        </member>
        <member name="M:Atom.Math.FastLineSegment2.Intersects(Atom.Math.Rectangle)">
            <summary>
            Determines whether a specified Rectanglet intersects with this FastLineSegment2.
            </summary>
            <param name="rectangle">
            The Rectangle to test for intersection with.
            </param>
            <returns>
            true if they intersect; -or-
            otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Math.FastLineSegment2.op_Explicit(Atom.Math.FastLineSegment2)~Atom.Math.LineSegment2">
            <summary>
            Explicit cast operator that implements conversion
            from a FastLineSegment2 to a <see cref="T:Atom.Math.LineSegment2"/>.
            </summary>
            <remarks>
            This operation is explicit because the creationg of a LineSegment2 instance
            is rather expensive.
            </remarks>
            <param name="segment">
            The input segment.
            </param>
            <returns>
            The converted value.
            </returns>
        </member>
        <member name="T:Atom.Math.IndexedEdge">
            <summary>
            Defines an Edge structure that stores the indices (that point into the Vertex Data)
            of the points that make up the Edge.
            This is a sealed class.
            </summary>
        </member>
        <member name="P:Atom.Math.IndexedEdge.IndexA">
            <summary>
            Gets or sets the first index of the Edge, which is usually the starting point.
            </summary>
        </member>
        <member name="P:Atom.Math.IndexedEdge.IndexB">
            <summary>
            Gets or sets the second index of the Edge, which is usually the ending point.
            </summary>
        </member>
        <member name="M:Atom.Math.IndexedEdge.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.IndexedEdge"/> class.
            </summary>
            <param name="indexA">The first index of the new Edge. Usually the starting point.</param>
            <param name="indexB">The second index of the new Edge. Usually the ending point.</param>
        </member>
        <member name="M:Atom.Math.IndexedEdge.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.IndexedEdge"/> class
            whos indices are set to 0.
            </summary>
        </member>
        <member name="M:Atom.Math.IndexedEdge.Equals(Atom.Math.IndexedEdge)">
            <summary>
            Returns whether the given <see cref="T:Atom.Math.IndexedEdge"/> has the same indices as this <see cref="T:Atom.Math.IndexedEdge"/>.
            </summary>
            <param name="other">The <see cref="T:Atom.Math.IndexedEdge"/> to test with. </param>
            <returns>
            Returns <see langword="true"/> if the indices are equal; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.IndexedEdge.Equals(System.Object)">
            <summary>
            Returns whether the given <see cref="T:System.Object"/> is equal to this IndexedEdge.
            </summary>
            <param name="obj">The Object to test against.</param>
            <returns>
            Returns <see langword="true"/> if they are equal; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.IndexedEdge.ToString">
            <summary>
            Overriden to return a human-readable text representation of the IndexedEdge.
            </summary>
            <returns>A human-readable text representation of the IndexedEdge.</returns>
        </member>
        <member name="M:Atom.Math.IndexedEdge.ToString(System.IFormatProvider)">
            <summary>
            Overriden to return a human-readable text representation of the IndexedEdge.
            </summary>
            <param name="formatProvider">
            The <see cref="T:System.IFormatProvider"/> that supplies culture specific formatting information.
            </param>
            <returns>A human-readable text representation of the IndexedEdge.</returns>
        </member>
        <member name="M:Atom.Math.IndexedEdge.GetHashCode">
            <summary>
            Overriden to return the hashcode of the <see cref="T:Atom.Math.IndexedEdge"/>.
            </summary>
            <returns>The hashcode.</returns>
        </member>
        <member name="T:Atom.Math.IndexedTriangle">
            <summary>
            Defines a Triangle structure that stores the indices (that point into the Vertex Data)
            of the points that make up the Triangle.
            </summary>
        </member>
        <member name="F:Atom.Math.IndexedTriangle.IndexA">
            <summary>
            First vertex index in triangle.
            </summary>
        </member>
        <member name="F:Atom.Math.IndexedTriangle.IndexB">
            <summary>
            Second vertex index in triangle.
            </summary>
        </member>
        <member name="F:Atom.Math.IndexedTriangle.IndexC">
            <summary>
            Third vertex index in triangle.
            </summary>
        </member>
        <member name="M:Atom.Math.IndexedTriangle.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.IndexedTriangle"/> structure.
            </summary>
            <param name="indexA">The index of the the first point of the triangle.</param>
            <param name="indexB">The index of the the second point of the triangle.</param>
            <param name="indexC">The index of the the third point of the triangle.</param>
        </member>
        <member name="M:Atom.Math.IndexedTriangle.Equals(Atom.Math.IndexedTriangle)">
            <summary>
            Returns whether the given <see cref="T:Atom.Math.IndexedTriangle"/> has the
            same indices set as this IndexedTriangle.
            </summary>
            <param name="other">The IndexedTriangle to test against.</param>
            <returns>
            Returns <see langword="true"/> if the indices are equal; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.IndexedTriangle.Equals(System.Object)">
            <summary>
            Returns whether the given <see cref="T:System.Object"/> is equal to this IndexedTriangle.
            </summary>
            <param name="obj">The Object to test against.</param>
            <returns>
            Returns <see langword="true"/> if they are equal; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.IndexedTriangle.ToString">
            <summary>
            Overriden to return a human-readable text representation of the IndexedTriangle.
            </summary>
            <returns>A human-readable text representation of the IndexedTriangle.</returns>
        </member>
        <member name="M:Atom.Math.IndexedTriangle.ToString(System.IFormatProvider)">
            <summary>
            Overriden to return a human-readable text representation of the IndexedTriangle.
            </summary>
            <param name="formatProvider">
            The <see cref="T:System.IFormatProvider"/> that supplies culture specific formatting information.
            </param>
            <returns>A human-readable text representation of the IndexedTriangle.</returns>
        </member>
        <member name="M:Atom.Math.IndexedTriangle.GetHashCode">
            <summary>
            Overriden to return the hash code of the <see cref="T:Atom.Math.IndexedTriangle"/>.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Atom.Math.IndexedTriangle.op_Equality(Atom.Math.IndexedTriangle,Atom.Math.IndexedTriangle)">
            <summary>
            Returns whether the given <see cref="T:Atom.Math.IndexedTriangle"/>s have the
            same indices.
            </summary>
            <param name="left">The IndexedTriangle on the left side of the equation.</param>
            <param name="right">The IndexedTriangle on the right side of the equation.</param>
            <returns>true if the indices are equal; otherwise false.</returns>
        </member>
        <member name="M:Atom.Math.IndexedTriangle.op_Inequality(Atom.Math.IndexedTriangle,Atom.Math.IndexedTriangle)">
            <summary>
            Returns whether the given <see cref="T:Atom.Math.IndexedTriangle"/>s don't have the
            same indices.
            </summary>
            <param name="left">The IndexedTriangle on the left side of the equation.</param>
            <param name="right">The IndexedTriangle on the right side of the equation.</param>
            <returns>true if the indices are not equal; otherwise false.</returns>
        </member>
        <member name="T:Atom.Math.IReadOnlyLine2">
            <summary> 
            Provides read-only access to line object in 2D space, descriped using the general line equation: Ax + By - c = 0.
            </summary>
        </member>
        <member name="P:Atom.Math.IReadOnlyLine2.A">
            <summary> 
            Gets the A parameter of the line.
            </summary>
            <value>The A parameter as used in the 'Ax + By - c = 0' equation.</value>
        </member>
        <member name="P:Atom.Math.IReadOnlyLine2.B">
            <summary> 
            Gets the B parameter of the line.
            </summary>
            <value>The B parameter as used in the 'Ax + By - c = 0' equation.</value>
        </member>
        <member name="P:Atom.Math.IReadOnlyLine2.C">
            <summary> 
            Gets the C parameter of the line.
            </summary>
            <value>The C parameter as used in the 'Ax + By - c = 0' equation.</value>
        </member>
        <member name="P:Atom.Math.IReadOnlyLine2.Angle">
            <summary> 
            Gets the angle of the line in radians.
            </summary>
            <value>
            The angle in radians.
            </value>
        </member>
        <member name="P:Atom.Math.IReadOnlyLine2.IsVertical">
            <summary> 
            Gets a value indicating whether the line is a vertical line.
            </summary>
            <value> 
            Is <see langword="true"/> if the line is vertical; otherwise <see langword="false"/>. 
            </value>
        </member>
        <member name="P:Atom.Math.IReadOnlyLine2.IsHorizontal">
            <summary> 
            Gets a value indicating whether the line is a horizontal line. 
            </summary>
            <value> 
            Is <see langword="true"/> if the line is horizontal; otherwise <see langword="false"/>. 
            </value>
        </member>
        <member name="M:Atom.Math.IReadOnlyLine2.Distance(Atom.Math.Vector2)">
            <summary> 
            Returns the distance from a given point to the line. 
            </summary>
            <param name="point">
            The point to get the distance to.
            </param>
            <returns>
            The distance.
            </returns>
        </member>
        <member name="M:Atom.Math.IReadOnlyLine2.GetX(System.Single)">
            <summary>
            Calculates X given <paramref name="y"/>.
            </summary>
            <exception cref="T:System.DivideByZeroException">
            Thrown if <see cref="P:Atom.Math.IReadOnlyLine2.A"/> is 0.
            </exception>
            <param name="y">
            The y coordinate.
            </param>
            <returns>
            The x coordinate.
            </returns>
        </member>
        <member name="M:Atom.Math.IReadOnlyLine2.GetY(System.Single)">
            <summary>
            Calculates Y given <paramref name="x"/>.
            </summary>
            <exception cref="T:System.DivideByZeroException">
            Thrown if <see cref="P:Atom.Math.IReadOnlyLine2.B"/> is 0.
            </exception>
            <param name="x">
            The x coordinate.
            </param>
            <returns>
            The y coordinate.
            </returns>
        </member>
        <member name="T:Atom.Math.IReadOnlyLineSegment2">
            <summary>
            Provides read-only access to line ( ax + by + c = 0 ) object that has a start point and an end point.
            </summary>
        </member>
        <member name="M:Atom.Math.IReadOnlyLineSegment2.DistanceTo(Atom.Math.Vector2)">
            <summary>
            Returns the distance between this IReadOnlyLineSegment2 and the specfied Point.
            </summary>
            <param name="point">
            The point to get the distance to.
            </param>
            <returns>
            The distance to the point.
            </returns>
        </member>
        <member name="M:Atom.Math.IReadOnlyLineSegment2.GetPointLocation(Atom.Math.Vector2)">
            <summary>
            Gets the location of the given point (Is it left or right?).
            </summary>
            <param name="point">
            The point to test.
            </param>
            <returns>
            Returns:
            <para>
            -1: point at the left of the line (or above the line if the line is horizontal).
            </para>
            <para>
            0: point in the line segment or in the line segment's extension.
            </para>
            <para>
            1: point at right of the line (or below the line if the line is horizontal).
            </para>
            </returns>
        </member>
        <member name="M:Atom.Math.IReadOnlyLineSegment2.GetPointOnSegment(System.Single)">
            <summary> 
            Gets a point on this <see cref="T:Atom.Math.LineSegment2"/>. 
            </summary>
            <param name="time">
            The amount to travel on the segment.
            </param>
            <returns>
            A point along this LineSegment2.
            </returns>
        </member>
        <member name="P:Atom.Math.IReadOnlyLineSegment2.Start">
            <summary> 
            Gets the start point of this IReadOnlyLineSegment2.
            </summary>
            <value>The start point of this IReadOnlyLineSegment2.</value>
        </member>
        <member name="P:Atom.Math.IReadOnlyLineSegment2.End">
            <summary> 
            Gets the end point of this IReadOnlyLineSegment2.
            </summary>
            <value>The end point of this IReadOnlyLineSegment2.</value>
        </member>
        <member name="P:Atom.Math.IReadOnlyLineSegment2.Length">
            <summary> 
            Gets the length of this IReadOnlyLineSegment2.
            </summary>
            <value>The length (also called magnitude) from the StartPoint to the EndPoint.</value>
        </member>
        <member name="P:Atom.Math.IReadOnlyLineSegment2.LengthSquared">
            <summary> 
            Gets the squared length of the IReadOnlyLineSegment2.
            </summary>
            <value>The squared length (also called magnitude) from the StartPoint to the EndPoint.</value>
        </member>
        <member name="P:Atom.Math.IReadOnlyLineSegment2.Maximum">
            <summary>
            Gets the maximum value of the points in the IReadOnlyLineSegment2.
            </summary>
            <value>The maximum value of the points in the IReadOnlyLineSegment2.</value>
        </member>
        <member name="P:Atom.Math.IReadOnlyLineSegment2.Minimum">
            <summary>
            Gets the minumum value of the points in the IReadOnlyLineSegment2.
            </summary>
            <value>The minumum value of the points in the IReadOnlyLineSegment2.</value>
        </member>
        <member name="T:Atom.Math.Line2">
            <summary> 
            Represents a line in 2D space, descriped using the general line equation: Ax + By - c = 0.
            </summary>
        </member>
        <member name="P:Atom.Math.Line2.A">
            <summary> 
            Gets or sets the A parameter.
            </summary>
            <value>The A parameter as used in the 'Ax + By - c = 0' equation.</value>
        </member>
        <member name="P:Atom.Math.Line2.B">
            <summary> 
            Gets or sets the B parameter.
            </summary>
            <value>The B parameter as used in the 'Ax + By - c = 0' equation.</value>
        </member>
        <member name="P:Atom.Math.Line2.C">
            <summary> 
            Gets or sets the C constant.
            </summary>
            <value>The c constant as used in the 'Ax + By - c = 0' equation.</value>
        </member>
        <member name="P:Atom.Math.Line2.Angle">
            <summary> 
            Gets the angle of the line in radians.
            </summary>
            <value>
            The angle in radians.
            </value>
        </member>
        <member name="P:Atom.Math.Line2.Direction">
            <summary>
            Gets the direction this Line2 points.
            </summary>
        </member>
        <member name="P:Atom.Math.Line2.IsVertical">
            <summary> 
            Gets a value indicating whether this <see cref="T:Atom.Math.Line2"/> is a vertical line.
            </summary>
            <value> 
            Is <see langword="true"/> if the line is vertical; otherwise <see langword="false"/>. 
            </value>
        </member>
        <member name="P:Atom.Math.Line2.IsHorizontal">
            <summary> 
            Gets a value indicating whether this <see cref="T:Atom.Math.Line2"/> is a horizontal line. 
            </summary>
            <value> 
            Is <see langword="true"/> if the line is horizontal; otherwise <see langword="false"/>. 
            </value>
        </member>
        <member name="M:Atom.Math.Line2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.Line2"/> class.
            </summary>
        </member>
        <member name="M:Atom.Math.Line2.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.Line2"/> class.
            </summary>
            <param name="a">The parameter a.</param> 
            <param name="b">The parameter b.</param>
            <param name="c">The constant c.</param>
        </member>
        <member name="M:Atom.Math.Line2.#ctor(System.Single,Atom.Math.Vector2)">
            <summary> 
            Initializes a new instance of the <see cref="T:Atom.Math.Line2"/> class.
            </summary>
            <exception cref="T:System.ArgumentException"> If the angle is invalid. </exception>
            <param name="angle"> The angle in radiants. Must be less than two Pi. </param>
            <param name="point"> The start point. </param>
        </member>
        <member name="M:Atom.Math.Line2.#ctor(Atom.Math.Vector2,Atom.Math.Vector2)">
            <summary> 
            Initializes a new instance of the <see cref="T:Atom.Math.Line2"/> class.
            It creates a line between the two specified points.
            </summary>
            <exception cref="T:System.ArgumentException">If the given points are equal. </exception>
            <param name="start"> The start point. </param>
            <param name="end"> The end point.  </param>
        </member>
        <member name="M:Atom.Math.Line2.#ctor(Atom.Math.Line2)">
            <summary> Initializes a new instance of the <see cref="T:Atom.Math.Line2"/> class. </summary>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="line"/> is null.
            </exception>
            <param name="line"> The line to copy. </param>
        </member>
        <member name="M:Atom.Math.Line2.Initialize(System.Single,Atom.Math.Vector2)">
            <summary> 
            Initializes this <see cref="T:Atom.Math.Line2"/>.
            </summary>
            <exception cref="T:System.ArgumentException"> 
            If the specified <paramref name="angle"/> is greater than two Pi.
            </exception>
            <param name="angle"> The angle of the line in radiants. Must be less than two Pi. </param>
            <param name="point"> The start point. </param>
        </member>
        <member name="M:Atom.Math.Line2.Initialize(Atom.Math.Vector2,Atom.Math.Vector2)">
            <summary> 
            Initializes the <see cref="T:Atom.Math.Line2"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If the given points are equal. </exception>
            <param name="start"> The start point. </param>
            <param name="end"> The end point.  </param>
        </member>
        <member name="M:Atom.Math.Line2.IsParallelTo(Atom.Math.Line2)">
            <summary>
            Determines whether the specified <see cref="T:Atom.Math.Line2"/> is parallel to this <see cref="T:Atom.Math.Line2"/>.
            </summary>
            <param name="line"> 
            The line to test against.
            </param>
            <returns> 
            Returns <see langword="true"/> if they are parallel; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.Line2.Intersects(Atom.Math.Line2,Atom.Math.Vector2@)">
            <summary> 
            Calculates the intersection point of two lines. 
            </summary>
            <param name="line"> 
            The line to test against.
            </param>
            <param name="point"> 
            Will contain the intersection point if the function returns true.
            </param>
            <returns> 
            Returns <see langword="true"/> if the lines intersect; 
            or otherwise <see langword="false"/> if the lines are parallel (=> don't intersect ever).
            </returns>
        </member>
        <member name="M:Atom.Math.Line2.Distance(Atom.Math.Vector2)">
            <summary> 
            Returns the distance from a given point to the line. 
            </summary>
            <param name="point">
            The point to get the distance to.
            </param>
            <returns>
            The distance.
            </returns>
        </member>
        <member name="M:Atom.Math.Line2.GetX(System.Single)">
            <summary>
            Calculates X given <paramref name="y"/>.
            </summary>
            <exception cref="T:System.DivideByZeroException">
            Thrown if <see cref="P:Atom.Math.Line2.A"/> is 0.
            </exception>
            <param name="y">
            The y coordinate.
            </param>
            <returns>
            The x coordinate.
            </returns>
        </member>
        <member name="M:Atom.Math.Line2.GetY(System.Single)">
            <summary>
            Calculates Y given <paramref name="x"/>.
            </summary>
            <exception cref="T:System.DivideByZeroException">
            Thrown if <see cref="P:Atom.Math.Line2.B"/> is 0.
            </exception>
            <param name="x">
            The x coordinate.
            </param>
            <returns>
            The y coordinate.
            </returns>
        </member>
        <member name="M:Atom.Math.Line2.GetHashCode">
            <summary> 
            Returns the hash code for this Line2 instance.
            </summary>
            <returns>
            The hash code.
            </returns>
        </member>
        <member name="M:Atom.Math.Line2.ToString">
            <summary> Returns a string representation of this <see cref="T:Atom.Math.Line2"/> object. </summary>
            <returns> A string representation. </returns>
        </member>
        <member name="M:Atom.Math.Line2.ToString(System.IFormatProvider)">
            <summary>
            Returns a string representation of this <see cref="T:Atom.Math.Line2"/> object.
            </summary>
            <param name="formatProvider">
            The formating information provider to use.
            </param>
            <returns> A string representation. </returns>
        </member>
        <member name="M:Atom.Math.Line2.Equals(System.Object)">
            <summary>
            Gets whether the given Object is equal to the <see cref="T:Atom.Math.Line2"/>.
            </summary>
            <param name="obj">The object to test against.</param>
            <returns>true if they are equal; otherwise false.</returns>
        </member>
        <member name="M:Atom.Math.Line2.Equals(Atom.Math.Line2)">
            <summary>
            Gets whether the given <see cref="T:Atom.Math.Line2"/> is equal to the <see cref="T:Atom.Math.Line2"/>.
            </summary>
            <param name="other">The Line2 to test against.</param>
            <returns>true if they are equal; otherwise false.</returns>
        </member>
        <member name="M:Atom.Math.Line2.Clone">
            <summary>
            Returns a clone of the <see cref="T:Atom.Math.Line2"/>.
            </summary>
            <returns>A new Line2 instance.</returns>
        </member>
        <member name="M:Atom.Math.Line2.System#ICloneable#Clone">
            <summary>
            Returns a clone of the <see cref="T:Atom.Math.Line2"/>.
            </summary>
            <returns>A new Line2 instance.</returns>
        </member>
        <member name="T:Atom.Math.LineSegment2">
            <summary> 
            Represents a line( ax + by + c = 0 ) with a start point and an end point.
            </summary>
        </member>
        <member name="P:Atom.Math.LineSegment2.Start">
            <summary> 
            Gets or sets the start point of this LineSegment2.
            </summary>
            <value>The start point of this LineSegment2.</value>
        </member>
        <member name="P:Atom.Math.LineSegment2.End">
            <summary> 
            Gets or sets the end point of this LineSegment2.
            </summary>
            <value>The end point of this LineSegment2.</value>
        </member>
        <member name="P:Atom.Math.LineSegment2.Length">
            <summary> 
            Gets the length of this LineSegment2.
            </summary>
            <value>The length (also called magnitude) from the StartPoint to the EndPoint.</value>
        </member>
        <member name="P:Atom.Math.LineSegment2.LengthSquared">
            <summary> 
            Gets the squared length of the LineSegment2.
            </summary>
            <value>The squared length (also called magnitude) from the StartPoint to the EndPoint.</value>
        </member>
        <member name="P:Atom.Math.LineSegment2.Maximum">
            <summary>
            Gets the maximum value of the points in the LineSegment2.
            </summary>
            <value>The maximum value of the points in the LineSegment2.</value>
        </member>
        <member name="P:Atom.Math.LineSegment2.Minimum">
            <summary>
            Gets the minumum value of the points in the LineSegment2.
            </summary>
            <value>The minumum value of the points in the LineSegment2.</value>
        </member>
        <member name="M:Atom.Math.LineSegment2.#ctor">
            <summary> 
            Initializes a new instance of the <see cref="T:Atom.Math.LineSegment2"/> class.
            </summary>
        </member>
        <member name="M:Atom.Math.LineSegment2.#ctor(Atom.Math.Vector2,Atom.Math.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.LineSegment2"/> class.
            </summary>
            <param name="startPoint">
            The start-point of the <see cref="T:Atom.Math.LineSegment2"/>.
            </param>
            <param name="endPoint">
            The end-point of the <see cref="T:Atom.Math.LineSegment2"/>.
            </param>
        </member>
        <member name="M:Atom.Math.LineSegment2.Set(Atom.Math.Vector2,Atom.Math.Vector2)">
            <summary>
            Sets both the start and end point of this LineSegment2 at the same time.
            </summary>
            <param name="startPoint">
            The new start point of this LineSegment2.
            </param>
            <param name="endPoint">
            The new end point of this LineSegment2.
            </param>
        </member>
        <member name="M:Atom.Math.LineSegment2.GetPointOnSegment(System.Single)">
            <summary> 
            Gets a point on this <see cref="T:Atom.Math.LineSegment2"/>. 
            </summary>
            <param name="time">
            The amount to travel on the segment.
            </param>
            <returns>
            A point along this LineSegment2.
            </returns>
        </member>
        <member name="M:Atom.Math.LineSegment2.op_Implicit(Atom.Math.LineSegment2)~Atom.Math.FastLineSegment2">
            <summary>
            Implicit cast operator that implements conversion
            from a LineSegment2 to a <see cref="T:Atom.Math.FastLineSegment2"/>.
            </summary>
            <param name="segment">
            The input segment.
            </param>
            <returns>
            The converted value.
            </returns>
        </member>
        <member name="M:Atom.Math.LineSegment2.GetPointLocation(Atom.Math.Vector2)">
            <summary>
            Gets the location of the given point (Is it left or right?).
            </summary>
            <param name="point">
            The point to test.
            </param>
            <returns>
            Returns:
            <para>
            -1: point at the left of the line (or above the line if the line is horizontal).
            </para>
            <para>
            0: point in the line segment or in the line segment's extension.
            </para>
            <para>
            1: point at right of the line (or below the line if the line is horizontal).
            </para>
            </returns>
        </member>
        <member name="M:Atom.Math.LineSegment2.DistanceTo(Atom.Math.Vector2)">
            <summary>
            Returns the distance between the LineSegment and the specfied Point.
            </summary>
            <param name="point">
            The point to get the distance to.
            </param>
            <returns>
            The distance to the point.
            </returns>
        </member>
        <member name="M:Atom.Math.LineSegment2.DistanceTo(Atom.Math.Vector2,Atom.Math.Vector2,Atom.Math.Vector2,Atom.Math.Vector2@)">
            <summary>
            Returns the distance between the LineSegment and the specified Point.
            </summary>
            <param name="point">
            The point to get the distance to.
            </param>
            <param name="pointOnLine">
            The projected point on the line.
            </param>
            <param name="start">
            The start point of the line segement.
            </param>
            <param name="end">
            The end point of the line segement.
            </param>
            <returns>
            The distance to the point.
            </returns>
        </member>
        <member name="M:Atom.Math.LineSegment2.ChangeDirection">
            <summary> 
            Changes the direction of the line,
            so that the startpoint becomes the endpoint and visaversa.
            </summary>
        </member>
        <member name="M:Atom.Math.LineSegment2.OffsetLine(System.Single,System.Boolean)">
            <summary>
            Creates a line that is similiar to this line but has an offset (distance).</summary>
            <param name="distance">
            The distance to move.
            </param>
            <param name="rightOrDown">
            States whether this line goes right/down or left/up.
            </param>
            <returns>
            The newly created LineSegment2.
            </returns>
        </member>
        <member name="M:Atom.Math.LineSegment2.Intersects(Atom.Math.Rectangle)">
            <summary>
            Determines whether a specified Rectangle intersects with this FastLineSegment2.
            </summary>
            <param name="rectangle">
            The Rectangle to test for intersection with.
            </param>
            <returns>
            true if they intersect; -or-
            otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Math.LineSegment2.Equals(System.Object)">
            <summary>
            Returns whether the given other <see cref="T:System.Object"/> 
            is equal to the <see cref="T:Atom.Math.LineSegment2"/>.
            </summary>
            <param name="obj">The Object to test against.</param>
            <returns>
            True if they are equal; otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Math.LineSegment2.Equals(Atom.Math.LineSegment2)">
            <summary>
            Returns whether the given other <see cref="T:Atom.Math.LineSegment2"/> 
            is equal to the <see cref="T:Atom.Math.LineSegment2"/>.
            </summary>
            <param name="other">The LineSegment2 to test against.</param>
            <returns>
            Whether the segments are equal.
            </returns>
        </member>
        <member name="M:Atom.Math.LineSegment2.Equals(Atom.Math.IReadOnlyLineSegment2)">
            <summary>
            Returns whether the given <see cref="T:Atom.Math.IReadOnlyLineSegment2"/> 
            is equal to the <see cref="T:Atom.Math.LineSegment2"/>.
            </summary>
            <param name="other">
            The IReadOnlyLineSegment2 to test against.
            </param>
            <returns>
            Whether the segments are equal.
            </returns>
        </member>
        <member name="M:Atom.Math.LineSegment2.ToString">
            <summary>
            Returns a string representation of this <see cref="T:Atom.Math.LineSegment2"/> object.
             </summary>
            <returns> A string representation. </returns>
        </member>
        <member name="M:Atom.Math.LineSegment2.ToString(System.IFormatProvider)">
            <summary>
            Returns a string representation of this <see cref="T:Atom.Math.LineSegment2"/> object.
            </summary>
            <param name="formatProvider">
            Provides formating information.
            </param>
            <returns> A string representation. </returns>
        </member>
        <member name="M:Atom.Math.LineSegment2.Clone">
            <summary>
            Returns a clone of the <see cref="T:Atom.Math.LineSegment2"/>.
            </summary>
            <returns>The cloned LineSegment2.</returns>
        </member>
        <member name="M:Atom.Math.LineSegment2.System#ICloneable#Clone">
            <summary>
            Returns a clone of the <see cref="T:Atom.Math.LineSegment2"/>.
            </summary>
            <returns>The cloned LineSegment2.</returns>
        </member>
        <member name="M:Atom.Math.LineSegment2.GetHashCode">
            <summary> 
            Returns the hash code of the <see cref="T:Atom.Math.LineSegment2"/> instance. 
            </summary>
            <returns>
            The hash code.
            </returns>
        </member>
        <member name="F:Atom.Math.LineSegment2.start">
            <summary> 
            The starting point of this LineSegment2.
            </summary>
        </member>
        <member name="F:Atom.Math.LineSegment2.end">
            <summary>
            The ending point of this LineSegment2.
            </summary>
        </member>
        <member name="T:Atom.Math.OrientedRectangleF">
            <summary>
            Represents an oriented rectangle in 2-D space.
            </summary>
        </member>
        <member name="P:Atom.Math.OrientedRectangleF.Corners">
            <summary>
            Gets the corners of this OrientedRectangleF.
            </summary>
        </member>
        <member name="P:Atom.Math.OrientedRectangleF.UpperLeft">
            <summary>
            Gets the upper-left corner of this OrientedRectangleF.
            </summary>
        </member>
        <member name="P:Atom.Math.OrientedRectangleF.UpperRight">
            <summary>
            Gets the upper-right corner of this OrientedRectangleF.
            </summary>
        </member>
        <member name="P:Atom.Math.OrientedRectangleF.LowerLeft">
            <summary>
            Gets the lower-left corner of this OrientedRectangleF.
            </summary>
        </member>
        <member name="P:Atom.Math.OrientedRectangleF.LowerRight">
            <summary>
            Gets the lower-right corner of this OrientedRectangleF.
            </summary>
        </member>
        <member name="P:Atom.Math.OrientedRectangleF.LineSegments">
            <summary>
            Gets the line segments of this OrientedRectangleF.
            </summary>
        </member>
        <member name="M:Atom.Math.OrientedRectangleF.#ctor(Atom.Math.Vector2,Atom.Math.Vector2,Atom.Math.Vector2)">
            <summary>
            Initializes a new instance of the OrientedRectangleF class.
            </summary>
            <param name="upperLeft">
            The 'upper left' corner of the new OrientedRectangleF.
            </param>
            <param name="upperRight">
            The 'upper right' corner of the new OrientedRectangleF.
            </param>
            <param name="lowerLeft">
            The 'lower left' corner of the new OrientedRectangleF.
            </param>
        </member>
        <member name="M:Atom.Math.OrientedRectangleF.FromRectangle(Atom.Math.RectangleF,System.Single)">
            <summary>
            Creates a new OrientedRectangleF given a RectangleF and an angle.
            </summary>
            <param name="rectangle">
            The rectangle to rotate.
            </param>
            <param name="angle">
            The angle to rotate in radian.
            The center of the rectangle is the origin of rotation.
            </param>
            <returns>
            The newly created OrientedRectangleF.
            </returns>
        </member>
        <member name="M:Atom.Math.OrientedRectangleF.FromLine(Atom.Math.FastLineSegment2,System.Single)">
            <summary>
            Creates a new OrientedRectangleF that lies on the specified line.
            </summary>
            <param name="line">
            The line the new OrientedRectangleF lies on.
            </param>
            <param name="width">
            The width of the rectangle; extending for half width into both directions perpendicular of
            the input line.
            </param>
            <returns>
            The newly created v.
            </returns>
        </member>
        <member name="M:Atom.Math.OrientedRectangleF.GetMinMax(Atom.Math.Vector2@,Atom.Math.Vector2@)">
            <summary>
            Gets the minimum and maximum points of this OrientedRectangleF.
            </summary>
            <param name="min">
            Will contain the minimum point.
            </param>
            <param name="max">
            Will contain the maximum point.
            </param>
        </member>
        <member name="M:Atom.Math.OrientedRectangleF.Contains(Atom.Math.Vector2)">
            <summary>
            Gets a value indicating whether this OrientedRectangleF contains
            the specified point.
            </summary>
            <param name="point">
            The point to test for containment.
            </param>
            <returns>
            true if this OrientedRectangleF contains the specified point;
            otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Math.OrientedRectangleF.Intersects(Atom.Math.RectangleF)">
            <summary>
            Gets a value indicating whether this OrientedRectangleF intersects
            with the specified axis-aligned RectangleF.
            </summary>
            <param name="rectangle">
            The rectangle to check for intersection with.
            </param>
            <returns>
            true if they intersect; -or- otherwise false.
            </returns>
        </member>
        <member name="F:Atom.Math.OrientedRectangleF.upperLeft">
            <summary>
            The upper-left corner of this OrientedRectangleF.
            </summary>
        </member>
        <member name="F:Atom.Math.OrientedRectangleF.upperRight">
            <summary>
            The upper-right corner of this OrientedRectangleF.
            </summary>
        </member>
        <member name="F:Atom.Math.OrientedRectangleF.lowerRight">
            <summary>
            The lower-right corner of this OrientedRectangleF.
            Is calculated from the other three corners.
            </summary>
        </member>
        <member name="F:Atom.Math.OrientedRectangleF.lowerLeft">
            <summary>
            The lower-left corner of this OrientedRectangleF.
            </summary>
        </member>
        <member name="T:Atom.Math.Polygon2">
            <summary>
            Represents a polygon in two dimensional space.
            </summary>
        </member>
        <member name="P:Atom.Math.Polygon2.Vertices">
            <summary>
            Gets the reference of the List
            that contains the vertices of the <see cref="T:Atom.Math.Polygon2"/>.
            </summary>
            <value>The internal list of vertices.</value>
        </member>
        <member name="P:Atom.Math.Polygon2.VertexCount">
            <summary>
            Gets the number of vertices the <see cref="T:Atom.Math.Polygon2"/> consists of.
            </summary>
            <value>The total number of vertices.</value>
        </member>
        <member name="P:Atom.Math.Polygon2.Item(System.Int32)">
            <summary>
            Gets or sets the Vertex of this <see cref="T:Atom.Math.Polygon2"/>
            at the specified <paramref name="index"/>.
            </summary>
            <param name="index">The zero-based vertex index.</param>
            <returns>
            The vertex at the specified <paramref name="index"/>.
            </returns>
        </member>
        <member name="P:Atom.Math.Polygon2.SignedArea">
            <summary>
            Gets the (signed) area of the <see cref="T:Atom.Math.Polygon2"/>.
            </summary>
            <value>The (signed) area of the <see cref="T:Atom.Math.Polygon2"/>.</value>
        </member>
        <member name="P:Atom.Math.Polygon2.Area">
            <summary>
            Gets the area of the <see cref="T:Atom.Math.Polygon2"/>.
            </summary>
            <value>The (unsigned) area of the <see cref="T:Atom.Math.Polygon2"/>.</value>
        </member>
        <member name="P:Atom.Math.Polygon2.Centroid">
            <summary>
            Gets the centroid of this <see cref="T:Atom.Math.Polygon2"/>.
            </summary>
            <remarks>
            This operation may be slow. Caching this value is preffered.
            </remarks>
            <value>
            The centroid or barycenter of an object X in n-dimensional space
            is the intersection of all hyperplanes that divide X into two parts of equal moment about the hyperplane.
            Informally, it is the "average" of all points of X.
            </value>
        </member>
        <member name="P:Atom.Math.Polygon2.VertexOrder">
            <summary>
            Gets or sets the Vertex Order of the <see cref="T:Atom.Math.Polygon2"/>.
            </summary>
            <value>The direction the vertices turn; calculated using the <see cref="P:Atom.Math.Polygon2.SignedArea"/>.</value>
        </member>
        <member name="P:Atom.Math.Polygon2.MomentOfInertia">
            <summary>
            Gets the Moment of Inertia of this <see cref="T:Atom.Math.Polygon2"/>.
            </summary> 
            <remarks>
            This operation is slow. Caching this value is preffered.
            </remarks>
            <value>
            Moment of inertia, also called mass moment of inertia or 
            the angular mass, is the rotational analog of mass.
            </value>
        </member>
        <member name="M:Atom.Math.Polygon2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.Polygon2"/> class.
            </summary>
            <param name="initialVertexCapacity">
            The initial number of vertices the Polygon can contain without reallocating memory.
            </param>
        </member>
        <member name="M:Atom.Math.Polygon2.#ctor(System.Collections.Generic.IEnumerable{Atom.Math.Vector2})">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.Polygon2"/> class.
            </summary>
            <param name="vertices">
            The vertices of the polygon to create.
            </param>
        </member>
        <member name="M:Atom.Math.Polygon2.#ctor(System.Collections.Generic.ICollection{Atom.Math.Vector2})">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.Polygon2"/> class.
            </summary>
            <param name="vertices">
            The vertices of the polygon to create.
            </param>
        </member>
        <member name="M:Atom.Math.Polygon2.InvertVertexOrder">
            <summary>
            Inverts the <see cref="P:Atom.Math.Polygon2.VertexOrder"/> of the <see cref="T:Atom.Math.Polygon2"/>.
            </summary>
        </member>
        <member name="M:Atom.Math.Polygon2.SubdivideEdges(System.Single)">
            <summary>
            Subdives the edges of the <see cref="T:Atom.Math.Polygon2"/>.
            </summary>
            <param name="maximumAllowedEdgeLength">
            The maximum allowed length of an edge
            before it gets sub-devided.
            </param>
        </member>
        <member name="M:Atom.Math.Polygon2.Translate(Atom.Math.Vector2)">
            <summary>
            Translates all vertices of the <see cref="T:Atom.Math.Polygon2"/>
            by the specified <paramref name="offset"/>.
            </summary>
            <param name="offset">
            The offset to translate.
            </param>
        </member>
        <member name="M:Atom.Math.Polygon2.ProjectToAxis(Atom.Math.Vector2,System.Single@,System.Single@)">
            <summary>
            Projects the <see cref="T:Atom.Math.Polygon2"/> onto the
            specified <paramref name="axis"/>.
            </summary>
            <param name="axis">
            The axis to project the Polygon onto.
            </param>
            <param name="minimum">
            Will contain the projected minumum point of the polygon.
            </param>
            <param name="maximum">
            Will contain the projected maximum point of the polygon.
            </param>
        </member>
        <member name="M:Atom.Math.Polygon2.GetNextIndex(System.Int32)">
            <summary>
            Gets the vertex index that follows the given <paramref name="index"/>.
            </summary>
            <param name="index">
            The current vertex index.
            </param>
            <returns>
            The next vertex index.
            </returns>
        </member>
        <member name="M:Atom.Math.Polygon2.GetPreviousIndex(System.Int32)">
            <summary>
            Gets the vertex index that is before the given <paramref name="index"/>.
            </summary>
            <param name="index">
            The current vertex index.
            </param>
            <returns>
            The previous vertex index.
            </returns>
        </member>
        <member name="M:Atom.Math.Polygon2.GetVertexNormal(System.Int32)">
            <summary>
            Gets the normal of the vertex at the specified <paramref name="index"/>.
            </summary>
            <param name="index">
            The zero-based index of the vertex
            to get the normal of.
            </param>
            <returns>
            The normal of the vertex at the specified <paramref name="index"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.Polygon2.GetEdge(System.Int32)">
            <summary>
            Gets the edge at the specified <paramref name="index"/>.
            </summary>
            <param name="index">
            The zero-based index of the edge to get.
            This is also the index of the starting vertex of the edge.
            </param>
            <returns>
            The edge at the specified <paramref name="index"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.Polygon2.GetEdgeNormal(System.Int32)">
            <summary>
            Gets the the normal of the edge at the specified <paramref name="index"/>.
            </summary>
            <param name="index">
            The zero-based index of the edge to get.
            This is also the index of the starting vertex of the edge.
            </param>
            <returns>
            The normal of the edge at the specified <paramref name="index"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.Polygon2.GetEdgeMidPoint(System.Int32)">
            <summary>
            Gets the middle point of the edge at the specified <paramref name="index"/>.
            </summary>
            <param name="index">
            The zero-based index of the edge to get.
            This is also the index of the starting vertex of the edge.
            </param>
            <returns>
            The mid point of the edge at the specified <paramref name="index"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.Polygon2.GetShortestEdge">
            <summary>
            Gets the length of the shortest edge of the <see cref="T:Atom.Math.Polygon2"/>.
            </summary>
            <remarks>
            This method has a complexitity of O(N), where N = VertexCount.
            </remarks>
            <returns>
            The shortest edge of the <see cref="T:Atom.Math.Polygon2"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.Polygon2.CreateRectangle(Atom.Math.Vector2,Atom.Math.Vector2)">
            <summary>
            Utility method that creates the shape of a regular axis aligned rectangle.
            </summary>
            <param name="offset">
            The offset that is applied to each coordinate.
            </param>
            <param name="dimensions">
            The dimensions of the rectangle.
            </param>
            <returns>The newly created Polygon2.</returns>
        </member>
        <member name="M:Atom.Math.Polygon2.CreateCircle(Atom.Math.Vector2,System.Single,System.Int32)">
            <summary>
            Utility method that creates the shape of a regular circle.
            </summary>
            <param name="offset">
            The offset that is applied to each coordinate.
            </param>
            <param name="radius">The radius of the circle.</param>
            <param name="spikeCount">The number of spikes.</param>
            <returns>The vertices that make up the star.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="spikeCount"/> is less than or equal zero.</exception>
        </member>
        <member name="M:Atom.Math.Polygon2.CreateStar(Atom.Math.Vector2,System.Single,System.Single,System.Int32)">
            <summary>
            Utility method that creates the shape of a regular star.
            </summary>
            <param name="offset">
            The offset that is applied to each coordinate.
            </param>
            <param name="innerRadius">The inner radius.</param>
            <param name="outerRadius">The outer radius; the spikes.</param>
            <param name="spikeCount">The number of spikes.</param>
            <returns>The vertices that make up the star.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="spikeCount"/> is less than or equal zero.</exception>
        </member>
        <member name="M:Atom.Math.Polygon2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the
            vertices of the <see cref="T:Atom.Math.Polygon2"/>.
            </summary>
            <returns>
            A new <see cref="T:System.Collections.Generic.IEnumerator`1"/> instance.
            </returns>
        </member>
        <member name="M:Atom.Math.Polygon2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the
            vertices of the <see cref="T:Atom.Math.Polygon2"/>.
            </summary>
            <returns>
            A new <see cref="T:System.Collections.Generic.IEnumerator`1"/> instance.
            </returns>
        </member>
        <member name="M:Atom.Math.Polygon2.ToString">
            <summary>
            Returns a human-readable representation
            of the <see cref="T:Atom.Math.Polygon2"/>.
            </summary>
            <returns>
            A string representation of the <see cref="T:Atom.Math.Polygon2"/>. 
            </returns>
        </member>
        <member name="M:Atom.Math.Polygon2.ToString(System.IFormatProvider)">
            <summary>
            Returns a human-readable representation
            of the <see cref="T:Atom.Math.Polygon2"/>.
            </summary>
            <param name="formatProvider">
            Provides culture sensitive formatting information.
            </param>
            <returns>
            A string representation of the <see cref="T:Atom.Math.Polygon2"/>. 
            </returns>
        </member>
        <member name="F:Atom.Math.Polygon2.vertices">
            <summary>
            The vertices that make-up the polygon.
            </summary>
        </member>
        <member name="T:Atom.Math.Rectangle">
            <summary>
            Represents a rectangle that is defined 
            by a position and a dimension value.
            </summary>
        </member>
        <member name="F:Atom.Math.Rectangle.X">
            <summary>
            The position of the upper left corner of this Rectangle on the x-axis.
            </summary>
        </member>
        <member name="F:Atom.Math.Rectangle.Y">
            <summary>
            The position of the upper left corner of this Rectangle on the y-axis.
            </summary>
        </member>
        <member name="F:Atom.Math.Rectangle.Width">
            <summary>
            The width of this Rectangle.
            </summary>
        </member>
        <member name="F:Atom.Math.Rectangle.Height">
            <summary>
            The height of this Rectangle.
            </summary>
        </member>
        <member name="P:Atom.Math.Rectangle.Position">
            <summary>
            Gets or sets the position of the upper-left corner of this Rectangle.
            </summary>
            <value>The position of this rectangle.</value>
        </member>
        <member name="P:Atom.Math.Rectangle.Size">
            <summary>
            Gets or sets the size of this Rectangle.
            </summary>
            <value>The size of this rectangle.</value>
        </member>
        <member name="P:Atom.Math.Rectangle.Center">
            <summary>
            Gets or sets the center of this Rectangle.
            </summary>
            <value>The center of this rectangle.</value>
        </member>
        <member name="P:Atom.Math.Rectangle.Left">
            <summary>
            Gets the x-coordinate of the left side of the rectangle.
            </summary>
            <value>The x-coordinate of the left side of the rectangle.</value>
        </member>
        <member name="P:Atom.Math.Rectangle.Right">
            <summary>
            Gets the x-coordinate of the right side of the rectangle.
            </summary>
            <value>The x-coordinate of the right side of the rectangle.</value>
        </member>
        <member name="P:Atom.Math.Rectangle.Top">
            <summary>
            Gets the y-coordinate of the top of the rectangle.
            </summary>
            <value>The y-coordinate of the top of the rectangle.</value>
        </member>
        <member name="P:Atom.Math.Rectangle.Bottom">
            <summary>
            Gets the y-coordinate of the bottom of the rectangle.
            </summary>
            <value>The y-coordinate of the bottom of the rectangle.</value>
        </member>
        <member name="P:Atom.Math.Rectangle.Empty">
            <summary>
            Gets an empty Rectangle.
            </summary>
            <value>A rectangle at position (0, 0) and of size (0, 0).</value>
        </member>
        <member name="F:Atom.Math.Rectangle.emtpy">
            <summary>
            Stores the empty rectangle.
            </summary>
        </member>
        <member name="M:Atom.Math.Rectangle.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the Rectangle structure.
            </summary>
            <param name="x">The x-coordinate of the new Rectangle.</param>
            <param name="y">The y-coordinate of the new Rectangle.</param>
            <param name="width">The width of the new Rectangle.</param>
            <param name="height">The height of the new Rectangle.</param>
        </member>
        <member name="M:Atom.Math.Rectangle.#ctor(Atom.Math.Point2,Atom.Math.Point2)">
            <summary>
            Initializes a new instance of the Rectangle structure.
            </summary>
            <param name="position">The position of the new Rectangle.</param>
            <param name="size">The size of the Rectangle.</param>
        </member>
        <member name="M:Atom.Math.Rectangle.Offset(Atom.Math.Point2)">
            <summary>
            Changes the position of this Rectangle.
            </summary>
            <param name="amount">The values to adjust the position of the Rectangle by.</param>
        </member>
        <member name="M:Atom.Math.Rectangle.Offset(System.Int32,System.Int32)">
            <summary>
            Changes the position of this Rectangle.
            </summary>
            <param name="offsetX">Change in the x-position.</param>
            <param name="offsetY">Change in the y-position.</param>
        </member>
        <member name="M:Atom.Math.Rectangle.Inflate(System.Int32,System.Int32)">
            <summary>
            Pushes the edges of this Rectangle out by the horizontal and vertical values specified.
            </summary>
            <param name="horizontalAmount">Value to push the sides out by.</param>
            <param name="verticalAmount">Value to push the top and bottom out by.</param>
        </member>
        <member name="M:Atom.Math.Rectangle.GetClosestPoint(Atom.Math.Point2)">
            <summary>
            Gets the closest point <paramref name="from"/> the given point on this Rectangle.
            </summary>
            <param name="from">
            The point to project onto this Rectangle.
            </param>
            <returns>
            The closest point on this Rectangle.
            </returns>
        </member>
        <member name="M:Atom.Math.Rectangle.GetCorners(Atom.Math.Point2@,Atom.Math.Point2@,Atom.Math.Point2@,Atom.Math.Point2@)">
            <summary>
            Receives the corners of this Rectangle.
            </summary>
            <param name="cornerA">Will contain the first corner.</param>
            <param name="cornerB">Will contain the second corner.</param>
            <param name="cornerC">Will contain the third corner.</param>
            <param name="cornerD">Will contain the fourth corner.</param>
        </member>
        <member name="M:Atom.Math.Rectangle.DistanceTo(Atom.Math.Point2,Atom.Math.Point2@)">
            <summary>
            Gets the shortest distance from the given <paramref name="point"/> to any side of this Rectangle.
            </summary>
            <param name="point">
            The point to test against.
            </param>
            <param name="pointOnRect">
            The projected point on the rectangle.
            </param>
            <returns>
            The distance from the point to the rectangle.
            </returns>
        </member>
        <member name="M:Atom.Math.Rectangle.Contains(System.Int32,System.Int32)">
            <summary>
            Determines whether this Rectangle contains a specified point represented by its x- and y-coordinates.
            </summary>
            <param name="x">The x-coordinate of the specified point.</param>
            <param name="y">The y-coordinate of the specified point.</param>
            <returns>true if the specified point is contained within this Rectangle; false otherwise.
            </returns>
        </member>
        <member name="M:Atom.Math.Rectangle.Contains(Atom.Math.Point2)">
            <summary>
            Determines whether this Rectangle contains a specified Point.
            </summary>
            <param name="point">The Point to evaluate.</param>
            <returns>true if the specified Point is contained within this Rectangle; false otherwise.
            </returns>
        </member>
        <member name="M:Atom.Math.Rectangle.Contains(Atom.Math.Vector2)">
            <summary>
            Determines whether this Rectangle contains a specified Point.
            </summary>
            <param name="point">The Point to evaluate.</param>
            <returns>true if the specified Point is contained within this Rectangle; false otherwise.
            </returns>
        </member>
        <member name="M:Atom.Math.Rectangle.Contains(Atom.Math.Rectangle)">
            <summary>
            Determines whether this Rectangle entirely contains a specified Rectangle.
            </summary>
            <param name="rect">The Rectangle to evaluate.</param>
            <returns>true if this Rectangle entirely contains the specified Rectangle; false otherwise.
            </returns>
        </member>
        <member name="M:Atom.Math.Rectangle.Contains(Atom.Math.Rectangle@,System.Boolean@)">
            <summary>
            Determines whether this Rectangle entirely contains a specified Rectangle.
            </summary>
            <param name="rect">The Rectangle to evaluate.</param>
            <param name="result">
            Will contain whether this Rectangle entirely contains the specified Rectangle.
            </param>
        </member>
        <member name="M:Atom.Math.Rectangle.Intersects(Atom.Math.Rectangle)">
            <summary>
            Determines whether a specified Rectangle intersects with this Rectangle.
            </summary>
            <param name="rect">
            The Rectangle to evaluate.
            </param>
            <returns>
            Returns <see langword="true"/> if the specified Rectangle intersects with this one; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.Rectangle.Intersects(Atom.Math.Rectangle@,System.Boolean@)">
            <summary>
            Determines whether a specified Rectangle intersects with this Rectangle.
            </summary>
            <param name="rect">
            The Rectangle to evaluate.
            </param>
            <param name="result">
            Will be <see langword="true"/> if the specified Rectangle intersects with this one; otherwise <see langword="false"/>.
            </param>
        </member>
        <member name="M:Atom.Math.Rectangle.Intersects(Atom.Math.RectangleF)">
            <summary>
            Determines whether a specified <see cref="T:Atom.Math.RectangleF"/> intersects with this Rectangle.
            </summary>
            <param name="rect">
            The Rectangle to evaluate.
            </param>
            <returns>
            Returns <see langword="true"/> if the specified Rectangle intersects with this one; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.Rectangle.Intersects(Atom.Math.RectangleF@,System.Boolean@)">
            <summary>
            Determines whether a specified <see cref="T:Atom.Math.RectangleF"/> intersects with this Rectangle.
            </summary>
            <param name="rect">
            The Rectangle to evaluate.
            </param>
            <param name="result">
            Will be <see langword="true"/> if the specified Rectangle intersects with this one; otherwise <see langword="false"/>.
            </param>
        </member>
        <member name="M:Atom.Math.Rectangle.Intersects(Atom.Math.FastLineSegment2)">
            <summary>
            Determines whether a specified line segment intersects with this Rectangle.
            </summary>
            <param name="line">
            The line segment to test for intersection with.
            </param>
            <returns>
            true if they intersect; -or-
            otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Math.Rectangle.Equals(System.Object)">
            <summary>
            Returns whether this Rectangle is equal to the specified <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The Object to compare with this Rectangle.</param>
            <returns>true if this Rectangle is equal to the specified object; otherwise false.</returns>
        </member>
        <member name="M:Atom.Math.Rectangle.Equals(Atom.Math.Rectangle)">
            <summary>
            Returns whether this Rectangle is equal to the specified <see cref="T:System.Object"/>.
            </summary>
            <param name="other">The Rectangle to compare with this Rectangle.</param>
            <returns>true if this Rectangle is equal to the specified object; otherwise false.</returns>
        </member>
        <member name="M:Atom.Math.Rectangle.ToString">
            <summary>
            Return a human-readable text representation of the Rectangle.
            </summary>
            <returns>A human-readable text representation of the Rectangle.</returns>
        </member>
        <member name="M:Atom.Math.Rectangle.ToString(System.IFormatProvider)">
            <summary>
            Returns a human-readable text representation of the Rectangle.
            </summary>
            <param name="formatProvider">
            The <see cref="T:System.IFormatProvider"/> that supplies culture specific formatting information.
            </param>
            <returns>A human-readable text representation of the Rectangle.</returns>
        </member>
        <member name="M:Atom.Math.Rectangle.GetHashCode">
            <summary>
            Gets the hash code of this Rectangle.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Atom.Math.Rectangle.op_Equality(Atom.Math.Rectangle,Atom.Math.Rectangle)">
            <summary>
            Returns whether the specified Rectangles are equal.
            </summary>
            <param name="left">The Rectangle on the left side of the equation.</param>
            <param name="right">The Rectangle on the right side of the equation.</param>
            <returns>true if the Rectangles are equal; false otherwise.</returns>
        </member>
        <member name="M:Atom.Math.Rectangle.op_Inequality(Atom.Math.Rectangle,Atom.Math.Rectangle)">
            <summary>
            Returns whether the specified Rectangles are not equal.
            </summary>
            <param name="left">The Rectangle on the left side of the equation.</param>
            <param name="right">The Rectangle on the right side of the equation.</param>
            <returns>true if the Rectangles are not equal; false otherwise.</returns>
        </member>
        <member name="M:Atom.Math.Rectangle.op_Implicit(Atom.Math.Rectangle)~Atom.Math.RectangleF">
            <summary>
            Implicit cast operator that implements conversion
            from a Rectangle to a <see cref="T:Atom.Math.RectangleF"/>.
            </summary>
            <param name="rectangle">
            The input rectangle.
            </param>
            <returns>
            The converted value.
            </returns>
        </member>
        <member name="T:Atom.Math.RectangleF">
            <summary>
            Represents a floating-point rectangle that is
            defined by a position and a dimension value.
            </summary>
        </member>
        <member name="F:Atom.Math.RectangleF.X">
            <summary>
            The position of the upper left corner of this RectangleF on the x-axis.
            </summary>
        </member>
        <member name="F:Atom.Math.RectangleF.Y">
            <summary>
            The position of the upper left corner of this RectangleF on the y-axis.
            </summary>
        </member>
        <member name="F:Atom.Math.RectangleF.Width">
            <summary>
            The width of this RectangleF.
            </summary>
        </member>
        <member name="F:Atom.Math.RectangleF.Height">
            <summary>
            The height of this RectangleF.
            </summary>
        </member>
        <member name="P:Atom.Math.RectangleF.Position">
            <summary>
            Gets or sets the position of this <see cref="T:Atom.Math.RectangleF"/>.
            </summary>
            <value>The position of this rectangle.</value>
        </member>
        <member name="P:Atom.Math.RectangleF.Size">
            <summary>
            Gets or sets the size of this <see cref="T:Atom.Math.RectangleF"/>.
            </summary>
            <value>The size of this rectangle.</value>
        </member>
        <member name="P:Atom.Math.RectangleF.Center">
            <summary>
            Gets or sets the center of this <see cref="T:Atom.Math.RectangleF"/>.
            </summary>
            <value>The center of this rectangle.</value>
        </member>
        <member name="P:Atom.Math.RectangleF.Left">
            <summary>
            Gets the x-coordinate of the left side of the rectangle.
            </summary>
            <value>The x-coordinate of the left side of the rectangle.</value>
        </member>
        <member name="P:Atom.Math.RectangleF.Right">
            <summary>
            Gets the x-coordinate of the right side of the rectangle.
            </summary>
            <value>The x-coordinate of the right side of the rectangle.</value>
        </member>
        <member name="P:Atom.Math.RectangleF.Top">
            <summary>
            Gets the y-coordinate of the top of the rectangle.
            </summary>
            <value>The y-coordinate of the top of the rectangle.</value>
        </member>
        <member name="P:Atom.Math.RectangleF.Bottom">
            <summary>
            Gets the y-coordinate of the bottom of the rectangle.
            </summary>
            <value>The y-coordinate of the bottom of the rectangle.</value>
        </member>
        <member name="P:Atom.Math.RectangleF.Minimum">
            <summary>
            Gets or sets the minimum point of this <see cref="T:Atom.Math.RectangleF"/>.
            </summary>
            <value>This value is the same as the <see cref="P:Atom.Math.RectangleF.Position"/>.</value>
        </member>
        <member name="P:Atom.Math.RectangleF.Maximum">
            <summary>
            Gets or sets the maximum point of this <see cref="T:Atom.Math.RectangleF"/>.
            </summary>
            <value>The maximum point.</value>
        </member>
        <member name="M:Atom.Math.RectangleF.#ctor(Atom.Math.Vector2,Atom.Math.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.RectangleF"/> structure.
            </summary>
            <param name="position">The position of the new RectangleF.</param>
            <param name="size">The size of the new RectangleF.</param>>
        </member>
        <member name="M:Atom.Math.RectangleF.#ctor(Atom.Math.Vector2,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.RectangleF"/> structure.
            </summary>
            <param name="position">The position of the new RectangleF.</param>
            <param name="width">The width of the new RectangleF.</param>
            <param name="height">The height of the new RectangleF.</param>
        </member>
        <member name="M:Atom.Math.RectangleF.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.RectangleF"/> structure.
            </summary>
            <param name="x">The x-coordinate of the new RectangleF.</param>
            <param name="y">The y-coordinate of the new RectangleF.</param>
            <param name="width">The width of the new RectangleF.</param>
            <param name="height">The height of the new RectangleF.</param>
        </member>
        <member name="M:Atom.Math.RectangleF.Offset(Atom.Math.Vector2)">
            <summary>
            Changes the position of this <see cref="T:Atom.Math.RectangleF"/>.
            </summary>
            <param name="amount">The values to adjust the position of the RectangleF by.</param>
        </member>
        <member name="M:Atom.Math.RectangleF.Offset(System.Single,System.Single)">
            <summary>
            Changes the position of this <see cref="T:Atom.Math.RectangleF"/>.
            </summary>
            <param name="offsetX">Change in the x-position.</param>
            <param name="offsetY">Change in the y-position.</param>
        </member>
        <member name="M:Atom.Math.RectangleF.Inflate(System.Single,System.Single)">
            <summary>
            Pushes the edges of this <see cref="T:Atom.Math.RectangleF"/> out by the horizontal and vertical values specified.
            </summary>
            <param name="horizontalAmount">Value to push the sides out by.</param>
            <param name="verticalAmount">Value to push the top and bottom out by.</param>
        </member>
        <member name="M:Atom.Math.RectangleF.GetClosestPoint(Atom.Math.Vector2)">
            <summary>
            Gets the closest point <paramref name="from"/> the given point on this RectangleF.
            </summary>
            <param name="from">
            The point to project onto this RectangleF.
            </param>
            <returns>
            The closest point on this RectangleF.
            </returns>
        </member>
        <member name="M:Atom.Math.RectangleF.GetCorners(Atom.Math.Vector2@,Atom.Math.Vector2@,Atom.Math.Vector2@,Atom.Math.Vector2@)">
            <summary>
            Receives the corners of this <see cref="T:Atom.Math.RectangleF"/>.
            </summary>
            <param name="cornerA">Will contain the first corner.</param>
            <param name="cornerB">Will contain the second corner.</param>
            <param name="cornerC">Will contain the third corner.</param>
            <param name="cornerD">Will contain the fourth corner.</param>
        </member>
        <member name="M:Atom.Math.RectangleF.Contains(System.Single,System.Single)">
            <summary>
            Determines whether this RectangleF contains a specified vector represented by its x- and y-coordinates.
            </summary>
            <param name="x">The x-coordinate of the specified vector.</param>
            <param name="y">The y-coordinate of the specified vector.</param>
            <returns>true if the specified vector is contained within this RectangleF; false otherwise.
            </returns>
        </member>
        <member name="M:Atom.Math.RectangleF.Contains(Atom.Math.Vector2)">
            <summary>
            Determines whether this RectangleF contains a specified Vector2.
            </summary>
            <param name="vector">The vector to evaluate.</param>
            <returns>true if the specified vector is contained within this RectangleF; false otherwise.
            </returns>
        </member>
        <member name="M:Atom.Math.RectangleF.Contains(Atom.Math.Point2)">
            <summary>
            Determines whether this RectangleF contains a specified Point2.
            </summary>
            <param name="point">The point to evaluate.</param>
            <returns>
            Returns <see langword="true"/> if the specified point is contained within this RectangleF;
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.RectangleF.Contains(Atom.Math.RectangleF)">
            <summary>
            Determines whether this RectangleF entirely contains a specified RectangleF.
            </summary>
            <param name="rect">The RectangleF to evaluate.</param>
            <returns>
            Returns <see langword="true"/> if this RectangleF entirely contains the specified RectangleF;
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.RectangleF.Contains(Atom.Math.RectangleF@,System.Boolean@)">
            <summary>
            Determines whether this RectangleF entirely contains a specified RectangleF.
            </summary>
            <param name="rect">The RectangleF to evaluate.</param>
            <param name="result">
            Will contain whether this RectangleF entirely contains the specified RectangleF.
            </param>
        </member>
        <member name="M:Atom.Math.RectangleF.Contains(Atom.Math.Rectangle)">
            <summary>
            Determines whether this RectangleF entirely contains a specified RectangleF.
            </summary>
            <param name="rect">The RectangleF to evaluate.</param>
            <returns>
            Returns <see langword="true"/> if this RectangleF entirely contains the specified RectangleF; 
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.RectangleF.Intersects(Atom.Math.Rectangle)">
            <summary>
            Determines whether a specified RectangleF floatersects with this RectangleF.
            </summary>
            <param name="rect">The RectangleF to evaluate.</param>
            <returns>
            Returns <see langword="true"/> if the specified Rectangle intersects with this one; 
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.RectangleF.Intersects(Atom.Math.Rectangle@,System.Boolean@)">
            <summary>
            Determines whether a specified RectangleF floatersects with this RectangleF.
            </summary>
            <param name="rect">The RectangleF to evaluate.</param>
            <param name="result">
            Will be <see langword="true"/> if the specified Rectangle intersects with this one; 
            otherwise <see langword="false"/>.
            </param>
        </member>
        <member name="M:Atom.Math.RectangleF.Intersects(Atom.Math.RectangleF)">
            <summary>
            Determines whether a specified RectangleF intersects with this RectangleF.
            </summary>
            <param name="rect">The RectangleF to evaluate.</param>
            <returns>true if the specified RectangleF intersects with this one; false otherwise.
            </returns>
        </member>
        <member name="M:Atom.Math.RectangleF.Intersects(Atom.Math.RectangleF@,System.Boolean@)">
            <summary>
            Determines whether a specified RectangleF intersects with this RectangleF.
            </summary>
            <param name="rect">
            The RectangleF to evaluate.
            </param>
            <param name="result">
            Will be <see langword="true"/> if the specified RectangleF intersects with this one; 
            otherwise <see langword="false"/>.
            </param>
        </member>
        <member name="M:Atom.Math.RectangleF.Intersects(Atom.Math.Circle)">
            <summary>
            Gets a value indicating whether this RectangleF intersects with the given <see cref="T:Atom.Math.Circle"/>.
            </summary>
            <param name="circle">
            The circle to test against.
            </param>
            <returns>
            Returns true if this RectangleF intersects with the given <paramref name="circle"/>; 
            otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Math.RectangleF.Intersects(Atom.Math.FastLineSegment2)">
            <summary>
            Determines whether a specified line segment intersects with this RectangleF.
            </summary>
            <param name="line">
            The line segment to test for intersection with.
            </param>
            <returns>
            true if they intersect; -or-
            otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Math.RectangleF.FromPolygon(Atom.Math.Polygon2)">
            <summary>
            Creates a new axis aligned <see cref="T:Atom.Math.RectangleF"/> that covers the specified <see cref="T:Atom.Math.Polygon2"/>.
            </summary>
            <param name="polygon">The input polygon.</param>
            <returns>The created rectangle.</returns>
        </member>
        <member name="M:Atom.Math.RectangleF.FromOrientedRectangle(Atom.Math.OrientedRectangleF)">
            <summary>
            Creates a new axis aligned <see cref="T:Atom.Math.RectangleF"/> that fully covers the given input <see cref="T:Atom.Math.OrientedRectangleF"/>.
            </summary>
            <param name="rectangle">
            The oriented rectangle.
            </param>
            <returns>The rectangle that has been created.</returns>
        </member>
        <member name="M:Atom.Math.RectangleF.FromOrientedRectangle(Atom.Math.RectangleF,System.Single,Atom.Math.Vector2)">
            <summary>
            Creates a new axis aligned <see cref="T:Atom.Math.RectangleF"/> given an input <see cref="T:Atom.Math.RectangleF"/>
            and a <paramref name="rotation"/> value.
            </summary>
            <param name="rectangle">
            The un-oriented rectangle.
            </param>
            <param name="rotation">
            The rotation in radians.
            </param>
            <param name="rotationOrigin">
            The origin (relative to to the rectangle) to rotate about.
            </param>
            <returns>The created rectangle.</returns>
        </member>
        <member name="M:Atom.Math.RectangleF.FromOrientedRectangle(Atom.Math.RectangleF,Atom.Math.Matrix2,Atom.Math.Vector2)">
            <summary>
            Creates a new axis aligned <see cref="T:Atom.Math.RectangleF"/> given an input <see cref="T:Atom.Math.RectangleF"/>
            and a <paramref name="rotation"/> value.
            </summary>
            <param name="rectangle">
            The un-oriented rectangle.
            </param>
            <param name="rotation">
            The rotation encapsulated in a <see cref="T:Atom.Math.Matrix2"/>.
            </param>
            <param name="rotationOrigin">
            The origin (relative to to the rectangle) to rotate about.
            </param>
            <returns>The created rectangle.</returns>
        </member>
        <member name="M:Atom.Math.RectangleF.Equals(System.Object)">
            <summary>
            Returns whether this <see cref="T:Atom.Math.RectangleF"/> is equal to the specified <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The Object to compare with this RectangleF.</param>
            <returns>true if this RectangleF is equal to the specified object; otherwise false.</returns>
        </member>
        <member name="M:Atom.Math.RectangleF.Equals(Atom.Math.RectangleF)">
            <summary>
            Returns whether this <see cref="T:Atom.Math.RectangleF"/> is equal to the specified <see cref="T:System.Object"/>.
            </summary>
            <param name="other">The RectangleF to compare with this RectangleF.</param>
            <returns>true if this RectangleF is equal to the specified object; otherwise false.</returns>
        </member>
        <member name="M:Atom.Math.RectangleF.ToString">
            <summary>
            Overriden to return a human-readable text representation of the RectangleF.
            </summary>
            <returns>A human-readable text representation of the RectangleF.</returns>
        </member>
        <member name="M:Atom.Math.RectangleF.ToString(System.IFormatProvider)">
            <summary>
            Returns a human-readable text representation of the RectangleF.
            </summary>
            <param name="formatProvider">
            The <see cref="T:System.IFormatProvider"/> that supplies culture specific formatting information.
            </param>
            <returns>A human-readable text representation of the RectangleF.</returns>
        </member>
        <member name="M:Atom.Math.RectangleF.GetHashCode">
            <summary>
            Gets the hash code of this <see cref="T:Atom.Math.RectangleF"/>.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Atom.Math.RectangleF.op_Equality(Atom.Math.RectangleF,Atom.Math.RectangleF)">
            <summary>
            Returns whether the specified <see cref="T:Atom.Math.RectangleF"/>s are equal.
            </summary>
            <param name="left">The RectangleF on the left side of the equation.</param>
            <param name="right">The RectangleF on the right side of the equation.</param>
            <returns>
            Returns <see langword="true"/> if the RectangleFs are equal; otherwise <see langword="true"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.RectangleF.op_Inequality(Atom.Math.RectangleF,Atom.Math.RectangleF)">
            <summary>
            Returns whether the specified <see cref="T:Atom.Math.RectangleF"/>s are not equal.
            </summary>
            <param name="left">The RectangleF on the left side of the equation.</param>
            <param name="right">The RectangleF on the right side of the equation.</param>
            <returns>
            Returns <see langword="true"/> if the RectangleFs are not equal; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.RectangleF.op_Explicit(Atom.Math.RectangleF)~Atom.Math.Rectangle">
            <summary>
            Explicit cast operator that implements conversion
            from a <see cref="T:Atom.Math.RectangleF"/> to a <see cref="T:Atom.Math.Rectangle"/>.
            </summary>
            <param name="rectangle">
            The input rectangle.
            </param>
            <returns>
            The converted value.
            </returns>
        </member>
        <member name="T:Atom.Math.Sphere">
            <summary>
            Represents a sphere.
            </summary>
        </member>
        <member name="F:Atom.Math.Sphere.Center">
            <summary>
            The center point of this <see cref="T:Atom.Math.Sphere"/>.
            </summary>
        </member>
        <member name="F:Atom.Math.Sphere.Radius">
            <summary>
            The radius of this <see cref="T:Atom.Math.Sphere"/>.
            </summary>
        </member>
        <member name="M:Atom.Math.Sphere.#ctor(Atom.Math.Vector3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.Sphere"/> struct.
            </summary>
            <param name="center">
            The center point of the new Sphere.
            </param>
            <param name="radius">
            The radius of the new Sphere.
            </param>
        </member>
        <member name="M:Atom.Math.Sphere.Transform(Atom.Math.Matrix4)">
            <summary>
            Translates and scales this <see cref="T:Atom.Math.Sphere"/> using the given <see cref="T:Atom.Math.Matrix4"/>.
            </summary>
            <param name="matrix">
            A translation and scaling matrix.
            </param>
            <returns>
            The transformed <see cref="T:Atom.Math.Sphere"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.Sphere.Transform(Atom.Math.Matrix4@,Atom.Math.Sphere@)">
            <summary>
            Translates and scales this <see cref="T:Atom.Math.Sphere"/> using the given <see cref="T:Atom.Math.Matrix4"/>.
            </summary>
            <param name="matrix">
            A translation and scaling matrix.
            </param>
            <param name="result">The transformed <see cref="T:Atom.Math.Sphere"/>.</param>
        </member>
        <member name="M:Atom.Math.Sphere.Merge(Atom.Math.Sphere,Atom.Math.Sphere)">
            <summary>
            Creates a <see cref="T:Atom.Math.Sphere"/> that contains the two specified <see cref="T:Atom.Math.Sphere"/> instances.
            </summary>
            <param name="original">
            The original <see cref="T:Atom.Math.Sphere"/>.
            </param>
            <param name="additional">
            The <see cref="T:Atom.Math.Sphere"/> to add to the <paramref name="original"/> <see cref="T:Atom.Math.Sphere"/>.
            </param>
            <returns>
            A new Sphere that contains both of the two specified <see cref="T:Atom.Math.Sphere"/>s.
            </returns>
        </member>
        <member name="M:Atom.Math.Sphere.Merge(Atom.Math.Sphere@,Atom.Math.Sphere@,Atom.Math.Sphere@)">
            <summary>
            Creates a <see cref="T:Atom.Math.Sphere"/> that contains the two specified <see cref="T:Atom.Math.Sphere"/> instances.
            </summary>
            <param name="original">
            The original <see cref="T:Atom.Math.Sphere"/>.
            </param>
            <param name="additional">
            The <see cref="T:Atom.Math.Sphere"/> to add to the <paramref name="original"/> <see cref="T:Atom.Math.Sphere"/>.
            </param>
            <param name="result">
            Will contain the Sphere that contains both of the two specified <see cref="T:Atom.Math.Sphere"/>s.
            </param>
        </member>
        <member name="M:Atom.Math.Sphere.FromPoints(System.Collections.Generic.IEnumerable{Atom.Math.Vector3})">
            <summary>
            Creates a <see cref="T:Atom.Math.Sphere"/> that can contain a specified list of points.
            </summary>
            <param name="points">
            The list of points the <see cref="T:Atom.Math.Sphere"/> must contain.
            </param>
            <returns>The created <see cref="T:Atom.Math.Sphere"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="points"/> is null.
            </exception>
        </member>
        <member name="M:Atom.Math.Sphere.FromBox(Atom.Math.Box)">
            <summary>
            Creates the smallest Sphere that can contain the specified Box.
            </summary>
            <param name="box">
            The Box to create the Sphere from.
            </param>
            <returns>
            The created Sphere.
            </returns>
        </member>
        <member name="M:Atom.Math.Sphere.FromBox(Atom.Math.Box@,Atom.Math.Sphere@)">
            <summary>
            Creates the smallest Sphere that can contain the specified Box.
            </summary>
            <param name="box">
            The Box to create the Sphere from.
            </param>
            <param name="result">
            Will contain the created Sphere.
            </param>
        </member>
        <member name="M:Atom.Math.Sphere.Intersects(Atom.Math.Plane3)">
            <summary>
            Checks whether this <see cref="T:Atom.Math.Sphere"/> intersects with the specified <see cref="T:Atom.Math.Plane3"/>.
            </summary>
            <param name="plane">The Plane to check for intersection with the current Sphere.</param>
            <returns>An enumeration indicating the relationship between the Sphere and the Plane3. </returns>
        </member>
        <member name="M:Atom.Math.Sphere.Intersects(Atom.Math.Plane3@,Atom.Math.PlaneIntersectionType@)">
            <summary>
            Checks whether the this <see cref="T:Atom.Math.Sphere"/> intersects with the specified <see cref="T:Atom.Math.Plane3"/>.
            </summary>
            <param name="plane">The Plane to check for intersection with.</param>
            <param name="result">An enumeration indicating whether the Sphere intersects the Plane.</param>
        </member>
        <member name="M:Atom.Math.Sphere.Intersects(Atom.Math.Ray3)">
            <summary>
            Checks whether the this <see cref="T:Atom.Math.Sphere"/> intersects with a specified Ray.
            </summary>
            <param name="ray">The Ray to check for intersection with the current BoundingSphere.</param>
            <returns>Distance at which the ray intersects the BoundingSphere or null if there is no intersection.
            </returns>
        </member>
        <member name="M:Atom.Math.Sphere.Intersects(Atom.Math.Ray3@,System.Nullable{System.Single}@)">
            <summary>
            Checks whether this <see cref="T:Atom.Math.Sphere"/> intersects a Ray.
            </summary>
            <param name="ray">The Ray to check for intersection with.</param>
            <param name="result">Distance at which the ray intersects the BoundingSphere or null if there is no intersection.</param>
        </member>
        <member name="M:Atom.Math.Sphere.Intersects(Atom.Math.Sphere)">
            <summary>
            Checks whether this <see cref="T:Atom.Math.Sphere"/> intersects with a specified <see cref="T:Atom.Math.Sphere"/>.
            </summary>
            <param name="sphere">The <see cref="T:Atom.Math.Sphere"/> to check for intersection with this <see cref="T:Atom.Math.Sphere"/>.</param>
            <returns>
            Returns <see langword="true"/> if the BoundingSpheres intersect; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.Sphere.Intersects(Atom.Math.Sphere@,System.Boolean@)">
            <summary>
            Checks whether the current BoundingSphere intersects another BoundingSphere.
            </summary>
            <param name="sphere">The BoundingSphere to check for intersection with.</param>
            <param name="result">
            Will be <see langword="true"/> if the BoundingSphere instances intersect; otherwise <see langword="false"/>.
            </param>
        </member>
        <member name="M:Atom.Math.Sphere.Intersects(Atom.Math.Box)">
            <summary>
            Checks whether this Sphere intersects with the specified Box.
            </summary>
            <param name="box">The Box to check for intersection with the current BoundingSphere.</param>
            <returns>
            Returns <see langword="true"/> if the Box and Sphere intersect; 
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.Sphere.Intersects(Atom.Math.Box@,System.Boolean@)">
            <summary>
            Checks whether the current Sphere intersects a Box.
            </summary>
            <param name="box">
            The Box to check for intersection with.
            </param>
            <param name="result">
            Will be <see langword="true"/> if the Box and Sphere intersect; 
            otherwise <see langword="false"/>.
            </param>
        </member>
        <member name="M:Atom.Math.Sphere.Contains(Atom.Math.Vector3)">
            <summary>
            Checks whether this <see cref="T:Atom.Math.Sphere"/> contains the specified <paramref name="point"/>.
            </summary>
            <param name="point">The point to check against this <see cref="T:Atom.Math.Sphere"/>.</param>
            <returns>
            An enumeration indicating the relationship of the specified point to the current <see cref="T:Atom.Math.Sphere"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.Sphere.Contains(Atom.Math.Vector3@,Atom.Math.ContainmentType@)">
            <summary>
            Checks whether this <see cref="T:Atom.Math.Sphere"/> contains the specified <paramref name="point"/>.
            </summary>
            <param name="point">The point to check against this <see cref="T:Atom.Math.Sphere"/>.</param>
            <param name="result">
            An enumeration indicating the relationship of the specified point to the current <see cref="T:Atom.Math.Sphere"/>.
            </param>
        </member>
        <member name="M:Atom.Math.Sphere.Contains(Atom.Math.Sphere)">
            <summary>
            Checks whether this <see cref="T:Atom.Math.Sphere"/> contains the specified <see cref="T:Atom.Math.Sphere"/>.
            </summary>
            <param name="sphere">The <see cref="T:Atom.Math.Sphere"/> to check against this <see cref="T:Atom.Math.Sphere"/>.</param>
            <returns>An enumeration indicating the relationship of the Sphere.</returns>
        </member>
        <member name="M:Atom.Math.Sphere.Contains(Atom.Math.Sphere@,Atom.Math.ContainmentType@)">
            <summary>
            Checks whether this <see cref="T:Atom.Math.Sphere"/> contains the specified <see cref="T:Atom.Math.Sphere"/>.
            </summary>
            <param name="sphere">The <see cref="T:Atom.Math.Sphere"/> to check against this <see cref="T:Atom.Math.Sphere"/>.</param>
            <param name="result">Enumeration indicating the extent of overlap.</param>
        </member>
        <member name="M:Atom.Math.Sphere.Contains(Atom.Math.Box)">
            <summary>
            Checks whether this Sphere contains the specified Box.
            </summary>
            <param name="box">The Box to check against the  current BoundingSphere.</param>
            <returns>
            An enumeration indicating the relationship of the specified Box to the current BoundingSphere.
            </returns>
        </member>
        <member name="M:Atom.Math.Sphere.Contains(Atom.Math.Box@,Atom.Math.ContainmentType@)">
            <summary>
            Checks whether this Sphere contains the specified Box.
            </summary>
            <param name="box">The Box to test for overlap.</param>
            <param name="result">Enumeration indicating the extent of overlap.</param>
        </member>
        <member name="M:Atom.Math.Sphere.Equals(System.Object)">
            <summary>
            Determines whether the specified System.Object is equal to this <see cref="T:Atom.Math.Sphere"/>.
            </summary>
            <param name="obj">The System.Object to compare with this Sphere.</param>
            <returns>
            Returns <see langword="true"/> if the specified System.Object is equal to this Sphere; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.Sphere.Equals(Atom.Math.Sphere)">
            <summary>
            Determines whether the specified <see cref="T:Atom.Math.Sphere"/> is equal to this <see cref="T:Atom.Math.Sphere"/>.
            </summary>
            <param name="other">The Sphere to compare with the this Sphere.</param>
            <returns>
            Returns <see langword="true"/> if the specified Sphere is equal to the current Sphere; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.Sphere.GetHashCode">
            <summary>Gets the hash code for this instance.</summary>
            <returns>
            A hash code for the current BoundingSphere.
            </returns>
        </member>
        <member name="M:Atom.Math.Sphere.ToString">
            <summary>
            Returns a human-readable text representation of the Sphere.
            </summary>
            <returns>A human-readable text representation of the Sphere.</returns>
        </member>
        <member name="M:Atom.Math.Sphere.ToString(System.IFormatProvider)">
            <summary>
            Returns a human-readable text representation of the Sphere.
            </summary>
            <param name="formatProvider">
            The <see cref="T:System.IFormatProvider"/> that supplies culture specific formatting information.
            </param>
            <returns>A human-readable text representation of the Sphere.</returns>
        </member>
        <member name="M:Atom.Math.Sphere.op_Equality(Atom.Math.Sphere,Atom.Math.Sphere)">
            <summary>
            Determines whether two instances of BoundingSphere are equal.
            </summary>
            <param name="left">The object to the left of the equality operator.</param>
            <param name="right">The object to the right of the equality operator.</param>
            <returns>
            Returns <see langword="true"/> if left is equal to right; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.Sphere.op_Inequality(Atom.Math.Sphere,Atom.Math.Sphere)">
            <summary>
            Determines whether two instances of BoundingSphere are not equal.
            </summary>
            <param name="left">The BoundingSphere to the left of the inequality operator.</param>
            <param name="right">The BoundingSphere to the right of the inequality operator.</param>
            <returns>
            Returns <see langword="true"/> if left is not equal to right; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Atom.Math.Triangle2">
            <summary> 
            Represents a triangle in two dimensional space.
            </summary>
        </member>
        <member name="P:Atom.Math.Triangle2.A">
            <summary>
            Gets or sets the location of point A of the triangle.
            </summary>
            <value>The first point that makes up the triangle.</value>
        </member>
        <member name="P:Atom.Math.Triangle2.B">
            <summary>
            Gets or sets the location of point B of the triangle.
            </summary>
            <value>The second point that makes up the triangle.</value>
        </member>
        <member name="P:Atom.Math.Triangle2.C">
            <summary>
            Gets or sets the location of point C of the triangle.
            </summary>
            <value>The third point that makes up the triangle.</value>
        </member>
        <member name="P:Atom.Math.Triangle2.LineA">
            <summary>
            Gets the line between B and C that is opposite of A.
            </summary>
            <value>The line from B to C.</value>
        </member>
        <member name="P:Atom.Math.Triangle2.LineB">
            <summary>
            Gets the line between C and A that is opposite of B.
            </summary>
            <value>The line from C to A.</value>
        </member>
        <member name="P:Atom.Math.Triangle2.LineC">
            <summary>
            Gets the line between A and B that is opposite of C.
            </summary>
            <value>The line from A to B.</value>
        </member>
        <member name="P:Atom.Math.Triangle2.Alpha">
            <summary>
            Gets the alpha angle (in radians), which is at the A point.
            </summary>
            <value>
            The angle in radians.
            </value>
        </member>
        <member name="P:Atom.Math.Triangle2.Beta">
            <summary>
            Gets the beta angle (in radians), which is at the B point.
            </summary>
            <value>
            The angle in radians.
            </value>
        </member>
        <member name="P:Atom.Math.Triangle2.Gamma">
            <summary>
            Gets the gamma angle (in radians), which is at the C point.
            </summary>
            <value>
            The angle in radians.
            </value>
        </member>
        <member name="P:Atom.Math.Triangle2.TriangleType">
            <summary>
            Gets the type of this <see cref="T:Atom.Math.Triangle2"/>.
            </summary>
            <remarks> 
            This is a quite expensive operation.
            </remarks>
            <value>
            The type of this Triangle.
            </value>
        </member>
        <member name="P:Atom.Math.Triangle2.HeightA">
            <summary>
            Gets the height of the base a.
            </summary>
            <value>The length of the line that goes from point A to line a.</value>
        </member>
        <member name="P:Atom.Math.Triangle2.HeightB">
            <summary>
            Gets the height of the base b.
            </summary>
            <value>The length of the line that goes from point B to line b.</value>
        </member>
        <member name="P:Atom.Math.Triangle2.HeightC">
            <summary>
            Gets the height of the base c.
            </summary>
            <value>The length of the line that goes from point C to line c.</value>
        </member>
        <member name="P:Atom.Math.Triangle2.Area">
            <summary>
            Gets the area of this Triangle2.
            </summary>
            <value>The area of this Triangle2.</value>
        </member>
        <member name="M:Atom.Math.Triangle2.#ctor(Atom.Math.Vector2,Atom.Math.Vector2,Atom.Math.Vector2)">
            <summary>
            Initializes a new instance of the Triangle2 struct.
            </summary>
            <param name="pointA">
            The location of the first point that makes up the new Triangle2.
            </param>
            <param name="pointB">
            The location of the second point that makes up the new Triangle2.
            </param>
            <param name="pointC">
            The location of the third point that makes up the new Triangle2.
            </param>
        </member>
        <member name="M:Atom.Math.Triangle2.ToVertices">
            <summary>
            Converts the triangles represenation into an ordered list of vertices (A, B, C).
            </summary>
            <returns>
            A new array of size three that contains the vertices of this Triangle.
            </returns>
        </member>
        <member name="M:Atom.Math.Triangle2.ToPolygon">
            <summary>
            Converts the triangles represenation into an ordered list of vertices representing a polygon (A, B, C). 
            </summary>
            <returns>
            A polygon with three vertices.
            </returns>
        </member>
        <member name="M:Atom.Math.Triangle2.op_Equality(Atom.Math.Triangle2,Atom.Math.Triangle2)">
            <summary>
            Gets whether all elements of the two specified <see cref="T:Atom.Math.Triangle2"/>s are equal.
            </summary>
            <param name="left"> The <see cref="T:Atom.Math.Triangle2"/> on the left side of the equation. </param>
            <param name="right"> The <see cref="T:Atom.Math.Triangle2"/> on the right side of the equation. </param>
            <returns>
            Returns <see langword="true"/> if all elements are equal;
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.Triangle2.op_Inequality(Atom.Math.Triangle2,Atom.Math.Triangle2)">
            <summary>
            Gets whether any of the elements of the two specified <see cref="T:Atom.Math.Triangle2"/>s are not equal.
            </summary>
            <param name="left"> The <see cref="T:Atom.Math.Triangle2"/> on the left side of the equation. </param>
            <param name="right"> The <see cref="T:Atom.Math.Triangle2"/> on the right side of the equation. </param>
            <returns>
            Returns <see langword="true"/> if any of the elements is not equal equal;
            otherwise <see langword="false"/> if all are equal.
            </returns>
        </member>
        <member name="M:Atom.Math.Triangle2.ToString">
            <summary>
            Gets a human readable representation of this <see cref="T:Atom.Math.Triangle2"/> instance.
            </summary>
            <returns> A string that contains the representation created via the current culture settings. </returns>
        </member>
        <member name="M:Atom.Math.Triangle2.ToString(System.IFormatProvider)">
            <summary>
            Gets a human readable representation of this <see cref="T:Atom.Math.Triangle2"/> instance.
            </summary>
            <param name="formatProvider">
            The <see cref="T:System.IFormatProvider"/> that supplies culture specific formatting information.
            </param>
            <returns> A string that contains the representation created via the current culture settings. </returns>
        </member>
        <member name="M:Atom.Math.Triangle2.Equals(System.Object)">
            <summary>
            Returns whether this <see cref="T:Atom.Math.Triangle2"/> is equal to the specified object.
            </summary>
            <param name="obj"> The object to test against. </param>
            <returns> 
            Returns <see langword="true"/> if they are equal;
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.Triangle2.Equals(Atom.Math.Triangle2)">
            <summary>
            Returns whether this <see cref="T:Atom.Math.Triangle2"/> is equal to the specified <see cref="T:Atom.Math.Triangle2"/>.
            </summary>
            <param name="other"> The triangle to test against. </param>
            <returns> 
            Returns <see langword="true"/> if all elements are equal;
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.Triangle2.GetHashCode">
            <summary>
            Gets the hash code of this <see cref="T:Atom.Math.Triangle2"/> instance.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Atom.Math.Triangle2.IntersectsPoint(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Checks wether a given point is inside a triangle,
            in 2-dimensional (Cartesian) space.
            </summary>
            <remarks>
            The vertices of the triangle must be given in either
            trigonometrical (anticlockwise) or inverse trigonometrical
            (clockwise) order.
            </remarks>
            <param name="pointX">
            The X-coordinate of the point.
            </param>
            <param name="pointY">
            The Y-coordinate of the point.
            </param>
            <param name="trianglePointAx">
            The X-coordinate of the triangle's first vertex.
            </param>
            <param name="trianglePointAy">
            The Y-coordinate of the triangle's first vertex.
            </param>
            <param name="trianglePointBx">
            The X-coordinate of the triangle's second vertex.
            </param>
            <param name="trianglePointBy">
            The Y-coordinate of the triangle's second vertex.
            </param>
            <param name="trianglePointCx">
            The X-coordinate of the triangle's third vertex.
            </param>
            <param name="trianglePointCy">
            The Y-coordinate of the triangle's third vertex.
            </param>
            <returns>
            Returns <see langword="true"/> if the point resides in the triangle;
            or otherwise <see langword="false"/> if the point is outside the triangle.
            </returns>
        </member>
        <member name="F:Atom.Math.Triangle2.a">
            <summary>
            The first point that makes up this Triangle2.
            </summary>
        </member>
        <member name="F:Atom.Math.Triangle2.b">
            <summary>
            The second point that makes up this Triangle2.
            </summary>
        </member>
        <member name="F:Atom.Math.Triangle2.c">
            <summary>
            The third point that makes up this Triangle2.
            </summary>
        </member>
        <member name="T:Atom.Math.TriangleTypes">
            <summary> 
            Enumerates the different types of Triangles. 
            </summary>
        </member>
        <member name="F:Atom.Math.TriangleTypes.None">
            <summary> 
            No type has been specified. 
            </summary>
        </member>
        <member name="F:Atom.Math.TriangleTypes.Equilateral">
            <summary> 
            The triangle is equilateral (de: gleichschenklig) .
            </summary>
        </member>
        <member name="F:Atom.Math.TriangleTypes.Isosceles">
            <summary> 
            The triangle is isosceles (de: gleichseitig). 
            </summary>
        </member>
        <member name="F:Atom.Math.TriangleTypes.Perpendicular">
            <summary>
            The triangle is perpendicular (de: rechtwinklig).  
            </summary>
        </member>
        <member name="F:Atom.Math.TriangleTypes.OptuseAngled">
            <summary>
            The triangle is optuse-angled (de: stumpfwinklig).  
            </summary>
        </member>
        <member name="F:Atom.Math.TriangleTypes.AcuteAngled">
            <summary>
            The triangle is acute-angled (de: spitzwinklig). 
            </summary>
        </member>
        <member name="T:Atom.Math.RandExtensions">
            <summary>
            Provides extension methods for the <see cref="T:Atom.Math.IRand"/> interface.
            </summary>
        </member>
        <member name="M:Atom.Math.RandExtensions.Shuffle``1(System.Collections.Generic.IList{``0},Atom.Math.IRand)">
            <summary>
            Randomly shuffles the specified IList{T}.
            </summary>
            <typeparam name="T">
            The type of the elements in the list.
            </typeparam>
            <param name="list">
            The list to shuffle.
            </param>
            <param name="rand">
            The random number generator to use.
            </param>
        </member>
        <member name="M:Atom.Math.RandExtensions.Select``1(Atom.Math.IRand,System.Collections.Generic.IEnumerable{System.Tuple{System.Single,``0}})">
            <summary>
            Randomly selects one of the specified weighted items;
            where a greater weight increases the chance for an item to be picked.
            </summary>
            <typeparam name="T">
            The type of the items to select from.
            </typeparam>
            <param name="rand">
            The random number generator to use.
            </param>
            <param name="weightedItems">
            The weighted items. The weights don't have to add up to any value.
            </param>
            <returns>
            The item that has been selected;
            or the default value of T if none has been selected.
            </returns>
            <example>
               var titles = new Tuple&lt;float, string&gt;[] {
                   Tuple.Create( 70.0f, "Link" ),
                   Tuple.Create( 30.0f, "Garret" )
               };
               
               string hero = rand.Select( titles );
               
               // 70% chance for hero to be "Link"
               // 30% chance for hero to be "Garret"
            </example>
        </member>
        <member name="M:Atom.Math.RandExtensions.RandomDirection4(Atom.Math.IRand)">
            <summary>
            Gets a random <see cref="T:Atom.Math.Direction4"/>.
            </summary>
            <param name="rand">
            The random number generator to use.
            </param>
            <returns>
            The random <see cref="T:Atom.Math.Direction4"/>, each direction has the same chance to be picked.
            </returns>
        </member>
        <member name="M:Atom.Math.RandExtensions.RandomDirection4But(Atom.Math.IRand,Atom.Math.Direction4)">
            <summary>
            Gets a random <see cref="T:Atom.Math.Direction4"/> that is not the given <paramref name="directionToExclude"/>.
            </summary>
            <param name="rand">
            The random number generator to use.
            </param>
            <param name="directionToExclude">
            The <see cref="T:Atom.Math.Direction4"/> that should not be picked.
            </param>
            <returns>
            The random <see cref="T:Atom.Math.Direction4"/>, each direction has the same chance to be picked.
            </returns>
        </member>
        <member name="M:Atom.Math.RandExtensions.RandomActualDirection4But(Atom.Math.IRand,Atom.Math.Direction4)">
            <summary>
            Gets a random <see cref="T:Atom.Math.Direction4"/> that is not the given <paramref name="directionToExclude"/>
            nor <see cref="F:Atom.Math.Direction4.None"/>.
            </summary>
            <param name="rand">
            The random number generator to use.
            </param>
            <param name="directionToExclude">
            The <see cref="T:Atom.Math.Direction4"/> that should not be picked.
            </param>
            <returns>
            The random <see cref="T:Atom.Math.Direction4"/>, each direction has the same chance to be picked.
            </returns>
        </member>
        <member name="M:Atom.Math.RandExtensions.RandomDirection8(Atom.Math.IRand)">
            <summary>
            Gets a random <see cref="T:Atom.Math.Direction8"/>.
            </summary>
            <param name="rand">
            The random number generator to use.
            </param>
            <returns>
            The random <see cref="T:Atom.Math.Direction8"/>, each direction has the same chance to be picked.
            </returns>
        </member>
        <member name="M:Atom.Math.RandExtensions.RandomDirection8But(Atom.Math.IRand,Atom.Math.Direction8)">
            <summary>
            Gets a random <see cref="T:Atom.Math.Direction8"/> that is not the given <paramref name="directionToExclude"/>.
            </summary>
            <param name="rand">
            The random number generator to use.
            </param>
            <param name="directionToExclude">
            The <see cref="T:Atom.Math.Direction4"/> that should not be picked.
            </param>
            <returns>
            The random <see cref="T:Atom.Math.Direction4"/>, each direction has the same chance to be picked.
            </returns>
        </member>
        <member name="M:Atom.Math.RandExtensions.RandomActualDirection8But(Atom.Math.IRand,Atom.Math.Direction8)">
            <summary>
            Gets a random <see cref="T:Atom.Math.Direction8"/> that is not the given <paramref name="directionToExclude"/> nor <see cref="F:Atom.Math.Direction8.None"/>.
            </summary>
            <param name="rand">
            The random number generator to use.
            </param>
            <param name="directionToExclude">
            The <see cref="T:Atom.Math.Direction4"/> that should not be picked.
            </param>
            <returns>
            The random <see cref="T:Atom.Math.Direction4"/>, each direction has the same chance to be picked.
            </returns>
        </member>
        <member name="M:Atom.Math.RandExtensions.RandomRange(Atom.Math.IRand,Atom.Math.Vector2,Atom.Math.Vector2)">
            <summary>
            Returns a random Vector2 value within the specified range.
            </summary>
            <param name="rand">The random number generator to use.</param>
            <param name="minimumValue"> The lower bound. </param>
            <param name="maximumValue"> The upper bound. </param>
            <returns>
            A random Vector2 greater than or equal to <c>minimumValue</c>, and less than
            or equal to <c>maximumValue</c>. 
            </returns>
        </member>
        <member name="M:Atom.Math.RandExtensions.RandomRange(Atom.Math.IRand,Atom.Math.Vector3,Atom.Math.Vector3)">
            <summary>
            Returns a random Vector3 value within the specified range.
            </summary>
            <param name="rand">The random number generator to use.</param>
            <param name="minimumValue"> The lower bound. </param>
            <param name="maximumValue"> The upper bound. </param>
            <returns>
            A random Vector3 greater than or equal to <c>minimumValue</c>, and less than
            or equal to <c>maximumValue</c>. 
            </returns>
        </member>
        <member name="M:Atom.Math.RandExtensions.RandomRange(Atom.Math.IRand,Atom.Math.Vector4,Atom.Math.Vector4)">
            <summary>
            Returns a random Vector4 value within the specified range.
            </summary>
            <param name="rand">The random number generator to use.</param>
            <param name="minimumValue"> The lower bound. </param>
            <param name="maximumValue"> The upper bound. </param>
            <returns>
            A random Vector4 greater than or equal to <c>minimumValue</c>, and less than
            or equal to <c>maximumValue</c>. 
            </returns>
        </member>
        <member name="T:Atom.Math.RandMT">
            <summary>
            Generates pseudo-random numbers from a uniform distribution
            using the Mersenne Twister algorithm. 
            This class can't be inherited.
            </summary>
            <remarks>
            This is the 32-bit version of the algorithm. 
            </remarks>
        </member>
        <member name="P:Atom.Math.RandMT.IsInitialized">
            <summary>
            Gets a value indicating whether this random number generator has been initialized (seeded).
            </summary>
            <value>
            Returns <see langword="true"/> if it has been initialised; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:Atom.Math.RandMT.RandomBoolean">
            <summary>
            Gets a random boolean state value.
            </summary>
            <value>
            Returns <see langword="true"/> 50% of the time,
            and <see langword="false"/> the other 50%.
            </value>
        </member>
        <member name="P:Atom.Math.RandMT.RandomInteger">
            <summary>
            Gets a random number in the interval [0,0x7fffffff].
            </summary>
            <value>A random integer.</value>
        </member>
        <member name="P:Atom.Math.RandMT.RandomSingle">
            <summary>
            Gets a random number in the interval [0.0, 1.0].
            </summary>
            <value>A random single-precision floating point value.</value>
        </member>
        <member name="P:Atom.Math.RandMT.RandomSingleRes53">
            <summary>
            Gets a random number in the interval [0.0, 1.0) with 53-bit resolution.
            </summary>
            <value>A random single-precision floating point value.</value>
        </member>
        <member name="P:Atom.Math.RandMT.RandomDouble">
            <summary>
            Gets a random number in the interval [0.0, 1.0].
            </summary>
            <value>A random double-precision floating point value.</value>
        </member>
        <member name="P:Atom.Math.RandMT.RandomDoubleRes53">
            <summary>
            Gets a random number in the interval [0.0, 1.0) with 53-bit resolution.
            </summary>
            <value>A random double-precision floating point value.</value>
        </member>
        <member name="P:Atom.Math.RandMT.RandomDecimal">
            <summary>
            Gets a random number in the interval [0.0, 1.0].
            </summary>
            <value>A random decimal value.</value>
        </member>
        <member name="P:Atom.Math.RandMT.RandomDecimalRes53">
            <summary> 
            Gets a random number in the interval [0.0, 1.0) with 53-bit resolution.
            </summary>
            <value>A random decimal value.</value>
        </member>
        <member name="P:Atom.Math.RandMT.RandomUnsignedInteger">
            <summary>
            Gets a random number in the interval [0,0xffffffff].
            Doesn't check if the random number generator has been initialized.
            </summary>
            <remarks>
            This is the main function which is used to generate random numbers.
            </remarks>
            <value>A random unsigned integer.</value>
        </member>
        <member name="M:Atom.Math.RandMT.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.RandMT"/> class;
            by using the time of day in milliseconds as the seed.
            </summary>
        </member>
        <member name="M:Atom.Math.RandMT.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.RandMT"/> class;
            using the given <paramref name="seed"/>.
            </summary>
            <param name="seed">
            The seed used to initialize the pseudo random number generator.
            </param>
        </member>
        <member name="M:Atom.Math.RandMT.#ctor(System.UInt32)">
            <summary> 
            Initializes a new instance of the <see cref="T:Atom.Math.RandMT"/> class;
            using the given <paramref name="seed"/>.
            </summary>
            <param name="seed">
            The seed used to initialize the pseudo random number generator.
            </param>
        </member>
        <member name="M:Atom.Math.RandMT.Seed(System.UInt32)">
            <summary>
            Seeds this <see cref="T:Atom.Math.RandMT"/> using the given <paramref name="value"/>.
            </summary>
            <param name="value">
            The seed used to initialize the pseudo random number generator.
            </param>
        </member>
        <member name="M:Atom.Math.RandMT.Seed(System.Int32)">
            <summary>
            Seeds this <see cref="T:Atom.Math.RandMT"/> using the given <paramref name="value"/>.
            </summary>
            <param name="value">
            The seed used to initialize the pseudo random number generator.
            </param>
        </member>
        <member name="F:Atom.Math.RandMT.N">
            <summary>
            The size of the internal state array (624).
            </summary>
        </member>
        <member name="F:Atom.Math.RandMT.Nmin1">
            <summary>
            The size of the internal state array, minus one (623).
            </summary>
        </member>
        <member name="F:Atom.Math.RandMT.M">
            <summary>
            A constant that is used to index into the internal state array (397).
            </summary>
        </member>
        <member name="F:Atom.Math.RandMT.Mmin1">
            <summary>
            The <see cref="F:Atom.Math.RandMT.M"/> constant, minus one (396).
            </summary>
        </member>
        <member name="F:Atom.Math.RandMT.NminM">
            <summary>
            The <see cref="F:Atom.Math.RandMT.N"/> constant minus the <see cref="F:Atom.Math.RandMT.M"/> constant (624 - 397).
            </summary>
        </member>
        <member name="F:Atom.Math.RandMT.MminN">
            <summary>
            The <see cref="F:Atom.Math.RandMT.M"/> constant minus the <see cref="F:Atom.Math.RandMT.N"/> constant (397 - 624).
            </summary>
        </member>
        <member name="F:Atom.Math.RandMT.UpperMask">
            <summary>
            The upper mask constant (0x80000000U).
            </summary>
        </member>
        <member name="F:Atom.Math.RandMT.LowerMask">
            <summary>
            The lower mask constant (0x7fffffffU).
            </summary>
        </member>
        <member name="F:Atom.Math.RandMT.MaxRandomInt">
            <summary>
            The maximum random integer that can be created (0x7fffffff).
            </summary>
        </member>
        <member name="F:Atom.Math.RandMT.mag01">
            <summary>
            Stores the range of generated values.
            mag01[x] = x * MATRIX_A. for x = 0,1.
            </summary>
        </member>
        <member name="F:Atom.Math.RandMT.mt">
            <summary>
            The state point array.
            </summary>
        </member>
        <member name="F:Atom.Math.RandMT.mti">
            <summary>
            If mti==N+1 then that means that mt[N] has not yet been initialized.
            </summary>
        </member>
        <member name="T:Atom.Math.RandSys">
            <summary>
            Defines a pseudo-random number generator that delgates 
            all request to a <see cref="T:System.Random"/> object.
            This class can't be inherited.
            </summary>
        </member>
        <member name="P:Atom.Math.RandSys.RandomBoolean">
            <summary>
            Gets a random boolean state value.
            </summary>
            <value>
            Returns <see langword="true"/> 50% of the time,
            and <see langword="false"/> the other 50%.
            </value>
        </member>
        <member name="P:Atom.Math.RandSys.RandomInteger">
            <summary>
            Gets a random number in the interval [0,0x7fffffff].
            </summary>
            <value>A random integer.</value>
        </member>
        <member name="P:Atom.Math.RandSys.RandomSingle">
            <summary>
            Gets a random number in the interval [0.0, 1.0].
            </summary>
            <value>A random single-precision floating point value.</value>
        </member>
        <member name="P:Atom.Math.RandSys.RandomDouble">
            <summary>
            Gets a random number in the interval [0.0, 1.0].
            </summary>
            <value>A random double-precision floating point value.</value>
        </member>
        <member name="P:Atom.Math.RandSys.RandomDecimal">
            <summary>
            Gets a random number in the interval [0.0, 1.0].
            </summary>
            <value>A random decimal value.</value>
        </member>
        <member name="M:Atom.Math.RandSys.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.RandSys"/> class;
            using the time of day in milliseconds as the seed.
            </summary>
        </member>
        <member name="M:Atom.Math.RandSys.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.RandSys"/> class; using the given <paramref name="seed"/>.
            </summary>
            <param name="seed">
            A number used to calculate a starting value for the pseudo-random number
            sequence. If a negative number is specified, the absolute value of the number
            is used.
            </param>
        </member>
        <member name="F:Atom.Math.RandSys.random">
            <summary>
            The System.Random object this <see cref="T:Atom.Math.RandSys"/> is wrapping around.
            </summary>
        </member>
        <member name="T:Atom.Math.Ray2">
            <summary> 
            Represents a ray in 2D space.
            A ray is a line that has a start-point but no end-point.
            </summary>
            <remarks>
            Any point on the ray can be represented using the
            parametic line equation:
            p = Origin + t * Distance; where t >= 0.
            </remarks>
        </member>
        <member name="F:Atom.Math.Ray2.Origin">
            <summary>
            The orgin of this <see cref="T:Atom.Math.Ray2"/>.
            </summary>
        </member>
        <member name="F:Atom.Math.Ray2.Direction">
            <summary>
            The direction of this <see cref="T:Atom.Math.Ray2"/>.
            </summary>
        </member>
        <member name="M:Atom.Math.Ray2.#ctor(Atom.Math.Vector2,Atom.Math.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.Ray2"/> struct;
            using given origin and direction vectors.
            </summary>
            <param name="origin">
            The new Ray2's origin point.
            </param>
            <param name="direction">
            The new Ray2's direction vector.
            </param>
        </member>
        <member name="M:Atom.Math.Ray2.#ctor(Atom.Math.Ray2)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.Ray2"/> struct;
            using the data from the specified <see cref="T:Atom.Math.Ray2"/>.
            </summary>
            <param name="ray">The <see cref="T:Atom.Math.Ray2"/> instance to copy values from. </param>
        </member>
        <member name="M:Atom.Math.Ray2.DistanceTo(Atom.Math.Vector2)">
            <summary>
            Calculates the distance between this 
            <see cref="T:Atom.Math.Ray3"/> and the given <paramref name="point"/>.
            </summary>
            <param name="point">A <see cref="T:Atom.Math.Vector2"/> instance.</param>
            <returns>
            The distance between this <see cref="T:Atom.Math.Ray3"/> and the given <paramref name="point"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.Ray2.SquaredDistanceTo(Atom.Math.Vector2)">
            <summary>
            Calculates the squared distance between this 
            <see cref="T:Atom.Math.Ray3"/> and the given <paramref name="point"/>.
            </summary>
            <param name="point">A <see cref="T:Atom.Math.Vector2"/> instance.</param>
            <returns>
            The squared distance between this <see cref="T:Atom.Math.Ray3"/> and the given <paramref name="point"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.Ray2.GetPointOnRay(System.Single)">
            <summary> 
            Gets a point on this <see cref="T:Atom.Math.Ray3"/>. 
            </summary>
            <param name="time">
            The amount to travel on the ray.
            </param>
            <returns>
            A point along the ray.
            </returns>
        </member>
        <member name="M:Atom.Math.Ray2.GetHashCode">
            <summary>
            Get the hashcode for this <see cref="T:Atom.Math.Ray2"/> instance.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Atom.Math.Ray2.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this <see cref="T:Atom.Math.Ray2"/> instance is equal to
            the specified <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">An object to compare to this instance.</param>
            <returns>
            Returns <see langword="true"/> if <paramref name="obj"/> is a <see cref="T:Atom.Math.Ray2"/> and
            has the same values as this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.Ray2.Equals(Atom.Math.Ray2)">
            <summary>
            Returns a value indicating whether this <see cref="T:Atom.Math.Ray2"/> is equal to
            the specified <see cref="T:Atom.Math.Ray2"/>.
            </summary>
            <param name="other">The Ray2 instnace to compare to this instance.</param>
            <returns>
            Returns <see langword="true"/> if <paramref name="other"/> has the same values as this instance;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.Ray2.ToString">
            <summary>
            Overriden to return a human-readable text representation of the Ray2.
            </summary>
            <returns>A human-readable text representation of the Ray2.</returns>
        </member>
        <member name="M:Atom.Math.Ray2.ToString(System.IFormatProvider)">
            <summary>
            Returns a human-readable text representation of the Ray2.
            </summary>
            <param name="formatProvider">
            The <see cref="T:System.IFormatProvider"/> that supplies culture specific formatting information.
            </param>
            <returns>A human-readable text representation of the Ray2.</returns>
        </member>
        <member name="M:Atom.Math.Ray2.op_Equality(Atom.Math.Ray2,Atom.Math.Ray2)">
            <summary>
            Determines whether the two specified rays are equal.
            </summary>
            <param name="left">The first of two rays to compare.</param>
            <param name="right">The second of two rays to compare.</param>
            <returns>
            Returns <see langword="true"/> if the two rays are equal; 
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.Ray2.op_Inequality(Atom.Math.Ray2,Atom.Math.Ray2)">
            <summary>
            Determines whether the two specified rays are not equal.
            </summary>
            <param name="left">The first of two rays to compare.</param>
            <param name="right">The second of two rays to compare.</param>
            <returns>
            Returns <see langword="true"/> if the two rays are not equal;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Atom.Math.Ray3">
            <summary>
            Defines a ray in 3D space.
            A ray is a line that has a start-point but no end-point.
            </summary>
            <remarks>
            Any point on the ray can be represented using the
            parametic line equation:
            p = Origin + t * Distance; where t >= 0.
            </remarks>
        </member>
        <member name="F:Atom.Math.Ray3.Origin">
            <summary>
            Specifies the starting point of this <see cref="T:Atom.Math.Ray3"/>.
            </summary>
        </member>
        <member name="F:Atom.Math.Ray3.Direction">
            <summary>
            Unit point specifying the direction this <see cref="T:Atom.Math.Ray3"/> is pointing.
            </summary>
        </member>
        <member name="M:Atom.Math.Ray3.#ctor(Atom.Math.Vector3,Atom.Math.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.Ray3"/> struct.
            </summary>
            <param name="origin">
            The starting point of the new Ray3.
            </param>
            <param name="direction">
            Unit point describing the direction of the new Ray3.
            </param>
        </member>
        <member name="M:Atom.Math.Ray3.Intersects(Atom.Math.Plane3)">
            <summary>
            Determines whether this Ray3 intersects a specified Plane.
            </summary>
            <param name="plane">The Plane with which to calculate this Ray3's intersection.</param>
            <returns>
            The distance at which this Ray3 intersects the specified Plane, or null if there is no intersection.
            </returns>
        </member>
        <member name="M:Atom.Math.Ray3.Intersects(Atom.Math.Plane3@,System.Nullable{System.Single}@)">
            <summary>
            Determines whether this Ray3 intersects a specified Plane.
            </summary>
            <param name="plane">The Plane with which to calculate this Ray3's intersection.</param>
            <param name="result">The distance at which this Ray3 intersects the specified Plane, or null if there is no intersection.</param>
        </member>
        <member name="M:Atom.Math.Ray3.Intersects(Atom.Math.Sphere)">
            <summary>
            Checks whether this <see cref="T:Atom.Math.Ray3"/> intersects the specified <see cref="T:Atom.Math.Sphere"/>.
            </summary>
            <param name="sphere">
            The Sphere to check for intersection with the Ray3.
            </param>
            <returns>
            The distance at which the Ray3 intersects the Sphere or null if there is no intersection.
            </returns>
        </member>
        <member name="M:Atom.Math.Ray3.Intersects(Atom.Math.Sphere@,System.Nullable{System.Single}@)">
            <summary>
            Checks whether this <see cref="T:Atom.Math.Ray3"/> intersects the specified <see cref="T:Atom.Math.Sphere"/>.
            </summary>
            <param name="sphere">
            The Sphere to check for intersection with the Ray3.
            </param>
            <param name="result">
            Will contain the distance at which the Ray3 intersects the Sphere or null if there is no intersection.
            </param>
        </member>
        <member name="M:Atom.Math.Ray3.Intersects(Atom.Math.Box)">
            <summary>
            Checks whether this <see cref="T:Atom.Math.Ray3"/> intersects a specified Box.
            </summary>
            <param name="box">The Box to check for intersection with the Ray3.</param>
            <returns>
            The distance at which the Ray3 intersects the Box or null if there is no intersection.
            </returns>
        </member>
        <member name="M:Atom.Math.Ray3.Intersects(Atom.Math.Box@,System.Nullable{System.Single}@)">
            <summary>
            Checks whether this <see cref="T:Atom.Math.Ray3"/> intersects a Box.
            </summary>
            <param name="box">
            The Box to check for intersection with.
            </param>
            <param name="result">
            Will contain the distance at which the Ray3 intersects the <see cref="T:Atom.Math.Box"/> 
            or null if there is no intersection.
            </param>
        </member>
        <member name="M:Atom.Math.Ray3.Equals(System.Object)">
            <summary>
            Determines whether two instances of Ray3 are equal.
            </summary>
            <param name="obj">The System.Object to compare with the current Ray3.</param>
            <returns>true if the specified System.Object is equal to the current Ray3; false otherwise.
            </returns>
        </member>
        <member name="M:Atom.Math.Ray3.Equals(Atom.Math.Ray3)">
            <summary>
            Determines whether the specified Ray3 is equal to the current Ray3.
            </summary>
            <param name="other">The Ray3 to compare with the current Ray3.</param>
            <returns>true if the specified Ray3 is equal to the current Ray3; false otherwise.
            </returns>
        </member>
        <member name="M:Atom.Math.Ray3.GetHashCode">
            <summary>Gets the hash code for this instance.</summary>
            <returns>
            A hash code for the current Ray3.
            </returns>
        </member>
        <member name="M:Atom.Math.Ray3.ToString">
            <summary>
            Returns a human-readable text representation of the Ray3.
            </summary>
            <returns>A human-readable text representation of the Ray3.</returns>
        </member>
        <member name="M:Atom.Math.Ray3.ToString(System.IFormatProvider)">
            <summary>
            Returns a human-readable text representation of the Ray3.
            </summary>
            <param name="formatProvider">
            The <see cref="T:System.IFormatProvider"/> that supplies culture specific formatting information.
            </param>
            <returns>A human-readable text representation of the Ray3.</returns>
        </member>
        <member name="M:Atom.Math.Ray3.op_Equality(Atom.Math.Ray3,Atom.Math.Ray3)">
            <summary>
            Determines whether two instances of Ray3 are equal.
            </summary>
            <param name="left">The object to the left of the equality operator.</param>
            <param name="right">The object to the right of the equality operator.</param>
            <returns>
            Returns <see langword="true"/> if left is equal to right;
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.Ray3.op_Inequality(Atom.Math.Ray3,Atom.Math.Ray3)">
            <summary>
            Determines whether two instances of Ray3 are not equal.
            </summary>
            <param name="left">The object to the left of the inequality operator.</param>
            <param name="right">The object to the right of the inequality operator.</param>
            <returns>
            Returns <see langword="true"/> if left is not equal to right; 
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Atom.Math.RollingAverage">
            <summary>
            Helpts in averaging out a stream of floating-point values.
            </summary>
            <remarks>
            Microsoft XNA Community Game Platform
            Copyright (C) Microsoft Corporation. All rights reserved.
            <para/>
            To compensate for network latency, we need to know exactly how late each
            packet is. Trouble is, there is no guarantee that the clock will be set the
            same on every machine! The sender can include packet data indicating what
            time their clock showed when they sent the packet, but this is meaningless
            unless our local clock is in sync with theirs. To compensate for any clock
            skew, we maintain a rolling average of the send times from the last 100
            incoming packets. If this average is, say, 50 milliseconds, but one specific
            packet arrives with a time difference of 70 milliseconds, we can deduce this
            particular packet was delivered 20 milliseconds later than usual.
            </remarks>
        </member>
        <member name="P:Atom.Math.RollingAverage.AverageValue">
            <summary>
            Gets the current value of the rolling average.
            </summary>
        </member>
        <member name="M:Atom.Math.RollingAverage.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the RollingAverage class.
            </summary>
        </member>
        <member name="M:Atom.Math.RollingAverage.AddValue(System.Single)">
            <summary>
            Adds a new value to the rolling average, automatically
            replacing the oldest existing entry.
            </summary>
        </member>
        <member name="T:Atom.Math.PositionalSpline3">
            <summary>
            A Catmull-Rom spline that can be used for interpolating translation movements in 3 dimensional space.
            </summary>
            <remarks>
            <para>
            A Catmull-Rom spline is a derivitive of the Hermite spline. The difference is that the Hermite spline
            allows you to specifiy 2 endpoints and 2 tangents, then the spline is generated. A Catmull-Rom spline
            allows you to just supply 1-n number of points and the tangents will be automatically calculated.
            </para><para>
            Derivation of the hermite polynomial can be found here:
            <a href="http://www.cs.unc.edu/~hoff/projects/comp236/curves/papers/hermite.html">Hermite splines.</a>
            </para>
            </remarks>
        </member>
        <member name="P:Atom.Math.PositionalSpline3.AutoCalculate">
            <summary>
            Gets or sets a value indicating whether the tangents are automatically
            recalculated when a new control point is added.
            </summary>
            <value>
            When <see langword="true"/> the tangents are automatically
            recalculated when a control point is added or removed.
            This property may be set to <see langword="false"/> for perfomance reasons.
            </value>
        </member>
        <member name="P:Atom.Math.PositionalSpline3.PointCount">
            <summary>
            Gets the number of control points in thisPositionalSpline3.
            </summary>
            <value>The number of control this.points.</value>
        </member>
        <member name="M:Atom.Math.PositionalSpline3.AddPoint(Atom.Math.Vector3)">
            <summary>
            Adds a new control point to the end of thisPositionalSpline3.
            </summary>
            <param name="point"> The point to add. </param>
        </member>
        <member name="M:Atom.Math.PositionalSpline3.Clear">
            <summary>
            Removes all current control points from thisPositionalSpline3.
            </summary>
        </member>
        <member name="M:Atom.Math.PositionalSpline3.GetPoint(System.Int32)">
            <summary>
            Gets the control point at the specified <paramref name="index"/>.
            </summary>
            <param name="index">Index at which to retreive a point.</param>
            <returns>The Vector3 containing the point data. </returns>
        </member>
        <member name="M:Atom.Math.PositionalSpline3.Interpolate(System.Single)">
            <summary>
            Returns an interpolated point based on a parametric value over the whole series.
            </summary>
            <param name="distanceOnSpline">
            A value between 0 and 1 representing the parametric distance along the
            whole length of the spline, this method returns an interpolated point.
            </param>
            <returns>An interpolated point along the spline.</returns>
        </member>
        <member name="M:Atom.Math.PositionalSpline3.Interpolate(System.Int32,System.Single)">
            <summary>
            Interpolates a single segment of the spline given a parametric value.
            </summary>
            <param name="segmentIndex">
            The point index to treat as t=0. segmentIndex + 1 is deemed to be index=1.
            </param>
            <param name="distanceOnSpline">
            The parametric input value.
            </param>
            <returns>
            An interpolated point along the spline.
            </returns>
        </member>
        <member name="M:Atom.Math.PositionalSpline3.RecalculateTangents">
            <summary>
            Recalculates the tangents associated with this spline.
            </summary>
            <remarks>
            If you tell the spline not to update on demand by setting AutoCalculate to false,
            then you must call this after completing your updates to the spline this.points.
            </remarks>
        </member>
        <member name="F:Atom.Math.PositionalSpline3.points">
            <summary>
            The collection of control this.points.
            </summary>
        </member>
        <member name="F:Atom.Math.PositionalSpline3.tangents">
            <summary>
            The collection of generated tangents for the spline controls this.points.
            </summary>
        </member>
        <member name="F:Atom.Math.PositionalSpline3.HermitePoly">
            <summary>
            The hermit poly constant matrix.
            </summary>
        </member>
        <member name="T:Atom.Math.RotationalSpline3">
            <summary>
            A class used to interpolate orientations (rotations) along a spline
            using derivatives of quaternions.
            </summary>
            <remarks>
            <para>
            Like the <see cref="T:Atom.Math.PositionalSpline3"/> class, this class is about interpolating values smoothly over a spline.
            Whilst <see cref="T:Atom.Math.PositionalSpline3"/> deals with positions (the normal sense we think about splines),
            this class interpolates orientations.
            The theory is identical, except we're now in 4-dimensional space instead of 3.
            </para><para>
            In positional splines, we use the points and tangents on those points to generate
            control points for the spline. In this case, we use quaternions and derivatives
            of the quaternions (i.e. the rate and direction of change at each point). This is the
            same as PositionalSpline since a tangent is a derivative of a position. 
            We effectively generate an extra quaternion in between each actual quaternion 
            which when take with the original quaternion forms the 'tangent' of that quaternion.
            </para>
            </remarks>
        </member>
        <member name="P:Atom.Math.RotationalSpline3.AutoCalculate">
            <summary>
            Gets or sets a value indicating whether the tangents 
            are automatically recalculated when a control point is added or removed.
            </summary>
            <value>
            When <see langword="true"/> the tangents are automatically
            recalculated when a control point is added or removed.
            This property may be set to <see langword="false"/> for perfomance reasons.
            </value>
        </member>
        <member name="P:Atom.Math.RotationalSpline3.PointCount">
            <summary>
            Gets the number of control points in this <see cref="T:Atom.Math.RotationalSpline3"/>.
            </summary>
            <value>The number of control points.</value>
        </member>
        <member name="M:Atom.Math.RotationalSpline3.AddPoint(Atom.Math.Quaternion)">
            <summary>
            Adds a control point to the end of the <see cref="T:Atom.Math.RotationalSpline3"/>.
            </summary>
            <param name="point"> The control point to add. </param>
        </member>
        <member name="M:Atom.Math.RotationalSpline3.Clear">
            <summary>
            Removes all control points from this <see cref="T:Atom.Math.RotationalSpline3"/>.
            </summary>
        </member>
        <member name="M:Atom.Math.RotationalSpline3.Interpolate(System.Single)">
            <summary>
            Returns an interpolated point based on a parametric value over the whole series.
            </summary>
            <param name="distanceAlongSpline">
            A value between 0 and 1 representing the parametric distance along the
            whole length of the spline.
            </param>
            <returns>
            An interpolated point along the spline.
            </returns>
        </member>
        <member name="M:Atom.Math.RotationalSpline3.Interpolate(System.Int32,System.Single)">
            <summary>
            Returns an interpolated point based on a parametric value over the whole series.
            </summary>
            <param name="index">
            The point index to treat as t=0. index + 1 is deemed to be distanceAlongSpline=1.
            </param>
            <param name="distanceAlongSpline">
            A value between 0 and 1 representing the parametric distance along the
            whole length of the spline.
            </param>
            <returns>
            An interpolated point along the spline.
            </returns>
        </member>
        <member name="M:Atom.Math.RotationalSpline3.Interpolate(System.Single,System.Boolean)">
            <summary>
            Returns an interpolated point based on a parametric value over the whole series.
            </summary>
            <param name="distanceAlongSpline">
            A value between 0 and 1 representing the parametric distance along the
            whole length of the spline.
            </param>
            <param name="useShortestPath">
            True forces rotations to use the shortest path.
            </param>
            <returns>
            An interpolated point along the spline.
            </returns>
        </member>
        <member name="M:Atom.Math.RotationalSpline3.Interpolate(System.Int32,System.Single,System.Boolean)">
            <summary>
            Interpolates a single segment of the spline given a parametric value.
            </summary>
            <param name="index">
            The point index to treat as t=0. index + 1 is deemed to be distanceAlongSpline=1.
            </param>
            <param name="distanceAlongSpline">
            The parametric input value.
            </param>
            <param name="useShortestPath">
            States whether the spline should take the shortest path between two control points.
            </param>
            <returns>
            An interpolated point along the spline.
            </returns>
        </member>
        <member name="M:Atom.Math.RotationalSpline3.RecalculateTangents">
            <summary>
            Recalculates the tangents associated with this spline.
            </summary>
            <remarks>
            If you tell the spline not to update on demand by setting AutoCalculate to false,
            then you must call this after completing your updates to the spline points.
            </remarks>
        </member>
        <member name="F:Atom.Math.RotationalSpline3.points">
            <summary>
            The list of control points.
            </summary>
        </member>
        <member name="F:Atom.Math.RotationalSpline3.tangents">
            <summary>
            The list of generated tangents for the spline controls points.
            </summary>
        </member>
        <member name="T:Atom.Math.MathDeserializationContextExtensions">
            <summary>
            Defines extension methods that allow serialization of Atom.Math types using the <see cref="T:Atom.Storage.IDeserializationContext"/> class.
            </summary>
        </member>
        <member name="M:Atom.Math.MathDeserializationContextExtensions.ReadPoint2(Atom.Storage.IDeserializationContext)">
            <summary>
            Reads a <see cref="T:Atom.Math.Point2"/> value.
            </summary>
            <param name="context">
            The context to read with.
            </param>
            <returns>
            The Point2 value that has been read.
            </returns>
        </member>
        <member name="M:Atom.Math.MathDeserializationContextExtensions.ReadPoint3(Atom.Storage.IDeserializationContext)">
            <summary>
            Reads a <see cref="T:Atom.Math.Point3"/> value.
            </summary>
            <param name="context">
            The context to read with.
            </param>
            <returns>
            The Point3 value that has been read.
            </returns>
        </member>
        <member name="M:Atom.Math.MathDeserializationContextExtensions.ReadPoint4(Atom.Storage.IDeserializationContext)">
            <summary>
            Reads a <see cref="T:Atom.Math.Point4"/> value.
            </summary>
            <param name="context">
            The context to read with.
            </param>
            <returns>
            The Point4 value that has been read.
            </returns>
        </member>
        <member name="M:Atom.Math.MathDeserializationContextExtensions.ReadVector2(Atom.Storage.IDeserializationContext)">
            <summary>
            Reads a <see cref="T:Atom.Math.Vector2"/> value.
            </summary>
            <param name="context">
            The context to read with.
            </param>
            <returns>
            The Vector2 value that has been read.
            </returns>
        </member>
        <member name="M:Atom.Math.MathDeserializationContextExtensions.ReadVector3(Atom.Storage.IDeserializationContext)">
            <summary>
            Reads a <see cref="T:Atom.Math.Vector3"/> value.
            </summary>
            <param name="context">
            The context to read with.
            </param>
            <returns>
            The Vector3 value that has been read.
            </returns>
        </member>
        <member name="M:Atom.Math.MathDeserializationContextExtensions.ReadVector4(Atom.Storage.IDeserializationContext)">
            <summary>
            Reads a <see cref="T:Atom.Math.Vector4"/> value.
            </summary>
            <param name="context">
            The context to read with.
            </param>
            <returns>
            The Vector4 value that has been read.
            </returns>
        </member>
        <member name="M:Atom.Math.MathDeserializationContextExtensions.ReadComplexVector2(Atom.Storage.IDeserializationContext)">
            <summary>
            Reads a <see cref="T:Atom.Math.ComplexVector2"/> value.
            </summary>
            <param name="context">
            The context to read with.
            </param>
            <returns>
            The ComplexVector2 value that has been read.
            </returns>
        </member>
        <member name="M:Atom.Math.MathDeserializationContextExtensions.ReadVector(Atom.Storage.IDeserializationContext)">
            <summary>
            Reads a <see cref="T:Atom.Math.Vector"/> value.
            </summary>
            <param name="context">
            The context to read with.
            </param>
            <returns>
            The Vector value that has been read.
            </returns>
        </member>
        <member name="M:Atom.Math.MathDeserializationContextExtensions.ReadComplexVector(Atom.Storage.IDeserializationContext)">
            <summary>
            Reads a <see cref="T:Atom.Math.ComplexVector"/> value.
            </summary>
            <param name="context">
            The context to read with.
            </param>
            <returns>
            The ComplexVector value that has been read.
            </returns>
        </member>
        <member name="M:Atom.Math.MathDeserializationContextExtensions.ReadRectangle(Atom.Storage.IDeserializationContext)">
            <summary>
            Reads a <see cref="T:Atom.Math.Rectangle"/> value.
            </summary>
            <param name="context">
            The context to read with.
            </param>
            <returns>
            The Rectangle value that has been read.
            </returns>
        </member>
        <member name="M:Atom.Math.MathDeserializationContextExtensions.ReadRectangleF(Atom.Storage.IDeserializationContext)">
            <summary>
            Reads a <see cref="T:Atom.Math.RectangleF"/> value.
            </summary>
            <param name="context">
            The context to read with.
            </param>
            <returns>
            The RectangleF value that has been read.
            </returns>
        </member>
        <member name="M:Atom.Math.MathDeserializationContextExtensions.ReadMatrix2(Atom.Storage.IDeserializationContext)">
            <summary>
            Reads a <see cref="T:Atom.Math.Matrix2"/> value.
            </summary>
            <param name="context">
            The context to read with.
            </param>
            <returns>
            The Matrix2 value that has been read.
            </returns>
        </member>
        <member name="M:Atom.Math.MathDeserializationContextExtensions.ReadMatrix3(Atom.Storage.IDeserializationContext)">
            <summary>
            Reads a <see cref="T:Atom.Math.Matrix3"/> value.
            </summary>
            <param name="context">
            The context to read with.
            </param>
            <returns>
            The Matrix3 value that has been read.
            </returns>
        </member>
        <member name="M:Atom.Math.MathDeserializationContextExtensions.ReadMatrix4(Atom.Storage.IDeserializationContext)">
            <summary>
            Reads a <see cref="T:Atom.Math.Matrix4"/> value.
            </summary>
            <param name="context">
            The context to read with.
            </param>
            <returns>
            The Matrix4 value that has been read.
            </returns>
        </member>
        <member name="M:Atom.Math.MathDeserializationContextExtensions.ReadMatrix(Atom.Storage.IDeserializationContext)">
            <summary>
            Reads a <see cref="T:Atom.Math.Matrix"/> value.
            </summary>
            <param name="context">
            The context to read with.
            </param>
            <returns>
            The Matrix value that has been read.
            </returns>
        </member>
        <member name="M:Atom.Math.MathDeserializationContextExtensions.ReadComplexMatrix(Atom.Storage.IDeserializationContext)">
            <summary>
            Reads a <see cref="T:Atom.Math.ComplexMatrix"/> value.
            </summary>
            <param name="context">
            The context to read with.
            </param>
            <returns>
            The ComplexMatrix value that has been read.
            </returns>
        </member>
        <member name="M:Atom.Math.MathDeserializationContextExtensions.ReadComplex(Atom.Storage.IDeserializationContext)">
            <summary>
            Reads a <see cref="T:Atom.Math.Complex"/> value.
            </summary>
            <param name="context">
            The context to read with.
            </param>
            <returns>
            The Complex value that has been read.
            </returns>
        </member>
        <member name="M:Atom.Math.MathDeserializationContextExtensions.ReadCircle(Atom.Storage.IDeserializationContext)">
            <summary>
            Reads a <see cref="T:Atom.Math.Circle"/> value.
            </summary>
            <param name="context">
            The context to read with.
            </param>
            <returns>
            The Circle value that has been read.
            </returns>
        </member>
        <member name="M:Atom.Math.MathDeserializationContextExtensions.ReadRay2(Atom.Storage.IDeserializationContext)">
            <summary>
            Reads a <see cref="T:Atom.Math.Ray2"/> value.
            </summary>
            <param name="context">
            The context to read with.
            </param>
            <returns>
            The Ray2 value that has been read.
            </returns>
        </member>
        <member name="M:Atom.Math.MathDeserializationContextExtensions.ReadRay3(Atom.Storage.IDeserializationContext)">
            <summary>
            Reads a <see cref="T:Atom.Math.Ray3"/> value.
            </summary>
            <param name="context">
            The context to read with.
            </param>
            <returns>
            The Ray3 value that has been read.
            </returns>
        </member>
        <member name="M:Atom.Math.MathDeserializationContextExtensions.ReadPlane3(Atom.Storage.IDeserializationContext)">
            <summary>
            Reads a <see cref="T:Atom.Math.Plane3"/> value.
            </summary>
            <param name="context">
            The context to read with.
            </param>
            <returns>
            The Plane3 value that has been read.
            </returns>
        </member>
        <member name="M:Atom.Math.MathDeserializationContextExtensions.ReadFloatRange(Atom.Storage.IDeserializationContext)">
            <summary>
            Reads a <see cref="T:Atom.Math.FloatRange"/> value.
            </summary>
            <param name="context">
            The context to read with.
            </param>
            <returns>
            The FloatRange value that has been read.
            </returns>
        </member>
        <member name="M:Atom.Math.MathDeserializationContextExtensions.ReadIntegerRange(Atom.Storage.IDeserializationContext)">
            <summary>
            Reads a <see cref="T:Atom.Math.IntegerRange"/> value.
            </summary>
            <param name="context">
            The context to read with.
            </param>
            <returns>
            The IntegerRange value that has been read.
            </returns>
        </member>
        <member name="M:Atom.Math.MathDeserializationContextExtensions.ReadVariableFloat(Atom.Storage.IDeserializationContext)">
            <summary>
            Reads a <see cref="T:Atom.Math.VariableFloat"/> value.
            </summary>
            <param name="context">
            The context to read with.
            </param>
            <returns>
            The VariableFloat value that has been read.
            </returns>
        </member>
        <member name="M:Atom.Math.MathDeserializationContextExtensions.ReadTriangle2(Atom.Storage.IDeserializationContext)">
            <summary>
            Reads a <see cref="T:Atom.Math.Triangle2"/> value.
            </summary>
            <param name="context">
            The context to read with.
            </param>
            <returns>
            The Triangle2 value that has been read.
            </returns>
        </member>
        <member name="M:Atom.Math.MathDeserializationContextExtensions.ReadQuaternion(Atom.Storage.IDeserializationContext)">
            <summary>
            Reads a <see cref="T:Atom.Math.Quaternion"/> value.
            </summary>
            <param name="context">
            The context to read with.
            </param>
            <returns>
            The Quaternion value that has been read.
            </returns>
        </member>
        <member name="T:Atom.Math.MathSerializationContextExtensions">
            <summary>
            Defines extension methods that allow serialization of Atom.Math types using the <see cref="T:Atom.Storage.ISerializationContext"/> class.
            </summary>
        </member>
        <member name="M:Atom.Math.MathSerializationContextExtensions.Write(Atom.Storage.ISerializationContext,Atom.Math.Point2)">
            <summary>
            Writes/Serializes the given <see cref="T:Atom.Math.Point2"/> using this ISerializationContext.
            </summary>
            <param name="context">
            The context to write with.
            </param>
            <param name="point">
            The value to write.
            </param>
        </member>
        <member name="M:Atom.Math.MathSerializationContextExtensions.Write(Atom.Storage.ISerializationContext,Atom.Math.Point3)">
            <summary>
            Writes/Serializes the given <see cref="T:Atom.Math.Point3"/> using this ISerializationContext.
            </summary>
            <param name="context">
            The context to write with.
            </param>
            <param name="point">
            The value to write.
            </param>
        </member>
        <member name="M:Atom.Math.MathSerializationContextExtensions.Write(Atom.Storage.ISerializationContext,Atom.Math.Point4)">
            <summary>
            Writes/Serializes the given <see cref="T:Atom.Math.Point4"/> using this ISerializationContext.
            </summary>
            <param name="context">
            The context to write with.
            </param>
            <param name="point">
            The value to write.
            </param>
        </member>
        <member name="M:Atom.Math.MathSerializationContextExtensions.Write(Atom.Storage.ISerializationContext,Atom.Math.Vector2)">
            <summary>
            Writes/Serializes the given <see cref="T:Atom.Math.Vector2"/> using this ISerializationContext.
            </summary>
            <param name="context">
            The context to write with.
            </param>
            <param name="vector">
            The value to write.
            </param>
        </member>
        <member name="M:Atom.Math.MathSerializationContextExtensions.Write(Atom.Storage.ISerializationContext,Atom.Math.Vector3)">
            <summary>
            Writes/Serializes the given <see cref="T:Atom.Math.Vector3"/> using this ISerializationContext.
            </summary>
            <param name="context">
            The context to write with.
            </param>
            <param name="vector">
            The value to write.
            </param>
        </member>
        <member name="M:Atom.Math.MathSerializationContextExtensions.Write(Atom.Storage.ISerializationContext,Atom.Math.Vector4)">
            <summary>
            Writes/Serializes the given <see cref="T:Atom.Math.Vector4"/> using this ISerializationContext.
            </summary>
            <param name="context">
            The context to write with.
            </param>
            <param name="vector">
            The value to write.
            </param>
        </member>
        <member name="M:Atom.Math.MathSerializationContextExtensions.Write(Atom.Storage.ISerializationContext,Atom.Math.ComplexVector2)">
            <summary>
            Writes/Serializes the given <see cref="T:Atom.Math.ComplexVector2"/> using this ISerializationContext.
            </summary>
            <param name="context">
            The context to write with.
            </param>
            <param name="vector">
            The value to write.
            </param>
        </member>
        <member name="M:Atom.Math.MathSerializationContextExtensions.Write(Atom.Storage.ISerializationContext,Atom.Math.Vector)">
            <summary>
            Writes/Serializes the given <see cref="T:Atom.Math.Vector"/> using this ISerializationContext.
            </summary>
            <param name="context">
            The context to write with.
            </param>
            <param name="vector">
            The value to write.
            </param>
        </member>
        <member name="M:Atom.Math.MathSerializationContextExtensions.Write(Atom.Storage.ISerializationContext,Atom.Math.ComplexVector)">
            <summary>
            Writes/Serializes the given <see cref="T:Atom.Math.ComplexVector"/> using this ISerializationContext.
            </summary>
            <param name="context">
            The context to write with.
            </param>
            <param name="vector">
            The value to write.
            </param>
        </member>
        <member name="M:Atom.Math.MathSerializationContextExtensions.Write(Atom.Storage.ISerializationContext,Atom.Math.Rectangle)">
            <summary>
            Writes/Serializes the given <see cref="T:Atom.Math.Rectangle"/> using this ISerializationContext.
            </summary>
            <param name="context">
            The context to write with.
            </param>
            <param name="rectangle">
            The value to write.
            </param>
        </member>
        <member name="M:Atom.Math.MathSerializationContextExtensions.Write(Atom.Storage.ISerializationContext,Atom.Math.RectangleF)">
            <summary>
            Writes/Serializes the given <see cref="T:Atom.Math.RectangleF"/> using this ISerializationContext.
            </summary>
            <param name="context">
            The context to write with.
            </param>
            <param name="rectangle">
            The value to write.
            </param>
        </member>
        <member name="M:Atom.Math.MathSerializationContextExtensions.Write(Atom.Storage.ISerializationContext,Atom.Math.Matrix2)">
            <summary>
            Writes/Serializes the given <see cref="T:Atom.Math.Matrix2"/> using this ISerializationContext.
            </summary>
            <param name="context">
            The context to write with.
            </param>
            <param name="matrix">
            The value to write.
            </param>
        </member>
        <member name="M:Atom.Math.MathSerializationContextExtensions.Write(Atom.Storage.ISerializationContext,Atom.Math.Matrix3)">
            <summary>
            Writes/Serializes the given <see cref="T:Atom.Math.Matrix3"/> using this ISerializationContext.
            </summary>
            <param name="context">
            The context to write with.
            </param>
            <param name="matrix">
            The value to write.
            </param>
        </member>
        <member name="M:Atom.Math.MathSerializationContextExtensions.Write(Atom.Storage.ISerializationContext,Atom.Math.Matrix4)">
            <summary>
            Writes/Serializes the given <see cref="T:Atom.Math.Matrix4"/> using this ISerializationContext.
            </summary>
            <param name="context">
            The context to write with.
            </param>
            <param name="matrix">
            The value to write.
            </param>
        </member>
        <member name="M:Atom.Math.MathSerializationContextExtensions.Write(Atom.Storage.ISerializationContext,Atom.Math.Matrix)">
            <summary>
            Writes/Serializes the given <see cref="T:Atom.Math.Matrix"/> using this ISerializationContext.
            </summary>
            <param name="context">
            The context to write with.
            </param>
            <param name="matrix">
            The value to write.
            </param>
        </member>
        <member name="M:Atom.Math.MathSerializationContextExtensions.Write(Atom.Storage.ISerializationContext,Atom.Math.ComplexMatrix)">
            <summary>
            Writes/Serializes the given <see cref="T:Atom.Math.ComplexMatrix"/> using this ISerializationContext.
            </summary>
            <param name="context">
            The context to write with.
            </param>
            <param name="matrix">
            The value to write.
            </param>
        </member>
        <member name="M:Atom.Math.MathSerializationContextExtensions.Write(Atom.Storage.ISerializationContext,Atom.Math.Complex)">
            <summary>
            Writes/Serializes the given <see cref="T:Atom.Math.Complex"/> number using this ISerializationContext.
            </summary>
            <param name="context">
            The context to write with.
            </param>
            <param name="complex">
            The value to write.
            </param>
        </member>
        <member name="M:Atom.Math.MathSerializationContextExtensions.Write(Atom.Storage.ISerializationContext,Atom.Math.Circle)">
            <summary>
            Writes/Serializes the given <see cref="T:Atom.Math.Circle"/> using this ISerializationContext.
            </summary>
            <param name="context">
            The context to write with.
            </param>
            <param name="circle">
            The value to write.
            </param>
        </member>
        <member name="M:Atom.Math.MathSerializationContextExtensions.Write(Atom.Storage.ISerializationContext,Atom.Math.Ray2)">
            <summary>
            Writes/Serializes the given <see cref="T:Atom.Math.Ray2"/> using this ISerializationContext.
            </summary>
            <param name="context">
            The context to write with.
            </param>
            <param name="ray">
            The value to write.
            </param>
        </member>
        <member name="M:Atom.Math.MathSerializationContextExtensions.Write(Atom.Storage.ISerializationContext,Atom.Math.Ray3)">
            <summary>
            Writes/Serializes the given <see cref="T:Atom.Math.Ray3"/> using this ISerializationContext.
            </summary>
            <param name="context">
            The context to write with.
            </param>
            <param name="ray">
            The value to write.
            </param>
        </member>
        <member name="M:Atom.Math.MathSerializationContextExtensions.Write(Atom.Storage.ISerializationContext,Atom.Math.Plane3)">
            <summary>
            Writes/Serializes the given <see cref="T:Atom.Math.Plane3"/> using this ISerializationContext.
            </summary>
            <param name="context">
            The context to write with.
            </param>
            <param name="plane">
            The value to write.
            </param>
        </member>
        <member name="M:Atom.Math.MathSerializationContextExtensions.Write(Atom.Storage.ISerializationContext,Atom.Math.FloatRange)">
            <summary>
            Writes/Serializes the given <see cref="T:Atom.Math.FloatRange"/> using this ISerializationContext.
            </summary>
            <param name="context">
            The context to write with.
            </param>
            <param name="range">
            The value to write.
            </param>
        </member>
        <member name="M:Atom.Math.MathSerializationContextExtensions.Write(Atom.Storage.ISerializationContext,Atom.Math.IntegerRange)">
            <summary>
            Writes/Serializes the given <see cref="T:Atom.Math.IntegerRange"/> using this ISerializationContext.
            </summary>
            <param name="context">
            The context to write with.
            </param>
            <param name="range">
            The value to write.
            </param>
        </member>
        <member name="M:Atom.Math.MathSerializationContextExtensions.Write(Atom.Storage.ISerializationContext,Atom.Math.VariableFloat)">
            <summary>
            Writes/Serializes the given <see cref="T:Atom.Math.VariableFloat"/> using this ISerializationContext.
            </summary>
            <param name="context">
            The context to write with.
            </param>
            <param name="variableFloat">
            The value to write.
            </param>
        </member>
        <member name="M:Atom.Math.MathSerializationContextExtensions.Write(Atom.Storage.ISerializationContext,Atom.Math.Triangle2)">
            <summary>
            Writes/Serializes the given <see cref="T:Atom.Math.Triangle2"/> using this ISerializationContext.
            </summary>
            <param name="context">
            The context to write with.
            </param>
            <param name="triangle">
            The value to write.
            </param>
        </member>
        <member name="M:Atom.Math.MathSerializationContextExtensions.Write(Atom.Storage.ISerializationContext,Atom.Math.Quaternion)">
            <summary>
            Writes/Serializes the given <see cref="T:Atom.Math.Quaternion"/> using this ISerializationContext.
            </summary>
            <param name="context">
            The context to write with.
            </param>
            <param name="quaternion">
            The value to write.
            </param>
        </member>
        <member name="T:Atom.Math.DirectionExtensions">
            <summary>
            Defines extension methods related to the various Direction and Orientation enumerations.
            </summary>
            <seealso cref="T:Atom.Math.Direction4"/>
            <seealso cref="T:Atom.Math.Direction8"/>
            <seealso cref="T:Atom.Math.Directions"/>
            <seealso cref="T:Atom.Math.Orientation"/>
            <seealso cref="T:Atom.Math.TurnDirection"/>
        </member>
        <member name="M:Atom.Math.DirectionExtensions.Invert(Atom.Math.Orientation)">
            <summary>
            Inverts the given <see cref="T:Atom.Math.Orientation"/>.
            </summary>
            <param name="orientation"> 
            The <see cref="T:Atom.Math.Orientation"/> to invert.
            </param>
            <returns>
            The inverted Orientation.
            </returns>
        </member>
        <member name="M:Atom.Math.DirectionExtensions.Invert(Atom.Math.Direction4)">
            <summary>
            Inverts the given <see cref="T:Atom.Math.Direction4"/>.
            </summary>
            <param name="direction"> 
            The <see cref="T:Atom.Math.Direction4"/> to invert.
            </param>
            <returns>
            The inverted direction.
            </returns>
        </member>
        <member name="M:Atom.Math.DirectionExtensions.InvertX(Atom.Math.Direction4)">
            <summary>
            Inverts the given <see cref="T:Atom.Math.Direction4"/> horizontally (on the x-axis).
            </summary>
            <param name="direction">
            The <see cref="T:Atom.Math.Direction4"/> to invert on the x-axis.
            </param>
            <returns>
            The inverted direction.
            </returns>
        </member>
        <member name="M:Atom.Math.DirectionExtensions.InvertY(Atom.Math.Direction4)">
            <summary>
            Inverts the given <see cref="T:Atom.Math.Direction4"/> vertically (on the y-axis).
            </summary>
            <param name="direction">
            The <see cref="T:Atom.Math.Direction4"/> to invert on the y-axis.
            </param>
            <returns>
            The inverted direction.
            </returns>
        </member>
        <member name="M:Atom.Math.DirectionExtensions.Invert(Atom.Math.Direction8)">
            <summary>
            Inverts the given <see cref="T:Atom.Math.Direction8"/>.
            </summary>
            <param name="direction"> 
            The <see cref="T:Atom.Math.Direction8"/> to invert.
            </param>
            <returns>
            The inverted direction.
            </returns>
        </member>
        <member name="M:Atom.Math.DirectionExtensions.InvertX(Atom.Math.Direction8)">
            <summary>
            Inverts the given <see cref="T:Atom.Math.Direction8"/> horizontally (on the x-axis).
            </summary>
            <param name="direction">
            The <see cref="T:Atom.Math.Direction8"/> to invert on the x-axis.
            </param>
            <returns>
            The inverted direction.
            </returns>
        </member>
        <member name="M:Atom.Math.DirectionExtensions.InvertY(Atom.Math.Direction8)">
            <summary>
            Inverts the given <see cref="T:Atom.Math.Direction8"/> vertically (on the y-axis).
            </summary>
            <param name="direction">
            The <see cref="T:Atom.Math.Direction8"/> to invert on the y-axis.
            </param>
            <returns>
            The inverted direction.
            </returns>
        </member>
        <member name="M:Atom.Math.DirectionExtensions.ToVector(Atom.Math.Directions)">
            <summary>
            Converts the given <see cref="T:Atom.Math.Directions"/> enumerations
            into a <see cref="T:Atom.Math.Vector2"/>.
            </summary>
            <param name="directions">
            The input direction enumeration.
            </param>
            <returns>
            The direction vector.
            </returns>
        </member>
        <member name="M:Atom.Math.DirectionExtensions.ToVector(Atom.Math.Direction4)">
            <summary>
            Converts the given <see cref="T:Atom.Math.Direction4"/> enumerations
            into a <see cref="T:Atom.Math.Vector2"/>.
            </summary>
            <param name="direction">
            The input direction enumeration.
            </param>
            <returns>
            The direction vector.
            </returns>
        </member>
        <member name="M:Atom.Math.DirectionExtensions.ToDirection4(Atom.Math.Vector2)">
            <summary>
            Extracts the <see cref="T:Atom.Math.Direction4"/> from the given <see cref="T:Atom.Math.Vector2"/>.
            </summary>
            <remarks>
            Positive Y is considered Down.
            </remarks>
            <param name="vector">Vector2 to extract the direction from.</param>
            <returns> The extracted <see cref="T:Atom.Math.Direction4"/>. </returns>
        </member>
        <member name="M:Atom.Math.DirectionExtensions.ToDirection8(Atom.Math.Vector2)">
            <summary>
            Extracts the <see cref="T:Atom.Math.Direction8"/> from the given <see cref="T:Atom.Math.Vector2"/>.
            </summary>
            <remarks>
            Positive Y is considered Down.
            </remarks>
            <param name="vector">Vector2 to extract the direction from.</param>
            <returns> The extracted <see cref="T:Atom.Math.Direction8"/>. </returns>
        </member>
        <member name="M:Atom.Math.DirectionExtensions.GetNext(Atom.Math.Direction4,Atom.Math.TurnDirection)">
            <summary>
            Gets the Direction4 following this Direction4 following the given <see cref="T:Atom.Math.TurnDirection"/>.
            </summary>
            <param name="direction">
            The starting Direction4.
            </param>
            <param name="turnDirection">
            The direction to turn.
            </param>
            <returns>
            The next Direction4; following this Direction4.
            </returns>
        </member>
        <member name="M:Atom.Math.DirectionExtensions.GetNextClockwise(Atom.Math.Direction4)">
            <summary>
            Gets the Direction4 following this Direction4 clockwise.
            </summary>
            <param name="direction">
            The starting Direction4.
            </param>
            <returns>
            The next Direction4; following this Direction4.
            </returns>
        </member>
        <member name="M:Atom.Math.DirectionExtensions.GetNextAntiClockwise(Atom.Math.Direction4)">
            <summary>
            Gets the Direction4 following this Direction4 anti-clockwise.
            </summary>
            <param name="direction">
            The starting Direction4.
            </param>
            <returns>
            The next Direction4; following this Direction4.
            </returns>
        </member>
        <member name="T:Atom.Math.GaussianUtilities">
            <summary>
            Provides utility methods related to Gaussian filtering.
            </summary>
        </member>
        <member name="M:Atom.Math.GaussianUtilities.Fill(System.Single[],System.Single,System.Single,System.Single)">
            <summary>
            Fills the given weights array with the gaussian values
            computed using the given parameters.
            </summary>
            <param name="weights"></param>
            <param name="mean"></param>
            <param name="standardDeviation"></param>
            <param name="amplitude"></param>
        </member>
        <member name="M:Atom.Math.GaussianUtilities.Fill(System.Single[],System.Single,System.Single[],System.Single,System.Single,System.Single)">
            <summary>
            Fills the given weights array with the gaussian values
            computed using the given parameters.
            </summary>
            <param name="offsets"></param>
            <param name="pixelSize"></param>
            <param name="weights"></param>
            <param name="mean"></param>
            <param name="standardDeviation"></param>
            <param name="amplitude"></param>
        </member>
        <member name="M:Atom.Math.GaussianUtilities.ComputeGaussianValue(System.Single,System.Single,System.Single)">
            <summary>
            Computes the gaussian function.
            </summary>
            <param name="x">
            The value on the x-axis.
            </param>
            <param name="mean">
            </param>
            <param name="standardDeviation">
            </param>
            <returns>
            The value on the y-axis.
            </returns>
        </member>
        <member name="T:Atom.Math.MathExtensions">
            <summary>
            Static class that contains utility methods
            that are indendet to only be used as extension methods.
            </summary>
            <remarks>
            The class <see cref="T:Atom.Math.MathUtilities"/> may also
            contain extension methods, these are not indendet to be only used as extensions tho.
            </remarks>
        </member>
        <member name="M:Atom.Math.MathExtensions.IsApproximate(System.Single,System.Single)">
            <summary>
            Returns whether the value is approximately equal to the given <paramref name="value"/>.
            </summary>
            <remarks>
            A tolerence of 0.00001f is used.
            </remarks>
            <param name="thisValue">The first value to compare.</param>
            <param name="value">The second value to compare.</param>
            <returns>
            Returns <see langword="true"/> if the values are approximately equal;
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.MathExtensions.IsApproximate(System.Single,System.Single,System.Single)">
            <summary>
            Returns whether the value is approximately equal to the given <paramref name="value"/>.
            </summary>
            <param name="thisValue">The first value to compare.</param>
            <param name="value">The second value to compare.</param>
            <param name="tolerance">
            The tolerence the values can differ and still stand as equal.
            </param>
            <returns>
            Returns <see langword="true"/> if the values are approximately equal;
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.MathExtensions.IsApproximate(System.Double,System.Double)">
            <summary>
            Returns whether the value is approximately equal to the given <paramref name="value"/>.
            </summary>
            <remarks>
            A tolerence of 0.00001 is used.
            </remarks>
            <param name="thisValue">The first value to compare.</param>
            <param name="value">The second value to compare.</param>
            <returns>
            Returns <see langword="true"/> if the values are approximately equal;
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.MathExtensions.IsApproximate(System.Double,System.Double,System.Double)">
            <summary>
            Returns whether the value is approximately equal to the given <paramref name="value"/>.
            </summary>
            <param name="thisValue">The first value to compare.</param>
            <param name="value">The second value to compare.</param>
            <param name="tolerance">
            The tolerence the values can differ and still stand as equal.
            </param>
            <returns>
            Returns <see langword="true"/> if the values are approximately equal;
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.MathExtensions.IsApproximate(Atom.Math.Vector2,Atom.Math.Vector2,System.Single)">
            <summary>
            Returns whether the value is approximately equal to the given <paramref name="value"/>.
            </summary>
            <param name="thisValue">The first value to compare.</param>
            <param name="value">The second value to compare.</param>
            <param name="tolerance">
            The tolerence the values can differ and still stand as equal.
            </param>
            <returns>
            Returns <see langword="true"/> if the values are approximately equal;
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Atom.Math.MathUtilities">
            <summary>
            Static class that contains math-utility methods.
            </summary>
        </member>
        <member name="M:Atom.Math.MathUtilities.Clamp(System.Single,System.Single,System.Single)">
            <summary>
            Returns the given <paramref name="value"/> clamped
            into the range defined by <paramref name="min"/> and <paramref name="max"/>.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:Atom.Math.MathUtilities.Clamp(System.Double,System.Double,System.Double)">
            <summary>
            Returns the given <paramref name="value"/> clamped
            into the range defined by <paramref name="min"/> and <paramref name="max"/>.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:Atom.Math.MathUtilities.Clamp(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Returns the given <paramref name="value"/> clamped
            into the range defined by <paramref name="min"/> and <paramref name="max"/>.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:Atom.Math.MathUtilities.Clamp(System.Byte,System.Byte,System.Byte)">
            <summary>
            Returns the given <paramref name="value"/> clamped
            into the range defined by <paramref name="min"/> and <paramref name="max"/>.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:Atom.Math.MathUtilities.Clamp(System.Int16,System.Int16,System.Int16)">
            <summary>
            Returns the given <paramref name="value"/> clamped
            into the range defined by <paramref name="min"/> and <paramref name="max"/>.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:Atom.Math.MathUtilities.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the given <paramref name="value"/> clamped
            into the range defined by <paramref name="min"/> and <paramref name="max"/>.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:Atom.Math.MathUtilities.Clamp(System.Int64,System.Int64,System.Int64)">
            <summary>
            Returns the given <paramref name="value"/> clamped
            into the range defined by <paramref name="min"/> and <paramref name="max"/>.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:Atom.Math.MathUtilities.WrapAngle(System.Single)">
            <summary>
            Reduces a given angle to a value between <b>π</b> and -<b>π</b>.
            </summary>
            <param name="angle">
            The angle to reduce, in radians.
            </param>
            <returns>
            The new angle, in radians.
            </returns>
        </member>
        <member name="M:Atom.Math.MathUtilities.ToRadians(System.Single)">
            <summary>
            Converts degrees into radians.
            </summary>
            <param name="degrees">The angle in degrees.</param>
            <returns>The angle in radians.</returns>
        </member>
        <member name="M:Atom.Math.MathUtilities.ToRadians(System.Double)">
            <summary>
            Converts degrees into radians.
            </summary>
            <param name="degrees">The angle in degrees.</param>
            <returns>The angle in radians.</returns>
        </member>
        <member name="M:Atom.Math.MathUtilities.ToRadians(System.Decimal)">
            <summary>
            Converts degrees into radians.
            </summary>
            <param name="degrees">The angle in degrees.</param>
            <returns>The angle in radians.</returns>
        </member>
        <member name="M:Atom.Math.MathUtilities.ToDegrees(System.Single)">
            <summary>
            Converts radians into degrees.
            </summary>
            <param name="radians">The angle in radians.</param>
            <returns>The angle in degrees.</returns>
        </member>
        <member name="M:Atom.Math.MathUtilities.ToDegrees(System.Double)">
            <summary>
            Converts radians into degrees.
            </summary>
            <param name="radians">The angle in radians.</param>
            <returns>The angle in degrees.</returns>
        </member>
        <member name="M:Atom.Math.MathUtilities.ToDegrees(System.Decimal)">
            <summary>
            Converts radians into degrees.
            </summary>
            <param name="radians">The angle in radians.</param>
            <returns>The angle in degrees.</returns>
        </member>
        <member name="M:Atom.Math.MathUtilities.Lerp(System.Byte,System.Byte,System.Single)">
            <summary>
            Performs Linear intERPolation between two values.
            </summary>
            <param name="start">The source value that represents the start point.</param>
            <param name="end">The source value that represents the end point.</param>
            <param name="amount">The weighting factor.</param>
            <returns>The interpolated value.</returns>
        </member>
        <member name="M:Atom.Math.MathUtilities.Lerp(System.Single,System.Single,System.Single)">
            <summary>
            Performs Linear intERPolation between two values.
            </summary>
            <param name="start">The source value that represents the start point.</param>
            <param name="end">The source value that represents the end point.</param>
            <param name="amount">The weighting factor.</param>
            <returns>The interpolated value.</returns>
        </member>
        <member name="M:Atom.Math.MathUtilities.SmoothStep(System.Single,System.Single,System.Single)">
            <summary>
            Performs interpolation between two values using a cubic equation.
            </summary>
            <param name="start">The source value that represents the start point.</param>
            <param name="end">The source value that represents the end point.</param>
            <param name="amount">The weighting factor.</param>
            <returns>The interpolated value.</returns>
        </member>
        <member name="M:Atom.Math.MathUtilities.Coserp(System.Single,System.Single,System.Single)">
            <summary>
            Performs COSine intERPolation between two values.
            </summary>
            <param name="start">The source value that represents the start point.</param>
            <param name="end">The source value that represents the end point.</param>
            <param name="amount">The weighting factor.</param>
            <returns>The interpolated value.</returns>
        </member>
        <member name="M:Atom.Math.MathUtilities.Hermite(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="valueA">The first source position.</param>
            <param name="tangentA">The first source tangent.</param>
            <param name="valueB">The second source position.</param>
            <param name="tangentB">The second source tangent.</param>
            <param name="amount">The weighting factor.</param>
            <returns>The interpolated value.</returns>
        </member>
        <member name="M:Atom.Math.MathUtilities.CatmullRom(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Performs Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">The weighting factor.</param>
            <returns>A position that is the result of the Catmull-Rom interpolation.</returns>
        </member>
        <member name="M:Atom.Math.MathUtilities.RoundToMultiple(System.Single,System.Single)">
            <summary>
            Rounds the given value to a multiple of the given target value.
            </summary>
            <param name="value">
            The value to round.
            </param>
            <param name="target">
            The target value to round to.
            </param>
            <returns>
            The rounded value.
            </returns>
        </member>
        <member name="M:Atom.Math.MathUtilities.GetNearestMul(System.Int32,System.Int32)">
            <summary>
            Gets the nearest value that is a multiplicative of a given base value.
            </summary>
            <param name="value">
            The input value.
            </param>
            <param name="baseValue">
            The base value.
            </param>
            <returns>
            The nearest value.
            </returns>
        </member>
        <member name="M:Atom.Math.MathUtilities.GetNearestSmallerMul(Atom.Math.Point2,Atom.Math.Point2)">
            <summary>
            Gets the nearest value that is a multiplicative of the given baseValue.
            </summary>
            <param name="baseValue">
            The base value to scale.
            </param>
            <param name="maximumValue">
            The maximum allowed value.
            </param>
            <returns>
            The scaled value.
            </returns>
        </member>
        <member name="M:Atom.Math.MathUtilities.Barycentric(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Returns the Cartesian coordinate for one axis of a point that is defined
            by a given triangle and two normalized barycentric (areal) coordinates.
            </summary>
            <param name="value1">
            The coordinate on one axis of vertex 1 of the defining triangle.
            </param>
            <param name="value2">
            The coordinate on the same axis of vertex 2 of the defining triangle.
            </param>
            <param name="value3">
            The coordinate on the same axis of vertex 3 of the defining triangle.
            </param>
            <param name="amount1">
            The normalized barycentric (areal) coordinate b2,
            equal to the weighting factor for vertex 2,
            the coordinate of which is specified in value2.
            </param>
            <param name="amount2">
            The normalized barycentric (areal) coordinate b3,
            equal to the weighting factor for vertex 3,
            the coordinate of which is specified in value3.
            </param>
            <returns>
            Cartesian coordinate of the specified point with respect to the axis being used.
            </returns>
        </member>
        <member name="M:Atom.Math.MathUtilities.Hypotenuse(System.Single,System.Single)">
            <summary>
            Calculates the Hypotenuse of a triangle.
            </summary>
            <remarks>
            The hypotenuse of a right triangle is the triangle's longest side; 
            the side opposite the right angle.
            </remarks>
            <param name="cathetusA">
            The first shorter sid of the triangle.
            </param>
            <param name="cathetusB">
            The second short side of the triangle.
            </param>
            <returns>
            The hypotenuse of a triangle.
            </returns>
        </member>
        <member name="M:Atom.Math.MathUtilities.Hypotenuse(System.Double,System.Double)">
            <summary>
            Calculates the Hypotenuse of a triangle.
            </summary>
            <remarks>
            The hypotenuse of a right triangle is the triangle's longest side; 
            the side opposite the right angle.
            </remarks>
            <param name="cathetusA">
            The first shorter sid of the triangle.
            </param>
            <param name="cathetusB">
            The second short side of the triangle.
            </param>
            <returns>
            The hypotenuse of a triangle.
            </returns>
        </member>
        <member name="M:Atom.Math.MathUtilities.SuperFormula(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            The Super Formula can be used to create 2 dimensional shapes
            using one varying angle and six constants.
            </summary>
            <param name="angle"> The angle to calculate. </param>
            <param name="a">The first input constants.</param>
            <param name="b">The second input constants.</param>
            <param name="m">The third input constant. Modifies how many extra 'legs' the shape has. </param>
            <param name="n1">The fourth input constant.</param>
            <param name="n2">The fifth input constant.</param>
            <param name="n3">The sixth input constant.</param>
            <returns>
            The radius from the orgin for the current angle and constants.
            </returns>
        </member>
        <member name="M:Atom.Math.MathUtilities.ForN(System.Int32,System.Int32,System.Int32,System.Int32,System.Action{System.Int32[]})">
            <summary>
            Executes the given <paramref name="action"/> in the range defined by
            <paramref name="fromInclusive"/> and <paramref name="toExclusive"/> in N-dimensions.
            </summary>
            <param name="fromInclusive">The starting value.</param>
            <param name="toExclusive">The end value.</param>
            <param name="step">The size of a single step.</param>
            <param name="dimensionCount">The number of dimensions.</param>
            <param name="action">
            The action to execute. The given int array represents the arguments of the function.
            The arguments array is reused by this recursive function. Clone the arguments array if you want to modify it.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="action"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the given <paramref name="dimensionCount"/> is less or equals zero.
            -/-
            Or if <paramref name="step"/> is zero.
            </exception>
        </member>
        <member name="M:Atom.Math.MathUtilities.RecursiveForN(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32[],System.Action{System.Int32[]})">
            <summary>
            Executes the given <paramref name="action"/> in the range defined by
            <paramref name="fromInclusive"/> and <paramref name="toExclusive"/> in N-dimensions.
            </summary>
            <param name="fromInclusive">The starting value.</param>
            <param name="toExclusive">The end value.</param>
            <param name="step">The size of a single step.</param>
            <param name="currentDimension">The current dimension beeing executed by the recursive function.</param>
            <param name="dimensionCount">The number of dimensions.</param>
            <param name="arguments">The current arguments for the action.</param>
            <param name="action">The action to execute.</param>
        </member>
        <member name="T:Atom.Math.NumberUtilities">
            <summary>
            Provides static number related utility methods.
            </summary>
            <remarks>
            This utility class differs from the <see cref="T:Atom.Math.MathUtilities"/> class
            in that it contains more (number-) specialized methods.
            </remarks>
        </member>
        <member name="M:Atom.Math.NumberUtilities.GreatestCommonDivisor(System.Int32,System.Int32)">
            <summary>
            Finds the greatest common divisor.
            </summary>
            <param name="firstNumber">The first number.</param>
            <param name="secondNumber">The second number.</param>
            <returns>The greatest common divisor between the two integers supplied.</returns>
            <exception cref="T:System.ArgumentException"> 
            If the specified <paramref name="firstNumber"/> or <paramref name="secondNumber"/> is less than 0.
            </exception>
        </member>
        <member name="M:Atom.Math.NumberUtilities.GreatestCommonDivisorRecursive(System.Int32,System.Int32)">
            <summary>
            Finds the greatest common divisor.
            </summary>
            <param name="firstNumber">The first number.</param>
            <param name="secondNumber">The second number.</param>
            <returns>The greatest common divisor between the two integers supplied.</returns>
        </member>
        <member name="M:Atom.Math.NumberUtilities.GreatestCommonDivisor(System.Int64,System.Int64)">
            <summary>
            Finds the greatest common divisor.
            </summary>
            <param name="firstNumber">The first number.</param>
            <param name="secondNumber">The second number.</param>
            <returns>The greatest common divisor between the two longegers supplied.</returns>
            <exception cref="T:System.ArgumentException"> 
            If the specified <paramref name="firstNumber"/> or <paramref name="secondNumber"/> is less than 0.
            </exception>
        </member>
        <member name="M:Atom.Math.NumberUtilities.GreatestCommonDivisorRecursive(System.Int64,System.Int64)">
            <summary>
            Finds the greatest common divisor.
            </summary>
            <param name="firstNumber">The first number.</param>
            <param name="secondNumber">The second number.</param>
            <returns>The greatest common divisor between the two longegers supplied.</returns>
        </member>
        <member name="M:Atom.Math.NumberUtilities.LeastCommonMultiple(System.Int32,System.Int32)">
            <summary>
            Returns the least common multiple of two integers using euclids algorithm.
            </summary>
            <param name="firstNumber">
            The first value.
            </param>
            <param name="secondNumber">
            The second value.
            </param>
            <returns>
            The least common multiple of the two input values.
            </returns>
        </member>
        <member name="M:Atom.Math.NumberUtilities.LeastCommonMultiple(System.Int64,System.Int64)">
            <summary>
            Returns the least common multiple of two integers using euclids algorithm.
            </summary>
            <param name="firstNumber">
            The first value.
            </param>
            <param name="secondNumber">
            The second value.
            </param>
            <returns>
            The least common multiple of the two input values.
            </returns>
        </member>
        <member name="M:Atom.Math.NumberUtilities.IsPrime(System.Int64)">
            <summary>
            Determines whether the <paramref name="value"/> is a prime number.
            </summary>
            <param name="value">The number to check.</param>
            <returns><c>true</c> if the number is a prime; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Atom.Math.NumberUtilities.IsPrime(System.Int32)">
            <summary>
            Determines whether the <paramref name="value"/> is a prime number.
            </summary>
            <param name="value">The number to check.</param>
            <returns><c>true</c> if the number is a prime; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Atom.Math.NumberUtilities.EpsilonOf(System.Double)">
            <summary>
            Evaluates the minimum distance to the next distinguishable number near the argument value.
            </summary>
            <remarks>
            Evaluates the <b>negative</b> epsilon. 
            The more common positive epsilon is equal to two times this negative epsilon.
            </remarks>
            <seealso cref="M:Atom.Math.NumberUtilities.PositiveEpsilonOf(System.Double)"/>
            <param name="value">The input value.</param>
            <returns>Relative Epsilon (positive double or NaN).</returns>
        </member>
        <member name="M:Atom.Math.NumberUtilities.PositiveEpsilonOf(System.Double)">
            <summary>
            Evaluates the minimum distance to the next distinguishable number near the argument value.
            </summary>
            <remarks>Evaluates the <b>positive</b> epsilon. See also <see cref="M:Atom.Math.NumberUtilities.EpsilonOf(System.Double)"/></remarks>
            <seealso cref="M:Atom.Math.NumberUtilities.EpsilonOf(System.Double)"/>
            <param name="value">The input value.</param>
            <returns>Relative Epsilon (positive double or NaN).</returns>
        </member>
        <member name="M:Atom.Math.NumberUtilities.ToLexicographicalOrderedUInt64(System.Double)">
            <summary>
            Maps a double to an unsigned long integer which provides lexicographical ordering.
            </summary>
            <param name="value">
            The input value.
            </param>
            <returns>
            The mapped value.
            </returns>
        </member>
        <member name="M:Atom.Math.NumberUtilities.ToLexicographicalOrderedInt64(System.Double)">
            <summary>
            Maps a double to an signed long integer which provides lexicographical ordering.
            </summary>
            <param name="value">
            The input value.
            </param>
            <returns>
            The mapped value.
            </returns>
        </member>
        <member name="M:Atom.Math.NumberUtilities.SignedMagnitudeToTwosComplementUInt64(System.Int64)">
            <summary>
            Converts a long integer in signed-magnitude format to an unsigned long integer in two-complement format.
            </summary>
            <param name="value">The input value.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Atom.Math.NumberUtilities.SignedMagnitudeToTwosComplementInt64(System.Int64)">
            <summary>
            Converts an unsigned long integer in two-complement to a long integer in signed-magnitude format format.
            </summary>
            <param name="value">The input value.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Atom.Math.NumberUtilities.Increment(System.Double)">
            <summary>
            Increments a floating point number to the next bigger number representable by the data type.
            </summary>
            <remarks>
            The incrementation step length depends on the provided value.
            Increment(double.MaxValue) will return positive infinity.
            </remarks>
            <param name="value">The input value.</param>
            <returns>The incremented value.</returns>
        </member>
        <member name="M:Atom.Math.NumberUtilities.Decrement(System.Double)">
            <summary>
            Decrements a floating point number to the next smaller number representable by the data type.
            </summary>
            <remarks>
            The decrementation step length depends on the provided value.
            Decrement(double.MinValue) will return negative infinity.
            </remarks>
            <param name="value">The input value.</param>
            <returns>The decremented value.</returns>
        </member>
        <member name="M:Atom.Math.NumberUtilities.NumbersBetween(System.Double,System.Double)">
            <summary>
            Evaluates the count of numbers between two double numbers.
            </summary>
            <remarks>
            The second number is included in the number, thus two equal numbers evaluate to zero and 
            two neighbour numbers evaluate to one. Therefore, what is returned is actually the count of numbers between plus 1.
            </remarks>
            <param name="a">
            The first number.
            </param>
            <param name="b">
            The second number.
            </param>
            <returns>
            The amount of numbers between the two given double numbers.
            </returns>
            <exception cref="T:System.ArgumentException">
            If <paramref name="a"/> or <paramref name="b"/> are infinity or NaN.
            </exception>
        </member>
        <member name="T:Atom.Math.SpecialFunctions">
            <summary>
            Static helper class that contains special math functions.
            </summary>
            <remarks>
            Those functions have been taken from the Math.NET Iridium library.
            Full credit goes to Christoph Rüegg and Contributors. See list on the top.
            </remarks>
        </member>
        <member name="M:Atom.Math.SpecialFunctions.GammaLN(System.Double)">
            <summary>
            Returns the natural logarithm of Gamma for a real value &gt; 0.
            </summary>
            <param name="value">
            The input value.
            </param>
            <returns>
            A value ln|Gamma(value))| for value &gt; 0.
            </returns>
        </member>
        <member name="M:Atom.Math.SpecialFunctions.Gamma(System.Double)">
            <summary>
            Returns the gamma function for real values (except at 0, -1, -2, ...).
            For numeric stability, consider to use GammaLn for positive values.
            </summary>
            <param name="value">The input value.</param>
            <returns>A value Gamma(value) for value != 0,-1,-2,...</returns>
        </member>
        <member name="M:Atom.Math.SpecialFunctions.GammaRegularized(System.Double,System.Double)">
            <summary>
            Returns the regularized lower incomplete gamma function
            P(a,x) = 1/Gamma(a) * int(exp(-t)t^(a-1),t=0..x) for real a &gt; 0, x &gt; 0.
            </summary>
            <param name="a">The first input value.</param>
            <param name="x">The second input value.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If <paramref name="a"/> or <paramref name="x"/> is less than zero.
            </exception>
            <returns>
            The regularized lower incomplete gamma function.
            </returns>
        </member>
        <member name="M:Atom.Math.SpecialFunctions.Digamma(System.Double)">
            <summary>
            Returns the digamma (psi) function of real values (except at 0, -1, -2, ...).
            Digamma is the logarithmic derivative of the <see cref="M:Atom.Math.SpecialFunctions.Gamma(System.Double)"/> function.
            </summary>
            <param name="x">
            The input value.
            </param>
            <returns>
            The digamma (psi) function.
            </returns>
        </member>
        <member name="M:Atom.Math.SpecialFunctions.Beta(System.Double,System.Double)">
            <summary>
            Returns the Euler Beta function of real valued z &gt; 0, w &gt; 0.
            </summary>
            <remarks>
            Beta(z,w) = Beta(w,z).
            </remarks>
            <param name="z">The first input value.</param>
            <param name="w">The second input value.</param>
            <returns>
            The Euler Beta function of <paramref name="w"/> and <paramref name="z"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.SpecialFunctions.BetaLN(System.Double,System.Double)">
            <summary>
            Returns the natural logarithm of the Euler Beta function of real valued z &gt; 0, w &gt; 0.
            </summary>
            <remarks>
            BetaLn(z,w) = BetaLn(w,z).
            </remarks>
            <param name="z">The first input value.</param>
            <param name="w">The second input value.</param>
            <returns>
            The natural logarithm of the Euler Beta function of <paramref name="w"/> and <paramref name="z"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.SpecialFunctions.BetaRegularized(System.Double,System.Double,System.Double)">
            <summary>
            Returns the regularized lower incomplete beta function
            I_x(a,b) = 1/Beta(a,b) * int(t^(a-1)*(1-t)^(b-1),t=0..x) for real a &gt; 0, b &gt; 0, 1 &gt;= x &gt;= 0.
            </summary>
            <param name="a">The first positive input value.</param>
            <param name="b">The second positive input value.</param>
            <param name="x">The third input value; must be in |0..1|.</param>
            <returns>
            The regularized lower incomplete beta function.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If any of the parameters is out of valid range.
            </exception>
        </member>
        <member name="M:Atom.Math.SpecialFunctions.Error(System.Double)">
            <summary>
            Returns the error function of <paramref name="x"/>.
            </summary>
            <remarks>
            erf(x) = 2/sqrt(pi) * int(exp(-t^2),t=0..x);
            </remarks>
            <param name="x">
            The input value.
            </param>
            <returns>
            The error function of <paramref name="x"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.SpecialFunctions.ErrorInv(System.Double)">
            <summary>
            Returns the inverse error function erf^-1(x).
            </summary>
            <remarks>
            <p>The algorithm uses a minimax approximation by rational functions
            and the result has a relative error whose absolute value is less
            than 1.15e-9.</p>
            <p>See the page <see href="http://home.online.no/~pjacklam/notes/invnorm/"/>
            for more details.</p>
            </remarks>
            <param name="x">
            The input value.
            </param>
            <returns>
            The inverse error function of <paramref name="x"/>.
            </returns>
        </member>
        <member name="F:Atom.Math.SpecialFunctions.ErrorInvA">
            <summary>
            Error function contants.
            </summary>
        </member>
        <member name="F:Atom.Math.SpecialFunctions.ErrorInvB">
            <summary>
            Error function contants.
            </summary>
        </member>
        <member name="F:Atom.Math.SpecialFunctions.ErrorInvC">
            <summary>
            Error function contants.
            </summary>
        </member>
        <member name="F:Atom.Math.SpecialFunctions.ErrorInvD">
            <summary>
            Error function contants.
            </summary>
        </member>
        <member name="M:Atom.Math.SpecialFunctions.Gamma(Atom.Math.Complex)">
            <summary>
            Returns the gamma function of a <see cref="T:Atom.Math.Complex"/> number.
            </summary>
            <param name="z">
            The input value.
            </param>
            <returns>
            The gamma function of <paramref name="z"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.SpecialFunctions.Beta(Atom.Math.Complex,Atom.Math.Complex)">
            <summary>
            Returns the beta function of a <see cref="T:Atom.Math.Complex"/> number.
            </summary>
            <param name="x">
            The first input value.
            </param>
            <param name="y">
            The second input value.
            </param>
            <returns>
            The gamma function of <paramref name="x"/> and <paramref name="y"/>.
            </returns>
        </member>
        <member name="T:Atom.Math.SpecialNumbers">
            <summary>
            Static helper class that contains methods to calcualte
            various special numbers.
            </summary>
        </member>
        <member name="M:Atom.Math.SpecialNumbers.Fibonacci(System.Int32)">
            <summary>
            Calculates the <paramref name="n"/>-th Fibonacci number
            using a single formula.
            </summary>
            <remarks>
            Keep in mind that Fibonacci numbers get very big quite fast.
            http://www.mcs.surrey.ac.uk/Personal/R.Knott/Fibonacci/fibFormula.html
            </remarks>
            <param name="n">The 'index' of the fibonacci number to get. </param>
            <returns>The <paramref name="n"/>th fibonacci number. </returns>
        </member>
        <member name="M:Atom.Math.SpecialNumbers.Fibonacci(System.Int64)">
            <summary>
            Calculates the <paramref name="n"/>-th Fibonacci number
            using a single formula.
            </summary>
            <remarks>
            Keep in mind that Fibonacci numbers get very big quite fast.
            http://www.mcs.surrey.ac.uk/Personal/R.Knott/Fibonacci/fibFormula.html
            </remarks>
            <param name="n">The 'index' of the fibonacci number to get. </param>
            <returns>The <paramref name="n"/>th fibonacci number. </returns>
        </member>
        <member name="M:Atom.Math.SpecialNumbers.Harmonic(System.Int32)">
            <summary>
            Returns the n-th harmonic number; Hn = sum(1/k,k=1..n).
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If <paramref name="n"/> is less than zero.
            </exception>
            <param name="n">
            The input number; must be greater or equal 0.
            </param>
            <returns>
            The n-th harmonic number.
            </returns>
        </member>
        <member name="F:Atom.Math.SpecialNumbers.harmonicNumbers">
            <summary>
            Stores the first 32 harmonic numbers.
            </summary>
        </member>
        <member name="M:Atom.Math.SpecialNumbers.Factorial(System.Int32)">
            <summary>
            Returns the factorial (n!) of an integer number > 0.
            </summary>
            <param name="value">
            The input value.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If <paramref name="value"/> is less than zero.
            </exception>
            <returns>
            The factorial (value!).
            </returns>
        </member>
        <member name="M:Atom.Math.SpecialNumbers.FactorialLN(System.Int32)">
            <summary>
            Returns the natural logarithm of the factorial (n!) for an integer value > 0.
            </summary>
            <param name="value">
            The input value.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If <paramref name="value"/> is less than zero.
            </exception>
            <returns>
            The natural logarithm of the factorial (value!).
            </returns>
        </member>
        <member name="F:Atom.Math.SpecialNumbers.factorialNumbers">
            <summary>
            The first 32 factorial numbers.
            </summary>
        </member>
        <member name="F:Atom.Math.SpecialNumbers.factorialLnCache">
            <summary>
            Stores cached values of the natural logarithm of factorial numbers.
            </summary>
        </member>
        <member name="M:Atom.Math.SpecialNumbers.BinomialCoefficient(System.Int32,System.Int32)">
            <summary>
            Returns the binomial coefficient of n and k as a double precision number.
            </summary>
            <remarks>
            If you need to multiply or divide various such coefficients, consider
            using the logarithmic version <see cref="M:Atom.Math.SpecialNumbers.BinomialCoefficientLN(System.Int32,System.Int32)"/> instead
            so you can add instead of multiply and subtract instead of divide, and
            then exponentiate the result using <see cref="M:System.Math.Exp(System.Double)"/>.
            </remarks>
            <param name="n">
            The first input index.
            </param>
            <param name="k">
            The second input index.
            </param>
            <returns>
            The binomial coefficient of <paramref name="n"/> and <paramref name="k"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.SpecialNumbers.BinomialCoefficientLN(System.Int32,System.Int32)">
            <summary>
            Returns the natural logarithm of the binomial coefficient of n and k as a double precision number.
            </summary>
            <param name="n">
            The first input index.
            </param>
            <param name="k">
            The second input index.
            </param>
            <returns>
            The natural logarithm of the binomial coefficient of <paramref name="n"/> and <paramref name="k"/>.
            </returns>
        </member>
        <member name="T:Atom.Math.VariableFloat">
            <summary>
            Represents a single-precision floating-point number that
            varier over a specific range of values.
            </summary>
            <seealso cref="T:Atom.Math.FloatRange"/>
        </member>
        <member name="P:Atom.Math.VariableFloat.Anchor">
            <summary>
            Gets or sets the Anchor at which this VariableFloat starts.
            </summary>
        </member>
        <member name="P:Atom.Math.VariableFloat.Variation">
            <summary>
            Gets or sets the 'range' of this VariableFloat.
            </summary>
        </member>
        <member name="P:Atom.Math.VariableFloat.Difference">
            <summary>
            Gets the difference starting from the anchor of this VariableFloat.
            </summary>
        </member>
        <member name="M:Atom.Math.VariableFloat.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.VariableFloat"/> structure.
            </summary>
            <param name="anchor">
            The initial anchor value of the new VariableFloat.
            </param>
            <param name="variation">
            The initial variation value of the new VariableFloat.
            </param>
        </member>
        <member name="M:Atom.Math.VariableFloat.GetRandomValue(Atom.Math.IRand)">
            <summary>
            Gets a randomis value that lies within this VariableFloat.
            </summary>
            <param name="rand">
            The random number generator to use.
            </param>
            <returns>
            A random floating-point values that lies within 
            [Anchor - (Anchor * Variation)] and
            [Anchor + (Anchor * Variation)].
            </returns>
        </member>
        <member name="M:Atom.Math.VariableFloat.op_Implicit(System.Single)~Atom.Math.VariableFloat">
            <summary>
            Implicit cast operator from float to VariableFloat.
            </summary>
            <param name="value">
            The floating-point value to convert into a VariableFloat.
            </param>
        </member>
        <member name="M:Atom.Math.VariableFloat.Equals(System.Object)">
            <summary>
            Determines whether the specified Object is equal to this VariableFloat.
            </summary>
            <param name="obj">
            The Object to compare this VariableFloat against.
            </param>
            <returns>
            true if they are equal;
            otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Math.VariableFloat.Equals(Atom.Math.VariableFloat)">
            <summary>
            Determines whether the specified VariableFloat is equal to this VariableFloat.
            </summary>
            <param name="other">
            The other VariableFloat to compare this VariableFloat against.
            </param>
            <returns>
            true if they are equal;
            otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Math.VariableFloat.op_Equality(Atom.Math.VariableFloat,Atom.Math.VariableFloat)">
            <summary>
            Returns whether the specified <see cref="T:Atom.Math.VariableFloat"/> instances are equal.
            </summary>
            <param name="left">The value on the left side of the equation.</param>
            <param name="right">The value on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.VariableFloat.op_Inequality(Atom.Math.VariableFloat,Atom.Math.VariableFloat)">
            <summary>
            Returns whether the specified <see cref="T:Atom.Math.VariableFloat"/> instances are inequal.
            </summary>
            <param name="left">The value on the left side of the equation.</param>
            <param name="right">The value on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.VariableFloat.GetHashCode">
            <summary>
            Gets the hash code of this VariableFloat.
            </summary>
            <returns>
            The hash code.
            </returns>
        </member>
        <member name="M:Atom.Math.VariableFloat.ToString">
            <summary>
            Returns a human-readable representation of this VariableFloat.
            </summary>
            <returns>
            A string descriping this VariableFloat.
            </returns>
        </member>
        <member name="M:Atom.Math.VariableFloat.ToString(System.IFormatProvider)">
            <summary>
            Returns a human-readable representation of this VariableFloat.
            </summary>
            <param name="formatProvider">
            The System.IFormatProvider that should be used to format the fields
            of this VariableFloat.
            </param>
            <returns>
            A string descriping this VariableFloat.
            </returns>
        </member>
        <member name="F:Atom.Math.VariableFloat.anchor">
            <summary>
            The storage field of the <see cref="P:Atom.Math.VariableFloat.Anchor"/> property.
            </summary>
        </member>
        <member name="F:Atom.Math.VariableFloat.variation">
            <summary>
            The storage field of the <see cref="P:Atom.Math.VariableFloat.Variation"/> property.
            </summary>
        </member>
        <member name="T:Atom.Math.ComplexVector">
            <summary>
            Defines a N-dimensional Vector whose elements are <see cref="T:Atom.Math.Complex"/> numbers.
            </summary>
        </member>
        <member name="P:Atom.Math.ComplexVector.DimensionCount">
            <summary>
            Gets a value that represents the total
            number of elements the ComplexVector has.
            </summary>
            <value>The total number of elements the ComplexVector has.</value>
        </member>
        <member name="P:Atom.Math.ComplexVector.Item(System.Int32)">
            <summary>
            Gets or sets the element of the ComplexVector at the specified <paramref name="index"/>.
            </summary>
            <param name="index">
            The zero-based index of the element to receive or set.
            </param>
            <returns>
            The element at the specified <paramref name="index"/>.
            </returns>
        </member>
        <member name="P:Atom.Math.ComplexVector.OneNorm">
            <summary>
            Gets the 1-Norm (also known as Manhattan Norm or Taxicab Norm) of this ComplexVector.
            </summary>
            <remarks>
            The 1-Norm is the sum of the lengths of the <see cref="T:Atom.Math.Complex"/> of this ComplexVector.
            </remarks>
            <returns>
            The 1-Norm of this ComplexVector. ret = sum(abs(this[i]))
            </returns>
        </member>
        <member name="M:Atom.Math.ComplexVector.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.ComplexVector"/> class.
            </summary>
            <param name="dimensionCount">
            The number of elements the new Vector can hold.
            </param>
            <exception cref="T:System.ArgumentException">
            If the specified <paramref name="dimensionCount"/> is less than or equal zero.
            </exception>
        </member>
        <member name="M:Atom.Math.ComplexVector.#ctor(System.Collections.Generic.IEnumerable{Atom.Math.Complex})">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.ComplexVector"/> class.
            </summary>
            <param name="elements">
            The elements the new ComplexVector.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="elements"/> is null.
            </exception>
        </member>
        <member name="M:Atom.Math.ComplexVector.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> 
            Initializes a new instance of the <see cref="T:Atom.Math.ComplexVector"/> class and
            sets the Elements of the new <see cref="T:Atom.Math.ComplexVector"/> to the "Elements"
            array inside the specified <see cref="T:System.Runtime.Serialization.SerializationInfo"/>.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds
            the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that 
            contains contextual information about the source or destination.
            Can be null.
            </param>
        </member>
        <member name="M:Atom.Math.ComplexVector.Dot(Atom.Math.ComplexVector,Atom.Math.ComplexVector)">
            <summary>
            Returns the dot (scalar/inner) product of two given <see cref="T:Atom.Math.ComplexVector"/>s.
            </summary> 
            <param name="left">
            The ComplexVector 'u' on the left side.
            </param>
            <param name="right">
            The ComplexVector 'v' on the right side.
            </param>
            <returns>
            The result of the operation; Scalar dot = sum(u[i] * v[i]).
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="left"/> or <paramref name="right"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the dimension count of given ComplexVector doesn't match.
            </exception>
        </member>
        <member name="M:Atom.Math.ComplexVector.Dyadic(Atom.Math.ComplexVector,Atom.Math.ComplexVector)">
            <summary>
            Returns the dyadic product of two given <see cref="T:Atom.Math.ComplexVector"/>s.
            </summary>
            <param name="left">
            The ComplexVector 'u' on the left side.
            </param>
            <param name="right">
            The ComplexVector 'v' on the right side.
            </param>
            <returns>
            The result of the operation; ComplexMatrix M[i,j] = u[i] * v[j].
            </returns>
        </member>
        <member name="M:Atom.Math.ComplexVector.Transform(Atom.Math.ComplexVector,Atom.Math.ComplexMatrix)">
            <summary>
            Returns the result of transforming the given ComplexVector by the given <see cref="T:Atom.Math.ComplexMatrix"/>.
            </summary>
            <param name="vector">
            The vector on the left side.
            </param>
            <param name="matrix">
            The matrix on the right side.
            </param>
            <returns>
            The transformed ComplexVector.
            </returns>
        </member>
        <member name="M:Atom.Math.ComplexVector.op_Addition(Atom.Math.ComplexVector,Atom.Math.ComplexVector)">
            <summary>
            Returns the result of adding the given ComplexVectors together.
            </summary>
            <param name="left">
            The ComplexVector on the left side.
            </param>
            <param name="right">
            The ComplexVector on the right side.
            </param>
            <returns>
            The result of the operation; ComplexMatrix M[i,j] = u[i] + v[j].
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="left"/> or <paramref name="right"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the dimension count of given ComplexVector doesn't match.
            </exception>
        </member>
        <member name="M:Atom.Math.ComplexVector.Add(Atom.Math.ComplexVector,Atom.Math.ComplexVector)">
            <summary>
            Returns the result of adding the given ComplexVectors together.
            </summary>
            <param name="left">
            The ComplexVector on the left side.
            </param>
            <param name="right">
            The ComplexVector on the right side.
            </param>
            <returns>
            The result of the operation; ComplexMatrix M[i,j] = u[i] + v[j].
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="left"/> or <paramref name="right"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the dimension count of given ComplexVector doesn't match.
            </exception>
        </member>
        <member name="M:Atom.Math.ComplexVector.op_Subtraction(Atom.Math.ComplexVector,Atom.Math.ComplexVector)">
            <summary>
            Returns the result of subtracting the <paramref name="left"/> ComplexVector
            from the <paramref name="right"/> ComplexVector.
            </summary>
            <param name="left">
            The ComplexVector on the left side.
            </param>
            <param name="right">
            The ComplexVector on the right side.
            </param>
            <returns>
            The result of the operation; ComplexMatrix M[i,j] = u[i] - v[j].
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="left"/> or <paramref name="right"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the dimension count of given ComplexVector doesn't match.
            </exception>
        </member>
        <member name="M:Atom.Math.ComplexVector.Subtract(Atom.Math.ComplexVector,Atom.Math.ComplexVector)">
            <summary>
            Returns the result of subtracting the <paramref name="left"/> ComplexVector
            from the <paramref name="right"/> ComplexVector.
            </summary>
            <param name="left">
            The ComplexVector on the left side.
            </param>
            <param name="right">
            The ComplexVector on the right side.
            </param>
            <returns>
            The result of the operation; ComplexMatrix M[i,j] = u[i] - v[j].
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="left"/> or <paramref name="right"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the dimension count of given ComplexVector doesn't match.
            </exception>
        </member>
        <member name="M:Atom.Math.ComplexVector.op_Equality(Atom.Math.ComplexVector,Atom.Math.ComplexVector)">
            <summary>
            Returns a value indicating whether the specified ComplexVectors are equal.
            </summary>
            <param name="left">
            The ComplexVector on the left side.
            </param>
            <param name="right">
            The ComplexVector on the right side.
            </param>
            <returns>
            true if they are equal;
            otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Math.ComplexVector.op_Inequality(Atom.Math.ComplexVector,Atom.Math.ComplexVector)">
            <summary>
            Returns a value indicating whether the specified ComplexVectors are not equal.
            </summary>
            <param name="left">
            The ComplexVector on the left side.
            </param>
            <param name="right">
            The ComplexVector on the right side.
            </param>
            <returns>
            true if they are not equal;
            otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Math.ComplexVector.VerifyDimensionsMatch(Atom.Math.ComplexVector,Atom.Math.ComplexVector)">
            <summary>
            Verifies that the given ComplexVectors are of the same size.
            </summary>
            <param name="left">
            The ComplexVector on the left side.
            </param>
            <param name="right">
            The ComplexVector on the right side.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="left"/> or <paramref name="right"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the dimension count of given ComplexVector doesn't match.
            </exception>
        </member>
        <member name="M:Atom.Math.ComplexVector.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/>
            over the elements of the <see cref="T:Atom.Math.ComplexVector"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1"/>
            over the elements of the <see cref="T:Atom.Math.ComplexVector"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.ComplexVector.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/>
            over the elements of the <see cref="T:Atom.Math.ComplexVector"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1"/>
            over the elements of the <see cref="T:Atom.Math.ComplexVector"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.ComplexVector.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            with the data needed to serialize the <see cref="T:Atom.Math.ComplexVector"/>.
            </summary>
            <remarks>
            elements component: "Elements"
            </remarks>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            to populate with data.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the given info is null.
            </exception>
            <param name="context"> 
            The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>)
            for this serialization.
            </param>
        </member>
        <member name="M:Atom.Math.ComplexVector.Equals(Atom.Math.ComplexVector)">
            <summary>
            Returns whether the given <see cref="T:Atom.Math.ComplexVector"/> has the
            same indices set as this ComplexVector.
            </summary>
            <param name="other">The Vector to test against. Can be null.</param>
            <returns>true if the indices are equal; otherwise false.</returns>
        </member>
        <member name="M:Atom.Math.ComplexVector.Equals(System.Object)">
            <summary>
            Returns whether the given <see cref="T:System.Object"/> is equal to this ComplexVector.
            </summary>
            <param name="obj">The Object to test against.</param>
            <returns>true if they are equal; otherwise false.</returns>
        </member>
        <member name="M:Atom.Math.ComplexVector.ToString">
            <summary>
            Overriden to return a human-readable text representation of the ComplexVector.
            </summary>
            <returns>A human-readable text representation of the ComplexVector.</returns>
        </member>
        <member name="M:Atom.Math.ComplexVector.ToString(System.IFormatProvider)">
            <summary>
            Returns a human-readable text representation of the ComplexVector.
            </summary>
            <param name="formatProvider">
            The <see cref="T:System.IFormatProvider"/> that supplies culture specific formatting information.
            </param>
            <returns>A human-readable text representation of the ComplexVector.</returns>
        </member>
        <member name="M:Atom.Math.ComplexVector.GetHashCode">
            <summary>
            Gets the hash code of the <see cref="T:Atom.Math.Vector"/>.
            </summary>
            <returns>
            The hash code.
            </returns>
        </member>
        <member name="F:Atom.Math.ComplexVector.elements">
            <summary>
            The elements of the Vector.
            </summary>
        </member>
        <member name="T:Atom.Math.ComplexVector2">
            <summary>
            Defines a two dimensional vector whose elements
            are <see cref="T:Atom.Math.Complex"/> numbers.
            </summary>
        </member>
        <member name="F:Atom.Math.ComplexVector2.X">
            <summary>
            The first component of this <see cref="T:Atom.Math.ComplexVector2"/>.
            </summary>
        </member>
        <member name="F:Atom.Math.ComplexVector2.Y">
            <summary>
            The second component of this <see cref="T:Atom.Math.ComplexVector2"/>.
            </summary>
        </member>
        <member name="P:Atom.Math.ComplexVector2.Magnitude">
            <summary>
            Gets the complex magnitude of this ComplexVector2.
            </summary>
            <value>
            The <see cref="T:Atom.Math.Complex"/> magnitude of this ComplexVector2.
            </value>
        </member>
        <member name="M:Atom.Math.ComplexVector2.#ctor(Atom.Math.Complex,Atom.Math.Complex)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.ComplexVector2"/> structure.
            </summary>
            <param name="x">
            The first component of the new <see cref="T:Atom.Math.ComplexVector2"/>.
            </param>
            <param name="y">
            The second component of the new <see cref="T:Atom.Math.ComplexVector2"/>.
            </param>
        </member>
        <member name="M:Atom.Math.ComplexVector2.Normalize">
            <summary>
            Normalizes this ComplexVector2.
            </summary>
        </member>
        <member name="M:Atom.Math.ComplexVector2.Equals(System.Object)">
            <summary> 
            Gets whether the specified <see cref="T:System.Object"/> is equal to this <see cref="T:Atom.Math.ComplexVector2"/>.
            </summary>
            <param name="obj"> The object to test against. </param>
            <returns>true if they are equal, otherwise false. </returns>
        </member>
        <member name="M:Atom.Math.ComplexVector2.Equals(Atom.Math.ComplexVector2)">
            <summary> 
            Gets whether the specified <see cref="T:Atom.Math.ComplexVector2"/> number is equal 
            to this <see cref="T:Atom.Math.ComplexVector2"/>. 
            </summary>
            <param name="other"> The vector to test against. </param>
            <returns>true if they are equal, otherwise false. </returns>
        </member>
        <member name="M:Atom.Math.ComplexVector2.ToString">
            <summary>
            Returns a human-readable string representation of this <see cref="T:Atom.Math.ComplexVector2"/>.
            </summary>
            <returns>A string representation of this <see cref="T:Atom.Math.ComplexVector2"/>.</returns>
        </member>
        <member name="M:Atom.Math.ComplexVector2.ToString(System.IFormatProvider)">
            <summary>
            Returns a human-readable string representation of this <see cref="T:Atom.Math.ComplexVector2"/>.
            </summary>
            <param name="formatProvider">Provides culture specific formatting information.</param>
            <returns>A string representation of this <see cref="T:Atom.Math.ComplexVector2"/>.</returns>
        </member>
        <member name="M:Atom.Math.ComplexVector2.GetHashCode">
            <summary> 
            Returns the hash code of this <see cref="T:Atom.Math.Complex"/> number.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Atom.Math.ComplexVector2.op_Equality(Atom.Math.ComplexVector2,Atom.Math.ComplexVector2)">
            <summary>
            Returns whether the given <see cref="T:Atom.Math.ComplexVector2"/> instances are equal.
            </summary>
            <param name="left">
            The ComplexVector2 on the left side.</param>
            <param name="right">
            The ComplexVector2 on the right side.
            </param>
            <returns>
            Returns <see langword="true"/> if they are equal; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.ComplexVector2.op_Inequality(Atom.Math.ComplexVector2,Atom.Math.ComplexVector2)">
            <summary>
            Returns whether the given <see cref="T:Atom.Math.ComplexVector2"/> instances are inequal.
            </summary>
            <param name="left">The ComplexVector2 on the left side.</param>
            <param name="right">The ComplexVector2 on the right side.</param>
            <returns>
            Returns <see langword="true"/> if they are not equal; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Atom.Math.Vector">
            <summary>
            Defines a N-dimensional single-precision floating-point Vector.
            </summary>
        </member>
        <member name="M:Atom.Math.Vector.Zero(System.Int32)">
            <summary>
            Returns a <see cref="T:Atom.Math.Vector"/> with all its components set to zero.
            </summary>
            <param name="dimensionCount">
            The length of the Vector.
            </param>
            <returns>The vector (0, 0, ..., 0).</returns>
        </member>
        <member name="M:Atom.Math.Vector.One(System.Int32)">
            <summary>
            Returns a <see cref="T:Atom.Math.Vector"/> with all its components set to one.
            </summary>
            <param name="dimensionCount">
            The length of the Vector.
            </param>
            <returns>The vector (1, 1, ..., 1).</returns>
        </member>
        <member name="M:Atom.Math.Vector.Unit(System.Int32,System.Int32)">
            <summary>
            Returns the unit <see cref="T:Atom.Math.Vector"/> for the specified <paramref name="axisIndex"/>.
            </summary>
            <param name="length">
            The length of the Vector.
            </param>
            <param name="axisIndex">
            The zero-based index of the axis that is represented.
            </param>
            <returns>
            The vector (0, 0, ..., 0) where the axis at the given <paramref name="axisIndex"/> is set to 1.
            </returns>
        </member>
        <member name="P:Atom.Math.Vector.DimensionCount">
            <summary>
            Gets a value that represents the total
            number of elements the Vector has.
            </summary>
            <value>The total number of elements.</value>
        </member>
        <member name="P:Atom.Math.Vector.Item(System.Int32)">
            <summary>
            Gets or sets the element of the Vector at the specified <paramref name="index"/>.
            </summary>
            <param name="index">
            The zero-based index of the element to receive or set.
            </param>
            <returns>
            The element at the specified <paramref name="index"/>.
            </returns>
        </member>
        <member name="P:Atom.Math.Vector.Length">
            <summary>
            Gets or sets the length of the Vector.
            </summary>
            <value>The length (also called magnitude) of the vector.</value>
            <exception cref="T:System.InvalidOperationException">
            Thrown when trying to set a new length on a Vector with a length of zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown when trying to set the length to a negative value.
            </exception>
        </member>
        <member name="P:Atom.Math.Vector.SquaredLength">
            <summary>
            Gets or sets the squared length of the Vector.
            </summary>
            <value>The squared length (also called magnitude) of the vector.</value>
            <exception cref="T:System.InvalidOperationException">
            Thrown when trying to set a new length on a Vector with a length of zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown when trying to set the length to a negative value.
            </exception>
        </member>
        <member name="P:Atom.Math.Vector.Sum">
            <summary>
            Gets the sum of all elements of the <see cref="T:Atom.Math.Vector"/>.
            </summary>
            <value>The elements of the vector summed together.</value>
        </member>
        <member name="M:Atom.Math.Vector.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.Vector"/> class.
            </summary>
            <param name="dimensionCount">
            The number of elements the new Vector can hold.
            </param>
            <exception cref="T:System.ArgumentException">
            If the specified <paramref name="dimensionCount"/> is less than or equal zero.
            </exception>
        </member>
        <member name="M:Atom.Math.Vector.#ctor(Atom.Math.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.Vector"/> class
            by copying the specified Vector.
            </summary>
            <param name="vector">
            The vector to copy.
            </param>
        </member>
        <member name="M:Atom.Math.Vector.#ctor(Atom.Math.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.Vector"/> class
            by copying the specified Vector.
            </summary>
            <param name="vector">
            The vector to copy.
            </param>
        </member>
        <member name="M:Atom.Math.Vector.#ctor(Atom.Math.Vector4)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.Vector"/> class
            by copying the specified Vector.
            </summary>
            <param name="vector">
            The vector to copy.
            </param>
        </member>
        <member name="M:Atom.Math.Vector.#ctor(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.Vector"/> class.
            </summary>
            <param name="elements">
            The elements the new Vector.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="elements"/> is null.
            </exception>
        </member>
        <member name="M:Atom.Math.Vector.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> 
            Initializes a new instance of the <see cref="T:Atom.Math.Vector"/> class; and
            sets the Elements of the new <see cref="T:Atom.Math.Vector"/> to the "Elements"
            array inside the specified <see cref="T:System.Runtime.Serialization.SerializationInfo"/>.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds
            the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that 
            contains contextual information about the source or destination.
            Can be null.
            </param>
        </member>
        <member name="M:Atom.Math.Vector.Normalize">
            <summary>
            Normalizes the Vector, setting its length to one.
            </summary>
        </member>
        <member name="M:Atom.Math.Vector.Normalize(Atom.Math.Vector)">
            <summary>
            Returns the result of normalizing the given Vector.
            </summary>
            <param name="vector">The vector to normalize.</param>
            <returns>
            The result of the operation.
            </returns>
        </member>
        <member name="M:Atom.Math.Vector.Dot(Atom.Math.Vector,Atom.Math.Vector)">
            <summary>
            Returns the dot product of the given Vectors.
            </summary>
            <param name="vectorA">The vector on the left side of the equation.</param>
            <param name="vectorB">The vector on the right side of the equation.</param>
            <returns>
            The dot product.
            </returns> 
            <exception cref="T:System.ArgumentNullException">
            If any of the specified Vectors is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the specified Vectors don't have the same number of elements.
            </exception>
        </member>
        <member name="M:Atom.Math.Vector.Dyadic(Atom.Math.Vector,Atom.Math.Vector)">
            <summary>
            Returns the dyadic product (also called outer/tensor product) of the given N-Vectors. </summary>
            <remarks>
            See http://en.wikipedia.org/wiki/Tensor_product for more information.
            </remarks>
            <param name="left">The first input vector.</param>
            <param name="right">The second input vector.</param>
            <returns> The result of the operation. </returns>
        </member>
        <member name="M:Atom.Math.Vector.Transform(Atom.Math.Vector,Atom.Math.Matrix)">
            <summary>
            Returns the result of transforming the given Vector by the given <see cref="T:Atom.Math.Matrix"/>.
            </summary>
            <param name="vector">
            The vector on the left side.
            </param>
            <param name="matrix">
            The matrix on the right side.
            </param>
            <returns>
            The transformed Vector.
            </returns>
        </member>
        <member name="M:Atom.Math.Vector.Lerp(Atom.Math.Vector,Atom.Math.Vector,System.Single)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="start">
            The source vector that represents the start value.
            </param>
            <param name="end">
            The source vector that represents the end value.
            </param>
            <param name="amount">Value between 0 and 1 indicating the amount of interpolation done.</param>
            <returns>The linear interpolation of the two vectors.</returns>   
            <exception cref="T:System.ArgumentNullException">
            If any of the specified Vectors is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the specified Vectors don't have the same number of elements.
            </exception>
        </member>
        <member name="M:Atom.Math.Vector.SmoothStep(Atom.Math.Vector,Atom.Math.Vector,System.Single)">
            <summary>
            Performs interpolationbetween two values using a cubic equation.
            </summary>
            <param name="start">
            The source vector that represents the start value.
            </param>
            <param name="end">
            The source vector that represents the end value.
            </param>
            <param name="amount">
            The weighting value.
            </param>
            <returns>The interpolated value.</returns>   
            <exception cref="T:System.ArgumentNullException">
            If any of the specified Vectors is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the specified Vectors don't have the same number of elements.
            </exception>
        </member>
        <member name="M:Atom.Math.Vector.Hermite(Atom.Math.Vector,Atom.Math.Vector,Atom.Math.Vector,Atom.Math.Vector,System.Single)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="valueA">
            The first source position vector.
            </param>
            <param name="tangentA">
            The first source tangent vector.
            </param>
            <param name="valueB">
            The second source position vector.
            </param>
            <param name="tangentB">
            The second source tangent vector.
            </param>
            <param name="amount">
            The weighting factor.
            </param>
            <returns>The result of the Hermite spline interpolation.</returns>  
            <exception cref="T:System.ArgumentNullException">
            If any of the specified Vectors is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the specified Vectors don't have the same number of elements.
            </exception>
        </member>
        <member name="M:Atom.Math.Vector.CatmullRom(Atom.Math.Vector,Atom.Math.Vector,Atom.Math.Vector,Atom.Math.Vector,System.Single)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="valueA">
            The first position in the interpolation.
            </param>
            <param name="valueB">
            The second position in the interpolation.
            </param>
            <param name="valueC">
            The third position in the interpolation.
            </param>
            <param name="valueD">
            The fourth position in the interpolation.
            </param>
            <param name="amount">The weighting factor.</param>
            <returns>A new Vector that contains the result of the Catmull-Rom interpolation.</returns>   
            <exception cref="T:System.ArgumentNullException">
            If any of the specified Vectors is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the specified Vectors don't have the same number of elements.
            </exception>
        </member>
        <member name="M:Atom.Math.Vector.Add(Atom.Math.Vector,Atom.Math.Vector)">
            <summary>
            Returns the result of adding the <paramref name="right"/> Vector to the the <paramref name="left"/> Vector.
            </summary>
            <param name="left">The value on the left side of the equation.</param>
            <param name="right">The value on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
            <exception cref="T:System.ArgumentNullException">
            If any of the specified Vectors is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the specified Vectors don't have the same number of elements.
            </exception>
        </member>
        <member name="M:Atom.Math.Vector.Add(Atom.Math.Vector,System.Single)">
            <summary>
            Returns the result of adding the given <paramref name="scalar"/> to the thegiven <paramref name="vector"/>.
            </summary>
            <param name="vector">The vector on the left side of the equation.</param>
            <param name="scalar">The scalar on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
            <exception cref="T:System.ArgumentNullException">
            If the specified Vectors is null.
            </exception>
        </member>
        <member name="M:Atom.Math.Vector.Subtract(Atom.Math.Vector,Atom.Math.Vector)">
            <summary>
            Returns the result of subtracting the <paramref name="right"/> Vector from the the <paramref name="left"/> Vector.
            </summary>
            <param name="left">The value on the left side of the equation.</param>
            <param name="right">The value on the right side of the equation.</param>
            <returns>The result of the operation.</returns>    
            <exception cref="T:System.ArgumentNullException">
            If any of the specified Vectors is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the specified Vectors don't have the same number of elements.
            </exception>
        </member>
        <member name="M:Atom.Math.Vector.Subtract(Atom.Math.Vector,System.Single)">
            <summary>
            Returns the result of subtracting the given <paramref name="scalar"/> from the given <paramref name="vector"/>.
            </summary>
            <param name="vector">The vector on the left side of the equation.</param>
            <param name="scalar">The scalar on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
            <exception cref="T:System.ArgumentNullException">
            If the specified Vectors is null.
            </exception>
        </member>
        <member name="M:Atom.Math.Vector.Negate(Atom.Math.Vector)">
            <summary>
            Returns the result of negating the given <paramref name="vector"/>.
            </summary>
            <param name="vector">The vector.</param>
            <returns>The result of the operation.</returns>
            <exception cref="T:System.ArgumentNullException">
            If the specified Vectors is null.
            </exception>
        </member>
        <member name="M:Atom.Math.Vector.Multiply(Atom.Math.Vector,System.Single)">
            <summary>
            Returns the result of multiplcing the given <paramref name="vector"/> by the given <paramref name="scalar"/>.
            </summary>
            <param name="vector">The vector on the left side of the equation.</param>
            <param name="scalar">The scalar on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
            <exception cref="T:System.ArgumentNullException">
            If the specified Vectors is null.
            </exception>
        </member>
        <member name="M:Atom.Math.Vector.Multiply(Atom.Math.Vector,Atom.Math.Vector)">
            <summary>
            Returns the result of multiplying the left Vector by the right Vector component-by-component.
            </summary>
            <param name="left">The vector on the left side of the equation.</param>
            <param name="right">The vector on the right side of the equation.</param>
            <returns>The result of the operation.</returns>  
            <exception cref="T:System.ArgumentNullException">
            If any of the specified Vectors is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the specified Vectors don't have the same number of elements.
            </exception>
        </member>
        <member name="M:Atom.Math.Vector.Divide(Atom.Math.Vector,System.Single)">
            <summary>
            Returns the result of dividing the given <paramref name="vector"/> by the given <paramref name="scalar"/>.
            </summary>
            <param name="vector">The vector on the left side of the equation.</param>
            <param name="scalar">The scalar on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
            <exception cref="T:System.ArgumentNullException">
            If the specified Vectors is null.
            </exception>
        </member>
        <member name="M:Atom.Math.Vector.Divide(Atom.Math.Vector,Atom.Math.Vector)">
            <summary>
            Returns the result of dividing the left Vector through the right Vector element-by-element.
            </summary>
            <param name="left">The vector on the left side of the equation.</param>
            <param name="right">The vector on the right side of the equation.</param>
            <returns>The result of the operation.</returns> 
            <exception cref="T:System.ArgumentNullException">
            If any of the specified Vectors is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the specified Vectors don't have the same number of elements.
            </exception>
        </member>
        <member name="M:Atom.Math.Vector.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/>
            over the elements of the <see cref="T:Atom.Math.Vector"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1"/>
            over the elements of the <see cref="T:Atom.Math.Vector"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.Vector.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/>
            over the elements of the <see cref="T:Atom.Math.Vector"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1"/>
            over the elements of the <see cref="T:Atom.Math.Vector"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.Vector.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            with the data needed to serialize the <see cref="T:Atom.Math.Vector"/>.
            </summary>
            <remarks>
            elements component: "Elements"
            </remarks>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            to populate with data.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the given info is null.
            </exception>
            <param name="context"> 
            The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>)
            for this serialization.
            </param>
        </member>
        <member name="M:Atom.Math.Vector.Equals(Atom.Math.Vector)">
            <summary>
            Returns whether the given <see cref="T:Atom.Math.Vector"/> has the
            same indices set as this Vector.
            </summary>
            <param name="other">The Vector to test against. Can be null.</param>
            <returns>true if the indices are equal; otherwise false.</returns>
        </member>
        <member name="M:Atom.Math.Vector.Equals(System.Object)">
            <summary>
            Returns whether the given <see cref="T:System.Object"/> is equal to this Vector.
            </summary>
            <param name="obj">The Object to test against.</param>
            <returns>true if they are equal; otherwise false.</returns>
        </member>
        <member name="M:Atom.Math.Vector.ToString">
            <summary>
            Overriden to return a human-readable text representation of the Vector.
            </summary>
            <returns>A human-readable text representation of the Vector.</returns>
        </member>
        <member name="M:Atom.Math.Vector.ToString(System.IFormatProvider)">
            <summary>
            Returns a human-readable text representation of the Vector.
            </summary>
            <param name="formatProvider">
            The <see cref="T:System.IFormatProvider"/> that supplies culture specific formatting information.
            </param>
            <returns>A human-readable text representation of the Vector.</returns>
        </member>
        <member name="M:Atom.Math.Vector.GetHashCode">
            <summary>
            Gets the hash code of the <see cref="T:Atom.Math.Vector"/>.
            </summary>
            <returns>
            The hash code.
            </returns>
        </member>
        <member name="M:Atom.Math.Vector.Max(Atom.Math.Vector,Atom.Math.Vector)">
            <summary>
            Returns a vector that contains the highest value from
            each matching pair of components of the given Vectors.
            </summary>
            <param name="vectorA">The first vector.</param>
            <param name="vectorB">The second vector.</param>
            <returns>
            The maximized vector.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If any of the two specified Vectors is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the specified Vectors don't have the same number of elements.
            </exception>
        </member>
        <member name="M:Atom.Math.Vector.Min(Atom.Math.Vector,Atom.Math.Vector)">
            <summary>
            Returns a Vector that contains the lowest value from
            each matching pair of components of the given Vectors.
            </summary>
            <param name="vectorA">The first vector.</param>
            <param name="vectorB">The second vector.</param>
            <returns>
            The minimized vector.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If any of the two specified Vectors is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the specified Vectors don't have the same number of elements.
            </exception>
        </member>
        <member name="M:Atom.Math.Vector.Average(Atom.Math.Vector,Atom.Math.Vector)">
            <summary>
            Returns the average of the given Vectors.
            </summary>
            <param name="vectorA">The first vector.</param>
            <param name="vectorB">The second vector.</param>
            <returns>The average of the given Vectors.</returns> 
            <exception cref="T:System.ArgumentNullException">
            If any of the two specified Vectors is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the specified Vectors don't have the same number of elements.
            </exception>
        </member>
        <member name="M:Atom.Math.Vector.Distance(Atom.Math.Vector,Atom.Math.Vector)">
            <summary>
            Returns the distance between the two specified Vectors.
            </summary>
            <param name="vectorA">The first Vector.</param>
            <param name="vectorB">The second Vector.</param>
            <returns>
            The distance from the <paramref name="vectorA"/> to <paramref name="vectorB"/>.
            </returns>  
            <exception cref="T:System.ArgumentNullException">
            If any of the two specified Vectors is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the specified Vectors don't have the same number of elements.
            </exception>
        </member>
        <member name="M:Atom.Math.Vector.DistanceSquared(Atom.Math.Vector,Atom.Math.Vector)">
            <summary>
            Returns the squared distance between the two specified Vectors.
            </summary>
            <param name="vectorA">The first Vector.</param>
            <param name="vectorB">The second Vector.</param>
            <returns>
            The distance from the <paramref name="vectorA"/> to <paramref name="vectorB"/>.
            </returns>   
            <exception cref="T:System.ArgumentNullException">
            If any of the two specified Vectors is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the specified Vectors don't have the same number of elements.
            </exception>
        </member>
        <member name="M:Atom.Math.Vector.Clamp(Atom.Math.Vector,Atom.Math.Vector,Atom.Math.Vector)">
            <summary>
            Returns the result of clamping the given Vector to be in the range
            defined by <paramref name="min"/> and <paramref name="max"/>.
            </summary>
            <param name="vector">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>
            The clamped value.
            </returns>   
            <exception cref="T:System.ArgumentNullException">
            If any of the specified Vectors is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the specified Vectors don't have the same number of elements.
            </exception>
        </member>
        <member name="M:Atom.Math.Vector.ToMatrix">
            <summary>
            Returns this <see cref="T:Atom.Math.Vector"/> represented as a new <see cref="T:Atom.Math.Matrix"/>.
            </summary>
            <returns>
            A new <see cref="T:Atom.Math.Matrix"/> with N rows and 1 column, where N is this vector's DimensionCount.
            </returns>
        </member>
        <member name="M:Atom.Math.Vector.op_Addition(Atom.Math.Vector,Atom.Math.Vector)">
            <summary>
            Returns the result of adding the <paramref name="right"/> Vector to the the <paramref name="left"/> Vector.
            </summary>
            <param name="left">The value on the left side of the equation.</param>
            <param name="right">The value on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
            <exception cref="T:System.ArgumentNullException">
            If any of the specified Vectors is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the specified Vectors don't have the same number of elements.
            </exception>
        </member>
        <member name="M:Atom.Math.Vector.op_Addition(Atom.Math.Vector,System.Single)">
            <summary>
            Returns the result of adding the given <paramref name="scalar"/> to the thegiven <paramref name="vector"/>.
            </summary>
            <param name="vector">The vector on the left side of the equation.</param>
            <param name="scalar">The scalar on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
            <exception cref="T:System.ArgumentNullException">
            If the specified Vectors is null.
            </exception>
        </member>
        <member name="M:Atom.Math.Vector.op_Subtraction(Atom.Math.Vector,Atom.Math.Vector)">
            <summary>
            Returns the result of subtracting the <paramref name="right"/> Vector from the the <paramref name="left"/> Vector.
            </summary>
            <param name="left">The value on the left side of the equation.</param>
            <param name="right">The value on the right side of the equation.</param>
            <returns>The result of the operation.</returns>    
            <exception cref="T:System.ArgumentNullException">
            If any of the specified Vectors is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the specified Vectors don't have the same number of elements.
            </exception>
        </member>
        <member name="M:Atom.Math.Vector.op_Subtraction(Atom.Math.Vector,System.Single)">
            <summary>
            Returns the result of subtracting the given <paramref name="scalar"/> from the given <paramref name="vector"/>.
            </summary>
            <param name="vector">The vector on the left side of the equation.</param>
            <param name="scalar">The scalar on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
            <exception cref="T:System.ArgumentNullException">
            If the specified Vectors is null.
            </exception>
        </member>
        <member name="M:Atom.Math.Vector.op_UnaryNegation(Atom.Math.Vector)">
            <summary>
            Returns the result of negating the given <paramref name="vector"/>.
            </summary>
            <param name="vector">The vector.</param>
            <returns>The result of the operation.</returns>
            <exception cref="T:System.ArgumentNullException">
            If the specified Vectors is null.
            </exception>
        </member>
        <member name="M:Atom.Math.Vector.op_Multiply(Atom.Math.Vector,System.Single)">
            <summary>
            Returns the result of multiplcing the given <paramref name="vector"/> by the given <paramref name="scalar"/>.
            </summary>
            <param name="vector">The vector on the left side of the equation.</param>
            <param name="scalar">The scalar on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
            <exception cref="T:System.ArgumentNullException">
            If the specified Vectors is null.
            </exception>
        </member>
        <member name="M:Atom.Math.Vector.op_Multiply(Atom.Math.Vector,Atom.Math.Vector)">
            <summary>
            Returns the result of multiplying the left Vector by the right Vector component-by-component.
            </summary>
            <param name="left">The vector on the left side of the equation.</param>
            <param name="right">The vector on the right side of the equation.</param>
            <returns>The result of the operation.</returns>  
            <exception cref="T:System.ArgumentNullException">
            If any of the specified Vectors is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the specified Vectors don't have the same number of elements.
            </exception>
        </member>
        <member name="M:Atom.Math.Vector.op_Division(Atom.Math.Vector,System.Single)">
            <summary>
            Returns the result of dividing the given <paramref name="vector"/> by the given <paramref name="scalar"/>.
            </summary>
            <param name="vector">The vector on the left side of the equation.</param>
            <param name="scalar">The scalar on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
            <exception cref="T:System.ArgumentNullException">
            If the specified Vectors is null.
            </exception>
        </member>
        <member name="M:Atom.Math.Vector.op_Division(Atom.Math.Vector,Atom.Math.Vector)">
            <summary>
            Returns the result of dividing the left Vector through the right Vector element-by-element.
            </summary>
            <param name="left">The vector on the left side of the equation.</param>
            <param name="right">The vector on the right side of the equation.</param>
            <returns>The result of the operation.</returns> 
            <exception cref="T:System.ArgumentNullException">
            If any of the specified Vectors is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the specified Vectors don't have the same number of elements.
            </exception>
        </member>
        <member name="M:Atom.Math.Vector.op_Equality(Atom.Math.Vector,Atom.Math.Vector)">
            <summary>
            Returns whether given <see cref="T:Atom.Math.Vector"/> instances are equal.
            </summary>
            <param name="left">The Vector on the left side of the equation.</param>
            <param name="right">The Vector on the right side of the equation.</param>
            <returns>
            Returns <see langword="true"/> if they are equal; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.Vector.op_Inequality(Atom.Math.Vector,Atom.Math.Vector)">
            <summary>
            Returns whether given <see cref="T:Atom.Math.Vector"/> instances are not equal.
            </summary>
            <param name="left">The Vector on the left side of the equation.</param>
            <param name="right">The Vector on the right side of the equation.</param>
            <returns>
            Returns <see langword="true"/> if they are not equal; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="F:Atom.Math.Vector.elements">
            <summary>
            The elements of the Vector.
            </summary>
        </member>
        <member name="T:Atom.Math.Vector2">
            <summary>
            Represents a two dimensional single-precision floating-vector Vector.
            </summary>
        </member>
        <member name="F:Atom.Math.Vector2.X">
            <summary>
            The X-coordinate of the Vector.
            </summary>
        </member>
        <member name="F:Atom.Math.Vector2.Y">
            <summary>
            The Y-coordinate of the Vector.
            </summary>
        </member>
        <member name="P:Atom.Math.Vector2.Zero">
            <summary>
            Gets a <see cref="T:Atom.Math.Vector2"/> with all its components set to zero.
            </summary>
            <value>The vector (0, 0).</value>
        </member>
        <member name="P:Atom.Math.Vector2.One">
            <summary>
            Gets a <see cref="T:Atom.Math.Vector2"/> with all its components set to one.
            </summary>
            <value>The vector (1, 1).</value>
        </member>
        <member name="P:Atom.Math.Vector2.UnitX">
            <summary>
            Gets the unit <see cref="T:Atom.Math.Vector2"/> for the x-axis.
            </summary>
            <value>The vector (1, 0).</value>
        </member>
        <member name="P:Atom.Math.Vector2.UnitY">
            <summary>
            Gets the unit <see cref="T:Atom.Math.Vector2"/> for the y-axis.
            </summary>
            <value>The vector (0, 1).</value>
        </member>
        <member name="P:Atom.Math.Vector2.Length">
            <summary>
            Gets or sets the length of the Vector.
            </summary>
            <value>The length (also called magnitude) of the vector.</value>
            <exception cref="T:System.InvalidOperationException">
            Thrown when trying to set a new length on a Vector with a length of zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown when trying to set the length to a negative value.
            </exception>
        </member>
        <member name="P:Atom.Math.Vector2.SquaredLength">
            <summary>
            Gets or sets the squared length of the Vector.
            </summary>
            <value>The squared length (also called magnitude) of the vector.</value>
            <exception cref="T:System.InvalidOperationException">
            Thrown when trying to set a new length on a Vector with a length of zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown when trying to set the length to a negative value.
            </exception>
        </member>
        <member name="P:Atom.Math.Vector2.Direction">
            <summary>
            Gets the direction this Vector2 is pointing at.
            </summary>
            <value>
            This vector, normalized.
            </value>
        </member>
        <member name="P:Atom.Math.Vector2.Perpendicular">
            <summary>
            Gets the Vector2 that is perpendicular to this Vector2.
            </summary>
        </member>
        <member name="P:Atom.Math.Vector2.Item(Atom.Math.Axis2)">
            <summary>
            Gets or sets the value at the given axis.
            </summary>
            <param name="axis">
            The axis whose value should be get or set.
            </param>
            <returns>
            The value at the given axis.
            </returns>
        </member>
        <member name="M:Atom.Math.Vector2.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.Vector2"/> struct.
            </summary>
            <param name="x">The X-coordinate of the new Vector.</param>
            <param name="y">The Y-coordinate of the new Vector.</param>
        </member>
        <member name="M:Atom.Math.Vector2.FromAxis(System.Single,Atom.Math.Axis2)">
            <summary>
            Creates a new instance of the Vector2 structure that has set the specified axis
            to the specified value.
            </summary>
            <example>
            Vector2 unitX = Vector2.FromAxis( 1.0f, Axis2.X ); // (1 0)
            Vector2 unitY = Vector2.FromAxis( 1.0f, Axis2.Y ); // (0 1)
            Vector2 zero = Vector2.FromAxis( 1.0f, Axis2.None ); // (0 0)
            </example>
            <param name="value">
            The value of the axis.
            </param>
            <param name="axis">
            The axis to initialize.
            </param>
            <returns>
            The newly created Vector2.
            </returns>
        </member>
        <member name="M:Atom.Math.Vector2.FromAngle(System.Single)">
            <summary>
            Creates a new Vector2 that represents an arrow into the specified direction.
            </summary>
            <param name="angle">
            The angle of the arrow.
            </param>
            <returns>
            The newly created Vector2.
            </returns>
        </member>
        <member name="M:Atom.Math.Vector2.Floor(Atom.Math.Vector2)">
            <summary>
            Returns the given vector with each element floored.
            </summary>
            <param name="vector">
            The input vector.
            </param>
            <returns>
            The floored output vector.
            </returns>
        </member>
        <member name="M:Atom.Math.Vector2.Dot(Atom.Math.Vector2,Atom.Math.Vector2)">
            <summary>
            Returns the dot product of the given Vectors.
            </summary>
            <param name="vectorA">The vector on the left side of the equation.</param>
            <param name="vectorB">The vector on the right side of the equation.</param>
            <returns>
            The dot product.
            </returns>
        </member>
        <member name="M:Atom.Math.Vector2.Dot(Atom.Math.Vector2@,Atom.Math.Vector2@,System.Single@)">
            <summary>
            Stores the dot product of the given Vectors in the given <paramref name="result"/> value.
            </summary>
            <param name="vectorA">The vector on the left side of the equation. This value will not be modified by this method.</param>
            <param name="vectorB">The vector on the right side of the equation. This value will not be modified by this method.</param>
            <param name="result">
            This value will contain the result of the operation.
            </param>
        </member>
        <member name="M:Atom.Math.Vector2.DotPerp(Atom.Math.Vector2,Atom.Math.Vector2)">
            <summary>
            Returns the perpendicular dot product of the given Vectors.
            </summary>
            <param name="vectorA">The vector on the left side of the equation.</param>
            <param name="vectorB">The vector on the right side of the equation.</param>
            <returns>
            The dot product.
            </returns>
        </member>
        <member name="M:Atom.Math.Vector2.DotPerp(Atom.Math.Vector2@,Atom.Math.Vector2@,System.Single@)">
            <summary>
            Stores the perpendicular dot product of the given Vectors in the given <paramref name="result"/> value.
            </summary>
            <param name="vectorA">The vector on the left side of the equation. This value will not be modified by this method.</param>
            <param name="vectorB">The vector on the right side of the equation. This value will not be modified by this method.</param>
            <param name="result">
            This value will contain the result of the operation.
            </param>
        </member>
        <member name="M:Atom.Math.Vector2.Dyadic(Atom.Math.Vector2,Atom.Math.Vector2)">
            <summary>
            Returns the tensor/dyadic product (also called outer product) of the given Vectors.. </summary>
            <remarks>
            See http://en.wikipedia.org/wiki/Tensor_product for more information.
            </remarks>
            <param name="left">The first input vector.</param>
            <param name="right">The second input vector.</param>
            <returns> The result of the operation. </returns>
        </member>
        <member name="M:Atom.Math.Vector2.Dyadic(Atom.Math.Vector2@,Atom.Math.Vector2@,Atom.Math.Matrix2@)">
            <summary>
            Returns the tensor/dyadic product (also called outer product) of the given Vectors.. </summary>
            <remarks>
            See http://en.wikipedia.org/wiki/Tensor_product for more information.
            </remarks>
            <param name="left">The first input vector. This value will not be modified by this method.</param>
            <param name="right">The second input vector. This value will not be modified by this method.</param>
            <param name="result"> Will contain the result of the operation. </param>
        </member>
        <member name="M:Atom.Math.Vector2.Cross(Atom.Math.Vector2,Atom.Math.Vector2)">
            <summary>
            Returns the cross product between the given Vectors.
            </summary>
            <returns>
            The cross product in 2d is not a real cross-product
            but more a perpendicular dot product.
            </returns>
            <param name="vectorA">The vector on the left side of the equation.</param>
            <param name="vectorB">The vector on the right side of the equation.</param>
        </member>
        <member name="M:Atom.Math.Vector2.Cross(Atom.Math.Vector2@,Atom.Math.Vector2@,System.Single@)">
            <summary>
            Returns the cross product between the given Vectors.
            </summary>
            <param name="vectorA">The vector on the left side of the equation. This value will not be modified by this method.</param>
            <param name="vectorB">The vector on the right side of the equation. This value will not be modified by this method.</param>
            <param name="result">
            Will contain the result of the operation.
            The cross product in 2d is not a real cross-product
            but more a perpendicular dot product.
            </param>
        </member>
        <member name="M:Atom.Math.Vector2.Cross(Atom.Math.Vector2,System.Single)">
            <summary>
            Returns the cross product between the given <see cref="T:Atom.Math.Vector2"/> and the given scalar.
            </summary>
            <param name="vectorA">The vector on the left side of the equation.</param>
            <param name="scalarB">The scalar on the right side of the equation.</param>
            <returns>The result of this operation.</returns>
        </member>
        <member name="M:Atom.Math.Vector2.Cross(Atom.Math.Vector2@,System.Single,Atom.Math.Vector2@)">
            <summary>
            Stores the cross product between the given <see cref="T:Atom.Math.Vector2"/> and the given scalar
            in the given <paramref name="result"/> value.
            </summary>
            <param name="vectorA">The vector on the left side of the equation. This value will not be modified by this method.</param>
            <param name="scalarB">The scalar on the right side of the equation.</param>
            <param name="result">Will contain the result of this operation.</param>
        </member>
        <member name="M:Atom.Math.Vector2.Cross(System.Single,Atom.Math.Vector2)">
            <summary>
            Returns the cross product between the given scalar and the given <see cref="T:Atom.Math.Vector2"/>.
            </summary>
            <param name="scalarA">The scalar on the left side of the equation.</param>
            <param name="vectorB">The vector on the right side of the equation.</param>
            <returns>The result of this operation.</returns>
        </member>
        <member name="M:Atom.Math.Vector2.Cross(System.Single,Atom.Math.Vector2@,Atom.Math.Vector2@)">
            <summary>
            Stores the cross product between the given scalar and the given <see cref="T:Atom.Math.Vector2"/>
            in the given <paramref name="result"/> value.
            </summary>
            <param name="scalarA">The scalar on the left side of the equation.</param>
            <param name="vectorB">The vector on the right side of the equation. This value will not be modified by this method.</param>
            <param name="result">Will contain the result of the operation.</param>
        </member>
        <member name="M:Atom.Math.Vector2.Normalize">
            <summary>
            Normalizes the Vector, setting its length to one.
            </summary>
        </member>
        <member name="M:Atom.Math.Vector2.Normalize(Atom.Math.Vector2)">
            <summary>
            Returns the result of normalizing the given Vector.
            </summary>
            <param name="vector">The vector to normalize.</param>
            <returns>
            The result of the operation.
            </returns>
        </member>
        <member name="M:Atom.Math.Vector2.Normalize(Atom.Math.Vector2@,Atom.Math.Vector2@)">
            <summary>
            Stores the result of normalizing the given Vector in the given <paramref name="result"/> Vector.
            </summary>
            <param name="vector">The vector to normalize. This value will not be modified by this method.</param>
            <param name="result">This value will store the result of the operation.</param>
        </member>
        <member name="M:Atom.Math.Vector2.Rotate(System.Single)">
            <summary> 
            Rotates the Vector around the Orgin by the given <paramref name="angle"/>.
            </summary>
            <param name="angle"> 
            The angle to rotate in radians.
            </param>
        </member>
        <member name="M:Atom.Math.Vector2.Rotate(System.Single,System.Single)">
            <summary> 
            Rotates the Vector around the Orgin by the angle
            given with the specified <paramref name="cos"/>/<paramref name="sin"/>.
            </summary>
            <param name="cos"> 
            The cosinus of the angle to rotate.
            </param>
            <param name="sin"> 
            The sinus of the angle to rotate.
            </param>
        </member>
        <member name="M:Atom.Math.Vector2.Rotate(Atom.Math.Vector2,System.Single)">
            <summary> 
            Rotates the Vector around the specified <paramref name="center"/> by the specified <paramref name="angle"/>.
            </summary>
            <param name="center">
            The center to rotate around.
            </param>
            <param name="angle"> 
            The angle to rotate in radians.
            </param>
        </member>
        <member name="M:Atom.Math.Vector2.Rotate(Atom.Math.Vector2,System.Single,System.Single)">
            <summary> 
            Rotates the Vector around the specified <paramref name="center"/> by the angle 
            given with the specified <paramref name="cos"/>/<paramref name="sin"/>.
            </summary>
            <param name="center">
            The center to rotate around.
            </param>
            <param name="cos"> 
            The cosinus of the angle to rotate.
            </param>
            <param name="sin"> 
            The sinus of the angle to rotate.
            </param>
        </member>
        <member name="M:Atom.Math.Vector2.Reflect(Atom.Math.Vector2,Atom.Math.Vector2)">
            <summary>
            Returns the reflect vector of the given vector and normal.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="normal">The normal.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Vector2.Reflect(Atom.Math.Vector2@,Atom.Math.Vector2@,Atom.Math.Vector2@)">
            <summary>
            Stores the reflect vector of the given vector and normal in the given <paramref name="result"/> vector.
            </summary>
            <param name="vector">The source vector. This value will not be modified by this method.</param>
            <param name="normal">The normal. This value will not be modified by this method.</param>
            <param name="result">Will contain the result of the operation.</param>
        </member>
        <member name="M:Atom.Math.Vector2.Angle(Atom.Math.Vector2,Atom.Math.Vector2)">
            <summary> 
            Returns the angle between the specified Vectors. 
            </summary>
            <param name="from">
            The start vector. Must be normalized.
            </param>
            <param name="to">
            The end vector. Must be normalized.
            </param>
            <returns> The angle in radians. </returns>
        </member>
        <member name="M:Atom.Math.Vector2.Angle(Atom.Math.Vector2@,Atom.Math.Vector2@,System.Single@)">
            <summary> 
            Stores the angle between the specified Vectors in the given result value. 
            </summary>
            <param name="from">
            The start vector. Must be normalized.
            This value will not be modified by this method.
            </param>
            <param name="to">
            The end vector. Must be normalized.
            This value will not be modified by this method.
            </param>
            <param name="result">
            Will contain the angle in radians.
            </param>
        </member>
        <member name="M:Atom.Math.Vector2.Barycentric(Atom.Math.Vector2,Atom.Math.Vector2,Atom.Math.Vector2,System.Single,System.Single)">
            <summary>
            Returns a Vector2 containing the 2D Cartesian coordinates of a vector
            specified in barycentric (areal) coordinates relative to a 2D triangle.
            </summary>
            <param name="value1">
            A Vector2 containing the 2D Cartesian coordinates of vertex 1 of the triangle.
            </param>
            <param name="value2">
            A Vector2 containing the 2D Cartesian coordinates of vertex 2 of the triangle.
            </param>
            <param name="value3">
            A Vector2 containing the 2D Cartesian coordinates of vertex 3 of the triangle.
            </param>
            <param name="amount1">
            Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in value2).
            </param>
            <param name="amount2">
            Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in value3).
            </param>
            <returns>
            A new Vector2 containing the 2D Cartesian coordinates of the specified vector.
            </returns>
        </member>
        <member name="M:Atom.Math.Vector2.Barycentric(Atom.Math.Vector2@,Atom.Math.Vector2@,Atom.Math.Vector2@,System.Single,System.Single,Atom.Math.Vector2@)">
            <summary>
            Stores the 2D Cartesian coordinates of a vector
            specified in barycentric (areal) coordinates relative to a 2D triangle
            within the given result Vector.
            </summary>
            <param name="value1">
            A Vector2 containing the 2D Cartesian coordinates of vertex 1 of the triangle.
            This value will not be modified by this method.
            </param>
            <param name="value2">
            A Vector2 containing the 2D Cartesian coordinates of vertex 2 of the triangle.
            This value will not be modified by this method.
            </param>
            <param name="value3">
            A Vector2 containing the 2D Cartesian coordinates of vertex 3 of the triangle.
            This value will not be modified by this method.
            </param>
            <param name="amount1">
            Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in value2).
            This value will not be modified by this method.
            </param>
            <param name="amount2">
            Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in value3).
            This value will not be modified by this method.
            </param>
            <param name="result">
            Will containin the 2D Cartesian coordinates of the specified vector.
            </param>
        </member>
        <member name="M:Atom.Math.Vector2.Project(Atom.Math.Vector2,Atom.Math.Vector2)">
            <summary>
            Projects the specified Vector onto the other specified Vector.
            </summary>
            <param name="vector">The vector to project.</param>
            <param name="onTo">The vector to project onto.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Vector2.Project(Atom.Math.Vector2@,Atom.Math.Vector2@,Atom.Math.Vector2@)">
            <summary>
            Projects the specified Vector onto the other specified Vector.
            </summary>
            <param name="vector">
            The vector to project. This value will not be modified by this method.
            </param>
            <param name="onTo">
            The vector to project onto. This value will not be modified by this method.
            </param>
            <param name="result">
            Will contain the result of the operation.
            </param>
        </member>
        <member name="M:Atom.Math.Vector2.Transform(Atom.Math.Vector2,Atom.Math.Matrix2)">
            <summary>
            Transforms a Vector2 by the given Matrix2.
            </summary>
            <param name="vector">The source Vector2.</param>
            <param name="matrix">The transformation Matrix2.</param>
            <returns>The Vector2 resulting from the transformation.</returns>
        </member>
        <member name="M:Atom.Math.Vector2.Transform(Atom.Math.Vector2@,Atom.Math.Matrix2@,Atom.Math.Vector2@)">
            <summary>
            Transforms a Vector2 by the given result.
            </summary>
            <param name="vector">The source Vector2.</param>
            <param name="matrix">The transformation result.</param>
            <param name="result">The Vector2 resulting from the transformation.</param>
        </member>
        <member name="M:Atom.Math.Vector2.Transform(Atom.Math.Vector2,Atom.Math.Matrix4)">
            <summary>
            Transforms a Vector2 by the given result.
            </summary>
            <param name="vector">The source Vector2.</param>
            <param name="matrix">The transformation result.</param>
            <returns>The Vector2 resulting from the transformation.</returns>
        </member>
        <member name="M:Atom.Math.Vector2.Transform(Atom.Math.Vector2@,Atom.Math.Matrix4@,Atom.Math.Vector2@)">
            <summary>
            Transforms a Vector2 by the given result.
            </summary>
            <param name="vector">The source Vector2.</param>
            <param name="matrix">The transformation result.</param>
            <param name="result">The Vector2 resulting from the transformation.</param>
        </member>
        <member name="M:Atom.Math.Vector2.TransformNormal(Atom.Math.Vector2,Atom.Math.Matrix4)">
            <summary>Transforms a 2D vector normal by a matrix.</summary>
            <param name="normal">The source vector.</param>
            <param name="matrix">The transformation matrix.</param>
            <returns>The transformed normal.</returns>
        </member>
        <member name="M:Atom.Math.Vector2.TransformNormal(Atom.Math.Vector2@,Atom.Math.Matrix4@,Atom.Math.Vector2@)">
            <summary>Transforms a vector normal by a matrix.</summary>
            <param name="normal">The source vector.</param>
            <param name="matrix">The transformation matrix.</param>
            <param name="result">The Vector2 resulting from the transformation.</param>
        </member>
        <member name="M:Atom.Math.Vector2.Transform(Atom.Math.Vector2,Atom.Math.Quaternion)">
            <summary>Transforms a single Vector2, or the vector normal (x, y, 0, 0), by a specified <see cref="T:Atom.Math.Quaternion"/> rotation.</summary>
            <param name="vector">The vector to rotate.</param>
            <param name="rotation">The Quaternion rotation to apply.</param>
            <returns>Returns a new Vector2 containing the result of the rotation.</returns>
        </member>
        <member name="M:Atom.Math.Vector2.Transform(Atom.Math.Vector2@,Atom.Math.Quaternion@,Atom.Math.Vector2@)">
            <summary>
            Transforms a Vector2, or the vector normal (x, y, 0, 0), by a specified Quaternion rotation.
            </summary>
            <param name="vector">The vector to rotate.</param>
            <param name="rotation">The Quaternion rotation to apply.</param>
            <param name="result">An existing Vector2 filled in with the result of the rotation.</param>
        </member>
        <member name="M:Atom.Math.Vector2.Transform(Atom.Math.Vector2[],Atom.Math.Matrix4@,Atom.Math.Vector2[])">
            <summary>Transforms an array of Vector2s by a specified result.</summary>
            <param name="sourceArray">The array of Vector2s to transform.</param>
            <param name="matrix">The transform result to apply.</param>
            <param name="destinationArray">An existing array into which the transformed Vector2s are written.</param>
        </member>
        <member name="M:Atom.Math.Vector2.Transform(Atom.Math.Vector2[],System.Int32,Atom.Math.Matrix4@,Atom.Math.Vector2[],System.Int32,System.Int32)">
            <summary>
            Transforms a specified range in an array of Vector2s by a specified result and places the results in a specified range in a destination array.
            </summary>
            <param name="sourceArray">The source array.</param>
            <param name="sourceIndex">The index of the first Vector2 to transform in the source array.</param>
            <param name="matrix">The result to transform by.</param>
            <param name="destinationArray">The destination array into which the resulting Vector2s will be written.</param>
            <param name="destinationIndex">The index of the position in the destination array where the first result Vector2 should be written.</param>
            <param name="length">The number of Vector2s to be transformed.</param>
        </member>
        <member name="M:Atom.Math.Vector2.TransformNormal(Atom.Math.Vector2[],Atom.Math.Matrix4@,Atom.Math.Vector2[])">
            <summary>
            Transforms an array of Vector2 vector normals by a specified result.
            </summary>
            <param name="sourceArray">The array of vector normals to transform.</param>
            <param name="matrix">The transform result to apply.</param>
            <param name="destinationArray">An existing array into which the transformed vector normals are written.</param>
        </member>
        <member name="M:Atom.Math.Vector2.TransformNormal(Atom.Math.Vector2[],System.Int32,Atom.Math.Matrix4@,Atom.Math.Vector2[],System.Int32,System.Int32)">
            <summary>
            Transforms a specified range in an array of Vector2 vector normals by
            a specified result and places the results in a specified range in a destination array.
            </summary>
            <param name="sourceArray">The source array.</param>
            <param name="sourceIndex">The index of the first Vector2 to transform in the source array.</param>
            <param name="matrix">The result to apply.</param>
            <param name="destinationArray">The destination array into which the resulting Vector2s are written.</param>
            <param name="destinationIndex">The index of the position in the destination array where the first result Vector2 should be written.</param>
            <param name="length">The number of vector normals to be transformed.</param>
        </member>
        <member name="M:Atom.Math.Vector2.Transform(Atom.Math.Vector2[],Atom.Math.Quaternion@,Atom.Math.Vector2[])">
            <summary>
            Transforms an array of Vector2s by a specified Quaternion.
            </summary>
            <param name="sourceArray">The array of Vector2s to transform.</param>
            <param name="rotation">The transform result to use.</param>
            <param name="destinationArray">An existing array into which the transformed Vector2s are written.</param>
        </member>
        <member name="M:Atom.Math.Vector2.Transform(Atom.Math.Vector2[],System.Int32,Atom.Math.Quaternion@,Atom.Math.Vector2[],System.Int32,System.Int32)">
            <summary>
            Transforms a specified range in an array of Vector2s by a specified Quaternion and places the results in a specified range in a destination array.
            </summary>
            <param name="sourceArray">The source array.</param>
            <param name="sourceIndex">The index of the first Vector2 to transform in the source array.</param>
            <param name="rotation">The Quaternion rotation to apply.</param>
            <param name="destinationArray">The destination array into which the resulting Vector2s are written.</param>
            <param name="destinationIndex">The index of the position in the destination array where the first result Vector2 should be written.</param>
            <param name="length">The number of Vector2s to be transformed.</param>
        </member>
        <member name="M:Atom.Math.Vector2.Add(Atom.Math.Vector2,Atom.Math.Vector2)">
            <summary>
            Returns the result of adding the <paramref name="right"/> Vector to the <paramref name="left"/> Vector.
            </summary>
            <param name="left">The value on the left side of the equation.</param>
            <param name="right">The value on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Vector2.Add(Atom.Math.Vector2@,Atom.Math.Vector2@,Atom.Math.Vector2@)">
            <summary>
            Stores the result of adding the <paramref name="right"/> Vector to the <paramref name="left"/> Vector
            in the given Vector.
            </summary>
            <param name="left">The value on the left side of the equation. This value will not be modified by this method.</param>
            <param name="right">The value on the right side of the equation. This value will not be modified by this method.</param>
            <param name="result">Will contain the result fo the operation.</param>
        </member>
        <member name="M:Atom.Math.Vector2.Add(Atom.Math.Vector2,System.Single)">
            <summary>
            Returns the result of adding the given <paramref name="scalar"/> to the given <paramref name="vector"/>.
            </summary>
            <param name="vector">The vector on the left side of the equation.</param>
            <param name="scalar">The scalar on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Vector2.Add(Atom.Math.Vector2@,System.Single,Atom.Math.Vector2@)">
            <summary>
            Stores the result of adding the given <paramref name="scalar"/> to the given <paramref name="vector"/>
            in the given Vector.
            </summary>
            <param name="vector">The vector on the left side of the equation. This value will not be modified by this method.</param>
            <param name="scalar">The scalar on the right side of the equation. </param>
            <param name="result">Will contain the result fo the operation.</param>
        </member>
        <member name="M:Atom.Math.Vector2.Plus(Atom.Math.Vector2)">
            <summary>
            This method returns the specified Vector.
            </summary>
            <remarks>
            Is equal to "+vector".
            </remarks>
            <param name="vector">The input vector.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Vector2.Plus(Atom.Math.Vector2@,Atom.Math.Vector2@)">
            <summary>
            This method stores the specified Vector in the specified result value.
            </summary>
            <remarks>
            Is equal to "+vector".
            </remarks>
            <param name="vector">The input vector.</param>
            <param name="result">Will contain the result of the operation.</param>
        </member>
        <member name="M:Atom.Math.Vector2.Subtract(Atom.Math.Vector2,Atom.Math.Vector2)">
            <summary>
            Returns the result of subtracting the <paramref name="right"/> Vector from the <paramref name="left"/> Vector.
            </summary>
            <param name="left">The value on the left side of the equation.</param>
            <param name="right">The value on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Vector2.Subtract(Atom.Math.Vector2@,Atom.Math.Vector2@,Atom.Math.Vector2@)">
            <summary>
            Stores the result of subtracting the <paramref name="right"/> Vector frpm the <paramref name="left"/> Vector
            in the given Vector.
            </summary>
            <param name="left">The value on the left side of the equation. This value will not be modified by this method.</param>
            <param name="right">The value on the right side of the equation. This value will not be modified by this method.</param>
            <param name="result">Will contain the result fo the operation.</param>
        </member>
        <member name="M:Atom.Math.Vector2.Subtract(Atom.Math.Vector2,System.Single)">
            <summary>
            Returns the result of subtracting the given <paramref name="scalar"/> from the given <paramref name="vector"/>.
            </summary>
            <param name="vector">The vector on the left side of the equation.</param>
            <param name="scalar">The scalar on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Vector2.Subtract(Atom.Math.Vector2@,System.Single,Atom.Math.Vector2@)">
            <summary>
            Stores the result of subtracting the given <paramref name="scalar"/> from the given <paramref name="vector"/>
            in the given Vector.
            </summary>
            <param name="vector">The vector on the left side of the equation. This value will not be modified by this method.</param>
            <param name="scalar">The scalar on the right side of the equation.</param>
            <param name="result">Will contain the result fo the operation.</param>
        </member>
        <member name="M:Atom.Math.Vector2.Negate(Atom.Math.Vector2)">
            <summary>
            Returns the result of negating the elements of the given <paramref name="vector"/>.
            </summary>
            <param name="vector">
            The vector to negate.
            </param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Vector2.Negate(Atom.Math.Vector2@,Atom.Math.Vector2@)">
            <summary>
            Stores the result of negating the elements of the given <paramref name="vector"/> in the given Vector.
            </summary>
            <param name="vector">
            The vector to negate. This value will not be modified by this method.
            </param>
            <param name="result">Will contain the result of the operation.</param>
        </member>
        <member name="M:Atom.Math.Vector2.Multiply(Atom.Math.Vector2,System.Single)">
            <summary>
            Returns the result of multiplying the given <paramref name="vector"/> by the given <paramref name="scalar"/>.
            </summary>
            <param name="vector">The vector on the left side of the equation.</param>
            <param name="scalar">The scalar on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Vector2.Multiply(Atom.Math.Vector2@,System.Single,Atom.Math.Vector2@)">
            <summary>
            Stores the result of multiplying the given <paramref name="vector"/> by the given <paramref name="scalar"/>.
            in the given Vector.
            </summary>
            <param name="vector">The vector on the left side of the equation. This value will not be modified by this method.</param>
            <param name="scalar">The scalar on the right side of the equation.</param>
            <param name="result">Will contain the result fo the operation.</param>
        </member>
        <member name="M:Atom.Math.Vector2.Multiply(System.Single,Atom.Math.Vector2)">
            <summary>
            Returns the result of multiplying the given <paramref name="vector"/> by the given <paramref name="scalar"/>.
            </summary>
            <param name="scalar">The scalar on the left side of the equation.</param>
            <param name="vector">The vector on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Vector2.Multiply(System.Single,Atom.Math.Vector2@,Atom.Math.Vector2@)">
            <summary>
            Stores the result of multiplying the given <paramref name="vector"/> by the given <paramref name="scalar"/>.
            in the given Vector.
            </summary>
            <param name="scalar">The scalar on the left side of the equation.</param>
            <param name="vector">The vector on the right side of the equation. This value will not be modified by this method.</param>
            <param name="result">Will contain the result fo the operation.</param>
        </member>
        <member name="M:Atom.Math.Vector2.Multiply(Atom.Math.Vector2,Atom.Math.Vector2)">
            <summary>
            Returns the result of multiplying the left Vector by the right Vector component-by-component.
            </summary>
            <param name="left">The vector on the left side of the equation.</param>
            <param name="right">The vector on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Vector2.Multiply(Atom.Math.Vector2@,Atom.Math.Vector2@,Atom.Math.Vector2@)">
            <summary>
            Stores the result of multiplying the left Vector by the right Vector component-by-component.
            in the given result Vector.
            </summary>
            <param name="left">The vector on the left side of the equation. This value will not be modified by this method.</param>
            <param name="right">The vector on the right side of the equation. This value will not be modified by this method.</param>
            <param name="result">Will contain the result of the operation.</param>
        </member>
        <member name="M:Atom.Math.Vector2.Divide(Atom.Math.Vector2,System.Single)">
            <summary>
            Returns the result of dividing the given <paramref name="vector"/> through the given <paramref name="scalar"/>.
            </summary>
            <param name="vector">The vector on the left side of the equation.</param>
            <param name="scalar">The scalar on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Vector2.Divide(Atom.Math.Vector2@,System.Single,Atom.Math.Vector2@)">
            <summary>
            Stores the result of dividing the given <paramref name="vector"/> through the given <paramref name="scalar"/>
            in the given result Vector.
            </summary>
            <param name="vector">The vector on the left side of the equation. This value will not be modified by this method.</param>
            <param name="scalar">The scalar on the right side of the equation.</param>
            <param name="result">Will contain the result fo the operation.</param>
        </member>
        <member name="M:Atom.Math.Vector2.Divide(Atom.Math.Vector2,Atom.Math.Vector2)">
            <summary>
            Returns the result of dividing the left Vector through the right Vector component-by-component.
            </summary>
            <param name="left">The vector on the left side of the equation.</param>
            <param name="right">The vector on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Vector2.Divide(Atom.Math.Vector2@,Atom.Math.Vector2@,Atom.Math.Vector2@)">
            <summary>
            Stores the result of dividing the left Vector through the right Vector component-by-component.
            in the given result Vector.
            </summary>
            <param name="left">The vector on the left side of the equation. This value will not be modified by this method.</param>
            <param name="right">The vector on the right side of the equation. This value will not be modified by this method.</param>
            <param name="result">Will store the result of the operation.</param>
        </member>
        <member name="M:Atom.Math.Vector2.Lerp(Atom.Math.Vector2,Atom.Math.Vector2,System.Single)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="start">
            The source vector that represents the start value.
            </param>
            <param name="end">
            The source vector that represents the end value.
            </param>
            <param name="amount">Value between 0 and 1 indicating the weight of value2.</param>
            <returns>The linear interpolation of the two vectors.</returns>
        </member>
        <member name="M:Atom.Math.Vector2.Lerp(Atom.Math.Vector2@,Atom.Math.Vector2@,System.Single,Atom.Math.Vector2@)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="start">
            The source vector that represents the start value. This value will not be modified by this method.
            </param>
            <param name="end">
            The source vector that represents the end value. This value will not be modified by this method.
            </param>
            <param name="amount">Value between 0 and 1 indicating the weight of value2.</param>
            <param name="result">Will contain the linear interpolation of the two vectors.</param>
        </member>
        <member name="M:Atom.Math.Vector2.Coserp(Atom.Math.Vector2,Atom.Math.Vector2,System.Single)">
            <summary>
            Performs COSine intERPolation between two vectors.
            </summary>
            <param name="start">The source value that represents the start vector.</param>
            <param name="end">The source value that represents the end vector.</param>
            <param name="amount">The weighting factor.</param>
            <returns>The interpolated value.</returns>
        </member>
        <member name="M:Atom.Math.Vector2.Coserp(Atom.Math.Vector2@,Atom.Math.Vector2@,System.Single,Atom.Math.Vector2@)">
            <summary>
            Performs COSine intERPolation between two vectors.
            </summary>
            <param name="start">The source value that represents the start vector. This value will not be modified by this method.</param>
            <param name="end">The source value that represents the end vector. This value will not be modified by this method.</param>
            <param name="amount">The weighting factor.</param>
            <param name="result">Will contain the interpolated value.</param>
        </member>
        <member name="M:Atom.Math.Vector2.SmoothStep(Atom.Math.Vector2,Atom.Math.Vector2,System.Single)">
            <summary>
            Performs interpolationbetween two values using a cubic equation.
            </summary>
            <param name="start">
            The source vector that represents the start value.
            </param>
            <param name="end">
            The source vector that represents the end value.
            </param>
            <param name="amount">
            The weighting value.
            </param>
            <returns>The interpolated value.</returns>
        </member>
        <member name="M:Atom.Math.Vector2.SmoothStep(Atom.Math.Vector2@,Atom.Math.Vector2@,System.Single,Atom.Math.Vector2@)">
            <summary>
            Performs interpolationbetween two values using a cubic equation.
            </summary>
            <param name="start">
            The source vector that represents the start value.
            This value will not be modified by this method.
            </param>
            <param name="end">
            The source vector that represents the end value.
            This value will not be modified by this method.
            </param>
            <param name="amount">
            The weighting value.
            </param>
            <param name="result">Will contain the interpolated value.</param>
        </member>
        <member name="M:Atom.Math.Vector2.Hermite(Atom.Math.Vector2,Atom.Math.Vector2,Atom.Math.Vector2,Atom.Math.Vector2,System.Single)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="valueA">
            The first source position vector.
            </param>
            <param name="tangentA">
            The first source tangent vector.
            </param>
            <param name="valueB">
            The second source position vector.
            </param>
            <param name="tangentB">
            The second source tangent vector.
            </param>
            <param name="amount">
            The weighting factor.
            </param>
            <returns>The result of the Hermite spline interpolation.</returns>
        </member>
        <member name="M:Atom.Math.Vector2.Hermite(Atom.Math.Vector2@,Atom.Math.Vector2@,Atom.Math.Vector2@,Atom.Math.Vector2@,System.Single,Atom.Math.Vector2@)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="valueA">
            The first source position vector. This value will not be modified by this method.
            </param>
            <param name="tangentA">
            The first source tangent vector. This value will not be modified by this method.
            </param>
            <param name="valueB">
            The second source position vector. This value will not be modified by this method.
            </param>
            <param name="tangentB">
            The second source tangent vector. This value will not be modified by this method.
            </param>
            <param name="amount">
            The weighting factor.
            </param>
            <param name="result">
            Will store the result of the Hermite spline interpolation.
            </param>
        </member>
        <member name="M:Atom.Math.Vector2.CatmullRom(Atom.Math.Vector2,Atom.Math.Vector2,Atom.Math.Vector2,Atom.Math.Vector2,System.Single)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="valueA">
            The first position in the interpolation.
            </param>
            <param name="valueB">
            The second position in the interpolation.
            </param>
            <param name="valueC">
            The third position in the interpolation.
            </param>
            <param name="valueD">
            The fourth position in the interpolation.
            </param>
            <param name="amount">The weighting factor.</param>
            <returns>A new Vector that contains the result of the Catmull-Rom interpolation.</returns>
        </member>
        <member name="M:Atom.Math.Vector2.CatmullRom(Atom.Math.Vector2@,Atom.Math.Vector2@,Atom.Math.Vector2@,Atom.Math.Vector2@,System.Single,Atom.Math.Vector2@)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="valueA">
            The first position in the interpolation. This value will not be modified by this method.
            </param>
            <param name="valueB">
            The second position in the interpolation. This value will not be modified by this method.
            </param>
            <param name="valueC">
            The third position in the interpolation. This value will not be modified by this method.
            </param>
            <param name="valueD">
            The fourth position in the interpolation. This value will not be modified by this method.
            </param>
            <param name="amount">The weighting factor.</param>
            <param name="result">Will contain the result of the Catmull-Rom interpolation.</param>
        </member>
        <member name="M:Atom.Math.Vector2.Max(Atom.Math.Vector2,Atom.Math.Vector2)">
            <summary>
            Returns a vector that contains the highest value from
            each matching pair of components of the given Vectors.
            </summary>
            <param name="vectorA">The first vector.</param>
            <param name="vectorB">The second vector.</param>
            <returns>
            The maximized vector.
            </returns>
        </member>
        <member name="M:Atom.Math.Vector2.Max(Atom.Math.Vector2@,Atom.Math.Vector2@,Atom.Math.Vector2@)">
            <summary>
            Returns a vector that contains the highest value from
            each matching pair of components of the given Vectors.
            </summary>
            <param name="vectorA">The first vector. This value will not be modified by this method.</param>
            <param name="vectorB">The second vector. This value will not be modified by this method.</param>
            <param name="result">Will contain the maximized vector.</param>
        </member>
        <member name="M:Atom.Math.Vector2.Min(Atom.Math.Vector2,Atom.Math.Vector2)">
            <summary>
            Returns a vector that contains the lowest value from
            each matching pair of components of the given Vectors.
            </summary>
            <param name="vectorA">The first vector.</param>
            <param name="vectorB">The second vector.</param>
            <returns>
            The minimized vector.
            </returns>
        </member>
        <member name="M:Atom.Math.Vector2.Min(Atom.Math.Vector2@,Atom.Math.Vector2@,Atom.Math.Vector2@)">
            <summary>
            Returns a vector that contains the lowest value from
            each matching pair of components of the given Vectors.
            </summary>
            <param name="vectorA">The first vector. This value will not be modified by this method.</param>
            <param name="vectorB">The second vector. This value will not be modified by this method.</param>
            <param name="result">Will contain the minimized vector.</param>
        </member>
        <member name="M:Atom.Math.Vector2.Average(Atom.Math.Vector2,Atom.Math.Vector2)">
            <summary>
            Returns the average of the given Vectors.
            </summary>
            <param name="vectorA">The first vector.</param>
            <param name="vectorB">The second vector.</param>
            <returns>The average of the given Vectors.</returns>
        </member>
        <member name="M:Atom.Math.Vector2.Average(Atom.Math.Vector2@,Atom.Math.Vector2@,Atom.Math.Vector2@)">
            <summary>
            Returns the average of the given Vectors.
            </summary>
            <param name="vectorA">The first vector. This value will not be modified by this method.</param>
            <param name="vectorB">The second vector. This value will not be modified by this method.</param>
            <param name="result">Will contain the average of the given Vectors.</param>
        </member>
        <member name="M:Atom.Math.Vector2.Distance(Atom.Math.Vector2,Atom.Math.Vector2)">
            <summary>
            Returns the distance between the two specified Vectors2.
            </summary>
            <param name="vectorA">The first Vector.</param>
            <param name="vectorB">The second Vector.</param>
            <returns>
            The distance from the <paramref name="vectorA"/> to <paramref name="vectorB"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.Vector2.Distance(Atom.Math.Vector2@,Atom.Math.Vector2@,System.Single@)">
            <summary>
            Stores the distance between the two specified Vectors2 in the given <paramref name="result"/> value.
            </summary>
            <param name="vectorA">The first Vector. This value will not be modified by this method.</param>
            <param name="vectorB">The second Vector. This value will not be modified by this method.</param>
            <param name="result">
            Will contain the distance from the <paramref name="vectorA"/> to <paramref name="vectorB"/>.
            </param>
        </member>
        <member name="M:Atom.Math.Vector2.DistanceSquared(Atom.Math.Vector2,Atom.Math.Vector2)">
            <summary>
            Returns the squared distance between the two specified Vectors2.
            </summary>
            <param name="vectorA">The first Vector.</param>
            <param name="vectorB">The second Vector.</param>
            <returns>
            The distance from the <paramref name="vectorA"/> to <paramref name="vectorB"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.Vector2.DistanceSquared(Atom.Math.Vector2@,Atom.Math.Vector2@,System.Single@)">
            <summary>
            Stores the squared distance between the two specified Vectors2 in the given <paramref name="result"/> value.
            </summary>
            <param name="vectorA">The first Vector. This value will not be modified by this method.</param>
            <param name="vectorB">The second Vector. This value will not be modified by this method.</param>
            <param name="result">
            This value will contain the squared distance from the <paramref name="vectorA"/> to <paramref name="vectorB"/>.
            </param>
        </member>
        <member name="M:Atom.Math.Vector2.Clamp(Atom.Math.Vector2,Atom.Math.Vector2,Atom.Math.Vector2)">
            <summary>
            Returns the result of clamping the given Vector to be in the range
            defined by <paramref name="min"/> and <paramref name="max"/>.
            </summary>
            <param name="vector">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>
            The clamped value.
            </returns>
        </member>
        <member name="M:Atom.Math.Vector2.Clamp(Atom.Math.Vector2@,Atom.Math.Vector2@,Atom.Math.Vector2@,Atom.Math.Vector2@)">
            <summary>
            Stores the result of clamping the given Vector to be in the range
            defined by <paramref name="min"/> and <paramref name="max"/>
            in the given <paramref name="result"/> value.
            </summary>
            <param name="vector">The value to clamp. This value will not be modified by this method.</param>
            <param name="min">The minimum value. This value will not be modified by this method.</param>
            <param name="max">The maximum value. This value will not be modified by this method.</param>
            <param name="result">Will contain the clamped value.</param>
        </member>
        <member name="M:Atom.Math.Vector2.Round(Atom.Math.Vector2)">
            <summary>
            Rounds the components of the given <paramref name="vector"/>.
            </summary>
            <param name="vector">The input vector.</param>
            <returns>The rounded vector.</returns>
        </member>
        <member name="M:Atom.Math.Vector2.Round(Atom.Math.Vector2,System.Int32)">
            <summary>
            Rounds the components of the given <paramref name="vector"/>
            to a specified precission.
            </summary>
            <param name="vector">The input vector.</param>
            <param name="digits">The number of digits after the comma.</param>
            <returns>The rounded vector.</returns>
        </member>
        <member name="M:Atom.Math.Vector2.Equals(Atom.Math.Vector2)">
            <summary>
            Returns whether the given <see cref="T:Atom.Math.Vector2"/> has the
            same indices set as this Vector2.
            </summary>
            <param name="other">The Vector2 to test against.</param>
            <returns>
            Returns <see langword="true"/> if the elements of the vectors are approximately equal; 
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.Vector2.Equals(System.Object)">
            <summary>
            Returns whether the given <see cref="T:System.Object"/> is equal to this Vector2.
            </summary>
            <param name="obj">The Object to test against.</param>
            <returns>
            Returns <see langword="true"/> if they are equal; 
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.Vector2.ToString">
            <summary>
            Overriden to return a human-readable text representation of the Vector2.
            </summary>
            <returns>A human-readable text representation of the Vector2.</returns>
        </member>
        <member name="M:Atom.Math.Vector2.ToString(System.IFormatProvider)">
            <summary>
            Returns a human-readable text representation of the Vector2.
            </summary>
            <param name="formatProvider">
            The <see cref="T:System.IFormatProvider"/> that supplies culture specific formatting information.
            </param>
            <returns>A human-readable text representation of the Vector2.</returns>
        </member>
        <member name="M:Atom.Math.Vector2.GetHashCode">
            <summary>
            Overriden to return the hash code of the <see cref="T:Atom.Math.Vector2"/>.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Atom.Math.Vector2.op_Equality(Atom.Math.Vector2,Atom.Math.Vector2)">
            <summary>
            Returns whether the specified <see cref="T:Atom.Math.Vector2"/> instances are (approximately) equal.
            </summary>
            <param name="left">The value on the left side of the equation.</param>
            <param name="right">The value on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Vector2.op_Inequality(Atom.Math.Vector2,Atom.Math.Vector2)">
            <summary>
            Returns whether the specified <see cref="T:Atom.Math.Vector2"/> instances are (approximately) inequal.
            </summary>
            <param name="left">The value on the left side of the equation.</param>
            <param name="right">The value on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Vector2.op_Explicit(Atom.Math.Vector2)~Atom.Math.Point2">
            <summary>
            Explicit cast operator that implements conversion
            from a <see cref="T:Atom.Math.Vector2"/> to a <see cref="T:Atom.Math.Point2"/>.
            </summary>
            <param name="vector">
            The input vector.
            </param>
            <returns>
            The converted value.
            </returns>
        </member>
        <member name="M:Atom.Math.Vector2.op_Addition(Atom.Math.Vector2,Atom.Math.Vector2)">
            <summary>
            Returns the result of adding the <paramref name="right"/> Vector to the the <paramref name="left"/> Vector.
            </summary>
            <param name="left">The value on the left side of the equation.</param>
            <param name="right">The value on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Vector2.op_Addition(Atom.Math.Vector2,System.Single)">
            <summary>
            Returns the result of adding the given <paramref name="scalar"/> to the thegiven <paramref name="vector"/>.
            </summary>
            <param name="vector">The vector on the left side of the equation.</param>
            <param name="scalar">The scalar on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Vector2.op_UnaryPlus(Atom.Math.Vector2)">
            <summary>
            Returns the original specified vector, doing nothing.
            </summary>
            <param name="vector">The vector.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Vector2.op_Subtraction(Atom.Math.Vector2,Atom.Math.Vector2)">
            <summary>
            Returns the result of subtracting the <paramref name="right"/> Vector from the the <paramref name="left"/> Vector.
            </summary>
            <param name="left">The value on the left side of the equation.</param>
            <param name="right">The value on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Vector2.op_Subtraction(Atom.Math.Vector2,System.Single)">
            <summary>
            Returns the result of subtracting the given <paramref name="scalar"/> from the given <paramref name="vector"/>.
            </summary>
            <param name="vector">The vector on the left side of the equation.</param>
            <param name="scalar">The scalar on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Vector2.op_UnaryNegation(Atom.Math.Vector2)">
            <summary>
            Returns the result of negating the given <paramref name="vector"/>.
            </summary>
            <param name="vector">The vector.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Vector2.op_Multiply(System.Single,Atom.Math.Vector2)">
            <summary>
            Returns the result of multiplcing the given <paramref name="vector"/> by the given <paramref name="scalar"/>.
            </summary>
            <param name="scalar">The scalar on the left side of the equation.</param>
            <param name="vector">The vector on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Vector2.op_Multiply(Atom.Math.Vector2,System.Single)">
            <summary>
            Returns the result of multiplcing the given <paramref name="vector"/> by the given <paramref name="scalar"/>.
            </summary>
            <param name="vector">The vector on the left side of the equation.</param>
            <param name="scalar">The scalar on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Vector2.op_Multiply(Atom.Math.Vector2,Atom.Math.Vector2)">
            <summary>
            Returns the result of multiplying the left Vector by the right Vector component-by-component.
            </summary>
            <param name="left">The vector on the left side of the equation.</param>
            <param name="right">The vector on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Vector2.op_Division(Atom.Math.Vector2,System.Single)">
            <summary>
            Returns the result of dividing the given <paramref name="vector"/> by the given <paramref name="scalar"/>.
            </summary>
            <param name="vector">The vector on the left side of the equation.</param>
            <param name="scalar">The scalar on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Vector2.op_Division(Atom.Math.Vector2,Atom.Math.Vector2)">
            <summary>
            Returns the result of dividing the left Vector through the right Vector element-by-element.
            </summary>
            <param name="left">The vector on the left side of the equation.</param>
            <param name="right">The vector on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="T:Atom.Math.Vector3">
            <summary>
            Represents a three dimensional single-precision floating-vector Vector.
            </summary>
        </member>
        <member name="F:Atom.Math.Vector3.X">
            <summary>
            The X-coordinate of the Vector.
            </summary>
        </member>
        <member name="F:Atom.Math.Vector3.Y">
            <summary>
            The Y-coordinate of the Vector.
            </summary>
        </member>
        <member name="F:Atom.Math.Vector3.Z">
            <summary>
            The Z-coordinate of the Vector.
            </summary>
        </member>
        <member name="P:Atom.Math.Vector3.Zero">
            <summary>
            Gets a <see cref="T:Atom.Math.Vector3"/> with all its components set to zero.
            </summary>
            <value>The vector (0, 0, 0).</value>
        </member>
        <member name="P:Atom.Math.Vector3.One">
            <summary>
            Gets a <see cref="T:Atom.Math.Vector3"/> with all its components set to one.
            </summary>
            <value>The vector (1, 1, 1).</value>
        </member>
        <member name="P:Atom.Math.Vector3.UnitX">
            <summary>
            Gets the unit <see cref="T:Atom.Math.Vector3"/> for the x-axis.
            </summary>
            <value>The vector (1, 0, 0).</value>
        </member>
        <member name="P:Atom.Math.Vector3.UnitY">
            <summary>
            Gets the unit <see cref="T:Atom.Math.Vector3"/> for the y-axis.
            </summary>
            <value>The vector (0, 1, 0).</value>
        </member>
        <member name="P:Atom.Math.Vector3.UnitZ">
            <summary>
            Gets the unit <see cref="T:Atom.Math.Vector3"/> for the z-axis.
            </summary>
            <value>The vector (0, 0, 1).</value>
        </member>
        <member name="P:Atom.Math.Vector3.Up">
            <summary>
            Gets a unit Vector3 vectoring up (0, 1, 0).
            </summary>
            <value>
            A unit Vector3 vectoring up.
            </value>
        </member>
        <member name="P:Atom.Math.Vector3.Down">
            <summary>
            Gets a unit Vector3 vectoring down (0, −1, 0).
            </summary>
            <value>
            A unit Vector3 vectoring down.
            </value>
        </member>
        <member name="P:Atom.Math.Vector3.Right">
            <summary>
            Gets a unit Vector3 vectoring to the right (1, 0, 0).
            </summary>
            <value>A unit Vector3 vectoring to the right.</value>
        </member>
        <member name="P:Atom.Math.Vector3.Left">
            <summary>
            Gets a unit Vector3 vectoring left (−1, 0, 0).
            </summary>
            <value>
            A unit Vector3 vectoring left.
            </value>
        </member>
        <member name="P:Atom.Math.Vector3.Forward">
            <summary>
            Gets a unit Vector3 vectoring forward (0, 0, −1).
            </summary>
            <value>
            A unit Vector3 vectoring forward.
            </value>
        </member>
        <member name="P:Atom.Math.Vector3.Backward">
            <summary>
            Gets a unit Vector3 vectoring backward (0, 0, 1).
            </summary>
            <value>
            A unit Vector3 vectoring backward.
            </value>
        </member>
        <member name="P:Atom.Math.Vector3.Length">
            <summary>
            Gets or sets the length of the Vector.
            </summary>
            <value>The length (also caleld magnitude) of the vector.</value>
            <exception cref="T:System.InvalidOperationException">
            Thrown when trying to set a new length on a Vector with a length of zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown when trying to set the length to a negative value.
            </exception>
        </member>
        <member name="P:Atom.Math.Vector3.SquaredLength">
            <summary>
            Gets or sets the squared length of the Vector.
            </summary>
            <value>The squared length (also caleld magnitude) of the vector.</value>
            <exception cref="T:System.InvalidOperationException">
            Thrown when trying to set a new length on a Vector with a length of zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown when trying to set the length to a negative value.
            </exception>
        </member>
        <member name="P:Atom.Math.Vector3.Item(Atom.Math.Axis3)">
            <summary>
            Gets or sets the value at the given axis.
            </summary>
            <param name="axis">
            The axis whose value should be get or set.
            </param>
            <returns>
            The value at the given axis.
            </returns>
        </member>
        <member name="M:Atom.Math.Vector3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.Vector3"/> struct.
            </summary>
            <param name="x">The X-coordinate of the new Vector.</param>
            <param name="y">The Y-coordinate of the new Vector.</param>
            <param name="z">The Z-coordinate of the new Vector.</param>
        </member>
        <member name="M:Atom.Math.Vector3.#ctor(Atom.Math.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.Vector3"/> struct.
            </summary>
            <param name="vector">
            The two dimensional vector to convert.
            </param>
        </member>
        <member name="M:Atom.Math.Vector3.#ctor(Atom.Math.Vector2,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.Vector3"/> struct.
            </summary>
            <param name="vector">
            The two dimensional vector to convert.
            </param>
            <param name="z">The Z-coordinate of the new Vector.</param>
        </member>
        <member name="M:Atom.Math.Vector3.FromAxis(System.Single,Atom.Math.Axis3)">
            <summary>
            Creates a new instance of the Vector3 structure that has set the specified axis
            to the specified value.
            </summary>
            <example>
            Vector3 unitX = Vector3.FromAxis( 1.0f, Axis3.X ); // (1 0 0)
            Vector3 unitY = Vector3.FromAxis( 1.0f, Axis3.Y ); // (0 1 0)
            Vector3 unitZ = Vector3.FromAxis( 1.0f, Axis3.Z ); // (0 0 1)
            Vector3 zero  = Vector3.FromAxis( 1.0f, Axis3.None ); // (0 0 0)
            </example>
            <param name="value">
            The value of the axis.
            </param>
            <param name="axis">
            The axis to initialize.
            </param>
            <returns>
            The newly created Vector3.
            </returns>
        </member>
        <member name="M:Atom.Math.Vector3.Normalize">
            <summary>
            Normalizes the Vector, setting its length to one.
            </summary>
        </member>
        <member name="M:Atom.Math.Vector3.Normalize(Atom.Math.Vector3)">
            <summary>
            Returns the result of normalizing the given Vector.
            </summary>
            <param name="vector">The vector to normalize.</param>
            <returns>
            The result of the operation.
            </returns>
        </member>
        <member name="M:Atom.Math.Vector3.Normalize(Atom.Math.Vector3@,Atom.Math.Vector3@)">
            <summary>
            Stores the result of normalizing the given Vector in the given <paramref name="result"/> Vector.
            </summary>
            <param name="vector">The vector to normalize. This value will not be modified by this method.</param>
            <param name="result">This value will store the result of the operation.</param>
        </member>
        <member name="M:Atom.Math.Vector3.RotateAroundAxis(Atom.Math.Vector3,Atom.Math.Vector3,System.Single)">
            <summary>
            Rotates the given vector around an arbitrary axis defined by a vector.
            </summary>
            <param name="vectorToRotate">
            The vector to rotate.
            </param>
            <param name="axis">
            The axis to rotate the vector around.
            </param>
            <param name="angle">
            The angle, in radians, to rotate the vector by.
            </param>
            <returns>The vector rotated by the specified amount around the give axis.</returns>
        </member>
        <member name="M:Atom.Math.Vector3.Dot(Atom.Math.Vector3,Atom.Math.Vector3)">
            <summary>
            Returns the dot(scalar) product of the given <see cref="T:Atom.Math.Vector3"/>s.
            </summary>
            <param name="left">The Vector3 on the left side of the equation.</param>
            <param name="right">The Vector3 on the right side of the equation.</param>
            <returns>The dot product.</returns>
        </member>
        <member name="M:Atom.Math.Vector3.Dot(Atom.Math.Vector3@,Atom.Math.Vector3@,System.Single@)">
            <summary>
            Returns the dot(scalar) product of the given <see cref="T:Atom.Math.Vector3"/>s.
            </summary>
            <param name="left">The Vector3 on the left side of the equation. This value will not be modified by this method.</param>
            <param name="right">The Vector3 on the right side of the equation. This value will not be modified by this method.</param>
            <param name="result">This value will contain the result of this operation.</param>
        </member>
        <member name="M:Atom.Math.Vector3.Cross(Atom.Math.Vector3,Atom.Math.Vector3)">
            <summary>
            Returns the cross product of the given <see cref="T:Atom.Math.Vector3"/>s.
            </summary>
            <param name="left">The vector on the left side of the equation.</param>
            <param name="right">The vector on the right side of the equation.</param>
            <returns>The cross product of the vectors.</returns>
        </member>
        <member name="M:Atom.Math.Vector3.Cross(Atom.Math.Vector3@,Atom.Math.Vector3@,Atom.Math.Vector3@)">
            <summary>
            Returns the cross product of the given <see cref="T:Atom.Math.Vector3"/>s.
            </summary>
            <param name="left">
            The vector on the left side of the equation. This value will not be modified by this method.
            </param>
            <param name="right">
            The vector on the right side of the equation. This value will not be modified by this method.
            </param>
            <param name="result">
            Will contain the cross product of the vectors.
            </param>
        </member>
        <member name="M:Atom.Math.Vector3.Dyadic(Atom.Math.Vector3,Atom.Math.Vector3)">
            <summary>
            Returns the tensor/dyadic product (also called outer product) of the given Vectors.. </summary>
            <remarks>
            See http://en.wikipedia.org/wiki/Tensor_product for more information.
            </remarks>
            <param name="left">The first input vector.</param>
            <param name="right">The second input vector.</param>
            <returns> The result of the operation. </returns>
        </member>
        <member name="M:Atom.Math.Vector3.Dyadic(Atom.Math.Vector3@,Atom.Math.Vector3@,Atom.Math.Matrix3@)">
            <summary>
            Returns the tensor/dyadic product (also called outer product) of the given Vectors.. </summary>
            <remarks>
            See http://en.wikipedia.org/wiki/Tensor_product for more information.
            </remarks>
            <param name="left">The first input vector. This value will not be modified by this method.</param>
            <param name="right">The second input vector. This value will not be modified by this method.</param>
            <param name="result"> Will contain the result of the operation. </param>
        </member>
        <member name="M:Atom.Math.Vector3.Transform(Atom.Math.Vector3,Atom.Math.Matrix4)">
            <summary>
            Returns the result of transforming the specified <see cref="T:Atom.Math.Vector3"/>
            by the specified <see cref="T:Atom.Math.Matrix4"/>.
            </summary>
            <param name="vector">
            The source vector.
            </param>
            <param name="matrix">
            The transformation matrix.
            </param>
            <returns>
            The transformed vector.
            </returns>
        </member>
        <member name="M:Atom.Math.Vector3.Transform(Atom.Math.Vector3@,Atom.Math.Matrix4@,Atom.Math.Vector3@)">
            <summary>
            Stores the result of transforming the specified <see cref="T:Atom.Math.Vector3"/>
            by the specified <see cref="T:Atom.Math.Matrix4"/> in the specified <paramref name="result"/> value.
            </summary>
            <param name="vector">
            The source vector. This value will not be modified by this method.
            </param>
            <param name="matrix">
            The transformation matrix. This value will not be modified by this method.
            </param>
            <param name="result">Will contain the transformed vector.</param>
        </member>
        <member name="M:Atom.Math.Vector3.TransformNormal(Atom.Math.Vector3,Atom.Math.Matrix4)">
            <summary>Transforms a 3D vector normal by a result.</summary>
            <param name="normal">The source vector.</param>
            <param name="matrix">The transformation result.</param>
            <returns>The transformed vector normal.</returns>
        </member>
        <member name="M:Atom.Math.Vector3.TransformNormal(Atom.Math.Vector3@,Atom.Math.Matrix4@,Atom.Math.Vector3@)">
            <summary>Transforms a vector normal by a result.</summary>
            <param name="normal">The source vector.</param>
            <param name="matrix">The transformation result.</param>
            <param name="result">The Vector3 resulting from the transformation.</param>
        </member>
        <member name="M:Atom.Math.Vector3.Transform(Atom.Math.Vector3,Atom.Math.Quaternion)">
            <summary>
            Transforms a Vector3 by a specified Quaternion rotation.
            </summary>
            <param name="vector">The Vector3 to rotate.</param>
            <param name="rotation">The Quaternion rotation to apply.</param>
            <returns>Returns a new Vector3 that results from the rotation.</returns>
        </member>
        <member name="M:Atom.Math.Vector3.Transform(Atom.Math.Vector3@,Atom.Math.Quaternion@,Atom.Math.Vector3@)">
            <summary>
            Transforms a Vector3 by a specified Quaternion rotation.
            </summary>
            <param name="vector">The Vector3 to rotate.</param>
            <param name="rotation">The Quaternion rotation to apply.</param>
            <param name="result">An existing Vector3 filled in with the results of the rotation.</param>
        </member>
        <member name="M:Atom.Math.Vector3.Transform(Atom.Math.Vector3[],Atom.Math.Matrix4@,Atom.Math.Vector3[])">
            <summary>
            Transforms a source array of Vector3s by a specified result and 
            writes the results to an existing destination array.
            </summary>
            <param name="sourceArray">The source array.</param>
            <param name="matrix">The transform result to apply.</param>
            <param name="destinationArray">An existing destination array into which the transformed Vector3s are written.</param>
        </member>
        <member name="M:Atom.Math.Vector3.Transform(Atom.Math.Vector3[],System.Int32,Atom.Math.Matrix4@,Atom.Math.Vector3[],System.Int32,System.Int32)">
            <summary>
            Applies a specified transform result to a specified range of an array of Vector3s
            and writes the results into a specified range of a destination array.
            </summary>
            <param name="sourceArray">The source array.</param>
            <param name="sourceIndex">The index in the source array at which to start.</param>
            <param name="matrix">The transform result to apply.</param>
            <param name="destinationArray">The existing destination array.</param>
            <param name="destinationIndex">The index in the destination array at which to start.</param>
            <param name="length">The number of Vector3s to transform.</param>
        </member>
        <member name="M:Atom.Math.Vector3.TransformNormal(Atom.Math.Vector3[],Atom.Math.Matrix4@,Atom.Math.Vector3[])">
            <summary>Transforms an array of 3D vector normals by a specified result.</summary>
            <param name="sourceArray">The array of Vector3 normals to transform.</param>
            <param name="matrix">The transform result to apply.</param>
            <param name="destinationArray">An existing Vector3 array into which the results of the transforms are written.</param>
        </member>
        <member name="M:Atom.Math.Vector3.TransformNormal(Atom.Math.Vector3[],System.Int32,Atom.Math.Matrix4@,Atom.Math.Vector3[],System.Int32,System.Int32)">
            <summary>
            Transforms a specified range in an array of 3D vector normals 
            by a specified result and writes the results to a specified range in a destination array.
            </summary>
            <param name="sourceArray">The source array of Vector3 normals.</param>
            <param name="sourceIndex">The starting index in the source array.</param>
            <param name="matrix">The transform result to apply.</param>
            <param name="destinationArray">The destination Vector3 array.</param>
            <param name="destinationIndex">The starting index in the destination array.</param>
            <param name="length">The number of vectors to transform.</param>
        </member>
        <member name="M:Atom.Math.Vector3.Transform(Atom.Math.Vector3[],Atom.Math.Quaternion@,Atom.Math.Vector3[])">
            <summary>
            Transforms a source array of Vector3s by a specified Quaternion rotation and writes the results to an existing destination array.
            </summary>
            <param name="sourceArray">The source array.</param>
            <param name="rotation">The Quaternion rotation to apply.</param>
            <param name="destinationArray">An existing destination array into which the transformed Vector3s are written.</param>
        </member>
        <member name="M:Atom.Math.Vector3.Transform(Atom.Math.Vector3[],System.Int32,Atom.Math.Quaternion@,Atom.Math.Vector3[],System.Int32,System.Int32)">
            <summary>
            Applies a specified Quaternion rotation to a specified range of an array of Vector3s 
            and writes the results into a specified range of a destination array.
            </summary>
            <param name="sourceArray">The source array.</param>
            <param name="sourceIndex">The index in the source array at which to start.</param>
            <param name="rotation">The Quaternion rotation to apply.</param>
            <param name="destinationArray">The existing destination array.</param>
            <param name="destinationIndex">The index in the destination array at which to start.</param>
            <param name="length">The number of Vector3s to transform.</param>
        </member>
        <member name="M:Atom.Math.Vector3.Lerp(Atom.Math.Vector3,Atom.Math.Vector3,System.Single)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="start">
            The source vector that represents the start value.
            </param>
            <param name="end">
            The source vector that represents the end value.
            </param>
            <param name="amount">Value between 0 and 1 indicating the weight of value2.</param>
            <returns>The linear interpolation of the two vectors.</returns>
        </member>
        <member name="M:Atom.Math.Vector3.Lerp(Atom.Math.Vector3@,Atom.Math.Vector3@,System.Single,Atom.Math.Vector3@)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="start">
            The source vector that represents the start value. This value will not be modified by this method.
            </param>
            <param name="end">
            The source vector that represents the end value. This value will not be modified by this method.
            </param>
            <param name="amount">Value between 0 and 1 indicating the weight of value2.</param>
            <param name="result">Will contain the linear interpolation of the two vectors.</param>
        </member>
        <member name="M:Atom.Math.Vector3.Coserp(Atom.Math.Vector3,Atom.Math.Vector3,System.Single)">
            <summary>
            Performs COSine intERPolation between two vectors.
            </summary>
            <param name="start">The source value that represents the start vector.</param>
            <param name="end">The source value that represents the end vector.</param>
            <param name="amount">The weighting factor.</param>
            <returns>The interpolated value.</returns>
        </member>
        <member name="M:Atom.Math.Vector3.Coserp(Atom.Math.Vector3@,Atom.Math.Vector3@,System.Single,Atom.Math.Vector3@)">
            <summary>
            Performs COSine intERPolation between two vectors.
            </summary>
            <param name="start">The source value that represents the start vector. This value will not be modified by this method.</param>
            <param name="end">The source value that represents the end vector. This value will not be modified by this method.</param>
            <param name="amount">The weighting factor.</param>
            <param name="result">Will contain the interpolated value.</param>
        </member>
        <member name="M:Atom.Math.Vector3.SmoothStep(Atom.Math.Vector3,Atom.Math.Vector3,System.Single)">
            <summary>
            Performs interpolationbetween two values using a cubic equation.
            </summary>
            <param name="start">
            The source vector that represents the start value.
            </param>
            <param name="end">
            The source vector that represents the end value.
            </param>
            <param name="amount">
            The weighting value.
            </param>
            <returns>The interpolated value.</returns>
        </member>
        <member name="M:Atom.Math.Vector3.SmoothStep(Atom.Math.Vector3@,Atom.Math.Vector3@,System.Single,Atom.Math.Vector3@)">
            <summary>
            Performs interpolationbetween two values using a cubic equation.
            </summary>
            <param name="start">
            The source vector that represents the start value.
            This value will not be modified by this method.
            </param>
            <param name="end">
            The source vector that represents the end value.
            This value will not be modified by this method.
            </param>
            <param name="amount">
            The weighting value.
            </param>
            <param name="result">Will contain the interpolated value.</param>
        </member>
        <member name="M:Atom.Math.Vector3.Hermite(Atom.Math.Vector3,Atom.Math.Vector3,Atom.Math.Vector3,Atom.Math.Vector3,System.Single)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="valueA">
            The first source position vector.
            </param>
            <param name="tangentA">
            The first source tangent vector.
            </param>
            <param name="valueB">
            The second source position vector.
            </param>
            <param name="tangentB">
            The second source tangent vector.
            </param>
            <param name="amount">
            The weighting factor.
            </param>
            <returns>The result of the Hermite spline interpolation.</returns>
        </member>
        <member name="M:Atom.Math.Vector3.Hermite(Atom.Math.Vector3@,Atom.Math.Vector3@,Atom.Math.Vector3@,Atom.Math.Vector3@,System.Single,Atom.Math.Vector3@)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="valueA">
            The first source position vector. This value will not be modified by this method.
            </param>
            <param name="tangentA">
            The first source tangent vector. This value will not be modified by this method.
            </param>
            <param name="valueB">
            The second source position vector. This value will not be modified by this method.
            </param>
            <param name="tangentB">
            The second source tangent vector. This value will not be modified by this method.
            </param>
            <param name="amount">
            The weighting factor.
            </param>
            <param name="result">
            Will store the result of the Hermite spline interpolation.
            </param>
        </member>
        <member name="M:Atom.Math.Vector3.CatmullRom(Atom.Math.Vector3,Atom.Math.Vector3,Atom.Math.Vector3,Atom.Math.Vector3,System.Single)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="valueA">
            The first position in the interpolation.
            </param>
            <param name="valueB">
            The second position in the interpolation.
            </param>
            <param name="valueC">
            The third position in the interpolation.
            </param>
            <param name="valueD">
            The fourth position in the interpolation.
            </param>
            <param name="amount">The weighting factor.</param>
            <returns>A new Vector that contains the result of the Catmull-Rom interpolation.</returns>
        </member>
        <member name="M:Atom.Math.Vector3.CatmullRom(Atom.Math.Vector3@,Atom.Math.Vector3@,Atom.Math.Vector3@,Atom.Math.Vector3@,System.Single,Atom.Math.Vector3@)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="valueA">
            The first position in the interpolation. This value will not be modified by this method.
            </param>
            <param name="valueB">
            The second position in the interpolation. This value will not be modified by this method.
            </param>
            <param name="valueC">
            The third position in the interpolation. This value will not be modified by this method.
            </param>
            <param name="valueD">
            The fourth position in the interpolation. This value will not be modified by this method.
            </param>
            <param name="amount">The weighting factor.</param>
            <param name="result">Will contain the result of the Catmull-Rom interpolation.</param>
        </member>
        <member name="M:Atom.Math.Vector3.Add(Atom.Math.Vector3,Atom.Math.Vector3)">
            <summary>
            Returns the result of adding the <paramref name="right"/> Vector to the <paramref name="left"/> Vector.
            </summary>
            <param name="left">The value on the left side of the equation.</param>
            <param name="right">The value on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Vector3.Add(Atom.Math.Vector3@,Atom.Math.Vector3@,Atom.Math.Vector3@)">
            <summary>
            Stores the result of adding the <paramref name="right"/> Vector to the <paramref name="left"/> Vector
            in the given Vector.
            </summary>
            <param name="left">The value on the left side of the equation. This value will not be modified by this method.</param>
            <param name="right">The value on the right side of the equation. This value will not be modified by this method.</param>
            <param name="result">Will contain the result fo the operation.</param>
        </member>
        <member name="M:Atom.Math.Vector3.Add(Atom.Math.Vector3,System.Single)">
            <summary>
            Returns the result of adding the given <paramref name="scalar"/> to the given <paramref name="vector"/>.
            </summary>
            <param name="vector">The vector on the left side of the equation.</param>
            <param name="scalar">The scalar on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Vector3.Add(Atom.Math.Vector3@,System.Single,Atom.Math.Vector3@)">
            <summary>
            Stores the result of adding the given <paramref name="scalar"/> to the given <paramref name="vector"/>
            in the given Vector.
            </summary>
            <param name="vector">The vector on the left side of the equation. This value will not be modified by this method.</param>
            <param name="scalar">The scalar on the right side of the equation. </param>
            <param name="result">Will contain the result fo the operation.</param>
        </member>
        <member name="M:Atom.Math.Vector3.Plus(Atom.Math.Vector3)">
            <summary>
            This method returns the specified Vector.
            </summary>
            <remarks>
            Is equal to "+vector".
            </remarks>
            <param name="vector">The vector.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Vector3.Plus(Atom.Math.Vector3@,Atom.Math.Vector3@)">
            <summary>
            This method stores the specified Vector in the specified result value.
            </summary>
            <remarks>
            Is equal to "+vector".
            </remarks>
            <param name="vector">The vector.</param>
            <param name="result">Will contain the result of the operation.</param>
        </member>
        <member name="M:Atom.Math.Vector3.Subtract(Atom.Math.Vector3,Atom.Math.Vector3)">
            <summary>
            Returns the result of subtracting the <paramref name="right"/> Vector from the <paramref name="left"/> Vector.
            </summary>
            <param name="left">The value on the left side of the equation.</param>
            <param name="right">The value on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Vector3.Subtract(Atom.Math.Vector3@,Atom.Math.Vector3@,Atom.Math.Vector3@)">
            <summary>
            Stores the result of subtracting the <paramref name="right"/> Vector frpm the <paramref name="left"/> Vector
            in the given Vector.
            </summary>
            <param name="left">The value on the left side of the equation. This value will not be modified by this method.</param>
            <param name="right">The value on the right side of the equation. This value will not be modified by this method.</param>
            <param name="result">Will contain the result fo the operation.</param>
        </member>
        <member name="M:Atom.Math.Vector3.Subtract(Atom.Math.Vector3,System.Single)">
            <summary>
            Returns the result of subtracting the given <paramref name="scalar"/> from the given <paramref name="vector"/>.
            </summary>
            <param name="vector">The vector on the left side of the equation.</param>
            <param name="scalar">The scalar on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Vector3.Subtract(Atom.Math.Vector3@,System.Single,Atom.Math.Vector3@)">
            <summary>
            Stores the result of subtracting the given <paramref name="scalar"/> from the given <paramref name="vector"/>
            in the given Vector.
            </summary>
            <param name="vector">The vector on the left side of the equation. This value will not be modified by this method.</param>
            <param name="scalar">The scalar on the right side of the equation.</param>
            <param name="result">Will contain the result fo the operation.</param>
        </member>
        <member name="M:Atom.Math.Vector3.Negate(Atom.Math.Vector3)">
            <summary>
            Returns the result of negating the elements of the given <paramref name="vector"/>.
            </summary>
            <param name="vector">
            The vector to negate.
            </param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Vector3.Negate(Atom.Math.Vector3@,Atom.Math.Vector3@)">
            <summary>
            Stores the result of negating the elements of the given <paramref name="vector"/> in the given Vector.
            </summary>
            <param name="vector">
            The vector to negate. This value will not be modified by this method.
            </param>
            <param name="result">Will contain the result of the operation.</param>
        </member>
        <member name="M:Atom.Math.Vector3.Multiply(Atom.Math.Vector3,System.Single)">
            <summary>
            Returns the result of multiplying the given <paramref name="vector"/> by the given <paramref name="scalar"/>.
            </summary>
            <param name="vector">The vector on the left side of the equation.</param>
            <param name="scalar">The scalar on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Vector3.Multiply(Atom.Math.Vector3@,System.Single,Atom.Math.Vector3@)">
            <summary>
            Stores the result of multiplying the given <paramref name="vector"/> by the given <paramref name="scalar"/>.
            in the given Vector.
            </summary>
            <param name="vector">The vector on the left side of the equation. This value will not be modified by this method.</param>
            <param name="scalar">The scalar on the right side of the equation.</param>
            <param name="result">Will contain the result fo the operation.</param>
        </member>
        <member name="M:Atom.Math.Vector3.Multiply(Atom.Math.Vector3,Atom.Math.Vector3)">
            <summary>
            Returns the result of multiplying the left Vector by the right Vector component-by-component.
            </summary>
            <param name="left">The vector on the left side of the equation.</param>
            <param name="right">The vector on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Vector3.Multiply(Atom.Math.Vector3@,Atom.Math.Vector3@,Atom.Math.Vector3@)">
            <summary>
            Stores the result of multiplying the left Vector by the right Vector component-by-component.
            in the given result Vector.
            </summary>
            <param name="left">The vector on the left side of the equation. This value will not be modified by this method.</param>
            <param name="right">The vector on the right side of the equation. This value will not be modified by this method.</param>
            <param name="result">Will contain the result of the operation.</param>
        </member>
        <member name="M:Atom.Math.Vector3.Divide(Atom.Math.Vector3,System.Single)">
            <summary>
            Returns the result of dividing the given <paramref name="vector"/> through the given <paramref name="scalar"/>.
            </summary>
            <param name="vector">The vector on the left side of the equation.</param>
            <param name="scalar">The scalar on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Vector3.Divide(Atom.Math.Vector3@,System.Single,Atom.Math.Vector3@)">
            <summary>
            Stores the result of dividing the given <paramref name="vector"/> through the given <paramref name="scalar"/>
            in the given result Vector.
            </summary>
            <param name="vector">The vector on the left side of the equation. This value will not be modified by this method.</param>
            <param name="scalar">The scalar on the right side of the equation.</param>
            <param name="result">Will contain the result fo the operation.</param>
        </member>
        <member name="M:Atom.Math.Vector3.Divide(Atom.Math.Vector3,Atom.Math.Vector3)">
            <summary>
            Returns the result of dividing the left Vector through the right Vector component-by-component.
            </summary>
            <param name="left">The vector on the left side of the equation.</param>
            <param name="right">The vector on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Vector3.Divide(Atom.Math.Vector3@,Atom.Math.Vector3@,Atom.Math.Vector3@)">
            <summary>
            Stores the result of dividing the left Vector through the right Vector component-by-component.
            in the given result Vector.
            </summary>
            <param name="left">The vector on the left side of the equation. This value will not be modified by this method.</param>
            <param name="right">The vector on the right side of the equation. This value will not be modified by this method.</param>
            <param name="result">Will store the result of the operation.</param>
        </member>
        <member name="M:Atom.Math.Vector3.Max(Atom.Math.Vector3,Atom.Math.Vector3)">
            <summary>
            Returns a vector that contains the highest value from
            each matching pair of components of the given Vectors.
            </summary>
            <param name="vectorA">The first vector.</param>
            <param name="vectorB">The second vector.</param>
            <returns>
            The maximized vector.
            </returns>
        </member>
        <member name="M:Atom.Math.Vector3.Max(Atom.Math.Vector3@,Atom.Math.Vector3@,Atom.Math.Vector3@)">
            <summary>
            Returns a vector that contains the highest value from
            each matching pair of components of the given Vectors.
            </summary>
            <param name="vectorA">The first vector. This value will not be modified by this method.</param>
            <param name="vectorB">The second vector. This value will not be modified by this method.</param>
            <param name="result">Will contain the maximized vector.</param>
        </member>
        <member name="M:Atom.Math.Vector3.Min(Atom.Math.Vector3,Atom.Math.Vector3)">
            <summary>
            Returns a vector that contains the lowest value from
            each matching pair of components of the given Vectors.
            </summary>
            <param name="vectorA">The first vector.</param>
            <param name="vectorB">The second vector.</param>
            <returns>
            The minimized vector.
            </returns>
        </member>
        <member name="M:Atom.Math.Vector3.Min(Atom.Math.Vector3@,Atom.Math.Vector3@,Atom.Math.Vector3@)">
            <summary>
            Returns a vector that contains the lowest value from
            each matching pair of components of the given Vectors.
            </summary>
            <param name="vectorA">The first vector. This value will not be modified by this method.</param>
            <param name="vectorB">The second vector. This value will not be modified by this method.</param>
            <param name="result">Will contain the minimized vector.</param>
        </member>
        <member name="M:Atom.Math.Vector3.Average(Atom.Math.Vector3,Atom.Math.Vector3)">
            <summary>
            Returns the average of the given Vectors.
            </summary>
            <param name="vectorA">The first vector.</param>
            <param name="vectorB">The second vector.</param>
            <returns>The average of the given Vectors.</returns>
        </member>
        <member name="M:Atom.Math.Vector3.Average(Atom.Math.Vector3@,Atom.Math.Vector3@,Atom.Math.Vector3@)">
            <summary>
            Returns the average of the given Vectors.
            </summary>
            <param name="vectorA">The first vector. This value will not be modified by this method.</param>
            <param name="vectorB">The second vector. This value will not be modified by this method.</param>
            <param name="result">Will contain the average of the given Vectors.</param>
        </member>
        <member name="M:Atom.Math.Vector3.Distance(Atom.Math.Vector3,Atom.Math.Vector3)">
            <summary>
            Returns the distance between the two specified Vectors2.
            </summary>
            <param name="vectorA">The first Vector.</param>
            <param name="vectorB">The second Vector.</param>
            <returns>
            The distance from the <paramref name="vectorA"/> to <paramref name="vectorB"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.Vector3.Distance(Atom.Math.Vector3@,Atom.Math.Vector3@,System.Single@)">
            <summary>
            Stores the distance between the two specified Vectors2 in the given <paramref name="result"/> value.
            </summary>
            <param name="vectorA">The first Vector. This value will not be modified by this method.</param>
            <param name="vectorB">The second Vector. This value will not be modified by this method.</param>
            <param name="result">
            Will contain the distance from the <paramref name="vectorA"/> to <paramref name="vectorB"/>.
            </param>
        </member>
        <member name="M:Atom.Math.Vector3.DistanceSquared(Atom.Math.Vector3,Atom.Math.Vector3)">
            <summary>
            Returns the squared distance between the two specified Vectors2.
            </summary>
            <param name="vectorA">The first Vector.</param>
            <param name="vectorB">The second Vector.</param>
            <returns>
            The distance from the <paramref name="vectorA"/> to <paramref name="vectorB"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.Vector3.DistanceSquared(Atom.Math.Vector3@,Atom.Math.Vector3@,System.Single@)">
            <summary>
            Stores the squared distance between the two specified Vectors2 in the given <paramref name="result"/> value.
            </summary>
            <param name="vectorA">The first Vector. This value will not be modified by this method.</param>
            <param name="vectorB">The second Vector. This value will not be modified by this method.</param>
            <param name="result">
            This value will contain the squared distance from the <paramref name="vectorA"/> to <paramref name="vectorB"/>.
            </param>
        </member>
        <member name="M:Atom.Math.Vector3.Clamp(Atom.Math.Vector3,Atom.Math.Vector3,Atom.Math.Vector3)">
            <summary>
            Returns the result of clamping the given Vector to be in the range
            defined by <paramref name="min"/> and <paramref name="max"/>.
            </summary>
            <param name="vector">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>
            The clamped value.
            </returns>
        </member>
        <member name="M:Atom.Math.Vector3.Clamp(Atom.Math.Vector3@,Atom.Math.Vector3@,Atom.Math.Vector3@,Atom.Math.Vector3@)">
            <summary>
            Stores the result of clamping the given Vector to be in the range
            defined by <paramref name="min"/> and <paramref name="max"/>
            in the given <paramref name="result"/> value.
            </summary>
            <param name="vector">The value to clamp. This value will not be modified by this method.</param>
            <param name="min">The minimum value. This value will not be modified by this method.</param>
            <param name="max">The maximum value. This value will not be modified by this method.</param>
            <param name="result">Will contain the clamped value.</param>
        </member>
        <member name="M:Atom.Math.Vector3.Angle(Atom.Math.Vector3,Atom.Math.Vector3)">
            <summary>
            Returns the angle between the specified Vectors.
            </summary>
            <remarks>
            angle = atan2(length(cross(A,B)), dot(A,B))
            </remarks>
            <param name="from">The start vector.</param>
            <param name="to">The end vector.</param>
            <returns>
            The angle from the 'from' vector to the 'to' vector.
            </returns>
        </member>
        <member name="M:Atom.Math.Vector3.Angle(Atom.Math.Vector3@,Atom.Math.Vector3@,System.Single@)">
            <summary>
            Stores the angle between the specified Vectors
            in the specified <paramref name="result"/> value.
            </summary>
            <remarks>
            angle = atan2(length(cross(A,B)), dot(A,B))
            </remarks>
            <param name="from">The start vector. This value will not be modified by this method.</param>
            <param name="to">The end vector. This value will not be modified by this method.</param>
            <param name="result">
            The angle from the 'from' vector to the 'to' vector.
            </param>
        </member>
        <member name="M:Atom.Math.Vector3.Equals(Atom.Math.Vector3)">
            <summary>
            Returns whether the given <see cref="T:Atom.Math.Vector3"/> has the
            same indices set as this Vector3.
            </summary>
            <param name="other">The Vector3 to test against.</param>      
            <returns>
            Returns <see langword="true"/> if the elements of the vectors are approximately equal; 
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.Vector3.Equals(System.Object)">
            <summary>
            Returns whether the given <see cref="T:System.Object"/> is equal to this Vector3.
            </summary>
            <param name="obj">The Object to test against.</param>
            <returns>true if they are equal; otherwise false.</returns>
        </member>
        <member name="M:Atom.Math.Vector3.ToString">
            <summary>
            Overriden to return a human-readable text representation of the Vector3.
            </summary>
            <returns>A human-readable text representation of the Vector3.</returns>
        </member>
        <member name="M:Atom.Math.Vector3.ToString(System.IFormatProvider)">
            <summary>
            Returns a human-readable text representation of the Vector3.
            </summary>
            <param name="formatProvider">
            The <see cref="T:System.IFormatProvider"/> that supplies culture specific formatting information.
            </param>
            <returns>A human-readable text representation of the Vector3.</returns>
        </member>
        <member name="M:Atom.Math.Vector3.GetHashCode">
            <summary>
            Overriden to return the hashcode of the <see cref="T:Atom.Math.Vector3"/>.
            </summary>
            <returns>The simple xor-ed hashcode.</returns>
        </member>
        <member name="M:Atom.Math.Vector3.op_Equality(Atom.Math.Vector3,Atom.Math.Vector3)">
            <summary>
            Returns whether the specified <see cref="T:Atom.Math.Vector3"/> instances are (approximately) equal.
            </summary>
            <param name="left">The value on the left side of the equation.</param>
            <param name="right">The value on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Vector3.op_Inequality(Atom.Math.Vector3,Atom.Math.Vector3)">
            <summary>
            Returns whether the specified <see cref="T:Atom.Math.Vector3"/> instances are (approximately) inequal.
            </summary>
            <param name="left">The value on the left side of the equation.</param>
            <param name="right">The value on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Vector3.op_Explicit(Atom.Math.Vector3)~Atom.Math.Point3">
            <summary>
            Explicit cast operator that implements conversion
            from a <see cref="T:Atom.Math.Vector3"/> to a <see cref="T:Atom.Math.Point3"/>.
            </summary>
            <param name="vector">
            The input vector.
            </param>
            <returns>
            The converted value.
            </returns>
        </member>
        <member name="M:Atom.Math.Vector3.op_Addition(Atom.Math.Vector3,Atom.Math.Vector3)">
            <summary>
            Returns the result of adding the <paramref name="right"/> Vector to the the <paramref name="left"/> Vector.
            </summary>
            <param name="left">The value on the left side of the equation.</param>
            <param name="right">The value on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Vector3.op_Addition(Atom.Math.Vector3,System.Single)">
            <summary>
            Returns the result of adding the given <paramref name="scalar"/> to the thegiven <paramref name="vector"/>.
            </summary>
            <param name="vector">The vector on the left side of the equation.</param>
            <param name="scalar">The scalar on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Vector3.op_UnaryPlus(Atom.Math.Vector3)">
            <summary>
            Returns the original specified vector, doing nothing.
            </summary>
            <param name="vector">The vector.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Vector3.op_Subtraction(Atom.Math.Vector3,Atom.Math.Vector3)">
            <summary>
            Returns the result of subtracting the <paramref name="right"/> Vector from the the <paramref name="left"/> Vector.
            </summary>
            <param name="left">The value on the left side of the equation.</param>
            <param name="right">The value on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Vector3.op_Subtraction(Atom.Math.Vector3,System.Single)">
            <summary>
            Returns the result of subtracting the given <paramref name="scalar"/> from the given <paramref name="vector"/>.
            </summary>
            <param name="vector">The vector on the left side of the equation.</param>
            <param name="scalar">The scalar on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Vector3.op_UnaryNegation(Atom.Math.Vector3)">
            <summary>
            Returns the result of negating the given <paramref name="vector"/>.
            </summary>
            <param name="vector">The vector.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Vector3.op_Multiply(Atom.Math.Vector3,System.Single)">
            <summary>
            Returns the result of multiplcing the given <paramref name="vector"/> by the given <paramref name="scalar"/>.
            </summary>
            <param name="vector">The vector on the left side of the equation.</param>
            <param name="scalar">The scalar on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Vector3.op_Multiply(System.Single,Atom.Math.Vector3)">
            <summary>
            Returns the result of multiplcing the given <paramref name="scalar"/> by the given <paramref name="vector"/>.
            </summary>
            <param name="scalar">The scalar on the left side of the equation.</param>
            <param name="vector">The vector on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Vector3.op_Multiply(Atom.Math.Vector3,Atom.Math.Vector3)">
            <summary>
            Returns the result of multiplying the left Vector by the right Vector component-by-component.
            </summary>
            <param name="left">The vector on the left side of the equation.</param>
            <param name="right">The vector on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Vector3.op_Division(Atom.Math.Vector3,System.Single)">
            <summary>
            Returns the result of dividing the given <paramref name="vector"/> by the given <paramref name="scalar"/>.
            </summary>
            <param name="vector">The vector on the left side of the equation.</param>
            <param name="scalar">The scalar on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Vector3.op_Division(Atom.Math.Vector3,Atom.Math.Vector3)">
            <summary>
            Returns the result of dividing the left Vector through the right Vector element-by-element.
            </summary>
            <param name="left">The vector on the left side of the equation.</param>
            <param name="right">The vector on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="T:Atom.Math.Vector4">
            <summary>
            Represents a four dimensional single-precision floating-vector Vector.
            </summary>
        </member>
        <member name="F:Atom.Math.Vector4.X">
            <summary>
            The X-coordinate of the Vector.
            </summary>
        </member>
        <member name="F:Atom.Math.Vector4.Y">
            <summary>
            The Y-coordinate of the Vector.
            </summary>
        </member>
        <member name="F:Atom.Math.Vector4.Z">
            <summary>
            The Z-coordinate of the Vector.
            </summary>
        </member>
        <member name="F:Atom.Math.Vector4.W">
            <summary>
            The W-coordinate of the Vector.
            </summary>
        </member>
        <member name="P:Atom.Math.Vector4.Zero">
            <summary>
            Gets a <see cref="T:Atom.Math.Vector4"/> with all its components set to zero.
            </summary>
            <value>The vector (0, 0, 0, 0).</value>
        </member>
        <member name="P:Atom.Math.Vector4.One">
            <summary>
            Gets a <see cref="T:Atom.Math.Vector4"/> with all its components set to one.
            </summary>
            <value>The vector (1, 1, 1, 1).</value>
        </member>
        <member name="P:Atom.Math.Vector4.UnitX">
            <summary>
            Gets the unit <see cref="T:Atom.Math.Vector4"/> for the x-axis.
            </summary>
            <value>The vector (1, 0, 0, 0).</value>
        </member>
        <member name="P:Atom.Math.Vector4.UnitY">
            <summary>
            Gets the unit <see cref="T:Atom.Math.Vector4"/> for the y-axis.
            </summary>
            <value>The vector (0, 1, 0, 0).</value>
        </member>
        <member name="P:Atom.Math.Vector4.UnitZ">
            <summary>
            Gets the unit <see cref="T:Atom.Math.Vector4"/> for the z-axis.
            </summary>
            <value>The vector (0, 0, 1, 0).</value>
        </member>
        <member name="P:Atom.Math.Vector4.UnitW">
            <summary>
            Gets the unit <see cref="T:Atom.Math.Vector4"/> for the w-axis.
            </summary>
            <value>The vector (0, 0, 0, 1).</value>
        </member>
        <member name="P:Atom.Math.Vector4.Length">
            <summary>
            Gets or sets the length of this Vector4.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown when trying to set a new length on a Vector with a length of zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown when trying to set the length to a negative value.
            </exception>
            <value>The length (also called magnitude) of the vector.</value>
        </member>
        <member name="P:Atom.Math.Vector4.SquaredLength">
            <summary>
            Gets or sets the squared length of the Vector.
            </summary>
            <value>The squared length (also called magnitude) of the vector.</value>
            <exception cref="T:System.InvalidOperationException">
            Thrown when trying to set a new length on a Vector with a length of zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown when trying to set the length to a negative value.
            </exception>
        </member>
        <member name="M:Atom.Math.Vector4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.Vector4"/> struct.
            </summary>
            <param name="x">The X-coordinate of the new Vector.</param>
            <param name="y">The Y-coordinate of the new Vector.</param>
            <param name="z">The Z-coordinate of the new Vector.</param>
            <param name="w">The W-coordinate of the new Vector.</param>
        </member>
        <member name="M:Atom.Math.Vector4.#ctor(Atom.Math.Vector3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Math.Vector4"/> struct.
            </summary>
            <param name="vector">Stores the X, Y and W components of the new Vector.</param>
            <param name="w">The W-coordinate of the new Vector.</param>
        </member>
        <member name="M:Atom.Math.Vector4.Normalize">
            <summary>
            Normalizes the Vector, setting its length to one.
            </summary>
        </member>
        <member name="M:Atom.Math.Vector4.Normalize(Atom.Math.Vector4)">
            <summary>
            Returns the result of normalizing the given Vector.
            </summary>
            <param name="vector">The vector to normalize.</param>
            <returns>
            The result of the operation.
            </returns>
        </member>
        <member name="M:Atom.Math.Vector4.Normalize(Atom.Math.Vector4@,Atom.Math.Vector4@)">
            <summary>
            Stores the result of normalizing the given Vector in the given <paramref name="result"/> Vector.
            </summary>
            <param name="vector">The vector to normalize. This value will not be modified by this method.</param>
            <param name="result">This value will store the result of the operation.</param>
        </member>
        <member name="M:Atom.Math.Vector4.Dot(Atom.Math.Vector4,Atom.Math.Vector4)">
            <summary>
            Returns the dot(scalar) product of the given <see cref="T:Atom.Math.Vector4"/>s.
            </summary>
            <param name="left">The Vector4 on the left side of the equation.</param>
            <param name="right">The Vector4 on the right side of the equation.</param>
            <returns>The dot product.</returns>
        </member>
        <member name="M:Atom.Math.Vector4.Dot(Atom.Math.Vector4@,Atom.Math.Vector4@,System.Single@)">
            <summary>
            Returns the dot(scalar) product of the given <see cref="T:Atom.Math.Vector4"/>s.
            </summary>
            <param name="left">The Vector4 on the left side of the equation. This value will not be modified by this method.</param>
            <param name="right">The Vector4 on the right side of the equation. This value will not be modified by this method.</param>
            <param name="result">This value will contain the result of this operation.</param>
        </member>
        <member name="M:Atom.Math.Vector4.Dyadic(Atom.Math.Vector4,Atom.Math.Vector4)">
            <summary>
            Returns the tensor/dyadic product (also called outer product) of the given Vectors. </summary>
            <remarks>
            See http://en.wikipedia.org/wiki/Tensor_product for more information.
            </remarks>
            <param name="left">The first input vector.</param>
            <param name="right">The second input vector.</param>
            <returns> The result of the operation. </returns>
        </member>
        <member name="M:Atom.Math.Vector4.Dyadic(Atom.Math.Vector4@,Atom.Math.Vector4@,Atom.Math.Matrix4@)">
            <summary>
            Returns the tensor/dyadic product (also called outer product) of the given Vectors. </summary>
            <remarks>
            See http://en.wikipedia.org/wiki/Tensor_product for more information.
            </remarks>
            <param name="left">The first input vector. This value will not be modified by this method.</param>
            <param name="right">The second input vector. This value will not be modified by this method.</param>
            <param name="result"> Will contain the result of the operation. </param>
        </member>
        <member name="M:Atom.Math.Vector4.Transform(Atom.Math.Vector2,Atom.Math.Matrix4)">
            <summary>
            Transforms a Vector2 by the given result.
            </summary>
            <param name="position">The source Vector2.</param>
            <param name="matrix">The transformation result.</param>
            <returns>The transformed Vector4.</returns>
        </member>
        <member name="M:Atom.Math.Vector4.Transform(Atom.Math.Vector2@,Atom.Math.Matrix4@,Atom.Math.Vector4@)">
            <summary>
            Transforms a Vector2 by the given result.
            </summary>
            <param name="position">The source Vector2.</param>
            <param name="matrix">The transformation result.</param>
            <param name="result">The Vector4 resulting from the transformation.</param>
        </member>
        <member name="M:Atom.Math.Vector4.Transform(Atom.Math.Vector3,Atom.Math.Matrix4)">
            <summary>
            Transforms a Vector3 by the given result.
            </summary>
            <param name="position">The source Vector3.</param>
            <param name="matrix">The transformation result.</param>
            <returns>The Vector4 resulting from the transformation.</returns>
        </member>
        <member name="M:Atom.Math.Vector4.Transform(Atom.Math.Vector3@,Atom.Math.Matrix4@,Atom.Math.Vector4@)">
            <summary>
            Transforms a Vector3 by the given result.
            </summary>
            <param name="position">The source Vector3.</param>
            <param name="matrix">The transformation result.</param>
            <param name="result">The Vector4 resulting from the transformation.</param>
        </member>
        <member name="M:Atom.Math.Vector4.Transform(Atom.Math.Vector4,Atom.Math.Matrix4)">
            <summary>
            Transforms a Vector4 by the specified result.
            </summary>
            <param name="vector">The source Vector4.</param>
            <param name="matrix">The transformation result.</param>
            <returns>The transformed Vector4.</returns>
        </member>
        <member name="M:Atom.Math.Vector4.Transform(Atom.Math.Vector4@,Atom.Math.Matrix4@,Atom.Math.Vector4@)">
            <summary>
            Transforms a Vector4 by the given result.
            </summary>
            <param name="vector">The source Vector4.</param>
            <param name="matrix">The transformation result.</param>
            <param name="result">The Vector4 resulting from the transformation.</param>
        </member>
        <member name="M:Atom.Math.Vector4.Transform(Atom.Math.Vector2,Atom.Math.Quaternion)">
            <summary>
            Transforms a Vector2 by a specified Quaternion into a Vector4.
            </summary>
            <param name="value">The Vector2 to transform.</param>
            <param name="rotation">The Quaternion rotation to apply.</param>
            <returns>
            Returns the Vector4 resulting from the transformation.
            </returns>
        </member>
        <member name="M:Atom.Math.Vector4.Transform(Atom.Math.Vector2@,Atom.Math.Quaternion@,Atom.Math.Vector4@)">
            <summary>
            Transforms a Vector2 by a specified Quaternion into a Vector4.
            </summary>
            <param name="value">The Vector2 to transform.</param>
            <param name="rotation">The Quaternion rotation to apply.</param>
            <param name="result">The Vector4 resulting from the transformation.</param>
        </member>
        <member name="M:Atom.Math.Vector4.Transform(Atom.Math.Vector3,Atom.Math.Quaternion)">
            <summary>
            Transforms a Vector3 by a specified Quaternion into a Vector4.
            </summary>
            <param name="value">The Vector3 to transform.</param>
            <param name="rotation">The Quaternion rotation to apply.</param>
            <returns>The Vector4 resulting from the transformation.</returns>
        </member>
        <member name="M:Atom.Math.Vector4.Transform(Atom.Math.Vector3@,Atom.Math.Quaternion@,Atom.Math.Vector4@)">
            <summary>
            Transforms a Vector3 by a specified Quaternion into a Vector4.
            </summary>
            <param name="value">The Vector3 to transform.</param>
            <param name="rotation">The Quaternion rotation to apply.</param>
            <param name="result">The Vector4 resulting from the transformation.</param>
        </member>
        <member name="M:Atom.Math.Vector4.Transform(Atom.Math.Vector4,Atom.Math.Quaternion)">
            <summary>Transforms a Vector4 by a specified Quaternion.</summary>
            <param name="value">The Vector4 to transform.</param>
            <param name="rotation">The Quaternion rotation to apply.</param>
            <returns>The Vector4 resulting from the transformation.</returns>
        </member>
        <member name="M:Atom.Math.Vector4.Transform(Atom.Math.Vector4@,Atom.Math.Quaternion@,Atom.Math.Vector4@)">
            <summary>Transforms a Vector4 by a specified Quaternion.</summary>
            <param name="value">The Vector4 to transform.</param>
            <param name="rotation">The Quaternion rotation to apply.</param>
            <param name="result">The Vector4 resulting from the transformation.</param>
        </member>
        <member name="M:Atom.Math.Vector4.Transform(Atom.Math.Vector4[],System.Int32,Atom.Math.Matrix4@,Atom.Math.Vector4[],System.Int32,System.Int32)">
            <summary>
            Transforms a specified range in an array of Vector4s by a specified result 
            into a specified range in a destination array.
            </summary>
            <param name="sourceArray">The array of Vector4s containing the range to transform.</param>
            <param name="sourceIndex">The index in the source array of the first Vector4 to transform.</param>
            <param name="matrix">The transform result to apply.</param>
            <param name="destinationArray">The existing destination array of Vector4s into which to write the results.</param>
            <param name="destinationIndex">The index in the destination array of the first result Vector4 to write.</param>
            <param name="length">The number of Vector4s to transform.</param>
        </member>
        <member name="M:Atom.Math.Vector4.Transform(Atom.Math.Vector4[],Atom.Math.Matrix4@,Atom.Math.Vector4[])">
            <summary>
            Transforms an array of Vector4s by a specified result.
            </summary>
            <param name="sourceArray">The array of Vector4s to transform.</param>
            <param name="matrix">The transform result to apply.</param>
            <param name="destinationArray">The existing destination array into which the transformed Vector4s are written.</param>
        </member>
        <member name="M:Atom.Math.Vector4.Transform(Atom.Math.Vector4[],Atom.Math.Quaternion@,Atom.Math.Vector4[])">
            <summary>Transforms an array of Vector4s by a specified Quaternion.</summary>
            <param name="sourceArray">The array of Vector4s to transform.</param>
            <param name="rotation">The Quaternion rotation to apply.</param>
            <param name="destinationArray">The existing destination array into which the transformed Vector4s are written.</param>
        </member>
        <member name="M:Atom.Math.Vector4.Transform(Atom.Math.Vector4[],System.Int32,Atom.Math.Quaternion@,Atom.Math.Vector4[],System.Int32,System.Int32)">
            <summary>
            Transforms a specified range in an array of Vector4s by a specified Quaternion
            into a specified range in a destination array.
            </summary>
            <param name="sourceArray">The array of Vector4s containing the range to transform.</param>
            <param name="sourceIndex">The index in the source array of the first Vector4 to transform.</param>
            <param name="rotation">The Quaternion rotation to apply.</param>
            <param name="destinationArray">The existing destination array of Vector4s into which to write the results.</param>
            <param name="destinationIndex">The index in the destination array of the first result Vector4 to write.</param>
            <param name="length">The number of Vector4s to transform.</param>
        </member>
        <member name="M:Atom.Math.Vector4.Lerp(Atom.Math.Vector4,Atom.Math.Vector4,System.Single)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="start">
            The source vector that represents the start value.
            </param>
            <param name="end">
            The source vector that represents the end value.
            </param>
            <param name="amount">Value between 0 and 1 indicating the weight of value2.</param>
            <returns>The linear interpolation of the two vectors.</returns>
        </member>
        <member name="M:Atom.Math.Vector4.Lerp(Atom.Math.Vector4@,Atom.Math.Vector4@,System.Single,Atom.Math.Vector4@)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="start">
            The source vector that represents the start value. This value will not be modified by this method.
            </param>
            <param name="end">
            The source vector that represents the end value. This value will not be modified by this method.
            </param>
            <param name="amount">Value between 0 and 1 indicating the weight of value2.</param>
            <param name="result">Will contain the linear interpolation of the two vectors.</param>
        </member>
        <member name="M:Atom.Math.Vector4.SmoothStep(Atom.Math.Vector4,Atom.Math.Vector4,System.Single)">
            <summary>
            Performs interpolationbetween two values using a cubic equation.
            </summary>
            <param name="start">
            The source vector that represents the start value.
            </param>
            <param name="end">
            The source vector that represents the end value.
            </param>
            <param name="amount">
            The weighting value.
            </param>
            <returns>The interpolated value.</returns>
        </member>
        <member name="M:Atom.Math.Vector4.SmoothStep(Atom.Math.Vector4@,Atom.Math.Vector4@,System.Single,Atom.Math.Vector4@)">
            <summary>
            Performs interpolationbetween two values using a cubic equation.
            </summary>
            <param name="start">
            The source vector that represents the start value.
            This value will not be modified by this method.
            </param>
            <param name="end">
            The source vector that represents the end value.
            This value will not be modified by this method.
            </param>
            <param name="amount">
            The weighting value.
            </param>
            <param name="result">Will contain the interpolated value.</param>
        </member>
        <member name="M:Atom.Math.Vector4.Coserp(Atom.Math.Vector4,Atom.Math.Vector4,System.Single)">
            <summary>
            Performs COSine intERPolation between two vectors.
            </summary>
            <param name="start">The source value that represents the start vector.</param>
            <param name="end">The source value that represents the end vector.</param>
            <param name="amount">The weighting factor.</param>
            <returns>The interpolated value.</returns>
        </member>
        <member name="M:Atom.Math.Vector4.Coserp(Atom.Math.Vector4@,Atom.Math.Vector4@,System.Single,Atom.Math.Vector4@)">
            <summary>
            Performs COSine intERPolation between two vectors.
            </summary>
            <param name="start">The source value that represents the start vector. This value will not be modified by this method.</param>
            <param name="end">The source value that represents the end vector. This value will not be modified by this method.</param>
            <param name="amount">The weighting factor.</param>
            <param name="result">Will contain the interpolated value.</param>
        </member>
        <member name="M:Atom.Math.Vector4.Hermite(Atom.Math.Vector4,Atom.Math.Vector4,Atom.Math.Vector4,Atom.Math.Vector4,System.Single)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="valueA">
            The first source position vector.
            </param>
            <param name="tangentA">
            The first source tangent vector.
            </param>
            <param name="valueB">
            The second source position vector.
            </param>
            <param name="tangentB">
            The second source tangent vector.
            </param>
            <param name="amount">
            The weighting factor.
            </param>
            <returns>
            The result of the Hermite spline interpolation.
            </returns>
        </member>
        <member name="M:Atom.Math.Vector4.Hermite(Atom.Math.Vector4@,Atom.Math.Vector4@,Atom.Math.Vector4@,Atom.Math.Vector4@,System.Single,Atom.Math.Vector4@)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="valueA">
            The first source position vector. This value will not be modified by this method.
            </param>
            <param name="tangentA">
            The first source tangent vector. This value will not be modified by this method.
            </param>
            <param name="valueB">
            The second source position vector. This value will not be modified by this method.
            </param>
            <param name="tangentB">
            The second source tangent vector. This value will not be modified by this method.
            </param>
            <param name="amount">
            The weighting factor.
            </param>
            <param name="result">
            Will store the result of the Hermite spline interpolation.
            </param>
        </member>
        <member name="M:Atom.Math.Vector4.CatmullRom(Atom.Math.Vector4,Atom.Math.Vector4,Atom.Math.Vector4,Atom.Math.Vector4,System.Single)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="valueA">
            The first position in the interpolation.
            </param>
            <param name="valueB">
            The second position in the interpolation.
            </param>
            <param name="valueC">
            The third position in the interpolation.
            </param>
            <param name="valueD">
            The fourth position in the interpolation.
            </param>
            <param name="amount">The weighting factor.</param>
            <returns>A new Vector that contains the result of the Catmull-Rom interpolation.</returns>
        </member>
        <member name="M:Atom.Math.Vector4.CatmullRom(Atom.Math.Vector4@,Atom.Math.Vector4@,Atom.Math.Vector4@,Atom.Math.Vector4@,System.Single,Atom.Math.Vector4@)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="valueA">
            The first position in the interpolation. This value will not be modified by this method.
            </param>
            <param name="valueB">
            The second position in the interpolation. This value will not be modified by this method.
            </param>
            <param name="valueC">
            The third position in the interpolation. This value will not be modified by this method.
            </param>
            <param name="valueD">
            The fourth position in the interpolation. This value will not be modified by this method.
            </param>
            <param name="amount">The weighting factor.</param>
            <param name="result">Will contain the result of the Catmull-Rom interpolation.</param>
        </member>
        <member name="M:Atom.Math.Vector4.Add(Atom.Math.Vector4,Atom.Math.Vector4)">
            <summary>
            Returns the result of adding the <paramref name="right"/> Vector to the <paramref name="left"/> Vector.
            </summary>
            <param name="left">The value on the left side of the equation.</param>
            <param name="right">The value on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Vector4.Add(Atom.Math.Vector4@,Atom.Math.Vector4@,Atom.Math.Vector4@)">
            <summary>
            Stores the result of adding the <paramref name="right"/> Vector to the <paramref name="left"/> Vector
            in the given Vector.
            </summary>
            <param name="left">The value on the left side of the equation. This value will not be modified by this method.</param>
            <param name="right">The value on the right side of the equation. This value will not be modified by this method.</param>
            <param name="result">Will contain the result fo the operation.</param>
        </member>
        <member name="M:Atom.Math.Vector4.Add(Atom.Math.Vector4,System.Single)">
            <summary>
            Returns the result of adding the given <paramref name="scalar"/> to the given <paramref name="vector"/>.
            </summary>
            <param name="vector">The vector on the left side of the equation.</param>
            <param name="scalar">The scalar on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Vector4.Add(Atom.Math.Vector4@,System.Single,Atom.Math.Vector4@)">
            <summary>
            Stores the result of adding the given <paramref name="scalar"/> to the given <paramref name="vector"/>
            in the given Vector.
            </summary>
            <param name="vector">The vector on the left side of the equation. This value will not be modified by this method.</param>
            <param name="scalar">The scalar on the right side of the equation. </param>
            <param name="result">Will contain the result fo the operation.</param>
        </member>
        <member name="M:Atom.Math.Vector4.Plus(Atom.Math.Vector4)">
            <summary>
            This method returns the specified Vector.
            </summary>
            <remarks>
            Is equal to "+vector".
            </remarks>
            <param name="vector">The input vector.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Vector4.Plus(Atom.Math.Vector4@,Atom.Math.Vector4@)">
            <summary>
            This method stores the specified Vector in the specified result value.
            </summary>
            <remarks>
            Is equal to "+vector".
            </remarks>
            <param name="vector">The inputvector.</param>
            <param name="result">Will contain the result of the operation.</param>
        </member>
        <member name="M:Atom.Math.Vector4.Subtract(Atom.Math.Vector4,Atom.Math.Vector4)">
            <summary>
            Returns the result of subtracting the <paramref name="right"/> Vector from the <paramref name="left"/> Vector.
            </summary>
            <param name="left">The value on the left side of the equation.</param>
            <param name="right">The value on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Vector4.Subtract(Atom.Math.Vector4@,Atom.Math.Vector4@,Atom.Math.Vector4@)">
            <summary>
            Stores the result of subtracting the <paramref name="right"/> Vector frpm the <paramref name="left"/> Vector
            in the given Vector.
            </summary>
            <param name="left">The value on the left side of the equation. This value will not be modified by this method.</param>
            <param name="right">The value on the right side of the equation. This value will not be modified by this method.</param>
            <param name="result">Will contain the result fo the operation.</param>
        </member>
        <member name="M:Atom.Math.Vector4.Subtract(Atom.Math.Vector4,System.Single)">
            <summary>
            Returns the result of subtracting the given <paramref name="scalar"/> from the given <paramref name="vector"/>.
            </summary>
            <param name="vector">The vector on the left side of the equation.</param>
            <param name="scalar">The scalar on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Vector4.Subtract(Atom.Math.Vector4@,System.Single,Atom.Math.Vector4@)">
            <summary>
            Stores the result of subtracting the given <paramref name="scalar"/> from the given <paramref name="vector"/>
            in the given Vector.
            </summary>
            <param name="vector">The vector on the left side of the equation. This value will not be modified by this method.</param>
            <param name="scalar">The scalar on the right side of the equation.</param>
            <param name="result">Will contain the result fo the operation.</param>
        </member>
        <member name="M:Atom.Math.Vector4.Negate(Atom.Math.Vector4)">
            <summary>
            Returns the result of negating the elements of the given <paramref name="vector"/>.
            </summary>
            <param name="vector">
            The vector to negate.
            </param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Vector4.Negate(Atom.Math.Vector4@,Atom.Math.Vector4@)">
            <summary>
            Stores the result of negating the elements of the given <paramref name="vector"/> in the given Vector.
            </summary>
            <param name="vector">
            The vector to negate. This value will not be modified by this method.
            </param>
            <param name="result">Will contain the result of the operation.</param>
        </member>
        <member name="M:Atom.Math.Vector4.Multiply(Atom.Math.Vector4,System.Single)">
            <summary>
            Returns the result of multiplying the given <paramref name="vector"/> by the given <paramref name="scalar"/>.
            </summary>
            <param name="vector">The vector on the left side of the equation.</param>
            <param name="scalar">The scalar on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Vector4.Multiply(Atom.Math.Vector4@,System.Single,Atom.Math.Vector4@)">
            <summary>
            Stores the result of multiplying the given <paramref name="vector"/> by the given <paramref name="scalar"/>.
            in the given Vector.
            </summary>
            <param name="vector">The vector on the left side of the equation. This value will not be modified by this method.</param>
            <param name="scalar">The scalar on the right side of the equation.</param>
            <param name="result">Will contain the result fo the operation.</param>
        </member>
        <member name="M:Atom.Math.Vector4.Multiply(Atom.Math.Vector4,Atom.Math.Vector4)">
            <summary>
            Returns the result of multiplying the left Vector by the right Vector component-by-component.
            </summary>
            <param name="left">The vector on the left side of the equation.</param>
            <param name="right">The vector on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Vector4.Multiply(Atom.Math.Vector4@,Atom.Math.Vector4@,Atom.Math.Vector4@)">
            <summary>
            Stores the result of multiplying the left Vector by the right Vector component-by-component.
            in the given result Vector.
            </summary>
            <param name="left">The vector on the left side of the equation. This value will not be modified by this method.</param>
            <param name="right">The vector on the right side of the equation. This value will not be modified by this method.</param>
            <param name="result">Will contain the result of the operation.</param>
        </member>
        <member name="M:Atom.Math.Vector4.Divide(Atom.Math.Vector4,System.Single)">
            <summary>
            Returns the result of dividing the given <paramref name="vector"/> through the given <paramref name="scalar"/>.
            </summary>
            <param name="vector">The vector on the left side of the equation.</param>
            <param name="scalar">The scalar on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Vector4.Divide(Atom.Math.Vector4@,System.Single,Atom.Math.Vector4@)">
            <summary>
            Stores the result of dividing the given <paramref name="vector"/> through the given <paramref name="scalar"/>
            in the given result Vector.
            </summary>
            <param name="vector">The vector on the left side of the equation. This value will not be modified by this method.</param>
            <param name="scalar">The scalar on the right side of the equation.</param>
            <param name="result">Will contain the result fo the operation.</param>
        </member>
        <member name="M:Atom.Math.Vector4.Divide(Atom.Math.Vector4,Atom.Math.Vector4)">
            <summary>
            Returns the result of dividing the left Vector through the right Vector component-by-component.
            </summary>
            <param name="left">The vector on the left side of the equation.</param>
            <param name="right">The vector on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Vector4.Divide(Atom.Math.Vector4@,Atom.Math.Vector4@,Atom.Math.Vector4@)">
            <summary>
            Stores the result of dividing the left Vector through the right Vector component-by-component.
            in the given result Vector.
            </summary>
            <param name="left">The vector on the left side of the equation. This value will not be modified by this method.</param>
            <param name="right">The vector on the right side of the equation. This value will not be modified by this method.</param>
            <param name="result">Will store the result of the operation.</param>
        </member>
        <member name="M:Atom.Math.Vector4.Max(Atom.Math.Vector4,Atom.Math.Vector4)">
            <summary>
            Returns a vector that contains the highest value from
            each matching pair of components of the given Vectors.
            </summary>
            <param name="vectorA">The first vector.</param>
            <param name="vectorB">The second vector.</param>
            <returns>
            The maximized vector.
            </returns>
        </member>
        <member name="M:Atom.Math.Vector4.Max(Atom.Math.Vector4@,Atom.Math.Vector4@,Atom.Math.Vector4@)">
            <summary>
            Returns a vector that contains the highest value from
            each matching pair of components of the given Vectors.
            </summary>
            <param name="vectorA">The first vector. This value will not be modified by this method.</param>
            <param name="vectorB">The second vector. This value will not be modified by this method.</param>
            <param name="result">Will contain the maximized vector.</param>
        </member>
        <member name="M:Atom.Math.Vector4.Min(Atom.Math.Vector4,Atom.Math.Vector4)">
            <summary>
            Returns a vector that contains the lowest value from
            each matching pair of components of the given Vectors.
            </summary>
            <param name="vectorA">The first vector.</param>
            <param name="vectorB">The second vector.</param>
            <returns>
            The minimized vector.
            </returns>
        </member>
        <member name="M:Atom.Math.Vector4.Min(Atom.Math.Vector4@,Atom.Math.Vector4@,Atom.Math.Vector4@)">
            <summary>
            Returns a vector that contains the lowest value from
            each matching pair of components of the given Vectors.
            </summary>
            <param name="vectorA">The first vector. This value will not be modified by this method.</param>
            <param name="vectorB">The second vector. This value will not be modified by this method.</param>
            <param name="result">Will contain the minimized vector.</param>
        </member>
        <member name="M:Atom.Math.Vector4.Average(Atom.Math.Vector4,Atom.Math.Vector4)">
            <summary>
            Returns the average of the given Vectors.
            </summary>
            <param name="vectorA">The first vector.</param>
            <param name="vectorB">The second vector.</param>
            <returns>The average of the given Vectors.</returns>
        </member>
        <member name="M:Atom.Math.Vector4.Average(Atom.Math.Vector4@,Atom.Math.Vector4@,Atom.Math.Vector4@)">
            <summary>
            Returns the average of the given Vectors.
            </summary>
            <param name="vectorA">The first vector. This value will not be modified by this method.</param>
            <param name="vectorB">The second vector. This value will not be modified by this method.</param>
            <param name="result">Will contain the average of the given Vectors.</param>
        </member>
        <member name="M:Atom.Math.Vector4.Distance(Atom.Math.Vector4,Atom.Math.Vector4)">
            <summary>
            Returns the distance between the two specified Vectors2.
            </summary>
            <param name="vectorA">The first Vector.</param>
            <param name="vectorB">The second Vector.</param>
            <returns>
            The distance from the <paramref name="vectorA"/> to <paramref name="vectorB"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.Vector4.Distance(Atom.Math.Vector4@,Atom.Math.Vector4@,System.Single@)">
            <summary>
            Stores the distance between the two specified Vectors2 in the given <paramref name="result"/> value.
            </summary>
            <param name="vectorA">The first Vector. This value will not be modified by this method.</param>
            <param name="vectorB">The second Vector. This value will not be modified by this method.</param>
            <param name="result">
            Will contain the distance from the <paramref name="vectorA"/> to <paramref name="vectorB"/>.
            </param>
        </member>
        <member name="M:Atom.Math.Vector4.DistanceSquared(Atom.Math.Vector4,Atom.Math.Vector4)">
            <summary>
            Returns the squared distance between the two specified Vectors2.
            </summary>
            <param name="vectorA">The first Vector.</param>
            <param name="vectorB">The second Vector.</param>
            <returns>
            The distance from the <paramref name="vectorA"/> to <paramref name="vectorB"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.Vector4.DistanceSquared(Atom.Math.Vector4@,Atom.Math.Vector4@,System.Single@)">
            <summary>
            Stores the squared distance between the two specified Vectors2 in the given <paramref name="result"/> value.
            </summary>
            <param name="vectorA">The first Vector. This value will not be modified by this method.</param>
            <param name="vectorB">The second Vector. This value will not be modified by this method.</param>
            <param name="result">
            This value will contain the squared distance from the <paramref name="vectorA"/> to <paramref name="vectorB"/>.
            </param>
        </member>
        <member name="M:Atom.Math.Vector4.Clamp(Atom.Math.Vector4,Atom.Math.Vector4,Atom.Math.Vector4)">
            <summary>
            Returns the result of clamping the given Vector to be in the range
            defined by <paramref name="min"/> and <paramref name="max"/>.
            </summary>
            <param name="vector">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>
            The clamped value.
            </returns>
        </member>
        <member name="M:Atom.Math.Vector4.Clamp(Atom.Math.Vector4@,Atom.Math.Vector4@,Atom.Math.Vector4@,Atom.Math.Vector4@)">
            <summary>
            Stores the result of clamping the given Vector to be in the range
            defined by <paramref name="min"/> and <paramref name="max"/>
            in the given <paramref name="result"/> value.
            </summary>
            <param name="vector">The value to clamp. This value will not be modified by this method.</param>
            <param name="min">The minimum value. This value will not be modified by this method.</param>
            <param name="max">The maximum value. This value will not be modified by this method.</param>
            <param name="result">Will contain the clamped value.</param>
        </member>
        <member name="M:Atom.Math.Vector4.Equals(Atom.Math.Vector4)">
            <summary>
            Returns whether the given <see cref="T:Atom.Math.Vector4"/> has the
            same indices set as this Vector4.
            </summary>
            <param name="other">The Vector4 to test against.</param>
            <returns>
            Returns <see langword="true"/> if the elements of the vectors are approximately equal; 
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.Vector4.Equals(System.Object)">
            <summary>
            Returns whether the given <see cref="T:System.Object"/> is equal to this Vector4.
            </summary>
            <param name="obj">The Object to test against.</param>
            <returns>
            Returns <see langword="true"/> if they are equal; 
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Math.Vector4.ToString">
            <summary>
            Overriden to return a human-readable text representation of the Vector4.
            </summary>
            <returns>A human-readable text representation of the Vector4.</returns>
        </member>
        <member name="M:Atom.Math.Vector4.ToString(System.IFormatProvider)">
            <summary>
            Returns a human-readable text representation of the Vector4.
            </summary>
            <param name="formatProvider">
            The <see cref="T:System.IFormatProvider"/> that supplies culture specific formatting information.
            </param>
            <returns>A human-readable text representation of the Vector4.</returns>
        </member>
        <member name="M:Atom.Math.Vector4.GetHashCode">
            <summary>
            Overriden to return the hashcode of the <see cref="T:Atom.Math.Vector4"/>.
            </summary>
            <returns>The simple xor-ed hashcode.</returns>
        </member>
        <member name="M:Atom.Math.Vector4.op_Addition(Atom.Math.Vector4,Atom.Math.Vector4)">
            <summary>
            Returns the result of adding the <paramref name="right"/> Vector to the the <paramref name="left"/> Vector.
            </summary>
            <param name="left">The value on the left side of the equation.</param>
            <param name="right">The value on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Vector4.op_Addition(Atom.Math.Vector4,System.Single)">
            <summary>
            Returns the result of adding the given <paramref name="scalar"/> to the thegiven <paramref name="vector"/>.
            </summary>
            <param name="vector">The vector on the left side of the equation.</param>
            <param name="scalar">The scalar on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Vector4.op_UnaryPlus(Atom.Math.Vector4)">
            <summary>
            Returns the original specified vector, doing nothing.
            </summary>
            <param name="vector">The vector.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Vector4.op_Subtraction(Atom.Math.Vector4,Atom.Math.Vector4)">
            <summary>
            Returns the result of subtracting the <paramref name="right"/> Vector from the the <paramref name="left"/> Vector.
            </summary>
            <param name="left">The value on the left side of the equation.</param>
            <param name="right">The value on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Vector4.op_Subtraction(Atom.Math.Vector4,System.Single)">
            <summary>
            Returns the result of subtracting the given <paramref name="scalar"/> from the given <paramref name="vector"/>.
            </summary>
            <param name="vector">The vector on the left side of the equation.</param>
            <param name="scalar">The scalar on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Vector4.op_UnaryNegation(Atom.Math.Vector4)">
            <summary>
            Returns the result of negating the given <paramref name="vector"/>.
            </summary>
            <param name="vector">The vector.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Vector4.op_Multiply(Atom.Math.Vector4,System.Single)">
            <summary>
            Returns the result of multiplcing the given <paramref name="vector"/> by the given <paramref name="scalar"/>.
            </summary>
            <param name="vector">The vector on the left side of the equation.</param>
            <param name="scalar">The scalar on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Vector4.op_Multiply(Atom.Math.Vector4,Atom.Math.Vector4)">
            <summary>
            Returns the result of multiplying the left Vector by the right Vector component-by-component.
            </summary>
            <param name="left">The vector on the left side of the equation.</param>
            <param name="right">The vector on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Vector4.op_Division(Atom.Math.Vector4,System.Single)">
            <summary>
            Returns the result of dividing the given <paramref name="vector"/> by the given <paramref name="scalar"/>.
            </summary>
            <param name="vector">The vector on the left side of the equation.</param>
            <param name="scalar">The scalar on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Vector4.op_Division(Atom.Math.Vector4,Atom.Math.Vector4)">
            <summary>
            Returns the result of dividing the left Vector through the right Vector element-by-element.
            </summary>
            <param name="left">The vector on the left side of the equation.</param>
            <param name="right">The vector on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Vector4.op_Equality(Atom.Math.Vector4,Atom.Math.Vector4)">
            <summary>
            Returns whether the specified <see cref="T:Atom.Math.Vector4"/> instances are (approximately) equal.
            </summary>
            <param name="left">The value on the left side of the equation.</param>
            <param name="right">The value on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Vector4.op_Inequality(Atom.Math.Vector4,Atom.Math.Vector4)">
            <summary>
            Returns whether the specified <see cref="T:Atom.Math.Vector4"/> instances are (approximately) inequal.
            </summary>
            <param name="left">The value on the left side of the equation.</param>
            <param name="right">The value on the right side of the equation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Atom.Math.Vector4.op_Explicit(Atom.Math.Vector4)~Atom.Math.Point4">
            <summary>
            Explicit cast operator that implements conversion
            from a <see cref="T:Atom.Math.Vector4"/> to a <see cref="T:Atom.Math.Point4"/>.
            </summary>
            <param name="vector">
            The input vector.
            </param>
            <returns>
            The converted value.
            </returns>
        </member>
    </members>
</doc>
