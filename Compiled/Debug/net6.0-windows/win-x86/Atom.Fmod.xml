<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Atom.Fmod</name>
    </assembly>
    <members>
        <member name="T:Atom.Fmod.AudioException">
            <summary> 
            The exception that is thrown when an error occurs within the FMOD object framework.
            </summary>
        </member>
        <member name="M:Atom.Fmod.AudioException.#ctor">
            <summary> Initializes a new instance of the <see cref="T:Atom.Fmod.AudioException"/> class. </summary>
        </member>
        <member name="M:Atom.Fmod.AudioException.#ctor(System.String)">
            <summary> 
            Initializes a new instance of the <see cref="T:Atom.Fmod.AudioException"/> class and sets
            the error message to the specified <see cref="T:System.String"/>.
            </summary>
            <param name="message"> The message that describes the error. </param>
        </member>
        <member name="M:Atom.Fmod.AudioException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Fmod.AudioException"/> class 
            with a specified error message and a reference 
            to the inner exception that is the cause of this exception.
            </summary>
            <param name="message"> The message that describes the error. </param>
            <param name="innerException"> The exception that is cause of the new <see cref="T:Atom.Fmod.AudioException"/>. </param>
        </member>
        <member name="M:Atom.Fmod.AudioException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> 
            Initializes a new instance of the <see cref="T:Atom.Fmod.AudioException"/> class; and
            passes the specified <see cref="T:System.Runtime.Serialization.SerializationInfo"/> and
            <see cref="T:System.Runtime.Serialization.StreamingContext"/> to the <see cref="T:System.Exception"/> constructor.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds
            the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that 
            contains contextual information about the source or destination.
            </param>
        </member>
        <member name="T:Atom.Fmod.AudioSystem">
            <summary>
            Represents the core object of the Fmod audio-libary.
            </summary>
        </member>
        <member name="P:Atom.Fmod.AudioSystem.IsInitialized">
            <summary>
            Gets a value indicating whether this AudioSystem has been initialized.
            </summary>
        </member>
        <member name="P:Atom.Fmod.AudioSystem.ErrorLog">
            <summary>
            Gets or sets the <see cref="T:Atom.Diagnostics.ILog"/> this AudioSystem uses
            to log error messages.
            </summary>
            <value>The default value is null.</value>
        </member>
        <member name="P:Atom.Fmod.AudioSystem.MasterChannelGroup">
            <summary>
            Gets the master <see cref="T:Atom.Fmod.ChannelGroup"/>; which is the channel group
            all new <see cref="T:Atom.Fmod.Channel"/>s play under.
            </summary>
        </member>
        <member name="P:Atom.Fmod.AudioSystem.MasterGroup">
            <summary>
            Gets the master <see cref="T:Atom.Fmod.SoundGroup"/>; which is the sound group
            all new <see cref="T:Atom.Fmod.Sound"/>s play under.
            </summary>
        </member>
        <member name="P:Atom.Fmod.AudioSystem.MusicGroup">
            <summary>
            Gets the <see cref="T:Atom.Fmod.SoundGroup"/>; which is the channel group
            all new music <see cref="T:Atom.Fmod.Sound"/>s play under by default.
            </summary>
        </member>
        <member name="P:Atom.Fmod.AudioSystem.SampleGroup">
            <summary>
            Gets the <see cref="T:Atom.Fmod.SoundGroup"/>; which is the channel group
            all new sample <see cref="T:Atom.Fmod.Sound"/>s play under by default.
            </summary>
        </member>
        <member name="P:Atom.Fmod.AudioSystem.ThrowExceptionOnResourceNotFound">
            <summary>
            Gets or sets a value indicating whether exceptions 
            should be thrown when a <see cref="T:Atom.Fmod.Sound"/> resource couldn't be found.
            </summary>
            <remarks>
            If this value is true exceptions are thrown,
            If this value is false the corresponding methods return null.
            </remarks>
            <value>The default value is true.</value>
        </member>
        <member name="P:Atom.Fmod.AudioSystem.NativeVersion">
            <summary>
            Gets the version of the the loaden native FMODex dll.
            </summary>
            <exception cref="T:Atom.Fmod.AudioException">
            If an internal FMODex error has occured.
            </exception>
        </member>
        <member name="P:Atom.Fmod.AudioSystem.AudioDriverName">
            <summary>
            Gets the name of the Audio Driver that is in use.
            </summary>
            <exception cref="T:Atom.Fmod.AudioException">
            If an internal FMODex error has occured.
            </exception>
        </member>
        <member name="P:Atom.Fmod.AudioSystem.SpeakerMode">
            <summary>
            Gets or sets the current <see cref="P:Atom.Fmod.AudioSystem.SpeakerMode"/>. 
            </summary>
            <exception cref="T:Atom.Fmod.AudioException"> 
            If a native FMOD error has occured. 
            </exception>
        </member>
        <member name="P:Atom.Fmod.AudioSystem.MusicDirectory">
            <summary>
            Gets or sets the default path to Music resources. The default value is ' @"Content/Music";'.
            </summary>
        </member>
        <member name="P:Atom.Fmod.AudioSystem.SampleDirectory">
            <summary>
            Gets or sets the default path to Sample resources. The default value is ' @"Content/Samples";'.
            </summary>
        </member>
        <member name="P:Atom.Fmod.AudioSystem.DefaultSoundManager">
            <summary>
            Gets the default <see cref="T:Atom.Fmod.SoundManager"/> of the <see cref="T:Atom.Fmod.AudioSystem"/>.
            </summary>
        </member>
        <member name="P:Atom.Fmod.AudioSystem.SoundManagerCount">
            <summary>
            Gets how many <see cref="T:Atom.Fmod.SoundManager"/>s the AudioSystem has attached to.
            </summary>
        </member>
        <member name="P:Atom.Fmod.AudioSystem.NativeSystem">
            <summary>
            Gets the underlying <see cref="T:Atom.Fmod.Native.System"/> object.
            </summary>
        </member>
        <member name="M:Atom.Fmod.AudioSystem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Fmod.AudioSystem"/> class.
            </summary>
        </member>
        <member name="M:Atom.Fmod.AudioSystem.Initialize(System.Int32)">
            <summary> 
            Initializes the <see cref="T:Atom.Fmod.AudioSystem"/> and the underlying FMOD system. 
            </summary>
            <param name="maxChannels">
            The maximum number of channels to use.
            </param>
            <exception cref="T:Atom.Fmod.AudioException"> If an initialization error has occured. </exception> 
            <exception cref="T:System.InvalidOperationException">
            If the <see cref="T:Atom.Fmod.AudioSystem"/> is already in an initialized state.
            </exception>
        </member>
        <member name="M:Atom.Fmod.AudioSystem.Initialize(Atom.Fmod.Native.INITFLAGS,System.Int32,System.Nullable{Atom.Fmod.Native.SPEAKERMODE})">
            <summary> 
            Initializes the <see cref="T:Atom.Fmod.AudioSystem"/> and the underlying FMOD system. 
            </summary>
            <param name="flags">
            The initialization flags.
            </param>
            <param name="maxChannels">
            The maximum number of channels to use.
            </param>
            <param name="speakerMode">
            If null: System Mode is used.
            If not null: Speaker Mode is used.
            </param>
            <exception cref="T:Atom.Fmod.AudioException">
            If an initialization error has occured.
            </exception> 
            <exception cref="T:System.InvalidOperationException">
            If the <see cref="T:Atom.Fmod.AudioSystem"/> is already in an initialized state.
            </exception>
        </member>
        <member name="M:Atom.Fmod.AudioSystem.OnInvalidDllVersion(System.UInt32,System.UInt32)">
            <summary>
            Called when the expected version of the native fmod dll was invalid.
            </summary>
            <param name="version">
            The actual version of the dll.
            </param>
            <param name="expectedVersion">
            The expected version of the dll.
            </param>
        </member>
        <member name="M:Atom.Fmod.AudioSystem.Shutdown">
            <summary> 
            Shutdowns this <see cref="T:Atom.Fmod.AudioSystem"/>. 
            </summary>
            <exception cref="T:Atom.Fmod.AudioException"> 
            If an internal FMOD exception has occured. 
            </exception>
            <exception cref="T:System.InvalidOperationException">
            If the <see cref="T:Atom.Fmod.AudioSystem"/> is not in an initialized state.
            </exception>
        </member>
        <member name="M:Atom.Fmod.AudioSystem.Update">
            <summary> 
            Updates the <see cref="T:Atom.Fmod.AudioSystem"/>.
            </summary>
            <exception cref="T:Atom.Fmod.AudioException"> 
            If a native FMOD error has occured. 
            </exception>
        </member>
        <member name="M:Atom.Fmod.AudioSystem.CreateNewSoundManager">
            <summary>
            Creates a new <see cref="T:Atom.Fmod.SoundManager"/> object.
            </summary>
            <remarks>
            Most applications will only need one <see cref="T:Atom.Fmod.SoundManager"/> at a time.
            </remarks>
            <returns>A new <see cref="T:Atom.Fmod.SoundManager"/> instance.</returns>
        </member>
        <member name="M:Atom.Fmod.AudioSystem.ProcessEndedChannels">
            <summary>
            The "Ended"-events are triggered on the main thread and not in the native callback
            to avoid getting the native AudioSystem
            </summary>
        </member>
        <member name="M:Atom.Fmod.AudioSystem.Get(System.String)">
            <summary>
            Tries to get the music <see cref="T:Atom.Fmod.Sound"/> resource that
            has the given <paramref name="fullName"/> using the DefaultSoundManager.
            </summary>
            <param name="fullName">
            The full name of the resource, including the directory path.
            </param>
            <returns>
            The requested Sound resource; or null.
            </returns>
        </member>
        <member name="M:Atom.Fmod.AudioSystem.Get(System.String,System.String,System.String)">
            <summary>
            Tries to get the music <see cref="T:Atom.Fmod.Sound"/> resource that
            has the given <paramref name="name"/> using the DefaultSoundManager.
            </summary>
            <param name="name">
            The name of the resource.
            </param>
            <param name="directoryPath">
            The path to the directory which contains the resource to get.
            </param>
            <param name="tag">
            The (optional) tag that is attached to the sound resource.
            Using different tags one can store the same sound multiple times
            in the same SoundManager.
            </param>
            <returns>
            The requested Sound resource; or null.
            </returns>
        </member>
        <member name="M:Atom.Fmod.AudioSystem.GetMusic(System.String)">
            <summary>
            Tries to get the music <see cref="T:Atom.Fmod.Sound"/> resource that
            has the given <paramref name="name"/> using the DefaultSoundManager.
            </summary>
            <param name="name">
            The name of the resource.
            </param>
            <returns>
            The requested Sound resource; or null.
            </returns>
        </member>
        <member name="M:Atom.Fmod.AudioSystem.GetSample(System.String)">
            <summary>
            Tries to get the music <see cref="T:Atom.Fmod.Sound"/> resource that
            has the given <paramref name="name"/> using the DefaultSoundManager.
            </summary>
            <param name="name">
            The name of the resource.
            </param>
            <returns>
            The requested Sound resource; or null.
            </returns>
        </member>
        <member name="M:Atom.Fmod.AudioSystem.LoadSample(System.String,System.Boolean)">
            <summary>
            Tries to get the music <see cref="T:Atom.Fmod.Sound"/> resource that
            has the given <paramref name="name"/> using the DefaultSoundManager; then loads is a sample.
            </summary>
            <param name="name">
            The name of the resource.
            </param>
            <param name="isLooping">
            States whether the sample should loop.
            </param>
            <returns>
            The requested Sound resource; or null.
            </returns>
        </member>
        <member name="M:Atom.Fmod.AudioSystem.GetSoundManager(System.Int32)">
            <summary>
            Gets the <see cref="T:Atom.Fmod.SoundManager"/> at the given <paramref name="index"/>.
            </summary>
            <param name="index">The zero-based index of the SoundManager to get.</param>
            <returns>The SoundManager instance.</returns>
        </member>
        <member name="M:Atom.Fmod.AudioSystem.Remove(System.String)">
            <summary>
            Tries to remove the Sound Resource with the given <paramref name="soundName"/>
            from the DefaultSoundManager.
            </summary>
            <param name="soundName">
            The name of the Sound to remove.
            </param>
            <returns>
            True if the Sound with the given name has been removed;
            otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Fmod.AudioSystem.Set3DSettings(System.Single,System.Single,System.Single)">
            <summary>
            Sets the global doppler scale, distance factor and log rolloff scale for all 3D sound in FMOD
            </summary>
            <param name="dopplerScale">
            The scaling factor for doppler shift. Default = 1.0. 
            </param>
            <param name="distanceFactor">
            Relative distance factor to FMOD's units. Default = 1.0. (1.0 = 1 metre). 
            </param>
            <param name="rolloffScale">
            Scaling factor for 3D sound rolloff or attenuation for FMOD_3D_LOGROLLOFF 
            based sounds only (which is the default type). Default = 1.0.
            </param>
            <remarks>
            The doppler scale is a general scaling factor for how much the pitch varies due to doppler shifting in 3D sound.
            Doppler is the pitch bending effect when a sound comes towards the listener or moves away from it, much like the effect you hear when a train goes past you with its horn sounding. With dopplerscale you can exaggerate or diminish the effect.
            FMOD's effective speed of sound at a doppler factor of 1.0 is 340 m/s.
            <para>
            The distance factor is the FMOD 3D engine relative distance factor, compared to 1.0 meters.
            Another way to put it is that it equates to "how many units per meter' does your engine have". 
            For example. If you are using feet then scale would equal 3.28.
            Note! This only affects doppler! If you keep your min/max distance, custom rolloff curves and positions in scale relative to each other the volume rolloff will not change.
            If you set this, the mindistance of a sound will automatically set itself to this value when it is created in case the user forgets to set the mindistance to match the new distancefactor.
            </para>
            The rolloff scale sets the global attenuation rolloff factor for FMOD_3D_LOGROLLOFF based sounds only (which is the default).
            Normally volume for a sound will scale at mindistance / distance. This gives a logarithmic attenuation of volume as the source gets further away (or closer).
            Setting this value makes the sound drop off faster or slower. The higher the value, the faster volume will attenuate, and conversely the lower the value, the slower it will attenuate.
            For example a rolloff factor of 1 will simulate the real world, where as a value of 2 will make sounds attenuate 2 times quicker.
            rolloffscale has no effect for FMOD_3D_LINEARROLLOFF or FMOD_3D_CUSTOMROLLOFF.
            </remarks>
        </member>
        <member name="M:Atom.Fmod.AudioSystem.Get3DSettings(System.Single@,System.Single@,System.Single@)">
            <summary>
            Retrieves the global doppler scale, distance factor and rolloff scale for all 3D sound in FMOD.  
            </summary>        
            <param name="dopplerScale">
            The scaling factor for doppler shift. Default = 1.0. 
            </param>
            <param name="distanceFactor">
            Relative distance factor to FMOD's units. Default = 1.0. (1.0 = 1 metre). 
            </param>
            <param name="rolloffScale">
            Scaling factor for 3D sound rolloff or attenuation for FMOD_3D_LOGROLLOFF 
            based sounds only (which is the default type). Default = 1.0.
            </param>
        </member>
        <member name="M:Atom.Fmod.AudioSystem.Set3DListenerAttributes(System.Int32,Atom.Math.Vector3,Atom.Math.Vector3,Atom.Math.Vector3,Atom.Math.Vector3)">
            <summary>
            Updates the position of the specified 3D sound listener.
            </summary>
            <remarks>
            The forward and up MUST be of unit length and perpendicular,
            or the audiosystem may crash on some systems.
            </remarks>
            <param name="listenerId">
            The listener ID in a multi-listener environment. Specify 0 if there is only 1 listener. 
            </param>
            <param name="position">
            The position of the listener in world space, measured in distance units.
            You can specify 0 to not update the position. 
            </param>
            <param name="velocity">
            The velocity of the listener measured in distance units per second.
            You can specify 0 or NULL to not update the velocity of the listener.
            </param>
            <param name="forward">
            The forwards orientation of the listener. 
            This vector must be of unit length and perpendicular to the up vector.
            </param>
            <param name="up">
            The upwards orientation of the listener.
            This vector must be of unit length and perpendicular to the forwards vector. 
            </param>
        </member>
        <member name="P:Atom.Fmod.AudioSystem.ListenerPosition2D">
            <summary>
            Getsor sets the position of the specified 2D sound listener.
            Must have been set using Set2DListenerAttributes.
            </summary>
            <value>
            The position of the listener in world space, measured in distance units.
            </value>
        </member>
        <member name="M:Atom.Fmod.AudioSystem.ThrowOnError(Atom.Fmod.Native.RESULT)">
            <summary>
            Helper function that throws an <see cref="T:Atom.Fmod.AudioException"/>
            if the given native <see cref="T:Atom.Fmod.Native.RESULT"/> is not OK.
            </summary>
            <param name="result">The result to test for.</param>
        </member>
        <member name="M:Atom.Fmod.AudioSystem.LogOnError(Atom.Fmod.Native.RESULT)">
            <summary>
            Helper function that logs the error
            if the given native <see cref="T:Atom.Fmod.Native.RESULT"/> is not OK.
            </summary>
            <param name="result">The result to test for.</param>
        </member>
        <member name="M:Atom.Fmod.AudioSystem.LogError(System.String)">
            <summary>
            Writes the given <paramref name="message"/> as an error into the <see cref="P:Atom.Fmod.AudioSystem.ErrorLog"/>.
            </summary>
            <param name="message">
            The message to write.
            </param>
        </member>
        <member name="F:Atom.Fmod.AudioSystem.system">
            <summary>
            The underlying fmod system.
            </summary>
        </member>
        <member name="F:Atom.Fmod.AudioSystem.masterChannelGroup">
            <summary>
            The ChannelGroup all music play under by default.
            </summary>
        </member>
        <member name="F:Atom.Fmod.AudioSystem.masterGroup">
            <summary>
            The SoundGroup all music/samples plays under by default.
            </summary>
        </member>
        <member name="F:Atom.Fmod.AudioSystem.musicGroup">
            <summary>
            The SoundGroup all music/samples plays under by default.
            </summary>
        </member>
        <member name="F:Atom.Fmod.AudioSystem.sampleGroup">
            <summary>
            The SoundGroup all music/samples plays under by default.
            </summary>
        </member>
        <member name="F:Atom.Fmod.AudioSystem.defaultSoundManager">
            <summary>
            The default <see cref="T:Atom.Fmod.SoundManager"/> of the <see cref="T:Atom.Fmod.AudioSystem"/>.
            </summary>
        </member>
        <member name="F:Atom.Fmod.AudioSystem.soundManagers">
            <summary>
            The list of <see cref="T:Atom.Fmod.SoundManager"/> that have been created with the <see cref="T:Atom.Fmod.AudioSystem"/>.
            </summary>
        </member>
        <member name="F:Atom.Fmod.AudioSystem.endedChannels">
            <summary>
            
            </summary>
        </member>
        <member name="F:Atom.Fmod.AudioSystem.isInitialized">
            <summary>
            States whether the <see cref="T:Atom.Fmod.AudioSystem"/> has been initialized.
            </summary>
        </member>
        <member name="F:Atom.Fmod.AudioSystem.defaultMusicDirectory">
            <summary>
            The default path to Music resources.
            </summary>
        </member>
        <member name="F:Atom.Fmod.AudioSystem.defaultSampleDirectory">
            <summary>
            The default path to Sample resources.
            </summary>
        </member>
        <member name="F:Atom.Fmod.AudioSystem.lastError">
            <summary>
            The last error, cached to not log the same error multiple times.
            </summary>
        </member>
        <member name="F:Atom.Fmod.AudioSystem.last2DListenerPosition">
            <summary>
            Stores the last value set using Set2DListenerAttributes.
            </summary>
        </member>
        <member name="T:Atom.Fmod.Channel">
            <summary>
            A 'channel' is an instance of a sound. You can play a sound many times at once,
            and each time you play a sound you will get a new channel handle. 
            This class can't be inherited.
            </summary>
            <remarks>
            Note that this is only if it is not a stream. Streams can only be played once at a time,
            and if you attempt to play it multiple times, it will simply restart the existing stream 
            and return the same handle that it was using before. 
            This is because streams only have 1 stream buffer, and 1 file handle. 
            To play a stream twice at once, open and play it twice. 
            </remarks>
        </member>
        <member name="E:Atom.Fmod.Channel.Ended">
            <summary>
            Gets called when the Channel reaches the end.
            </summary>
        </member>
        <member name="P:Atom.Fmod.Channel.Sound">
            <summary>
            Gets the <see cref="T:Atom.Fmod.Sound"/> the <see cref="T:Atom.Fmod.Channel"/> was initialy
            created with. Be aware that Channels may get reused anytime.
            </summary>
        </member>
        <member name="P:Atom.Fmod.Channel.ChannelGroup">
            <summary>
            Gets or sets the ChannelGroup this Channel is associated to.
            </summary>
        </member>
        <member name="P:Atom.Fmod.Channel.IsPlaying">
            <summary>
            Gets a value indicating whether this <see cref="T:Atom.Fmod.Channel"/> is currently playing.
            </summary>
        </member>
        <member name="P:Atom.Fmod.Channel.IsPaused">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Atom.Fmod.Channel"/> has been paused.
            </summary>
            <remarks>
            If a channel belongs to a paused channelgroup, it will stay paused regardless of the channel pause state. 
            The channel pause state will still be reflected internally though, ie Channel::Paused will still return 
            the value you set. If the channelgroup has paused set to false, this function will become effective again.
            </remarks>
        </member>
        <member name="P:Atom.Fmod.Channel.IsMuted">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Atom.Fmod.Channel"/> has been muted.
            </summary>
            <value>true = channel is muted (silent), false = channel is set its to normal volume.</value>
            <remarks>
            If a channel belongs to a muted channelgroup, it will stay muted regardless of the channel mute state.
            The channel mute state will still be reflected internally though, ie Channel::getMute will still 
            return the value you set. If the channelgroup has mute set to false, this function will become effective again. 
            </remarks>
        </member>
        <member name="P:Atom.Fmod.Channel.IsVirtual">
            <summary>
            Gets a value indicating whether the <see cref="T:Atom.Fmod.Channel"/> is virtual (emulated) 
            or not due to FMOD Ex's virtual channel management system.
            </summary>
            <remarks>
            Native documentation:
            Virtual channels are not audible, because there are no more real hardware or software channels available.
            If you are plotting virtual voices vs real voices graphically, and wondering why FMOD sometimes chooses seemingly
            random channels to be virtual that are usually far away, that is because they are probably silent. 
            It doesn't matter which are virtual and which are not if they are silent. 
            Virtual voices are not calculation on 'closest to listener' calculation, they are based on audibility.
            See the tutorial in the FMOD Ex documentation for more information on virtual channels. 
            </remarks>
        </member>
        <member name="P:Atom.Fmod.Channel.LoopCount">
            <summary>
            Gets or sets how often the <see cref="T:Atom.Fmod.Channel"/> should loop before it stops.
            </summary>
            <remarks>
            Native documentation:
            This function does not affect FMOD_HARDWARE
            based sounds that are not streamable.
            FMOD_SOFTWARE based sounds or any type of sound created with
            System::CreateStream or FMOD_CREATESTREAM will support this function.
            </remarks>
        </member>
        <member name="P:Atom.Fmod.Channel.Volume">
            <summary>
            Gets or sets the volume level of the <see cref="T:Atom.Fmod.Channel"/>.
            Where 0.0 = silent, 1.0 = full volume. Default = 1.0.
            </summary>
            <remarks>
            Set: When a sound is played, it plays at the default volume of the sound 
            which can be set by Sound::SetDefaults.
            For most file formats, the volume is determined by the audio format. 
            </remarks>
        </member>
        <member name="P:Atom.Fmod.Channel.Frequency">
            <summary>
            Gets or sets the frequency or playback rate of the <see cref="T:Atom.Fmod.Channel"/> in, in HZ.  
            </summary>
            <value>
            A frequency value in HZ. This value can also be negative to play the sound backwards
            (negative frequencies allowed with FmodMode.Software based non-stream sounds only).
            DirectSound hardware voices have limited frequency range on some soundcards.
            Please see remarks for more on this. 
            </value>
            <remarks>
            When a sound is played, it plays at the default frequency of the sound which can be set by Sound::SetDefaults.
            For most file formats, the volume is determined by the audio format.
            Frequency limitations for sounds created with FmodMode.Hardware in DirectSound.
            Every hardwa re device has a minimum and maximum frequency. 
            This means setting the frequency above the maximum and below the minimum will have no effect.
            FMOD clamps frequencies to these values when playing back on hardware, 
            so if you are setting the frequency outside of this range, 
            the frequency will stay at either the minimum or maximum.
            Note that FMOD_SOFTWARE based sounds do not have this limitation.
            To find out the minimum and maximum value before initializing FMOD
            (maybe to decide whether to use a different soundcard, output mode, or drop back fully to software mixing),
            you can use the AudioSystem::GetDriverCaps function. 
            </remarks>
        </member>
        <member name="P:Atom.Fmod.Channel.Audibility">
            <summary>
            Gets the combined volume of the channel after 3d sound, volume, channel group volume 
            and geometry occlusion calculations have been performed on it.  
            </summary>
            <remarks>
            This does not represent the waveform, just the calculated volume based on 3d distance, occlusion,
            volume and channel group volume. This value is used by the FMOD Ex virtual channel system to order
            its channels between real and virtual.
            </remarks>
        </member>
        <member name="P:Atom.Fmod.Channel.Priority">
            <summary>
            Gets or sets the priority of the <see cref="T:Atom.Fmod.Channel"/>.
            This is a value from 0 to 256 inclusive. 0 = most important. 256 = least important. Default = 128. 
            </summary>
            <remarks>
            Priority will make a channel more important or less important than its counterparts. 
            When virtual channels are in place, by default the importance of the sound
            (whether it is audible or not when more channels are playing than exist) is based on the volume,
            or audiblity of the sound. This is determined by distance from the listener in 3d,
            the volume set with Channel::setVolume, channel group volume, and geometry occlusion factors.
            To make a quiet sound more important, so that it isn't made virtual by louder sounds, 
            you can use this function to increase its importance, and keep it audible.
            </remarks>
        </member>
        <member name="P:Atom.Fmod.Channel.Spread3D">
            <summary>
            Gets or sets the spread of a 3d stereo or multichannel sound in speaker space.
            </summary>
            <value>
            The spread angle for subchannels. 0 = all subchannels are located at the same position.
            360 = all subchannels are located at the opposite position. 
            </value>
            <remarks>
            !! Only affects sounds created with FMOD_SOFTWARE. !!
            Normally a 3d sound is aimed at one position in a speaker array depending on the 3d position, 
            to give it direction. Left and right parts of a stereo sound for example are consequently
            summed together and become 'mono'.
            When increasing the 'spread' of a sound, the left and right parts of a stereo sound rotate 
            away from their original position, to give it more 'stereoness'.
            The rotation of the sound channels are done in 'speaker space'.
            </remarks>
        </member>
        <member name="P:Atom.Fmod.Channel.Level3D">
            <summary>
            Gets or sets how much the 3d engine has an effect on the channel, versus that set by Channel::setPan, Channel::setSpeakerMix, Channel::setSpeakerLevels
            </summary>
            <value>
            1 = Sound pans and attenuates according to 3d position. 0 = Attenuation is ignored and pan/speaker levels are defined by Channel::setPan, Channel::setSpeakerMix, Channel::setSpeakerLevels.
            Default = 1 (all by 3D position). 
            </value>
        </member>
        <member name="P:Atom.Fmod.Channel.AudioSystem">
            <summary>
            Gets the <see cref="P:Atom.Fmod.Channel.AudioSystem"/> that owns this Channel.
            </summary>
        </member>
        <member name="P:Atom.Fmod.Channel.UserData">
            <summary>
            Gets or sets the pointer to optional user data.
            </summary>
            <value>The default value is InpPtr.Zero.</value>
        </member>
        <member name="M:Atom.Fmod.Channel.#ctor(Atom.Fmod.Sound,Atom.Fmod.Native.Channel)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Fmod.Channel"/> class.
            </summary>
            <param name="sound">
            The <see cref="T:Atom.Fmod.Sound"/> the <see cref="T:Atom.Fmod.Channel"/> was initialy
            created with.
            </param>
            <param name="nativeChannel">
            The <see cref="T:Atom.Fmod.Native.Channel"/> object that is wrapped by the <see cref="T:Atom.Fmod.Channel"/>.
            </param>
        </member>
        <member name="M:Atom.Fmod.Channel.Finalize">
            <summary>
            Finalizes an instance of the Channel class.
            </summary>
        </member>
        <member name="M:Atom.Fmod.Channel.Stop">
            <summary>
            Stops to play this <see cref="T:Atom.Fmod.Channel"/>.
            </summary>
        </member>
        <member name="M:Atom.Fmod.Channel.Pause">
            <summary>
            Pauses this Channel.
            </summary>
        </member>
        <member name="M:Atom.Fmod.Channel.Unpause">
            <summary>
            Unpauses this Channel.
            </summary>
        </member>
        <member name="M:Atom.Fmod.Channel.GetPosition(Atom.Fmod.Native.TIMEUNIT)">
            <summary>
            Gets the current PCM offset or playback position of this <see cref="T:Atom.Fmod.Channel"/>.
            </summary>
            <param name="positionType">Time unit to retrieve into the position parameter.</param>
            <remarks>
            Certain timeunits do not work depending on the file format. 
            For example FMOD_TIMEUNIT_MODORDER will not work with an mp3 file.
            A PCM sample is a unit of measurement in audio that contains the data for one audible element of sound.
            1 sample might be 16bit stereo, so 1 sample contains 4 bytes. 
            44,100 samples of a 44khz sound would represent 1 second of data.
            </remarks>
            <returns>
            The current PCM offset or playback position of this Channel, converted to the given TIMEUNIT.
            </returns>
        </member>
        <member name="M:Atom.Fmod.Channel.GetPositionInt(Atom.Fmod.Native.TIMEUNIT)">
            <summary>
            Gets the current PCM offset or playback position of the <see cref="T:Atom.Fmod.Channel"/>,
            may be less accurate than GetPosition !
            </summary>
            <param name="positionType">Time unit to retrieve into the position parameter.</param>
            <remarks>
            Certain timeunits do not work depending on the file format. 
            For example FMOD_TIMEUNIT_MODORDER will not work with an mp3 file.
            A PCM sample is a unit of measurement in audio that contains the data for one audible element of sound.
            1 sample might be 16bit stereo, so 1 sample contains 4 bytes. 
            44,100 samples of a 44khz sound would represent 1 second of data.
            </remarks>
            <returns>
            The current PCM offset or playback position of this Channel, converted to the given TIMEUNIT.
            </returns>
        </member>
        <member name="M:Atom.Fmod.Channel.SetPosition(System.UInt32,Atom.Fmod.Native.TIMEUNIT)">
            <summary>
            Sets the current playback position for the currently playing sound to the specified PCM offset.  
            </summary>
            <param name="position">Position of the channel to set in units specified in the postype parameter. </param>
            <param name="positionType">Time unit to retrieve into the position parameter.</param>
            <remarks>
            Certain timeunits do not work depending on the file format. 
            For example FMOD_TIMEUNIT_MODORDER will not work with an mp3 file.
            A PCM sample is a unit of measurement in audio that contains the data for one audible element of sound.
            1 sample might be 16bit stereo, so 1 sample contains 4 bytes. 
            44,100 samples of a 44khz sound would represent 1 second of data.
            <para>
            Note that if you are calling this function on a stream, it has to possibly reflush its buffer
            to get zero latency playback when it resumes playing, therefore it could potentially cause
            a stall or take a small amount of time to do this. 
            Warning! Using a VBR source that does not have an associated seek table or seek information 
            (such as MP3 or MOD/S3M/XM/IT) may cause inaccurate seeking if you specify FMOD_TIMEUNIT_MS or FMOD_TIMEUNIT_PCM.
            If you want FMOD to create a pcm vs bytes seek table so that seeking is accurate, 
            you will have to specify FMOD_ACCURATETIME when loading or opening the sound. 
            This means there is a slight delay as FMOD scans the whole file when loading the sound to create this table.
            </para>
            </remarks>
        </member>
        <member name="M:Atom.Fmod.Channel.SetPositionInt(System.Int32,Atom.Fmod.Native.TIMEUNIT)">
            <summary>
            Sets the current playback position for the currently playing sound to the specified PCM offset.  
            </summary>
            <param name="position">Position of the channel to set in units specified in the postype parameter. </param>
            <param name="positionType">Time unit to retrieve into the position parameter.</param>
            <remarks>
            Certain timeunits do not work depending on the file format. 
            For example FMOD_TIMEUNIT_MODORDER will not work with an mp3 file.
            A PCM sample is a unit of measurement in audio that contains the data for one audible element of sound.
            1 sample might be 16bit stereo, so 1 sample contains 4 bytes. 
            44,100 samples of a 44khz sound would represent 1 second of data.
            <para>
            Note that if you are calling this function on a stream, it has to possibly reflush its buffer
            to get zero latency playback when it resumes playing, therefore it could potentially cause
            a stall or take a small amount of time to do this. 
            Warning! Using a VBR source that does not have an associated seek table or seek information 
            (such as MP3 or MOD/S3M/XM/IT) may cause inaccurate seeking if you specify FMOD_TIMEUNIT_MS or FMOD_TIMEUNIT_PCM.
            If you want FMOD to create a pcm vs bytes seek table so that seeking is accurate, 
            you will have to specify FMOD_ACCURATETIME when loading or opening the sound. 
            This means there is a slight delay as FMOD scans the whole file when loading the sound to create this table.
            </para>
            </remarks>
        </member>
        <member name="M:Atom.Fmod.Channel.SetDelay(System.UInt64,System.UInt64,System.Boolean)">
            <summary>
            Sets a start (and/or stop) time relative to the parent channel group DSP clock, with sample accuracy.
            </summary>
            <param name="dspclockStart">
            DSP clock of the parent channel group to audibly start playing sound at, a value of 0 indicates no delay.
            </param>
            <param name="dspclockEnd">
            DSP clock of the parent channel group to audibly stop playing sound at, a value of 0 indicates no delay.
            </param>
            <param name="stopChannels">
            TRUE = stop according to ChannelControl::isPlaying. FALSE = remain 'active' and a new start delay could start playback again at a later time.
            </param>
        </member>
        <member name="M:Atom.Fmod.Channel.GetDelay(System.UInt64@,System.UInt64@)">
            <summary>
            Gets the currently set delay values. 
            </summary>
            <remarks>
            Note! Only works with sounds created with FMOD_SOFTWARE.
            If FMOD_DELAYTYPE_DSPCLOCK_START is used, this will be the value of the DSP clock time at the time System::playSound was called,
            if the user has not called Channel::setDelay.
            What is the 'dsp clock'
            The DSP clock represents the output stream to the soundcard, and is incremented by the output rate every second 
            (though of course with much finer granularity than this).
            So if your output rate is 48khz, the DSP clock will increment by 48000 per second.
            The hi and lo values represent this 64bit number,
            with the delaylo representing the least significant 32bits and the delayhi value representing the most significant 32bits.
            </remarks>
            <param name="dspclockStart">
            Address of a variable to receive the top (most significant) 32 bits of a 64bit number representing the time.
            </param>
            <param name="dspclockEnd">
            Address of a variable to receive the bottom (least significant) 32 bits of a 64bit number representing the time.
            </param>
        </member>
        <member name="M:Atom.Fmod.Channel.Set3DAttributes(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the position and velocity of this 3d channel. 
            </summary>
            <param name="positionX">
            The position on the x-axis in 3D space of the channel. Specifying 0 will ignore this parameter. 
            </param>
            <param name="positionY">
            The position on the y-axis in 3D space of the channel. Specifying 0 will ignore this parameter.
            </param>
            <param name="positionZ">
            The position on the z-axis in 3D space of the channel. Specifying 0 will ignore this parameter.
            </param>
            <param name="velocityX">
            Velocity in 'distance units per second' on the x-axis in 3D space of the channel. See remarks. Specifying 0 will ignore this parameter.
            </param>
            <param name="velocityY">
            Velocity in 'distance units per second' on the y-axis in 3D space of the channel. See remarks. Specifying 0 will ignore this parameter.
            </param>
            <param name="velocityZ">
            Velocity in 'distance units per second' on the z-axis in 3D space of the channel. See remarks. Specifying 0 will ignore this parameter.
            </param>
            <remarks>
            A 'distance unit' is specified by System::set3DSettings. By default this is set to meters which is a distance scale of 1.0.
            For a stereo 3d sound, you can set the spread of the left/right parts in speaker space by using Channel::set3DSpread. 
            </remarks>
        </member>
        <member name="M:Atom.Fmod.Channel.Set3DAttributes(System.Single,System.Single,System.Single)">
            <summary>
            Sets the position and velocity of this 3d channel. 
            </summary>
            <param name="positionX">
            The position on the x-axis in 3D space of the channel. Specifying 0 will ignore this parameter. 
            </param>
            <param name="positionY">
            The position on the y-axis in 3D space of the channel. Specifying 0 will ignore this parameter.
            </param>
            <param name="positionZ">
            The position on the z-axis in 3D space of the channel. Specifying 0 will ignore this parameter.
            </param>
            <remarks>
            A 'distance unit' is specified by System::set3DSettings. By default this is set to meters which is a distance scale of 1.0.
            For a stereo 3d sound, you can set the spread of the left/right parts in speaker space by using Channel::set3DSpread. 
            </remarks>
        </member>
        <member name="M:Atom.Fmod.Channel.Set3DAttributes(System.Single,System.Single)">
            <summary>
            Sets the position of this 3d channel. 
            </summary>
            <param name="positionX">
            The position on the x-axis in 3D space of the channel. Specifying 0 will ignore this parameter. 
            </param>
            <param name="positionY">
            The position on the y-axis in 3D space of the channel. Specifying 0 will ignore this parameter.
            </param>
            <remarks>
            A 'distance unit' is specified by System::set3DSettings. By default this is set to meters which is a distance scale of 1.0.
            For a stereo 3d sound, you can set the spread of the left/right parts in speaker space by using Channel::set3DSpread. 
            </remarks>
        </member>
        <member name="M:Atom.Fmod.Channel.Get3DAttributes(System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@)">
            <summary>
            Gets the position and velocity of this 3d channel. 
            </summary>
            <param name="positionX">
            The position on the x-axis in 3D space of the channel.
            </param>
            <param name="positionY">
            The position on the y-axis in 3D space of the channel.
            </param>
            <param name="positionZ">
            The position on the z-axis in 3D space of the channel.
            </param>
            <param name="velocityX">
            Velocity in 'distance units per second' on the x-axis in 3D space of the channel.
            </param>
            <param name="velocityY">
            Velocity in 'distance units per second' on the y-axis in 3D space of the channel.
            </param>
            <param name="velocityZ">
            Velocity in 'distance units per second' on the z-axis in 3D space of the channel.
            </param>
            <remarks>
            A 'distance unit' is specified by System::set3DSettings. By default this is set to meters which is a distance scale of 1.0.
            For a stereo 3d sound, you can set the spread of the left/right parts in speaker space by using Channel::set3DSpread. 
            </remarks>
        </member>
        <member name="M:Atom.Fmod.Channel.Get3DAttributes(System.Single@,System.Single@,System.Single@)">
            <summary>
            Gets the position of this 3d channel. 
            </summary>
            <param name="positionX">
            The position on the x-axis in 3D space of the channel.
            </param>
            <param name="positionY">
            The position on the y-axis in 3D space of the channel.
            </param>
            <param name="positionZ">
            The position on the z-axis in 3D space of the channel.
            </param>
            <remarks>
            A 'distance unit' is specified by System::set3DSettings. By default this is set to meters which is a distance scale of 1.0.
            For a stereo 3d sound, you can set the spread of the left/right parts in speaker space by using Channel::set3DSpread. 
            </remarks>
        </member>
        <member name="M:Atom.Fmod.Channel.Get3DAttributes(System.Single@,System.Single@)">
            <summary>
            Gets the position of this 3d channel. 
            </summary>
            <param name="positionX">
            The position on the x-axis in 3D space of the channel.
            </param>
            <param name="positionY">
            The position on the y-axis in 3D space of the channel.
            </param>
            <remarks>
            A 'distance unit' is specified by System::set3DSettings. By default this is set to meters which is a distance scale of 1.0.
            For a stereo 3d sound, you can set the spread of the left/right parts in speaker space by using Channel::set3DSpread. 
            </remarks>
        </member>
        <member name="M:Atom.Fmod.Channel.Set3DMinMaxDistance(System.Single,System.Single)">
            <summary>
            Sets the minimum and maximum audible distance for this channel.
            </summary>
            <param name="minimumDistance">
            The channel's minimum volume distance in "units". The default value is 1.0f. See remarks for more on units. 
            </param>
            <param name="maximumDistance">
            The channel's maximum volume distance in "units". The default value is 10000.0f. See remarks for more on units.
            </param>
            <remarks>
            MinDistance is the minimum distance that the sound emitter will cease to continue growing louder at (as it approaches the listener).
            Within the mindistance it stays at the constant loudest volume possible. Outside of this mindistance it begins to attenuate.
            MaxDistance is the distance a sound stops attenuating at. Beyond this point it will stay at the volume it would be at maxdistance units from the listener and will not attenuate any more.
            MinDistance is useful to give the impression that the sound is loud or soft in 3d space. An example of this is a small quiet object, such as a bumblebee, which you could set a mindistance of to 0.1 for example, which would cause it to attenuate quickly and dissapear when only a few meters away from the listener.
            Another example is a jumbo jet, which you could set to a mindistance of 100.0, which would keep the sound volume at max until the listener was 100 meters away, then it would be hundreds of meters more before it would fade out.
            <para>
            In summary, increase the mindistance of a sound to make it 'louder' in a 3d world, and decrease it to make it 'quieter' in a 3d world.
            maxdistance is effectively obsolete unless you need the sound to stop fading out at a certain point. Do not adjust this from the default if you dont need to.
            Some people have the confusion that maxdistance is the point the sound will fade out to, this is not the case.
            </para>
            <para>
            A 'distance unit' is specified by System::set3DSettings. By default this is set to meters which is a distance scale of 1.0.
            The default units for minimum and maximum distances are 1.0 and 10000.0f.
            Volume drops off at mindistance / distance.
            To define the min and max distance per sound and not per channel use Sound::set3DMinMaxDistance.
            </para>
            If FMOD_3D_CUSTOMROLLOFF is used, then these values are stored, but ignored in 3d processing.
            </remarks>
        </member>
        <member name="M:Atom.Fmod.Channel.Get3DMinMaxDistance(System.Single@,System.Single@)">
            <summary>
            Sets the minimum and maximum audible distance for this channel.
            </summary>
            <param name="minimumDistance">
            The channel's minimum volume distance in "units". The default value is 1.0f. See remarks for more on units. 
            </param>
            <param name="maximumDistance">
            The channel's maximum volume distance in "units". The default value is 10000.0f. See remarks for more on units.
            </param>
            <remarks>
            MinDistance is the minimum distance that the sound emitter will cease to continue growing louder at (as it approaches the listener).
            Within the mindistance it stays at the constant loudest volume possible. Outside of this mindistance it begins to attenuate.
            MaxDistance is the distance a sound stops attenuating at. Beyond this point it will stay at the volume it would be at maxdistance units from the listener and will not attenuate any more.
            MinDistance is useful to give the impression that the sound is loud or soft in 3d space. An example of this is a small quiet object, such as a bumblebee, which you could set a mindistance of to 0.1 for example, which would cause it to attenuate quickly and dissapear when only a few meters away from the listener.
            Another example is a jumbo jet, which you could set to a mindistance of 100.0, which would keep the sound volume at max until the listener was 100 meters away, then it would be hundreds of meters more before it would fade out.
            <para>
            In summary, increase the mindistance of a sound to make it 'louder' in a 3d world, and decrease it to make it 'quieter' in a 3d world.
            maxdistance is effectively obsolete unless you need the sound to stop fading out at a certain point. Do not adjust this from the default if you dont need to.
            Some people have the confusion that maxdistance is the point the sound will fade out to, this is not the case.
            </para>
            <para>
            A 'distance unit' is specified by System::set3DSettings. By default this is set to meters which is a distance scale of 1.0.
            The default units for minimum and maximum distances are 1.0 and 10000.0f.
            Volume drops off at mindistance / distance.
            To define the min and max distance per sound and not per channel use Sound::set3DMinMaxDistance.
            </para>
            If FMOD_3D_CUSTOMROLLOFF is used, then these values are stored, but ignored in 3d processing.
            </remarks>
        </member>
        <member name="M:Atom.Fmod.Channel.CHANNEL_CALLBACK_END(System.IntPtr,Atom.Fmod.Native.CHANNELCONTROL_TYPE,Atom.Fmod.Native.CHANNELCONTROL_CALLBACK_TYPE,System.IntPtr,System.IntPtr)">
            <summary>
            Called by native FMOD when the native Channel reaches the end.
            </summary>
            <param name="channelControl">
            A pointer to the raw FMOD channel the callback is related to.
            </param>
            <param name="controlType">
            Identifies the type of control pointer.
            </param>
            <param name="callbackType">
            Identifies the type of the callback.
            </param>
            <param name="commandData1">
            Contains additional command data.
            </param>
            <param name="commandData2">
            Contains additional secondary command data.
            </param>
            <returns>
            The result of the callback.
            </returns>
        </member>
        <member name="M:Atom.Fmod.Channel.ThrowOnError(Atom.Fmod.Native.RESULT)">
            <summary>
            Helper function that throws an <see cref="T:Atom.Fmod.AudioException"/>
            if the given native <see cref="T:Atom.Fmod.Native.RESULT"/> is not OK.
            </summary>
            <param name="result">The result to test for.</param>
        </member>
        <member name="F:Atom.Fmod.Channel.ended">
            <summary>
            Holds the event handlers that will be informed once this Channel stops.
            </summary>
        </member>
        <member name="F:Atom.Fmod.Channel.channelGroup">
            <summary>
            The ChannelGroup this Channel is part of.
            </summary>
        </member>
        <member name="F:Atom.Fmod.Channel.nativeChannel">
            <summary>
            The <see cref="T:Atom.Fmod.Native.Channel"/> object. 
            </summary>
        </member>
        <member name="F:Atom.Fmod.Channel.sound">
            <summary>
            The <see cref="T:Atom.Fmod.Sound"/> the <see cref="T:Atom.Fmod.Channel"/> was initialy
            created with.
            </summary>
        </member>
        <member name="F:Atom.Fmod.Channel.endCallback">
            <summary>
            The native callback that is called when the channel stops to play.
            </summary>
        </member>
        <member name="T:Atom.Fmod.ChannelEventArgs">
            <summary>
            Defines specialized <see cref="T:System.EventArgs"/> for <see cref="T:Atom.Fmod.Channel"/> related events.
            This class can't be inherited.
            </summary>
        </member>
        <member name="P:Atom.Fmod.ChannelEventArgs.Channel">
            <summary>
            Gets the <see cref="T:Atom.Fmod.Channel"/> object that is related to the event.
            </summary>
        </member>
        <member name="M:Atom.Fmod.ChannelEventArgs.#ctor(Atom.Fmod.Channel)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Fmod.ChannelEventArgs"/> clas.
            </summary>
            <param name="channel">
            The <see cref="T:Atom.Fmod.Channel"/> object the new ChannelEventArgs relates to.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="channel"/> is null.
            </exception>
        </member>
        <member name="F:Atom.Fmod.ChannelEventArgs.channel">
            <summary>
            The <see cref="T:Atom.Fmod.Channel"/> object this ChannelEventArgs relates to.
            </summary>
        </member>
        <member name="T:Atom.Fmod.ChannelGroup">
            <summary>
            A channel group allows to set the properties
            of multiple <see cref="T:Atom.Fmod.Channel"/>s at a time.
            This class can't be inherited.
            </summary>
        </member>
        <member name="P:Atom.Fmod.ChannelGroup.Name">
            <summary>
            Gets the name of this ChannelGroup.
            </summary>
        </member>
        <member name="P:Atom.Fmod.ChannelGroup.Volume">
            <summary>
            Gets or sets the master volume level for the channel group.
            </summary>
            <remarks>
            This function does not go through and overwrite the channel volumes. 
            It scales them by the channel group's volume.
            That way when Channel::setVolume / Channel::getVolume is called the respective individual channel volumes 
            will still be preserved. 
            </remarks>
            <value>
            A linear volume level, from 0.0 to 1.0 inclusive. 
            0.0 = silent, 1.0 = full volume. Default = 1.0. 
            </value>
        </member>
        <member name="P:Atom.Fmod.ChannelGroup.Pitch">
            <summary>
            Gets or sets the master pitch level of this ChannelGroup.  
            </summary>
            <remarks>
            This function does not go through and overwrite the channel frequencies.
            It scales them by the channel group's pitch.
            That way when Channel::setFrequency / Channel::getFrequency is called the respective individual channel frequencies 
            will still be preserved.
            </remarks>
            <value>
            The channel group pitch value, from 0.0 to 10.0 inclusive.
            0.0 = silent, 1.0 = full volume. 
            Default = 1.0. 
            </value>
        </member>
        <member name="P:Atom.Fmod.ChannelGroup.IsMuted">
            <summary>
            Gets or sets a value indicating whether the ChannelGroup is muted.
            </summary>
        </member>
        <member name="P:Atom.Fmod.ChannelGroup.IsPaused">
            <summary>
            Gets or sets a value indicating whether the ChannelGroup is paused.
            </summary>
        </member>
        <member name="P:Atom.Fmod.ChannelGroup.ChannelCount">
            <summary>
            Gets the current number of assigned channels to this channel group.
            </summary>
        </member>
        <member name="P:Atom.Fmod.ChannelGroup.GroupChildCount">
            <summary>
            Gets the number of child channel groups this ChannelGroup has.
            </summary>
        </member>
        <member name="P:Atom.Fmod.ChannelGroup.UserData">
            <summary>
            Gets or sets the pointer to optional user data.
            </summary>
            <value>The default value is InpPtr.Zero.</value>
        </member>
        <member name="P:Atom.Fmod.ChannelGroup.AudioSystem">
            <summary>
            Gets the <see cref="P:Atom.Fmod.ChannelGroup.AudioSystem"/> that owns this ChannelGroup.
            </summary>
        </member>
        <member name="P:Atom.Fmod.ChannelGroup.NativeGroup">
            <summary>
            Gets the <see cref="T:Atom.Fmod.Native.ChannelGroup"/> object.
            </summary>
        </member>
        <member name="M:Atom.Fmod.ChannelGroup.#ctor(System.String,Atom.Fmod.AudioSystem)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Fmod.ChannelGroup"/> class.
            </summary>
            <param name="name">
            The name of the new ChannelGroup.
            </param>
            <param name="audioSystem">
            The AudioSystem that owns the new ChannelGroup.
            </param>
        </member>
        <member name="M:Atom.Fmod.ChannelGroup.#ctor(Atom.Fmod.Native.ChannelGroup,Atom.Fmod.AudioSystem)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Fmod.ChannelGroup"/> class.
            </summary>
            <param name="nativeGroup">
            The native ChannelGroup object.
            </param>
            <param name="audioSystem">
            The AudioSystem that owns the new ChannelGroup.
            </param>
        </member>
        <member name="M:Atom.Fmod.ChannelGroup.Release">
            <summary>
            Warning: This function should in theory set the ChannelGroup
            of all associated Channels to the MasterChannelGroup. But it does not. Not implemented.
            ---------------------
            Frees this ChannelGroup.
            </summary>
            <remarks>
            All channels assigned to this group are returned back to the master channel group owned by the System object. 
            See System::getMasterChannelGroup.
            All child groups assigned to this group are returned back to the master channel group owned by the System object. 
            See System::getMasterChannelGroup.
            </remarks>
        </member>
        <member name="M:Atom.Fmod.ChannelGroup.SetVolume(System.Single)">
            <summary>
            Overrides the volume of all channels within this channel group and those of any sub channelgroups.
            </summary>
            <remarks>
            Panning only works on sounds created with FMOD_2D. 3D sounds are not pannable.
            Only sounds that are mono or stereo can be panned. Multichannel sounds (ie >2 channels) cannot be panned.
            <para>
            Mono sounds are panned from left to right using constant power panning.
            This means when pan = 0.0, the balance for the sound in each speaker is 71% left and 71% right, not 50% left and 50% right.
            This gives (audibly) smoother pans.
            Stereo sounds heave each left/right value faded up and down according to the specified pan position.
            This means when pan = 0.0, the balance for the sound in each speaker is 100% left and 100% right.
            When pan = -1.0, only the left channel of the stereo sound is audible, when pan = 1.0, only the right channel of the stereo sound is audible.
            </para>
            </remarks>
            <param name="volume">
            A linear volume level, from 0.0 to 1.0 inclusive. 0.0 = silent, 1.0 = full volume. Default = 1.0. 
            </param>
        </member>
        <member name="M:Atom.Fmod.ChannelGroup.SetPan(System.Single)">
            <summary>
            Sets pan position linearly of all channels within this channel group and those of any sub channelgroups.  
            </summary>
            <remarks>
            This is not to be used as a master volume for the group, as it will modify the volumes of the channels themselves.
            </remarks>
            <param name="pan">
            A pan position, from 0.0 to 1.0 inclusive. 0.0 = left, 1.0 = right. Default = 0.5. 
            </param>
        </member>
        <member name="M:Atom.Fmod.ChannelGroup.SetPitch(System.Single)">
            <summary>
            Sets the pitch value.
            </summary>
            <param name="pan">
            Pitch value, 0.5 = half pitch, 2.0 = double pitch, etc default = 1.0.
            </param>
        </member>
        <member name="M:Atom.Fmod.ChannelGroup.SetVolumeRamp(System.Boolean)">
            <summary>
            Sets whether the channel automatically ramps when setting volumes.
            </summary>
            <remarks>
            When changing volumes on a non-paused channel, FMOD normally adds a small ramp to avoid a pop sound.
            This function allows that setting to be overriden and volume changes to be applied immediately.
            </remarks>
            <param name="ramp">
            Whether to enable volume ramping.
            </param>
        </member>
        <member name="M:Atom.Fmod.ChannelGroup.AddChildGroup(Atom.Fmod.ChannelGroup)">
            <summary>
            Adds a channel group as a child of the current channel group.  
            </summary>
            <param name="group">
            The channel group to add as a child.
            </param>
        </member>
        <member name="M:Atom.Fmod.ChannelGroup.GetChildGroup(System.Int32)">
            <summary>
            Gets the child ChannelGroup at the given <paramref name="index"/>.
            </summary>
            <param name="index">
            The zero-based index of the child ChannelGroup to receive.
            </param>
            <returns>
            The requested ChannelGroup.
            </returns>
        </member>
        <member name="M:Atom.Fmod.ChannelGroup.ThrowOnError(Atom.Fmod.Native.RESULT)">
            <summary>
            Helper function that throws an <see cref="T:Atom.Fmod.AudioException"/>
            if the given native <see cref="T:Atom.Fmod.Native.RESULT"/> is not OK.
            </summary>
            <param name="result">The result to test for.</param>
        </member>
        <member name="F:Atom.Fmod.ChannelGroup.childGroups">
            <summary>
            The list that stores the child groups of this ChannelGroup.
            </summary>
        </member>
        <member name="F:Atom.Fmod.ChannelGroup.nativeGroup">
            <summary>
            The native FmodO.Native.ChannelGroup object.
            </summary>
        </member>
        <member name="F:Atom.Fmod.ChannelGroup.audioSystem">
            <summary>
            The AudioSystem that owns this ChannelGroup.
            </summary>
        </member>
        <member name="T:Atom.Fmod.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Atom.Fmod.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Atom.Fmod.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Atom.Fmod.Properties.Resources.Error_NativeDllVersionXNotSupportedYRequired">
            <summary>
              Looks up a localized string similar to Version &apos;{0}&apos; of the native fmodex.dll is not supported. &apos;{1}&apos; or newer is required..
            </summary>
        </member>
        <member name="P:Atom.Fmod.Properties.Resources.Error_NativeSoundObjectIsNull">
            <summary>
              Looks up a localized string similar to The native FMODex sound object is null. Consider loading the Sound Resource..
            </summary>
        </member>
        <member name="P:Atom.Fmod.Properties.Resources.Error_ResourceXAtPathYDoesntExist">
            <summary>
              Looks up a localized string similar to The requested resource &apos;{0}&apos; doesn&apos;t exist at the file path &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Atom.Fmod.Properties.Resources.Error_TheAudioSystemIsAlreadyInitialized">
            <summary>
              Looks up a localized string similar to The AudioSystem is already initialized..
            </summary>
        </member>
        <member name="P:Atom.Fmod.Properties.Resources.Error_TheAudioSystemIsNotInitialized">
            <summary>
              Looks up a localized string similar to The AudioSystem is not initialized..
            </summary>
        </member>
        <member name="P:Atom.Fmod.Properties.Resources.Error_TheChannelGroupHasNoChildGroups">
            <summary>
              Looks up a localized string similar to The ChannelGroup has got no child ChannelGroups..
            </summary>
        </member>
        <member name="T:Atom.Fmod.Sound">
            <summary>
            Represents a sound resource which can be used to play on a <see cref="T:Atom.Fmod.Channel"/>.
            This class can't be inherited.
            </summary>
        </member>
        <member name="E:Atom.Fmod.Sound.OnNewChannel">
            <summary>
            Called when a new <see cref="T:Atom.Fmod.Channel"/> for this Sound resource has been created.
            </summary>
        </member>
        <member name="P:Atom.Fmod.Sound.Name">
            <summary>
            Gets the name of this Sound resource.
            </summary>
        </member>
        <member name="P:Atom.Fmod.Sound.FullPath">
            <summary>
            Gets the full path to this Sound Resource.
            </summary>
        </member>
        <member name="P:Atom.Fmod.Sound.Mode">
            <summary>
            Gets or sets the mode of this Sound resource.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            If the native Sound object is null, consider loading the Sound resource.
            </exception>
            <exception cref="T:Atom.Fmod.AudioException">
            If an native FMOD error has occured.
            </exception>
        </member>
        <member name="P:Atom.Fmod.Sound.LoopCount">
            <summary>
            Gets or sets how often the Sound will by default if
            it's Mode is FMOD_LOOP_NORMAL or FMOD_LOOP_BIDI.
            </summary>
            <value>
            Number of times to loop before stopping. 
            0 = oneshot. 1 = loop once then stop. -1 = loop forever. Default = -1
            </value>
            <remarks>
            Native FMOD documentation remarks:
            This function does not affect FMOD_HARDWARE based sounds that are not streamable.
            FMOD_SOFTWARE based sounds or any type of sound created with System::CreateStream or 
            FMOD_CREATESTREAM will support this function.
            Issues with streamed audio. (Sounds created with with System::createStream or FMOD_CREATESTREAM). 
            When changing the loop count, sounds created with System::createStream or FMOD_CREATESTREAM 
            may already have been pre-buffered and executed their loop logic ahead of time, before this call was even made.
            This is dependant on the size of the sound versus the size of the stream decode buffer. 
            See FMOD_CREATESOUNDEXINFO.
            If this happens, you may need to reflush the stream buffer.
            To do this, you can call Channel::setPosition which forces a reflush of the stream buffer.
            Note this will usually only happen if you have sounds or 
            looppoints that are smaller than the stream decode buffer size. 
            Otherwise you will not normally encounter any problems.
            </remarks>
            <exception cref="T:System.InvalidOperationException">If the native Sound object is null, consider loading the Sound resource.</exception>
            <exception cref="T:Atom.Fmod.AudioException">If an native FMOD error has occured.</exception>
        </member>
        <member name="P:Atom.Fmod.Sound.SubSoundCount">
            <summary>
            Gets the number of subsounds stored within the Sound.
            </summary>
            <remarks>
            A format that has subsounds is usually a container format,
            such as FSB, DLS, MOD, S3M, XM, IT.
            </remarks>
        </member>
        <member name="P:Atom.Fmod.Sound.AudioSystem">
            <summary>
            Gets the <see cref="P:Atom.Fmod.Sound.AudioSystem"/> object that owns this Sound resource.
            </summary>
        </member>
        <member name="M:Atom.Fmod.Sound.#ctor(System.String,System.String,Atom.Fmod.SoundGroup,Atom.Fmod.AudioSystem)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Fmod.Sound"/> class.
            </summary>
            <param name="name"> The name of the sound file. </param>
            <param name="fullPath">The full path to the Sound Resource.</param>
            <param name="group">The optional group under which this sound is loaded.</param>
            <param name="audioSystem"> The sound manager that is used to find resource data. </param>
        </member>
        <member name="M:Atom.Fmod.Sound.Load(Atom.Fmod.Native.MODE)">
            <summary> 
            Loads the <see cref="T:Atom.Fmod.Sound"/> resource.
            </summary>
            <param name="mode">
            The loading mode to use.
            </param>
            <exception cref="T:Atom.Fmod.AudioException">If an native FMOD error has occured.</exception>
        </member>
        <member name="M:Atom.Fmod.Sound.LoadAsSample(System.Boolean)">
            <summary> 
            Loads the <see cref="T:Atom.Fmod.Sound"/> resource with the default settings a Sample would have:
            MODE.HARDWARE | MODE.CREATESAMPLE | MODE._2D | Looping Behaviour
            </summary>
            <param name="isLooping">
            States whether the Sound should be looping by default.
            </param>
            <exception cref="T:Atom.Fmod.AudioException">
            If an native FMOD error has occured.
            </exception>
            <returns>
            This object for operation chaining.
            </returns>
        </member>
        <member name="M:Atom.Fmod.Sound.LoadAsSample(Atom.Fmod.Native.MODE)">
            <summary> 
            Loads the <see cref="T:Atom.Fmod.Sound"/> resource with the given settings in the Sample sound group.
            </summary>
            <exception cref="T:Atom.Fmod.AudioException">
            If an native FMOD error has occured.
            </exception>
            <returns>
            This object for operation chaining.
            </returns>
        </member>
        <member name="M:Atom.Fmod.Sound.LoadAsMusic(System.Boolean)">
            <summary> 
            Loads the <see cref="T:Atom.Fmod.Sound"/> resource with the default settings a Music would have:
            MODE.HARDWARE | MODE.CREATESTREAM | MODE._2D | Looping Behaviour
            </summary>
            <param name="isLooping">
            States whether the Sound should be looping by default.
            </param>
            <exception cref="T:Atom.Fmod.AudioException">
            If an native FMOD error has occured.
            </exception>
        </member>
        <member name="M:Atom.Fmod.Sound.Play">
            <summary> Starts to play this <see cref="T:Atom.Fmod.Sound"/> object. </summary>
            <exception cref="T:Atom.Fmod.AudioException"> If an error has occured. </exception>
            <returns>
            A new managed <see cref="T:Atom.Fmod.Channel"/> instance.
            </returns>
        </member>
        <member name="M:Atom.Fmod.Sound.Play(System.Boolean)">
            <summary>
            Starts to play this <see cref="T:Atom.Fmod.Sound"/> object.
            </summary>
            <exception cref="T:Atom.Fmod.AudioException">
            If an error has occured.
            </exception>
            <param name="startPaused">
            States whether the Sound starts paused or not.
            </param>
            <returns>
            A new managed <see cref="T:Atom.Fmod.Channel"/> instance.
            </returns>
        </member>
        <member name="M:Atom.Fmod.Sound.Play(System.Single)">
            <summary>
            Starts to play this <see cref="T:Atom.Fmod.Sound"/> object at the specified volumne.
            </summary>
            <exception cref="T:Atom.Fmod.AudioException">
            If an error has occured.
            </exception>
            <param name="volume">
            The volume of the channel. Where 0 = silence and 1 = full volume.
            </param>
            <returns>
            A new managed <see cref="T:Atom.Fmod.Channel"/> instance.
            </returns>
        </member>
        <member name="M:Atom.Fmod.Sound.Release">
            <summary>
            Releases the <see cref="T:Atom.Fmod.Sound"/> resource and its underlying native FMOD objects.
            </summary>
            <exception cref="T:Atom.Fmod.AudioException"> If a native FMOD error has occured. </exception>
        </member>
        <member name="M:Atom.Fmod.Sound.GetDefaults(System.Single@,System.Single@,System.Single@,System.Int32@)">
            <summary>
            Gets the default settings that are applied to new <see cref="T:Atom.Fmod.Channel"/>
            return by Play.
            </summary>
            <param name="frequency">
            Address of a variable that receives the default frequency for the sound.
            </param>
            <param name="volume">
            Address of a variable that receives the default volume for the sound. 
            Result will be from 0.0 to 1.0. 0.0 = Silent, 1.0 = full volume. Default = 1.0.
            </param>
            <param name="pan">
            Address of a variable that receives the default pan for the sound. 
            Result will be from -1.0 to +1.0. -1.0 = Full left, 0.0 = center, 1.0 = full right.
            Default = 0.0. 
            </param>
            <param name="priority">
            Address of a variable that receives the default priority for the sound when played on a channel.
            Result will be from 0 to 256. 0 = most important, 256 = least important. Default = 128.
            </param>
            <exception cref="T:System.InvalidOperationException">If the native Sound object is null, consider loading the Sound resource.</exception>
            <exception cref="T:Atom.Fmod.AudioException">If an native FMOD error has occured.</exception>
        </member>
        <member name="M:Atom.Fmod.Sound.SetDefaults(System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Sets the default settings that are applied to new <see cref="T:Atom.Fmod.Channel"/>
            returned by Play. Doesn't change already existing Channels.
            </summary>
            <param name="frequency">
            The default frequency for the sound.
            </param>
            <param name="volume">
            The default volume for the sound. 
            Result will be from 0.0 to 1.0. 0.0 = Silent, 1.0 = full volume. Default = 1.0.
            </param>
            <param name="pan">
            The default pan for the sound. 
            Result will be from -1.0 to +1.0. -1.0 = Full left, 0.0 = center, 1.0 = full right.
            Default = 0.0. 
            </param>
            <param name="priority">
            The default priority for the sound when played on a channel.
            Result will be from 0 to 256. 0 = most important, 256 = least important. Default = 128.
            </param>
            <exception cref="T:System.InvalidOperationException">If the native Sound object is null, consider loading the Sound resource.</exception>
            <exception cref="T:Atom.Fmod.AudioException">If an native FMOD error has occured.</exception>
        </member>
        <member name="M:Atom.Fmod.Sound.GetFormat(Atom.Fmod.Native.SOUND_TYPE@,Atom.Fmod.Native.SOUND_FORMAT@,System.Int32@,System.Int32@)">
            <summary>
            Returns format information about the sound.  
            </summary>
            <param name="type">Address of a variable that receives the type of sound.</param>
            <param name="format">Address of a variable that receives the format of the sound. </param>
            <param name="channelCount">Address of a variable that receives the number of channels for the sound. </param>
            <param name="bits">
            Address of a variable that receives the number of bits per sample for the sound.
            This corresponds to FMOD_SOUND_FORMAT but is provided as an integer format for convenience.
            Hardware compressed formats such as VAG, XADPCM, GCADPCM that stay compressed in memory will return 0.
            </param>
            <exception cref="T:System.InvalidOperationException">If the native Sound object is null, consider loading the Sound resource.</exception>
            <exception cref="T:Atom.Fmod.AudioException">If an native FMOD error has occured.</exception>
        </member>
        <member name="M:Atom.Fmod.Sound.GetLength(Atom.Fmod.Native.TIMEUNIT)">
            <summary>
            Retrieves the length of thi Sound using the specified time unit.
            </summary>
            <param name="lengthType">Time unit retrieve into the length parameter.</param>
            <exception cref="T:System.InvalidOperationException">If the native Sound object is null, consider loading the Sound resource.</exception>
            <exception cref="T:Atom.Fmod.AudioException">If an native FMOD error has occured.</exception>
            <returns>
            The length of this Sound converted to the given TIMEUNIT.
            </returns>
        </member>
        <member name="M:Atom.Fmod.Sound.GetLengthInt(Atom.Fmod.Native.TIMEUNIT)">
            <summary>
            Retrieves the length of the sound using the specified time unit.
            </summary>
            <param name="lengthType">Time unit retrieve into the length parameter.</param>
            <exception cref="T:System.InvalidOperationException">If the native Sound object is null, consider loading the Sound resource.</exception>
            <exception cref="T:Atom.Fmod.AudioException">If an native FMOD error has occured.</exception>
            <returns>
            The length of this Sound converted to the given TIMEUNIT.
            </returns>
        </member>
        <member name="M:Atom.Fmod.Sound.GetTagCount(System.Int32@,System.Int32@)">
            <summary>
            Retrieves the number of tags belonging to a sound.
            </summary>
            <param name="tagCount">
            Address of a variable that receives the number of tags in the sound.
            </param>
            <param name="updatedTagCount">
            Address of a variable that receives the number of tags updated since this function was last called.
            </param>
            <exception cref="T:System.InvalidOperationException">If the native Sound object is null, consider loading the Sound resource.</exception>
            <exception cref="T:Atom.Fmod.AudioException">If an native FMOD error has occured.</exception>
        </member>
        <member name="M:Atom.Fmod.Sound.SetLoopPoints(System.UInt32,Atom.Fmod.Native.TIMEUNIT,System.UInt32,Atom.Fmod.Native.TIMEUNIT)">
            <summary>
            Sets the loop points within this Sound resource.  
            </summary>
            <param name="start">The loop start point. This point in time is played, so it is inclusive. </param>
            <param name="startType">The time format used for the loop start point.</param>
            <param name="end">The loop end point. This point in time is played, so it is inclusive. </param>
            <param name="endType">The time format used for the loop end point.</param>
            <remarks>
            Native FMOD documentation:
            Not supported by static sounds created with FMOD_HARDWARE.
            Supported by sounds created with FMOD_SOFTWARE, or sounds of any type (hardware or software)
            created with System::createStream or FMOD_CREATESTREAM. 
            If a sound was 1000ms long and you wanted to loop the whole sound, loopstart would be 0, 
            and loopend would be 999,  not 1000.
            If loop end is smaller or equal to loop start, it will result in an error.
            If loop start or loop end is larger than the length of the sound, it will result in an error.
            </remarks>
            <exception cref="T:System.InvalidOperationException">If the native Sound object is null, consider loading the Sound resource.</exception>
            <exception cref="T:Atom.Fmod.AudioException">If an native FMOD error has occured.</exception>
        </member>
        <member name="M:Atom.Fmod.Sound.SetLoopPointsInt(System.Int32,Atom.Fmod.Native.TIMEUNIT,System.Int32,Atom.Fmod.Native.TIMEUNIT)">
            <summary>
            Sets the loop points within this Sound resource.  
            </summary>
            <param name="start">The loop start point. This point in time is played, so it is inclusive. </param>
            <param name="startType">The time format used for the loop start point.</param>
            <param name="end">The loop end point. This point in time is played, so it is inclusive. </param>
            <param name="endType">The time format used for the loop end point.</param>
            <exception cref="T:System.InvalidOperationException">If the native Sound object is null, consider loading the Sound resource.</exception>
            <exception cref="T:Atom.Fmod.AudioException">If an native FMOD error has occured.</exception>
            <remarks>
            Native FMOD documentation:
            Not supported by static sounds created with FMOD_HARDWARE.
            Supported by sounds created with FMOD_SOFTWARE, or sounds of any type (hardware or software)
            created with System::createStream or FMOD_CREATESTREAM. 
            If a sound was 1000ms long and you wanted to loop the whole sound, loopstart would be 0, 
            and loopend would be 999,  not 1000.
            If loop end is smaller or equal to loop start, it will result in an error.
            If loop start or loop end is larger than the length of the sound, it will result in an error.
            </remarks>
        </member>
        <member name="M:Atom.Fmod.Sound.GetLoopPoints(System.UInt32@,Atom.Fmod.Native.TIMEUNIT,System.UInt32@,Atom.Fmod.Native.TIMEUNIT)">
            <summary>
            Gets the loop points within this Sound resource.  
            </summary>
            <param name="start">The loop start point. This point in time is played, so it is inclusive.</param>
            <param name="startType">The time format used for the loop start point.</param>
            <param name="end">The loop end point. This point in time is played, so it is inclusive.</param>
            <param name="endType">The time format used for the loop end point.</param>
            <exception cref="T:System.InvalidOperationException">If the native Sound object is null, consider loading the Sound resource.</exception>
            <exception cref="T:Atom.Fmod.AudioException">If an native FMOD error has occured.</exception>
            <remarks>
            Native FMOD documentation:
            Not supported by static sounds created with FMOD_HARDWARE.
            Supported by sounds created with FMOD_SOFTWARE, or sounds of any type (hardware or software)
            created with System::createStream or FMOD_CREATESTREAM. 
            If a sound was 1000ms long and you wanted to loop the whole sound, loopstart would be 0, 
            and loopend would be 999,  not 1000.
            If loop end is smaller or equal to loop start, it will result in an error.
            If loop start or loop end is larger than the length of the sound, it will result in an error.
            </remarks>
        </member>
        <member name="M:Atom.Fmod.Sound.GetLoopPointsInt(System.Int32@,Atom.Fmod.Native.TIMEUNIT,System.Int32@,Atom.Fmod.Native.TIMEUNIT)">
            <summary>
            Gets the loop points within this Sound resource.  
            </summary>
            <param name="start">The loop start point. This point in time is played, so it is inclusive.</param>
            <param name="startType">The time format used for the loop start point.</param>
            <param name="end">The loop end point. This point in time is played, so it is inclusive.</param>
            <param name="endType">The time format used for the loop end point.</param>
            <exception cref="T:System.InvalidOperationException">If the native Sound object is null, consider loading the Sound resource.</exception>
            <exception cref="T:Atom.Fmod.AudioException">If an native FMOD error has occured.</exception>
            <remarks>
            Native FMOD documentation:
            Not supported by static sounds created with FMOD_HARDWARE.
            Supported by sounds created with FMOD_SOFTWARE, or sounds of any type (hardware or software)
            created with System::createStream or FMOD_CREATESTREAM. 
            If a sound was 1000ms long and you wanted to loop the whole sound, loopstart would be 0, 
            and loopend would be 999,  not 1000.
            If loop end is smaller or equal to loop start, it will result in an error.
            If loop start or loop end is larger than the length of the sound, it will result in an error.
            </remarks>
        </member>
        <member name="M:Atom.Fmod.Sound.ThrowOnError(Atom.Fmod.Native.RESULT)">
            <summary>
            Helper function that throws an <see cref="T:Atom.Fmod.AudioException"/>
            if the given native <see cref="T:Atom.Fmod.Native.RESULT"/> is not OK.
            </summary>
            <param name="result">The result to test for.</param>
        </member>
        <member name="F:Atom.Fmod.Sound.isLoaded">
            <summary>
            States whether the Sound resource has been loaded.
            </summary>
        </member>
        <member name="F:Atom.Fmod.Sound.soundGroup">
            <summary>
            The group under which this sound is loaded.
            </summary>
        </member>
        <member name="F:Atom.Fmod.Sound.nativeSound">
            <summary>
            The underlying sound object.
            </summary>
        </member>
        <member name="F:Atom.Fmod.Sound.nativeChannelGroup">
            <summary>
            The channel group on which the sound plays.
            </summary>
        </member>
        <member name="F:Atom.Fmod.Sound.name">
            <summary>
            The name of the sound file. 
            </summary>
        </member>
        <member name="F:Atom.Fmod.Sound.fullPath">
            <summary>
            The full path to the sound file.
            </summary>
        </member>
        <member name="F:Atom.Fmod.Sound.audioSystem">
            <summary>
            The underlying AudioSystem.
            </summary>
        </member>
        <member name="T:Atom.Fmod.SoundExtensions">
            <summary>
            Defines extension methods for the Sound class.
            </summary>
        </member>
        <member name="M:Atom.Fmod.SoundExtensions.PlayAt(Atom.Fmod.Sound,Atom.Math.Vector2,Atom.Math.FloatRange)">
            <summary>
            Plays the given 3D-Sounmd at the given position and distance.
            </summary>
            <param name="sound">
            The sound to play. Must be loaded as a 3D sound.
            </param>
            <param name="center">
            The position at which to play the sound at.
            </param>
            <param name="range">
            The min-max distance of the sound.
            </param>
            <returns>
            The channel in which the sound is playing.
            </returns>
        </member>
        <member name="M:Atom.Fmod.SoundExtensions.PlayAt(Atom.Fmod.Sound,Atom.Math.Vector2,Atom.Math.FloatRange,System.Single)">
            <summary>
            Plays the given 3D-Sounmd at the given position and distance.
            </summary>
            <param name="sound">
            The sound to play. Must be loaded as a 3D sound.
            </param>
            <param name="center">
            The position at which to play the sound at.
            </param>
            <param name="range">
            The min-max distance of the sound.
            </param>
            <param name="volume">
            The volume to play the sound at.
            </param>
            <returns>
            The channel in which the sound is playing.
            </returns>
        </member>
        <member name="T:Atom.Fmod.SoundGroup">
            <summary>
            A Sound group allows to set the properties
            of multiple <see cref="T:Atom.Fmod.Sound"/>s at a time.
            This class can't be inherited.
            </summary>
        </member>
        <member name="P:Atom.Fmod.SoundGroup.Name">
            <summary>
            Gets the name of this SoundGroup.
            </summary>
        </member>
        <member name="P:Atom.Fmod.SoundGroup.Volume">
            <summary>
            Gets or sets the master volume level for the Sound group.
            </summary>
            <remarks>
            This function does not go through and overwrite the Sound volumes. 
            It scales them by the Sound group's volume.
            That way when Sound::setVolume / Sound::getVolume is called the respective individual Sound volumes 
            will still be preserved. 
            </remarks>
            <value>
            A linear volume level, from 0.0 to 1.0 inclusive. 
            0.0 = silent, 1.0 = full volume. Default = 1.0. 
            </value>
        </member>
        <member name="P:Atom.Fmod.SoundGroup.SoundCount">
            <summary>
            Gets the current number of assigned Sounds to this Sound group.
            </summary>
        </member>
        <member name="P:Atom.Fmod.SoundGroup.UserData">
            <summary>
            Gets or sets the pointer to optional user data.
            </summary>
            <value>The default value is InpPtr.Zero.</value>
        </member>
        <member name="P:Atom.Fmod.SoundGroup.AudioSystem">
            <summary>
            Gets the <see cref="P:Atom.Fmod.SoundGroup.AudioSystem"/> that owns this SoundGroup.
            </summary>
        </member>
        <member name="P:Atom.Fmod.SoundGroup.NativeGroup">
            <summary>
            Gets the <see cref="T:Atom.Fmod.Native.SoundGroup"/> object.
            </summary>
        </member>
        <member name="M:Atom.Fmod.SoundGroup.#ctor(System.String,Atom.Fmod.AudioSystem)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Fmod.SoundGroup"/> class.
            </summary>
            <param name="name">
            The name of the new SoundGroup.
            </param>
            <param name="audioSystem">
            The AudioSystem that owns the new SoundGroup.
            </param>
        </member>
        <member name="M:Atom.Fmod.SoundGroup.#ctor(Atom.Fmod.Native.SoundGroup,Atom.Fmod.AudioSystem)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Fmod.SoundGroup"/> class.
            </summary>
            <param name="nativeGroup">
            The native SoundGroup object.
            </param>
            <param name="audioSystem">
            The AudioSystem that owns the new SoundGroup.
            </param>
        </member>
        <member name="M:Atom.Fmod.SoundGroup.Release">
            <summary>
            Warning: This function should in theory set the SoundGroup
            of all associated Sounds to the MasterSoundGroup. But it does not. Not implemented.
            ---------------------
            Frees this SoundGroup.
            </summary>
            <remarks>
            All Sounds assigned to this group are returned back to the master Sound group owned by the System object. 
            See System::getMasterSoundGroup.
            All child groups assigned to this group are returned back to the master Sound group owned by the System object. 
            See System::getMasterSoundGroup.
            </remarks>
        </member>
        <member name="M:Atom.Fmod.SoundGroup.ThrowOnError(Atom.Fmod.Native.RESULT)">
            <summary>
            Helper function that throws an <see cref="T:Atom.Fmod.AudioException"/>
            if the given native <see cref="T:Atom.Fmod.Native.RESULT"/> is not OK.
            </summary>
            <param name="result">The result to test for.</param>
        </member>
        <member name="F:Atom.Fmod.SoundGroup.nativeGroup">
            <summary>
            The native FmodO.Native.SoundGroup object.
            </summary>
        </member>
        <member name="F:Atom.Fmod.SoundGroup.audioSystem">
            <summary>
            The AudioSystem that owns this SoundGroup.
            </summary>
        </member>
        <member name="T:Atom.Fmod.SoundManager">
            <summary>
            Manages the creation and loading of Sound Resources.
            This class can't be inherited.
            </summary>
        </member>
        <member name="P:Atom.Fmod.SoundManager.AudioSystem">
            <summary>
            Gets the <see cref="P:Atom.Fmod.SoundManager.AudioSystem"/> that owns the <see cref="T:Atom.Fmod.SoundManager"/>.
            </summary>
        </member>
        <member name="M:Atom.Fmod.SoundManager.#ctor(Atom.Fmod.AudioSystem)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Fmod.SoundManager"/> class.
            </summary>
            <param name="audioSystem">
            Reference to the <see cref="P:Atom.Fmod.SoundManager.AudioSystem"/> that owns the <see cref="T:Atom.Fmod.SoundManager"/>.
            </param>
        </member>
        <member name="M:Atom.Fmod.SoundManager.Get(System.String,System.String,System.String,Atom.Fmod.SoundGroup)">
            <summary>
            Tries to get the music <see cref="T:Atom.Fmod.Sound"/>-Resource that
            has the given <paramref name="name"/>.
            </summary>
            <param name="name">
            The name of the resource.
            </param>
            <param name="directoryPath">
            The path to the directory which contains the resource to get.
            </param>
            <param name="tag">
            The (optional) tag that is attached to the sound resource.
            Using different tags one can store the same sound multiple times
            in the same SoundManager.
            </param>
            <param name="group">
            The optional group under which the sound is loaded.
            </param>
            <returns>
            The requested Sound resource; or null.
            </returns>
        </member>
        <member name="M:Atom.Fmod.SoundManager.Get(System.String)">
            <summary>
            Tries to get the music <see cref="T:Atom.Fmod.Sound"/>-Resource that
            has the given <paramref name="fullName"/>.
            </summary>
            <param name="fullName">
            The full name of the resource, including the directory path.
            </param>
            <returns>The requested Sound resource; or null.</returns>
        </member>
        <member name="M:Atom.Fmod.SoundManager.GetMusic(System.String,System.String)">
            <summary>
            Tries to get the music <see cref="T:Atom.Fmod.Sound"/>-Resource that
            has the given <paramref name="name"/>.
            </summary>
            <param name="name">The name of the resource.</param>
            <param name="tag">
            The (optional) tag that is attached to the sound resource.
            Using different tags one can store the same sound multiple times
            in the same SoundManager.
            </param>
            <returns>The requested Sound resource; or null.</returns>
        </member>
        <member name="M:Atom.Fmod.SoundManager.GetSample(System.String,System.String)">
            <summary>
            Tries to get the music <see cref="T:Atom.Fmod.Sound"/>-Resource that
            has the given <paramref name="name"/>.
            </summary>
            <param name="name">The name of the resource.</param>
            <param name="tag">
            The (optional) tag that is attached to the sound resource.
            Using different tags one can store the same sound multiple times
            in the same SoundManager.
            </param>
            <returns>The requested Sound resource; or null.</returns>
        </member>
        <member name="M:Atom.Fmod.SoundManager.Remove(System.String,System.String)">
            <summary>
            Tries to remove the Sound Resource with the given <paramref name="name"/>.
            </summary>
            <param name="name">The name of the Sound to remove.</param>
            <param name="tag">
            The (optional) tag that is attached to the sound resource.
            Using different tags one can store the same sound multiple times
            in the same SoundManager.
            </param>
            <returns>
            Returns true if the resource was removed; otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Fmod.SoundManager.ReleaseAndRemoveAll">
            <summary>
            Releases and removes all Sound resources that have been created
            by the <see cref="T:Atom.Fmod.SoundManager"/>.
            </summary>
        </member>
        <member name="F:Atom.Fmod.SoundManager.audioSystem">
            <summary>
            Reference to the <see cref="P:Atom.Fmod.SoundManager.AudioSystem"/> that owns the <see cref="T:Atom.Fmod.SoundManager"/>.
            </summary>
        </member>
        <member name="F:Atom.Fmod.SoundManager.resources">
            <summary>
            The dictionary of sound resources.
            </summary>
        </member>
    </members>
</doc>
