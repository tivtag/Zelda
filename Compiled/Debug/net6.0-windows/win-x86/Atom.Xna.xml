<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Atom.Xna</name>
    </assembly>
    <members>
        <member name="T:Atom.Xna.CachingCustomAssetLoader`1">
            <summary>
            Implements a base implementation of the ICustomAssetLoader{TAsset} class
            that caches previously loaded assets by their assetName.
            </summary>
            <typeparam name="TAsset">
            The exact type of the IAsset the ICustomAssetLoader can load.
            </typeparam>
        </member>
        <member name="P:Atom.Xna.CachingCustomAssetLoader`1.Assets">
            <summary>
            Gets the assets that have been cached using this CachingCustomAssetLoader{TAsset}.
            </summary>
        </member>
        <member name="P:Atom.Xna.CachingCustomAssetLoader`1.RootDirectory">
            <summary>
            Gets or sets the root path that is automatically
            prefixed to assets loaded by this CachingCustomAssetLoader{TAsset}.
            </summary>
        </member>
        <member name="M:Atom.Xna.CachingCustomAssetLoader`1.Load(System.String)">
            <summary>
            Tries to receive the asset with the given <paramref name="assetName"/>.
            </summary>
            <param name="assetName">
            The name that uniquely identifies the asset to load.
            </param>
            <returns>
            The loaded asset.
            </returns>
        </member>
        <member name="M:Atom.Xna.CachingCustomAssetLoader`1.ActuallyLoad(System.String,System.String)">
            <summary>
            Implements the actual asset loading logic used by this CachingCustomAssetLoader{TAsset}.
            </summary>
            <param name="assetName">
            The name that uniquely identifies the asset to load.
            </param>
            <param name="filePath">
            The path of the file thatis assumed to contain the asset to load.
            </param>
            <returns>
            The loaded asset.
            </returns>
        </member>
        <member name="M:Atom.Xna.CachingCustomAssetLoader`1.DisposeManagedResources">
            <summary>
            Releases all managed resources.
            </summary>
        </member>
        <member name="M:Atom.Xna.CachingCustomAssetLoader`1.UnloadAll">
            <summary>
            Unloads all assets that have been loaden with this IAssetLoader.
            </summary>
        </member>
        <member name="F:Atom.Xna.CachingCustomAssetLoader`1.assets">
            <summary>
            The currently cached assets.
            </summary>
        </member>
        <member name="T:Atom.Xna.ContentAssetLoader">
            <summary>
            Implements the base implementation of an IAssetLoader that uses the
            xna <see cref="P:Atom.Xna.ContentAssetLoader.ContentManager"/> to load and manage assets.
            </summary>
        </member>
        <member name="P:Atom.Xna.ContentAssetLoader.RootDirectory">
            <summary>
            Gets or sets the root directory that is automatically
            prefixed to assets loaded by this IAssetLoader.
            </summary>
        </member>
        <member name="P:Atom.Xna.ContentAssetLoader.ContentManager">
            <summary>
            Gets the ContentManager this ContentAssetLoader internally uses
            to load assets.
            </summary>
        </member>
        <member name="M:Atom.Xna.ContentAssetLoader.#ctor(Microsoft.Xna.Framework.Content.ContentManager)">
            <summary>
            Initializes a new instance of the ContentAssetLoader class.
            </summary>
            <param name="contentManager">
            The Xna ContentManager responsible for loading the assets.
            </param>
        </member>
        <member name="M:Atom.Xna.ContentAssetLoader.Dispose">
            <summary>
            Releases all resources used by this ContentAssetLoader.
            </summary>
        </member>
        <member name="M:Atom.Xna.ContentAssetLoader.UnloadAll">
            <summary>
            Unloads all assets that have been loaden with this ContentAssetLoader.
            </summary>
        </member>
        <member name="F:Atom.Xna.ContentAssetLoader.relativeRootDirectory">
            <summary>
            The relative root directory.
            </summary>
        </member>
        <member name="F:Atom.Xna.ContentAssetLoader.contentManager">
            <summary>
            The Xna ContentManager responsible for loading the Texture2D assets.
            </summary>
        </member>
        <member name="T:Atom.Xna.IAsset">
            <summary>
            Represents a custom asset that can be used by xna applications.
            </summary>
            <remarks>
            Usually IAssets don't use the xna Content Pipeline for greater
            customization.
            </remarks>
        </member>
        <member name="T:Atom.Xna.IAssetLoader">
            <summary>
            Provides the base contract that all asset loaders share.
            </summary>
        </member>
        <member name="P:Atom.Xna.IAssetLoader.RootDirectory">
            <summary>
            Gets or sets the root directory that is automatically
            prefixed to assets loaded by this IAssetLoader.
            </summary>
        </member>
        <member name="M:Atom.Xna.IAssetLoader.UnloadAll">
            <summary>
            Unloads all assets that have been loaden with this IAssetLoader.
            </summary>
        </member>
        <member name="T:Atom.Xna.ICustomAssetLoader`1">
            <summary>
            Represents an <see cref="T:Atom.Xna.IAssetLoader"/> that loads custom <see cref="T:Atom.Xna.IAsset"/>s.
            </summary>
            <typeparam name="TAsset">
            The exact type of the IAsset the ICustomAssetLoader can load.
            </typeparam>
        </member>
        <member name="M:Atom.Xna.ICustomAssetLoader`1.Load(System.String)">
            <summary>
            Tries to receive the asset with the given <paramref name="assetName"/>.
            </summary>
            <param name="assetName">
            The name that uniquely identifies the asset to load.
            </param>
            <returns>
            The loaded asset.
            </returns>
        </member>
        <member name="T:Atom.Xna.Batches.ComposedSpriteBatch">
            <summary>
            Implements mechanisms for drawing various sprites and arabitary forms.
            </summary>
        </member>
        <member name="M:Atom.Xna.Batches.ComposedSpriteBatch.#ctor(Atom.Xna.Batches.ISpriteBatch,Atom.Xna.Batches.ITextureDrawBatch)">
            <summary>
            Initializes a new instance of the ComposedSpriteBatch class.
            </summary>
            <param name="spriteBatch">
            The batch that is used to draw sprites in various ways.
            </param>
            <param name="textureBatch">
            The batch that is used to draw various rectangular shapes.
            </param>
        </member>
        <member name="M:Atom.Xna.Batches.ComposedSpriteBatch.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of the ComposedSpriteBatch class;
            which initializes the CompoedSpriteBatch to internally use a <see cref="T:Atom.Xna.Batches.SpriteDrawBatch"/>
            and a <see cref="T:Atom.Xna.Batches.SpriteTextureDrawBatch"/> that has a white texture.
            </summary>
            <param name="device">
            The XNA graphics device.
            </param>
        </member>
        <member name="M:Atom.Xna.Batches.ComposedSpriteBatch.Initialize(Microsoft.Xna.Framework.Graphics.BlendState,Microsoft.Xna.Framework.Graphics.SamplerState,Microsoft.Xna.Framework.Graphics.SpriteSortMode,Atom.Math.Matrix4)">
            <summary>
            Initializes this ISpriteBatch to use the specified settings.
            </summary>
            <param name="blendState">Blending options to use when rendering.</param>
            <param name="samplerState">Sampler options to use when rendering.</param>
            <param name="sortMode">Sorting options to use when rendering.</param>
            <param name="transform">
            A matrix to apply to position, rotation, scale, and depth data passed to Spritebatch.Draw.
            </param>>
        </member>
        <member name="M:Atom.Xna.Batches.ComposedSpriteBatch.Initialize(Microsoft.Xna.Framework.Graphics.BlendState,Microsoft.Xna.Framework.Graphics.SamplerState,Microsoft.Xna.Framework.Graphics.SpriteSortMode,Microsoft.Xna.Framework.Matrix)">
            <summary>
            Initializes this ISpriteBatch to use the specified settings.
            </summary>
            <param name="blendState">Blending options to use when rendering.</param>
            <param name="samplerState">Sampler options to use when rendering.</param>
            <param name="sortMode">Sorting options to use when rendering.</param>
            <param name="transform">
            A matrix to apply to position, rotation, scale, and depth data passed to Spritebatch.Draw.
            </param>>
        </member>
        <member name="M:Atom.Xna.Batches.ComposedSpriteBatch.Begin(Atom.Xna.IXnaDrawContext)">
            <summary>
            Begins drawing to this IDrawBatch.
            </summary>
            <param name="drawContext">
            The current <see cref="T:Atom.Xna.IXnaDrawContext"/>.
            </param>
        </member>
        <member name="M:Atom.Xna.Batches.ComposedSpriteBatch.End">
            <summary>
            Ends drawing to this IDrawBatch, outputing the result.
            </summary>
        </member>
        <member name="M:Atom.Xna.Batches.ComposedSpriteBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,Atom.Math.Vector2,Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
            Adds a sprite to the batch of sprites to be rendered, specifying the texture,
            screen position, and color tint.
            </summary>
            <param name="texture">
            The sprite texture.
            </param>
            <param name="position">
            The location, in screen coordinates, where the sprite will be drawn.
            </param>
            <param name="color">
            The color channel modulation to use. Use Xna.Color.White for full color with no tinting.
            </param>
            <param name="layerDepth">
            The sorting depth of the sprite, between 0 (front) and 1 (back).You must
            specify either SpriteSortMode.FrontToBack or SpriteSortMode.BackToFront for
            this parameter to affect sprite drawing.
            </param>
        </member>
        <member name="M:Atom.Xna.Batches.ComposedSpriteBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,Atom.Math.Rectangle,Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
            Draws a rectangular sprite using the specified arguments.
            </summary>
            <param name="texture">
            The sprite texture.
            </param>
            <param name="rectangle">
            The area the sprite should take up.
            </param>
            <param name="color">
            The color channel modulation to use. Use Xna.Color.White for full color with no tinting.
            </param>
            <param name="layerDepth">
            The sorting depth of the sprite, between 0 (front) and 1 (back).You must
            specify either SpriteSortMode.FrontToBack or SpriteSortMode.BackToFront for
            this parameter to affect sprite drawing.
            </param>
        </member>
        <member name="M:Atom.Xna.Batches.ComposedSpriteBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
            Draws a rectangular sprite using the specified arguments.
            </summary>
            <param name="texture">
            The sprite texture.
            </param>
            <param name="rectangle">
            The area the sprite should take up.
            </param>
            <param name="color">
            The color channel modulation to use. Use Xna.Color.White for full color with no tinting.
            </param>
            <param name="layerDepth">
            The sorting depth of the sprite, between 0 (front) and 1 (back).You must
            specify either SpriteSortMode.FrontToBack or SpriteSortMode.BackToFront for
            this parameter to affect sprite drawing.
            </param>
        </member>
        <member name="M:Atom.Xna.Batches.ComposedSpriteBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Rectangle,System.Nullable{Microsoft.Xna.Framework.Rectangle},Microsoft.Xna.Framework.Color)">
            <summary>
            Draws a sprite, using the specifyed the texture,
            destination, and source rectangles and color tint.
            </summary>
            <param name="texture">
            The sprite texture.
            </param>
            <param name="destinationRectangle">
            A rectangle specifying, in screen coordinates, where the sprite will be drawn.
            If this rectangle is not the same size as sourceRectangle, the sprite is scaled to fit.
            </param>
            <param name="sourceRectangle">
            A rectangle specifying, in texels, which section of the rectangle to draw. 
            Use null to draw the entire texture.
            </param>
            <param name="color">
            The color channel modulation to use. Use Xna.Color.White for full color with no tinting.
            </param>
        </member>
        <member name="M:Atom.Xna.Batches.ComposedSpriteBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,Atom.Math.Rectangle,System.Nullable{Atom.Math.Rectangle},Microsoft.Xna.Framework.Color,System.Single,Atom.Math.Vector2,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
            <summary>
            Draws a sprite, using the specifyed the texture,
            destination, and source rectangles, color tint, rotation, origin, effects,
            and sort depth. Reference page contains links to related code samples.
            </summary>
            <param name="texture">
            The sprite texture.
            </param>
            <param name="destinationRectangle">
            A rectangle specifying, in screen coordinates, where the sprite will be drawn.
            If this rectangle is not the same size as sourceRectangle, the sprite is scaled to fit.
            </param>
            <param name="sourceRectangle">
            A rectangle specifying, in texels, which section of the rectangle to draw. 
            Use null to draw the entire texture.
            </param>
            <param name="color">
            The color channel modulation to use. Use Xna.Color.White for full color with no tinting.
            </param>
            <param name="rotation">
            The angle, in radians, to rotate the sprite around the origin.
            </param>
            <param name="origin">
            The origin of the sprite. Specify (0,0) for the upper-left corner.
            </param>
            <param name="effects">
            Rotations to apply prior to rendering.
            </param>
            <param name="layerDepth">
            The sorting depth of the sprite, between 0 (front) and 1 (back).You must
            specify either SpriteSortMode.FrontToBack or SpriteSortMode.BackToFront for
            this parameter to affect sprite drawing.
            </param>
        </member>
        <member name="M:Atom.Xna.Batches.ComposedSpriteBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,Atom.Math.Rectangle,System.Nullable{Microsoft.Xna.Framework.Rectangle},Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
            <summary>
            Draws a sprite, using the specifyed the texture,
            destination, and source rectangles, color tint, rotation, origin, effects,
            and sort depth. Reference page contains links to related code samples.
            </summary>
            <param name="texture">
            The sprite texture.
            </param>
            <param name="destinationRectangle">
            A rectangle specifying, in screen coordinates, where the sprite will be drawn.
            If this rectangle is not the same size as sourceRectangle, the sprite is scaled to fit.
            </param>
            <param name="sourceRectangle">
            A rectangle specifying, in texels, which section of the rectangle to draw. 
            Use null to draw the entire texture.
            </param>
            <param name="color">
            The color channel modulation to use. Use Xna.Color.White for full color with no tinting.
            </param>
            <param name="rotation">
            The angle, in radians, to rotate the sprite around the origin.
            </param>
            <param name="origin">
            The origin of the sprite. Specify (0,0) for the upper-left corner.
            </param>
            <param name="effects">
            Rotations to apply prior to rendering.
            </param>
            <param name="layerDepth">
            The sorting depth of the sprite, between 0 (front) and 1 (back).You must
            specify either SpriteSortMode.FrontToBack or SpriteSortMode.BackToFront for
            this parameter to affect sprite drawing.
            </param>
        </member>
        <member name="M:Atom.Xna.Batches.ComposedSpriteBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,Atom.Math.Vector2,System.Nullable{Atom.Math.Rectangle},Microsoft.Xna.Framework.Color,System.Single,Atom.Math.Vector2,Atom.Math.Vector2,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
            <summary>
            Draws a sprite, using the specifyed the texture,
            screen position, source rectangle, color tint, rotation, origin, scale, effects,
            and sort depth. Reference page contains links to related code samples.
            </summary>
            <param name="texture">
            The sprite texture.
            </param>
            <param name="position">
            The location, in screen coordinates, where the sprite will be drawn.
            </param>
            <param name="sourceRectangle">
            A rectangle specifying, in texels, which section of the rectangle to draw. 
            Use null to draw the entire texture.
            </param>
            <param name="color">
            The color channel modulation to use. Use Xna.Color.White for full color with no tinting.
            </param>
            <param name="rotation">
            The angle, in radians, to rotate the sprite around the origin.
            </param>
            <param name="origin">
            The origin of the sprite. Specify (0,0) for the upper-left corner.
            </param>
            <param name="scale">
            Vector containing separate scalar multiples for the x- and y-axes of the sprite.
            </param>
            <param name="effects">
            Rotations to apply prior to rendering.
            </param>
            <param name="layerDepth">
            The sorting depth of the sprite, between 0 (front) and 1 (back).You must
            specify either SpriteSortMode.FrontToBack or SpriteSortMode.BackToFront for
            this parameter to affect sprite drawing.
            </param>
        </member>
        <member name="M:Atom.Xna.Batches.ComposedSpriteBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,Atom.Math.Vector2,System.Nullable{Microsoft.Xna.Framework.Rectangle},Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
            <summary>
            Draws a sprite, using the specifyed the texture,
            screen position, source rectangle, color tint, rotation, origin, scale, effects,
            and sort depth. Reference page contains links to related code samples.
            </summary>
            <param name="texture">
            The sprite texture.
            </param>
            <param name="position">
            The location, in screen coordinates, where the sprite will be drawn.
            </param>
            <param name="sourceRectangle">
            A rectangle specifying, in texels, which section of the rectangle to draw. 
            Use null to draw the entire texture.
            </param>
            <param name="color">
            The color channel modulation to use. Use Xna.Color.White for full color with no tinting.
            </param>
            <param name="rotation">
            The angle, in radians, to rotate the sprite around the origin.
            </param>
            <param name="origin">
            The origin of the sprite. Specify (0,0) for the upper-left corner.
            </param>
            <param name="scale">
            Vector containing separate scalar multiples for the x- and y-axes of the sprite.
            </param>
            <param name="effects">
            Rotations to apply prior to rendering.
            </param>
            <param name="layerDepth">
            The sorting depth of the sprite, between 0 (front) and 1 (back).You must
            specify either SpriteSortMode.FrontToBack or SpriteSortMode.BackToFront for
            this parameter to affect sprite drawing.
            </param>
        </member>
        <member name="M:Atom.Xna.Batches.ComposedSpriteBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Rectangle},Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
            <summary>
            Draws a sprite, using the specifyed the texture,
            screen position, source rectangle, color tint, rotation, origin, scale, effects,
            and sort depth. Reference page contains links to related code samples.
            </summary>
            <param name="texture">
            The sprite texture.
            </param>
            <param name="position">
            The location, in screen coordinates, where the sprite will be drawn.
            </param>
            <param name="sourceRectangle">
            A rectangle specifying, in texels, which section of the rectangle to draw. 
            Use null to draw the entire texture.
            </param>
            <param name="color">
            The color channel modulation to use. Use Xna.Color.White for full color with no tinting.
            </param>
            <param name="rotation">
            The angle, in radians, to rotate the sprite around the origin.
            </param>
            <param name="origin">
            The origin of the sprite. Specify (0,0) for the upper-left corner.
            </param>
            <param name="scale">
            Vector containing separate scalar multiples for the x- and y-axes of the sprite.
            </param>
            <param name="effects">
            Rotations to apply prior to rendering.
            </param>
            <param name="layerDepth">
            The sorting depth of the sprite, between 0 (front) and 1 (back).You must
            specify either SpriteSortMode.FrontToBack or SpriteSortMode.BackToFront for
            this parameter to affect sprite drawing.
            </param>
        </member>
        <member name="M:Atom.Xna.Batches.ComposedSpriteBatch.DrawString(Microsoft.Xna.Framework.Graphics.SpriteFont,System.String,Atom.Math.Vector2,Microsoft.Xna.Framework.Color)">
            <summary>
            Draws a sprite string using the specifyed arguments.
            </summary>
            <param name="spriteFont">
            The sprite font.
            </param>
            <param name="text">
            The string to draw.
            </param>
            <param name="position">
            The location, in screen coordinates, where the text will be drawn.
            </param>
            <param name="color">
            The desired color of the text.
            </param>
        </member>
        <member name="M:Atom.Xna.Batches.ComposedSpriteBatch.DrawString(Microsoft.Xna.Framework.Graphics.SpriteFont,System.String,Atom.Math.Vector2,Microsoft.Xna.Framework.Color,System.Single,Atom.Math.Vector2,System.Single,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
            <summary>
            Draws a sprite string using the specifyed font, output text, screen position, 
            color tint, rotation, origin, scale,and effects.
            </summary>
            <param name="spriteFont">
            The sprite font.
            </param>
            <param name="text">
            The string to draw.
            </param>
            <param name="position">
            The location, in screen coordinates, where the text will be drawn.
            </param>
            <param name="color">
            The desired color of the text.
            </param>
            <param name="rotation">
            The angle, in radians, to rotate the text around the origin.
            </param>
            <param name="origin">
            The origin of the string. Specify (0,0) for the upper-left corner.
            </param>
            <param name="scale">
            Uniform multiple by which to scale the sprite width and height.
            </param>
            <param name="effects">
            Rotations to apply prior to rendering.
            </param>
            <param name="layerDepth">
            The sorting depth of the sprite, between 0 (front) and 1 (back).
            </param>
        </member>
        <member name="M:Atom.Xna.Batches.ComposedSpriteBatch.DrawRect(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
            Draws a colored rectangle with the specified arguments.
            </summary>
            <param name="rectangle">
            A rectangle specifying, in screen coordinates, where the sprite will be drawn.
            If this rectangle is not the same size as sourcerectangle, the sprite is scaled to fit.
            </param>
            <param name="color">
            The color channel modulation to use. Use Xna.Color.White for full color with no tinting.
            </param>
            <param name="layerDepth">
            The sorting depth of the sprite, between 0 (front) and 1 (back).You must
            specify either SpriteSortMode.FrontToBack or SpriteSortMode.BackToFront for
            this parameter to affect sprite drawing.
            </param>
        </member>
        <member name="M:Atom.Xna.Batches.ComposedSpriteBatch.DrawRect(Atom.Math.Rectangle,Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
            Draws a colored rectangle with the specified arguments.
            </summary>
            <param name="rectangle">
            A rectangle specifying, in screen coordinates, where the sprite will be drawn.
            If this rectangle is not the same size as sourcerectangle, the sprite is scaled to fit.
            </param>
            <param name="color">
            The color channel modulation to use. Use Xna.Color.White for full color with no tinting.
            </param>
            <param name="layerDepth">
            The sorting depth of the sprite, between 0 (front) and 1 (back).You must
            specify either SpriteSortMode.FrontToBack or SpriteSortMode.BackToFront for
            this parameter to affect sprite drawing.
            </param>
        </member>
        <member name="M:Atom.Xna.Batches.ComposedSpriteBatch.DrawRect(Atom.Math.RectangleF,Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
            Draws a colored rectangle with the specified arguments.
            </summary>
            <param name="rectangle">
            A rectangle specifying, in screen coordinates, where the sprite will be drawn.
            If this rectangle is not the same size as sourcerectangle, the sprite is scaled to fit.
            </param>
            <param name="color">
            The color channel modulation to use. Use Xna.Color.White for full color with no tinting.
            </param>
            <param name="layerDepth">
            The sorting depth of the sprite, between 0 (front) and 1 (back).You must
            specify either SpriteSortMode.FrontToBack or SpriteSortMode.BackToFront for
            this parameter to affect sprite drawing.
            </param>
        </member>
        <member name="M:Atom.Xna.Batches.ComposedSpriteBatch.DrawLine(Atom.Math.Vector2,Atom.Math.Vector2,Microsoft.Xna.Framework.Color,System.Int32,System.Single)">
            <summary>
            Queues drawing a line by this ITextureDrawBatch.
            </summary>
            <param name="start">
            The start position of the line.
            </param>
            <param name="end">
            The end position of the line.
            </param>
            <param name="color">
            The color of the line.
            </param>
            <param name="thickness">
            The thickness of the line in pixels.
            </param>
            <param name="layerDepth">
            The layer depth the line is drawn at. (Z-index)
            </param>
        </member>
        <member name="M:Atom.Xna.Batches.ComposedSpriteBatch.DrawLine(Atom.Math.Vector2,Atom.Math.Vector2,Microsoft.Xna.Framework.Color,Atom.Math.Vector2,System.Int32,System.Single)">
            <summary>
            Queues drawing a line by this ITextureDrawBatch.
            </summary>
            <param name="start">
            The start position of the line.
            </param>
            <param name="end">
            The end position of the line.
            </param>
            <param name="color">
            The color of the line.
            </param>
            <param name="origin">
            The origin of rotation.
            </param>
            <param name="thickness">
            The thickness of the line in pixels.
            </param>
            <param name="layerDepth">
            The layer depth the line is drawn at. (Z-index)
            </param>
        </member>
        <member name="M:Atom.Xna.Batches.ComposedSpriteBatch.DrawLinePoly(Atom.Math.Polygon2,Microsoft.Xna.Framework.Color,System.Int32,System.Single)">
            <summary>
            Queues drawing a outer shape of a <see cref="T:Atom.Math.Polygon2"/> using lines by this ITextureDrawBatch.
            </summary>
            <param name="polygon">
            The polygon to draw.
            </param>
            <param name="color">
            The color of the lines.
            </param>
            <param name="thickness">
            The thickness of the lines in pixels.
            </param>
            <param name="layerDepth">
            The layer depth the lines are drawn at. (Z-index)
            </param>
        </member>
        <member name="M:Atom.Xna.Batches.ComposedSpriteBatch.DrawLineRect(Atom.Math.Rectangle,Microsoft.Xna.Framework.Color,System.Int32,System.Single)">
            <summary>
            Queues drawing a outer shape of a <see cref="T:Atom.Math.Rectangle"/> using lines by this ITextureDrawBatch.
            </summary>
            <param name="rectangle">
            The rectangle to draw.
            </param>
            <param name="color">
            The color of the lines.
            </param>
            <param name="thickness">
            The thickness of the lines in pixels.
            </param>
            <param name="layerDepth">
            The layer depth the lines are drawn at. (Z-index)
            </param>
        </member>
        <member name="M:Atom.Xna.Batches.ComposedSpriteBatch.DrawLineRect(Atom.Math.OrientedRectangleF,Microsoft.Xna.Framework.Color,System.Int32,System.Single)">
            <summary>
            Queues drawing a outer shape of a <see cref="T:Atom.Math.OrientedRectangleF"/> using lines by this ITextureDrawBatch.
            </summary>
            <param name="rectangle">
            The rectangle to draw.
            </param>
            <param name="color">
            The color of the lines.
            </param>
            <param name="thickness">
            The thickness of the lines in pixels.
            </param>
            <param name="layerDepth">
            The layer depth the lines are drawn at. (Z-index)
            </param>
        </member>
        <member name="F:Atom.Xna.Batches.ComposedSpriteBatch.spriteBatch">
            <summary>
            Provides a mechanism for drawing sprites in various ways.
            </summary>
        </member>
        <member name="F:Atom.Xna.Batches.ComposedSpriteBatch.textureBatch">
            <summary>
            Provides a mechanism for drawing various rectangular shapes.
            </summary>
        </member>
        <member name="T:Atom.Xna.Batches.DrawBatchBase">
            <summary>
            Represents an abstract base implementation of the <see cref="T:Atom.Xna.Batches.IDrawBatch"/> interface.
            </summary>
        </member>
        <member name="P:Atom.Xna.Batches.DrawBatchBase.IsInBlock">
            <summary>
            Gets a value indicating stating whether this IDrawBatch is currently in a <see cref="M:Atom.Xna.Batches.DrawBatchBase.Begin(Atom.Xna.IXnaDrawContext)"/> <see cref="M:Atom.Xna.Batches.DrawBatchBase.End"/> block.
            </summary>
            <value>
            true if this IDrawBatch is currently in a <see cref="M:Atom.Xna.Batches.DrawBatchBase.Begin(Atom.Xna.IXnaDrawContext)"/> <see cref="M:Atom.Xna.Batches.DrawBatchBase.End"/> block;
            -or- otherwise false.
            </value>
        </member>
        <member name="M:Atom.Xna.Batches.DrawBatchBase.Begin(Atom.Xna.IXnaDrawContext)">
            <summary>
            Begins drawing to this IDrawBatch.
            </summary>
            <param name="drawContext">
            The current <see cref="T:Atom.Xna.IXnaDrawContext"/>.
            </param>
        </member>
        <member name="M:Atom.Xna.Batches.DrawBatchBase.BeginCore">
            <summary>
            Begins drawing to this IDrawBatch.
            </summary>
        </member>
        <member name="M:Atom.Xna.Batches.DrawBatchBase.End">
            <summary>
            Ends drawing to this IDrawBatch, outputing the result.
            </summary>
        </member>
        <member name="M:Atom.Xna.Batches.DrawBatchBase.EndCore">
            <summary>
            Ends drawing to this IDrawBatch, outputing the result.
            </summary>
        </member>
        <member name="T:Atom.Xna.Batches.IComposedSpriteBatch">
            <summary>
            Provides mechanisms for drawing various sprites and arabitary forms.
            </summary>
        </member>
        <member name="T:Atom.Xna.Batches.IDrawBatch">
            <summary>
            Provides a mechanism that allows queueing of objects to draw
            and then later to output them.
            </summary>
        </member>
        <member name="M:Atom.Xna.Batches.IDrawBatch.Begin(Atom.Xna.IXnaDrawContext)">
            <summary>
            Begins drawing to this IDrawBatch.
            </summary>
            <param name="drawContext">
            The current <see cref="T:Atom.Xna.IXnaDrawContext"/>.
            </param>
        </member>
        <member name="M:Atom.Xna.Batches.IDrawBatch.End">
            <summary>
            Ends drawing to this IDrawBatch, outputing the result.
            </summary>
        </member>
        <member name="T:Atom.Xna.Batches.ISpriteBatch">
            <summary>
            Provides a mechanism that allows queueing of sprites to draw
            and then later to output them onto the current RenderTarget.
            </summary>
        </member>
        <member name="M:Atom.Xna.Batches.ISpriteBatch.Initialize(Microsoft.Xna.Framework.Graphics.BlendState,Microsoft.Xna.Framework.Graphics.SamplerState,Microsoft.Xna.Framework.Graphics.SpriteSortMode,Atom.Math.Matrix4)">
            <summary>
            Initializes this ISpriteBatch to use the specified settings.
            </summary>
            <param name="blendState">Blending options to use when rendering.</param>
            <param name="samplerState">Sampler options to use when rendering.</param>
            <param name="sortMode">Sorting options to use when rendering.</param>
            <param name="transform">
            A matrix to apply to position, rotation, scale, and depth data passed to Spritebatch.Draw.
            </param>>
        </member>
        <member name="M:Atom.Xna.Batches.ISpriteBatch.Initialize(Microsoft.Xna.Framework.Graphics.BlendState,Microsoft.Xna.Framework.Graphics.SamplerState,Microsoft.Xna.Framework.Graphics.SpriteSortMode,Microsoft.Xna.Framework.Matrix)">
            <summary>
            Initializes this ISpriteBatch to use the specified settings.
            </summary>
            <param name="blendState">Blending options to use when rendering.</param>
            <param name="samplerState">Sampler options to use when rendering.</param>
            <param name="sortMode">Sorting options to use when rendering.</param>
            <param name="transform">
            A matrix to apply to position, rotation, scale, and depth data passed to Spritebatch.Draw.
            </param>>
        </member>
        <member name="M:Atom.Xna.Batches.ISpriteBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,Atom.Math.Vector2,Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
            Adds a sprite to the batch of sprites to be rendered, specifying the texture,
            screen position, and color tint.
            </summary>
            <param name="texture">
            The sprite texture.
            </param>
            <param name="position">
            The location, in screen coordinates, where the sprite will be drawn.
            </param>
            <param name="color">
            The color channel modulation to use. Use Xna.Color.White for full color with no tinting.
            </param>
            <param name="layerDepth">
            The sorting depth of the sprite, between 0 (front) and 1 (back).You must
            specify either SpriteSortMode.FrontToBack or SpriteSortMode.BackToFront for
            this parameter to affect sprite drawing.
            </param>
        </member>
        <member name="M:Atom.Xna.Batches.ISpriteBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,Atom.Math.Rectangle,Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
            Draws a rectangular sprite using the specified arguments.
            </summary>
            <param name="texture">
            The sprite texture.
            </param>
            <param name="rectangle">
            The area the sprite should take up.
            </param>
            <param name="color">
            The color channel modulation to use. Use Xna.Color.White for full color with no tinting.
            </param>
            <param name="layerDepth">
            The sorting depth of the sprite, between 0 (front) and 1 (back).You must
            specify either SpriteSortMode.FrontToBack or SpriteSortMode.BackToFront for
            this parameter to affect sprite drawing.
            </param>
        </member>
        <member name="M:Atom.Xna.Batches.ISpriteBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
            Draws a rectangular sprite using the specified arguments.
            </summary>
            <param name="texture">
            The sprite texture.
            </param>
            <param name="rectangle">
            The area the sprite should take up.
            </param>
            <param name="color">
            The color channel modulation to use. Use Xna.Color.White for full color with no tinting.
            </param>
            <param name="layerDepth">
            The sorting depth of the sprite, between 0 (front) and 1 (back).You must
            specify either SpriteSortMode.FrontToBack or SpriteSortMode.BackToFront for
            this parameter to affect sprite drawing.
            </param>
        </member>
        <member name="M:Atom.Xna.Batches.ISpriteBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Rectangle,System.Nullable{Microsoft.Xna.Framework.Rectangle},Microsoft.Xna.Framework.Color)">
            <summary>
            Draws a sprite, using the specifyed the texture,
            destination, and source rectangles and color tint.
            </summary>
            <param name="texture">
            The sprite texture.
            </param>
            <param name="destinationRectangle">
            A rectangle specifying, in screen coordinates, where the sprite will be drawn.
            If this rectangle is not the same size as sourceRectangle, the sprite is scaled to fit.
            </param>
            <param name="sourceRectangle">
            A rectangle specifying, in texels, which section of the rectangle to draw. 
            Use null to draw the entire texture.
            </param>
            <param name="color">
            The color channel modulation to use. Use Xna.Color.White for full color with no tinting.
            </param>
        </member>
        <member name="M:Atom.Xna.Batches.ISpriteBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,Atom.Math.Rectangle,System.Nullable{Atom.Math.Rectangle},Microsoft.Xna.Framework.Color,System.Single,Atom.Math.Vector2,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
            <summary>
            Draws a sprite, using the specifyed the texture,
            destination, and source rectangles, color tint, rotation, origin, effects,
            and sort depth.
            </summary>
            <param name="texture">
            The sprite texture.
            </param>
            <param name="destinationRectangle">
            A rectangle specifying, in screen coordinates, where the sprite will be drawn.
            If this rectangle is not the same size as sourceRectangle, the sprite is scaled to fit.
            </param>
            <param name="sourceRectangle">
            A rectangle specifying, in texels, which section of the rectangle to draw. 
            Use null to draw the entire texture.
            </param>
            <param name="color">
            The color channel modulation to use. Use Xna.Color.White for full color with no tinting.
            </param>
            <param name="rotation">
            The angle, in radians, to rotate the sprite around the origin.
            </param>
            <param name="origin">
            The origin of the sprite. Specify (0,0) for the upper-left corner.
            </param>
            <param name="effects">
            Rotations to apply prior to rendering.
            </param>
            <param name="layerDepth">
            The sorting depth of the sprite, between 0 (front) and 1 (back).You must
            specify either SpriteSortMode.FrontToBack or SpriteSortMode.BackToFront for
            this parameter to affect sprite drawing.
            </param>
        </member>
        <member name="M:Atom.Xna.Batches.ISpriteBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,Atom.Math.Rectangle,System.Nullable{Microsoft.Xna.Framework.Rectangle},Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
            <summary>
            Draws a sprite, using the specifyed the texture,
            destination, and source rectangles, color tint, rotation, origin, effects,
            and sort depth.
            </summary>
            <param name="texture">
            The sprite texture.
            </param>
            <param name="destinationRectangle">
            A rectangle specifying, in screen coordinates, where the sprite will be drawn.
            If this rectangle is not the same size as sourceRectangle, the sprite is scaled to fit.
            </param>
            <param name="sourceRectangle">
            A rectangle specifying, in texels, which section of the rectangle to draw. 
            Use null to draw the entire texture.
            </param>
            <param name="color">
            The color channel modulation to use. Use Xna.Color.White for full color with no tinting.
            </param>
            <param name="rotation">
            The angle, in radians, to rotate the sprite around the origin.
            </param>
            <param name="origin">
            The origin of the sprite. Specify (0,0) for the upper-left corner.
            </param>
            <param name="effects">
            Rotations to apply prior to rendering.
            </param>
            <param name="layerDepth">
            The sorting depth of the sprite, between 0 (front) and 1 (back).You must
            specify either SpriteSortMode.FrontToBack or SpriteSortMode.BackToFront for
            this parameter to affect sprite drawing.
            </param>
        </member>
        <member name="M:Atom.Xna.Batches.ISpriteBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,Atom.Math.Vector2,System.Nullable{Atom.Math.Rectangle},Microsoft.Xna.Framework.Color,System.Single,Atom.Math.Vector2,Atom.Math.Vector2,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
            <summary>
            Draws a sprite, using the specifyed the texture,
            screen position, source rectangle, color tint, rotation, origin, scale, effects,
            and sort depth.
            </summary>
            <param name="texture">
            The sprite texture.
            </param>
            <param name="position">
            The location, in screen coordinates, where the sprite will be drawn.
            </param>
            <param name="sourceRectangle">
            A rectangle specifying, in texels, which section of the rectangle to draw. 
            Use null to draw the entire texture.
            </param>
            <param name="color">
            The color channel modulation to use. Use Xna.Color.White for full color with no tinting.
            </param>
            <param name="rotation">
            The angle, in radians, to rotate the sprite around the origin.
            </param>
            <param name="origin">
            The origin of the sprite. Specify (0,0) for the upper-left corner.
            </param>
            <param name="scale">
            Vector containing separate scalar multiples for the x- and y-axes of the sprite.
            </param>
            <param name="effects">
            Rotations to apply prior to rendering.
            </param>
            <param name="layerDepth">
            The sorting depth of the sprite, between 0 (front) and 1 (back).You must
            specify either SpriteSortMode.FrontToBack or SpriteSortMode.BackToFront for
            this parameter to affect sprite drawing.
            </param>
        </member>
        <member name="M:Atom.Xna.Batches.ISpriteBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,Atom.Math.Vector2,System.Nullable{Microsoft.Xna.Framework.Rectangle},Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
            <summary>
            Draws a sprite, using the specifyed the texture,
            screen position, source rectangle, color tint, rotation, origin, scale, effects,
            and sort depth.
            </summary>
            <param name="texture">
            The sprite texture.
            </param>
            <param name="position">
            The location, in screen coordinates, where the sprite will be drawn.
            </param>
            <param name="sourceRectangle">
            A rectangle specifying, in texels, which section of the rectangle to draw. 
            Use null to draw the entire texture.
            </param>
            <param name="color">
            The color channel modulation to use. Use Xna.Color.White for full color with no tinting.
            </param>
            <param name="rotation">
            The angle, in radians, to rotate the sprite around the origin.
            </param>
            <param name="origin">
            The origin of the sprite. Specify (0,0) for the upper-left corner.
            </param>
            <param name="scale">
            Vector containing separate scalar multiples for the x- and y-axes of the sprite.
            </param>
            <param name="effects">
            Rotations to apply prior to rendering.
            </param>
            <param name="layerDepth">
            The sorting depth of the sprite, between 0 (front) and 1 (back).You must
            specify either SpriteSortMode.FrontToBack or SpriteSortMode.BackToFront for
            this parameter to affect sprite drawing.
            </param>
        </member>
        <member name="M:Atom.Xna.Batches.ISpriteBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Rectangle},Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
            <summary>
            Draws a sprite, using the specifyed the texture,
            screen position, source rectangle, color tint, rotation, origin, scale, effects,
            and sort depth.
            </summary>
            <param name="texture">
            The sprite texture.
            </param>
            <param name="position">
            The location, in screen coordinates, where the sprite will be drawn.
            </param>
            <param name="sourceRectangle">
            A rectangle specifying, in texels, which section of the rectangle to draw. 
            Use null to draw the entire texture.
            </param>
            <param name="color">
            The color channel modulation to use. Use Xna.Color.White for full color with no tinting.
            </param>
            <param name="rotation">
            The angle, in radians, to rotate the sprite around the origin.
            </param>
            <param name="origin">
            The origin of the sprite. Specify (0,0) for the upper-left corner.
            </param>
            <param name="scale">
            Vector containing separate scalar multiples for the x- and y-axes of the sprite.
            </param>
            <param name="effects">
            Rotations to apply prior to rendering.
            </param>
            <param name="layerDepth">
            The sorting depth of the sprite, between 0 (front) and 1 (back).You must
            specify either SpriteSortMode.FrontToBack or SpriteSortMode.BackToFront for
            this parameter to affect sprite drawing.
            </param>
        </member>
        <member name="M:Atom.Xna.Batches.ISpriteBatch.DrawString(Microsoft.Xna.Framework.Graphics.SpriteFont,System.String,Atom.Math.Vector2,Microsoft.Xna.Framework.Color)">
            <summary>
            Draws a sprite string using the specifyed arguments.
            </summary>
            <param name="spriteFont">
            The sprite font.
            </param>
            <param name="text">
            The string to draw.
            </param>
            <param name="position">
            The location, in screen coordinates, where the text will be drawn.
            </param>
            <param name="color">
            The desired color of the text.
            </param>
        </member>
        <member name="M:Atom.Xna.Batches.ISpriteBatch.DrawString(Microsoft.Xna.Framework.Graphics.SpriteFont,System.String,Atom.Math.Vector2,Microsoft.Xna.Framework.Color,System.Single,Atom.Math.Vector2,System.Single,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
            <summary>
            Draws a sprite string using the specifyed font, output text, screen position, 
            color tint, rotation, origin, scale,and effects.
            </summary>
            <param name="spriteFont">
            The sprite font.
            </param>
            <param name="text">
            The string to draw.
            </param>
            <param name="position">
            The location, in screen coordinates, where the text will be drawn.
            </param>
            <param name="color">
            The desired color of the text.
            </param>
            <param name="rotation">
            The angle, in radians, to rotate the text around the origin.
            </param>
            <param name="origin">
            The origin of the string. Specify (0,0) for the upper-left corner.
            </param>
            <param name="scale">
            Uniform multiple by which to scale the sprite width and height.
            </param>
            <param name="effects">
            Rotations to apply prior to rendering.
            </param>
            <param name="layerDepth">
            The sorting depth of the sprite, between 0 (front) and 1 (back).
            </param>
        </member>
        <member name="T:Atom.Xna.Batches.ITextureDrawBatch">
            <summary>
            Provides a mechanism that allows queueing and then drawing of 2D lines, objects consisting of 2D lines
            and rectangles.
            </summary>
        </member>
        <member name="M:Atom.Xna.Batches.ITextureDrawBatch.DrawRect(Atom.Math.RectangleF,Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
            Draws a colored rectangle with the specified arguments.
            </summary>
            <param name="rectangle">
            A rectangle specifying, in screen coordinates, where the sprite will be drawn.
            If this rectangle is not the same size as sourcerectangle, the sprite is scaled to fit.
            </param>
            <param name="color">
            The color channel modulation to use. Use Xna.Color.White for full color with no tinting.
            </param>
            <param name="layerDepth">
            The sorting depth of the sprite, between 0 (front) and 1 (back).You must
            specify either SpriteSortMode.FrontToBack or SpriteSortMode.BackToFront for
            this parameter to affect sprite drawing.
            </param>
        </member>
        <member name="M:Atom.Xna.Batches.ITextureDrawBatch.DrawRect(Atom.Math.Rectangle,Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
            Draws a colored rectangle with the specified arguments.
            </summary>
            <param name="rectangle">
            A rectangle specifying, in screen coordinates, where the sprite will be drawn.
            If this rectangle is not the same size as sourcerectangle, the sprite is scaled to fit.
            </param>
            <param name="color">
            The color channel modulation to use. Use Xna.Color.White for full color with no tinting.
            </param>
            <param name="layerDepth">
            The sorting depth of the sprite, between 0 (front) and 1 (back).You must
            specify either SpriteSortMode.FrontToBack or SpriteSortMode.BackToFront for
            this parameter to affect sprite drawing.
            </param>
        </member>
        <member name="M:Atom.Xna.Batches.ITextureDrawBatch.DrawRect(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
            Draws a colored rectangle with the specified arguments.
            </summary>
            <param name="rectangle">
            A rectangle specifying, in screen coordinates, where the sprite will be drawn.
            If this rectangle is not the same size as sourcerectangle, the sprite is scaled to fit.
            </param>
            <param name="color">
            The color channel modulation to use. Use Xna.Color.White for full color with no tinting.
            </param>
            <param name="layerDepth">
            The sorting depth of the sprite, between 0 (front) and 1 (back).You must
            specify either SpriteSortMode.FrontToBack or SpriteSortMode.BackToFront for
            this parameter to affect sprite drawing.
            </param>
        </member>
        <member name="M:Atom.Xna.Batches.ITextureDrawBatch.DrawLine(Atom.Math.Vector2,Atom.Math.Vector2,Microsoft.Xna.Framework.Color,System.Int32,System.Single)">
            <summary>
            Queues drawing a line by this ITextureDrawBatch.
            </summary>
            <param name="start">
            The start position of the line.
            </param>
            <param name="end">
            The end position of the line.
            </param>
            <param name="color">
            The color of the line.
            </param>
            <param name="thickness">
            The thickness of the line in pixels.
            </param>
            <param name="layerDepth">
            The layer depth the line is drawn at. (Z-index)
            </param>
        </member>
        <member name="M:Atom.Xna.Batches.ITextureDrawBatch.DrawLine(Atom.Math.Vector2,Atom.Math.Vector2,Microsoft.Xna.Framework.Color,Atom.Math.Vector2,System.Int32,System.Single)">
            <summary>
            Queues drawing a line by this ITextureDrawBatch.
            </summary>
            <param name="start">
            The start position of the line.
            </param>
            <param name="end">
            The end position of the line.
            </param>
            <param name="color">
            The color of the line.
            </param>
            <param name="origin">
            The origin of rotation.
            </param>
            <param name="thickness">
            The thickness of the line in pixels.
            </param>
            <param name="layerDepth">
            The layer depth the line is drawn at. (Z-index)
            </param>
        </member>
        <member name="M:Atom.Xna.Batches.ITextureDrawBatch.DrawLinePoly(Atom.Math.Polygon2,Microsoft.Xna.Framework.Color,System.Int32,System.Single)">
            <summary>
            Queues drawing a outer shape of a <see cref="T:Atom.Math.Polygon2"/> using lines by this ITextureDrawBatch.
            </summary>
            <param name="polygon">
            The polygon to draw.
            </param>
            <param name="color">
            The color of the lines.
            </param>
            <param name="thickness">
            The thickness of the lines in pixels.
            </param>
            <param name="layerDepth">
            The layer depth the lines are drawn at. (Z-index)
            </param>
        </member>
        <member name="M:Atom.Xna.Batches.ITextureDrawBatch.DrawLineRect(Atom.Math.Rectangle,Microsoft.Xna.Framework.Color,System.Int32,System.Single)">
            <summary>
            Queues drawing a outer shape of a <see cref="T:Atom.Math.Rectangle"/> using lines by this ITextureDrawBatch.
            </summary>
            <param name="rectangle">
            The rectangle to draw.
            </param>
            <param name="color">
            The color of the lines.
            </param>
            <param name="thickness">
            The thickness of the lines in pixels.
            </param>
            <param name="layerDepth">
            The layer depth the lines are drawn at. (Z-index)
            </param>
        </member>
        <member name="M:Atom.Xna.Batches.ITextureDrawBatch.DrawLineRect(Atom.Math.OrientedRectangleF,Microsoft.Xna.Framework.Color,System.Int32,System.Single)">
            <summary>
            Queues drawing a outer shape of a <see cref="T:Atom.Math.OrientedRectangleF"/> using lines by this ITextureDrawBatch.
            </summary>
            <param name="rectangle">
            The rectangle to draw.
            </param>
            <param name="color">
            The color of the lines.
            </param>
            <param name="thickness">
            The thickness of the lines in pixels.
            </param>
            <param name="layerDepth">
            The layer depth the lines are drawn at. (Z-index)
            </param>
        </member>
        <member name="T:Atom.Xna.Batches.SpriteDrawBatch">
            <summary>
            
            </summary>
        </member>
        <member name="P:Atom.Xna.Batches.SpriteDrawBatch.ShouldBeginEndSpriteBatch">
            <summary>
            Gets a value indicating whether this <see cref="T:Atom.Xna.Batches.SpriteDrawBatch"/> calls SpriteBatch.Begin and SpriteBatch.End
            when Begin and End are called.
            </summary>
            <value>
            The default value is true.
            </value>
        </member>
        <member name="P:Atom.Xna.Batches.SpriteDrawBatch.SpriteBatch">
            <summary>
            
            </summary>
        </member>
        <member name="M:Atom.Xna.Batches.SpriteDrawBatch.#ctor(Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Initializes a new instance of the SpriteDrawBatch class.
            </summary>
            <param name="batch">
            The <see cref="P:Atom.Xna.Batches.SpriteDrawBatch.SpriteBatch"/> the new SpriteDrawBatch uses behind the scenes.
            </param>
        </member>
        <member name="M:Atom.Xna.Batches.SpriteDrawBatch.Initialize(Microsoft.Xna.Framework.Graphics.BlendState,Microsoft.Xna.Framework.Graphics.SamplerState,Microsoft.Xna.Framework.Graphics.SpriteSortMode,Atom.Math.Matrix4)">
            <summary>
            Initializes this ISpriteBatch to use the specified settings.
            </summary>
            <param name="blendState">Blending options to use when rendering.</param>
            <param name="samplerState">Sampler options to use when rendering.</param>
            <param name="sortMode">Sorting options to use when rendering.</param>
            <param name="transform">
            A matrix to apply to position, rotation, scale, and depth data passed to Spritebatch.Draw.
            </param>>
        </member>
        <member name="M:Atom.Xna.Batches.SpriteDrawBatch.Initialize(Microsoft.Xna.Framework.Graphics.BlendState,Microsoft.Xna.Framework.Graphics.SamplerState,Microsoft.Xna.Framework.Graphics.SpriteSortMode,Microsoft.Xna.Framework.Matrix)">
            <summary>
            Initializes this ISpriteBatch to use the specified settings.
            </summary>
            <param name="blendState">Blending options to use when rendering.</param>
            <param name="samplerState">Sampler options to use when rendering.</param>
            <param name="sortMode">Sorting options to use when rendering.</param>
            <param name="transform">
            A matrix to apply to position, rotation, scale, and depth data passed to Spritebatch.Draw.
            </param>>
        </member>
        <member name="M:Atom.Xna.Batches.SpriteDrawBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,Atom.Math.Vector2,Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
            Adds a sprite to the batch of sprites to be rendered, specifying the texture,
            screen position, and color tint.
            </summary>
            <param name="texture">
            The sprite texture.
            </param>
            <param name="position">
            The location, in screen coordinates, where the sprite will be drawn.
            </param>
            <param name="color">
            The color channel modulation to use. Use Xna.Color.White for full color with no tinting.
            </param>
            <param name="layerDepth">
            The sorting depth of the sprite, between 0 (front) and 1 (back).You must
            specify either SpriteSortMode.FrontToBack or SpriteSortMode.BackToFront for
            this parameter to affect sprite drawing.
            </param>
        </member>
        <member name="M:Atom.Xna.Batches.SpriteDrawBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,Atom.Math.Rectangle,Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
            Draws a rectangular sprite using the specified arguments.
            </summary>
            <param name="texture">
            The sprite texture.
            </param>
            <param name="rectangle">
            The area the sprite should take up.
            </param>
            <param name="color">
            The color channel modulation to use. Use Xna.Color.White for full color with no tinting.
            </param>
            <param name="layerDepth">
            The sorting depth of the sprite, between 0 (front) and 1 (back).You must
            specify either SpriteSortMode.FrontToBack or SpriteSortMode.BackToFront for
            this parameter to affect sprite drawing.
            </param>
        </member>
        <member name="M:Atom.Xna.Batches.SpriteDrawBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
            Draws a rectangular sprite using the specified arguments.
            </summary>
            <param name="texture">
            The sprite texture.
            </param>
            <param name="rectangle">
            The area the sprite should take up.
            </param>
            <param name="color">
            The color channel modulation to use. Use Xna.Color.White for full color with no tinting.
            </param>
            <param name="layerDepth">
            The sorting depth of the sprite, between 0 (front) and 1 (back).You must
            specify either SpriteSortMode.FrontToBack or SpriteSortMode.BackToFront for
            this parameter to affect sprite drawing.
            </param>
        </member>
        <member name="M:Atom.Xna.Batches.SpriteDrawBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Rectangle,System.Nullable{Microsoft.Xna.Framework.Rectangle},Microsoft.Xna.Framework.Color)">
            <summary>
            Draws a sprite, using the specifyed the texture,
            destination, and source rectangles and color tint.
            </summary>
            <param name="texture">
            The sprite texture.
            </param>
            <param name="destinationRectangle">
            A rectangle specifying, in screen coordinates, where the sprite will be drawn.
            If this rectangle is not the same size as sourceRectangle, the sprite is scaled to fit.
            </param>
            <param name="sourceRectangle">
            A rectangle specifying, in texels, which section of the rectangle to draw. 
            Use null to draw the entire texture.
            </param>
            <param name="color">
            The color channel modulation to use. Use Xna.Color.White for full color with no tinting.
            </param>
        </member>
        <member name="M:Atom.Xna.Batches.SpriteDrawBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,Atom.Math.Rectangle,System.Nullable{Atom.Math.Rectangle},Microsoft.Xna.Framework.Color,System.Single,Atom.Math.Vector2,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
            <summary>
            Draws a sprite, using the specifying the texture,
            destination, and source rectangles, color tint, rotation, origin, effects,
            and sort depth. Reference page contains links to related code samples.
            </summary>
            <param name="texture">
            The sprite texture.
            </param>
            <param name="destinationRectangle">
            A rectangle specifying, in screen coordinates, where the sprite will be drawn.
            If this rectangle is not the same size as sourceRectangle, the sprite is scaled to fit.
            </param>
            <param name="sourceRectangle">
            A rectangle specifying, in texels, which section of the rectangle to draw. 
            Use null to draw the entire texture.
            </param>
            <param name="color">
            The color channel modulation to use. Use Xna.Color.White for full color with no tinting.
            </param>
            <param name="rotation">
            The angle, in radians, to rotate the sprite around the origin.
            </param>
            <param name="origin">
            The origin of the sprite. Specify (0,0) for the upper-left corner.
            </param>
            <param name="effects">
            Rotations to apply prior to rendering.
            </param>
            <param name="layerDepth">
            The sorting depth of the sprite, between 0 (front) and 1 (back).You must
            specify either SpriteSortMode.FrontToBack or SpriteSortMode.BackToFront for
            this parameter to affect sprite drawing.
            </param>
        </member>
        <member name="M:Atom.Xna.Batches.SpriteDrawBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,Atom.Math.Rectangle,System.Nullable{Microsoft.Xna.Framework.Rectangle},Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
            <summary>
            Draws a sprite, using the specifying the texture,
            destination, and source rectangles, color tint, rotation, origin, effects,
            and sort depth. Reference page contains links to related code samples.
            </summary>
            <param name="texture">
            The sprite texture.
            </param>
            <param name="destinationRectangle">
            A rectangle specifying, in screen coordinates, where the sprite will be drawn.
            If this rectangle is not the same size as sourceRectangle, the sprite is scaled to fit.
            </param>
            <param name="sourceRectangle">
            A rectangle specifying, in texels, which section of the rectangle to draw. 
            Use null to draw the entire texture.
            </param>
            <param name="color">
            The color channel modulation to use. Use Xna.Color.White for full color with no tinting.
            </param>
            <param name="rotation">
            The angle, in radians, to rotate the sprite around the origin.
            </param>
            <param name="origin">
            The origin of the sprite. Specify (0,0) for the upper-left corner.
            </param>
            <param name="effects">
            Rotations to apply prior to rendering.
            </param>
            <param name="layerDepth">
            The sorting depth of the sprite, between 0 (front) and 1 (back).You must
            specify either SpriteSortMode.FrontToBack or SpriteSortMode.BackToFront for
            this parameter to affect sprite drawing.
            </param>
        </member>
        <member name="M:Atom.Xna.Batches.SpriteDrawBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,Atom.Math.Vector2,System.Nullable{Atom.Math.Rectangle},Microsoft.Xna.Framework.Color,System.Single,Atom.Math.Vector2,Atom.Math.Vector2,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
            <summary>
            Draws a sprite, using the specifyed the texture,
            screen position, source rectangle, color tint, rotation, origin, scale, effects,
            and sort depth. Reference page contains links to related code samples.
            </summary>
            <param name="texture">
            The sprite texture.
            </param>
            <param name="position">
            The location, in screen coordinates, where the sprite will be drawn.
            </param>
            <param name="sourceRectangle">
            A rectangle specifying, in texels, which section of the rectangle to draw. 
            Use null to draw the entire texture.
            </param>
            <param name="color">
            The color channel modulation to use. Use Xna.Color.White for full color with no tinting.
            </param>
            <param name="rotation">
            The angle, in radians, to rotate the sprite around the origin.
            </param>
            <param name="origin">
            The origin of the sprite. Specify (0,0) for the upper-left corner.
            </param>
            <param name="scale">
            Vector containing separate scalar multiples for the x- and y-axes of the sprite.
            </param>
            <param name="effects">
            Rotations to apply prior to rendering.
            </param>
            <param name="layerDepth">
            The sorting depth of the sprite, between 0 (front) and 1 (back).You must
            specify either SpriteSortMode.FrontToBack or SpriteSortMode.BackToFront for
            this parameter to affect sprite drawing.
            </param>
        </member>
        <member name="M:Atom.Xna.Batches.SpriteDrawBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,Atom.Math.Vector2,System.Nullable{Microsoft.Xna.Framework.Rectangle},Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
            <summary>
            Draws a sprite, using the specifyed the texture,
            screen position, source rectangle, color tint, rotation, origin, scale, effects,
            and sort depth. Reference page contains links to related code samples.
            </summary>
            <param name="texture">
            The sprite texture.
            </param>
            <param name="position">
            The location, in screen coordinates, where the sprite will be drawn.
            </param>
            <param name="sourceRectangle">
            A rectangle specifying, in texels, which section of the rectangle to draw. 
            Use null to draw the entire texture.
            </param>
            <param name="color">
            The color channel modulation to use. Use Xna.Color.White for full color with no tinting.
            </param>
            <param name="rotation">
            The angle, in radians, to rotate the sprite around the origin.
            </param>
            <param name="origin">
            The origin of the sprite. Specify (0,0) for the upper-left corner.
            </param>
            <param name="scale">
            Vector containing separate scalar multiples for the x- and y-axes of the sprite.
            </param>
            <param name="effects">
            Rotations to apply prior to rendering.
            </param>
            <param name="layerDepth">
            The sorting depth of the sprite, between 0 (front) and 1 (back).You must
            specify either SpriteSortMode.FrontToBack or SpriteSortMode.BackToFront for
            this parameter to affect sprite drawing.
            </param>
        </member>
        <member name="M:Atom.Xna.Batches.SpriteDrawBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Rectangle},Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
            <summary>
            Draws a sprite, using the specifyed the texture,
            screen position, source rectangle, color tint, rotation, origin, scale, effects,
            and sort depth. Reference page contains links to related code samples.
            </summary>
            <param name="texture">
            The sprite texture.
            </param>
            <param name="position">
            The location, in screen coordinates, where the sprite will be drawn.
            </param>
            <param name="sourceRectangle">
            A rectangle specifying, in texels, which section of the rectangle to draw. 
            Use null to draw the entire texture.
            </param>
            <param name="color">
            The color channel modulation to use. Use Xna.Color.White for full color with no tinting.
            </param>
            <param name="rotation">
            The angle, in radians, to rotate the sprite around the origin.
            </param>
            <param name="origin">
            The origin of the sprite. Specify (0,0) for the upper-left corner.
            </param>
            <param name="scale">
            Vector containing separate scalar multiples for the x- and y-axes of the sprite.
            </param>
            <param name="effects">
            Rotations to apply prior to rendering.
            </param>
            <param name="layerDepth">
            The sorting depth of the sprite, between 0 (front) and 1 (back).You must
            specify either SpriteSortMode.FrontToBack or SpriteSortMode.BackToFront for
            this parameter to affect sprite drawing.
            </param>
        </member>
        <member name="M:Atom.Xna.Batches.SpriteDrawBatch.DrawString(Microsoft.Xna.Framework.Graphics.SpriteFont,System.String,Atom.Math.Vector2,Microsoft.Xna.Framework.Color)">
            <summary>
            Draws a sprite string using the specifyed arguments.
            </summary>
            <param name="spriteFont">
            The sprite font.
            </param>
            <param name="text">
            The string to draw.
            </param>
            <param name="position">
            The location, in screen coordinates, where the text will be drawn.
            </param>
            <param name="color">
            The desired color of the text.
            </param>
        </member>
        <member name="M:Atom.Xna.Batches.SpriteDrawBatch.DrawString(Microsoft.Xna.Framework.Graphics.SpriteFont,System.String,Atom.Math.Vector2,Microsoft.Xna.Framework.Color,System.Single,Atom.Math.Vector2,System.Single,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
            <summary>
            Draws a sprite string using the specifyed font, output text, screen position, 
            color tint, rotation, origin, scale,and effects.
            </summary>
            <param name="spriteFont">
            The sprite font.
            </param>
            <param name="text">
            The string to draw.
            </param>
            <param name="position">
            The location, in screen coordinates, where the text will be drawn.
            </param>
            <param name="color">
            The desired color of the text.
            </param>
            <param name="rotation">
            The angle, in radians, to rotate the text around the origin.
            </param>
            <param name="origin">
            The origin of the string. Specify (0,0) for the upper-left corner.
            </param>
            <param name="scale">
            Uniform multiple by which to scale the sprite width and height.
            </param>
            <param name="effects">
            Rotations to apply prior to rendering.
            </param>
            <param name="layerDepth">
            The sorting depth of the sprite, between 0 (front) and 1 (back).
            </param>
        </member>
        <member name="M:Atom.Xna.Batches.SpriteDrawBatch.BeginCore">
            <summary>
            Begins drawing to this IDrawBatch.
            </summary>
        </member>
        <member name="M:Atom.Xna.Batches.SpriteDrawBatch.EndCore">
            <summary>
            Ends drawing to this IDrawBatch, outputing the result.
            </summary>
        </member>
        <member name="F:Atom.Xna.Batches.SpriteDrawBatch.batch">
            <summary>
            The <see cref="P:Atom.Xna.Batches.SpriteDrawBatch.SpriteBatch"/> this SpriteDrawBatch uses behind the scenes.
            </summary>
        </member>
        <member name="F:Atom.Xna.Batches.SpriteDrawBatch.blendState">
            <summary>
            Represents the storage field of the BlendMode property.
            </summary>
        </member>
        <member name="F:Atom.Xna.Batches.SpriteDrawBatch.samplerState">
            <summary>
            Represents the storage field of the SamplerState property.
            </summary>
        </member>
        <member name="F:Atom.Xna.Batches.SpriteDrawBatch.sortMode">
            <summary>        
            Represents the storage field of the SortMode property.        
            </summary>
        </member>
        <member name="F:Atom.Xna.Batches.SpriteDrawBatch.transform">
            <summary>
            Represents the storage field of the Transform property.
            </summary>
        </member>
        <member name="T:Atom.Xna.Batches.SpriteTextureDrawBatch">
            <summary>
            Implements a mechanism that allows queueing and then drawing of simple 2D lines and objects consisting of 2D lines.
            </summary>
        </member>
        <member name="M:Atom.Xna.Batches.SpriteTextureDrawBatch.#ctor(Atom.Xna.Batches.ISpriteBatch,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            Initializes a new instance of the SpriteLineDrawBatcher class.
            </summary>
            <param name="batch">
            Provides a mechanism for drawing sprites.
            </param>
            <param name="texture">
            The texture that is used to draw the lines.
            </param>
        </member>
        <member name="M:Atom.Xna.Batches.SpriteTextureDrawBatch.DrawRect(Atom.Math.RectangleF,Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
            Draws a colored rectangle with the specified arguments.
            </summary>
            <param name="rectangle">
            A rectangle specifying, in screen coordinates, where the sprite will be drawn.
            If this rectangle is not the same size as sourcerectangle, the sprite is scaled to fit.
            </param>
            <param name="color">
            The color channel modulation to use. Use Xna.Color.White for full color with no tinting.
            </param>
            <param name="layerDepth">
            The sorting depth of the sprite, between 0 (front) and 1 (back).You must
            specify either SpriteSortMode.FrontToBack or SpriteSortMode.BackToFront for
            this parameter to affect sprite drawing.
            </param>
        </member>
        <member name="M:Atom.Xna.Batches.SpriteTextureDrawBatch.DrawRect(Atom.Math.Rectangle,Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
            Draws a colored rectangle with the specified arguments.
            </summary>
            <param name="rectangle">
            A rectangle specifying, in screen coordinates, where the sprite will be drawn.
            If this rectangle is not the same size as sourcerectangle, the sprite is scaled to fit.
            </param>
            <param name="color">
            The color channel modulation to use. Use Xna.Color.White for full color with no tinting.
            </param>
            <param name="layerDepth">
            The sorting depth of the sprite, between 0 (front) and 1 (back).You must
            specify either SpriteSortMode.FrontToBack or SpriteSortMode.BackToFront for
            this parameter to affect sprite drawing.
            </param>
        </member>
        <member name="M:Atom.Xna.Batches.SpriteTextureDrawBatch.DrawRect(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
            Draws a colored rectangle with the specified arguments.
            </summary>
            <param name="rectangle">
            A rectangle specifying, in screen coordinates, where the sprite will be drawn.
            If this rectangle is not the same size as sourcerectangle, the sprite is scaled to fit.
            </param>
            <param name="color">
            The color channel modulation to use. Use Xna.Color.White for full color with no tinting.
            </param>
            <param name="layerDepth">
            The sorting depth of the sprite, between 0 (front) and 1 (back).You must
            specify either SpriteSortMode.FrontToBack or SpriteSortMode.BackToFront for
            this parameter to affect sprite drawing.
            </param>
        </member>
        <member name="M:Atom.Xna.Batches.SpriteTextureDrawBatch.DrawLine(Atom.Math.Vector2,Atom.Math.Vector2,Microsoft.Xna.Framework.Color,System.Int32,System.Single)">
            <summary>
            Queues drawing a line by this ITextureDrawBatch.
            </summary>
            <param name="start">
            The start position of the line.
            </param>
            <param name="end">
            The end position of the line.
            </param>
            <param name="color">
            The color of the line.
            </param>
            <param name="thickness">
            The thickness of the line in pixels.
            </param>
            <param name="layerDepth">
            The layer depth the line is drawn at. (Z-index)
            </param>
        </member>
        <member name="M:Atom.Xna.Batches.SpriteTextureDrawBatch.DrawLine(Atom.Math.Vector2,Atom.Math.Vector2,Microsoft.Xna.Framework.Color,Atom.Math.Vector2,System.Int32,System.Single)">
            <summary>
            Queues drawing a line by this ITextureDrawBatch.
            </summary>
            <param name="start">
            The start position of the line.
            </param>
            <param name="end">
            The end position of the line.
            </param>
            <param name="color">
            The color of the line.
            </param>
            <param name="origin">
            The origin of rotation.
            </param>
            <param name="thickness">
            The thickness of the line in pixels.
            </param>
            <param name="layerDepth">
            The layer depth the line is drawn at. (Z-index)
            </param>
        </member>
        <member name="M:Atom.Xna.Batches.SpriteTextureDrawBatch.DrawLinePoly(Atom.Math.Polygon2,Microsoft.Xna.Framework.Color,System.Int32,System.Single)">
            <summary>
            Queues drawing a outer shape of a <see cref="T:Atom.Math.Polygon2"/> using lines by this ITextureDrawBatch.
            </summary>
            <param name="polygon">
            The polygon to draw.
            </param>
            <param name="color">
            The color of the lines.
            </param>
            <param name="thickness">
            The thickness of the lines in pixels.
            </param>
            <param name="layerDepth">
            The layer depth the lines are drawn at. (Z-index)
            </param>
        </member>
        <member name="M:Atom.Xna.Batches.SpriteTextureDrawBatch.DrawLineRect(Atom.Math.Rectangle,Microsoft.Xna.Framework.Color,System.Int32,System.Single)">
            <summary>
            Queues drawing a outer shape of a <see cref="T:Atom.Math.Rectangle"/> using lines by this ITextureDrawBatch.
            </summary>
            <param name="rectangle">
            The rectangle to draw.
            </param>
            <param name="color">
            The color of the lines.
            </param>
            <param name="thickness">
            The thickness of the lines in pixels.
            </param>
            <param name="layerDepth">
            The layer depth the lines are drawn at. (Z-index)
            </param>
        </member>
        <member name="M:Atom.Xna.Batches.SpriteTextureDrawBatch.DrawLineRect(Atom.Math.OrientedRectangleF,Microsoft.Xna.Framework.Color,System.Int32,System.Single)">
            <summary>
            Queues drawing a outer shape of a <see cref="T:Atom.Math.OrientedRectangleF"/> using lines by this ITextureDrawBatch.
            </summary>
            <param name="rectangle">
            The rectangle to draw.
            </param>
            <param name="color">
            The color of the lines.
            </param>
            <param name="thickness">
            The thickness of the lines in pixels.
            </param>
            <param name="layerDepth">
            The layer depth the lines are drawn at. (Z-index)
            </param>
        </member>
        <member name="M:Atom.Xna.Batches.SpriteTextureDrawBatch.Begin(Atom.Xna.IXnaDrawContext)">
            <summary>
            Begins drawing to this IDrawBatch.
            </summary>
            <param name="drawContext">
            The current <see cref="T:Atom.Xna.IXnaDrawContext"/>.
            </param>
        </member>
        <member name="M:Atom.Xna.Batches.SpriteTextureDrawBatch.End">
            <summary>
            Ends drawing to this IDrawBatch, outputing the result.
            </summary>
        </member>
        <member name="F:Atom.Xna.Batches.SpriteTextureDrawBatch.batch">
            <summary>
            The batch that is used to queue drawing of the <see cref="F:Atom.Xna.Batches.SpriteTextureDrawBatch.texture"/>
            in various ways.
            </summary>
        </member>
        <member name="F:Atom.Xna.Batches.SpriteTextureDrawBatch.texture">
            <summary>
            The texture that is used to draw the lines.
            </summary>
        </member>
        <member name="T:Atom.Xna.ColorComponent">
            <summary>
            Enumerates the components of a RGBA-color.
            </summary>
        </member>
        <member name="F:Atom.Xna.ColorComponent.None">
            <summary>
            No specific component.
            </summary>
        </member>
        <member name="F:Atom.Xna.ColorComponent.Red">
            <summary>
            The red component.
            </summary>
        </member>
        <member name="F:Atom.Xna.ColorComponent.Green">
            <summary>
            The green component.
            </summary>
        </member>
        <member name="F:Atom.Xna.ColorComponent.Blue">
            <summary>
            The blue component.
            </summary>
        </member>
        <member name="F:Atom.Xna.ColorComponent.Alpha">
            <summary>
            The alpha/transparency component.
            </summary>
        </member>
        <member name="T:Atom.Xna.ColorExtensions">
            <summary>
            Defines extension methods for the <see cref="T:Microsoft.Xna.Framework.Color"/> structure.
            </summary>
        </member>
        <member name="M:Atom.Xna.ColorExtensions.WithAlpha(Microsoft.Xna.Framework.Color,System.Byte)">
            <summary>
            Returns this Color, but with a different alpha component.
            </summary>
            <example>
            <code>
            Color c = Color.Red.WithAlpha( 125 );
            </code>
            </example>
            <param name="color">
            The input color.
            </param>
            <param name="alpha">
            The new alpha component.
            </param>
            <returns>
            The resulting color.
            </returns>
        </member>
        <member name="M:Atom.Xna.ColorExtensions.MultiplyBy(Microsoft.Xna.Framework.Color,System.Single,System.Single,System.Single)">
            <summary>
            Returns the result of multiplying the elements of this Color with the given multipliers.
            </summary>
            <param name="color">
            The input color.
            </param>
            <param name="redMultiplier">
            The multiplier value for the red color component.
            </param>
            <param name="greenMultiplier">
            The multiplier value for the green color component.
            </param>
            <param name="blueMultiplier">
            The multiplier value for the blue color component.
            </param>
            <returns>
            The resulting color.
            </returns>
        </member>
        <member name="M:Atom.Xna.ColorExtensions.MultiplyBy(Microsoft.Xna.Framework.Color,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Returns the result of multiplying the elements of this Color with the given multipliers.
            </summary>
            <param name="color">
            The input color.
            </param>
            <param name="redMultiplier">
            The multiplier value for the red color component.
            </param>
            <param name="greenMultiplier">
            The multiplier value for the green color component.
            </param>
            <param name="blueMultiplier">
            The multiplier value for the blue color component.
            </param>
            <param name="alphaMultiplier">
            The multiplier value for the alpha color component.
            </param>
            <returns>
            The resulting color.
            </returns>
        </member>
        <member name="T:Atom.Xna.ColorHelper">
            <summary>
            Defines <see cref="T:Microsoft.Xna.Framework.Color"/> related helper methods.
            </summary>
        </member>
        <member name="M:Atom.Xna.ColorHelper.Lerp(Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
            Linearly interpolates between the specified start and end color.
            </summary>
            <param name="start">
            The source color.
            </param>
            <param name="end">
            The destination color.
            </param>
            <param name="amount">
            The interpolation factor - a value between 0 and 1.
            </param>
            <returns>
            The interpolated Xna.Color.
            </returns>
        </member>
        <member name="M:Atom.Xna.ColorHelper.Create(System.Byte,Atom.Xna.ColorComponent,System.Byte,System.Byte)">
            <summary>
            Creates a Xna.Color with a single <paramref name="component"/> set to <paramref name="value"/>, 
            the other <see cref="T:Atom.Xna.ColorComponent"/> set to <paramref name="otherValue"/> and
            the <see cref="F:Atom.Xna.ColorComponent.Alpha"/> set to <paramref name="alphaValue"/>.
            </summary>
            <param name="value">
            The value of the <paramref name="component"/>.
            </param>
            <param name="component">
            The component to set to <paramref name="value"/>.
            </param>
            <param name="otherValue">
            The value of the other <see cref="T:Atom.Xna.ColorComponent"/>s.
            </param>
            <param name="alphaValue">
            The value of <see cref="F:Atom.Xna.ColorComponent.Alpha"/>.
            </param>
            <returns>
            The newly created color.
            </returns>
        </member>
        <member name="M:Atom.Xna.ColorHelper.InvertRGB(Microsoft.Xna.Framework.Color)">
            <summary>
            Inverts the given color.
            </summary>
            <param name="color">
            The color to invert.
            </param>
            <returns>
            The inverted color.
            </returns>
        </member>
        <member name="T:Atom.Xna.Effects.AlphaBlendInOutColorEffect">
            <summary>
            Implements an <see cref="T:Atom.Xna.Effects.ITimedColorEffect"/> that blends-in a color, 
            using the alpha channel, and then blends it out again after a specific time period.
            </summary>
            <remarks>
            TODO: # Consider adding a variable starting/maximum alpha value.
                  # Add needed properties.
            </remarks>
        </member>
        <member name="E:Atom.Xna.Effects.AlphaBlendInOutColorEffect.Ended">
            <summary>
            Raised when this AlphaBlendInOutColorEffect has reached its final effect.
            </summary>
        </member>
        <member name="P:Atom.Xna.Effects.AlphaBlendInOutColorEffect.StartAlpha">
            <summary>
            Gets or sets the starting alpha value.
            </summary>
            <value>The default value is 0.</value>
        </member>
        <member name="P:Atom.Xna.Effects.AlphaBlendInOutColorEffect.CurrentAlpha">
            <summary>
            The alpha value that has been calculated.
            </summary>
        </member>
        <member name="P:Atom.Xna.Effects.AlphaBlendInOutColorEffect.Time">
            <summary>
            Gets or sets the time left until this AlphaBlendInOutColorEffect has reached the end.
            </summary>
        </member>
        <member name="P:Atom.Xna.Effects.AlphaBlendInOutColorEffect.IsBlendingOut">
            <summary>
            Gets a value indicating whether this AlphaBlendInOutColorEffect is blending out.
            </summary>
        </member>
        <member name="P:Atom.Xna.Effects.AlphaBlendInOutColorEffect.StartMaxAlphaTime">
            <summary>
            The keytime when the maximum alpha value of the color should be reached.
            </summary>
        </member>
        <member name="P:Atom.Xna.Effects.AlphaBlendInOutColorEffect.EndMaxAlphaTime">
            <summary>
            Gets the keytime when the maximum alpha value of the color should begin to fade to 0.
            </summary>
        </member>
        <member name="M:Atom.Xna.Effects.AlphaBlendInOutColorEffect.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Xna.Effects.AlphaBlendInOutColorEffect"/> class.
            </summary>
            <param name="duration">
            The total duration the effect is active.
            </param>
            <param name="startMaxAlphaTime">
            The keytime when the maximum alpha value of the color should be reached.
            </param>
            <param name="endMaxAlphaTime">
            The keytime when the maximum alpha value of the color should begin to fade to 0.
            </param>
        </member>
        <member name="M:Atom.Xna.Effects.AlphaBlendInOutColorEffect.Apply(Microsoft.Xna.Framework.Color)">
            <summary>
            Applies the current state of this AlphaBlendingColorEffect to the specified <paramref name="color"/>.
            </summary>
            <param name="color">
            The color to apply this IColorEffect on.
            </param>
            <returns>
            The output color that has this IColorEffect applied.
            </returns>
        </member>
        <member name="M:Atom.Xna.Effects.AlphaBlendInOutColorEffect.Update(Atom.IUpdateContext)">
            <summary>
            Updates this AlphaBlendingColorEffect.
            </summary>
            <param name="updateContext">
            The current IUpdateContext.
            </param>
        </member>
        <member name="M:Atom.Xna.Effects.AlphaBlendInOutColorEffect.Reset">
            <summary>
            Resets this AlphaBlendingColorEffect.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.AlphaBlendInOutColorEffect.time">
            <summary>
            The time the effect has been run.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.AlphaBlendInOutColorEffect.totalDuration">
            <summary>
            The total duration the effect is active.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.AlphaBlendInOutColorEffect.startMaxAlphaTime">
            <summary>
            The keytime when the maximum alpha value of the color should be reached.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.AlphaBlendInOutColorEffect.endMaxAlphaTime">
            <summary>
            The keytime when the maximum alpha value of the color should begin to fade to 0.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.AlphaBlendInOutColorEffect.alpha">
            <summary>
            The alpha value which has been calculated via this.
            </summary>
        </member>
        <member name="T:Atom.Xna.Effects.IColorEffect">
            <summary>
            Represents an effect that modifies <see cref="T:Microsoft.Xna.Framework.Color"/>s.
            </summary>
        </member>
        <member name="M:Atom.Xna.Effects.IColorEffect.Apply(Microsoft.Xna.Framework.Color)">
            <summary>
            Applies the current state of this IColorEffect to the specified <paramref name="color"/>.
            </summary>
            <param name="color">
            The color to apply this IColorEffect on.
            </param>
            <returns>
            The output color that has this IColorEffect applied.
            </returns>
        </member>
        <member name="T:Atom.Xna.Effects.ITimedColorEffect">
            <summary>
            Represents an <see cref="T:Atom.Xna.Effects.IColorEffect"/> that modifies <see cref="T:Microsoft.Xna.Framework.Color"/>s
            differently as time flows.
            </summary>
        </member>
        <member name="E:Atom.Xna.Effects.ITimedColorEffect.Ended">
            <summary>
            Raised when this IColorEffect has reached its final effect.
            </summary>
        </member>
        <member name="M:Atom.Xna.Effects.ITimedColorEffect.Reset">
            <summary>
            Resets this IColorEffect to its initial state.
            </summary>
        </member>
        <member name="T:Atom.Xna.Effects.EdgeDetectionEffect">
            <summary>
            Defines a <see cref="T:Atom.Xna.Effects.RectangularEffect"/> that tries to detect the edges
            in an image Texture.
            </summary>
        </member>
        <member name="M:Atom.Xna.Effects.EdgeDetectionEffect.#ctor(Atom.Xna.Effects.IEffectLoader,Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)">
            <summary>
            Initializes a new instance of the EdgeDetectionEffect class.
            </summary>
            <param name="effectLoader">
            Provides a mechanism that allows loading of effect assets.
            </param>
            <param name="deviceService">
            Provides access to the <see cref="T:Microsoft.Xna.Framework.Graphics.GraphicsDevice"/>.
            </param>
        </member>
        <member name="M:Atom.Xna.Effects.EdgeDetectionEffect.LoadEffect(Atom.Xna.Effects.IEffectLoader)">
            <summary>
            Loads the effect used by this EdgeDetectionEffect.
            </summary>
            <param name="effectLoader">
            Provides a mechanism that allows loading of effect assers.
            </param>
        </member>
        <member name="P:Atom.Xna.Effects.EdgeDetectionEffect.Threshold">
            <summary>
            Gets or sets a value that controls when a pixel is considered to be an edge.
            </summary>
        </member>
        <member name="P:Atom.Xna.Effects.EdgeDetectionEffect.Thickness">
            <summary>
            Gets or sets the Thickness of the edges created by this EdgeDetectionEffect.
            </summary>
        </member>
        <member name="P:Atom.Xna.Effects.EdgeDetectionEffect.Texture">
            <summary>
            Gets or sets the Texture2D whose edges are detected.
            </summary>
        </member>
        <member name="M:Atom.Xna.Effects.EdgeDetectionEffect.Draw(Atom.IDrawContext)">
            <summary>
            Draws this EdgeDetectionEffect.
            </summary>
            <param name="drawContext">
            The current IDrawContext.
            </param>
        </member>
        <member name="M:Atom.Xna.Effects.EdgeDetectionEffect.DisposeManagedResources">
            <summary>
            Disposes the managed resources used by this EdgeDetectionEffect.
            </summary>
        </member>
        <member name="M:Atom.Xna.Effects.EdgeDetectionEffect.DisposeUnmanagedResources">
            <summary>
            Disposes the unmanaged resources used by this EdgeDetectionEffect.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.EdgeDetectionEffect.texture">
            <summary>
            The image whose edges are detected with this EdgeDetectionEffect.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.EdgeDetectionEffect.effect">
            <summary>
            The effect used by this EdgeDetectionEffect.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.EdgeDetectionEffect.effectPass">
            <summary>
            The pass used by the effect.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.EdgeDetectionEffect.parameterTexture">
            <summary>
            Identifies the Texture parameter of the EdgeDetectionEffect.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.EdgeDetectionEffect.parameterTextureSize">
            <summary>
            Identifies the TextureSize parameter of the EdgeDetectionEffect.
            </summary>
        </member>
        <member name="T:Atom.Xna.Effects.EffectLoader">
            <summary>
            Implements a mechanism that allows loading of Effect assets
            from compiled xna resources by using a <see cref="T:Microsoft.Xna.Framework.Content.ContentManager"/>.
            </summary>
        </member>
        <member name="M:Atom.Xna.Effects.EffectLoader.#ctor(Microsoft.Xna.Framework.Content.ContentManager)">
            <summary>
            Initializes a new instance of the EffectLoader class.
            </summary>
            <param name="contentManager">
            The Xna ContentManager responsible for loading the Effect assets.
            </param>
        </member>
        <member name="M:Atom.Xna.Effects.EffectLoader.Create(System.IServiceProvider)">
            <summary>
            Creates a new EffectLoader that uses a custom ContentManager with a
            rootDirectory of "Content/Effects/".
            </summary>
            <param name="serviceProvider">
            The service provider the content manager should use to locate services.
            </param>
            <returns>
            The newly created EffectLoader.
            </returns>
        </member>
        <member name="M:Atom.Xna.Effects.EffectLoader.CreateContentManager(System.IServiceProvider)">
            <summary>
            Creates a new ContentManager with a rootDirectory of "Content/Effects/".
            </summary>
            <param name="serviceProvider">
            The service provider the content manager should use to locate services.
            </param>
            <returns>
            The newly created ContentManager.
            </returns>
        </member>
        <member name="M:Atom.Xna.Effects.EffectLoader.Load(System.String)">
            <summary>
            Tries to receive the <see cref="T:Microsoft.Xna.Framework.Graphics.Effect"/> with the given <paramref name="assetName"/>.
            </summary>
            <param name="assetName">
            The name of the Effect asset to load.
            </param>
            <returns>
            The loaded Effect.
            </returns>
        </member>
        <member name="T:Atom.Xna.Effects.IEffectLoader">
            <summary>
            Provides a mechanism that allows loading of Effect assets.
            </summary>
        </member>
        <member name="M:Atom.Xna.Effects.IEffectLoader.Load(System.String)">
            <summary>
            Tries to receive the <see cref="T:Microsoft.Xna.Framework.Graphics.Effect"/> with the given <paramref name="assetName"/>.
            </summary>
            <param name="assetName">
            The name of the texture asset to load.
            </param>
            <returns>
            The loaded Effect.
            </returns>
        </member>
        <member name="T:Atom.Xna.Effects.Lightning.LightningBolt">
            <summary>
            Represents a 2D lightning-bolt graphics effects.
            </summary>
        </member>
        <member name="P:Atom.Xna.Effects.Lightning.LightningBolt.Source">
            <summary>
            Gets or sets the source position of this lightning.
            </summary>
        </member>
        <member name="P:Atom.Xna.Effects.Lightning.LightningBolt.Destination">
            <summary>
            Gets or sets the desitination position of this lightning.
            </summary>
        </member>
        <member name="M:Atom.Xna.Effects.Lightning.LightningBolt.ResolveTexture">
            <summary>
            Gets and resolves the lightning that has been rendered.
            </summary>
        </member>
        <member name="P:Atom.Xna.Effects.Lightning.LightningBolt.Settings">
            <summary>
            Gets or sets settings that applied to this LightningBolt.
            </summary>
        </member>
        <member name="P:Atom.Xna.Effects.Lightning.LightningBolt.VirtualLines">
            <summary>
            Gets the lines that the bolt consists of.
            </summary>
        </member>
        <member name="P:Atom.Xna.Effects.Lightning.LightningBolt.ForkArmLength">
            <summary>
            Gets the length of a fork arm.
            </summary>
        </member>
        <member name="P:Atom.Xna.Effects.Lightning.LightningBolt.View">
            <summary>
            Gets or sets the view matrix that is used when rendering the texture of the LightningBolt.
            </summary>
        </member>
        <member name="P:Atom.Xna.Effects.Lightning.LightningBolt.World">
            <summary>
            Gets or sets the world matrix that is used when rendering the texture of the LightningBolt.
            </summary>
        </member>
        <member name="P:Atom.Xna.Effects.Lightning.LightningBolt.Projection">
            <summary>
            Gets or sets the projection matrix that is used when rendering the texture of the LightningBolt.
            </summary>
        </member>
        <member name="P:Atom.Xna.Effects.Lightning.LightningBolt.IsSupported">
            <summary>
            Gets a value indicating whether this effect is supported on the current hardware.
            </summary>
        </member>
        <member name="T:Atom.Xna.Effects.Lightning.LightningBolt.VirtualLine">
            <summary>
            Keeps track of a single lightning segment.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.Lightning.LightningBolt.VirtualLine.v0">
            <summary>
            The index of the first vertex.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.Lightning.LightningBolt.VirtualLine.v1">
            <summary>
            The index of the second vertex.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.Lightning.LightningBolt.VirtualLine.v2">
            <summary>
            The index of the third vertex.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.Lightning.LightningBolt.VirtualLine.v3">
            <summary>
            The index of the fourth vertex.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.Lightning.LightningBolt.VirtualLine.WidthLevel">
            <summary>
            The fork/sub division depth.
            </summary>
        </member>
        <member name="T:Atom.Xna.Effects.Lightning.LightningBolt.VirtualPoint">
            <summary>
            Keeps track of a single lightning vertex.
            </summary>
        </member>
        <member name="M:Atom.Xna.Effects.Lightning.LightningBolt.#ctor(Atom.Math.Vector3,Atom.Math.Vector3,Atom.Xna.Effects.Lightning.LightningSettings,Atom.Xna.Effects.PostProcess.Glow,Atom.Math.IRand)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="destination"></param>
            <param name="settings"></param>
            <param name="glow"></param>
            <param name="rand">
            A random number generator.
            </param>
        </member>
        <member name="M:Atom.Xna.Effects.Lightning.LightningBolt.LoadContent(Atom.Xna.Effects.IEffectLoader,Atom.Xna.IRenderTarget2DFactory,Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Loads this LightningBolt.
            </summary>
            <param name="effectLoader"></param>
            <param name="renderTargetFactory"></param>
            <param name="device"></param>
        </member>
        <member name="M:Atom.Xna.Effects.Lightning.LightningBolt.GenerateTexture(Atom.Xna.IXnaDrawContext)">
            <summary>
            Generates the lightning as drawn in the scene.
            </summary>
        </member>
        <member name="M:Atom.Xna.Effects.Lightning.LightningBolt.Update(Atom.IUpdateContext)">
            <summary>
            Updates the animation of this LightningBolt.
            </summary>
        </member>
        <member name="M:Atom.Xna.Effects.Lightning.LightningBolt.Animate">
            <summary>
            Ranodimzes this LightningBolt, taken the current settings and positions.
            </summary>
        </member>
        <member name="T:Atom.Xna.Effects.Lightning.LightningSettings">
            <summary>
            Descripes the properties of a Lightning Bolt.
            </summary>
        </member>
        <member name="P:Atom.Xna.Effects.Lightning.LightningSettings.Default">
            <summary>
            Gets a new LightningDescriptor that has default settings.
            </summary>
        </member>
        <member name="P:Atom.Xna.Effects.Lightning.LightningSettings.ElectricityBolt">
            <summary>
            Gets a new LightningDescriptor that has the settings for an electricity bolt.
            </summary>
        </member>
        <member name="P:Atom.Xna.Effects.Lightning.LightningSettings.ExamplePreset">
            <summary>
            Gets a new LightningDescriptor that has example settings.
            </summary>
        </member>
        <member name="P:Atom.Xna.Effects.Lightning.LightningSettings.Topology">
            <summary>
            Gets or sets the sub-division operation to apply when creating the Lightning.
            </summary>
        </member>
        <member name="P:Atom.Xna.Effects.Lightning.LightningSettings.FrameLength">
            <summary>
            Gets or sets the length a frame lasts; before a new one is generated.
            </summary>
        </member>
        <member name="P:Atom.Xna.Effects.Lightning.LightningSettings.GlowIntensity">
            <summary>
            Gets or sets a value indicating how strong the lightning should glow.
            </summary>
        </member>
        <member name="P:Atom.Xna.Effects.Lightning.LightningSettings.IsGlowEnabled">
            <summary>
            Gets or sets a value indicating whether the lightning should glow.
            </summary>
        </member>
        <member name="P:Atom.Xna.Effects.Lightning.LightningSettings.IsWidthDecreasing">
            <summary>
            Gets or sets a value indicating whether the width of the beam should decrease over time.
            </summary>
        </member>
        <member name="P:Atom.Xna.Effects.Lightning.LightningSettings.BaseWidth">
            <summary>
            Gets or sets the width the beam starts at.
            </summary>
        </member>
        <member name="P:Atom.Xna.Effects.Lightning.LightningSettings.ExteriorColor">
            <summary>
            Gets or sets the exterior color of the beam.
            </summary>
        </member>
        <member name="P:Atom.Xna.Effects.Lightning.LightningSettings.InteriorColor">
            <summary>
            Gets or sets the interior color of the beam.
            </summary>
        </member>
        <member name="P:Atom.Xna.Effects.Lightning.LightningSettings.SubdivisionFraction">
            <summary>
            Gets or sets the range of values that is used when creating a new jitter.
            </summary>
        </member>
        <member name="P:Atom.Xna.Effects.Lightning.LightningSettings.JitterForwardDeviation">
            <summary>
            Gets or sets the range of values in which the beam can jitter forward.
            </summary>
        </member>
        <member name="P:Atom.Xna.Effects.Lightning.LightningSettings.JitterLeftDeviation">
            <summary>
            Gets or sets the range of values in which the beam can jitter left.
            </summary>
        </member>
        <member name="P:Atom.Xna.Effects.Lightning.LightningSettings.JitterDeviationRadius">
            <summary>
            Gets or sets the radius in which the beam jitters.
            </summary>
        </member>
        <member name="P:Atom.Xna.Effects.Lightning.LightningSettings.JitterDecayRate">
            <summary>
            Gets or sets a value indicating how fast the jitter gets weaker.
            </summary>
        </member>
        <member name="P:Atom.Xna.Effects.Lightning.LightningSettings.ForkLengthPercentage">
            <summary>
            Gets or sets the length of a fork arm as a percentage of the forked beam.
            </summary>
        </member>
        <member name="P:Atom.Xna.Effects.Lightning.LightningSettings.ForkDecayRate">
            <summary>
            Gets or sets a value indicating how fast the fork gets weaker.
            </summary>
        </member>
        <member name="P:Atom.Xna.Effects.Lightning.LightningSettings.ForkForwardDeviation">
            <summary>
            Gets or sets the range of values in which the beam can fork fordward.
            </summary>
        </member>
        <member name="P:Atom.Xna.Effects.Lightning.LightningSettings.ForkLeftDeviation">
            <summary>
            Gets or sets the range of values in which the beam can fork left.
            </summary>
        </member>
        <member name="T:Atom.Xna.Effects.Lightning.LightningSubdivisionOp">
            <summary>
            Describes the operation that will be applied to the lightning segments
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.Lightning.LightningSubdivisionOp.Jitter">
            <summary>
            Take a point on the line and modify its position
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.Lightning.LightningSubdivisionOp.JitterAndFork">
            <summary>
            Take a point on the line, modify it's position, and 
            generate a new segment starting in this point
            </summary>
        </member>
        <member name="T:Atom.Xna.Effects.Lightning.LightningVertex">
            <summary>
            Represents a vertex within a LightningBolt.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.Lightning.LightningVertex.Position">
            <summary>
            The position of the vertex.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.Lightning.LightningVertex.TextureCoordinates">
            <summary>
            The texture coordinates of the vertex.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.Lightning.LightningVertex.ColorGradient">
            <summary>
            The color gradient of the vertex.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.Lightning.LightningVertex.VertexElements">
            <summary>
            The layout of this vertex structure.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.Lightning.LightningVertex.SizeInBytes">
            <summary>
            The size of this vertex structure.
            </summary>
        </member>
        <member name="T:Atom.Xna.Effects.NoiseEffect">
            <summary>
            Implements an improved perlin noise fullscreen effect.
            This class can't be inherited.
            </summary>
        </member>
        <member name="M:Atom.Xna.Effects.NoiseEffect.#ctor(Atom.Xna.Effects.IEffectLoader,Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)">
            <summary>
            Initializes a new instance of the NoiseEffect class.
            </summary>
            <param name="effectLoader">
            Provides a mechanism that allows loading of effect assets.
            </param>
            <param name="deviceService">
            Provides access to the <see cref="T:Microsoft.Xna.Framework.Graphics.GraphicsDevice"/>.
            </param>
        </member>
        <member name="M:Atom.Xna.Effects.NoiseEffect.LoadEffect(Atom.Xna.Effects.IEffectLoader)">
            <summary>
            Loads the effect used by this EdgeDetectionEffect.
            </summary>
            <param name="effectLoader">
            Provides a mechanism that allows loading of effect assers.
            </param>
        </member>
        <member name="M:Atom.Xna.Effects.NoiseEffect.LoadCustomContent">
            <summary>
            Loads all additional content that is used by this NoiseEffect.
            </summary>
        </member>
        <member name="M:Atom.Xna.Effects.NoiseEffect.CreateSeedTexture(System.Int32,Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Creates the texture that is used as an input into the PerlinNoise shader.
            </summary>
            <param name="resolution">
            The resolution of the seed to create. A higher value results reduces the size,
            but increases the quantity of the details in the NoiseEffect.
            </param>
            <param name="device">
            The GraphicsDevice used to display the texture.
            </param>
            <returns>The newly created seed texture.</returns>
        </member>
        <member name="P:Atom.Xna.Effects.NoiseEffect.MoveSpeed">
            <summary>
            Gets or sets the movement speed of the NoiseEffect.
            </summary>
            <value>The speed the noise moves when updating the NoiseEffect.</value>
        </member>
        <member name="P:Atom.Xna.Effects.NoiseEffect.MoveDirection">
            <summary>
            Gets or sets the movement direction of the NoiseEffect.
            </summary>
            <value>The direction the noise moves when updating the NoiseEffect.</value>
        </member>
        <member name="P:Atom.Xna.Effects.NoiseEffect.Overcast">
            <summary>
            Gets or sets a value that controls how strongly the Noise effect is amplified.
            </summary>
        </member>
        <member name="P:Atom.Xna.Effects.NoiseEffect.BaseColor">
            <summary>
            Gets or sets the base color of the NoiseEffect.
            </summary>
        </member>
        <member name="P:Atom.Xna.Effects.NoiseEffect.ColorFactor">
            <summary>
            Gets or sets the color factor of the NoiseEffect.
            </summary>
        </member>
        <member name="P:Atom.Xna.Effects.NoiseEffect.Alpha">
            <summary>
            Gets or sets the alpha value of the <see cref="P:Atom.Xna.Effects.NoiseEffect.ColorFactor"/> of the NoiseEffect.
            </summary>
        </member>
        <member name="P:Atom.Xna.Effects.NoiseEffect.SeedResolution">
            <summary>
            Gets or sets the resolution of the NoiseEffect's seed.
            </summary>
            <value>
            A higher value results reduces the size,
            but increases the quantity of the details in the NoiseEffect.
            </value>
        </member>
        <member name="M:Atom.Xna.Effects.NoiseEffect.Move(Atom.Math.Vector2)">
            <summary>
            Manually moves this Noise Effect by the specified <paramref name="offset"/>.
            </summary>
            <param name="offset">
            The offset the move manually.
            </param>
        </member>
        <member name="M:Atom.Xna.Effects.NoiseEffect.Draw(Atom.IDrawContext)">
            <summary>
            Draws this NoiseEffect.
            </summary>
            <param name="drawContext">
            The current IDrawContext.
            </param>
        </member>
        <member name="M:Atom.Xna.Effects.NoiseEffect.Update(Atom.IUpdateContext)">
            <summary>
            Updates this NoiseEffect.
            </summary>
            <param name="updateContext">
            The current IUpdateContext.
            </param>
        </member>
        <member name="M:Atom.Xna.Effects.NoiseEffect.DisposeManagedResources">
            <summary>
            Disposes the managed resources used by this NoiseEffect.
            </summary>
        </member>
        <member name="M:Atom.Xna.Effects.NoiseEffect.DisposeUnmanagedResources">
            <summary>
            Disposes the unmanaged resources used by this NoiseEffect.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.NoiseEffect.moveOffset">
            <summary>
            The current movement offset of the NoiseEffect.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.NoiseEffect.moveDirection">
            <summary>
            The movement direction of the NoiseEffect.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.NoiseEffect.moveSpeed">
            <summary>
            The movement speed of the NoiseEffect.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.NoiseEffect.seedResolution">
            <summary>
            The resolution of the seed texture.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.NoiseEffect.textureSeed">
            <summary>
            The texture that is passed into the Perlin Noise shader as the seed.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.NoiseEffect.effect">
            <summary>
            The effect used by this NoiseEffect.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.NoiseEffect.effectPass">
            <summary>
            The pass used by the effect.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.NoiseEffect.parameterMoveOffset">
            <summary>
            Identifies the MoveOffset parameter of the NoiseEffect.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.NoiseEffect.parameterColorFactor">
            <summary>
            Identifies the ColorFactor parameter of the NoiseEffect.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.NoiseEffect.parameterTexture">
            <summary>
            Identifies the Texture parameter of the NoiseEffect.
            </summary>
        </member>
        <member name="T:Atom.Xna.Effects.PostProcess.Bloom">
            <summary>
            Implements a non-HDR bloom post-process effect.
            </summary>
        </member>
        <member name="T:Atom.Xna.Effects.PostProcess.Bloom.IntermediateBuffer">
            <summary>
            Enumerates what kind of intermediate buffers are shown
            that make up the Bloom effect.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.PostProcess.Bloom.IntermediateBuffer.PreBloom">
            <summary>
            The buffer before any bloom effect is applied.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.PostProcess.Bloom.IntermediateBuffer.BlurredHorizontally">
            <summary>
            The buffer that contains the horizontally blurred scene.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.PostProcess.Bloom.IntermediateBuffer.BlurredBothWays">
            <summary>
            The buffer that contains the horizontally and vertically blurred scene.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.PostProcess.Bloom.IntermediateBuffer.FinalResult">
            <summary>
            The buffer that contains the result of the Bloom effect.
            </summary>
        </member>
        <member name="P:Atom.Xna.Effects.PostProcess.Bloom.ShowBuffer">
            <summary>
            Gets or sets what buffers of the Bloom effect are shown.
            </summary>
        </member>
        <member name="P:Atom.Xna.Effects.PostProcess.Bloom.Settings">
            <summary>
            Gets or sets the settings used by this Bloom effect.
            </summary>
        </member>
        <member name="M:Atom.Xna.Effects.PostProcess.Bloom.#ctor(Atom.Xna.Effects.IEffectLoader,Atom.Xna.IRenderTarget2DFactory,Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)">
            <summary>
            Initializes a new instance of the Bloom class.
            </summary>        
            <param name="effectLoader">
            Provides a mechanism that allows loading of effect assets.
            </param>
            <param name="renderTargetFactory">
            Provides a mechanism that allows the creation of render targets.
            </param>
            <param name="deviceService">
            Provides access to the <see cref="T:Microsoft.Xna.Framework.Graphics.GraphicsDevice"/>.
            </param>
        </member>
        <member name="M:Atom.Xna.Effects.PostProcess.Bloom.LoadContent">
            <summary>
            Loads the content required by this Bloom effect.
            </summary>
        </member>
        <member name="M:Atom.Xna.Effects.PostProcess.Bloom.PostProcess(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.RenderTarget2D,Atom.Xna.IXnaDrawContext)">
            <summary>
            Applies this IPostProcessEffect.
            </summary>
            <param name="sourceTexture">
            The texture to post-process.
            </param>
            <param name="result">
            The RenderTarget to which to render the result of this PostProcessEffect.
            </param>
            <param name="drawContext">
            The context under which the drawing operation occurrs.
            </param>
        </member>
        <member name="M:Atom.Xna.Effects.PostProcess.Bloom.DrawQuad(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.RenderTarget2D,Microsoft.Xna.Framework.Graphics.Effect,Atom.Xna.Effects.PostProcess.Bloom.IntermediateBuffer)">
            <summary>
            Helper for drawing a texture into a rendertarget, using
            a custom shader to apply postprocessing effects.
            </summary>
            <param name="texture">
            The texture to draw.
            </param>
            <param name="renderTarget">
            The target of the drawing operation.
            </param>
            <param name="effect">
            The effect to apply when drawing the texture.
            </param>
            <param name="currentBuffer">
            States what buffer currently is drawn using this DrawQuad operation.
            </param>
        </member>
        <member name="M:Atom.Xna.Effects.PostProcess.Bloom.DrawQuad(Microsoft.Xna.Framework.Graphics.Texture2D,System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.Effect,Atom.Xna.Effects.PostProcess.Bloom.IntermediateBuffer)">
            <summary>
            Helper for drawing a texture into the current rendertarget,
            using a custom shader to apply postprocessing effects.
            </summary>
            <param name="texture">
            The texture to draw.
            </param>
            <param name="width">
            The width of the quad.
            </param>
            <param name="height">
            The height of the quad.
            </param>
            <param name="effect">
            The effect to apply when drawing the texture.
            </param>
            <param name="currentBuffer">
            States what buffer currently is drawn using this DrawQuad operation.
            </param>
        </member>
        <member name="M:Atom.Xna.Effects.PostProcess.Bloom.SetBlurEffectParameters(System.Single,System.Single)">
            <summary>
            Computes sample weightings and texture coordinate offsets
            for one pass of a separable gaussian blur filter.
            </summary>
        </member>
        <member name="M:Atom.Xna.Effects.PostProcess.Bloom.ComputeGaussian(System.Single)">
            <summary>
            Evaluates a single point on the gaussian falloff curve.
            Used for setting up the blur filter weightings.
            </summary>
            <param name="n">
            The index of the entry to calculate.
            </param>
            <returns>
            The gaussian value for the specified index and
            current blurring settings.
            </returns>
        </member>
        <member name="M:Atom.Xna.Effects.PostProcess.Bloom.DisposeUnmanagedResources">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:Atom.Xna.Effects.PostProcess.Bloom.DisposeManagedResources">
            <summary>
            Releases all managed resources.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.PostProcess.Bloom.spriteBatch">
            <summary>
            The SpriteBatch that is used to draw the individual buffers
            of this Bloom effect.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.PostProcess.Bloom.bloomExtractEffect">
            <summary>
            The effect that is used to extract the area to bloom.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.PostProcess.Bloom.bloomCombineEffect">
            <summary>
            The effect that is used to combine the input scene with the extracted bloom.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.PostProcess.Bloom.gaussianBlurEffect">
            <summary>
            The effect that is used to blur the bloomed result.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.PostProcess.Bloom.parameterWeights">
            <summary>
            The parameter that sets the blurring weights.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.PostProcess.Bloom.parameterOffsets">
            <summary>
            The parameter that sets the blurring offsets.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.PostProcess.Bloom.parameterBloomThreshold">
            <summary>
            The parameter that sets the bloom treshold of this bloom effect.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.PostProcess.Bloom.parameterBloomIntensity">
            <summary>
            The parameter that sets the bloom intensity of this bloom effect.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.PostProcess.Bloom.parameterBaseIntensity">
            <summary>
            The parameter that sets the base intensity of this bloom effect.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.PostProcess.Bloom.parameterBloomSaturation">
            <summary>
            The parameter that sets the bloom saturation of this bloom effect.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.PostProcess.Bloom.parameterBaseSaturation">
            <summary>
            The parameter that sets the base saturation of this bloom effect.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.PostProcess.Bloom.renderTarget1">
            <summary>
            The second render target that is used when rendering this Bloom effect.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.PostProcess.Bloom.renderTarget2">
            <summary>
            The first render target that is used when rendering this Bloom effect.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.PostProcess.Bloom.settings">
            <summary>
            The current settings used by this Bloom effect.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.PostProcess.Bloom.showBuffer">
            <summary>
            States what buffer this Bloom effect outputs to the screen.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.PostProcess.Bloom.device">
            <summary>
            The GraphicsDevice used to draw this Bloom effect.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.PostProcess.Bloom.effectLoader">
            <summary>
            Provides a mechanism that loads Effects.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.PostProcess.Bloom.renderTargetFactory">
            <summary>
            Provides a mechanism that creates new RenderTargets.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.PostProcess.Bloom.deviceService">
            <summary>
            Provides access to the Xna GraphicsDevice.
            </summary>
        </member>
        <member name="T:Atom.Xna.Effects.PostProcess.BloomSettings">
            <summary>
            Holds the settings used to tweak the <see cref="T:Atom.Xna.Effects.PostProcess.Bloom"/> effect.
            </summary>
        </member>
        <member name="P:Atom.Xna.Effects.PostProcess.BloomSettings.Name">
            <summary>
            Gets or sets the name of this BloomSettings instance.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.PostProcess.BloomSettings.BloomThreshold">
            <summary>
            Controls how bright a pixel needs to be before it will bloom.
            Zero makes everything bloom equally, while higher values select
            only brighter colors. Somewhere between 0.25 and 0.5 is good.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.PostProcess.BloomSettings.BlurAmount">
            <summary>
            Controls how much blurring is applied to the bloom image.
            The typical range is from 1 up to 10 or so.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.PostProcess.BloomSettings.BloomIntensity">
            <summary>
            Controls the amount of the bloom image that will be mixed 
            into the final scene. Range 0 to 1.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.PostProcess.BloomSettings.BaseIntensity">
            <summary>
            Controls the amount of the base image that will be mixed
            into the final scene. Range 0 to 1.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.PostProcess.BloomSettings.BloomSaturation">
            <summary>
            Independently control the color saturation of the bloom image. 
            Zero is totally desaturated, 1.0 leaves saturation
            unchanged, while higher values increase the saturation level.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.PostProcess.BloomSettings.BaseSaturation">
            <summary>
            Independently control the color saturation of the base image.
            Zero is totally desaturated, 1.0 leaves saturation
            unchanged, while higher values increase the saturation level.
            </summary>
        </member>
        <member name="P:Atom.Xna.Effects.PostProcess.BloomSettings.Default">
            <summary>
            Gets the default pre-set BloomSettings.
            </summary>
        </member>
        <member name="P:Atom.Xna.Effects.PostProcess.BloomSettings.Soft">
            <summary>
            Gets the soft pre-set BloomSettings.
            </summary>
        </member>
        <member name="P:Atom.Xna.Effects.PostProcess.BloomSettings.Desaturated">
            <summary>
            Gets the desaturated pre-set BloomSettings.
            </summary>
        </member>
        <member name="P:Atom.Xna.Effects.PostProcess.BloomSettings.Saturated">
            <summary>
            Gets the saturated pre-set BloomSettings.
            </summary>
        </member>
        <member name="P:Atom.Xna.Effects.PostProcess.BloomSettings.Blurry">
            <summary>
            Gets the blurry pre-set BloomSettings.
            </summary>
        </member>
        <member name="P:Atom.Xna.Effects.PostProcess.BloomSettings.Subtle">
            <summary>
            Gets the subtle pre-set BloomSettings.
            </summary>
        </member>
        <member name="M:Atom.Xna.Effects.PostProcess.BloomSettings.#ctor(System.String,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the BloomSettings class.
            </summary>
            <param name="name">
            The name of the new BloomSettings instance.
            </param>
            <param name="bloomThreshold">
            Controls how bright a pixel needs to be before it will bloom.
            Zero makes everything bloom equally, while higher values select
            only brighter colors. Somewhere between 0.25 and 0.5 is good.
            </param>
            <param name="blurAmount">
            Controls how much blurring is applied to the bloom image.
            The typical range is from 1 up to 10 or so.
            </param>
            <param name="bloomIntensity">
            Controls the amount of the bloom image that will be mixed 
            into the final scene. Range 0 to 1.
            </param>
            <param name="baseIntensity">
            Controls the amount of the base image that will be mixed
            into the final scene. Range 0 to 1.
            </param>
            <param name="bloomSaturation">
            Independently control the color saturation of the bloom image. 
            Zero is totally desaturated, 1.0 leaves saturation
            unchanged, while higher values increase the saturation level.
            </param>
            <param name="baseSaturation">
            Independently control the color saturation of the base image.
            Zero is totally desaturated, 1.0 leaves saturation
            unchanged, while higher values increase the saturation level.
            </param>
        </member>
        <member name="M:Atom.Xna.Effects.PostProcess.BloomSettings.ToString">
            <summary>
            Overwritten to return a human-readable description of this BloomSettings instance.
            </summary>
            <returns>
            The various properties of this BloomSettings instance.
            </returns>
        </member>
        <member name="T:Atom.Xna.Effects.PostProcess.Glow">
            <summary>
            Represents a post-process effect that makes the source texture 'glow'.
            </summary>
        </member>
        <member name="P:Atom.Xna.Effects.PostProcess.Glow.Strength">
            <summary>
            Gets or sets the strength of the flow effect.
            </summary>
        </member>
        <member name="P:Atom.Xna.Effects.PostProcess.Glow.TexelSize">
            <summary>
            Sets the size of a single texel.
            </summary>
        </member>
        <member name="P:Atom.Xna.Effects.PostProcess.Glow.GlowMap">
            <summary>
            Sets the glow texture that gets combined with the source texture.
            </summary>
        </member>
        <member name="M:Atom.Xna.Effects.PostProcess.Glow.#ctor(Atom.Xna.Effects.IEffectLoader,Atom.Xna.IRenderTarget2DFactory,Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)">
            <summary>
            Initializes a new instance of the Glow class.
            </summary>
            <param name="effectLoader">
            Provides a mechanism that allows loading of effect assets.
            </param>
            <param name="renderTargetFactory">
            Provides a mechanism for creating new screen-sized RenderTarget2Ds.
            </param>
            <param name="deviceService">
            Provides access to the <see cref="T:Microsoft.Xna.Framework.Graphics.GraphicsDevice"/>.
            </param>
        </member>
        <member name="M:Atom.Xna.Effects.PostProcess.Glow.LoadEffect(Atom.Xna.Effects.IEffectLoader)">
            <summary>
            Loads the effect used by this RectangularEffect.
            </summary>
            <param name="effectLoader">
            Provides a mechanism that allows loading of effect assets.
            </param>
        </member>
        <member name="M:Atom.Xna.Effects.PostProcess.Glow.LoadCustomContent">
            <summary>
            Provides a hook that can be overwritten by subclasses to load additional content.
            </summary>
        </member>
        <member name="M:Atom.Xna.Effects.PostProcess.Glow.DisposeManagedResources">
            <summary>
            Releases all managed resources.
            </summary>
        </member>
        <member name="M:Atom.Xna.Effects.PostProcess.Glow.DisposeUnmanagedResources">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:Atom.Xna.Effects.PostProcess.Glow.PostProcess(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.RenderTarget2D,Atom.Xna.IXnaDrawContext)">
            <summary>
            Applies this PostProcessEffect.
            </summary>
            <param name="sourceTexture">
            The texture to post-process.
            </param>
            <param name="result">
            The RenderTarget to which to render the result of this PostProcessEffect.
            </param>
            <param name="drawContext">
            The context under which the drawing operation occurrs.
            </param>
        </member>
        <member name="M:Atom.Xna.Effects.PostProcess.Glow.ApplyTechnique(Microsoft.Xna.Framework.Graphics.EffectTechnique,Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.RenderTarget2D)">
            <summary>
            Applies the specified EffectTechnique to the specified source texture;
            rendering the result into the specified target RenderTarget2D.
            </summary>
            <param name="technique">
            The technique to apply.
            </param>
            <param name="source">
            The source texture.
            </param>
            <param name="target">
            The RenderTarget to render into.
            </param>
        </member>
        <member name="F:Atom.Xna.Effects.PostProcess.Glow.renderTargetFactory">
            <summary>
            Provides a mechanism for creating new screen-sized RenderTarget2Ds.
            </summary>
        </member>
        <member name="T:Atom.Xna.Effects.PostProcess.AddRgb">
            <summary>
            Implements a <see cref="T:Atom.Xna.Effects.PostProcess.PostProcessEffect"/> that merges the content of a render target
            with another texture.
            </summary>
        </member>
        <member name="P:Atom.Xna.Effects.PostProcess.AddRgb.OtherTexture">
            <summary>
            Gets or sets the other texture added to the source texture.
            </summary>
        </member>
        <member name="M:Atom.Xna.Effects.PostProcess.AddRgb.#ctor(Atom.Xna.Effects.IEffectLoader,Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)">
            <summary>
            Initializes a new instance of the AddRgb class.
            </summary>
            <param name="effectLoader">
            Provides a mechanism that allows loading of effect assets.
            </param>
            <param name="deviceService">
            Provides access to the <see cref="T:Microsoft.Xna.Framework.Graphics.GraphicsDevice"/>.
            </param>
        </member>
        <member name="M:Atom.Xna.Effects.PostProcess.AddRgb.LoadEffect(Atom.Xna.Effects.IEffectLoader)">
            <summary>
            Loads the effect used by this AddRgb.
            </summary>
            <param name="effectLoader">
            Provides a mechanism that allows loading of effect assets.
            </param>
        </member>
        <member name="M:Atom.Xna.Effects.PostProcess.AddRgb.PostProcess(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.RenderTarget2D,Atom.Xna.IXnaDrawContext)">
            <summary>
            Applies this AddRgb PostProcessEffect.
            </summary>
            <param name="sourceTexture">
            The texture to post-process.
            </param>
            <param name="result">
            The RenderTarget to which to render the result of this PostProcessEffect.
            </param>
            <param name="drawContext">
            The context under which the drawing operation occurrs.
            </param>
        </member>
        <member name="M:Atom.Xna.Effects.PostProcess.AddRgb.DisposeManagedResources">
            <summary>
            Disposes the managed resources used by this AddRgb effect.
            </summary>
        </member>
        <member name="M:Atom.Xna.Effects.PostProcess.AddRgb.DisposeUnmanagedResources">
            <summary>
            Disposes the unmanaged resources used by this AddRgb effect.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.PostProcess.AddRgb.effect">
            <summary>
            The effect that excutes the actual combination logic.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.PostProcess.AddRgb.effectPass">
            <summary>
            The cached first pass of the effect.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.PostProcess.AddRgb.parameterSourceTexture">
            <summary>
            The parameter used to change the source texture.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.PostProcess.AddRgb.parameterOtherTexture">
            <summary>
            The paramter used to change the other texture that is combined
            with the source texture.
            </summary>
        </member>
        <member name="T:Atom.Xna.Effects.PostProcess.BrightPass">
            <summary>
            The Bright Pass ... .
            </summary>
        </member>
        <member name="P:Atom.Xna.Effects.PostProcess.BrightPass.LuminanceTexture">
            <summary>
            Gets or sets the texture from the Luminance pass.
            </summary>
        </member>
        <member name="P:Atom.Xna.Effects.PostProcess.BrightPass.Exposure">
            <summary>
            Gets or sets the blending exposure applied when rendering.
            </summary>
        </member>
        <member name="P:Atom.Xna.Effects.PostProcess.BrightPass.Threshold">
            <summary>
            Gets or sets the threshold brightness at which pixels are brightened.
            </summary>
        </member>
        <member name="M:Atom.Xna.Effects.PostProcess.BrightPass.#ctor(Atom.Xna.Effects.IEffectLoader,Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)">
            <summary>
            Initializes a new instance of the BrightPass class.
            </summary>
            <param name="effectLoader">
            Provides a mechanism that allows loading of effect assets.
            </param>
            <param name="deviceService">
            Provides access to the <see cref="T:Microsoft.Xna.Framework.Graphics.GraphicsDevice"/>.
            </param>
        </member>
        <member name="M:Atom.Xna.Effects.PostProcess.BrightPass.LoadEffect(Atom.Xna.Effects.IEffectLoader)">
            <summary>
            Loads the effect used by this RectangularEffect.
            </summary>
            <param name="effectLoader">
            Provides a mechanism that allows loading of effect assets.
            </param>
        </member>
        <member name="M:Atom.Xna.Effects.PostProcess.BrightPass.PostProcess(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.RenderTarget2D,Atom.Xna.IXnaDrawContext)">
            <summary>
            Applies this PostProcessEffect.
            </summary>
            <param name="sourceTexture">
            The texture to post-process.
            </param>
            <param name="result">
            The RenderTarget to which to render the result of this PostProcessEffect.
            </param>
            <param name="drawContext">
            The context under which the drawing operation occurrs.
            </param>
        </member>
        <member name="M:Atom.Xna.Effects.PostProcess.BrightPass.SetSourceTexture(Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            Sets the texture that contains the result of 
            the previous rendering operation.
            </summary>
            <param name="value">
            The texture that contains the previously rendered content.
            </param>
        </member>
        <member name="M:Atom.Xna.Effects.PostProcess.BrightPass.DisposeManagedResources">
            <summary>
            Disposes the managed resources used by this BrightPass effect.
            </summary>
        </member>
        <member name="M:Atom.Xna.Effects.PostProcess.BrightPass.DisposeUnmanagedResources">
            <summary>
            Disposes the unmanaged resources used by this BrightPass effect.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.PostProcess.BrightPass.effect">
            <summary>
            The effect that contain the actual brighten logic.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.PostProcess.BrightPass.effectPass">
            <summary>
            The cached first pass of the effect.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.PostProcess.BrightPass.parameterTargetSize">
            <summary>
            The parameter used to set the size of the target texture.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.PostProcess.BrightPass.parameterSourceSize">
            <summary>
            The parameter used to set the size of the source texture.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.PostProcess.BrightPass.parameterSourceTexture">
            <summary>
            The parameter used to set the source input texture.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.PostProcess.BrightPass.parameterLuminanceTexture">
            <summary>
            The parameter used to set the luminance input texture.
            </summary>
        </member>
        <member name="T:Atom.Xna.Effects.PostProcess.DownSample4x4">
            <summary>
            Implements a <see cref="T:Atom.Xna.Effects.PostProcess.PostProcessEffect"/> that ... .
            </summary>
        </member>
        <member name="M:Atom.Xna.Effects.PostProcess.DownSample4x4.#ctor(Atom.Xna.Effects.IEffectLoader,Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)">
            <summary>
            Initializes a new instance of the DownSample4x4 class.
            </summary>
            <param name="effectLoader">
            Provides a mechanism that allows loading of effect assets.
            </param>
            <param name="deviceService">
            Provides access to the <see cref="T:Microsoft.Xna.Framework.Graphics.GraphicsDevice"/>.
            </param>
        </member>
        <member name="M:Atom.Xna.Effects.PostProcess.DownSample4x4.LoadEffect(Atom.Xna.Effects.IEffectLoader)">
            <summary>
            Loads the effect used by this DownSample4x4.
            </summary>
            <param name="effectLoader">
            Provides a mechanism that allows loading of effect assets.
            </param>
        </member>
        <member name="M:Atom.Xna.Effects.PostProcess.DownSample4x4.PostProcess(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.RenderTarget2D,Atom.Xna.IXnaDrawContext)">
            <summary>
            Applies this DownSample4x4 PostProcessEffect.
            </summary>
            <param name="sourceTexture">
            The texture to post-process.
            </param>
            <param name="result">
            The RenderTarget to which to render the result of this PostProcessEffect.
            </param>
            <param name="drawContext">
            The context under which the drawing operation occurrs.
            </param>
        </member>
        <member name="M:Atom.Xna.Effects.PostProcess.DownSample4x4.SetSourceTexture(Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            Sets the texture that contains the result of 
            the previous rendering operation.
            </summary>
            <param name="value">
            The texture that contains the previously rendered content.
            </param>
        </member>
        <member name="M:Atom.Xna.Effects.PostProcess.DownSample4x4.DisposeManagedResources">
            <summary>
            Disposes the managed resources used by this DownSample4x4 effect.
            </summary>
        </member>
        <member name="M:Atom.Xna.Effects.PostProcess.DownSample4x4.DisposeUnmanagedResources">
            <summary>
            Disposes the unmanaged resources used by this DownSample4x4 effect.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.PostProcess.DownSample4x4.effect">
            <summary>
            The effect that contain the actual down-sampling logic.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.PostProcess.DownSample4x4.effectPass">
            <summary>
            The cached first pass of the effect.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.PostProcess.DownSample4x4.parameterTargetSize">
            <summary>
            The parameter used to set the size of the target texture.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.PostProcess.DownSample4x4.parameterSourceSize">
            <summary>
            The parameter used to set the size of the source texture.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.PostProcess.DownSample4x4.parameterSourceTexture">
            <summary>
            The parameter used to set the source input texture.
            </summary>
        </member>
        <member name="T:Atom.Xna.Effects.PostProcess.GaussianBlur9x9">
            <summary>
            Implements a <see cref="T:Atom.Xna.Effects.PostProcess.PostProcessEffect"/> that ... .
            </summary>
        </member>
        <member name="P:Atom.Xna.Effects.PostProcess.GaussianBlur9x9.Horizontal">
            <summary>
            Gets or sets a value indicating whether this GaussianBlur9x9 is blurring
            horizontally; or vertically.
            </summary>
            <value>
            true if horizontal blurring is enabled;
            otherwise false if vertical blurring is enabled.
            </value>
        </member>
        <member name="P:Atom.Xna.Effects.PostProcess.GaussianBlur9x9.StandardDeviation">
            <summary>
            Gets or sets the Standard Deviation of the Gaussian effect
            applied by this GaussianBlur9x9 effect.
            </summary>
        </member>
        <member name="P:Atom.Xna.Effects.PostProcess.GaussianBlur9x9.Amplitude">
            <summary>
            Gets or sets the amplitude of the Gaussian effect
            applied by this GaussianBlur9x9 effect.
            </summary>
        </member>
        <member name="M:Atom.Xna.Effects.PostProcess.GaussianBlur9x9.#ctor(Atom.Xna.Effects.IEffectLoader,Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)">
            <summary>
            Initializes a new instance of the GaussianBlur9x9 class.
            </summary>
            <param name="effectLoader">
            Provides a mechanism that allows loading of effect assets.
            </param>
            <param name="deviceService">
            Provides access to the <see cref="T:Microsoft.Xna.Framework.Graphics.GraphicsDevice"/>.
            </param>
        </member>
        <member name="M:Atom.Xna.Effects.PostProcess.GaussianBlur9x9.LoadEffect(Atom.Xna.Effects.IEffectLoader)">
            <summary>
            Loads the effect used by this GaussianBlur9x9.
            </summary>
            <param name="effectLoader">
            Provides a mechanism that allows loading of effect assets.
            </param>
        </member>
        <member name="M:Atom.Xna.Effects.PostProcess.GaussianBlur9x9.PostProcess(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.RenderTarget2D,Atom.Xna.IXnaDrawContext)">
            <summary>
            Applies this GaussianBlur9x9 PostProcessEffect.
            </summary>
            <param name="sourceTexture">
            The texture to post-process.
            </param>
            <param name="result">
            The RenderTarget to which to render the result of this PostProcessEffect.
            </param>
            <param name="drawContext">
            The context under which the drawing operation occurrs.
            </param>
        </member>
        <member name="M:Atom.Xna.Effects.PostProcess.GaussianBlur9x9.UpdateWeights(Microsoft.Xna.Framework.Graphics.RenderTarget2D)">
            <summary>
            Updates the weights and offsets for the given RenderTarget2D.
            </summary>
            <param name="result">
            The RenderTarget to which to render the result of this PostProcessEffect.
            </param>
        </member>
        <member name="M:Atom.Xna.Effects.PostProcess.GaussianBlur9x9.DisposeManagedResources">
            <summary>
            Disposes the managed resources used by this GaussianBlur9x9 effect.
            </summary>
        </member>
        <member name="M:Atom.Xna.Effects.PostProcess.GaussianBlur9x9.DisposeUnmanagedResources">
            <summary>
            Disposes the unmanaged resources used by this GaussianBlur9x9 effect.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.PostProcess.GaussianBlur9x9.effect">
            <summary>
            The effect that contain the actual blurring logic.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.PostProcess.GaussianBlur9x9.techniqueH">
            <summary>
            The horizontal blurring technique.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.PostProcess.GaussianBlur9x9.techniqueV">
            <summary>
            The vertical blurring technique.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.PostProcess.GaussianBlur9x9.effectPass">
            <summary>
            The cached first pass of the currently selected technique.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.PostProcess.GaussianBlur9x9.parameterSourceTexture">
            <summary>
            The parameter used to set the soruce texture.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.PostProcess.GaussianBlur9x9.parameterOffsets">
            <summary>
            The parameter used to set the blurring offsets.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.PostProcess.GaussianBlur9x9.parameterWeights">
            <summary>
            The parameter used to set the blurring weights.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.PostProcess.GaussianBlur9x9.standardDeviation">
            <summary>
            The current standard deviation used in the blurring calculations.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.PostProcess.GaussianBlur9x9.amplitude">
            <summary>
            The current blurring amplitude.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.PostProcess.GaussianBlur9x9.horizontal">
            <summary>
            States whether the image is currently blurred horizontally.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.PostProcess.GaussianBlur9x9.weightsAreDirthy">
            <summary>
            States whether the weights are dirty and must be updated.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.PostProcess.GaussianBlur9x9.weights">
            <summary>
            The blurring weights that have been calculated for the current settings.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.PostProcess.GaussianBlur9x9.offsets">
            <summary>
            The blurring offsets that have been calculated.
            </summary>
        </member>
        <member name="T:Atom.Xna.Effects.PostProcess.IPostProcessEffect">
            <summary>
            Represents an effect that is applied to an already
            rendered scene.
            </summary>
        </member>
        <member name="M:Atom.Xna.Effects.PostProcess.IPostProcessEffect.PostProcess(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.RenderTarget2D,Atom.Xna.IXnaDrawContext)">
            <summary>
            Applies this IPostProcessEffect.
            </summary>
            <param name="sourceTexture">
            The texture to post-process.
            </param>
            <param name="result">
            The RenderTarget to which to render the result of this PostProcessEffect.
            </param>
            <param name="drawContext">
            The context under which the drawing operation occurrs.
            </param>
        </member>
        <member name="T:Atom.Xna.Effects.PostProcess.PostProcessEffect">
            <summary>
            Represents the base-class of all post-process effects.
            </summary>
        </member>
        <member name="M:Atom.Xna.Effects.PostProcess.PostProcessEffect.#ctor(Atom.Xna.Effects.IEffectLoader,Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)">
            <summary>
            Initializes a new instance of the PostProcessEffect class.
            </summary>
            <param name="effectLoader">
            Provides a mechanism that allows loading of effect assets.
            </param>
            <param name="deviceService">
            Provides access to the <see cref="T:Microsoft.Xna.Framework.Graphics.GraphicsDevice"/>.
            </param>
        </member>
        <member name="M:Atom.Xna.Effects.PostProcess.PostProcessEffect.PostProcess(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.RenderTarget2D,Atom.Xna.IXnaDrawContext)">
            <summary>
            Applies this PostProcessEffect.
            </summary>
            <param name="sourceTexture">
            The texture to post-process.
            </param>
            <param name="result">
            The RenderTarget to which to render the result of this PostProcessEffect.
            </param>
            <param name="drawContext">
            The context under which the drawing operation occurrs.
            </param>
        </member>
        <member name="M:Atom.Xna.Effects.PostProcess.PostProcessEffect.GetTargetSize(Microsoft.Xna.Framework.Graphics.RenderTarget2D)">
            <summary>
            Gets the size of the given RenderTarget.
            </summary>
            <param name="target">
            The targeted RenderTarget. Allowed to be null.
            </param>
            <returns>
            The size the target of the post processing effect willcover.
            </returns>
        </member>
        <member name="T:Atom.Xna.Effects.RectangularEffect">
            <summary>
            Represents a single-pass effect that covers a rectangular area.
            </summary>
            <remarks>
            This is usually used to create fullscreen effects.
            </remarks>
        </member>
        <member name="P:Atom.Xna.Effects.RectangularEffect.Vertices">
            <summary>
            Gets the screen-space vertices that are used to draw the RectangularEffect.
            </summary>
        </member>
        <member name="P:Atom.Xna.Effects.RectangularEffect.GraphicsDevice">
            <summary>
            Gets the <see cref="P:Atom.Xna.Effects.RectangularEffect.GraphicsDevice"/> required for rendering.
            </summary>
        </member>
        <member name="M:Atom.Xna.Effects.RectangularEffect.#ctor(Atom.Xna.Effects.IEffectLoader,Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)">
            <summary>
            Initializes a new instance of the RectangularEffect class.
            </summary>
            <param name="effectLoader">
            Provides a mechanism that allows loading of effect assets.
            </param>
            <param name="deviceService">
            Provides access to the <see cref="P:Atom.Xna.Effects.RectangularEffect.GraphicsDevice"/>.
            </param>
        </member>
        <member name="M:Atom.Xna.Effects.RectangularEffect.LoadContent">
            <summary>
            Loads the content used by this RectangularEffect.
            </summary>
        </member>
        <member name="M:Atom.Xna.Effects.RectangularEffect.LoadEffect(Atom.Xna.Effects.IEffectLoader)">
            <summary>
            Loads the effect used by this RectangularEffect.
            </summary>
            <param name="effectLoader">
            Provides a mechanism that allows loading of effect assets.
            </param>
        </member>
        <member name="M:Atom.Xna.Effects.RectangularEffect.LoadCustomContent">
            <summary>
            Provides a hook that can be overwritten by subclasses to load additional content.
            </summary>
        </member>
        <member name="M:Atom.Xna.Effects.RectangularEffect.Draw(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectPass)">
            <summary>
            Draws this RectangularEffect using the given Effect and a single EffectPass.
            </summary>
            <param name="effect">
            The effect to draw.
            </param>
            <param name="effectPass">
            The effect pass to use while drawing.
            </param>
        </member>
        <member name="F:Atom.Xna.Effects.RectangularEffect.graphicsDevice">
            <summary>
            The xna GraphicsDevice.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.RectangularEffect.effectLoader">
            <summary>
            Provides a mechanism that allows loading of effect assets.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.RectangularEffect.deviceService">
            <summary>
            Provides access to the <see cref="P:Atom.Xna.Effects.RectangularEffect.GraphicsDevice"/>.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.RectangularEffect.fullScreenVertices">
            <summary>
            The screen-space vertices that are used to draw the Noise.
            </summary>
        </member>
        <member name="T:Atom.Xna.Effects.RenderTarget2DExtensions">
            <summary>
            Defines extension methods that extend the RenderTarget2D class
            with methods related to effects.
            </summary>
        </member>
        <member name="M:Atom.Xna.Effects.RenderTarget2DExtensions.ApplyEffectSlow(Microsoft.Xna.Framework.Graphics.RenderTarget2D,Atom.Xna.Effects.PostProcess.IPostProcessEffect,Atom.Xna.IXnaDrawContext)">
            <summary>
            Applies the specified <see cref="T:Atom.Xna.Effects.PostProcess.IPostProcessEffect"/> to this <see cref="T:Microsoft.Xna.Framework.Graphics.RenderTarget2D"/>.
            </summary>
            <param name="target">
            The target of the effect.
            </param>
            <param name="effect">
            The effect to apply.
            </param>
            <param name="drawContext">
            The context under which the drawing operation occurrs.
            </param>
        </member>
        <member name="T:Atom.Xna.Fonts.Font">
            <summary>
            Implements a mechanism for drawing text using xna <see cref="P:Atom.Xna.Fonts.Font.SpriteFont"/>s.
            </summary>
        </member>
        <member name="P:Atom.Xna.Fonts.Font.Name">
            <summary>
            Gets the name of this Font.
            </summary>
        </member>
        <member name="P:Atom.Xna.Fonts.Font.LineSpacing">
            <summary>
            Gets the height of one line of this Font (in pixels).
            </summary>
        </member>
        <member name="P:Atom.Xna.Fonts.Font.SpriteFont">
            <summary>
            Gets or sets the underlying XNA SpriteFont object.
            </summary>
        </member>
        <member name="M:Atom.Xna.Fonts.Font.#ctor(System.String,Microsoft.Xna.Framework.Graphics.SpriteFont)">
            <summary>
            Initializes a new instance of the Font class.
            </summary>
            <param name="fontName">
            The name of the new Font.
            </param>
            <param name="spriteFont">
            The xna SpriteFont the new Font should wrap around.
            </param>
        </member>
        <member name="M:Atom.Xna.Fonts.Font.MeasureString(System.String)">
            <summary>
            Gets the size the specified <paramref name="text"/> takes up (in pixels).
            </summary>
            <param name="text">
            The string to measure.
            </param>
            <returns>
            The measured size in pixels.
            </returns>
        </member>
        <member name="M:Atom.Xna.Fonts.Font.MeasureStringWidth(System.String)">
            <summary>
            Gets the width the specified <paramref name="text"/> takes up (in pixels).
            </summary>
            <param name="text">
            The string to measure.
            </param>
            <returns>
            The measures width in pixels.
            </returns>
        </member>
        <member name="M:Atom.Xna.Fonts.Font.Draw(System.String,Atom.Math.Vector2,Microsoft.Xna.Framework.Color,Atom.Xna.ISpriteDrawContext)">
            <summary>
            Draws the specified <paramref name="text"/> string using the specified parameters.
            </summary>
            <param name="text">
            The string to draw.
            </param>
            <param name="position">
            The location, in screen coordinates, where the text should be drawn.
            </param>
            <param name="color">
            The desired color of the text.
            </param>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Atom.Xna.Fonts.Font.Draw(System.String,Atom.Math.Vector2,Microsoft.Xna.Framework.Color,System.Single,Atom.Xna.ISpriteDrawContext)">
            <summary>
            Draws the specified <paramref name="text"/> string using the specified parameters.
            </summary>
            <param name="text">
            The string to draw.
            </param>
            <param name="position">
            The location, in screen coordinates, where the text should be drawn.
            </param>
            <param name="color">
            The desired color of the text.
            </param>
            <param name="layerDepth">
            The sorting depth of the sprite, between 0 (front) and 1 (back).
            </param>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Atom.Xna.Fonts.Font.Draw(System.String,Atom.Math.Vector2,Microsoft.Xna.Framework.Color,System.Single,Atom.Math.Vector2,System.Single,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single,Atom.Xna.ISpriteDrawContext)">
            <summary>
            Draws the specified <paramref name="text"/> string using the specified parameters.
            </summary>
            <param name="text">
            The text to draw.
            </param>
            <param name="position">
            The location, in screen coordinates, where the text will be drawn.
            </param>
            <param name="color">
            The desired color of the text.
            </param>
            <param name="rotation">
            The angle, in radians, to rotate the text around the origin.
            </param>
            <param name="origin">
            The origin of the string. Specify (0,0) for the upper-left corner.
            </param>
            <param name="scale">
            Uniform multiple by which to scale the sprite width and height.
            </param>
            <param name="effects">
            The effects to apply prior to rendering.
            </param>
            <param name="layerDepth">
            The sorting depth of the sprite, between 0 (front) and 1 (back).
            </param>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Atom.Xna.Fonts.Font.Draw(System.String,Atom.Math.Vector2,Atom.Xna.Fonts.TextAlign,Microsoft.Xna.Framework.Color,Atom.Xna.ISpriteDrawContext)">
            <summary>
            Draws the specified <paramref name="text"/> string using the specified parameters.
            </summary>
            <param name="text">
            The text to draw.
            </param>
            <param name="position">
            The location, in screen coordinates, where the text will be drawn.
            </param>
            <param name="align">
            The text alignment mode to use.
            </param>
            <param name="color">
            The desired color of the text.
            </param>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Atom.Xna.Fonts.Font.Draw(System.String,Atom.Math.Vector2,Atom.Xna.Fonts.TextAlign,Microsoft.Xna.Framework.Color,System.Single,Atom.Xna.ISpriteDrawContext)">
            <summary>
            Draws the specified <paramref name="text"/> string using the specified parameters.
            </summary>
            <param name="text">
            The text to draw.
            </param>
            <param name="position">
            The location, in screen coordinates, where the text will be drawn.
            </param>
            <param name="align">
            The text alignment mode to use.
            </param>
            <param name="color">
            The desired color of the text.
            </param>
            <param name="layerDepth">
            The sorting depth of the sprite, between 0 (front) and 1 (back).
            </param>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Atom.Xna.Fonts.Font.Draw(System.String,Atom.Math.Vector2,Atom.Xna.Fonts.TextAlign,Microsoft.Xna.Framework.Color,System.Single,Atom.Math.Vector2,System.Single,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single,Atom.Xna.ISpriteDrawContext)">
            <summary>
            Draws the given <paramref name="text"/> string using the specified parameters.
            </summary>
            <param name="text">
            The text to draw.
            </param>
            <param name="position">
            The location, in screen coordinates, where the text will be drawn.
            </param>
            <param name="align"
            >The text alignment mode to use.
            </param>
            <param name="color">
            The desired color of the text.
            </param>
            <param name="rotation">
            The angle, in radians, to rotate the text around the origin.
            </param>
            <param name="origin">
            The origin of the string. Specify (0,0) for the upper-left corner.
            </param>
            <param name="scale">
            Uniform multiple by which to scale the sprite width and height.
            </param>
            <param name="effects">
            The effects to apply prior to rendering.
            </param>
            <param name="layerDepth">
            The sorting depth of the sprite, between 0 (front) and 1 (back).
            </param>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Atom.Xna.Fonts.Font.DrawBlock(System.String[],Atom.Math.Vector2,Atom.Xna.Fonts.TextAlign,Microsoft.Xna.Framework.Color,System.Single,Atom.Math.Vector2,System.Single,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single,Atom.Xna.ISpriteDrawContext)">
            <summary>
            Draws the given block of text using the specified parameters.
            </summary>
            <param name="textBlock">
            The block of text to draw.
            </param>
            <param name="position">
            The location, in screen coordinates, where the text will be drawn.
            </param>
            <param name="align"
            >The text alignment mode to use.
            </param>
            <param name="color">
            The desired color of the text.
            </param>
            <param name="rotation">
            The angle, in radians, to rotate the text around the origin.
            </param>
            <param name="origin">
            The origin of the string. Specify (0,0) for the upper-left corner.
            </param>
            <param name="scale">
            Uniform multiple by which to scale the sprite width and height.
            </param>
            <param name="effects">
            The effects to apply prior to rendering.
            </param>
            <param name="layerDepth">
            The sorting depth of the sprite, between 0 (front) and 1 (back).
            </param>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="F:Atom.Xna.Fonts.Font.fontName">
            <summary>
            The name of this Font.
            </summary>
        </member>
        <member name="F:Atom.Xna.Fonts.Font.spriteFont">
            <summary>
            The xna SpriteFont this Font wraps around.
            </summary>
        </member>
        <member name="T:Atom.Xna.Fonts.FontLoader">
            <summary>
            Implements an <see cref="T:Atom.Xna.Fonts.IFontLoader"/> that loads <see cref="T:Atom.Xna.Fonts.Font"/>s
            that internally use xna <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteFont"/>s which are loaded
            using the xna Content Pipeline.
            </summary>
        </member>
        <member name="P:Atom.Xna.Fonts.FontLoader.RootDirectory">
            <summary>
            Gets or sets the root directory that is automatically
            prefixed to assets loaded by this IAssetLoader.
            </summary>
        </member>
        <member name="M:Atom.Xna.Fonts.FontLoader.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the FontLoader class, manually creating a new ContentManager
            with a default RootDirectory of "Content/Fonts/".
            </summary>
            <param name="serviceProvider">
            The IServiceProvider the ContentManager should use to locate services.
            </param>
        </member>
        <member name="M:Atom.Xna.Fonts.FontLoader.#ctor(Microsoft.Xna.Framework.Content.ContentManager)">
            <summary>
            Initializes a new instance of the FontLoader class.
            </summary>
            <param name="content">
            The xna ContentManager that should be used to load the internally used SpriteFonts.
            </param>
        </member>
        <member name="M:Atom.Xna.Fonts.FontLoader.ActuallyLoad(System.String,System.String)">
            <summary>
            Implements the actual asset loading logic used by this FontLoader.
            </summary>
            <param name="assetName">
            The name that uniquely identifies the asset to load.
            </param>
            <param name="filePath">
            The path of the file thatis assumed to contain the asset to load.
            </param>
            <returns>
            The loaded asset.
            </returns>
        </member>
        <member name="M:Atom.Xna.Fonts.FontLoader.DisposeUnmanagedResources">
            <summary>
            Disposes the unmanaged resources used by this FontLoader.
            </summary>
        </member>
        <member name="M:Atom.Xna.Fonts.FontLoader.UnloadAll">
            <summary>
            Unloads all assets that have been loaden with this IAssetLoader.
            </summary>
        </member>
        <member name="M:Atom.Xna.Fonts.FontLoader.Reload">
            <summary>
            Reloads the underlying data of all cached <see cref="T:Atom.Xna.Fonts.IFont"/> assets.
            </summary>
        </member>
        <member name="F:Atom.Xna.Fonts.FontLoader.content">
            <summary>
            The xna ContentManager that is used to load xna SpriteFonts.
            </summary>
        </member>
        <member name="T:Atom.Xna.Fonts.IFont">
            <summary>
            Provides a mechanism for drawing text.
            </summary>
        </member>
        <member name="P:Atom.Xna.Fonts.IFont.LineSpacing">
            <summary>
            Gets the height of one line of this IFont (in pixels).
            </summary>
        </member>
        <member name="M:Atom.Xna.Fonts.IFont.MeasureString(System.String)">
            <summary>
            Gets the size the specified <paramref name="text"/> takes up (in pixels).
            </summary>
            <param name="text">
            The string to measure.
            </param>
            <returns>
            The measured width in pixels.
            </returns>
        </member>
        <member name="M:Atom.Xna.Fonts.IFont.MeasureStringWidth(System.String)">
            <summary>
            Gets the width the specified <paramref name="text"/> takes up (in pixels).
            </summary>
            <param name="text">
            The string to measure.
            </param>
            <returns>
            The measured width in pixels.
            </returns>
        </member>
        <member name="M:Atom.Xna.Fonts.IFont.Draw(System.String,Atom.Math.Vector2,Microsoft.Xna.Framework.Color,Atom.Xna.ISpriteDrawContext)">
            <summary>
            Draws the specified <paramref name="text"/> string using the specified parameters.
            </summary>
            <param name="text">
            The string to draw.
            </param>
            <param name="position">
            The location, in screen coordinates, where the text should be drawn.
            </param>
            <param name="color">
            The desired color of the text.
            </param>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Atom.Xna.Fonts.IFont.Draw(System.String,Atom.Math.Vector2,Microsoft.Xna.Framework.Color,System.Single,Atom.Xna.ISpriteDrawContext)">
            <summary>
            Draws the specified <paramref name="text"/> string using the specified parameters.
            </summary>
            <param name="text">
            The string to draw.
            </param>
            <param name="position">
            The location, in screen coordinates, where the text should be drawn.
            </param>
            <param name="color">
            The desired color of the text.
            </param>
            <param name="layerDepth">
            The sorting depth of the sprite, between 0 (front) and 1 (back).
            </param>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Atom.Xna.Fonts.IFont.Draw(System.String,Atom.Math.Vector2,Microsoft.Xna.Framework.Color,System.Single,Atom.Math.Vector2,System.Single,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single,Atom.Xna.ISpriteDrawContext)">
            <summary>
            Draws the specified <paramref name="text"/> string using the specified parameters.
            </summary>
            <param name="text">
            The text to draw.
            </param>
            <param name="position">
            The location, in screen coordinates, where the text will be drawn.
            </param>
            <param name="color">
            The desired color of the text.
            </param>
            <param name="rotation">
            The angle, in radians, to rotate the text around the origin.
            </param>
            <param name="origin">
            The origin of the string. Specify (0,0) for the upper-left corner.
            </param>
            <param name="scale">
            Uniform multiple by which to scale the sprite width and height.
            </param>
            <param name="effects">
            The effects to apply prior to rendering.
            </param>
            <param name="layerDepth">
            The sorting depth of the sprite, between 0 (front) and 1 (back).
            </param>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Atom.Xna.Fonts.IFont.Draw(System.String,Atom.Math.Vector2,Atom.Xna.Fonts.TextAlign,Microsoft.Xna.Framework.Color,Atom.Xna.ISpriteDrawContext)">
            <summary>
            Draws the specified <paramref name="text"/> string using the specified parameters.
            </summary>
            <param name="text">
            The text to draw.
            </param>
            <param name="position">
            The location, in screen coordinates, where the text will be drawn.
            </param>
            <param name="align">
            The text alignment mode to use.
            </param>
            <param name="color">
            The desired color of the text.
            </param>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Atom.Xna.Fonts.IFont.Draw(System.String,Atom.Math.Vector2,Atom.Xna.Fonts.TextAlign,Microsoft.Xna.Framework.Color,System.Single,Atom.Xna.ISpriteDrawContext)">
            <summary>
            Draws the specified <paramref name="text"/> string using the specified parameters.
            </summary>
            <param name="text">
            The text to draw.
            </param>
            <param name="position">
            The location, in screen coordinates, where the text will be drawn.
            </param>
            <param name="align">
            The text alignment mode to use.
            </param>
            <param name="color">
            The desired color of the text.
            </param>
            <param name="layerDepth">
            The sorting depth of the sprite, between 0 (front) and 1 (back).
            </param>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Atom.Xna.Fonts.IFont.Draw(System.String,Atom.Math.Vector2,Atom.Xna.Fonts.TextAlign,Microsoft.Xna.Framework.Color,System.Single,Atom.Math.Vector2,System.Single,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single,Atom.Xna.ISpriteDrawContext)">
            <summary>
            Draws the specified <paramref name="text"/> string using the specified parameters.
            </summary>
            <param name="text">
            The text to draw.
            </param>
            <param name="position">
            The location, in screen coordinates, where the text will be drawn.
            </param>
            <param name="align">
            The text alignment mode to use.
            </param>
            <param name="color">
            The desired color of the text.
            </param>
            <param name="rotation">
            The angle, in radians, to rotate the text around the origin.
            </param>
            <param name="origin">
            The origin of the string. Specify (0,0) for the upper-left corner.
            </param>
            <param name="scale">
            Uniform multiple by which to scale the sprite width and height.
            </param>
            <param name="effects">
            The effects to apply prior to rendering.
            </param>
            <param name="layerDepth">
            The sorting depth of the sprite, between 0 (front) and 1 (back).
            </param>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Atom.Xna.Fonts.IFont.DrawBlock(System.String[],Atom.Math.Vector2,Atom.Xna.Fonts.TextAlign,Microsoft.Xna.Framework.Color,System.Single,Atom.Math.Vector2,System.Single,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single,Atom.Xna.ISpriteDrawContext)">
            <summary>
            Draws the given block of text using the specified parameters.
            </summary>
            <param name="textBlock">
            The block of text to draw.
            </param>
            <param name="position">
            The location, in screen coordinates, where the text will be drawn.
            </param>
            <param name="align">
            The text alignment mode to use.
            </param>
            <param name="color">
            The desired color of the text.
            </param>
            <param name="rotation">
            The angle, in radians, to rotate the text around the origin.
            </param>
            <param name="origin">
            The origin of the string. Specify (0,0) for the upper-left corner.
            </param>
            <param name="scale">
            Uniform multiple by which to scale the sprite width and height.
            </param>
            <param name="effects">
            The effects to apply prior to rendering.
            </param>
            <param name="layerDepth">
            The sorting depth of the sprite, between 0 (front) and 1 (back).
            </param>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="T:Atom.Xna.Fonts.IFontLoader">
            <summary>
            Provides a mechanism for loading <see cref="T:Atom.Xna.Fonts.IFont"/> assets.
            </summary>
        </member>
        <member name="M:Atom.Xna.Fonts.IFontLoader.Reload">
            <summary>
            Reloads the underlying data of all cached <see cref="T:Atom.Xna.Fonts.IFont"/> assets.
            </summary>
        </member>
        <member name="T:Atom.Xna.Fonts.TextAlign">
            <summary>
            Enumerates the different text aligment modes.
            </summary>
        </member>
        <member name="F:Atom.Xna.Fonts.TextAlign.Left">
            <summary>
            The text is aligned to the left side.
            This is the default alignment mode.
            </summary>
        </member>
        <member name="F:Atom.Xna.Fonts.TextAlign.Center">
            <summary>
            The text is aligned to the center.
            </summary>
        </member>
        <member name="F:Atom.Xna.Fonts.TextAlign.Right">
            <summary>
            The text is aligned to the right side.
            </summary>
        </member>
        <member name="T:Atom.Xna.SpriteFontExtensions">
            <summary>
            Contains extension method for the <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteFont"/> class.
            </summary>
        </member>
        <member name="M:Atom.Xna.SpriteFontExtensions.MeasureStringWidth(Microsoft.Xna.Framework.Graphics.SpriteFont,System.String)">
            <summary>
            Returns the width of the given <see cref="T:System.String"/>.
            </summary>
            <param name="spriteFont">
            The related sprite font.
            </param>
            <param name="text">
            The string to measure.
            </param>
            <returns>
            The width of the measured string.
            </returns>
        </member>
        <member name="T:Atom.Xna.FramesPerSecond">
            <summary>
            Used to calcualte the frames per second of a XNA game.
            </summary>
        </member>
        <member name="P:Atom.Xna.FramesPerSecond.Value">
            <summary>
            Gets the current frames per seconds.
            </summary>
        </member>
        <member name="M:Atom.Xna.FramesPerSecond.Update(Atom.IUpdateContext)">
            <summary>
            Updates this FramesPerSecond calculation. Must be called once per frame.
            </summary>
            <param name="updateContext">
            The current update context.
            </param>
        </member>
        <member name="T:Atom.Xna.FullscreenRenderTarget2DFactory">
            <summary>
            Implements an <see cref="T:Atom.Xna.IRenderTarget2DFactory"/> that creates RenderTarget2D instances
            with a specific size and SurfaceFormat.
            </summary>
        </member>
        <member name="P:Atom.Xna.FullscreenRenderTarget2DFactory.Format">
            <summary>
            Gets or sets the SurfaceFormat of the RenderTarget2Ds created by this RenderTarget2DFactory.
            </summary>
        </member>
        <member name="M:Atom.Xna.FullscreenRenderTarget2DFactory.#ctor(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)">
            <summary>
            Initializes a new instance of the FullscreenRenderTarget2DFactory class.
            </summary>
            <param name="graphicsDeviceService">
            Provides access to the xna GraphiceDevice that is required by the new RenderTarget2DFactory
            to create RenderTarget2D instances.
            </param>
        </member>
        <member name="M:Atom.Xna.FullscreenRenderTarget2DFactory.Create">
            <summary>
            Creates a new RenderTarget2D instance.
            </summary>
            <returns>
            A new RenderTarget2D instance.
            </returns>
        </member>
        <member name="M:Atom.Xna.FullscreenRenderTarget2DFactory.Create(Atom.Math.Point2)">
            <summary>
            Creates a new RenderTarget2D instance.
            </summary>
            <param name="sizeDivider">
            The divider that is applied on the size of the render target.
            </param>
            <returns>
            A new RenderTarget2D instance.
            </returns>
        </member>
        <member name="F:Atom.Xna.FullscreenRenderTarget2DFactory.format">
            <summary>
            The SurfaceFormat of the RenderTarget2Ds created by this RenderTarget2DFactory.
            </summary>
        </member>
        <member name="F:Atom.Xna.FullscreenRenderTarget2DFactory.graphicsDeviceService">
            <summary>
            Provides access to the xna GraphiceDevice that is required by this RenderTarget2DFactory
            to create RenderTarget2D instances.
            </summary>
        </member>
        <member name="T:Atom.Xna.GameServiceContainerExtensions">
            <summary>
            Defines extension methods for the <see cref="T:Microsoft.Xna.Framework.GameServiceContainer"/> class.
            </summary>
        </member>
        <member name="M:Atom.Xna.GameServiceContainerExtensions.AddService``1(Microsoft.Xna.Framework.GameServiceContainer,``0)">
            <summary>
            Adds a service to the GameServiceContainer.
            </summary>
            <typeparam name="TService">
            The type of service to add.
            </typeparam>
            <param name="container">
            The container to which the service should be added.
            </param>
            <param name="service">
            The service provider to add.
            </param>
        </member>
        <member name="T:Atom.Xna.GraphicsDeviceExtensions">
            <summary>
            Defines extension methods for the GraphicsDevice class.
            </summary>
        </member>
        <member name="M:Atom.Xna.GraphicsDeviceExtensions.GetRenderTarget2D(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Attempts to get the first RenderTarget2D.
            </summary>
            <param name="device">
            The device to query.
            </param>
            <returns>
            The requested render target or null.
            </returns>
        </member>
        <member name="T:Atom.Xna.IContentLoadable">
            <summary>
            Provides a mechanism for loading required content and assets.
            </summary>
        </member>
        <member name="M:Atom.Xna.IContentLoadable.LoadContent">
            <summary>
            Loads the required content and assets.
            </summary>
        </member>
        <member name="T:Atom.Xna.IContentManagerProvider">
            <summary>
            Provides a mechanism that allows receiving of a <see cref="T:Microsoft.Xna.Framework.Content.ContentManager"/>.
            </summary>
        </member>
        <member name="P:Atom.Xna.IContentManagerProvider.Content">
            <summary>
            Gets the <see cref="T:Microsoft.Xna.Framework.Content.ContentManager"/> this IContentManagerProvider provides.
            </summary>
        </member>
        <member name="T:Atom.Xna.IRenderTarget2DFactory">
            <summary>
            Provides a mechanism that creates new instances of
            the RenderTarget2D class.
            </summary>
        </member>
        <member name="M:Atom.Xna.IRenderTarget2DFactory.Create">
            <summary>
            Creates a new RenderTarget2D instance.
            </summary>
            <returns>
            A new RenderTarget2D instance.
            </returns>
        </member>
        <member name="M:Atom.Xna.IRenderTarget2DFactory.Create(Atom.Math.Point2)">
            <summary>
            Creates a new RenderTarget2D instance.
            </summary>
            <param name="sizeDivider">
            The divider that is applied on the size of the render target.
            </param>
            <returns>
            A new RenderTarget2D instance.
            </returns>
        </member>
        <member name="T:Atom.Xna.IXnaContext">
            <summary>
            Represents the common base interface that both the <see cref="T:Atom.Xna.IXnaDrawContext"/> and
            the <see cref="T:Atom.Xna.IXnaUpdateContext"/> share.
            </summary>
        </member>
        <member name="P:Atom.Xna.IXnaContext.GameTime">
            <summary>
            Gets or sets the current <see cref="T:Microsoft.Xna.Framework.GameTime"/>.
            </summary>
            <remarks>
            Must be manually updated each frame.
            </remarks>
            <value>
            Stores the timing information about the last frame.
            </value>
        </member>
        <member name="T:Atom.Xna.IXnaDrawContext">
            <summary>
            Represents an <see cref="T:Atom.IDrawContext"/> that is supposed to be used in
            a Xna application.
            </summary>
        </member>
        <member name="P:Atom.Xna.IXnaDrawContext.Device">
            <summary>
            Gets the Xna GraphicsDevice object.
            </summary>
        </member>
        <member name="T:Atom.Xna.IXnaUpdateContext">
            <summary>
            Identifies an object that represents an update context used in an XNA application.
            </summary>
            <remarks>
            An update context is passed to the Update method of various objects.
            </remarks>
        </member>
        <member name="T:Atom.Xna.LightMap">
            <summary>
            A <see cref="T:Atom.Xna.LightMap"/> is an independent 'layer'
            that is used to render Lights to.
            </summary>
            <remarks>
            <para>
            Rendering to the <see cref="T:Atom.Xna.LightMap"/> is done in
            LightMap Begin and LightMap End block. (RenderTargets may not be changed in the block)
            The <see cref="T:Atom.Xna.LightMap"/> combines itself with the scene by calling Draw.
            </para><para>
            Also, RenderTargetUsage of the BackBuffer should be set to PreserveContent.
            using the PreparingDeviceSettings event.
            e.GraphicsDeviceInformation.PresentationParameters.RenderTargetUsage = RenderTargetUsage.PreserveContents;
            </para>
            </remarks>
        </member>
        <member name="P:Atom.Xna.LightMap.AmbientColor">
            <summary>
            Gets or sets the ambient color.
            </summary>
        </member>
        <member name="P:Atom.Xna.LightMap.LightTarget">
            <summary>
            Gets the RenderTarget2D to which lights are drawn to.
            </summary>
        </member>
        <member name="P:Atom.Xna.LightMap.GraphicsDevice">
            <summary>
            Gets the xna GraphicsDevice that is required for drawing.
            </summary>
        </member>
        <member name="M:Atom.Xna.LightMap.#ctor(Atom.Xna.IRenderTarget2DFactory,Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Xna.LightMap"/> class.
            </summary>
            <param name="renderTargetFactory">
            The IRenderTarget2DFactory that is responsible for creating the RenderTarget2D used
            by the new LightMap.
            </param>
            <param name="graphicsDeviceService">
            Provides access to the xna GraphicsDevice that is required for rendering the new LightMap.
            </param>
        </member>
        <member name="M:Atom.Xna.LightMap.LoadContent">
            <summary>
            Overriden to load required graphics content.
            </summary>
        </member>
        <member name="M:Atom.Xna.LightMap.CreateLightTarget">
            <summary>
            Creates the RenderTarget the LightMap is drawing to.
            </summary>
        </member>
        <member name="M:Atom.Xna.LightMap.CreateSpriteBatch">
            <summary>
            Creates the SpriteBatch used to draw the texture.
            </summary>
        </member>
        <member name="M:Atom.Xna.LightMap.Begin">
            <summary>
            After this call all drawn sprites are rendered to the <see cref="T:Atom.Xna.LightMap"/>;
            instead of the previously set RenderTarget.
            </summary>
        </member>
        <member name="M:Atom.Xna.LightMap.Begin(Microsoft.Xna.Framework.Graphics.ClearOptions,System.Single,System.Int32)">
            <summary>
            After this call all drawn sprites are rendered to this <see cref="T:Atom.Xna.LightMap"/>;
            instead of the previously set RenderTarget.
            </summary>
            <param name="clearOptions">
            Flags indicating which surfaces to clear.
            </param>
            <param name="depth">
            New depth value that this method stores in the depth buffer. This parameter
            can be in the range of 0.0 through 1.0 (for z-based or w-based depth buffers).
            A value of 0.0 represents the nearest distance to the viewer; a value of
            1.0 represents the farthest distance.
            </param>
            <param name="stencil">
            Integer value to store in each stencil-buffer entry. This parameter can be
            in the range of 0 through 2n−1, where n is the bit depth of the stencil buffer.
            </param>
        </member>
        <member name="M:Atom.Xna.LightMap.End">
            <summary>
            Ends the drawing of light sprites to this <see cref="T:Atom.Xna.LightMap"/>.
            </summary>
        </member>
        <member name="M:Atom.Xna.LightMap.Draw">
            <summary>
            Draws this LightMap.
            </summary>
        </member>
        <member name="M:Atom.Xna.LightMap.DisposeUnmanagedResources">
            <summary>
            Disposes the unmanaged resources used by this LightMap.
            </summary>
        </member>
        <member name="M:Atom.Xna.LightMap.DisposeManagedResources">
            <summary>
            Disposes the managed resources used by this LightMap.
            </summary>
        </member>
        <member name="F:Atom.Xna.LightMap.blendState">
            <summary>
            The blending state that is used when blending together
            the light map and the normal unlit scene.
            </summary>
        </member>
        <member name="F:Atom.Xna.LightMap.graphicsDevice">
            <summary>
            The xna GraphicsDevice that is required for rendering.
            </summary>
        </member>
        <member name="F:Atom.Xna.LightMap.ambientColor">
            <summary>
            The ambient color.
            </summary>
        </member>
        <member name="F:Atom.Xna.LightMap.lightTarget">
            <summary>
            The <see cref="T:Microsoft.Xna.Framework.Graphics.RenderTarget2D"/> which contains the Light scene.
            </summary>
        </member>
        <member name="F:Atom.Xna.LightMap.oldTarget">
            <summary>
            The <see cref="T:Microsoft.Xna.Framework.Graphics.RenderTarget2D"/> which was set before drawing to the LightMap has started.
            </summary>
        </member>
        <member name="F:Atom.Xna.LightMap.batch">
            <summary>
            The batch we use for rendering.
            </summary>
        </member>
        <member name="F:Atom.Xna.LightMap.renderTargetFactory">
            <summary>
            The IRenderTarget2DFactory that is responsible for creating the RenderTarget2D used
            by this LightMap.
            </summary>
        </member>
        <member name="F:Atom.Xna.LightMap.graphicsDeviceService">
            <summary>
            Provides access to the xna GraphicsDevice that is required for rendering.
            </summary>
        </member>
        <member name="T:Atom.Xna.ToAtomMathExtensions">
            <summary>
            Contains extension methods that convert Xna math objects into their Atom equivalents.
            </summary>
        </member>
        <member name="M:Atom.Xna.ToAtomMathExtensions.ToAtom(Microsoft.Xna.Framework.Matrix)">
            <summary>
            Converts the <see cref="T:Microsoft.Xna.Framework.Matrix"/> into a <see cref="T:Atom.Math.Matrix4"/>.
            </summary>
            <param name="matrix">The matrix to convert.</param>
            <returns>
            The converted value.
            </returns>
        </member>
        <member name="M:Atom.Xna.ToAtomMathExtensions.ToAtom(Microsoft.Xna.Framework.Point)">
            <summary>
            Converts the <see cref="T:Microsoft.Xna.Framework.Point"/> into a <see cref="T:Atom.Math.Point2"/>.
            </summary>
            <param name="point">The point to convert.</param>
            <returns>
            The converted value.
            </returns>
        </member>
        <member name="M:Atom.Xna.ToAtomMathExtensions.ToAtom(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Converts the <see cref="T:Microsoft.Xna.Framework.Vector2"/> into a <see cref="T:Atom.Math.Vector2"/>.
            </summary>
            <param name="vector">The vector to convert.</param>
            <returns>
            The converted value.
            </returns>
        </member>
        <member name="M:Atom.Xna.ToAtomMathExtensions.ToAtom(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Converts the <see cref="T:Microsoft.Xna.Framework.Vector3"/> into a <see cref="T:Atom.Math.Vector3"/>.
            </summary>
            <param name="vector">The vector to convert.</param>
            <returns>
            The converted value.
            </returns>
        </member>
        <member name="M:Atom.Xna.ToAtomMathExtensions.ToAtom(Microsoft.Xna.Framework.Vector4)">
            <summary>
            Converts the <see cref="T:Microsoft.Xna.Framework.Vector4"/> into a <see cref="T:Atom.Math.Vector4"/>.
            </summary>
            <param name="vector">The vector to convert.</param>
            <returns>
            The converted value.
            </returns>
        </member>
        <member name="M:Atom.Xna.ToAtomMathExtensions.ToAtom(Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Converts the <see cref="T:Microsoft.Xna.Framework.Rectangle"/> into a <see cref="T:Atom.Math.Rectangle"/>.
            </summary>
            <param name="rectangle">The vector to convert.</param>
            <returns>
            The converted value.
            </returns>
        </member>
        <member name="T:Atom.Xna.ToXnaMathExtensions">
            <summary>
            Contains extension methods that convert At0k math objects into their Xna equivalents.
            </summary>
        </member>
        <member name="M:Atom.Xna.ToXnaMathExtensions.ToXna(Atom.Math.Matrix4)">
            <summary>
            Converts the <see cref="T:Atom.Math.Matrix4"/> into a <see cref="T:Microsoft.Xna.Framework.Matrix"/>.
            </summary>
            <param name="matrix">The matrix to convert.</param>
            <returns>
            The converted value.
            </returns>
        </member>
        <member name="M:Atom.Xna.ToXnaMathExtensions.ToXna(Atom.Math.Rectangle)">
            <summary>
            Converts the <see cref="T:Atom.Math.Rectangle"/> into a <see cref="T:Microsoft.Xna.Framework.Rectangle"/>.
            </summary>
            <param name="rectangle">The rectangle to convert.</param>
            <returns>
            The converted value.
            </returns>
        </member>
        <member name="M:Atom.Xna.ToXnaMathExtensions.ToXna(Atom.Math.RectangleF)">
            <summary>
            Converts the <see cref="T:Atom.Math.RectangleF"/> into a <see cref="T:Microsoft.Xna.Framework.Rectangle"/>.
            </summary>
            <param name="rectangle">The rectangle to convert.</param>
            <returns>
            The converted value.
            </returns>
        </member>
        <member name="M:Atom.Xna.ToXnaMathExtensions.ToXna(Atom.Math.Point2)">
            <summary>
            Converts the <see cref="T:Atom.Math.Point2"/> into a <see cref="T:Microsoft.Xna.Framework.Point"/>.
            </summary>
            <param name="point">The point to convert.</param>
            <returns>
            The converted value.
            </returns>
        </member>
        <member name="M:Atom.Xna.ToXnaMathExtensions.ToXna(Atom.Math.Vector2)">
            <summary>
            Converts the <see cref="T:Atom.Math.Vector2"/> into a <see cref="T:Microsoft.Xna.Framework.Vector2"/>.
            </summary>
            <param name="vector">The vector to convert.</param>
            <returns>
            The converted value.
            </returns>
        </member>
        <member name="M:Atom.Xna.ToXnaMathExtensions.ToXna(Atom.Math.Vector3)">
            <summary>
            Converts the <see cref="T:Atom.Math.Vector3"/> into a <see cref="T:Microsoft.Xna.Framework.Vector3"/>.
            </summary>
            <param name="vector">The vector to convert.</param>
            <returns>
            The converted value.
            </returns>
        </member>
        <member name="M:Atom.Xna.ToXnaMathExtensions.ToXna(Atom.Math.Vector4)">
            <summary>
            Converts the <see cref="T:Atom.Math.Vector4"/> into a <see cref="T:Microsoft.Xna.Framework.Vector4"/>.
            </summary>
            <param name="vector">The vector to convert.</param>
            <returns>
            The converted value.
            </returns>
        </member>
        <member name="T:Atom.Xna.MouseInputExtensions">
            <summary>
            Defines extension methods for the <see cref="T:Microsoft.Xna.Framework.Input.MouseState"/> class.
            </summary>
        </member>
        <member name="M:Atom.Xna.MouseInputExtensions.Position(Microsoft.Xna.Framework.Input.MouseState)">
            <summary>
            Gets the position of the mouse cursor as a <see cref="T:Atom.Math.Point2"/>.
            </summary>
            <param name="mouseState">
            The state to query.
            </param>
            <returns>
            The position of the mouse.
            </returns>
        </member>
        <member name="T:Atom.Xna.RenderTarget2DFactory">
            <summary>
            Implements an <see cref="T:Atom.Xna.IRenderTarget2DFactory"/> that creates RenderTarget2D instances
            with a specific size and SurfaceFormat.
            </summary>
        </member>
        <member name="P:Atom.Xna.RenderTarget2DFactory.Size">
            <summary>
            Gets or sets the size of the RenderTarget2Ds created by this RenderTarget2DFactory.
            </summary>
        </member>
        <member name="P:Atom.Xna.RenderTarget2DFactory.Format">
            <summary>
            Gets or sets the SurfaceFormat of the RenderTarget2Ds created by this RenderTarget2DFactory.
            </summary>
        </member>
        <member name="M:Atom.Xna.RenderTarget2DFactory.#ctor(Atom.Math.Point2,Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService,System.Int32)">
            <summary>
            Initializes a new instance of the RenderTarget2DFactory class.
            </summary>
            <param name="size">
            The initial size of the RenderTarget2Ds created by the new RenderTarget2DFactory.
            </param>
            <param name="graphicsDeviceService">
            Provides access to the xna GraphiceDevice that is required by the new RenderTarget2DFactory
            to create RenderTarget2D instances.
            </param>
            <param name="multiSampleCount">
            The preferred number of multisample locations.
            </param>
        </member>
        <member name="M:Atom.Xna.RenderTarget2DFactory.Create">
            <summary>
            Creates a new RenderTarget2D instance.
            </summary>
            <returns>
            A new RenderTarget2D instance.
            </returns>
        </member>
        <member name="M:Atom.Xna.RenderTarget2DFactory.Create(Atom.Math.Point2)">
            <summary>
            Creates a new RenderTarget2D instance.
            </summary>
            <param name="sizeDivider">
            The divider that is applied on the size of the render target.
            </param>
            <returns>
            A new RenderTarget2D instance.
            </returns>
        </member>
        <member name="F:Atom.Xna.RenderTarget2DFactory.size">
            <summary>
            The size of the RenderTarget2Ds created by this RenderTarget2DFactory.
            </summary>
        </member>
        <member name="F:Atom.Xna.RenderTarget2DFactory.format">
            <summary>
            The SurfaceFormat of the RenderTarget2Ds created by this RenderTarget2DFactory.
            </summary>
        </member>
        <member name="F:Atom.Xna.RenderTarget2DFactory.multiSampleCount">
            <summary>
            The preferred number of multisample locations.
            </summary>
        </member>
        <member name="F:Atom.Xna.RenderTarget2DFactory.graphicsDeviceService">
            <summary>
            Provides access to the xna GraphiceDevice that is required by this RenderTarget2DFactory
            to create RenderTarget2D instances.
            </summary>
        </member>
        <member name="T:Atom.Xna.AnimatedSprite">
            <summary>
            An AnimatedSprite consists of a set <see cref="T:Atom.Xna.AnimatedSpriteFrame"/>s.
            </summary>
            <remarks>
            To use an AnimatedSprite an instance of the animation in form of a <see cref="T:Atom.Xna.SpriteAnimation"/>
            has to be created. This makes it possible to have multiple instances of the same AnimatedSprite
            animated at different animation times.
            </remarks>
            <content>
            Defines the default IObjectReaderWriter for the AnimatedSprite class.
            </content>
        </member>
        <member name="P:Atom.Xna.AnimatedSprite.Name">
            <summary>
            Gets or sets the name that (uniquely) identifies this <see cref="T:Atom.Xna.AnimatedSprite"/>.
            </summary>
            <value>The name that (uniquely) identifies this AnimatedSprite.</value>
        </member>
        <member name="P:Atom.Xna.AnimatedSprite.DefaultAnimationSpeed">
            <summary>
            Gets or sets the default animation speed to apply to <see cref="T:Atom.Xna.SpriteAnimation"/>s.
            </summary>
            <value>
            The animation speed that is initially set when creating a new instance of this AnimatedSprite
            using the SpriteAnimation class.
            </value>
        </member>
        <member name="P:Atom.Xna.AnimatedSprite.IsLoopingByDefault">
            <summary>
            Gets or sets a value indicating whether <see cref="T:Atom.Xna.SpriteAnimation"/>s initiating 
            the <see cref="T:Atom.Xna.AnimatedSprite"/> are looping by default.
            </summary>
            <value>
            The looping setting that is initially set when creating a new instance of this AnimatedSprite
            using the SpriteAnimation class.
            </value>
        </member>
        <member name="P:Atom.Xna.AnimatedSprite.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Atom.Xna.AnimatedSpriteFrame"/> at the given <paramref name="index"/>.
            </summary>
            <param name="index"> The index of the <see cref="T:Atom.Xna.AnimatedSpriteFrame"/> to get. </param>
            <returns>The <see cref="T:Atom.Xna.AnimatedSpriteFrame"/> at the given <paramref name="index"/>. </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> 
            If the given <paramref name="index"/> is out of valid range. 
            </exception>
        </member>
        <member name="P:Atom.Xna.AnimatedSprite.FrameCount">
            <summary>
            Gets the number of <see cref="T:Atom.Xna.AnimatedSpriteFrame"/>s this <see cref="T:Atom.Xna.AnimatedSprite"/> has.
            </summary>
            <value>The number of frames this AnimatedSprite contains.</value>
        </member>
        <member name="P:Atom.Xna.AnimatedSprite.TotalTime">
            <summary>
            Gets the time the <see cref="T:Atom.Xna.AnimatedSprite"/> takes to execute.
            </summary>
            <value>The total time this AnimatedSprite lasts.</value>
        </member>
        <member name="P:Atom.Xna.AnimatedSprite.LastFrame">
            <summary>
            Gets the last frame of the <see cref="T:Atom.Xna.AnimatedSprite"/>.
            </summary>
            <value>The last frame of this AnimatedSprite; or null if there aren't any frames.</value>
        </member>
        <member name="P:Atom.Xna.AnimatedSprite.DetailedDescription">
            <summary>
            Gets a string containg a human-readable description of this <see cref="T:Atom.Xna.AnimatedSprite"/>.
            </summary>
            <value>A detailted description of this AnimatedSprite.</value>
        </member>
        <member name="P:Atom.Xna.AnimatedSprite.Size">
            <summary>
            Gets the size of the first AnimatedSpriteFrame of this AnimatedSprite.
            </summary>
            <value>
            The size of the Sprite of the first frame (in pixels).
            </value>
        </member>
        <member name="P:Atom.Xna.AnimatedSprite.Width">
            <summary>
            Gets the width of the first AnimatedSpriteFrame of this AnimatedSprite.
            </summary>
            <value>
            The width of the Sprite of the first frame (in pixels).
            </value>
        </member>
        <member name="P:Atom.Xna.AnimatedSprite.Height">
            <summary>
            Gets the height of the first AnimatedSpriteFrame of this AnimatedSprite.
            </summary>
            <value>
            The height of the Sprite of the first frame (in pixels).
            </value>
        </member>
        <member name="M:Atom.Xna.AnimatedSprite.GetFrames">
            <summary>
            Gets the frames of this <see cref="T:Atom.Xna.AnimatedSprite"/>
            as a read-only collection.
            </summary>
            <returns>A new read-only collection that contains the frames of this AnimatedSprite.</returns>
        </member>
        <member name="M:Atom.Xna.AnimatedSprite.#ctor">
            <summary>
            Initializes a new instance of the AnimatedSprite class.
            </summary>
        </member>
        <member name="M:Atom.Xna.AnimatedSprite.CreateManual(System.String,System.Int32)">
            <summary>
            Manually creates a new <see cref="T:Atom.Xna.AnimatedSprite"/>
            that has the given name, initial number of frames and a default 
            animation speed of 1000.0f.
            </summary>
            <param name="name"> The name of the <see cref="T:Atom.Xna.AnimatedSprite"/>. </param>
            <param name="frameCount"> The initial number of frames to create. </param>
            <returns> 
            A new <see cref="T:Atom.Xna.AnimatedSprite"/> instance whos
            frames are uninitialized.
            </returns>
        </member>
        <member name="M:Atom.Xna.AnimatedSprite.CreateManual(System.String,System.Int32,System.Single,System.Boolean)">
            <summary>
            Manually creates a new <see cref="T:Atom.Xna.AnimatedSprite"/>
            that has the given name and initial number of frames.
            </summary>
            <param name="name">
            The name of the <see cref="T:Atom.Xna.AnimatedSprite"/>.
            </param>
            <param name="frameCount">
            The initial number of frames to create.
            </param>
            <param name="defaultAnimationSpeed">
            The default animation speed to apply to <see cref="T:Atom.Xna.SpriteAnimation"/>s.
            </param>
            <param name="isLoopingByDefault">
            Specifies whether <see cref="T:Atom.Xna.SpriteAnimation"/> of the new <see cref="T:Atom.Xna.AnimatedSprite"/>
            will loop by default.
            </param>
            <returns> 
            A new <see cref="T:Atom.Xna.AnimatedSprite"/> instance whos
            frames are uninitialized.
            </returns>
        </member>
        <member name="M:Atom.Xna.AnimatedSprite.SetFrames(Atom.Xna.AnimatedSpriteFrame[])">
            <summary>
            Sets the frames of this AnimatedSprite.
            </summary>
            <param name="frames">
            The frames this AnimatedSprite should consist of.
            </param>
        </member>
        <member name="M:Atom.Xna.AnimatedSprite.AddFrame(Atom.Xna.Sprite,Atom.Math.Vector2,System.Single)">
            <summary>
            Adds a new initialized <see cref="T:Atom.Xna.AnimatedSpriteFrame"/> to this AnimatedSpriteFrame.
            </summary>
            <param name="sprite">
            The <see cref="T:Atom.Xna.Sprite"/> to display in the Frame. Can be null.
            </param>
            <param name="offset">
            The rendering offset to apply when rendering the frame.
            </param>
            <param name="time">
            The time the frame should last.
            </param>
            <returns>
            The frame that has been added.
            </returns>
        </member>
        <member name="M:Atom.Xna.AnimatedSprite.AddFrame">
            <summary>
            Adds a new uninitialized <see cref="T:Atom.Xna.AnimatedSpriteFrame"/> to this AnimatedSprite.
            </summary>
            <returns>
            The frame that has been added.
            </returns>
        </member>
        <member name="M:Atom.Xna.AnimatedSprite.RemoveFrame(Atom.Xna.AnimatedSpriteFrame)">
            <summary>
            Tries to remove the specified <see cref="T:Atom.Xna.AnimatedSpriteFrame"/> from this <see cref="T:Atom.Xna.AnimatedSprite"/>.
            </summary>
            <param name="frame">
            The AnimatedSpriteFrame to remove.
            </param>
            <returns>
            Returns <see langword="true"/> if the Frame has been removed;
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Xna.AnimatedSprite.SwapFrames(System.Int32,System.Int32)">
            <summary>
            Swaps the frames at the given indices.
            </summary>
            <param name="indexA">
            The zero-based index of the first frame to swap.
            </param>
            <param name="indexB">
            The zero-based index of the second frame to swap.
            </param>
        </member>
        <member name="M:Atom.Xna.AnimatedSprite.CreateInstance">
            <summary>
            Creates a new instance of this AnimatedSprite.
            </summary>
            <returns>
            A new instance of this AnimatedSprite.
            </returns>
        </member>
        <member name="M:Atom.Xna.AnimatedSprite.Atom#Xna#ISpriteAsset#CreateInstance">
            <summary>
            Creates an instance of this ISpriteAsset.
            </summary>
            <returns>
            The instance that has been created.
            </returns>
        </member>
        <member name="M:Atom.Xna.AnimatedSprite.RefreshTotalTime">
            <summary>
            Refreshes the <see cref="P:Atom.Xna.AnimatedSprite.TotalTime"/> property of this <see cref="T:Atom.Xna.AnimatedSprite"/>.
            </summary>
        </member>
        <member name="M:Atom.Xna.AnimatedSprite.OnFramePropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when any property of any <see cref="T:Atom.Xna.AnimatedSpriteFrame"/> of this AnimatedSprite has changed.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
            <param name="e">
            The PropertyChangedEventArgs that contain the event data.
            </param>
        </member>
        <member name="M:Atom.Xna.AnimatedSprite.ToString">
            <summary>
            Overriden to return the name of this AnimatedSprite.
            </summary>
            <returns>The name of this AnimatedSprite.</returns>
        </member>
        <member name="M:Atom.Xna.AnimatedSprite.Clone">
            <summary>
            Creates a clone of this AnimatedSprite instance.
            </summary>
            <returns>
            The newly created clone.
            </returns>
        </member>
        <member name="F:Atom.Xna.AnimatedSprite.lastFrame">
            <summary>
            Caches the last frame in this AnimatedSprite.
            </summary>
        </member>
        <member name="F:Atom.Xna.AnimatedSprite.frames">
            <summary>
            The list of frames this AnimatedSprite consists of.
            </summary>
        </member>
        <member name="T:Atom.Xna.AnimatedSprite.ReaderWriter">
            <summary>
            Defines the IObjectReaderWriter that implements serialization and deserialization
            of <see cref="T:Atom.Xna.AnimatedSprite"/> objects. This class can't be inherited.
            </summary>
        </member>
        <member name="M:Atom.Xna.AnimatedSprite.ReaderWriter.#ctor(Atom.Storage.IObjectReaderWriter{Atom.Xna.AnimatedSpriteFrame})">
            <summary>
            Initializes a new instance of the ReaderWriter class.
            </summary>
            <param name="frameReaderWriter">
            The IObjectReaderWriter that should be used to de-/serialize the individual AnimatedSpriteFrames.
            </param>
        </member>
        <member name="M:Atom.Xna.AnimatedSprite.ReaderWriter.Serialize(Atom.Xna.AnimatedSprite,Atom.Storage.ISerializationContext)">
            <summary>
            Serializes the given object using the given ISerializationContext.
            </summary>
            <param name="object">
            The object to serialize.
            </param>
            <param name="context">
            The context that provides everything required for the serialization process.
            </param>
        </member>
        <member name="M:Atom.Xna.AnimatedSprite.ReaderWriter.Deserialize(Atom.Xna.AnimatedSprite,Atom.Storage.IDeserializationContext)">
            <summary>
            Deserializes the given object using the given IDeserializationContext.
            </summary>
            <param name="object">
            The object to deserialize.
            </param>
            <param name="context">
            The context that provides everything required for the deserialization process.
            </param>
        </member>
        <member name="F:Atom.Xna.AnimatedSprite.ReaderWriter.frameReaderWriter">
            <summary>
            The IObjectReaderWriter that is used to de-/serialize the individual AnimatedSpriteFrames.
            </summary>
        </member>
        <member name="T:Atom.Xna.AnimatedSpriteFrame">
            <summary>
            Represents a single frame of an <see cref="T:Atom.Xna.AnimatedSprite"/>.
            This class can't be inherited.
            </summary>
            <content>
            Defines the default <see cref="T:Atom.Storage.IObjectReaderWriter"/> for the AnimatedSpriteFrame class.
            </content>
        </member>
        <member name="E:Atom.Xna.AnimatedSpriteFrame.PropertyChanged">
            <summary>
            Fired when any property of this <see cref="T:Atom.Xna.AnimatedSpriteFrame"/> has changed.
            </summary>
        </member>
        <member name="P:Atom.Xna.AnimatedSpriteFrame.Sprite">
            <summary>
            Gets or sets the sprite that is rendered in the <see cref="T:Atom.Xna.AnimatedSpriteFrame"/>.
            </summary>
            <value>The <see cref="P:Atom.Xna.AnimatedSpriteFrame.Sprite"/> of this frame.</value>
        </member>
        <member name="P:Atom.Xna.AnimatedSpriteFrame.Offset">
            <summary>
            Gets or sets the drawing offset which is applied in the <see cref="T:Atom.Xna.AnimatedSpriteFrame"/>.
            </summary>
            <value>The offset that gets applied when drawing this frame.</value>
        </member>
        <member name="P:Atom.Xna.AnimatedSpriteFrame.Time">
            <summary>
            Gets or sets the time the <see cref="T:Atom.Xna.AnimatedSpriteFrame"/> lasts.
            </summary>
            <value>The time this frame lasts.</value>
        </member>
        <member name="M:Atom.Xna.AnimatedSpriteFrame.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Xna.AnimatedSpriteFrame"/> class.
            </summary>
        </member>
        <member name="M:Atom.Xna.AnimatedSpriteFrame.#ctor(Atom.Xna.Sprite,Atom.Math.Vector2,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Xna.AnimatedSpriteFrame"/> class.
            </summary>
            <param name="sprite">
            The <see cref="P:Atom.Xna.AnimatedSpriteFrame.Sprite"/> to display in the Frame. Can be null.
            </param>
            <param name="offset">
            The rendering offset to apply when rendering the frame.
            </param>
            <param name="time">
            The time the Frame should last.
            </param>
            <exception cref="T:System.ArgumentException">
            If <paramref name="time"/> is negative.
            </exception>
        </member>
        <member name="M:Atom.Xna.AnimatedSpriteFrame.OnPropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="name">
            The name of the property.
            </param>
        </member>
        <member name="M:Atom.Xna.AnimatedSpriteFrame.ToString">
            <summary>
            Overriden to return a human-readable representation of the <see cref="T:Atom.Xna.AnimatedSpriteFrame"/>.
            </summary>
            <returns>A human-readable representation of this AnimatedSpriteFrame.</returns>
        </member>
        <member name="M:Atom.Xna.AnimatedSpriteFrame.Clone">
            <summary>
            Creates a clone of this <see cref="T:Atom.Xna.AnimatedSpriteFrame"/>.
            </summary>
            <returns>
            The newly created clone.
            </returns>
        </member>
        <member name="F:Atom.Xna.AnimatedSpriteFrame.sprite">
            <summary>
            The sprite that is rendered in the <see cref="T:Atom.Xna.AnimatedSpriteFrame"/>.
            </summary>
        </member>
        <member name="F:Atom.Xna.AnimatedSpriteFrame.offset">
            <summary>
            The rendering offset which is applied in the <see cref="T:Atom.Xna.AnimatedSpriteFrame"/>.
            </summary>
        </member>
        <member name="F:Atom.Xna.AnimatedSpriteFrame.time">
            <summary>
            The time the <see cref="T:Atom.Xna.AnimatedSpriteFrame"/> lasts.
            </summary>
        </member>
        <member name="T:Atom.Xna.AnimatedSpriteFrame.ReaderWriter">
            <summary>
            Defines the IObjectReaderWriter that implements serialization and deserialization
            of <see cref="T:Atom.Xna.AnimatedSprite"/> objects. This class can't be inherited.
            </summary>
        </member>
        <member name="M:Atom.Xna.AnimatedSpriteFrame.ReaderWriter.#ctor(Atom.Xna.INormalSpriteLoader)">
            <summary>
            Initializes a new instance of the ReaderWriter class.
            </summary>
            <param name="spriteLoader">
            The <see cref="T:Atom.Xna.INormalSpriteLoader"/> that should be used to load the <see cref="P:Atom.Xna.AnimatedSpriteFrame.Sprite"/> of the frames.
            </param>
        </member>
        <member name="M:Atom.Xna.AnimatedSpriteFrame.ReaderWriter.Serialize(Atom.Xna.AnimatedSpriteFrame,Atom.Storage.ISerializationContext)">
            <summary>
            Serializes the given object using the given ISerializationContext.
            </summary>
            <param name="object">
            The object to serialize.
            </param>
            <param name="context">
            The context that provides everything required for the serialization process.
            </param>
        </member>
        <member name="M:Atom.Xna.AnimatedSpriteFrame.ReaderWriter.Deserialize(Atom.Xna.AnimatedSpriteFrame,Atom.Storage.IDeserializationContext)">
            <summary>
            Deserializes the given object using the given IDeserializationContext.
            </summary>
            <param name="object">
            The object to deserialize.
            </param>
            <param name="context">
            The context that provides everything required for the deserialization process.
            </param>
        </member>
        <member name="F:Atom.Xna.AnimatedSpriteFrame.ReaderWriter.spriteLoader">
            <summary>
            The <see cref="T:Atom.Xna.INormalSpriteLoader"/> that should be used to load the <see cref="P:Atom.Xna.AnimatedSpriteFrame.Sprite"/> of the frames.
            </summary>
        </member>
        <member name="T:Atom.Xna.IAnimatedSpriteLoader">
            <summary>
            Provides a mechanism that allows loading of <see cref="T:Atom.Xna.AnimatedSprite"/> assets.
            </summary>
        </member>
        <member name="M:Atom.Xna.IAnimatedSpriteLoader.LoadAnimatedSprite(System.String)">
            <summary>
            Loads the AnimatedSprite with the given <paramref name="assetName"/>.
            </summary>
            <param name="assetName">
            The name that uniquely identifies the AnimatedSprite to load.
            </param>
            <returns>
            The AnimatedSprite that has been loaden.
            </returns>
        </member>
        <member name="T:Atom.Xna.SpriteAnimation">
            <summary>
            A SpriteAnimation is an 'instance' of an <see cref="P:Atom.Xna.SpriteAnimation.AnimatedSprite"/>.
            This is needed to have multiple instances of an <see cref="P:Atom.Xna.SpriteAnimation.AnimatedSprite"/>
            playing at the same time.
            </summary>
        </member>
        <member name="E:Atom.Xna.SpriteAnimation.ReachedEnd">
            <summary>
            Raised when this SpriteAnimation has completed.
            </summary>
        </member>
        <member name="P:Atom.Xna.SpriteAnimation.AnimatedSprite">
            <summary>
            Gets the <see cref="P:Atom.Xna.SpriteAnimation.AnimatedSprite"/> that is the template of this <see cref="T:Atom.Xna.SpriteAnimation"/> instance.
            </summary>
            <value>The AnimatedSprite this SpriteAnimation is based on.</value>
        </member>
        <member name="P:Atom.Xna.SpriteAnimation.Name">
            <summary>
            Gets the name of the underlying <see cref="P:Atom.Xna.SpriteAnimation.AnimatedSprite"/> of this <see cref="T:Atom.Xna.SpriteAnimation"/>.
            </summary>
            <value>The name that (uniquely) identifies the AnimatedSprite this SpriteAnimation is based on.</value>
        </member>
        <member name="P:Atom.Xna.SpriteAnimation.IsLooping">
            <summary>
            Gets or sets a value indicating whether this <see cref="P:Atom.Xna.SpriteAnimation.AnimatedSprite"/> is looping.
            </summary>
            <value>The default value is false.</value>
        </member>
        <member name="P:Atom.Xna.SpriteAnimation.IsAnimatingEnabled">
            <summary>
            Gets or sets a value indicating whether animating of this <see cref="T:Atom.Xna.SpriteAnimation"/> is enabled.
            </summary>
            <value>The default value is true.</value>
        </member>
        <member name="P:Atom.Xna.SpriteAnimation.AnimationSpeed">
            <summary>
            Gets or sets the speed this <see cref="P:Atom.Xna.SpriteAnimation.AnimatedSprite"/> is animating at.
            </summary>
        </member>
        <member name="P:Atom.Xna.SpriteAnimation.Time">
            <summary>
            Gets the current animation time tick.
            </summary>
            <value>The current animation time tick value.</value>
        </member>
        <member name="P:Atom.Xna.SpriteAnimation.TotalTime">
            <summary>
            Gets the total time the <see cref="T:Atom.Xna.SpriteAnimation"/> takes.
            </summary>
            <value>The total time in seconds this SpriteAnimation takes.</value>
        </member>
        <member name="P:Atom.Xna.SpriteAnimation.FrameIndex">
            <summary>
            Gets or sets the index of the currently displayed frame of the <see cref="T:Atom.Xna.SpriteAnimation"/>.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If the given index value is out of valid range.
            </exception>
            <value>The index, or -1 if invalid.</value>
        </member>
        <member name="P:Atom.Xna.SpriteAnimation.Frame">
            <summary>
            Gets the currently displayed frame of the <see cref="T:Atom.Xna.SpriteAnimation"/>. May be null.
            </summary>
            <value>The current animation frame.</value>
        </member>
        <member name="P:Atom.Xna.SpriteAnimation.Width">
            <summary>
            Gets the width of the <see cref="T:Atom.Xna.Sprite"/> of the current AnimatedSprite.Frame.
            </summary>
            <value>The width of the Sprite of the current Frame.</value>
        </member>
        <member name="P:Atom.Xna.SpriteAnimation.Height">
            <summary>
            Gets the height of the <see cref="T:Atom.Xna.Sprite"/> of the current AnimatedSprite.Frame.
            </summary>
            <value>The height of the Sprite of the current Frame.</value>
        </member>
        <member name="P:Atom.Xna.SpriteAnimation.Origin">
            <summary>
            Gets the default origin of the <see cref="T:Atom.Xna.Sprite"/> of the current AnimatedSprite.Frame.
            </summary>
            <value>The default origin of the Sprite of the current Frame.</value>
        </member>
        <member name="P:Atom.Xna.SpriteAnimation.Texture">
            <summary>
            Gets the <see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D"/> of the <see cref="T:Atom.Xna.Sprite"/> 
            of the current <see cref="P:Atom.Xna.SpriteAnimation.Frame"/>. May return null.
            </summary>
            <value>The texture of the Sprite of the current Frame.</value>
        </member>
        <member name="P:Atom.Xna.SpriteAnimation.Source">
            <summary>
            Gets the source <see cref="T:Atom.Math.Rectangle"/> of the <see cref="T:Atom.Xna.Sprite"/>
            of the current AnimatedSprite.Frame.
            </summary>
            <value>The source rectangle of the Sprite of the current Frame.</value>
        </member>
        <member name="P:Atom.Xna.SpriteAnimation.Size">
            <summary>
            Gets the size of the <see cref="T:Atom.Xna.Sprite"/>
            of the current AnimatedSprite.Frame.
            </summary>
            <value>The size of the Sprite of the current Frame.</value>
        </member>
        <member name="P:Atom.Xna.SpriteAnimation.Color">
            <summary>
            Gets the color of the <see cref="T:Atom.Xna.Sprite"/>
            of the current AnimatedSprite.Frame.
            </summary>
            <value>The color of the Sprite of the current Frame.</value>
        </member>
        <member name="P:Atom.Xna.SpriteAnimation.Scale">
            <summary>
            Gets the scaling factor of the <see cref="T:Atom.Xna.Sprite"/>
            of the current AnimatedSprite.Frame.
            </summary>
            <value>The scaling factor of the Sprite of the current Frame.</value>
        </member>
        <member name="P:Atom.Xna.SpriteAnimation.Rotation">
            <summary>
            Gets the rotation in radians of the <see cref="T:Atom.Xna.Sprite"/>
            of the current AnimatedSprite.Frame.
            </summary>
            <value>The rotation in radians of the Sprite of the current Frame.</value>
        </member>
        <member name="M:Atom.Xna.SpriteAnimation.#ctor(Atom.Xna.AnimatedSprite)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Xna.SpriteAnimation"/> class.
            </summary>
            <param name="animatedSprite">
            The <see cref="P:Atom.Xna.SpriteAnimation.AnimatedSprite"/> that works as a template for the new <see cref="T:Atom.Xna.SpriteAnimation"/> instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="animatedSprite"/> is null.
            </exception>
        </member>
        <member name="M:Atom.Xna.SpriteAnimation.#ctor(Atom.Xna.AnimatedSprite,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Xna.SpriteAnimation"/> class.
            </summary>
            <param name="animatedSprite">
            The <see cref="P:Atom.Xna.SpriteAnimation.AnimatedSprite"/> that works as a template for the new <see cref="T:Atom.Xna.SpriteAnimation"/> instance.
            </param>
            <param name="animationSpeed"> 
            The speed at which the animation is animated.
            Negative values 'reverse' the animation.
            </param>
            <param name="isLooping">
            States whether the animation is looping.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="animatedSprite"/> is null.
            </exception>
        </member>
        <member name="M:Atom.Xna.SpriteAnimation.Draw(Atom.Math.Vector2,Atom.Xna.Batches.ISpriteBatch)">
            <summary>
            Draws this <see cref="T:Atom.Xna.SpriteAnimation"/> at the given <paramref name="position"/>
            to the given <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> using the default settings of this <see cref="T:Atom.Xna.ISprite"/>.
            </summary>
            <remarks>
            <para>
            This call must be within the ISpriteBatch.Begin/ISpriteBatch.End
            block of the given <paramref name="batch"/>.
            </para>
            <para>
            It is NOT checked wheter the given <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> is null.
            </para>
            </remarks>
            <param name="position">
            The position to render the sprite at.
            </param>
            <param name="batch">
            The <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> to draw to.
            </param>
        </member>
        <member name="M:Atom.Xna.SpriteAnimation.Draw(System.Single,System.Single,Atom.Xna.Batches.ISpriteBatch)">
            <summary>
            Draws this <see cref="T:Atom.Xna.SpriteAnimation"/> at the given position
            to the given <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> using the default settings of this <see cref="T:Atom.Xna.ISprite"/>.
            </summary>
            <remarks>
            <para>
            This call must be within the ISpriteBatch.Begin/ISpriteBatch.End
            block of the given <paramref name="batch"/>.
            </para>
            <para>
            It is NOT checked wheter the given <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> is null.
            </para>
            </remarks>
            <param name="x">
            The position to render the sprite at on the x-axis.
            </param>
            <param name="y">
            The position to render the sprite at on the y-axis.
            </param>
            <param name="batch">
            The <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> to draw to.
            </param>
        </member>
        <member name="M:Atom.Xna.SpriteAnimation.Draw(Atom.Math.Vector2,System.Single,Atom.Xna.Batches.ISpriteBatch)">
            <summary>
            Draws this <see cref="T:Atom.Xna.SpriteAnimation"/> at the given <paramref name="position"/>
            to the given <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> using the default settings of this <see cref="T:Atom.Xna.ISprite"/>.
            </summary>
            <remarks>
            <para>
            This call must be within the ISpriteBatch.Begin/ISpriteBatch.End
            block of the given <paramref name="batch"/>.
            </para>
            <para>
            It is NOT checked wheter the given <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> is null.
            </para>
            </remarks>
            <param name="position">
            The position to render the sprite at.
            </param>
            <param name="depthLayer">The depth layer to draw the sprite at; used for sorting.</param>
            <param name="batch">
            The <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> to draw to.
            </param>
        </member>
        <member name="M:Atom.Xna.SpriteAnimation.Draw(Atom.Math.Vector2,Microsoft.Xna.Framework.Color,Atom.Xna.Batches.ISpriteBatch)">
            <summary>
            Draws this <see cref="T:Atom.Xna.SpriteAnimation"/> at the given <paramref name="position"/>
            to the given <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> using the default settings of this <see cref="T:Atom.Xna.ISprite"/>.
            </summary>
            <remarks>
            <para>
            This call must be within the ISpriteBatch.Begin/ISpriteBatch.End
            block of the given <paramref name="batch"/>.
            </para>
            <para>
            It is NOT checked wheter the given <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> is null.
            </para>
            </remarks>
            <param name="position">
            The position to render the sprite at.
            </param>
            <param name="color">
            The color channel modulation to use.
            </param>
            <param name="batch">
            The <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> to draw to.
            </param>
        </member>
        <member name="M:Atom.Xna.SpriteAnimation.Draw(Atom.Math.Vector2,Microsoft.Xna.Framework.Color,System.Single,Atom.Xna.Batches.ISpriteBatch)">
            <summary>
            Draws this ISprite at the given <paramref name="position"/>
            to the given <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> using the default settings of this ISprite.
            </summary>
            <remarks>
            <para>
            This call must be within the ISpriteBatch.Begin/ISpriteBatch.End
            block of the given <paramref name="batch"/>.
            </para>
            <para>
            It is NOT checked wheter the given <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> is null.
            </para>
            </remarks>
            <param name="position">
            The position to render the sprite at.
            </param>
            <param name="color">The color channel modulation to use.</param>
            <param name="depthLayer">The layer to draw at.</param>
            <param name="batch">
            The <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> to draw to.
            </param>
        </member>
        <member name="M:Atom.Xna.SpriteAnimation.Draw(Atom.Math.Rectangle,Microsoft.Xna.Framework.Color,Atom.Xna.Batches.ISpriteBatch)">
            <summary>
            Draws this <see cref="T:Atom.Xna.SpriteAnimation"/> into the given <paramref name="destination"/> rectangle.
            </summary>
            <remarks>
            <para>
            This call must be within the ISpriteBatch.Begin/ISpriteBatch.End
            block of the given <paramref name="batch"/>.
            </para>
            <para>
            It is NOT checked wheter the given <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> is null.
            </para>
            </remarks>
            <param name="destination">
            The rectangle the sprite is drawn in.
            </param>
            <param name="color">
            The color channel modulation to use.
            </param>
            <param name="batch">
            The <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> to draw to.
            </param>
        </member>
        <member name="M:Atom.Xna.SpriteAnimation.Draw(Atom.Math.Vector2,System.Single,Atom.Math.Vector2,Atom.Math.Vector2,Atom.Xna.Batches.ISpriteBatch)">
            <summary>
            Draws this <see cref="T:Atom.Xna.SpriteAnimation"/> at the given <paramref name="position"/>
            to the given <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> using a mix of the specified and the default settings.
            </summary>
            <remarks>
            <para>
            This call must be within the ISpriteBatch.Begin/ISpriteBatch.End
            block of the given <paramref name="batch"/>.
            </para>
            <para>
            It is NOT checked wheter the given <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> is null.
            </para>
            </remarks>
            <param name="position">
            The position to render the sprite at.
            </param>
            <param name="rotation">
            The rotation in radians.
            </param>
            <param name="origin">
            The origin of rotation and scaling.
            </param>
            <param name="scale">
            The scaling factor to apply.
            </param>
            <param name="batch">
            The <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> to draw to.
            </param>
        </member>
        <member name="M:Atom.Xna.SpriteAnimation.Draw(Atom.Math.Vector2,Microsoft.Xna.Framework.Color,System.Single,Atom.Math.Vector2,Atom.Math.Vector2,Atom.Xna.Batches.ISpriteBatch)">
            <summary>
            Draws this <see cref="T:Atom.Xna.SpriteAnimation"/> at the given <paramref name="position"/>
            to the given <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> using a mix of the specified and the default settings.
            </summary>
            <remarks>
            <para>
            This call must be within the ISpriteBatch.Begin/ISpriteBatch.End
            block of the given <paramref name="batch"/>.
            </para>
            <para>
            It is NOT checked wheter the given <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> is null.
            </para>
            </remarks>
            <param name="position">
            The position to render the sprite at.
            </param>
            <param name="color">
            The color channel modulation to use.
            </param>
            <param name="rotation">
            The rotation in radians.
            </param>
            <param name="origin">
            The orgin of rotation and scaling.
            </param>
            <param name="scale">
            The scaling factor to apply.
            </param>
            <param name="batch">
            The <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> to draw to.
            </param>
        </member>
        <member name="M:Atom.Xna.SpriteAnimation.Draw(Atom.Math.Vector2,Microsoft.Xna.Framework.Color,System.Single,Atom.Math.Vector2,Atom.Math.Vector2,Microsoft.Xna.Framework.Graphics.SpriteEffects,Atom.Xna.Batches.ISpriteBatch)">
            <summary>
            Draws this <see cref="T:Atom.Xna.SpriteAnimation"/> at the given <paramref name="position"/>
            to the given <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> using the specified settings.
            </summary>
            <remarks>
            <para>
            This call must be within the ISpriteBatch.Begin/ISpriteBatch.End
            block of the given <paramref name="batch"/>.
            </para>
            <para>
            It is NOT checked wheter the given <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> is null.
            </para>
            </remarks>
            <param name="position">
            The position to render the sprite at.
            </param>
            <param name="color">
            The color channel modulation to use.
            </param>
            <param name="rotation">
            The rotation in radians.
            </param>
            <param name="origin">
            The origin of rotation and scaling.
            </param>
            <param name="scale">
            The scaling factor to apply.
            </param>
            <param name="effects">
            The SpriteEffects to apply.
            </param>
            <param name="batch">
            The <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> to draw to.
            </param>
        </member>
        <member name="M:Atom.Xna.SpriteAnimation.Draw(Atom.Math.Vector2,Microsoft.Xna.Framework.Color,System.Single,Atom.Math.Vector2,Atom.Math.Vector2,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single,Atom.Xna.Batches.ISpriteBatch)">
            <summary>
            Draws this <see cref="T:Atom.Xna.SpriteAnimation"/> at the given <paramref name="position"/>
            to the given <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> using the specified settings.
            </summary>
            <remarks>
            <para>
            This call must be within the ISpriteBatch.Begin/ISpriteBatch.End
            block of the given <paramref name="batch"/>.
            </para>
            <para>
            It is NOT checked wheter the given <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> is null.
            </para>
            </remarks>
            <param name="position">
            The position to render the sprite at.
            </param>
            <param name="color">
            The color channel modulation to use.
            </param>
            <param name="rotation">
            The rotation in radians.
            </param>
            <param name="origin">
            The origin of rotation and scaling.
            </param>
            <param name="scale">
            The scaling factor to apply.
            </param>
            <param name="effects">
            The SpriteEffects to apply.
            </param>
            <param name="layerDepth">
            The depth to draw the sprite at.
            </param>
            <param name="batch">
            The <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> to draw to.
            </param>
        </member>
        <member name="M:Atom.Xna.SpriteAnimation.Animate(System.Single)">
            <summary>
            Animates this <see cref="T:Atom.Xna.SpriteAnimation"/>.
            </summary>
            <param name="frameTime">
            The time the last frame took (in seconds).
            </param>
        </member>
        <member name="M:Atom.Xna.SpriteAnimation.FindCurrentFrame">
            <summary>
            Finds and sets teh current <see cref="T:Atom.Xna.AnimatedSpriteFrame"/>
            based on the current animation time.
            </summary>
        </member>
        <member name="M:Atom.Xna.SpriteAnimation.Atom#IUpdateable#Update(Atom.IUpdateContext)">
            <summary>
            Updates/Animates this SpriteAnimation.
            </summary>
            <param name="updateContext">
            The current IUpdateContext.
            </param>
        </member>
        <member name="M:Atom.Xna.SpriteAnimation.Reset">
            <summary>
            Resets this <see cref="T:Atom.Xna.SpriteAnimation"/>.
            </summary>
        </member>
        <member name="M:Atom.Xna.SpriteAnimation.Clone">
            <summary>
            Creates a clone of this <see cref="T:Atom.Xna.SpriteAnimation"/>.
            </summary>
            <returns>
            A clone of the <see cref="T:Atom.Xna.SpriteAnimation"/> which has
            the same <see cref="P:Atom.Xna.SpriteAnimation.AnimatedSprite"/>, animation speed and looping settings
            as the original. 
            </returns>
        </member>
        <member name="M:Atom.Xna.SpriteAnimation.System#ICloneable#Clone">
            <summary>
            Creates a clone of this <see cref="T:Atom.Xna.SpriteAnimation"/>.
            </summary>
            <returns>
            A clone of the <see cref="T:Atom.Xna.SpriteAnimation"/> which has
            the same <see cref="P:Atom.Xna.SpriteAnimation.AnimatedSprite"/>, animation speed and looping settings
            as the original. 
            </returns>
        </member>
        <member name="M:Atom.Xna.SpriteAnimation.Atom#Xna#ISprite#CloneInstance">
            <summary>
            Creates a clone of this <see cref="T:Atom.Xna.SpriteAnimation"/>.
            </summary>
            <returns>
            A clone of the <see cref="T:Atom.Xna.SpriteAnimation"/> which has
            the same <see cref="P:Atom.Xna.SpriteAnimation.AnimatedSprite"/>, animation speed and looping settings
            as the original. 
            </returns>
        </member>
        <member name="M:Atom.Xna.SpriteAnimation.ToString">
            <summary>
            Overwritten to return the <see cref="P:Atom.Xna.SpriteAnimation.Name"/>
            of this <see cref="T:Atom.Xna.SpriteAnimation"/>.
            </summary>
            <returns>The <see cref="P:Atom.Xna.SpriteAnimation.Name"/> of this <see cref="T:Atom.Xna.SpriteAnimation"/>.</returns>
        </member>
        <member name="F:Atom.Xna.SpriteAnimation.time">
            <summary>
            The current time.
            </summary>
        </member>
        <member name="F:Atom.Xna.SpriteAnimation.animationSpeed">
            <summary>
            The speed this <see cref="T:Atom.Xna.SpriteAnimation"/> is animating at.
            </summary>
        </member>
        <member name="F:Atom.Xna.SpriteAnimation.isLooping">
            <summary>
            States whether this <see cref="T:Atom.Xna.SpriteAnimation"/> is looping.
            </summary>
        </member>
        <member name="F:Atom.Xna.SpriteAnimation.isAnimatingEnabled">
            <summary>
            States whether animation of this <see cref="T:Atom.Xna.SpriteAnimation"/> is enabled.
            </summary>
        </member>
        <member name="F:Atom.Xna.SpriteAnimation.currentFrame">
            <summary>
            The current frame. Can be null.
            </summary>
        </member>
        <member name="F:Atom.Xna.SpriteAnimation.currentFrameIndex">
            <summary>
            The index of the currently selected frame.
            </summary>
        </member>
        <member name="F:Atom.Xna.SpriteAnimation.animatedSprite">
            <summary>
            The <see cref="P:Atom.Xna.SpriteAnimation.AnimatedSprite"/> that works as a template for this <see cref="T:Atom.Xna.SpriteAnimation"/>.
            </summary>
        </member>
        <member name="T:Atom.Xna.SpriteAtlas">
            <summary>
            Represents an atlas of <see cref="T:Atom.Xna.Sprite"/>s that share the same <see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D"/>.
            This class can't be inherited.
            </summary>
            <content>
            Defines the default IObjectReaderWriter for the SpriteAtlas class.
            </content>
        </member>
        <member name="P:Atom.Xna.SpriteAtlas.Texture">
            <summary>
            Gets or sets the Texture all <see cref="P:Atom.Xna.SpriteAtlas.Sprites"/> of this SpriteAtlas use.
            </summary>
        </member>
        <member name="P:Atom.Xna.SpriteAtlas.Sprites">
            <summary>
            Gets the list of Sprites this SpriteAtlas contains.
            </summary>
        </member>
        <member name="M:Atom.Xna.SpriteAtlas.Verify">
            <summary>
            Verifies the integrity of this SpriteAtlas.
            </summary>
        </member>
        <member name="M:Atom.Xna.SpriteAtlas.VerifySprite(Atom.Xna.Sprite)">
            <summary>
            Verifies the integrity of the specified Sprite.
            </summary>
            <param name="sprite">
            The Sprite to verify.
            </param>
        </member>
        <member name="F:Atom.Xna.SpriteAtlas.sprites">
            <summary>
            The Sprites that are part of this SpriteAtlas.
            </summary>
        </member>
        <member name="T:Atom.Xna.SpriteAtlas.ReaderWriter">
            <summary>
            Defines the IObjectReaderWriter that implements serialization and deserialization
            of <see cref="T:Atom.Xna.SpriteAtlas"/> objects. This class can't be inherited.
            </summary>
        </member>
        <member name="M:Atom.Xna.SpriteAtlas.ReaderWriter.#ctor(Atom.Xna.ITexture2DLoader)">
            <summary>
            Initializes a new instance of the ReaderWriter class.
            </summary>
            <param name="textureLoader">
            Provides a mechanism that allows loading of Texture2D assets.
            </param>
        </member>
        <member name="M:Atom.Xna.SpriteAtlas.ReaderWriter.Serialize(Atom.Xna.SpriteAtlas,Atom.Storage.ISerializationContext)">
            <summary>
            Serializes the given object using the given ISerializationContext.
            </summary>
            <param name="object">
            The object to serialize.
            </param>
            <param name="context">
            The context that provides everything required for the serialization process.
            </param>
        </member>
        <member name="M:Atom.Xna.SpriteAtlas.ReaderWriter.Deserialize(Atom.Xna.SpriteAtlas,Atom.Storage.IDeserializationContext)">
            <summary>
            Deserializes the given object using the given IDeserializationContext.
            </summary>
            <param name="object">
            The object to deserialize.
            </param>
            <param name="context">
            The context that provides everything required for the deserialization process.
            </param>
        </member>
        <member name="F:Atom.Xna.SpriteAtlas.ReaderWriter.textureLoader">
            <summary>
            Provides a mechanism that allows loading of Texture2D assets.
            </summary>
        </member>
        <member name="T:Atom.Xna.SpriteAtlas.ReaderWriter.SpriteReaderWriter">
            <summary>
            Defines an IObjectReaderWriter that implements serialization and deserialization
            of <see cref="T:Atom.Xna.Sprite"/> objects to be stored in a SpriteAtlas.
            </summary>
        </member>
        <member name="F:Atom.Xna.SpriteAtlas.ReaderWriter.SpriteReaderWriter.Instance">
            <summary>
            Represents an instance of the SpriteReaderWriter class.
            </summary>
        </member>
        <member name="M:Atom.Xna.SpriteAtlas.ReaderWriter.SpriteReaderWriter.Serialize(Atom.Xna.Sprite,Atom.Storage.ISerializationContext)">
            <summary>
            Serializes the given object using the given ISerializationContext.
            </summary>
            <param name="object">
            The object to serialize.
            </param>
            <param name="context">
            The context that provides everything required for the serialization process.
            </param>
        </member>
        <member name="M:Atom.Xna.SpriteAtlas.ReaderWriter.SpriteReaderWriter.Deserialize(Atom.Xna.Sprite,Atom.Storage.IDeserializationContext)">
            <summary>
            Deserializes the given object using the given IDeserializationContext.
            </summary>
            <param name="object">
            The object to deserialize.
            </param>
            <param name="context">
            The context that provides everything required for the deserialization process.
            </param>
        </member>
        <member name="T:Atom.Xna.SpriteDatabase">
            <summary>
            Represents a set of <see cref="T:Atom.Xna.Sprite"/>s and AnimatedSprites that are
            all based on the same Texture2D.
            </summary>
            <content>
            Defines the default IObjectReaderWriter for the SpriteDatabase class.
            </content>
            <content>
            Defines an INormalSpriteLoader that loads <see cref="T:Atom.Xna.Sprite"/>s directly from an existing <see cref="T:Atom.Xna.SpriteDatabase"/>.
            </content>
        </member>
        <member name="P:Atom.Xna.SpriteDatabase.Name">
            <summary>
            Gets or sets the name that uniquely identifies this SameTextureSpriteDatabase.
            </summary>
        </member>
        <member name="P:Atom.Xna.SpriteDatabase.Atlas">
            <summary>
            Gets or sets the SpriteAtlas that is part of this SpriteDatabase.
            </summary>
        </member>
        <member name="P:Atom.Xna.SpriteDatabase.AnimatedSprites">
            <summary>
            Gets the list of AnimatedSprites that are stored in this SpriteDatabase.
            </summary>
        </member>
        <member name="P:Atom.Xna.SpriteDatabase.Sprites">
            <summary>
            Gets the <see cref="T:Atom.Xna.Sprite"/> this SpriteDatabase contains.
            </summary>
        </member>
        <member name="M:Atom.Xna.SpriteDatabase.FindSprite(System.String)">
            <summary>
            Searches this SpriteDatabase for the Sprite with the given <paramref name="name"/>.
            </summary>
            <param name="name">
            The name of the Sprite to find.
            </param>
            <returns>
            The requested Sprite;
            or null if there is no Sprite that has the given name.
            </returns>
        </member>
        <member name="F:Atom.Xna.SpriteDatabase.animatedSprites">
            <summary>
            The AnimatedSprites that are stored in this SpriteDatabase.
            </summary>
        </member>
        <member name="T:Atom.Xna.SpriteDatabase.ReaderWriter">
            <summary>
            Defines the IObjectReaderWriter that implements serialization and deserialization
            of <see cref="T:Atom.Xna.SpriteDatabase"/> objects. This class can't be inherited.
            </summary>
        </member>
        <member name="F:Atom.Xna.SpriteDatabase.ReaderWriter.Extension">
            <summary>
            The extension of the SpriteDatabase files: '.sdb'
            </summary>
        </member>
        <member name="M:Atom.Xna.SpriteDatabase.ReaderWriter.#ctor(Atom.Xna.ITexture2DLoader)">
            <summary>
            Initializes a new instance of the ReaderWriter class.
            </summary>
            <param name="textureLoader">
            Provides a mechanism that allows loading of Texture2D assets.
            </param>
        </member>
        <member name="M:Atom.Xna.SpriteDatabase.ReaderWriter.#ctor(Atom.Storage.IObjectReaderWriter{Atom.Xna.SpriteAtlas})">
            <summary>
            Initializes a new instance of the ReaderWriter class.
            </summary>
            <param name="spriteAtlasReaderWriter">
            The IObjectReaderWriter that should be used to de-/serialize SpriteAtlas objects.
            </param>
        </member>
        <member name="M:Atom.Xna.SpriteDatabase.ReaderWriter.Serialize(Atom.Xna.SpriteDatabase,Atom.Storage.ISerializationContext)">
            <summary>
            Serializes the given object using the given ISerializationContext.
            </summary>
            <param name="object">
            The object to serialize.
            </param>
            <param name="context">
            The context that provides everything required for the serialization process.
            </param>
        </member>
        <member name="M:Atom.Xna.SpriteDatabase.ReaderWriter.Deserialize(Atom.Xna.SpriteDatabase,Atom.Storage.IDeserializationContext)">
            <summary>
            Deserializes the given object using the given IDeserializationContext.
            </summary>
            <param name="object">
            The object to deserialize.
            </param>
            <param name="context">
            The context that provides everything required for the deserialization process.
            </param>
        </member>
        <member name="M:Atom.Xna.SpriteDatabase.ReaderWriter.CreateAnimatedSpriteReaderWriter(Atom.Xna.SpriteDatabase)">
            <summary>
            Creates the IObjectReaderWriter for AnimatedSprites.
            </summary>
            <param name="database">
            The database from which the individual frame sprites should be loaden.
            </param>
            <returns>
            The newly created IObjectReaderWriter.
            </returns>
        </member>
        <member name="F:Atom.Xna.SpriteDatabase.ReaderWriter.spriteAtlasReaderWriter">
            <summary>
            The IObjectReaderWriter that is used to de-/serialize SpriteAtlas objects.
            </summary>
        </member>
        <member name="T:Atom.Xna.SpriteDatabase.SpriteLoader">
            <summary>
            Implements an <see cref="T:Atom.Xna.INormalSpriteLoader"/> that searches a <see cref="T:Atom.Xna.SpriteDatabase"/> object
            for Sprites.
            </summary>
        </member>
        <member name="M:Atom.Xna.SpriteDatabase.SpriteLoader.#ctor(Atom.Xna.SpriteDatabase)">
            <summary>
            Initializes a new instance of the SpriteLoader class.
            </summary>
            <param name="database">
            The database from which Sprites should be received.
            </param>
        </member>
        <member name="M:Atom.Xna.SpriteDatabase.SpriteLoader.LoadSprite(System.String)">
            <summary>
            Loads the Sprite with the given <paramref name="assetName"/>.
            </summary>
            <param name="assetName">
            The name that uniquely identifies the Sprite to load.
            </param>
            <returns>
            The Sprite that has been loaden.
            </returns>
        </member>
        <member name="P:Atom.Xna.SpriteDatabase.SpriteLoader.Atom#Xna#IAssetLoader#RootDirectory">
            <summary>
            Gets or sets the root directory that is automatically
            prefixed to assets loaded by this IAssetLoader.
            </summary>
        </member>
        <member name="M:Atom.Xna.SpriteDatabase.SpriteLoader.System#IDisposable#Dispose">
            <summary>
            This operation has no effect for this implementation.
            </summary>
        </member>
        <member name="M:Atom.Xna.SpriteDatabase.SpriteLoader.Atom#Xna#IAssetLoader#UnloadAll">
            <summary>
            Unloads all assets that have been loaden with this IAssetLoader.
            </summary>
        </member>
        <member name="F:Atom.Xna.SpriteDatabase.SpriteLoader.database">
            <summary>
            The database from which Sprites are received.
            </summary>
        </member>
        <member name="T:Atom.Xna.IAnimatedSpriteSource">
            <summary>
            Provides a mechanism that allows receiving a set of <see cref="T:Atom.Xna.AnimatedSprite"/>s.
            </summary>
        </member>
        <member name="P:Atom.Xna.IAnimatedSpriteSource.AnimatedSprites">
            <summary>
            Gets the <see cref="T:Atom.Xna.AnimatedSprite"/>s this IAnimatedSpriteSource contains.
            </summary>
        </member>
        <member name="T:Atom.Xna.INormalSpriteLoader">
            <summary>
            Provides a mechanism that allows loading of <see cref="T:Atom.Xna.Sprite"/> assets.
            </summary>
        </member>
        <member name="M:Atom.Xna.INormalSpriteLoader.LoadSprite(System.String)">
            <summary>
            Loads the <see cref="T:Atom.Xna.Sprite"/> with the given <paramref name="assetName"/>.
            </summary>
            <param name="assetName">
            The name that uniquely identifies the Sprite to load.
            </param>
            <returns>
            The Sprite that has been loaden.
            </returns>
        </member>
        <member name="T:Atom.Xna.INormalSpriteSource">
            <summary>
            Provides a mechanism that allows receiving a set of <see cref="T:Atom.Xna.Sprite"/>s.
            </summary>
        </member>
        <member name="P:Atom.Xna.INormalSpriteSource.Sprites">
            <summary>
            Gets the <see cref="T:Atom.Xna.Sprite"/>s this INormalSpriteSource contains.
            </summary>
        </member>
        <member name="T:Atom.Xna.ISprite">
            <summary>
            Represents a two dimensional image that can easily be
            drawn on the screen.
            </summary>
        </member>
        <member name="P:Atom.Xna.ISprite.Source">
            <summary>
            Gets the <see cref="T:Atom.Math.Rectangle"/> that defines the location 
            of this ISprite in the <see cref="P:Atom.Xna.ISprite.Texture"/>.
            </summary>
            <value>The default value is <see cref="P:Atom.Math.Rectangle.Empty"/>.</value>
        </member>
        <member name="P:Atom.Xna.ISprite.Texture">
            <summary>
            Gets the Texture2D of this ISprite.
            </summary>
        </member>
        <member name="P:Atom.Xna.ISprite.Color">
            <summary>
            Gets the color this ISprite is tinted-in by default.
            </summary>
            <value>
            The default value is <see cref="P:Microsoft.Xna.Framework.Color.White"/>.
            </value>
        </member>
        <member name="P:Atom.Xna.ISprite.Scale">
            <summary>
            Gets the scaling factor that is applied by default for this ISprite.
            </summary>
            <value>The default value is <see cref="P:Atom.Math.Vector2.One"/>.</value>
        </member>
        <member name="P:Atom.Xna.ISprite.Origin">
            <summary>
            Gets the origin of rotation and scaling used by this ISprite.
            </summary>
            <value>The default value is <see cref="P:Atom.Math.Vector2.Zero"/>.</value>
        </member>
        <member name="P:Atom.Xna.ISprite.Rotation">
            <summary>
            Gets the rotation of this ISprite in radians.
            </summary>
        </member>
        <member name="M:Atom.Xna.ISprite.Draw(Atom.Math.Vector2,Atom.Xna.Batches.ISpriteBatch)">
            <summary>
            Draws this ISprite at the given <paramref name="position"/>
            to the given <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> using the default settings of this ISprite.
            </summary>
            <remarks>
            <para>
            This call must be within the ISpriteBatch.Begin/ISpriteBatch.End
            block of the given <paramref name="batch"/>.
            </para>
            <para>
            It is NOT checked wheter the given <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> is null.
            </para>
            </remarks>
            <param name="position">
            The position to render the sprite at.
            </param>
            <param name="batch">
            The <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> to draw to.
            </param>
        </member>
        <member name="M:Atom.Xna.ISprite.Draw(System.Single,System.Single,Atom.Xna.Batches.ISpriteBatch)">
            <summary>
            Draws this ISprite at the given position
            to the given <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> using the default settings of this ISprite.
            </summary>
            <remarks>
            <para>
            This call must be within the ISpriteBatch.Begin/ISpriteBatch.End
            block of the given <paramref name="batch"/>.
            </para>
            <para>
            It is NOT checked wheter the given <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> is null.
            </para>
            </remarks>
            <param name="x">
            The position to render the sprite at on the x-axis.
            </param>
            <param name="y">
            The position to render the sprite at on the y-axis.
            </param>
            <param name="batch">
            The <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> to draw to.
            </param>
        </member>
        <member name="M:Atom.Xna.ISprite.Draw(Atom.Math.Vector2,System.Single,Atom.Xna.Batches.ISpriteBatch)">
            <summary>
            Draws this ISprite at the given <paramref name="position"/>
            to the given <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> using the default settings of this <see cref="T:Atom.Xna.ISprite"/>.
            </summary>
            <remarks>
            <para>
            This call must be within the ISpriteBatch.Begin/ISpriteBatch.End
            block of the given <paramref name="batch"/>.
            </para>
            <para>
            It is NOT checked wheter the given <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> is null.
            </para>
            </remarks>
            <param name="position">
            The position to render the sprite at.
            </param>
            <param name="depthLayer">
            The depth layer to draw the sprite at; used for sorting.
            </param>
            <param name="batch">
            The <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> to draw to.
            </param>
        </member>
        <member name="M:Atom.Xna.ISprite.Draw(Atom.Math.Vector2,Microsoft.Xna.Framework.Color,Atom.Xna.Batches.ISpriteBatch)">
            <summary>
            Draws this ISprite at the given <paramref name="position"/>
            to the given <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> using the default settings of this ISprite.
            </summary>
            <remarks>
            <para>
            This call must be within the ISpriteBatch.Begin/ISpriteBatch.End
            block of the given <paramref name="batch"/>.
            </para>
            <para>
            It is NOT checked wheter the given <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> is null.
            </para>
            </remarks>
            <param name="position">
            The position to render the sprite at.
            </param>
            <param name="color">
            The color channel modulation to use.
            </param>
            <param name="batch">
            The <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> to draw to.
            </param>
        </member>
        <member name="M:Atom.Xna.ISprite.Draw(Atom.Math.Vector2,Microsoft.Xna.Framework.Color,System.Single,Atom.Xna.Batches.ISpriteBatch)">
            <summary>
            Draws this ISprite at the given <paramref name="position"/>
            to the given <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> using the default settings of this ISprite.
            </summary>
            <remarks>
            <para>
            This call must be within the ISpriteBatch.Begin/ISpriteBatch.End
            block of the given <paramref name="batch"/>.
            </para>
            <para>
            It is NOT checked wheter the given <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> is null.
            </para>
            </remarks>
            <param name="position">
            The position to render the sprite at.
            </param>
            <param name="color">The color channel modulation to use.</param>
            <param name="depthLayer">The layer to draw at.</param>
            <param name="batch">
            The <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> to draw to.
            </param>
        </member>
        <member name="M:Atom.Xna.ISprite.Draw(Atom.Math.Rectangle,Microsoft.Xna.Framework.Color,Atom.Xna.Batches.ISpriteBatch)">
            <summary>
            Draws this ISprite into the given <paramref name="destination"/> rectangle.
            </summary>
            <remarks>
            <para>
            This call must be within the ISpriteBatch.Begin/ISpriteBatch.End
            block of the given <paramref name="batch"/>.
            </para>
            <para>
            It is NOT checked wheter the given <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> is null.
            </para>
            </remarks>
            <param name="destination">
            The rectangle to draw the sprite in.
            </param>
            <param name="color">
            The color channel modulation to use.
            </param>
            <param name="batch">
            The <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> to draw to.
            </param>
        </member>
        <member name="M:Atom.Xna.ISprite.Draw(Atom.Math.Vector2,System.Single,Atom.Math.Vector2,Atom.Math.Vector2,Atom.Xna.Batches.ISpriteBatch)">
            <summary>
            Draws this ISprite at the given <paramref name="position"/>
            to the given <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> using a mix of the specified and the default settings.
            </summary>
            <remarks>
            <para>
            This call must be within the ISpriteBatch.Begin/ISpriteBatch.End
            block of the given <paramref name="batch"/>.
            </para>
            <para>
            It is NOT checked wheter the given <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> is null.
            </para>
            </remarks>
            <param name="position">
            The position to render the sprite at.
            </param>
            <param name="rotation">
            The rotation in radians.
            </param>
            <param name="origin">
            The origin of rotation and scaling.
            </param>
            <param name="scale">
            The scaling factor to apply.
            </param>
            <param name="batch">
            The <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> to draw to.
            </param>
        </member>
        <member name="M:Atom.Xna.ISprite.Draw(Atom.Math.Vector2,Microsoft.Xna.Framework.Color,System.Single,Atom.Math.Vector2,Atom.Math.Vector2,Atom.Xna.Batches.ISpriteBatch)">
            <summary>
            Draws this ISprite at the given <paramref name="position"/>
            to the given <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> using a mix of the specified and the default settings.
            </summary>
            <remarks>
            <para>
            This call must be within the ISpriteBatch.Begin/ISpriteBatch.End
            block of the given <paramref name="batch"/>.
            </para>
            <para>
            It is NOT checked wheter the given <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> is null.
            </para>
            </remarks>
            <param name="position">
            The position to render the sprite at.
            </param>
            <param name="color">The color channel modulation to use.</param>
            <param name="rotation">The rotation in radians.</param>
            <param name="origin">The origin of rotation and scaling.</param>
            <param name="scale">The scaling factor to apply.</param>
            <param name="batch">
            The <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> to draw to.
            </param>
        </member>
        <member name="M:Atom.Xna.ISprite.Draw(Atom.Math.Vector2,Microsoft.Xna.Framework.Color,System.Single,Atom.Math.Vector2,Atom.Math.Vector2,Microsoft.Xna.Framework.Graphics.SpriteEffects,Atom.Xna.Batches.ISpriteBatch)">
            <summary>
            Draws this ISprite at the given <paramref name="position"/>
            to the given <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> using the specified settings.
            </summary>
            <remarks>
            <para>
            This call must be within the ISpriteBatch.Begin/ISpriteBatch.End
            block of the given <paramref name="batch"/>.
            </para>
            <para>
            It is NOT checked wheter the given <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> is null.
            </para>
            </remarks>
            <param name="position">
            The position to render the sprite at.
            </param>
            <param name="color">
            The color channel modulation to use.
            </param>
            <param name="rotation">
            The rotation in radians.
            </param>
            <param name="origin">
            The origin of rotation and scaling.
            </param>
            <param name="scale">
            The scaling factor to apply.
            </param>
            <param name="effects">
            The SpriteEffect to apply.
            </param>
            <param name="batch">
            The <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> to draw to.
            </param>
        </member>
        <member name="M:Atom.Xna.ISprite.Draw(Atom.Math.Vector2,Microsoft.Xna.Framework.Color,System.Single,Atom.Math.Vector2,Atom.Math.Vector2,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single,Atom.Xna.Batches.ISpriteBatch)">
            <summary>
            Draws this ISprite at the given <paramref name="position"/>
            to the given <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> using the specified settings.
            </summary>
            <remarks>
            <para>
            This call must be within the ISpriteBatch.Begin/ISpriteBatch.End
            block of the given <paramref name="batch"/>.
            </para>
            <para>
            It is NOT checked wheter the given <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> is null.
            </para>
            </remarks>
            <param name="position">
            The position to render the sprite at.
            </param>
            <param name="color">
            The color channel modulation to use.
            </param>
            <param name="rotation">
            The rotation in radians.
            </param>
            <param name="origin">
            The origin of rotation and scaling.
            </param>
            <param name="scale">
            The scaling factor to apply.
            </param>
            <param name="effects">
            The SpriteEffect to apply.
            </param>
            <param name="layerDepth">
            The depth layer to draw the Sprite at.
            </param>
            <param name="batch">
            The <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> to draw to.
            </param>
        </member>
        <member name="M:Atom.Xna.ISprite.CloneInstance">
            <summary>
            Returns an instance of this ISprite. 
            This may be a new object or the original object.
            </summary>
            <remarks>
            The cloned object may be the same the original object
            if there is no need to have independent instances.
            </remarks>
            <returns>
            The clone of this instance.
            </returns>
        </member>
        <member name="T:Atom.Xna.ISpriteAsset">
            <summary>
            Represents a definition of a two dimensional image that can easily be
            drawn on the screen by creating an <see cref="T:Atom.Xna.ISprite"/> instance from it.
            </summary>
        </member>
        <member name="M:Atom.Xna.ISpriteAsset.CreateInstance">
            <summary>
            Creates an instance of this ISpriteAsset.
            </summary>
            <returns>
            The instance that has been created.
            </returns>
        </member>
        <member name="T:Atom.Xna.ISpriteDrawContext">
            <summary>
            Represents an <see cref="T:Atom.IDrawContext"/> that allows the drawing
            of sprites.
            </summary>
        </member>
        <member name="P:Atom.Xna.ISpriteDrawContext.Batch">
            <summary>
            Gets the <see cref="T:Atom.Xna.Batches.IComposedSpriteBatch"/> that should be used to draw
            sprites and various shapes when using this ISpriteDrawContext.
            </summary>
        </member>
        <member name="M:Atom.Xna.ISpriteDrawContext.Begin">
            <summary>
            Prepares the graphics device for drawing sprites.
            </summary>
        </member>
        <member name="M:Atom.Xna.ISpriteDrawContext.Begin(Microsoft.Xna.Framework.Graphics.BlendState)">
            <summary>
            Prepares the graphics device for drawing sprites with specified blending options.
            </summary>
            <param name="blendState">Blending options to use when rendering.</param>
        </member>
        <member name="M:Atom.Xna.ISpriteDrawContext.Begin(Microsoft.Xna.Framework.Graphics.BlendState,Microsoft.Xna.Framework.Graphics.SamplerState,Microsoft.Xna.Framework.Graphics.SpriteSortMode)">
            <summary>
            Prepares the graphics device for drawing sprites with specified blending,
            sorting, and render state options.
            </summary>
            <param name="blendState">Blending options to use when rendering.</param>
            <param name="samplerState">Sampler options to use when rendering.</param>
            <param name="sortMode">Sorting options to use when rendering.</param>
        </member>
        <member name="M:Atom.Xna.ISpriteDrawContext.Begin(Microsoft.Xna.Framework.Graphics.BlendState,Microsoft.Xna.Framework.Graphics.SamplerState,Microsoft.Xna.Framework.Graphics.SpriteSortMode,Atom.Math.Matrix4)">
            <summary> 
            Prepares the graphics device for drawing sprites with specified blending,
            sorting, and render state options, and a global transform matrix.
            </summary>
            <param name="blendState">Blending options to use when rendering.</param>
            <param name="samplerState">Sampler options to use when rendering.</param>
            <param name="sortMode">Sorting options to use when rendering.</param>
            <param name="transform">
            A matrix to apply to position, rotation, scale, and depth data passed to Spritebatch.Draw.
            </param>
        </member>
        <member name="M:Atom.Xna.ISpriteDrawContext.Begin(Microsoft.Xna.Framework.Graphics.BlendState,Microsoft.Xna.Framework.Graphics.SamplerState,Microsoft.Xna.Framework.Graphics.SpriteSortMode,Microsoft.Xna.Framework.Matrix)">
            <summary> 
            Prepares the graphics device for drawing sprites with specified blending,
            sorting, and render state options, and a global transform matrix.
            </summary>
            <param name="blendState">Blending options to use when rendering.</param>
            <param name="samplerState">Sampler options to use when rendering.</param>
            <param name="sortMode">Sorting options to use when rendering.</param>
            <param name="transform">
            A matrix to apply to position, rotation, scale, and depth data passed to Spritebatch.Draw.
            </param>
        </member>
        <member name="M:Atom.Xna.ISpriteDrawContext.End">
            <summary>
            Flushes the sprite batch and restores the device state to how it was before
            Spritebatch.Begin was called.
            </summary>
        </member>
        <member name="T:Atom.Xna.ISpriteLoader">
            <summary>
            Provides a mechanism that allows loading of <see cref="T:Atom.Xna.Sprite"/> and
            <see cref="T:Atom.Xna.AnimatedSprite"/> assets.
            </summary>
        </member>
        <member name="M:Atom.Xna.ISpriteLoader.Load(System.String)">
            <summary>
            Attempts to loads the <see cref="T:Atom.Xna.Sprite"/> or an instance of
            an <see cref="T:Atom.Xna.AnimatedSprite"/> that has the given <paramref name="assetName"/>.
            </summary>
            <param name="assetName">
            The name that uniquely identifies the asset to load.
            </param>
            <returns>
            The ISprite that has been loaden.
            </returns>
        </member>
        <member name="M:Atom.Xna.ISpriteLoader.Exists(System.String)">
            <summary>
            Determines whether an <see cref="T:Atom.Xna.Sprite"/> with the given <paramref name="assetName"/> exists.
            </summary>
            <param name="assetName">
            The name that uniquely identifies the asset.
            </param>
            <returns>
            true if it exists; -or- otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Xna.ISpriteLoader.LoadAsset(System.String)">
            <summary>
            Attempts to loads the <see cref="T:Atom.Xna.Sprite"/> or an instance of
            an <see cref="T:Atom.Xna.AnimatedSprite"/> that has the given <paramref name="assetName"/>.
            </summary>
            <remarks>
            No ISprite instance is created.
            </remarks>
            <param name="assetName">
            The name that uniquely identifies the asset to load.
            </param>
            <returns>
            The ISpriteAsset that has been loaden.
            </returns>
        </member>
        <member name="T:Atom.Xna.ISpriteSource">
            <summary>
            Provides a mechanism that allows receiving a set of <see cref="T:Atom.Xna.Sprite"/>s
            and <see cref="T:Atom.Xna.AnimatedSprite"/>s.
            </summary>
        </member>
        <member name="T:Atom.Xna.NullSpriteLoader">
            <summary>
            Implements an <see cref="T:Atom.Xna.ISpriteLoader"/> that does absolutely nothing.
            </summary>
        </member>
        <member name="P:Atom.Xna.NullSpriteLoader.RootDirectory">
            <summary>
            Gets or sets the root directory that is automatically
            prefixed to assets loaded by this IAssetLoader.
            </summary>
        </member>
        <member name="M:Atom.Xna.NullSpriteLoader.#ctor">
            <summary>
            Initializes a new instance of the NullSpriteLoader class.
            </summary>
        </member>
        <member name="M:Atom.Xna.NullSpriteLoader.Load(System.String)">
            <summary>
            Attempts to loads the <see cref="T:Atom.Xna.Sprite"/> or an instance of
            an <see cref="T:Atom.Xna.AnimatedSprite"/> that has the given <paramref name="assetName"/>.
            </summary>
            <param name="assetName">
            The name that uniquely identifies the asset to load.
            </param>
            <returns>
            The ISprite that has been loaden.
            </returns>
        </member>
        <member name="M:Atom.Xna.NullSpriteLoader.Exists(System.String)">
            <summary>
            Determines whether an <see cref="T:Atom.Xna.Sprite"/> with the given <paramref name="assetName"/> exists.
            </summary>
            <param name="assetName">
            The name that uniquely identifies the asset.
            </param>
            <returns>
            true if it exists; -or- otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Xna.NullSpriteLoader.LoadAsset(System.String)">
            <summary>
            Attempts to loads the <see cref="T:Atom.Xna.Sprite"/> or an instance of
            an <see cref="T:Atom.Xna.AnimatedSprite"/> that has the given <paramref name="assetName"/>.
            </summary>
            <param name="assetName">
            The name that uniquely identifies the asset to load.
            </param>
            <returns>
            The ISpriteAsset that has been loaden.
            </returns>
        </member>
        <member name="M:Atom.Xna.NullSpriteLoader.LoadSprite(System.String)">
            <summary>
            Loads the <see cref="T:Atom.Xna.Sprite"/> with the given <paramref name="assetName"/>.
            </summary>
            <param name="assetName">
            The name that uniquely identifies the Sprite to load.
            </param>
            <returns>
            The Sprite that has been loaden.
            </returns>
        </member>
        <member name="M:Atom.Xna.NullSpriteLoader.LoadAnimatedSprite(System.String)">
            <summary>
            Loads the AnimatedSprite with the given <paramref name="assetName"/>.
            </summary>
            <param name="assetName">
            The name that uniquely identifies the AnimatedSprite to load.
            </param>
            <returns>
            The AnimatedSprite that has been loaden.
            </returns>
        </member>
        <member name="M:Atom.Xna.NullSpriteLoader.Dispose">
            <summary>
            Disposes the resources this IAssetLoader has aquired.
            </summary>
        </member>
        <member name="M:Atom.Xna.NullSpriteLoader.UnloadAll">
            <summary>
            Unloads all assets that have been loaden with this IAssetLoader.
            </summary>
        </member>
        <member name="T:Atom.Xna.PooledSpriteWrapper">
            <summary>
            Represents a wrapper around an existing <see cref="T:Atom.Xna.ISprite"/> that adds
            pooling support. <seealso cref="T:Atom.Collections.Pooling.PooledObjectWrapper`1"/>
            </summary>
        </member>
        <member name="P:Atom.Xna.PooledSpriteWrapper.Name">
            <summary>
            Gets the name that uniquely identifies the ISprite.
            </summary>
        </member>
        <member name="P:Atom.Xna.PooledSpriteWrapper.Size">
            <summary>
            Gets the size of this ISprite (in pixels).
            </summary>
        </member>
        <member name="P:Atom.Xna.PooledSpriteWrapper.Width">
            <summary>
            Gets the width of this ISprite (in pixels).
            </summary>
        </member>
        <member name="P:Atom.Xna.PooledSpriteWrapper.Height">
            <summary>
            Gets the height of this ISprite (in pixels).
            </summary>
        </member>
        <member name="P:Atom.Xna.PooledSpriteWrapper.Source">
            <summary>
            Gets the <see cref="T:Atom.Math.Rectangle"/> that defines the location 
            of this ISprite in the <see cref="P:Atom.Xna.PooledSpriteWrapper.Texture"/>.
            </summary>
            <value>The default value is <see cref="P:Atom.Math.Rectangle.Empty"/>.</value>
        </member>
        <member name="P:Atom.Xna.PooledSpriteWrapper.Texture">
            <summary>
            Gets the Texture2D of this ISprite.
            </summary>
        </member>
        <member name="P:Atom.Xna.PooledSpriteWrapper.Color">
            <summary>
            Gets the color this ISprite is tinted-in by default.
            </summary>
            <value>
            The default value is <see cref="P:Microsoft.Xna.Framework.Color.White"/>.
            </value>
        </member>
        <member name="P:Atom.Xna.PooledSpriteWrapper.Scale">
            <summary>
            Gets the scaling factor that is applied by default for this ISprite.
            </summary>
            <value>The default value is <see cref="P:Atom.Math.Vector2.One"/>.</value>
        </member>
        <member name="P:Atom.Xna.PooledSpriteWrapper.Origin">
            <summary>
            Gets the origin of rotation and scaling used by this ISprite.
            </summary>
            <value>The default value is <see cref="P:Atom.Math.Vector2.Zero"/>.</value>
        </member>
        <member name="P:Atom.Xna.PooledSpriteWrapper.Rotation">
            <summary>
            Gets the rotation of this ISprite in radians.
            </summary>
        </member>
        <member name="M:Atom.Xna.PooledSpriteWrapper.#ctor(Atom.Xna.ISprite)">
            <summary>
            Initializes a new instance of the PooledSpriteWrapper class.
            </summary>
            <param name="pooledSprite">
            The sprite that is intended to be pooled.
            </param>
        </member>
        <member name="M:Atom.Xna.PooledSpriteWrapper.Draw(Atom.Math.Vector2,Atom.Xna.Batches.ISpriteBatch)">
            <summary>
            Draws this ISprite at the given <paramref name="position"/>
            to the given <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> using the default settings of this ISprite.
            </summary>
            <remarks>
            <para>
            This call must be within the ISpriteBatch.Begin/ISpriteBatch.End
            block of the given <paramref name="batch"/>.
            </para>
            <para>
            It is NOT checked wheter the given <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> is null.
            </para>
            </remarks>
            <param name="position">
            The position to render the sprite at.
            </param>
            <param name="batch">
            The <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> to draw to.
            </param>
        </member>
        <member name="M:Atom.Xna.PooledSpriteWrapper.Draw(System.Single,System.Single,Atom.Xna.Batches.ISpriteBatch)">
            <summary>
            Draws this ISprite at the given position
            to the given <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> using the default settings of this ISprite.
            </summary>
            <remarks>
            <para>
            This call must be within the ISpriteBatch.Begin/ISpriteBatch.End
            block of the given <paramref name="batch"/>.
            </para>
            <para>
            It is NOT checked wheter the given <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> is null.
            </para>
            </remarks>
            <param name="x">
            The position to render the sprite at on the x-axis.
            </param>
            <param name="y">
            The position to render the sprite at on the y-axis.
            </param>
            <param name="batch">
            The <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> to draw to.
            </param>
        </member>
        <member name="M:Atom.Xna.PooledSpriteWrapper.Draw(Atom.Math.Vector2,System.Single,Atom.Xna.Batches.ISpriteBatch)">
            <summary>
            Draws this ISprite at the given <paramref name="position"/>
            to the given <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> using the default settings of this <see cref="T:Atom.Xna.ISprite"/>.
            </summary>
            <remarks>
            <para>
            This call must be within the ISpriteBatch.Begin/ISpriteBatch.End
            block of the given <paramref name="batch"/>.
            </para>
            <para>
            It is NOT checked wheter the given <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> is null.
            </para>
            </remarks>
            <param name="position">
            The position to render the sprite at.
            </param>
            <param name="depthLayer">
            The depth layer to draw the sprite at; used for sorting.
            </param>
            <param name="batch">
            The <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> to draw to.
            </param>
        </member>
        <member name="M:Atom.Xna.PooledSpriteWrapper.Draw(Atom.Math.Vector2,Microsoft.Xna.Framework.Color,Atom.Xna.Batches.ISpriteBatch)">
            <summary>
            Draws this ISprite at the given <paramref name="position"/>
            to the given <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> using the default settings of this ISprite.
            </summary>
            <remarks>
            <para>
            This call must be within the ISpriteBatch.Begin/ISpriteBatch.End
            block of the given <paramref name="batch"/>.
            </para>
            <para>
            It is NOT checked wheter the given <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> is null.
            </para>
            </remarks>
            <param name="position">
            The position to render the sprite at.
            </param>
            <param name="color">
            The color channel modulation to use.
            </param>
            <param name="batch">
            The <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> to draw to.
            </param>
        </member>
        <member name="M:Atom.Xna.PooledSpriteWrapper.Draw(Atom.Math.Vector2,Microsoft.Xna.Framework.Color,System.Single,Atom.Xna.Batches.ISpriteBatch)">
            <summary>
            Draws this ISprite at the given <paramref name="position"/>
            to the given <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> using the default settings of this ISprite.
            </summary>
            <remarks>
            <para>
            This call must be within the ISpriteBatch.Begin/ISpriteBatch.End
            block of the given <paramref name="batch"/>.
            </para>
            <para>
            It is NOT checked wheter the given <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> is null.
            </para>
            </remarks>
            <param name="position">
            The position to render the sprite at.
            </param>
            <param name="color">The color channel modulation to use.</param>
            <param name="depthLayer">The layer to draw at.</param>
            <param name="batch">
            The <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> to draw to.
            </param>
        </member>
        <member name="M:Atom.Xna.PooledSpriteWrapper.Draw(Atom.Math.Rectangle,Microsoft.Xna.Framework.Color,Atom.Xna.Batches.ISpriteBatch)">
            <summary>
            Draws this ISprite into the given <paramref name="destination"/> rectangle.
            </summary>
            <remarks>
            <para>
            This call must be within the ISpriteBatch.Begin/ISpriteBatch.End
            block of the given <paramref name="batch"/>.
            </para>
            <para>
            It is NOT checked wheter the given <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> is null.
            </para>
            </remarks>
            <param name="destination">
            The rectangle to draw the sprite in.
            </param>
            <param name="color">
            The color channel modulation to use.
            </param>
            <param name="batch">
            The <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> to draw to.
            </param>
        </member>
        <member name="M:Atom.Xna.PooledSpriteWrapper.Draw(Atom.Math.Vector2,System.Single,Atom.Math.Vector2,Atom.Math.Vector2,Atom.Xna.Batches.ISpriteBatch)">
            <summary>
            Draws this ISprite at the given <paramref name="position"/>
            to the given <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> using a mix of the specified and the default settings.
            </summary>
            <remarks>
            <para>
            This call must be within the ISpriteBatch.Begin/ISpriteBatch.End
            block of the given <paramref name="batch"/>.
            </para>
            <para>
            It is NOT checked wheter the given <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> is null.
            </para>
            </remarks>
            <param name="position">
            The position to render the sprite at.
            </param>
            <param name="rotation">
            The rotation in radians.
            </param>
            <param name="origin">
            The origin of rotation and scaling.
            </param>
            <param name="scale">
            The scaling factor to apply.
            </param>
            <param name="batch">
            The <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> to draw to.
            </param>
        </member>
        <member name="M:Atom.Xna.PooledSpriteWrapper.Draw(Atom.Math.Vector2,Microsoft.Xna.Framework.Color,System.Single,Atom.Math.Vector2,Atom.Math.Vector2,Atom.Xna.Batches.ISpriteBatch)">
            <summary>
            Draws this ISprite at the given <paramref name="position"/>
            to the given <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> using a mix of the specified and the default settings.
            </summary>
            <remarks>
            <para>
            This call must be within the ISpriteBatch.Begin/ISpriteBatch.End
            block of the given <paramref name="batch"/>.
            </para>
            <para>
            It is NOT checked wheter the given <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> is null.
            </para>
            </remarks>
            <param name="position">
            The position to render the sprite at.
            </param>
            <param name="color">The color channel modulation to use.</param>
            <param name="rotation">The rotation in radians.</param>
            <param name="origin">The origin of rotation and scaling.</param>
            <param name="scale">The scaling factor to apply.</param>
            <param name="batch">
            The <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> to draw to.
            </param>
        </member>
        <member name="M:Atom.Xna.PooledSpriteWrapper.Draw(Atom.Math.Vector2,Microsoft.Xna.Framework.Color,System.Single,Atom.Math.Vector2,Atom.Math.Vector2,Microsoft.Xna.Framework.Graphics.SpriteEffects,Atom.Xna.Batches.ISpriteBatch)">
            <summary>
            Draws this ISprite at the given <paramref name="position"/>
            to the given <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> using the specified settings.
            </summary>
            <remarks>
            <para>
            This call must be within the ISpriteBatch.Begin/ISpriteBatch.End
            block of the given <paramref name="batch"/>.
            </para>
            <para>
            It is NOT checked wheter the given <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> is null.
            </para>
            </remarks>
            <param name="position">
            The position to render the sprite at.
            </param>
            <param name="color">
            The color channel modulation to use.
            </param>
            <param name="rotation">
            The rotation in radians.
            </param>
            <param name="origin">
            The origin of rotation and scaling.
            </param>
            <param name="scale">
            The scaling factor to apply.
            </param>
            <param name="effects">
            The SpriteEffect to apply.
            </param>
            <param name="batch">
            The <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> to draw to.
            </param>
        </member>
        <member name="M:Atom.Xna.PooledSpriteWrapper.Draw(Atom.Math.Vector2,Microsoft.Xna.Framework.Color,System.Single,Atom.Math.Vector2,Atom.Math.Vector2,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single,Atom.Xna.Batches.ISpriteBatch)">
            <summary>
            Draws this ISprite at the given <paramref name="position"/>
            to the given <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> using the specified settings.
            </summary>
            <remarks>
            <para>
            This call must be within the ISpriteBatch.Begin/ISpriteBatch.End
            block of the given <paramref name="batch"/>.
            </para>
            <para>
            It is NOT checked wheter the given <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> is null.
            </para>
            </remarks>
            <param name="position">
            The position to render the sprite at.
            </param>
            <param name="color">
            The color channel modulation to use.
            </param>
            <param name="rotation">
            The rotation in radians.
            </param>
            <param name="origin">
            The origin of rotation and scaling.
            </param>
            <param name="scale">
            The scaling factor to apply.
            </param>
            <param name="effects">
            The SpriteEffect to apply.
            </param>
            <param name="layerDepth">
            The depth layer to draw the Sprite at.
            </param>
            <param name="batch">
            The <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> to draw to.
            </param>
        </member>
        <member name="M:Atom.Xna.PooledSpriteWrapper.Update(Atom.IUpdateContext)">
            <summary>
            Updates the ISprite this PooledSpriteWrapper wraps around;
            if required.
            </summary>
            <param name="updateContext">
            The current IUpdateContext.
            </param>
        </member>
        <member name="M:Atom.Xna.PooledSpriteWrapper.CloneInstance">
            <summary>
            Returns an instance of this ISprite. 
            This may be a new object or the original object.
            </summary>
            <remarks>
            The cloned object may be the same the original object
            if there is no need to have independent instances.
            </remarks>
            <returns>
            The clone of this instance.
            </returns>
        </member>
        <member name="T:Atom.Xna.ISpriteSheet">
            <summary>
            Represents an ordered sheet of <see cref="T:Atom.Xna.ISprite"/>s.
            </summary>
        </member>
        <member name="T:Atom.Xna.ISpriteSheetLoader">
            <summary>
            Provides a mechanism that allows loading of <see cref="T:Atom.Xna.ISpriteSheet"/> assets.
            </summary>
        </member>
        <member name="M:Atom.Xna.ISpriteSheetLoader.LoadSpriteSheet(System.String)">
            <summary>
            Loads the <see cref="T:Atom.Xna.ISpriteSheet"/> resource with the given <paramref name="assetName"/>.
            </summary>
            <param name="assetName">
            The name that uniquely identifies the ISpriteSheet resource to load.
            </param>
            <returns>
            The ISpriteSheet resource thas has been loaden.
            </returns>
        </member>
        <member name="T:Atom.Xna.SpriteSheet">
            <summary>
            Implements an <see cref="T:Atom.Xna.ISpriteSheet"/> that
            represents an ordered sheet of <see cref="T:Atom.Xna.ISprite"/>s.
            </summary>
            <content>
            Defines the default IObjectReaderWriter for the Sprite class.
            </content>
        </member>
        <member name="P:Atom.Xna.SpriteSheet.Name">
            <summary>
            Gets or sets the name of this SpriteSheet.
            </summary>
            <value>
            The name that (uniquely) identifies this SpriteSheet.
            </value>
        </member>
        <member name="P:Atom.Xna.SpriteSheet.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Atom.Xna.ISprite"/> at the given zero-based <paramref name="index"/>.
            </summary>
            <param name="index">
            The index of the sprie to get or set.
            </param>
            <returns>
            The <see cref="T:Atom.Xna.ISprite"/> at the given zero-based <paramref name="index"/>.
            </returns>
        </member>
        <member name="P:Atom.Xna.SpriteSheet.Count">
            <summary>
            Gets the number of <see cref="T:Atom.Xna.ISprite"/>s this SpriteSheet contains.
            </summary>
            <value>The number of sprites this SpriteSheet contains.</value>
        </member>
        <member name="P:Atom.Xna.SpriteSheet.UpdatableCount">
            <summary>
            Gets the number of <see cref="T:Atom.Xna.ISprite"/>s this SpriteSheet contains that implement 
            the <see cref="T:Atom.IUpdateable"/> interface.
            </summary>
        </member>
        <member name="P:Atom.Xna.SpriteSheet.System#Collections#Generic#ICollection{Atom#Xna#ISprite}#IsReadOnly">
            <summary>
            Gets a value indicating whether this ICollection is read-only.
            </summary>
        </member>
        <member name="M:Atom.Xna.SpriteSheet.Update(Atom.IUpdateContext)">
            <summary>
            Updates this SpriteSheet.
            </summary>
            <param name="updateContext">
            The current <see cref="T:Atom.IUpdateContext"/>.
            </param>
        </member>
        <member name="M:Atom.Xna.SpriteSheet.AddToUpdateList(Atom.Xna.ISprite)">
            <summary>
            Adds the given ISprite to the list of sprites that
            need to be updated each frame if it implements IUpdateable.
            </summary>
            <param name="sprite">
            The sprite to check.
            </param>
        </member>
        <member name="M:Atom.Xna.SpriteSheet.RemoveFromUpdateList(Atom.Xna.ISprite)">
            <summary>
            Removes the given ISprite from the list of sprites
            that need to be updated each frame.
            </summary>
            <param name="sprite">
            The sprite to check.
            </param>
        </member>
        <member name="M:Atom.Xna.SpriteSheet.IndexOf(Atom.Xna.ISprite)">
            <summary>
            Determines the index of a specific item in this SpriteSheet.
            </summary>
            <param name="item">
            The object to locate in this SpriteSheet.
            </param>
            <returns>
            The index of item if found in the list;
            otherwise, -1.
            </returns>
        </member>
        <member name="M:Atom.Xna.SpriteSheet.Insert(System.Int32,Atom.Xna.ISprite)">
            <summary>
            Inserts an item into this SpriteSheet at the specified index.
            </summary>
            <param name="index">
            The zero-based index at which item should be inserted.
            </param>
            <param name="item">
            The ISprite to insert into this SpriteSheet.
            </param>
        </member>
        <member name="M:Atom.Xna.SpriteSheet.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:Atom.Xna.ISprite"/> item at the specified index.
            </summary>
            <param name="index">
            The zero-based index of the item to remove.
            </param>
        </member>
        <member name="M:Atom.Xna.SpriteSheet.Add(Atom.Xna.ISprite)">
            <summary>
            Adds the specified ISprite to the end of this SpriteSheet.
            </summary>
            <param name="item">
            The sprite to insert.
            </param>
        </member>
        <member name="M:Atom.Xna.SpriteSheet.Clear">
            <summary>
            Removes all ISprites from this SpriteSheet.
            </summary>
        </member>
        <member name="M:Atom.Xna.SpriteSheet.Contains(Atom.Xna.ISprite)">
            <summary>
            Determines whether this SpriteSheet contains the
            specified ISprite.
            </summary>
            <param name="item">
            The ISprite to locate.
            </param>
            <returns>
            true if item is found in this SpriteSheet;
            otherwise, false.
            </returns>
        </member>
        <member name="M:Atom.Xna.SpriteSheet.CopyTo(Atom.Xna.ISprite[],System.Int32)">
            <summary>
            Copies the ISprites of this SpriteSheet to an System.Array,
            starting at a particular System.Array index.
            </summary>
            <param name="array">
            The destination array.
            </param>
            <param name="arrayIndex">
            The zero-based index in array at which copying begins.
            </param>
        </member>
        <member name="M:Atom.Xna.SpriteSheet.Remove(Atom.Xna.ISprite)">
            <summary>
            Attempts to remove the specified ISprite from this SpriteSheet.
            </summary>
            <param name="item">
            The sprite to remove.
            </param>
            <returns>
            true if item was successfully removed from this SpriteSheet;
            otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Xna.SpriteSheet.GetEnumerator">
            <summary>
            Returns an IEnumerator{ISprite} that iterates through the ISprites
            in this SpriteSheet.
            </summary>
            <returns>
            A new IEnumerator{ISprite}
            </returns>
        </member>
        <member name="M:Atom.Xna.SpriteSheet.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an IEnumerator that iterates through the ISprites
            in this SpriteSheet.
            </summary>
            <returns>
            A new IEnumerator.
            </returns>
        </member>
        <member name="F:Atom.Xna.SpriteSheet.sprites">
            <summary>
            The list of sprites in the <see cref="T:Atom.Xna.SpriteSheet"/>, sorted by index.
            </summary>
        </member>
        <member name="F:Atom.Xna.SpriteSheet.spritesToUpdate">
            <summary>
            The <see cref="T:Atom.Xna.ISprite"/> that are required to be updated each frame.
            </summary>
        </member>
        <member name="T:Atom.Xna.SpriteSheet.ReaderWriter">
            <summary>
            Defines the default IObjectReaderWriter that implements serialization and deserialization
            of <see cref="T:Atom.Xna.SpriteSheet"/> objects. This class can't be inherited.
            </summary>
        </member>
        <member name="F:Atom.Xna.SpriteSheet.ReaderWriter.Extension">
            <summary>
            The extension of the SpriteSheet files: '.sprsh'
            </summary>
        </member>
        <member name="M:Atom.Xna.SpriteSheet.ReaderWriter.#ctor(Atom.Xna.ISpriteLoader)">
            <summary>
            Initializes a new instance of the ReaderWriter class.
            </summary>
            <param name="spriteLoader">
            Provides a mechanism that allows loading of <see cref="T:Atom.Xna.ISprite"/> assets.
            </param>
        </member>
        <member name="M:Atom.Xna.SpriteSheet.ReaderWriter.Serialize(Atom.Xna.SpriteSheet,Atom.Storage.ISerializationContext)">
            <summary>
            Serializes the given object using the given ISerializationContext.
            </summary>
            <param name="object">
            The object to serialize.
            </param>
            <param name="context">
            The context that provides everything required for the serialization process.
            </param>
        </member>
        <member name="M:Atom.Xna.SpriteSheet.ReaderWriter.Deserialize(Atom.Xna.SpriteSheet,Atom.Storage.IDeserializationContext)">
            <summary>
            Deserializes the given object using the given IDeserializationContext.
            </summary>
            <param name="object">
            The object to deserialize.
            </param>
            <param name="context">
            The context that provides everything required for the deserialization process.
            </param>
        </member>
        <member name="F:Atom.Xna.SpriteSheet.ReaderWriter.spriteLoader">
            <summary>
            Provides a mechanism that allows loading of <see cref="T:Atom.Xna.ISprite"/> assets.
            </summary>
        </member>
        <member name="T:Atom.Xna.SpriteSheetDrawComponent">
            <summary>
            Implements rendering and input handling routines for an <see cref="T:Atom.Xna.ISpriteSheet"/>.
            </summary>
            <remarks>
            This component is mostly required for visualizers or editors.
            </remarks>
        </member>
        <member name="P:Atom.Xna.SpriteSheetDrawComponent.Sheet">
            <summary>
            Gets or sets the <see cref="T:Atom.Xna.ISpriteSheet"/> that is visualized by this SpriteSheetDrawComponent.
            </summary>
        </member>
        <member name="P:Atom.Xna.SpriteSheetDrawComponent.Position">
            <summary>
            Gets or sets the position the <see cref="T:Atom.Xna.SpriteSheet"/> is draw at.
            </summary>
        </member>
        <member name="P:Atom.Xna.SpriteSheetDrawComponent.MaximumSpritesPerRow">
            <summary>
            Gets or sets the maximum number of sprites per row.
            </summary>
            <value>The default value is 10.</value>
        </member>
        <member name="P:Atom.Xna.SpriteSheetDrawComponent.IsUpdatingSheet">
            <summary>
            Gets or sets a value indicating whether the set <see cref="T:Atom.Xna.SpriteSheet"/> is updated 
            automatically by this SpriteSheetDrawComponent.
            </summary>
            <value>
            The default value is 'true'.
            </value>
        </member>
        <member name="P:Atom.Xna.SpriteSheetDrawComponent.SpriteWidth">
            <summary>
            Gets or sets the size on the x-axis of a single entry in the grid.
            </summary>
            <value>The default value is 16.</value>
            <remarks>
            It's assumed that all sprites in the set <see cref="T:Atom.Xna.SpriteSheet"/> have the same SpriteWidth.
            </remarks>
        </member>
        <member name="P:Atom.Xna.SpriteSheetDrawComponent.SpriteHeight">
            <summary>
            Gets or sets the size on the y-axis of a single entry in the grid.
            </summary>
            <remarks>
            It's assumed that all sprites in the set <see cref="T:Atom.Xna.SpriteSheet"/> have the same SpriteHeight.
            </remarks>
            <value>The default value is 16.</value>
        </member>
        <member name="P:Atom.Xna.SpriteSheetDrawComponent.BoundingRectangle">
            <summary>
            Gets the area the <see cref="T:Atom.Xna.SpriteSheetDrawComponent"/> draws in.
            </summary>
            <value>
            The client area used by the SpriteSheetDrawComponent.
            </value>
        </member>
        <member name="M:Atom.Xna.SpriteSheetDrawComponent.#ctor">
            <summary>
            Initializes a new instance of the SpriteSheetDrawComponent class.
            </summary>
        </member>
        <member name="M:Atom.Xna.SpriteSheetDrawComponent.GetSpriteAt(Atom.Math.Point2,System.Int32@)">
            <summary>
            Gets the <see cref="T:Atom.Xna.ISprite"/> at the given position.
            </summary>
            <param name="position">
            The position of the sprite to get. 
            </param>
            <param name="index">
            Will contain the index of the sprite.
            </param>
            <remarks>
            The upper left sprite ranges from 0.0/0.0 to SpriteWidth/SpriteHeight.
            The sprite at index x/y ranges from x*SpriteWidth/y*SpriteHeight to x*SpriteWidth/y*SpriteHeight.
            </remarks>
            <returns>The sprite to get; null if the position is invalid.</returns>
        </member>
        <member name="M:Atom.Xna.SpriteSheetDrawComponent.GetSpriteArea(System.Int32)">
            <summary>
            Gets the area the Sprite at the given <paramref name="index"/>
            takes up.
            </summary>
            <param name="index">
            The zero-based index into the SpriteSheet.
            </param>
            <returns>
            The area the sprite takes up
            when drawn with this SpriteSheetDrawComponent.
            </returns>
        </member>
        <member name="M:Atom.Xna.SpriteSheetDrawComponent.Update(Atom.IUpdateContext)">
            <summary>
            Updates this SpriteSheetDrawComponent.
            </summary>
            <param name="updateContext">
            The current <see cref="T:Atom.IUpdateContext"/>.
            </param>
        </member>
        <member name="M:Atom.Xna.SpriteSheetDrawComponent.Draw(Atom.Xna.ISpriteDrawContext)">
            <summary>
            Draw the SpriteSheet using this SpriteSheetDrawComponent.
            </summary>
            <param name="drawContext">
            The current <see cref="T:Atom.Xna.ISpriteDrawContext"/>.
            </param>
        </member>
        <member name="F:Atom.Xna.SpriteSheetDrawComponent.spriteWidth">
            <summary>
            The size of a single entry in the grid.
            </summary>
        </member>
        <member name="F:Atom.Xna.SpriteSheetDrawComponent.spriteHeight">
            <summary>
            The size of a single entry in the grid.
            </summary>
        </member>
        <member name="T:Atom.Xna.SpriteSheetLoader">
            <summary>
            Implements a mechanism that allows loading of <see cref="T:Atom.Xna.SpriteSheet"/> assets.
            This class can't be inherited.
            </summary>
        </member>
        <member name="M:Atom.Xna.SpriteSheetLoader.#ctor(Atom.Xna.ISpriteLoader)">
            <summary>
            Initializes a new instance of the SpriteSheetLoader class.
            </summary>
            <param name="spriteLoader">
            Provides a mechanism for loading the sprite resources used by the ISpriteSheets.
            </param>
        </member>
        <member name="M:Atom.Xna.SpriteSheetLoader.LoadSpriteSheet(System.String)">
            <summary>
            Loads the <see cref="T:Atom.Xna.ISpriteSheet"/> resource with the given <paramref name="assetName"/>.
            </summary>
            <param name="assetName">
            The name that uniquely identifies the ISpriteSheet resource to load.
            </param>
            <returns>
            The ISpriteSheet resource thas has been loaden.
            </returns>
        </member>
        <member name="M:Atom.Xna.SpriteSheetLoader.ActuallyLoad(System.String,System.String)">
            <summary>
            Implements the actual asset loading logic used by this CachingCustomAssetLoader{TAsset}.
            </summary>
            <param name="assetName">
            The name that uniquely identifies the asset to load.
            </param>
            <param name="filePath">
            The path of the file thatis assumed to contain the asset to load.
            </param>
            <returns>
            The loaded asset.
            </returns>
        </member>
        <member name="F:Atom.Xna.SpriteSheetLoader.reader">
            <summary>
            Provides a mechanism for loading the sprite resources used by the ISpriteSheets.
            </summary>
        </member>
        <member name="T:Atom.Xna.Sprite">
            <summary>
            Represents a two dimensional image that can easily be
            drawn on the screen.
            </summary>
            <content>
            Defines the default IObjectReaderWriter for the Sprite class.
            </content>
        </member>
        <member name="P:Atom.Xna.Sprite.Name">
            <summary>
            Gets or sets the name that uniquely identifies this Sprite.
            </summary>
        </member>
        <member name="P:Atom.Xna.Sprite.Size">
            <summary>
            Gets the size of this Sprite (in pixels).
            </summary>
        </member>
        <member name="P:Atom.Xna.Sprite.Width">
            <summary>
            Gets the width of this Sprite (in pixels).
            </summary>
        </member>
        <member name="P:Atom.Xna.Sprite.Height">
            <summary>
            Gets the height of this Sprite (in pixels).
            </summary>
        </member>
        <member name="P:Atom.Xna.Sprite.Source">
            <summary>
            Gets or sets the <see cref="T:Atom.Math.Rectangle"/> that defines the location 
            of this Sprite in the <see cref="P:Atom.Xna.Sprite.Texture"/>.
            </summary>
            <value>The default value is <see cref="P:Atom.Math.Rectangle.Empty"/>.</value>
        </member>
        <member name="P:Atom.Xna.Sprite.Texture">
            <summary>
            Gets or sets the Texture2D of this Sprite.
            </summary>
        </member>
        <member name="P:Atom.Xna.Sprite.Color">
            <summary>
            Gets or sets the color this Sprite is tinted-in by default.
            </summary>
            <value>
            The default value is <see cref="P:Microsoft.Xna.Framework.Color.White"/>.
            </value>
        </member>
        <member name="P:Atom.Xna.Sprite.Scale">
            <summary>
            Gets or sets the scaling factor that is applied by default for this Sprite.
            </summary>
            <value>The default value is <see cref="P:Atom.Math.Vector2.One"/>.</value>
        </member>
        <member name="P:Atom.Xna.Sprite.Origin">
            <summary>
            Gets or sets the origin of rotation and scaling used by this Sprite.
            </summary>
            <value>The default value is <see cref="P:Atom.Math.Vector2.Zero"/>.</value>
        </member>
        <member name="P:Atom.Xna.Sprite.Rotation">
            <summary>
            Gets or sets the rotation of this Sprite in radians.
            </summary>
        </member>
        <member name="P:Atom.Xna.Sprite.Effects">
            <summary>
            Gets or sets the <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteEffects"/> that are applied to this Sprite.
            </summary>
            <value>The default value is <see cref="F:Microsoft.Xna.Framework.Graphics.SpriteEffects.None"/>.</value>
        </member>
        <member name="M:Atom.Xna.Sprite.Draw(Atom.Math.Vector2,Atom.Xna.Batches.ISpriteBatch)">
            <summary>
            Draws this Sprite at the given <paramref name="position"/>
            to the given <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> using the default settings of this Sprite.
            </summary>
            <remarks>
            <para>
            This call must be within the ISpriteBatch.Begin/ISpriteBatch.End
            block of the given <paramref name="batch"/>.
            </para>
            <para>
            It is NOT checked wheter the given <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> is null.
            </para>
            </remarks>
            <param name="position">
            The position to render the sprite at.
            </param>
            <param name="batch">
            The <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> to draw to.
            </param>
        </member>
        <member name="M:Atom.Xna.Sprite.Draw(System.Single,System.Single,Atom.Xna.Batches.ISpriteBatch)">
            <summary>
            Draws this Sprite at the given position
            to the given <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> using the default settings of this Sprite.
            </summary>
            <remarks>
            <para>
            This call must be within the ISpriteBatch.Begin/ISpriteBatch.End
            block of the given <paramref name="batch"/>.
            </para>
            <para>
            It is NOT checked wheter the given <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> is null.
            </para>
            </remarks>
            <param name="x">
            The position to render the sprite at on the x-axis.
            </param>
            <param name="y">
            The position to render the sprite at on the y-axis.
            </param>
            <param name="batch">
            The <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> to draw to.
            </param>
        </member>
        <member name="M:Atom.Xna.Sprite.Draw(Atom.Math.Vector2,System.Single,Atom.Xna.Batches.ISpriteBatch)">
            <summary>
            Draws this Sprite at the given <paramref name="position"/>
            to the given <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> using the default settings of this <see cref="T:Atom.Xna.ISprite"/>.
            </summary>
            <remarks>
            <para>
            This call must be within the ISpriteBatch.Begin/ISpriteBatch.End
            block of the given <paramref name="batch"/>.
            </para>
            <para>
            It is NOT checked wheter the given <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> is null.
            </para>
            </remarks>
            <param name="position">
            The position to render the sprite at.
            </param>
            <param name="depthLayer">
            The depth layer to draw the sprite at; used for sorting.
            </param>
            <param name="batch">
            The <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> to draw to.
            </param>
        </member>
        <member name="M:Atom.Xna.Sprite.Draw(Atom.Math.Vector2,Microsoft.Xna.Framework.Color,Atom.Xna.Batches.ISpriteBatch)">
            <summary>
            Draws this Sprite at the given <paramref name="position"/>
            to the given <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> using the default settings of this Sprite.
            </summary>
            <remarks>
            <para>
            This call must be within the ISpriteBatch.Begin/ISpriteBatch.End
            block of the given <paramref name="batch"/>.
            </para>
            <para>
            It is NOT checked wheter the given <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> is null.
            </para>
            </remarks>
            <param name="position">
            The position to render the sprite at.
            </param>
            <param name="color">
            The color channel modulation to use.
            </param>
            <param name="batch">
            The <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> to draw to.
            </param>
        </member>
        <member name="M:Atom.Xna.Sprite.Draw(Atom.Math.Vector2,Microsoft.Xna.Framework.Color,System.Single,Atom.Xna.Batches.ISpriteBatch)">
            <summary>
            Draws this Sprite at the given <paramref name="position"/>
            to the given <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> using the default settings of this Sprite.
            </summary>
            <remarks>
            <para>
            This call must be within the ISpriteBatch.Begin/ISpriteBatch.End
            block of the given <paramref name="batch"/>.
            </para>
            <para>
            It is NOT checked wheter the given <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> is null.
            </para>
            </remarks>
            <param name="position">
            The position to render the sprite at.
            </param>
            <param name="color">The color channel modulation to use.</param>
            <param name="depthLayer">The layer to draw at.</param>
            <param name="batch">
            The <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> to draw to.
            </param>
        </member>
        <member name="M:Atom.Xna.Sprite.Draw(Atom.Math.Rectangle,Microsoft.Xna.Framework.Color,Atom.Xna.Batches.ISpriteBatch)">
            <summary>
            Draws this Sprite into the given <paramref name="destination"/> rectangle.
            </summary>
            <remarks>
            <para>
            This call must be within the ISpriteBatch.Begin/ISpriteBatch.End
            block of the given <paramref name="batch"/>.
            </para>
            <para>
            It is NOT checked wheter the given <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> is null.
            </para>
            </remarks>
            <param name="destination">
            The rectangle to draw the sprite in.
            </param>
            <param name="color">
            The color channel modulation to use.
            </param>
            <param name="batch">
            The <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> to draw to.
            </param>
        </member>
        <member name="M:Atom.Xna.Sprite.Draw(Atom.Math.Vector2,System.Single,Atom.Math.Vector2,Atom.Math.Vector2,Atom.Xna.Batches.ISpriteBatch)">
            <summary>
            Draws this Sprite at the given <paramref name="position"/>
            to the given <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> using a mix of the specified and the default settings.
            </summary>
            <remarks>
            <para>
            This call must be within the ISpriteBatch.Begin/ISpriteBatch.End
            block of the given <paramref name="batch"/>.
            </para>
            <para>
            It is NOT checked wheter the given <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> is null.
            </para>
            </remarks>
            <param name="position">
            The position to render the sprite at.
            </param>
            <param name="rotation">
            The rotation in radians.
            </param>
            <param name="origin">
            The origin of rotation and scaling.
            </param>
            <param name="scale">
            The scaling factor to apply.
            </param>
            <param name="batch">
            The <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> to draw to.
            </param>
        </member>
        <member name="M:Atom.Xna.Sprite.Draw(Atom.Math.Vector2,Microsoft.Xna.Framework.Color,System.Single,Atom.Math.Vector2,Atom.Math.Vector2,Atom.Xna.Batches.ISpriteBatch)">
            <summary>
            Draws this Sprite at the given <paramref name="position"/>
            to the given <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> using a mix of the specified and the default settings.
            </summary>
            <remarks>
            <para>
            This call must be within the ISpriteBatch.Begin/ISpriteBatch.End
            block of the given <paramref name="batch"/>.
            </para>
            <para>
            It is NOT checked wheter the given <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> is null.
            </para>
            </remarks>
            <param name="position">
            The position to render the sprite at.
            </param>
            <param name="color">The color channel modulation to use.</param>
            <param name="rotation">The rotation in radians.</param>
            <param name="origin">The origin of rotation and scaling.</param>
            <param name="scale">The scaling factor to apply.</param>
            <param name="batch">
            The <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> to draw to.
            </param>
        </member>
        <member name="M:Atom.Xna.Sprite.Draw(Atom.Math.Vector2,Microsoft.Xna.Framework.Color,System.Single,Atom.Math.Vector2,Atom.Math.Vector2,Microsoft.Xna.Framework.Graphics.SpriteEffects,Atom.Xna.Batches.ISpriteBatch)">
            <summary>
            Draws this Sprite at the given <paramref name="position"/>
            to the given <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> using the specified settings.
            </summary>
            <remarks>
            <para>
            This call must be within the ISpriteBatch.Begin/ISpriteBatch.End
            block of the given <paramref name="batch"/>.
            </para>
            <para>
            It is NOT checked wheter the given <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> is null.
            </para>
            </remarks>
            <param name="position">
            The position to render the sprite at.
            </param>
            <param name="color">
            The color channel modulation to use.
            </param>
            <param name="rotation">
            The rotation in radians.
            </param>
            <param name="origin">
            The origin of rotation and scaling.
            </param>
            <param name="scale">
            The scaling factor to apply.
            </param>
            <param name="effects">
            The SpriteEffect to apply.
            </param>
            <param name="batch">
            The <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> to draw to.
            </param>
        </member>
        <member name="M:Atom.Xna.Sprite.Draw(Atom.Math.Vector2,Microsoft.Xna.Framework.Color,System.Single,Atom.Math.Vector2,Atom.Math.Vector2,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single,Atom.Xna.Batches.ISpriteBatch)">
            <summary>
            Draws this Sprite at the given <paramref name="position"/>
            to the given <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> using the specified settings.
            </summary>
            <remarks>
            <para>
            This call must be within the ISpriteBatch.Begin/ISpriteBatch.End
            block of the given <paramref name="batch"/>.
            </para>
            <para>
            It is NOT checked wheter the given <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> is null.
            </para>
            </remarks>
            <param name="position">
            The position to render the sprite at.
            </param>
            <param name="color">
            The color channel modulation to use.
            </param>
            <param name="rotation">
            The rotation in radians.
            </param>
            <param name="origin">
            The origin of rotation and scaling.
            </param>
            <param name="scale">
            The scaling factor to apply.
            </param>
            <param name="effects">
            The SpriteEffect to apply.
            </param>
            <param name="layerDepth">
            The depth layer to draw the Sprite at.
            </param>
            <param name="batch">
            The <see cref="T:Atom.Xna.Batches.ISpriteBatch"/> to draw to.
            </param>
        </member>
        <member name="M:Atom.Xna.Sprite.ToString">
            <summary>
            Overriden to return the <see cref="P:Atom.Xna.Sprite.Name"/> of this Sprite.
            </summary>
            <returns>The <see cref="P:Atom.Xna.Sprite.Name"/> of this Sprite.</returns>
        </member>
        <member name="M:Atom.Xna.Sprite.Atom#Xna#ISprite#CloneInstance">
            <summary>
            Clones an instance of this Sprite.
            </summary>
            <remarks>
            There is no need to create a new instance
            because <see cref="T:Atom.Xna.Sprite"/>s are their own instances.
            </remarks>
            <returns>
            The clone of this instance.
            </returns>
        </member>
        <member name="M:Atom.Xna.Sprite.Atom#Xna#ISpriteAsset#CreateInstance">
            <summary>
            Creates an instance of this ISpriteAsset.
            </summary>
            <returns>
            The instance that has been created.
            </returns>
        </member>
        <member name="F:Atom.Xna.Sprite.source">
            <summary>
            Represents the storage field of the <see cref="P:Atom.Xna.Sprite.Source"/> property.
            </summary>
        </member>
        <member name="F:Atom.Xna.Sprite.texture">
            <summary>
            Represents the storage field of the <see cref="P:Atom.Xna.Sprite.Texture"/> property.
            </summary>
        </member>
        <member name="F:Atom.Xna.Sprite.defaultColor">
            <summary>
            Represents the storage field of the <see cref="T:Microsoft.Xna.Framework.Color"/> property.
            </summary>
        </member>
        <member name="F:Atom.Xna.Sprite.defaultScale">
            <summary>
            Represents the storage field of the <see cref="P:Atom.Xna.Sprite.Scale"/> property.
            </summary>
        </member>
        <member name="F:Atom.Xna.Sprite.defaultOrigin">
            <summary>
            Represents the storage field of the <see cref="P:Atom.Xna.Sprite.Origin"/> property.
            </summary>
        </member>
        <member name="T:Atom.Xna.Sprite.ReaderWriter">
            <summary>
            Defines the default IObjectReaderWriter that implements serialization and deserialization
            of <see cref="T:Atom.Xna.Sprite"/> objects. This class can't be inherited.
            </summary>
        </member>
        <member name="M:Atom.Xna.Sprite.ReaderWriter.#ctor(Atom.Xna.ITexture2DLoader)">
            <summary>
            Initializes a new instance of the ReaderWriter class.
            </summary>
            <param name="textureLoader">
            Provides a mechanism that allows loading of Texture2D assets.
            </param>
        </member>
        <member name="M:Atom.Xna.Sprite.ReaderWriter.Serialize(Atom.Xna.Sprite,Atom.Storage.ISerializationContext)">
            <summary>
            Serializes the given object using the given ISerializationContext.
            </summary>
            <param name="object">
            The object to serialize.
            </param>
            <param name="context">
            The context that provides everything required for the serialization process.
            </param>
        </member>
        <member name="M:Atom.Xna.Sprite.ReaderWriter.Deserialize(Atom.Xna.Sprite,Atom.Storage.IDeserializationContext)">
            <summary>
            Deserializes the given object using the given IDeserializationContext.
            </summary>
            <param name="object">
            The object to deserialize.
            </param>
            <param name="context">
            The context that provides everything required for the deserialization process.
            </param>
        </member>
        <member name="F:Atom.Xna.Sprite.ReaderWriter.textureLoader">
            <summary>
            Provides a mechanism that allows loading of Texture2D assets.
            </summary>
        </member>
        <member name="T:Atom.Xna.SpriteDrawContext">
            <summary>
            Represents an <see cref="T:Atom.IDrawContext"/> that allows the drawing
            of sprites.
            </summary>
        </member>
        <member name="P:Atom.Xna.SpriteDrawContext.Batch">
            <summary>
            Gets or sets the <see cref="T:Atom.Xna.Batches.IComposedSpriteBatch"/> that should be used to draw
            sprites when using this ISpriteDrawContext.
            </summary>
        </member>
        <member name="P:Atom.Xna.SpriteDrawContext.GameTime">
            <summary>
            Gets or sets a snapshot of the time it took to execute the last frame.
            </summary>
        </member>
        <member name="P:Atom.Xna.SpriteDrawContext.Device">
            <summary>
            Gets the Xna GraphicsDevice object.
            </summary>
        </member>
        <member name="M:Atom.Xna.SpriteDrawContext.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Xna.SpriteDrawContext"/> class.
            </summary>
            <param name="device">
            The Xna GraphicsDevice object.
            </param>
        </member>
        <member name="M:Atom.Xna.SpriteDrawContext.#ctor(Atom.Xna.Batches.IComposedSpriteBatch,Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Xna.SpriteDrawContext"/> class.
            </summary>
            <param name="batch">
            The <see cref="T:Atom.Xna.Batches.IComposedSpriteBatch"/> to use.
            </param>
            <param name="device">
            The Xna GraphicsDevice object.
            </param>
        </member>
        <member name="M:Atom.Xna.SpriteDrawContext.Begin">
            <summary>
            Prepares the graphics device for drawing sprites.
            </summary>
        </member>
        <member name="M:Atom.Xna.SpriteDrawContext.Begin(Microsoft.Xna.Framework.Graphics.BlendState)">
            <summary>
            Prepares the draw context for drawing sprites with specified blending options.
            </summary>
            <param name="blendState">Blending options to use when rendering.</param>
        </member>
        <member name="M:Atom.Xna.SpriteDrawContext.Begin(Microsoft.Xna.Framework.Graphics.BlendState,Microsoft.Xna.Framework.Graphics.SamplerState,Microsoft.Xna.Framework.Graphics.SpriteSortMode)">
            <summary>
            Prepares the draw context for drawing sprites with specified blending,
            sorting, and render state options.
            </summary>
            <param name="blendState">Blending options to use when rendering.</param>
            <param name="samplerState">Sampler options to use when rendering.</param>
            <param name="sortMode">Sorting options to use when rendering.</param>
        </member>
        <member name="M:Atom.Xna.SpriteDrawContext.Begin(Microsoft.Xna.Framework.Graphics.BlendState,Microsoft.Xna.Framework.Graphics.SamplerState,Microsoft.Xna.Framework.Graphics.SpriteSortMode,Atom.Math.Matrix4)">
            <summary> 
            Prepares the draw context for drawing sprites with specified blending,
            sorting, and render state options, and a global transform matrix.
            </summary>
            <param name="blendState">Blending options to use when rendering.</param>
            <param name="samplerState">Sampler options to use when rendering.</param>
            <param name="sortMode">Sorting options to use when rendering.</param>
            <param name="transform">
            A matrix to apply to position, rotation, scale, and depth data passed to Spritebatch.Draw.
            </param>
        </member>
        <member name="M:Atom.Xna.SpriteDrawContext.Begin(Microsoft.Xna.Framework.Graphics.BlendState,Microsoft.Xna.Framework.Graphics.SamplerState,Microsoft.Xna.Framework.Graphics.SpriteSortMode,Microsoft.Xna.Framework.Matrix)">
            <summary> 
            Prepares the draw context for drawing sprites with specified blending,
            sorting, and render state options, and a global transform matrix.
            </summary>
            <param name="blendState">Blending options to use when rendering.</param>
            <param name="samplerState">Sampler options to use when rendering.</param>
            <param name="sortMode">Sorting options to use when rendering.</param>
            <param name="transform">
            A matrix to apply to position, rotation, scale, and depth data passed to Spritebatch.Draw.
            </param>
        </member>
        <member name="M:Atom.Xna.SpriteDrawContext.End">
            <summary>
            Flushes the sprite batch and restores the device state to how it was before
            Spritebatch.Begin was called.
            </summary>
        </member>
        <member name="F:Atom.Xna.SpriteDrawContext.batch">
            <summary>
            Represents the storage field of the <see cref="P:Atom.Xna.SpriteDrawContext.Batch"/> property.
            </summary>
        </member>
        <member name="F:Atom.Xna.SpriteDrawContext.device">
            <summary>
            The Xna GraphicsDevice object.
            </summary>
        </member>
        <member name="T:Atom.Xna.SpriteLoader">
            <summary>
            Implements a mechanism that allows loading of <see cref="T:Atom.Xna.Sprite"/> and
            <see cref="T:Atom.Xna.AnimatedSprite"/> assets.
            </summary>
        </member>
        <member name="P:Atom.Xna.SpriteLoader.RootDirectory">
            <summary>
            Gets or sets the root directory that is automatically
            prefixed to assets loaded by this SpriteLoader.
            </summary>
        </member>
        <member name="P:Atom.Xna.SpriteLoader.Sprites">
            <summary>
            Gets the <see cref="T:Atom.Xna.Sprite"/> that have been loaded into this SpriteLoader.
            </summary>
        </member>
        <member name="P:Atom.Xna.SpriteLoader.AnimatedSprites">
            <summary>
            Gets the <see cref="T:Atom.Xna.AnimatedSprite"/> that have been loaded into this SpriteLoader.
            </summary>
        </member>
        <member name="P:Atom.Xna.SpriteLoader.SpriteCount">
            <summary>
            Gets the number of normal <see cref="T:Atom.Xna.Sprite"/>s that this SpriteLoader contains.
            </summary>
        </member>
        <member name="M:Atom.Xna.SpriteLoader.LoadSprite(System.String)">
            <summary>
            Loads the Sprite with the given <paramref name="assetName"/>.
            </summary>
            <param name="assetName">
            The name that uniquely identifies the Sprite to load.
            </param>
            <returns>
            The Sprite that has been loaden.
            </returns>
        </member>
        <member name="M:Atom.Xna.SpriteLoader.Exists(System.String)">
            <summary>
            Determines whether an <see cref="T:Atom.Xna.Sprite"/> with the given <paramref name="assetName"/> exists.
            </summary>
            <param name="assetName">
            The name that uniquely identifies the asset.
            </param>
            <returns>
            true if it exists; -or- otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Xna.SpriteLoader.LoadAnimatedSprite(System.String)">
            <summary>
            Loads the AnimatedSprite with the given <paramref name="assetName"/>.
            </summary>
            <param name="assetName">
            The name that uniquely identifies the AnimatedSprite to load.
            </param>
            <returns>
            The AnimatedSprite that has been loaden.
            </returns>
        </member>
        <member name="M:Atom.Xna.SpriteLoader.Load(System.String)">
            <summary>
            Attempts to loads the <see cref="T:Atom.Xna.Sprite"/> or an instance of
            an <see cref="T:Atom.Xna.AnimatedSprite"/> that has the given <paramref name="assetName"/>.
            </summary>
            <param name="assetName">
            The name that uniquely identifies the asset to load.
            </param>
            <returns>
            The ISprite that has been loaden.
            </returns>
        </member>
        <member name="M:Atom.Xna.SpriteLoader.LoadAsset(System.String)">
            <summary>
            Attempts to loads the <see cref="T:Atom.Xna.Sprite"/> or an instance of
            an <see cref="T:Atom.Xna.AnimatedSprite"/> that has the given <paramref name="assetName"/>.
            </summary>
            <remarks>
            No ISprite instance is created.
            </remarks>
            <param name="assetName">
            The name that uniquely identifies the asset to load.
            </param>
            <returns>
            The ISpriteAsset that has been loaden.
            </returns>
        </member>
        <member name="M:Atom.Xna.SpriteLoader.TransformAssetName(System.String)">
            <summary>
            Transforms the given assetName.
            </summary>
            <param name="assetName">
            The input assetName.
            </param>
            <returns>
            The output assetName.
            </returns>
        </member>
        <member name="M:Atom.Xna.SpriteLoader.Insert(Atom.Xna.SpriteDatabase)">
            <summary>
            Loads the content of the given SpriteDatabase into this SpriteLoader.
            </summary>
            <param name="database">
            The database to load.
            </param>
        </member>
        <member name="M:Atom.Xna.SpriteLoader.Insert(System.String[],Atom.Xna.ITexture2DLoader)">
            <summary>
            Inserts the content of the <see cref="T:Atom.Xna.SpriteDatabase"/>s stored in the specified files into this SpriteLoader.
            </summary>
            <param name="spriteDatabaseFiles">
            The file names of the SpriteDatabases to load.
            </param>
            <param name="textureLoader">
            Provides a mechanism for loading texture information.
            </param>
        </member>
        <member name="M:Atom.Xna.SpriteLoader.Insert(System.String,Atom.Xna.ITexture2DLoader)">
            <summary>
            Inserts the content of the <see cref="T:Atom.Xna.SpriteDatabase"/>s stored in the specified file into this SpriteLoader.
            </summary>
            <param name="spriteDatabaseFile">
            The file name of the SpriteDatabase to load.
            </param>
            <param name="textureLoader">
            Provides a mechanism for loading texture information.
            </param>
        </member>
        <member name="M:Atom.Xna.SpriteLoader.Dispose">
            <summary>
            Disposes the resources this SpriteLoader has aquired.
            </summary>
        </member>
        <member name="M:Atom.Xna.SpriteLoader.UnloadAll">
            <summary>
            Unloads all assets that have been loaden with this IAssetLoader.
            </summary>
        </member>
        <member name="M:Atom.Xna.SpriteLoader.ReloadTextures(Atom.Xna.ITexture2DLoader)">
            <summary>
            Relodas all textures of all sprites that have been cached.
            </summary>
            <param name="textureLoader">
            The loader to use.
            </param>
        </member>
        <member name="M:Atom.Xna.SpriteLoader.CreateNotFound(System.String,System.String)">
            <summary>
            Creates a new <see cref="T:Atom.NotFoundException"/>.
            </summary>
            <param name="typeName">
            A string that identifies the type of the sprites that was attempted to be loaded.
            </param>
            <param name="assetName">
            The name of the asset that was attempted to be loaded.
            </param>
            <returns>
            A newly created NotFoundException.
            </returns>
        </member>
        <member name="F:Atom.Xna.SpriteLoader.rootDirectory">
            <summary>
            Represents the storage field of the <see cref="P:Atom.Xna.SpriteLoader.RootDirectory"/> property.
            </summary>
        </member>
        <member name="F:Atom.Xna.SpriteLoader.sprites">
            <summary>
            The dictionary that maps assetNames onto Sprites.
            </summary>
        </member>
        <member name="F:Atom.Xna.SpriteLoader.animatedSprites">
            <summary>
            The dictionary that maps assetNames onto AnimatedSprite.
            </summary>
        </member>
        <member name="T:Atom.Xna.XnaDeserializationContextExtensions">
            <summary>
            Defines extension methods that allow deserialization of Xna types using the <see cref="T:Atom.Storage.ISerializationContext"/> class.
            </summary>
        </member>
        <member name="M:Atom.Xna.XnaDeserializationContextExtensions.ReadColor(Atom.Storage.IDeserializationContext)">
            <summary>
            Reads a <see cref="T:Microsoft.Xna.Framework.Color"/> value.
            </summary>
            <param name="context">
            The context to read with.
            </param>
            <returns>
            The Color value that has been read.
            </returns>
        </member>
        <member name="T:Atom.Xna.XnaSerializationContextExtensions">
            <summary>
            Defines extension methods that allow serialization of Xna types using the <see cref="T:Atom.Storage.ISerializationContext"/> class.
            </summary>
        </member>
        <member name="M:Atom.Xna.XnaSerializationContextExtensions.Write(Atom.Storage.ISerializationContext,Microsoft.Xna.Framework.Color)">
            <summary>
            Writes the given Color value.
            </summary>
            <param name="context">
            The context to write with.
            </param>
            <param name="color">
            The value to write.
            </param>
        </member>
        <member name="T:Atom.Xna.ITexture2DLoader">
            <summary>
            Provides a mechanism that allows loading of Texture2D assets.
            </summary>
        </member>
        <member name="M:Atom.Xna.ITexture2DLoader.Load(System.String)">
            <summary>
            Tries to receive the <see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D"/> with the given <paramref name="assetName"/>.
            </summary>
            <param name="assetName">
            The name of the texture asset to load.
            </param>
            <returns>
            The loaded Texture2D.
            </returns>
        </member>
        <member name="T:Atom.Xna.NullTexture2DLoader">
            <summary>
            Implements an <see cref="T:Atom.Xna.ITexture2DLoader"/> that does
            absolutely nothing.
            </summary>
        </member>
        <member name="M:Atom.Xna.NullTexture2DLoader.Load(System.String)">
            <summary>
            Tries to receive the <see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D"/> with
            the given <paramref name="assetName"/>.
            </summary>
            <param name="assetName">
            The name of the texture asset to load.
            </param>
            <returns>
            The loaded Texture2D.
            </returns>
        </member>
        <member name="P:Atom.Xna.NullTexture2DLoader.RootDirectory">
            <summary>
            Gets or sets the root directory that is automatically
            prefixed to assets loaded by this IAssetLoader.
            </summary>
        </member>
        <member name="M:Atom.Xna.NullTexture2DLoader.Dispose">
            <summary>
            Disposes this NullTexture2DLoader.
            </summary>
        </member>
        <member name="M:Atom.Xna.NullTexture2DLoader.UnloadAll">
            <summary>
            Unloads all Texture2D resources that have been loaden.
            </summary>
        </member>
        <member name="T:Atom.Xna.Texture2DLoader">
            <summary>
            Implements a mechanism that allows loading of Texture2D assets
            from compiled xna resources by using a <see cref="T:Microsoft.Xna.Framework.Content.ContentManager"/>.
            </summary>
        </member>
        <member name="M:Atom.Xna.Texture2DLoader.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the Texture2DLoader class, manually creating a new ContentManager
            with a default RootDirectory of "Content/Textures/".
            </summary>
            <param name="serviceProvider">
            The IServiceProvider the ContentManager should use to locate services.
            </param>
        </member>
        <member name="M:Atom.Xna.Texture2DLoader.#ctor(Microsoft.Xna.Framework.Content.ContentManager)">
            <summary>
            Initializes a new instance of the Texture2DLoader class.
            </summary>
            <param name="contentManager">
            The Xna ContentManager responsible for loading the Texture2D assets.
            </param>
        </member>
        <member name="M:Atom.Xna.Texture2DLoader.Load(System.String)">
            <summary>
            Tries to receive the <see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D"/> with the given <paramref name="assetName"/>.
            This method is thread safe.
            </summary>
            <param name="assetName">
            The name of the texture asset to load.
            </param>
            <returns>
            The loaded Texture2D.
            </returns>
        </member>
        <member name="M:Atom.Xna.Texture2DLoader.TransformAssetName(System.String)">
            <summary>
            Transforms the given assetName into a name that points to a serialized Xna resource.
            </summary>
            <param name="assetName">
            The input asset name.
            </param>
            <returns>
            The transformed asset name.
            </returns>
        </member>
        <member name="F:Atom.Xna.Texture2DLoader.sync">
            <summary>
            The object that is used to aquire a lock for the texture loading operation.
            </summary>
        </member>
        <member name="T:Atom.Xna.TextureExtensions">
            <summary>
            Defines extension methods for the <see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D"/> class.
            </summary>
        </member>
        <member name="M:Atom.Xna.TextureExtensions.GetColorData(Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            Gets the color data of this <see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D"/>.
            </summary>
            <param name="texture">
            The texture to query.
            </param>
            <returns>
            The color data of the texture.
            </returns>
        </member>
        <member name="T:Atom.Xna.TextureUtilities">
            <summary>
            Defines Texture related utility methods.
            </summary>
        </member>
        <member name="M:Atom.Xna.TextureUtilities.CreateWhite(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Creates a new fully white <see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D"/> of size 1 x 1.
            </summary>
            <remarks>
            This texture can be used to draw arabitary rectangles with a <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/>.
            </remarks>
            <param name="graphicsDevice">
            The <see cref="T:Microsoft.Xna.Framework.Graphics.GraphicsDevice"/> used to display the texture.
            </param>
            <returns>
            The newly created Texture2D.
            </returns>
        </member>
        <member name="T:Atom.Xna.UncachedFromFileTexture2DLoader">
            <summary>
            Implements a mechanism that loads Texture2D objects directly from an image file,
            without caching them.
            </summary>
        </member>
        <member name="P:Atom.Xna.UncachedFromFileTexture2DLoader.RootDirectory">
            <summary>
            Gets or sets the root directory that is automatically
            prefixed to assets loaded by this IAssetLoader.
            </summary>
        </member>
        <member name="M:Atom.Xna.UncachedFromFileTexture2DLoader.#ctor(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)">
            <summary>
            Initializes a new instance of the UncachedFromFileTexture2DLoader class.
            </summary>
            <param name="graphicsDeviceService">
            Provides a mechanism that allows to receive the Xna GraphicsDevice.
            </param>
        </member>
        <member name="M:Atom.Xna.UncachedFromFileTexture2DLoader.Load(System.String)">
            <summary>
            Tries to load the <see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D"/> with the given <paramref name="assetName"/>.
            </summary>
            <param name="assetName">
            The name of the texture asset to load.
            </param>
            <returns>
            The loaded Texture2D.
            </returns>
        </member>
        <member name="M:Atom.Xna.UncachedFromFileTexture2DLoader.System#IDisposable#Dispose">
            <summary>
            This method is not required.
            </summary>
        </member>
        <member name="M:Atom.Xna.UncachedFromFileTexture2DLoader.Atom#Xna#IAssetLoader#UnloadAll">
            <summary>
            Unloads all Texture2D resources that have been loaden.
            </summary>
        </member>
        <member name="F:Atom.Xna.UncachedFromFileTexture2DLoader.graphicsDeviceService">
            <summary>
            Provides a mechanism that allows to receive the Xna GraphicsDevice.
            </summary>
        </member>
        <member name="T:Atom.Xna.XnaUpdateContext">
            <summary>
            Defines a default implementation of the <see cref="T:Atom.Xna.IXnaUpdateContext"/> interface.
            </summary>
        </member>
        <member name="P:Atom.Xna.XnaUpdateContext.GameTime">
            <summary>
            Gets or sets the current <see cref="T:Microsoft.Xna.Framework.GameTime"/>.
            </summary>
            <remarks>
            Must be manually updated each frame.
            </remarks>
            <value>
            Stores the timing information about the last frame.
            </value>
        </member>
        <member name="P:Atom.Xna.XnaUpdateContext.FrameTime">
            <summary>
            Gets the time the last frame took in seconds.
            </summary>
            <value>
            The time (in seconds) the last frame took to execute.
            </value>
        </member>
        <member name="F:Atom.Xna.XnaUpdateContext.currentGameTime">
            <summary>
            Stores the Xna GameTime object of the current frame.
            </summary>
        </member>
        <member name="F:Atom.Xna.XnaUpdateContext.frameTime">
            <summary>
            Cached frame time value.
            </summary>
        </member>
    </members>
</doc>
