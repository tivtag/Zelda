<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Atom.AI</name>
    </assembly>
    <members>
        <member name="T:Atom.AI.AIErrorStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Atom.AI.AIErrorStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Atom.AI.AIErrorStrings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Atom.AI.AIErrorStrings.ThereIsNoFuzzyMappingX">
            <summary>
              Looks up a localized string similar to There is no FuzzyMapping &apos;{0}&apos; in the FuzzySet..
            </summary>
        </member>
        <member name="P:Atom.AI.AIErrorStrings.ThereIsNoMembershipFunctionSetForFuzzyMappingX">
            <summary>
              Looks up a localized string similar to There is MembershipFunction set for the FuzzyMapping &apos;{0}&apos;..
            </summary>
        </member>
        <member name="T:Atom.AI.Fuzzy.FuzzyMapping`2">
            <summary>
            A <see cref="T:Atom.AI.Fuzzy.FuzzyMapping`2"/> represents
            a value of a <see cref="T:Atom.AI.Fuzzy.FuzzySet`2"/>.
            </summary>
            <typeparam name="TMappedValue">
            The type of the value the FuzzyMapping maps onto.
            </typeparam>
            <typeparam name="TInput">
            The type of the input expected by the FuzzyMapping's <see cref="T:Atom.AI.Fuzzy.MembershipFunction`1"/>.
            </typeparam>
        </member>
        <member name="P:Atom.AI.Fuzzy.FuzzyMapping`2.Value">
            <summary>
            Gets or sets the value the <see cref="T:Atom.AI.Fuzzy.FuzzyMapping`2"/> is associated to.
            </summary>
            <value>The value this FuzzyMapping associated to.</value>
        </member>
        <member name="P:Atom.AI.Fuzzy.FuzzyMapping`2.Function">
            <summary>
            Gets or sets the <see cref="T:Atom.AI.Fuzzy.MembershipFunction`1"/> 
            (also called characteristic function)
            of the <see cref="T:Atom.AI.Fuzzy.FuzzyMapping`2"/>.
            </summary>
            <value>
            The <see cref="T:Atom.AI.Fuzzy.MembershipFunction`1"/> that is used to calculate the characteristic
            of the <see cref="P:Atom.AI.Fuzzy.FuzzyMapping`2.Value"/>.
            </value>
        </member>
        <member name="M:Atom.AI.Fuzzy.FuzzyMapping`2.#ctor(`0,Atom.AI.Fuzzy.MembershipFunction{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.AI.Fuzzy.FuzzyMapping`2"/> class.
            </summary>
            <param name="value">
            The value the FuzzyMapping maps onto.
            </param>
            <param name="function">
            The <see cref="T:Atom.AI.Fuzzy.MembershipFunction`1"/> that is used to
            calcualte how much a given input value is part of the new FuzzyMapping.
            </param>
        </member>
        <member name="T:Atom.AI.Fuzzy.FuzzySet`2">
            <summary>
            A <see cref="T:Atom.AI.Fuzzy.FuzzySet`2"/>
            represents a set of <see cref="T:Atom.AI.Fuzzy.FuzzyMapping`2"/>s.
            </summary>
            <typeparam name="TMappedValue">
            The type of the value the FuzzyMappings map onto.
            </typeparam>
            <typeparam name="TInput">
            The type of the input expected by the FuzzyMappings <see cref="T:Atom.AI.Fuzzy.MembershipFunction`1"/>s.
            </typeparam>
        </member>
        <member name="M:Atom.AI.Fuzzy.FuzzySet`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.AI.Fuzzy.FuzzySet`2"/> class.
            </summary>
            <param name="initialCapacity">
            The initial number of elements the new FuzzySet can store without
            allocating new memory.
            </param>
        </member>
        <member name="M:Atom.AI.Fuzzy.FuzzySet`2.Evaluate(`0,`1)">
            <summary>
            Evulates the fuzzy-percentage that tells how much part the given <paramref name="input"/> value
            is of the specified <paramref name="mappedValue"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            If no FuzzyMapping has been set for to the given <paramref name="mappedValue"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            If there exists a FuzzyMapping for to the given <paramref name="mappedValue"/>,
            but the MembershipFunction is null.
            </exception>
            <param name="mappedValue">
            The value to identify the percentage for.
            </param>
            <param name="input">The input value.</param>
            <returns>The evulated value.</returns>
        </member>
        <member name="M:Atom.AI.Fuzzy.FuzzySet`2.Add(Atom.AI.Fuzzy.FuzzyMapping{`0,`1})">
            <summary>
            Adds the specified <see cref="T:Atom.AI.Fuzzy.FuzzyMapping`2"/>
            to this <see cref="T:Atom.AI.Fuzzy.FuzzySet`2"/>.
            </summary>
            <param name="mapping">
            The mapping to add.
            </param>
            <exception cref="T:System.ArgumentException">
            If the <see cref="T:Atom.AI.Fuzzy.FuzzySet`2"/> already contains a mapping
            for the value descriped by the specified <see cref="T:Atom.AI.Fuzzy.FuzzyMapping`2"/>.
            </exception>
        </member>
        <member name="M:Atom.AI.Fuzzy.FuzzySet`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the
            elements of this <see cref="T:Atom.AI.Fuzzy.FuzzySet`2"/>.
            </summary>
            <returns>An enumerator.</returns>
        </member>
        <member name="M:Atom.AI.Fuzzy.FuzzySet`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the
            elements of this <see cref="T:Atom.AI.Fuzzy.FuzzySet`2"/>.
            </summary>
            <returns>An enumerator.</returns>
        </member>
        <member name="M:Atom.AI.Fuzzy.FuzzySet`2.System#Collections#Generic#IEnumerable{TMappedValue}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the
            values this <see cref="T:Atom.AI.Fuzzy.FuzzySet`2"/> onto.
            </summary>
            <returns>An enumerator.</returns>
        </member>
        <member name="F:Atom.AI.Fuzzy.FuzzySet`2.set">
            <summary>
            The dictionary that maps a value to its FuzzyMapping{TMappedValue, TInput}.
            </summary>
        </member>
        <member name="T:Atom.AI.Fuzzy.MembershipFunction`1">
            <summary>
            Calculates how much a given <typeparamref name="TInput"/> value
            is part of the <see cref="T:Atom.AI.Fuzzy.FuzzyMapping`2"/> specified 
            by the <see cref="T:Atom.AI.Fuzzy.MembershipFunction`1"/>.
            </summary>
            <typeparam name="TInput">
            The type of input expected by the function.
            </typeparam>
            <param name="inputValue">
            The input value.
            </param>
            <returns>
            A value in the interval [0; 1]
            where 0 maps to false (0%),
                  1 maps to true  (100%),
            and any other value maps to a meaning between true and false (X%).
            </returns>
        </member>
        <member name="T:Atom.AI.AStarTilePathSearcher">
            <summary>
            An implementation of the A* path algorithm for <see cref="T:Atom.Scene.Tiles.TileMap"/>s.
            </summary>
        </member>
        <member name="F:Atom.AI.AStarTilePathSearcher.CostDiagonal">
            <summary>
            States the costs for moving..
            </summary>
        </member>
        <member name="F:Atom.AI.AStarTilePathSearcher.CostNonDiagonal">
            <summary>
            States the costs for moving..
            </summary>
        </member>
        <member name="M:Atom.AI.AStarTilePathSearcher.Setup(Atom.Scene.Tiles.TileMapDataLayer)">
            <summary>
            Setups the A* path searcher to use the specified <see cref="T:Atom.Scene.Tiles.TileMapDataLayer"/>.
            </summary>
            <param name="layer">
            The map layer to setup this <see cref="T:Atom.AI.AStarTilePathSearcher"/> for.
            </param>
        </member>
        <member name="M:Atom.AI.AStarTilePathSearcher.FindPath``1(System.Int32,System.Int32,System.Int32,System.Int32,``0,Atom.Scene.Tiles.ITileHandler{``0})">
            <summary>
            Tries to find a path from the starting point to the target point.
            </summary>
            <param name="startX"> The starting point on the x-axis. </param>
            <param name="startY"> The starting point on the y-axis.</param>
            <param name="targetX"> The end point on the x-axis.</param>
            <param name="targetY"> The end point on the y-axis.</param>
            <param name="caller">The object to search a path for.</param>
            <param name="tileHandler">
            The <see cref="T:Atom.Scene.Tiles.ITileHandler`1"/> 
            to use when checking whether a tile is walkable.
            </param>
            <returns> The path from the starting point to the target point. </returns>
            <typeparam name="TCallerType">The type of the object that a path is searched for.</typeparam>
        </member>
        <member name="M:Atom.AI.AStarTilePathSearcher.FindPathTile``1(System.Int32,System.Int32,System.Int32,System.Int32,``0,Atom.Scene.Tiles.ITileHandler{``0})">
            <summary>
            Tries to find a path from the starting tile to the target tile.
            </summary>
            <param name="startX">
            The starting point on the x-axis in tile-space.
            </param>
            <param name="startY">
            The starting point on the y-axis in tile-space.
            </param>
            <param name="targetX">
            The end point on the x-axis in tile-space.
            </param>
            <param name="targetY">
            The end point on the y-axis in tile-space.
            </param>
            <param name="caller">
            The object to search a path for.
            </param>
            <param name="tileHandler">
            The <see cref="T:Atom.Scene.Tiles.ITileHandler`1"/> 
            to use when checking whether a tile is walkable.
            </param>
            <returns>
            The path from the starting tile to the target tile.
            </returns>
            <typeparam name="TCallerType">
            The type of the object that a path is searched for.
            </typeparam>
        </member>
        <member name="F:Atom.AI.AStarTilePathSearcher.mapWidth">
            <summary>
            The width of the map in tile-space.
            </summary>
        </member>
        <member name="F:Atom.AI.AStarTilePathSearcher.mapHeight">
            <summary>
            The height of the map in tile-space.
            </summary>
        </member>
        <member name="F:Atom.AI.AStarTilePathSearcher.tileSize">
            <summary>
            The size of the tiles of the map.
            </summary>
        </member>
        <member name="F:Atom.AI.AStarTilePathSearcher.onClosedList">
            <summary> 
            The number of items on the closed list (??).
            </summary>
        </member>
        <member name="F:Atom.AI.AStarTilePathSearcher.dataLayer">
            <summary>
            The underlying map layer.
            </summary>
        </member>
        <member name="F:Atom.AI.AStarTilePathSearcher.openList">
            <summary>
            Holds ID# of open list items.
            </summary>
        </member>
        <member name="F:Atom.AI.AStarTilePathSearcher.whichList">
            <summary>
            Records whether a cell is on the open list or on the closed list.
            </summary>
        </member>
        <member name="F:Atom.AI.AStarTilePathSearcher.openX">
            <summary>
            Stores the location of an item on the open list.
            </summary>
        </member>
        <member name="F:Atom.AI.AStarTilePathSearcher.openY">
            <summary>
            Stores the location of an item on the open list.
            </summary>
        </member>
        <member name="F:Atom.AI.AStarTilePathSearcher.parentX">
            <summary>
            Stores parent location of each cell.
            </summary>
        </member>
        <member name="F:Atom.AI.AStarTilePathSearcher.parentY">
            <summary>
            Stores parent location of each cell.
            </summary>
        </member>
        <member name="F:Atom.AI.AStarTilePathSearcher.costF">
            <summary>
            Stores the F cost of a cell on the open list.
            </summary>
        </member>
        <member name="F:Atom.AI.AStarTilePathSearcher.costH">
            <summary>
            Stores the H cost of a cell on the open list.
            </summary>
        </member>
        <member name="F:Atom.AI.AStarTilePathSearcher.costG">
            <summary>
            Stores the G cost of each cell.
            </summary>
        </member>
        <member name="T:Atom.AI.IMultiFloorPathSearcherProvider">
            <summary>
            Provides a mechanism for receiving a <see cref="T:Atom.AI.AStarTilePathSearcher"/> given a floor-number.
            </summary>
            <remarks>
            Each TileMapFloor has its own ActionLayer, that can be searched in with a AStarTilePathSearcher.
            </remarks>
        </member>
        <member name="M:Atom.AI.IMultiFloorPathSearcherProvider.GetTilePathSearcher(System.Int32)">
            <summary>
            Gets the <see cref="T:Atom.AI.ITilePathSearcher"/> for the floor with the specified <paramref name="floorNumber"/>.
            </summary>
            <param name="floorNumber">
            The number of the floor.
            </param>
            <returns>
            The <see cref="T:Atom.AI.ITilePathSearcher"/> for the floor with the specified floorNumber.
            </returns>
        </member>
        <member name="T:Atom.AI.ITilePathSearcher">
            <summary>
            Provides a mechanism for finding <see cref="T:Atom.Scene.Tiles.TilePath"/>s between two locations.
            </summary>
        </member>
        <member name="M:Atom.AI.ITilePathSearcher.FindPath``1(System.Int32,System.Int32,System.Int32,System.Int32,``0,Atom.Scene.Tiles.ITileHandler{``0})">
            <summary>
            Tries to find a path from the starting point to the target point.
            </summary>
            <typeparam name="TCallerType">
            The type of the object that a path is searched for.
            </typeparam>
            <param name="startX">
            The starting point on the x-axis.
            </param>
            <param name="startY">
            The starting point on the y-axis.
            </param>
            <param name="targetX">
            The end point on the x-axis.
            </param>
            <param name="targetY">
            The end point on the y-axis.
            </param>
            <param name="caller">
            The object to search a path for.
            </param>
            <param name="tileHandler">
            The <see cref="T:Atom.Scene.Tiles.ITileHandler`1"/> 
            to use when checking whether a tile is walkable.
            </param>
            <returns>
            The path from the starting point to the target point.
            </returns>
        </member>
        <member name="M:Atom.AI.ITilePathSearcher.FindPathTile``1(System.Int32,System.Int32,System.Int32,System.Int32,``0,Atom.Scene.Tiles.ITileHandler{``0})">
            <summary>
            Tries to find a path from the starting tile to the target tile.
            </summary>
            <typeparam name="TCallerType">
            The type of the object that a path is searched for.
            </typeparam>
            <param name="startX">
            The starting point on the x-axis in tile-space.
            </param>
            <param name="startY">
            The starting point on the y-axis in tile-space.
            </param>
            <param name="targetX">
            The end point on the x-axis in tile-space.
            </param>
            <param name="targetY">
            The end point on the y-axis in tile-space.
            </param>
            <param name="caller">
            The object to search a path for.
            </param>
            <param name="tileHandler">
            The <see cref="T:Atom.Scene.Tiles.ITileHandler`1"/> 
            to use when checking whether a tile is walkable.
            </param>
            <returns>
            The path from the starting tile to the target tile.
            </returns>
        </member>
    </members>
</doc>
