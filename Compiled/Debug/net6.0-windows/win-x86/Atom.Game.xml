<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Atom.Game</name>
    </assembly>
    <members>
        <member name="T:Atom.Components.Collision.Collision2">
            <summary>
            Defines an abstract base implemententation of the <see cref="T:Atom.Components.Collision.ICollision2"/> component interface;
            providing access to the collision information of an <see cref="T:Atom.Components.IEntity"/> in two-dimensional space.
            </summary>
            <remarks>
            The Collision2 component depends on the <see cref="T:Atom.Components.Transform.ITransform2"/> component
            for transformation information.
            </remarks>
        </member>
        <member name="E:Atom.Components.Collision.Collision2.Changed">
            <summary>
            Fired when the collision information of this 
            Collision2 component has been changed/refreshed.
            </summary>
        </member>
        <member name="P:Atom.Components.Collision.Collision2.Rectangle">
            <summary>
            Gets or sets the collision <see cref="T:Atom.Math.RectangleF"/> of the <see cref="T:Atom.Components.IEntity"/>
            that owns this Collision2 component.
            </summary>
            <value>The collision rectangle of the collideable IEntity.</value>
        </member>
        <member name="P:Atom.Components.Collision.Collision2.Circle">
            <summary>
            Gets or sets the collision <see cref="P:Atom.Components.Collision.Collision2.Circle"/> of the <see cref="T:Atom.Components.IEntity"/>
            that owns this Collision2 component.
            </summary>
            <value>The collision circle of the collideable IEntity.</value>
        </member>
        <member name="P:Atom.Components.Collision.Collision2.Center">
            <summary>
            Gets the center of the collision rectangle/circle of the <see cref="T:Atom.Components.IEntity"/>
            that owns this Collision2 component.
            </summary>
            <value>The center of the collision rectangle of the collideable IEntity.</value>
        </member>
        <member name="P:Atom.Components.Collision.Collision2.Position">
            <summary>
            Gets the position of the collision rectangle of the <see cref="T:Atom.Components.IEntity"/>
            that owns this Collision2 component.
            </summary>
            <value>The position of the collision rectangle of the collideable IEntity.</value>
        </member>
        <member name="P:Atom.Components.Collision.Collision2.Transform">
            <summary>
            Gets the <see cref="T:Atom.Components.Transform.ITransform2"/> component of the <see cref="T:Atom.Components.IEntity"/>
            that owns this Collision2 component.
            </summary>
            <remarks>
            This operation is very fast; as no look-up is required.
            </remarks>
            <value>
            The <see cref="T:Atom.Components.Transform.ITransform2"/> component of the <see cref="T:Atom.Components.IEntity"/>
            that owns this Collision2 component.
            </value>
        </member>
        <member name="M:Atom.Components.Collision.Collision2.InitializeBindings">
            <summary>
            Called when an IComponent has been removed or added
            to the <see cref="T:Atom.Components.IEntity"/> that owns this Collision2 component.
            </summary>
        </member>
        <member name="M:Atom.Components.Collision.Collision2.Hook(Atom.Components.Transform.ITransform2)">
            <summary>
            Override to hook any events onto the given <see cref="T:Atom.Components.Transform.ITransform2"/> component.
            </summary>
            <param name="transform">
            The related ITransform2 component. Is never null.
            </param>
        </member>
        <member name="M:Atom.Components.Collision.Collision2.Unhook(Atom.Components.Transform.ITransform2)">
            <summary>
            Override to unhook any events from the given <see cref="T:Atom.Components.Transform.ITransform2"/> component.
            </summary>
            <remarks>
            Unhook should remove all events that were added in <see cref="M:Atom.Components.Collision.Collision2.Hook(Atom.Components.Transform.ITransform2)"/>.
            </remarks>
            <param name="transform">
            The related ITransform2 component. Is never null.
            </param>
        </member>
        <member name="M:Atom.Components.Collision.Collision2.Refresh">
            <summary>
            Refrehes the collision shapes of this Collision2 component.
            </summary>
        </member>
        <member name="M:Atom.Components.Collision.Collision2.ActuallyRefreshShapes">
            <summary>
            Creates the collision shapes of this Collision2 component
            based on the current situation of the <see cref="T:Atom.Components.IEntity"/>.
            </summary>
            <remarks>
            The <see cref="P:Atom.Components.Collision.Collision2.Circle"/> and <see cref="P:Atom.Components.Collision.Collision2.Rectangle"/> shapes should be updated.
            </remarks>
        </member>
        <member name="M:Atom.Components.Collision.Collision2.ToString">
            <summary>
            Returns a humen-readable string representation of this Collision2 component.
            </summary>
            <returns>
            Returns a humen-readable description of this Collision2 component.
            </returns>
        </member>
        <member name="M:Atom.Components.Collision.Collision2.Intersects(Atom.Components.Collision.Collision2)">
            <summary>
            Returns whether the <see cref="P:Atom.Components.Collision.Collision2.Rectangle"/> of the given Collision2 component
            intersects with the <see cref="P:Atom.Components.Collision.Collision2.Rectangle"/> of this Collision2 component.
            </summary>
            <param name="collision">
            The collision component to test against.
            </param>
            <returns>
            Returns <see langword="true"/> if the rectangles intersect;
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Components.Collision.Collision2.Intersects(Atom.Components.Collision.ICollision2)">
            <summary>
            Returns whether the <see cref="P:Atom.Components.Collision.Collision2.Rectangle"/> of the given ICollision2 component
            intersects with the <see cref="P:Atom.Components.Collision.Collision2.Rectangle"/> of this Collision2 component.
            </summary>
            <param name="collision">
            The collision component to test against.
            </param>
            <returns>
            Returns <see langword="true"/> if the rectangles intersect;
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Components.Collision.Collision2.Intersects(Atom.Math.Rectangle)">
            <summary>
            Returns whether the given <see cref="P:Atom.Components.Collision.Collision2.Rectangle"/> intersects with
            the <see cref="P:Atom.Components.Collision.Collision2.Rectangle"/> of this Collision2 component.
            </summary>
            <param name="area">
            The area to check this Collision2 component against.
            </param>
            <returns>
            Returns <see langword="true"/> if the rectangles intersect;
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Components.Collision.Collision2.Intersects(Atom.Math.Rectangle@)">
            <summary>
            Returns whether the given <see cref="P:Atom.Components.Collision.Collision2.Rectangle"/> intersects with
            the <see cref="P:Atom.Components.Collision.Collision2.Rectangle"/> of this Collision2 component.
            </summary>
            <param name="area">
            The area to check this Collision2 component against.
            </param>
            <returns>
            Returns <see langword="true"/> if the rectangles intersect;
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Components.Collision.Collision2.Intersects(Atom.Math.RectangleF)">
            <summary>
            Returns whether the given <see cref="T:Atom.Math.RectangleF"/> intersects with
            the <see cref="P:Atom.Components.Collision.Collision2.Rectangle"/> of this Collision2 component.
            </summary>
            <param name="area">
            The area to check this Collision2 component against.
            </param>
            <returns>
            Returns <see langword="true"/> if the rectangles intersect;
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Components.Collision.Collision2.Intersects(Atom.Math.RectangleF@)">
            <summary>
            Returns whether the given <see cref="T:Atom.Math.RectangleF"/> intersects with
            the <see cref="P:Atom.Components.Collision.Collision2.Rectangle"/> of this Collision2 component.
            </summary>
            <param name="area">
            The area to check this Collision2 component against.
            </param>
            <returns>
            Returns <see langword="true"/> if the rectangles intersect;
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="F:Atom.Components.Collision.Collision2.rectangle">
            <summary>
            The collision <see cref="P:Atom.Components.Collision.Collision2.Rectangle"/>.
            </summary>
        </member>
        <member name="F:Atom.Components.Collision.Collision2.circle">
            <summary>
            The collision <see cref="P:Atom.Components.Collision.Collision2.Circle"/>.
            </summary>
        </member>
        <member name="F:Atom.Components.Collision.Collision2.transform">
            <summary>
            The <see cref="T:Atom.Components.Transform.ITransform2"/> component.
            </summary>
        </member>
        <member name="T:Atom.Components.Collision.ICollision2">
            <summary>
            Provides access to the collision information of an <see cref="T:Atom.Components.IEntity"/>
            in two-dimensional space.
            </summary>
            <remarks>
            The ICollision2 component depends on the <see cref="T:Atom.Components.Transform.ITransform2"/> component
            for transformation information.
            </remarks>
        </member>
        <member name="E:Atom.Components.Collision.ICollision2.Changed">
            <summary>
            Fired when the collision information of this 
            ICollision2 component has been changed/refreshed.
            </summary>
        </member>
        <member name="P:Atom.Components.Collision.ICollision2.Rectangle">
            <summary>
            Gets the axis-aligned collision <see cref="T:Atom.Math.RectangleF"/> of this ICollision2 component.
            </summary>
            <value>The collision RectangleF.</value>
        </member>
        <member name="P:Atom.Components.Collision.ICollision2.Circle">
            <summary>
            Gets the collision <see cref="P:Atom.Components.Collision.ICollision2.Circle"/> of this ICollision2 component.
            </summary>
            <value>The collision Circle.</value>
        </member>
        <member name="P:Atom.Components.Collision.ICollision2.Transform">
            <summary>
            Gets the <see cref="T:Atom.Components.Transform.ITransform2"/> component that exposes the
            transformation information of the <see cref="T:Atom.Components.IEntity"/>.
            </summary>
        </member>
        <member name="T:Atom.Components.Collision.StaticCollision2">
            <summary>
            Implements the <see cref="T:Atom.Components.Collision.Collision2"/> component
            by using the static <see cref="P:Atom.Components.Collision.StaticCollision2.Offset"/> and <see cref="P:Atom.Components.Collision.StaticCollision2.Size"/> data
            provided by the <see cref="T:Atom.Components.Collision.StaticCollision2"/> to create the Collision Shapes.
            </summary>
        </member>
        <member name="P:Atom.Components.Collision.StaticCollision2.Offset">
            <summary>
            Gets or sets the static collision offset that is applied 
            from the <see cref="P:Atom.Components.Transform.Transform2.Position"/> of the owning <see cref="T:Atom.Components.Entity"/> 
            to the actual start of the <see cref="P:Atom.Components.Collision.Collision2.Rectangle"/>.
            </summary>
            <value>The offset from the position of the static-collideable Entity to the collision area.</value>
        </member>
        <member name="P:Atom.Components.Collision.StaticCollision2.Size">
            <summary>
            Gets or sets the static size of the <see cref="P:Atom.Components.Collision.Collision2.Rectangle"/>.
            </summary>
            <value>The collision size of the static-collideable Entity.</value>
        </member>
        <member name="P:Atom.Components.Collision.StaticCollision2.Width">
            <summary>
            Gets the static width of the <see cref="P:Atom.Components.Collision.Collision2.Rectangle"/>.
            </summary>
            <value>The collision width of the static-collideable Entity.</value>
        </member>
        <member name="P:Atom.Components.Collision.StaticCollision2.Height">
            <summary>
            Gets the static height of the <see cref="P:Atom.Components.Collision.Collision2.Rectangle"/>.
            </summary>
            <value>The collision height of the static-collideable Entity.</value>
        </member>
        <member name="M:Atom.Components.Collision.StaticCollision2.Set(Atom.Math.Vector2,Atom.Math.Vector2)">
            <summary>
            Sets the properties of the <see cref="T:Atom.Components.Collision.StaticCollision2"/> in one go.
            </summary>
            <remarks>
            Reduces the number of CollisionShape refreshes.
            </remarks>
            <param name="collisionOffset"> 
            Thestatic collision offset that is applied 
            from the <see cref="P:Atom.Components.Transform.Transform2.Position"/> of the owning <see cref="T:Atom.Components.Entity"/> 
            to the actual start of the <see cref="P:Atom.Components.Collision.Collision2.Rectangle"/>.
            </param>
            <param name="collisionSize">
            The static size of the <see cref="P:Atom.Components.Collision.Collision2.Rectangle"/>.
            </param>
        </member>
        <member name="M:Atom.Components.Collision.StaticCollision2.Hook(Atom.Components.Transform.ITransform2)">
            <summary>
            Override to hook any events onto the given <see cref="T:Atom.Components.Transform.ITransform2"/> component.
            </summary>
            <param name="transform">
            The related ITransform2 component. Is never null.
            </param>
        </member>
        <member name="M:Atom.Components.Collision.StaticCollision2.Unhook(Atom.Components.Transform.ITransform2)">
            <summary>
            Override to unhook any events from the given <see cref="T:Atom.Components.Transform.ITransform2"/> component.
            </summary>
            <remarks>
            Unhook should remove all events that were added in <see cref="M:Atom.Components.Collision.StaticCollision2.Hook(Atom.Components.Transform.ITransform2)"/>.
            </remarks>
            <param name="transform">
            The related ITransform2 component. Is never null.
            </param>
        </member>
        <member name="M:Atom.Components.Collision.StaticCollision2.ActuallyRefreshShapes">
            <summary>
            Creates the collision shapes of this Collision2 component
            based on the current situation of the <see cref="T:Atom.Components.IEntity"/>.
            </summary>
            <remarks>
            The <see cref="T:Atom.Math.Circle"/> and <see cref="T:Atom.Math.Rectangle"/> shapes should be updated.
            </remarks>
        </member>
        <member name="M:Atom.Components.Collision.StaticCollision2.OnTransformChanged(Atom.Components.Transform.ITransform2)">
            <summary>
            Gets called when the transformation of the Entity that owns 
            this <see cref="T:Atom.Components.Collision.StaticCollision2"/> object has changed.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
        </member>
        <member name="F:Atom.Components.Collision.StaticCollision2.collisionOffset">
            <summary>
            The static collision offset that is applied
            from the <see cref="P:Atom.Components.Transform.Transform2.Position"/> of the owning <see cref="T:Atom.Components.Entity"/>
            to the actual start of the <see cref="P:Atom.Components.Collision.Collision2.Rectangle"/>.
            </summary>
        </member>
        <member name="F:Atom.Components.Collision.StaticCollision2.collisionSize">
            <summary>
            The static size of the <see cref="P:Atom.Components.Collision.Collision2.Rectangle"/>.
            </summary>
        </member>
        <member name="T:Atom.Components.Transform.HierarchicalTransform2">
            <summary>
            Defines a <see cref="T:Atom.Components.Transform.Transform2"/> that is hirachically organized.
            Child transforms inherit the transformation of their parents.
            </summary>
        </member>
        <member name="E:Atom.Components.Transform.HierarchicalTransform2.RelativePositionChanged">
            <summary>
            Fired when the <see cref="P:Atom.Components.Transform.HierarchicalTransform2.RelativePosition"/> of this <see cref="T:Atom.Components.Transform.HierarchicalTransform2"/> has changed.
            </summary>
        </member>
        <member name="E:Atom.Components.Transform.HierarchicalTransform2.RelativeScaleChanged">
            <summary>
            Fired when the <see cref="P:Atom.Components.Transform.HierarchicalTransform2.RelativeScale"/> of this <see cref="T:Atom.Components.Transform.HierarchicalTransform2"/> has changed.
            </summary>
        </member>
        <member name="E:Atom.Components.Transform.HierarchicalTransform2.RelativeRotationChanged">
            <summary>
            Fired when the <see cref="P:Atom.Components.Transform.HierarchicalTransform2.RelativeRotation"/> of this <see cref="T:Atom.Components.Transform.HierarchicalTransform2"/> has changed.
            </summary>
        </member>
        <member name="P:Atom.Components.Transform.HierarchicalTransform2.Parent">
            <summary>
            Gets or sets the parent <see cref="T:Atom.Components.Transform.HierarchicalTransform2"/>
            this <see cref="T:Atom.Components.Transform.HierarchicalTransform2"/> inherits
            its properties from. Can be null.
            </summary>
            <value>
            The <see cref="T:Atom.Components.Transform.HierarchicalTransform2"/> component that is the parent of this HierarchicalTransform2.
            The default value is null.
            </value>
        </member>
        <member name="P:Atom.Components.Transform.HierarchicalTransform2.ParentOwner">
            <summary>
            Gets the <see cref="T:Atom.Components.IEntity"/> that owns the <see cref="P:Atom.Components.Transform.HierarchicalTransform2.Parent"/> <see cref="T:Atom.Components.Transform.HierarchicalTransform2"/> 
            of this <see cref="T:Atom.Components.Transform.HierarchicalTransform2"/>.
            </summary>
            <value>The parent Entity of the Entity that owns this Component.</value>
        </member>
        <member name="P:Atom.Components.Transform.HierarchicalTransform2.Children">
            <summary>
            Gets the list of child <see cref="T:Atom.Components.Transform.HierarchicalTransform2"/>s
            of this <see cref="T:Atom.Components.Transform.HierarchicalTransform2"/>.
            </summary>
            <value>The list of children.</value>
        </member>
        <member name="P:Atom.Components.Transform.HierarchicalTransform2.RelativePosition">
            <summary>
            Gets or sets the relative position of this <see cref="T:Atom.Components.Transform.HierarchicalTransform2"/> component
            to its <see cref="P:Atom.Components.Transform.HierarchicalTransform2.Parent"/>.
            </summary>
            <value>
            The position of the hierarchical-transformable Entity relative to its <see cref="P:Atom.Components.Transform.HierarchicalTransform2.ParentOwner"/>.
            The default value is <see cref="P:Atom.Math.Vector2.Zero"/>.
            </value>
        </member>
        <member name="P:Atom.Components.Transform.HierarchicalTransform2.RelativeScale">
            <summary>
            Gets or sets the relative scale of this <see cref="T:Atom.Components.Transform.HierarchicalTransform2"/> component
            to its <see cref="P:Atom.Components.Transform.HierarchicalTransform2.Parent"/>.
            </summary>
            <value>
            The scale of the hierarchical-transformable Entity relative to its <see cref="P:Atom.Components.Transform.HierarchicalTransform2.ParentOwner"/>.
            The default value is <see cref="P:Atom.Math.Vector2.One"/>.
            </value>
        </member>
        <member name="P:Atom.Components.Transform.HierarchicalTransform2.RelativeRotation">
            <summary>
            Gets or sets the relative scale of this <see cref="T:Atom.Components.Transform.HierarchicalTransform2"/> component
            to its <see cref="P:Atom.Components.Transform.HierarchicalTransform2.Parent"/>.
            </summary>
            <value>
            The rotation of the hierarchical-transformable Entity relative to its <see cref="P:Atom.Components.Transform.HierarchicalTransform2.ParentOwner"/>.
            The default value is 0.
            </value>
        </member>
        <member name="P:Atom.Components.Transform.HierarchicalTransform2.Position">
            <summary>
            Gets or sets the position of this <see cref="T:Atom.Components.Transform.HierarchicalTransform2"/> component.
            </summary>
            <value>The position of the hierarchical-transformable Entity.</value>
        </member>
        <member name="P:Atom.Components.Transform.HierarchicalTransform2.Scale">
            <summary>
            Gets or sets the scale of this <see cref="T:Atom.Components.Transform.HierarchicalTransform2"/> component.
            </summary>
            <value>The scale of the hierarchical-transformable Entity.</value>
        </member>
        <member name="P:Atom.Components.Transform.HierarchicalTransform2.Rotation">
            <summary>
            Gets or sets the rotation of this <see cref="T:Atom.Components.Transform.HierarchicalTransform2"/> component.
            </summary>
            <value>The rotation value of the hierarchical-transformable Entity.</value>
        </member>
        <member name="P:Atom.Components.Transform.HierarchicalTransform2.BequeathsPosition">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Atom.Components.Transform.HierarchicalTransform2"/> bequeaths
            its <see cref="P:Atom.Components.Transform.Transform2.Position"/> to its <see cref="P:Atom.Components.Transform.HierarchicalTransform2.Children"/>.
            </summary>
            <value>The default value is true.</value>
        </member>
        <member name="P:Atom.Components.Transform.HierarchicalTransform2.BequeathsScale">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Atom.Components.Transform.HierarchicalTransform2"/> bequeaths
            its <see cref="P:Atom.Components.Transform.Transform2.Scale"/> to its <see cref="P:Atom.Components.Transform.HierarchicalTransform2.Children"/>.
            </summary>
            <value>The default value is true.</value>
        </member>
        <member name="P:Atom.Components.Transform.HierarchicalTransform2.BequeathsRotation">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Atom.Components.Transform.HierarchicalTransform2"/> bequeaths
            its <see cref="P:Atom.Components.Transform.Transform2.Rotation"/> to its <see cref="P:Atom.Components.Transform.HierarchicalTransform2.Children"/>.
            </summary>
            <value>The default value is true.</value>
        </member>
        <member name="P:Atom.Components.Transform.HierarchicalTransform2.InheritsPosition">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Atom.Components.Transform.HierarchicalTransform2"/> inherits
            its <see cref="P:Atom.Components.Transform.Transform2.Position"/> from its <see cref="P:Atom.Components.Transform.HierarchicalTransform2.Parent"/>.
            </summary>
            <value>The default value is true.</value>
        </member>
        <member name="P:Atom.Components.Transform.HierarchicalTransform2.InheritsScale">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Atom.Components.Transform.HierarchicalTransform2"/> inherits
            its <see cref="P:Atom.Components.Transform.Transform2.Scale"/> from its <see cref="P:Atom.Components.Transform.HierarchicalTransform2.Parent"/>.
            </summary>
            <value>The default value is true.</value>
        </member>
        <member name="P:Atom.Components.Transform.HierarchicalTransform2.InheritsRotation">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Atom.Components.Transform.HierarchicalTransform2"/> inherits
            its <see cref="P:Atom.Components.Transform.Transform2.Rotation"/> from its <see cref="P:Atom.Components.Transform.HierarchicalTransform2.Parent"/>.
            </summary>
            <value>The default value is true.</value>
        </member>
        <member name="M:Atom.Components.Transform.HierarchicalTransform2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Components.Transform.HierarchicalTransform2"/> class.
            </summary>
        </member>
        <member name="M:Atom.Components.Transform.HierarchicalTransform2.InformTransformUpdateNeeded">
            <summary>
            Informs this node that its position needs to be updated.
            </summary>
        </member>
        <member name="M:Atom.Components.Transform.HierarchicalTransform2.InformChildrenTransformUpdateNeeded">
            <summary>
            Informs the children of this <see cref="T:Atom.Components.Transform.HierarchicalTransform2"/> that 
            an transformation update is needed.
            </summary>
        </member>
        <member name="M:Atom.Components.Transform.HierarchicalTransform2.UpdateTransform">
            <summary>
            Updates the transformation information
            of this <see cref="T:Atom.Components.Transform.HierarchicalTransform2"/>.
            </summary>
        </member>
        <member name="M:Atom.Components.Transform.HierarchicalTransform2.UpdateTransformNoCheck">
            <summary>
            Updates the transformation information
            of this <see cref="T:Atom.Components.Transform.HierarchicalTransform2"/>.
            </summary>
        </member>
        <member name="M:Atom.Components.Transform.HierarchicalTransform2.ToString">
            <summary>
            Returns a humen-readable string representation of this <see cref="T:Atom.Components.Transform.HierarchicalTransform2"/>.
            </summary>
            <returns>
            Returns a humen-readable description of this <see cref="T:Atom.Components.Transform.HierarchicalTransform2"/>.
            </returns>
        </member>
        <member name="M:Atom.Components.Transform.HierarchicalTransform2.AddChild(Atom.Components.Transform.HierarchicalTransform2)">
            <summary>
            Adds the specified <see cref="T:Atom.Components.Transform.HierarchicalTransform2"/> to
            this <see cref="T:Atom.Components.Transform.HierarchicalTransform2"/> as a child.
            </summary>
            <param name="transform">
            The <see cref="T:Atom.Components.Transform.HierarchicalTransform2"/> to add.
            </param>
        </member>
        <member name="M:Atom.Components.Transform.HierarchicalTransform2.OnPositionChanged(Atom.Math.Vector2,Atom.Math.Vector2)">
            <summary>
            Called when the <see cref="P:Atom.Components.Transform.Transform2.Position"/> of this <see cref="T:Atom.Components.Transform.HierarchicalTransform2"/> has changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Atom.Components.Transform.HierarchicalTransform2.OnScaleChanged(Atom.Math.Vector2,Atom.Math.Vector2)">
            <summary>
            Called when the <see cref="P:Atom.Components.Transform.Transform2.Scale"/> of this <see cref="T:Atom.Components.Transform.HierarchicalTransform2"/> has changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Atom.Components.Transform.HierarchicalTransform2.OnRotationChanged(System.Single,System.Single)">
            <summary>
            Called when the <see cref="P:Atom.Components.Transform.Transform2.Rotation"/> of this <see cref="T:Atom.Components.Transform.HierarchicalTransform2"/> has changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Atom.Components.Transform.HierarchicalTransform2.OnRelativePositionChanged(Atom.Math.Vector2,Atom.Math.Vector2)">
            <summary>
            Called when the <see cref="P:Atom.Components.Transform.HierarchicalTransform2.RelativePosition"/> of this <see cref="T:Atom.Components.Transform.HierarchicalTransform2"/> has changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Atom.Components.Transform.HierarchicalTransform2.OnRelativeScaleChanged(Atom.Math.Vector2,Atom.Math.Vector2)">
            <summary>
            Called when the <see cref="P:Atom.Components.Transform.HierarchicalTransform2.RelativeScale"/> of this <see cref="T:Atom.Components.Transform.HierarchicalTransform2"/> has changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Atom.Components.Transform.HierarchicalTransform2.OnRelativeRotationChanged(System.Single,System.Single)">
            <summary>
            Called when the <see cref="P:Atom.Components.Transform.HierarchicalTransform2.RelativeRotation"/> of this <see cref="T:Atom.Components.Transform.HierarchicalTransform2"/> has changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:Atom.Components.Transform.HierarchicalTransform2.parent">
            <summary>
            The parent <see cref="T:Atom.Components.Transform.HierarchicalTransform2"/>
            this <see cref="T:Atom.Components.Transform.HierarchicalTransform2"/> inherits
            its properties from. Can be null.
            </summary>
        </member>
        <member name="F:Atom.Components.Transform.HierarchicalTransform2.children">
            <summary>
            The child <see cref="T:Atom.Components.Transform.HierarchicalTransform2"/>s
            of this <see cref="T:Atom.Components.Transform.HierarchicalTransform2"/>.
            </summary>
        </member>
        <member name="F:Atom.Components.Transform.HierarchicalTransform2.relativePosition">
            <summary>
            Stores the relative position of this <see cref="T:Atom.Components.Transform.HierarchicalTransform2"/> component
            to its <see cref="P:Atom.Components.Transform.HierarchicalTransform2.Parent"/>.
            </summary>
        </member>
        <member name="F:Atom.Components.Transform.HierarchicalTransform2.relativeScale">
            <summary>
            Stores the relative scale of this <see cref="T:Atom.Components.Transform.HierarchicalTransform2"/> component
            to its <see cref="P:Atom.Components.Transform.HierarchicalTransform2.Parent"/>.
            </summary>
        </member>
        <member name="F:Atom.Components.Transform.HierarchicalTransform2.relativeRotation">
            <summary>
            Stores the relative rotation of this <see cref="T:Atom.Components.Transform.HierarchicalTransform2"/> component
            to its <see cref="P:Atom.Components.Transform.HierarchicalTransform2.Parent"/>.
            </summary>
        </member>
        <member name="F:Atom.Components.Transform.HierarchicalTransform2.isTransformUpdateNeeded">
            <summary>
            Specifies whether this <see cref="T:Atom.Components.Transform.HierarchicalTransform2"/> is out of date
            and needs to be updated.
            </summary>
        </member>
        <member name="F:Atom.Components.Transform.HierarchicalTransform2.bequeathsPosition">
            <summary>
            Specifies whether this <see cref="T:Atom.Components.Transform.HierarchicalTransform2"/> bequeaths
            its <see cref="P:Atom.Components.Transform.Transform2.Position"/> to its <see cref="P:Atom.Components.Transform.HierarchicalTransform2.Children"/>.
            </summary>
        </member>
        <member name="F:Atom.Components.Transform.HierarchicalTransform2.bequeathsScale">
            <summary>
            Specifies whether this <see cref="T:Atom.Components.Transform.HierarchicalTransform2"/> bequeaths
            its <see cref="P:Atom.Components.Transform.Transform2.Scale"/> to its <see cref="P:Atom.Components.Transform.HierarchicalTransform2.Children"/>.
            </summary>
        </member>
        <member name="F:Atom.Components.Transform.HierarchicalTransform2.bequeathsRotation">
            <summary>
            Specifies whether this <see cref="T:Atom.Components.Transform.HierarchicalTransform2"/> bequeaths
            its <see cref="P:Atom.Components.Transform.Transform2.Rotation"/> to its <see cref="P:Atom.Components.Transform.HierarchicalTransform2.Children"/>.
            </summary>
        </member>
        <member name="F:Atom.Components.Transform.HierarchicalTransform2.inheritsPosition">
            <summary>
            Specifies whether this <see cref="T:Atom.Components.Transform.HierarchicalTransform2"/> inherits
            its <see cref="P:Atom.Components.Transform.Transform2.Position"/> from its <see cref="P:Atom.Components.Transform.HierarchicalTransform2.Parent"/>.
            </summary>
        </member>
        <member name="F:Atom.Components.Transform.HierarchicalTransform2.inheritsScale">
            <summary>
            Specifies whether this <see cref="T:Atom.Components.Transform.HierarchicalTransform2"/> inherits
            its <see cref="P:Atom.Components.Transform.Transform2.Scale"/> from its <see cref="P:Atom.Components.Transform.HierarchicalTransform2.Parent"/>.
            </summary>
        </member>
        <member name="F:Atom.Components.Transform.HierarchicalTransform2.inheritsRotation">
            <summary>
            Specifies whether this <see cref="T:Atom.Components.Transform.HierarchicalTransform2"/> inherits
            its <see cref="P:Atom.Components.Transform.Transform2.Rotation"/> from its <see cref="P:Atom.Components.Transform.HierarchicalTransform2.Parent"/>.
            </summary>
        </member>
        <member name="T:Atom.Components.Transform.ITransform2">
            <summary>
            Provides access to the transformation state of an <see cref="T:Atom.Components.IEntity"/> in two-dimensional space.
            This includes <see cref="P:Atom.Math.IPositionable2.Position"/>, <see cref="P:Atom.Components.Transform.ITransform2.Scale"/>, <see cref="P:Atom.Components.Transform.ITransform2.Rotation"/> and <see cref="P:Atom.Components.Transform.ITransform2.Origin"/>,
            </summary>
        </member>
        <member name="E:Atom.Components.Transform.ITransform2.Changed">
            <summary>
            Fired when the transform this ITransform2 component represents has changed.
            </summary>
        </member>
        <member name="E:Atom.Components.Transform.ITransform2.PositionChanged">
            <summary>
            Fired when the <see cref="P:Atom.Components.Transform.ITransform2.X"/> or <see cref="P:Atom.Components.Transform.ITransform2.Y"/> position of this ITransform2 has changed.
            </summary>
        </member>
        <member name="E:Atom.Components.Transform.ITransform2.ScaleChanged">
            <summary>
            Fired when the <see cref="P:Atom.Components.Transform.ITransform2.Scale"/> of this ITransform2 has changed.
            </summary>
        </member>
        <member name="E:Atom.Components.Transform.ITransform2.RotationChanged">
            <summary>
            Fired when the <see cref="P:Atom.Components.Transform.ITransform2.Rotation"/> of this ITransform2 has changed.
            </summary>
        </member>
        <member name="E:Atom.Components.Transform.ITransform2.OriginChanged">
            <summary>
            Fired when the <see cref="P:Atom.Components.Transform.ITransform2.Origin"/> of this ITransform2 has changed.
            </summary>
        </member>
        <member name="P:Atom.Components.Transform.ITransform2.X">
            <summary>
            Gets or sets the position of this ITransform2 component on the x-axis.
            </summary>
            <value>The position on the x-axis of the transformable Entity.</value>
        </member>
        <member name="P:Atom.Components.Transform.ITransform2.Y">
            <summary>
            Gets or sets the position of this ITransform2 component on the y-axis.
            </summary>
            <value>The position on the y-axis of the transformable Entity.</value>
        </member>
        <member name="P:Atom.Components.Transform.ITransform2.Scale">
            <summary>
            Gets or sets the scale of this ITransform2 component.
            </summary>
            <value>The scale of the transformable Entity.</value>
        </member>
        <member name="P:Atom.Components.Transform.ITransform2.Rotation">
            <summary>
            Gets or sets the rotation in radians of this ITransform2 component.
            </summary>
            <value>The rotation value of the transformable Entity.</value>
        </member>
        <member name="P:Atom.Components.Transform.ITransform2.Origin">
            <summary>
            Gets or sets the origin of this ITransform2 component.
            </summary>
            <value>The scale and rotation origin of the transformable Entity.</value>
        </member>
        <member name="T:Atom.Components.Transform.Transform2">
            <summary>
            Defines the transformation state of an <see cref="T:Atom.Components.IEntity"/> in two dimensional space.
            This includes <see cref="P:Atom.Components.Transform.Transform2.Position"/>, <see cref="P:Atom.Components.Transform.Transform2.Scale"/>, <see cref="P:Atom.Components.Transform.Transform2.Rotation"/> and <see cref="P:Atom.Components.Transform.Transform2.Origin"/>,
            </summary>
        </member>
        <member name="E:Atom.Components.Transform.Transform2.Changed">
            <summary>
            Fired when the transform this <see cref="T:Atom.Components.Transform.Transform2"/> component represents has changed.
            </summary>
        </member>
        <member name="E:Atom.Components.Transform.Transform2.PositionChanged">
            <summary>
            Fired when the <see cref="P:Atom.Components.Transform.Transform2.Position"/> of this <see cref="T:Atom.Components.Transform.Transform2"/> has changed.
            </summary>
        </member>
        <member name="E:Atom.Components.Transform.Transform2.ScaleChanged">
            <summary>
            Fired when the <see cref="P:Atom.Components.Transform.Transform2.Scale"/> of this <see cref="T:Atom.Components.Transform.Transform2"/> has changed.
            </summary>
        </member>
        <member name="E:Atom.Components.Transform.Transform2.RotationChanged">
            <summary>
            Fired when the <see cref="P:Atom.Components.Transform.Transform2.Rotation"/> of this <see cref="T:Atom.Components.Transform.Transform2"/> has changed.
            </summary>
        </member>
        <member name="E:Atom.Components.Transform.Transform2.OriginChanged">
            <summary>
            Fired when the <see cref="P:Atom.Components.Transform.Transform2.Origin"/> of this <see cref="T:Atom.Components.Transform.Transform2"/> has changed.
            </summary>
        </member>
        <member name="P:Atom.Components.Transform.Transform2.X">
            <summary>
            Gets or sets the position of this <see cref="T:Atom.Components.Transform.Transform2"/> component on the x-axis.
            </summary>
            <value>The position on the x-axis of the transformable Entity.</value>
        </member>
        <member name="P:Atom.Components.Transform.Transform2.Y">
            <summary>
            Gets or sets the position of this <see cref="T:Atom.Components.Transform.Transform2"/> component on the y-axis.
            </summary>
            <value>The position on the y-axis of the transformable Entity.</value>
        </member>
        <member name="P:Atom.Components.Transform.Transform2.Position">
            <summary>
            Gets or sets the position of this <see cref="T:Atom.Components.Transform.Transform2"/> component.
            </summary>
            <value>The position of the transformable Entity.</value>
        </member>
        <member name="P:Atom.Components.Transform.Transform2.Scale">
            <summary>
            Gets or sets the scale of this <see cref="T:Atom.Components.Transform.Transform2"/> component.
            </summary>
            <value>The scale of the transformable Entity.</value>
        </member>
        <member name="P:Atom.Components.Transform.Transform2.Rotation">
            <summary>
            Gets or sets the rotation in radians of this <see cref="T:Atom.Components.Transform.Transform2"/> component.
            </summary>
            <value>The rotation value of the transformable Entity.</value>
        </member>
        <member name="P:Atom.Components.Transform.Transform2.Origin">
            <summary>
            Gets or sets the origin of this <see cref="T:Atom.Components.Transform.Transform2"/> component.
            </summary>
            <value>The scale and rotation origin of the transformable Entity.</value>
        </member>
        <member name="M:Atom.Components.Transform.Transform2.OnPositionChanged(Atom.Math.Vector2,Atom.Math.Vector2)">
            <summary>
            Called when the <see cref="P:Atom.Components.Transform.Transform2.Position"/> of this <see cref="T:Atom.Components.Transform.Transform2"/> has changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Atom.Components.Transform.Transform2.OnScaleChanged(Atom.Math.Vector2,Atom.Math.Vector2)">
            <summary>
            Called when the <see cref="P:Atom.Components.Transform.Transform2.Scale"/> of this <see cref="T:Atom.Components.Transform.Transform2"/> has changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Atom.Components.Transform.Transform2.OnRotationChanged(System.Single,System.Single)">
            <summary>
            Called when the <see cref="P:Atom.Components.Transform.Transform2.Rotation"/> of this <see cref="T:Atom.Components.Transform.Transform2"/> has changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Atom.Components.Transform.Transform2.OnOriginChanged(Atom.Math.Vector2,Atom.Math.Vector2)">
            <summary>
            Called when the <see cref="P:Atom.Components.Transform.Transform2.Origin"/> of this <see cref="T:Atom.Components.Transform.Transform2"/> has changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Atom.Components.Transform.Transform2.OnTransformChanged">
            <summary>
            Called when any of transformation properties of this <see cref="T:Atom.Components.Transform.Transform2"/> has changed.
            </summary>
        </member>
        <member name="M:Atom.Components.Transform.Transform2.ToString">
            <summary>
            Returns a humen-readable string representation of this <see cref="T:Atom.Components.Transform.Transform2"/>.
            </summary>
            <returns>
            Returns a humen-readable description of this <see cref="T:Atom.Components.Transform.Transform2"/>.
            </returns>
        </member>
        <member name="F:Atom.Components.Transform.Transform2.position">
            <summary>
            Stores the position of this <see cref="T:Atom.Components.Transform.Transform2"/> component.
            </summary>
        </member>
        <member name="F:Atom.Components.Transform.Transform2.scale">
            <summary>
            Stores the scale of this <see cref="T:Atom.Components.Transform.Transform2"/> component.
            </summary>
        </member>
        <member name="F:Atom.Components.Transform.Transform2.rotation">
            <summary>
            Stores the rotation in radians of this <see cref="T:Atom.Components.Transform.Transform2"/> component.
            </summary>
        </member>
        <member name="F:Atom.Components.Transform.Transform2.origin">
            <summary>
            Stores the orgin of this <see cref="T:Atom.Components.Transform.Transform2"/> component.
            </summary>
        </member>
        <member name="T:Atom.Events.Design.LocalizedCategoryAttribute">
            <summary>
            Defines a localized CategoryAttribute that uses the <see cref="T:Atom.Events.EventStrings"/>
            resource manager to lock-up resource information.
            This class can't be inherited.
            </summary>
        </member>
        <member name="M:Atom.Events.Design.LocalizedCategoryAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Events.Design.LocalizedCategoryAttribute"/> class.
            </summary>
            <param name="resourceName">
            The name of the string resource that is locked-up.
            </param>
        </member>
        <member name="T:Atom.Events.Design.LocalizedDescriptionAttribute">
            <summary>
            Defines a localized DescriptionAttribute that uses the <see cref="T:Atom.Events.EventStrings"/>
            resource manager to lock-up resource information.
            This class can't be inherited.
            </summary>
        </member>
        <member name="M:Atom.Events.Design.LocalizedDescriptionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Events.Design.LocalizedDescriptionAttribute"/> class.
            </summary>
            <param name="resourceName">
            The name of the string resource that is locked-up.
            </param>
        </member>
        <member name="T:Atom.Events.Design.LocalizedDisplayNameAttribute">
            <summary>
            Defines a localized DisplayNameAttribute that uses the <see cref="T:Atom.Events.EventStrings"/>
            resource manager to lock-up resource information.
            This class can't be inherited.
            </summary>
        </member>
        <member name="M:Atom.Events.Design.LocalizedDisplayNameAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Events.Design.LocalizedDisplayNameAttribute"/> class.
            </summary>
            <param name="resourceName">
            The name of the string resource that is locked-up.
            </param>
        </member>
        <member name="T:Atom.Events.EventDataType">
            <summary>
            Enumerates the different basic Event Data Types.
            </summary>
        </member>
        <member name="F:Atom.Events.EventDataType.Event">
            <summary>
            An <see cref="T:Atom.Events.Event"/> Type.
            </summary>
        </member>
        <member name="F:Atom.Events.EventDataType.Trigger">
            <summary>
            An <see cref="T:Atom.Events.EventTrigger"/> Type.
            </summary>
        </member>
        <member name="T:Atom.Events.EventManager">
            <summary>
            Manages and organises the updating and triggering of <see cref="T:Atom.Events.Event"/>s.
            </summary>
            <content>
            Contains the ReaderWriter that allows serialization and deserialization of <see cref="T:Atom.Events.EventManager"/>s.
            </content>
        </member>
        <member name="E:Atom.Events.EventManager.EventAdded">
            <summary>
            Fired when an <see cref="T:Atom.Events.Event"/> has been added to this <see cref="T:Atom.Events.EventManager"/>.
            </summary>
        </member>
        <member name="E:Atom.Events.EventManager.EventRemoved">
            <summary>
            Fired when an <see cref="T:Atom.Events.Event"/> has been removed from this <see cref="T:Atom.Events.EventManager"/>.
            </summary>
        </member>
        <member name="E:Atom.Events.EventManager.TriggerAdded">
            <summary>
            Fired when an <see cref="T:Atom.Events.EventTrigger"/> has been added to this <see cref="T:Atom.Events.EventManager"/>.
            </summary>
        </member>
        <member name="E:Atom.Events.EventManager.TriggerRemoved">
            <summary>
            Fired when an <see cref="T:Atom.Events.EventTrigger"/> has been removed from this <see cref="T:Atom.Events.EventManager"/>.
            </summary>
        </member>
        <member name="P:Atom.Events.EventManager.Events">
            <summary>
            Gets a read-only collection that contains all <see cref="T:Atom.Events.Event"/>s managed 
            by the <see cref="T:Atom.Events.EventManager"/>.
            </summary>
            <value>
            A read-only collection that contains all <see cref="T:Atom.Events.Event"/>s managed 
            by the <see cref="T:Atom.Events.EventManager"/>.
            </value>
        </member>
        <member name="P:Atom.Events.EventManager.Triggers">
            <summary>
            Gets a read-only collection that contains all <see cref="T:Atom.Events.EventTrigger"/>s managed 
            by the <see cref="T:Atom.Events.EventManager"/>.
            </summary>
            <value>
            A read-only collection that contains all <see cref="T:Atom.Events.EventTrigger"/>s managed 
            by the <see cref="T:Atom.Events.EventManager"/>.
            </value>
        </member>
        <member name="P:Atom.Events.EventManager.EventSaveDecider">
            <summary>
            Gets or sets the delegate that determines whether it's needed for an <see cref="T:Atom.Events.Event"/> to get saved.
            </summary>
            <exception cref="T:System.ArgumentNullException">Set: Given value is null.</exception>
            <value>
            The SaveDecider for <see cref="T:Atom.Events.Event"/>s.
            </value>
        </member>
        <member name="P:Atom.Events.EventManager.TriggerSaveDecider">
            <summary>
            Gets or sets the delegate that determines whether it's needed for an <see cref="T:Atom.Events.EventTrigger"/> to get saved.
            </summary>
            <exception cref="T:System.ArgumentNullException">Set: Given value is null.</exception>
            <value>
            The SaveDecider for <see cref="T:Atom.Events.EventTrigger"/>s.
            </value>
        </member>
        <member name="M:Atom.Events.EventManager.#ctor(System.Int32,System.Int32,System.Predicate{Atom.Events.Event},System.Predicate{Atom.Events.EventTrigger})">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Events.EventManager"/> class.
            </summary>
            <param name="initialEventCapacity">
            The initial number of events the <see cref="T:Atom.Events.EventManager"/> can store
            with allocating more memory.
            </param>
            <param name="initialTriggerCount">
            The initial number of event triggers the <see cref="T:Atom.Events.EventManager"/> can store
            with allocating more memory.
            </param>
            <param name="eventSaveDecider">
            The delegate that determines whether it's needed for an event to get saved.
            </param>
            <param name="triggerSaveDecider">
            The delegate that determines whether it's needed for an trigger to get saved.
            </param>
        </member>
        <member name="M:Atom.Events.EventManager.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Events.EventManager"/> class.
            </summary>
            <remarks>
            Uses the default EventNeedsToBeSavedDelegate.
            </remarks>
            <param name="initialEventCapacity">
            The initial number of events the <see cref="T:Atom.Events.EventManager"/> can store
            with allocating more memory.
            </param>
            <param name="initialTriggerCapacity">
            The initial number of triggers the <see cref="T:Atom.Events.EventManager"/> can store
            with allocating more memory.
            </param>
        </member>
        <member name="M:Atom.Events.EventManager.TryAdd(Atom.Events.Event)">
            <summary>
            Adds the specified <see cref="T:Atom.Events.Event"/> to the <see cref="T:Atom.Events.EventManager"/>; without ever throwing an exception.
            </summary>
            <param name="e">
            The <see cref="T:Atom.Events.Event"/> to add. Events can only be added to one <see cref="T:Atom.Events.EventManager"/> at a time.
            </param>
            <returns>
            True if the event was added succesfully; -or- otherwise false if an exception has occurred.
            </returns>
        </member>
        <member name="M:Atom.Events.EventManager.Add(Atom.Events.Event)">
            <summary>
            Adds the specified <see cref="T:Atom.Events.Event"/> to the <see cref="T:Atom.Events.EventManager"/>.
            </summary>
            <param name="e">
            The <see cref="T:Atom.Events.Event"/> to add. Events can only be added to one <see cref="T:Atom.Events.EventManager"/> at a time.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="e"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the given <see cref="T:Atom.Events.Event"/> already has been added to an <see cref="T:Atom.Events.EventManager"/>,
            or if the name of the given <see cref="T:Atom.Events.Event"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            If there already exists an Event within the <see cref="T:Atom.Events.EventManager"/>
            that has the name of the given <see cref="T:Atom.Events.Event"/>.
            </exception>
        </member>
        <member name="M:Atom.Events.EventManager.Add(Atom.Events.EventTrigger)">
            <summary>
            Adds the specified <see cref="T:Atom.Events.EventTrigger"/> to the <see cref="T:Atom.Events.EventManager"/>.
            </summary>
            <param name="trigger">
            The <see cref="T:Atom.Events.EventTrigger"/> to add. Events can only be added to one <see cref="T:Atom.Events.EventManager"/> at a time.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="trigger"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the given <see cref="T:Atom.Events.EventTrigger"/> already has been added to an <see cref="T:Atom.Events.EventManager"/>,
            or if the name of the given <see cref="T:Atom.Events.EventTrigger"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            If there already exists an EventTrigger within the <see cref="T:Atom.Events.EventManager"/>
            that has the name of the given <see cref="T:Atom.Events.EventTrigger"/>.
            </exception>
        </member>
        <member name="M:Atom.Events.EventManager.RemoveEvent(System.String)">
            <summary>
            Tries to remove the <see cref="T:Atom.Events.Event"/> with the given <paramref name="name"/>
            from this <see cref="T:Atom.Events.EventManager"/>.
            </summary>
            <param name="name">
            The name of the Event to remove.
            </param>
            <returns>
            The Event which has been removed;
            or null if there exists no Event of the given <paramref name="name"/> in this <see cref="T:Atom.Events.EventManager"/>.
            </returns>
        </member>
        <member name="M:Atom.Events.EventManager.RemoveTrigger(System.String)">
            <summary>
            Tries to remove the <see cref="T:Atom.Events.EventTrigger"/> with the given <paramref name="name"/>
            from this <see cref="T:Atom.Events.EventManager"/>.
            </summary>
            <param name="name">
            The name of the EventTrigger to remove.
            </param>
            <returns>
            The EventTrigger which has been removed;
            or null if there exists no EventTrigger of the given <paramref name="name"/> in this <see cref="T:Atom.Events.EventManager"/>.
            </returns>
        </member>
        <member name="M:Atom.Events.EventManager.ContainsEvent(System.String)">
            <summary>
            Gets whether the <see cref="T:Atom.Events.EventManager"/> contains an Event
            that has the given <paramref name="name"/>.
            </summary>
            <param name="name">
            The name that uniquely identifies the Event to check for.
            </param>
            <returns>
            Returns true if the EventManager contains an event that has the given name; 
            otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Events.EventManager.ContainsTrigger(System.String)">
            <summary>
            Gets whether the <see cref="T:Atom.Events.EventManager"/> contains an EventTrigger
            that has the given <paramref name="name"/>.
            </summary>
            <param name="name">
            The name that uniquely identifies the EventTrigger to check for.
            </param>
            <returns>
            Returns true if the EventManager contains an event that has the given name;
            otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Events.EventManager.GetEvent(System.String)">
            <summary>
            Tries to get the <see cref="T:Atom.Events.Event"/> with the given unique <paramref name="name"/>.
            </summary>
            <param name="name">The name of the event to get.</param>
            <returns>
            The event; or null if no matching event has been found.
            </returns>
        </member>
        <member name="M:Atom.Events.EventManager.GetTrigger(System.String)">
            <summary>
            Tries to get the <see cref="T:Atom.Events.EventTrigger"/> with the given unique <paramref name="name"/>.
            </summary>
            <param name="name">The name of the trigger to get.</param>
            <returns>
            The trigger; or null if no matching trigger has been found.
            </returns>
        </member>
        <member name="M:Atom.Events.EventManager.GetEventsToSave">
            <summary>
            Returns a new list that contains the Events that need to be saved.
            </summary>
            <returns>The list of events which need to be saved.</returns>
        </member>
        <member name="M:Atom.Events.EventManager.GetTriggersToSave">
            <summary>
            Returns a new list that contains the EventTriggers that need to be saved.
            </summary>
            <returns>The list of triggers which need to be saved.</returns>
        </member>
        <member name="M:Atom.Events.EventManager.Update(Atom.IUpdateContext)">
            <summary>
            Updates the <see cref="T:Atom.Events.EventManager"/>, including all its active <see cref="T:Atom.Events.LongTermEvent"/>s.
            </summary>
            <remarks>
            Includes updating of all active <see cref="T:Atom.Events.LongTermEvent"/>s.
            </remarks>
            <param name="updateContext">
            The current <see cref="T:Atom.IUpdateContext"/>.
            </param>
        </member>
        <member name="M:Atom.Events.EventManager.Clear">
            <summary>
            Removes all Event Data from the <see cref="T:Atom.Events.EventManager"/>.
            </summary>
        </member>
        <member name="M:Atom.Events.EventManager.ClearEvents">
            <summary>
            Removes all <see cref="T:Atom.Events.Event"/>s from the <see cref="T:Atom.Events.EventManager"/>.
            Also clears all active <see cref="T:Atom.Events.LongTermEvent"/>s.
            </summary>
        </member>
        <member name="M:Atom.Events.EventManager.ClearTriggers">
            <summary>
            Removes all <see cref="T:Atom.Events.EventTrigger"/>s from the <see cref="T:Atom.Events.EventManager"/>.
            </summary>
        </member>
        <member name="M:Atom.Events.EventManager.ClearActiveLongTermEvents">
            <summary>
            Clears the list of active <see cref="T:Atom.Events.LongTermEvent"/> forcing
            all of them to stop.
            </summary>
        </member>
        <member name="M:Atom.Events.EventManager.ValidateEventForAdd(Atom.Events.Event)">
            <summary>
            Called before an <see cref="T:Atom.Events.Event"/> is about to be added.
            Provide custom code here to validate the Event. 
            </summary>
            <param name="e">
            The event to validate.
            </param>
        </member>
        <member name="M:Atom.Events.EventManager.ValidateTriggerForAdd(Atom.Events.EventTrigger)">
            <summary>
            Called before an <see cref="T:Atom.Events.EventTrigger"/> is about to be added.
            Provide custom code here to validate the Trigger. 
            </summary>
            <param name="trigger">
            The trigger to validate.
            </param>
        </member>
        <member name="M:Atom.Events.EventManager.OnEventAdded(Atom.Events.Event)">
            <summary>
            Called when an <see cref="T:Atom.Events.Event"/> has been added to the <see cref="T:Atom.Events.EventManager"/>.
            </summary>
            <param name="e">The event which has been added.</param>
        </member>
        <member name="M:Atom.Events.EventManager.OnEventRemoved(Atom.Events.Event)">
            <summary>
            Called when an <see cref="T:Atom.Events.Event"/> has been removed from the <see cref="T:Atom.Events.EventManager"/>.
            </summary>
            <param name="e">The event which has been removed.</param>
        </member>
        <member name="M:Atom.Events.EventManager.OnTriggerAdded(Atom.Events.EventTrigger)">
            <summary>
            Called when an <see cref="T:Atom.Events.EventTrigger"/> has been added to the <see cref="T:Atom.Events.EventManager"/>.
            </summary>
            <param name="trigger">The trigger which has been added.</param>
        </member>
        <member name="M:Atom.Events.EventManager.OnTriggerRemoved(Atom.Events.EventTrigger)">
            <summary>
            Called when an <see cref="T:Atom.Events.EventTrigger"/> has been removed from the <see cref="T:Atom.Events.EventManager"/>.
            </summary>
            <param name="trigger">The trigger which has been removed.</param>
        </member>
        <member name="M:Atom.Events.EventManager.InternalInformEventNameHasChanged(Atom.Events.Event,System.String)">
            <summary>
            Internal helper method that is used by Event.set_Name.
            </summary>
            <param name="e">The event whos name has changed.</param>
            <param name="oldName">The old name of the specified event.</param>
        </member>
        <member name="M:Atom.Events.EventManager.InternalInformTriggerNameHasChanged(Atom.Events.EventTrigger,System.String)">
            <summary>
            Internal helper method that is used by EventTrigger.set_Name.
            </summary>
            <param name="trigger">The trigger whos name has changed.</param>
            <param name="oldName">The old name of the specified trigger.</param>
        </member>
        <member name="M:Atom.Events.EventManager.RegisterLongTermEvent(Atom.Events.LongTermEvent)">
            <summary>
            Registers the given <see cref="T:Atom.Events.LongTermEvent"/> at the EventManager.
            </summary>
            <param name="longTermEvent">The event that is about to be registered.</param>
        </member>
        <member name="M:Atom.Events.EventManager.UnregisterLongTermEvent(Atom.Events.LongTermEvent)">
            <summary>
            Unregisters the given <see cref="T:Atom.Events.LongTermEvent"/> at the EventManager.
            </summary>
            <param name="longTermEvent">The event that is about to be unregistered.</param>
        </member>
        <member name="M:Atom.Events.EventManager.ValidateEventForAddInternal(Atom.Events.Event)">
            <summary>
            Called before an <see cref="T:Atom.Events.Event"/> is about to be added.
            </summary>
            <param name="e">
            The event to validate.
            </param>
        </member>
        <member name="M:Atom.Events.EventManager.ValidateTriggerForAddInternal(Atom.Events.EventTrigger)">
            <summary>
            Called before an <see cref="T:Atom.Events.EventTrigger"/> is about to be added.
            </summary>
            <param name="trigger">
            The trigger to validate.
            </param>
        </member>
        <member name="M:Atom.Events.EventManager.DefaultEventSaveDecider_Method(Atom.Events.Event)">
            <summary>
            Implements the DefaultEventSaveNeededDecider.
            </summary>
            <param name="e">The related Event.</param>
            <returns>
            Returns true if the given Event should be saved;
            otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Events.EventManager.DefaultTriggerSaveDecider_Method(Atom.Events.EventTrigger)">
            <summary>
            Implements the DefaultTriggerSaveNeededDecider.
            </summary>
            <param name="trigger">The related EventTrigger.</param>
            <returns>
            Returns true if the given EventTrigger should be saved;
            otherwise false.
            </returns>
        </member>
        <member name="F:Atom.Events.EventManager.events">
            <summary>
            The events that are managed by the <see cref="T:Atom.Events.EventManager"/>,
            sorted by their (unique)-name.
            </summary>
        </member>
        <member name="F:Atom.Events.EventManager.triggers">
            <summary>
            The triggers that are managed by the <see cref="T:Atom.Events.EventManager"/>,
            sorted by their (unique)-name.
            </summary>
        </member>
        <member name="F:Atom.Events.EventManager.activeLongTermEvents">
            <summary>
            The list of active <see cref="T:Atom.Events.LongTermEvent"/>s.
            </summary>
        </member>
        <member name="F:Atom.Events.EventManager.activePermanentEvents">
            <summary>
            The list of active <see cref="T:Atom.Events.PermanentEvent"/>s.
            </summary>
        </member>
        <member name="F:Atom.Events.EventManager.eventSaveNeededDecider">
            <summary>
            The delegate that determines whether it's needed for an event to get saved.
            </summary>
        </member>
        <member name="F:Atom.Events.EventManager.triggerSaveNeededDecider">
            <summary>
            The delegate that determines whether it's needed for an event trigger to get saved.
            </summary>
        </member>
        <member name="F:Atom.Events.EventManager.DefaultEventSaveNeededDecider">
            <summary>
            Stores the EventNeedsToBeSaved delegate that is used by default. This is a read-only field.
            </summary>
        </member>
        <member name="F:Atom.Events.EventManager.DefaultTriggerSaveNeededDecider">
            <summary>
            Stores the EventTriggerNeedsToBeSaved delegate that is used by default. This is a read-only field.
            </summary>
        </member>
        <member name="T:Atom.Events.EventManager.ReaderWriter">
            <summary>
            Implements a mechanism for serializing and deserializing of <see cref="T:Atom.Events.EventManager"/>s.
            </summary>
        </member>
        <member name="P:Atom.Events.EventManager.ReaderWriter.TypeActivator">
            <summary>
            Gets the <see cref="T:Atom.ITypeActivator"/> that is used to create instances
            of de-serialized Events and EventTriggers.
            </summary>
        </member>
        <member name="M:Atom.Events.EventManager.ReaderWriter.#ctor(Atom.ITypeActivator)">
            <summary>
            Initializes a new instance of the ReaderWriter class.
            </summary>
            <param name="typeActivator">
            Provides a mechanism that is used to create instances of de-serialized Events and EventTriggers.
            </param>
        </member>
        <member name="M:Atom.Events.EventManager.ReaderWriter.Serialize(Atom.Events.IEventSerializationContext)">
            <summary>
            Fully serializes the <see cref="T:Atom.Events.EventManager"/> provided
            with the specified <see cref="T:Atom.Events.IEventSerializationContext"/>.
            </summary>
            <param name="context">
            The context under which the serialization operation occurs.
            </param>
        </member>
        <member name="M:Atom.Events.EventManager.ReaderWriter.WriteHeader(System.Collections.Generic.IList{Atom.Events.Event},System.Collections.Generic.IList{Atom.Events.EventTrigger},Atom.Events.IEventSerializationContext)">
            <summary>
            Writes the document header that descripes the content of the EventManager. 
            </summary>
            <param name="events">
            The <see cref="T:Atom.Events.Event"/>s that should be serialized.
            </param>
            <param name="triggers">
            The <see cref="T:Atom.Events.EventTrigger"/>s that should be serialized.
            </param>
            <param name="context">
            The context under which the serialization operation occurs.
            </param>
        </member>
        <member name="M:Atom.Events.EventManager.ReaderWriter.WriteBody(System.Collections.Generic.IList{Atom.Events.Event},System.Collections.Generic.IList{Atom.Events.EventTrigger},Atom.Events.IEventSerializationContext)">
            <summary>
            Writes the document body that contains the actual <see cref="T:Atom.Events.Event"/> and <see cref="T:Atom.Events.EventTrigger"/>
            data.
            </summary>
            <param name="events">
            The <see cref="T:Atom.Events.Event"/>s that should be serialized.
            </param>
            <param name="triggers">
            The <see cref="T:Atom.Events.EventTrigger"/>s that should be serialized.
            </param>
            <param name="context">
            The context under which the serialization operation occurs.
            </param>
        </member>
        <member name="M:Atom.Events.EventManager.ReaderWriter.WriteAdditionalHeader(Atom.Events.IEventSerializationContext)">
            <summary>
            Method that can be overriden by sub-classes that want to write
            additional header data.
            </summary>
            <param name="context">
            The context under which the serialization operation occurs.
            </param>
        </member>
        <member name="M:Atom.Events.EventManager.ReaderWriter.WriteAdditionalBody(Atom.Events.IEventSerializationContext)">
            <summary>
            Method that can be overriden by sub-classes that want to write
            additional body data.
            </summary>
            <param name="context">
            The context under which the serialization operation occurs.
            </param>
        </member>
        <member name="M:Atom.Events.EventManager.ReaderWriter.Deserialize(Atom.Events.IEventDeserializationContext)">
            <summary>
            Fully deserializes the <see cref="T:Atom.Events.EventManager"/> provided
            with the specified <see cref="T:Atom.Events.IEventDeserializationContext"/>.
            </summary>
            <param name="context">
            The context under which the deserialization operation occurs.
            </param>
        </member>
        <member name="M:Atom.Events.EventManager.ReaderWriter.ReadHeader(Atom.Events.IEventDeserializationContext)">
            <summary>
            Reads the document header that descripes the content of the EventManager.
            </summary>
            <param name="context">
            The context under which the deserialization operation occurs.
            </param>
        </member>
        <member name="M:Atom.Events.EventManager.ReaderWriter.ReadBody(Atom.Events.IEventDeserializationContext)">
            <summary>
            Reads the document body that contains the actual Event and EventTrigget data.
            </summary>
            <param name="context">
            The context under which the deserialization operation occurs.
            </param>
        </member>
        <member name="M:Atom.Events.EventManager.ReaderWriter.ReadAdditionalHeader(Atom.Events.IEventDeserializationContext)">
            <summary>
            Method that can be overriden by sub-classed that want to read
            additional header data.
            </summary>
            <param name="context">
            The <see cref="T:Atom.Events.IEventDeserializationContext"/> object that is used to read the data.
            </param>
        </member>
        <member name="M:Atom.Events.EventManager.ReaderWriter.ReadAdditionalBody(Atom.Events.IEventDeserializationContext)">
            <summary>
            Method that can be overriden by sub-classed that want to read
            additional body data.
            </summary>
            <param name="context">
            The <see cref="T:Atom.Events.IEventDeserializationContext"/> object that is used to read the data.
            </param>
        </member>
        <member name="F:Atom.Events.EventManager.ReaderWriter.typeActivator">
            <summary>
            Provides a mechanism that is used to create instances of de-serialized Events and EventTriggers.
            </summary>
        </member>
        <member name="T:Atom.Events.EventStrings">
            <summary>
              Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
            </summary>
        </member>
        <member name="P:Atom.Events.EventStrings.ResourceManager">
            <summary>
              Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
            </summary>
        </member>
        <member name="P:Atom.Events.EventStrings.Culture">
            <summary>
              Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
              Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
            </summary>
        </member>
        <member name="P:Atom.Events.EventStrings.Error_CantChangeNameOfEventTriggerXToYThereAlreadyExistsSuchAnEventTrigger">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Can&apos;t change the name of the EventTrigger &apos;{0}&apos; to &apos;{1}&apos;. There already exists such an EventTrigger in the owning Event Manager. EventTrigger names must be unique. ähnelt.
            </summary>
        </member>
        <member name="P:Atom.Events.EventStrings.Error_CantChangeNameOfEventXToYThereAlreadyExistsSuchAnEvent">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Can&apos;t change the name of the Event &apos;{0}&apos; to &apos;{1}&apos;. There already exists such an Event in the owning Event Manager. Event names must be unique. ähnelt.
            </summary>
        </member>
        <member name="P:Atom.Events.EventStrings.Error_CantDoThisEventXTypeNameYHasNotBeenAddedToManager">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Can&apos;t do this. The event &apos;{0}&apos; (type-name=&apos;{1}&apos;) has not been added to an EventManager. ähnelt.
            </summary>
        </member>
        <member name="P:Atom.Events.EventStrings.Error_EventManagerReturnedByEventServiceIsNull">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die The EventManager returned by the existing IEventManagerService is null. ähnelt.
            </summary>
        </member>
        <member name="P:Atom.Events.EventStrings.Error_EventNameIsNull">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die The name of the Event is null. ähnelt.
            </summary>
        </member>
        <member name="P:Atom.Events.EventStrings.Error_EventTriggerNameIsNull">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die The name of the EventTrigger is null. ähnelt.
            </summary>
        </member>
        <member name="P:Atom.Events.EventStrings.Error_EventTriggerXAlreadyAddedToAnEventManager">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die The EventTrigger &apos;{0}&apos; already has been added to an EventManager. ähnelt.
            </summary>
        </member>
        <member name="P:Atom.Events.EventStrings.Error_EventXAlreadyAddedToAnEventManager">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die The Event &apos;{0}&apos; already has been added to an EventManager. ähnelt.
            </summary>
        </member>
        <member name="P:Atom.Events.EventStrings.Error_EventXDoesNotExistInEventManager">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die The requested Event &apos;{0}&apos; doesn&apos;t exist in the EventManager. ähnelt.
            </summary>
        </member>
        <member name="P:Atom.Events.EventStrings.Error_FloorXIsInvalidFloorCountY">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die The floor number &apos;{0} is invalid. Only values from 0 to {1} are valid. ähnelt.
            </summary>
        </member>
        <member name="P:Atom.Events.EventStrings.Error_IEventManagerServiceIsMissing">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die The IEventManagerService is missing. This is required for this operation. ähnelt.
            </summary>
        </member>
        <member name="P:Atom.Events.EventStrings.Error_LongTermEventRequiresEventManager">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die &quot;The LongTermEvent is required to be added to an EventManager.&quot; ähnelt.
            </summary>
        </member>
        <member name="P:Atom.Events.EventStrings.Error_ThereAlreadyExistsAnEventNamedX">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die There already exists an Event with the name &apos;{0}&apos;. Events must have unique names. ähnelt.
            </summary>
        </member>
        <member name="P:Atom.Events.EventStrings.Error_ThereAlreadyExistsAnEventTriggerNamedX">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die There already exists an EventTrigger with the name &apos;{0}&apos;. EventTriggers must have unique names. ähnelt.
            </summary>
        </member>
        <member name="P:Atom.Events.EventStrings.MissingInformation">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Missing Information ähnelt.
            </summary>
        </member>
        <member name="P:Atom.Events.EventStrings.PleaseEnterName">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Please enter a name. ähnelt.
            </summary>
        </member>
        <member name="P:Atom.Events.EventStrings.PropCate_Identification">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Identification ähnelt.
            </summary>
        </member>
        <member name="P:Atom.Events.EventStrings.PropCate_Settings">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Settings ähnelt.
            </summary>
        </member>
        <member name="P:Atom.Events.EventStrings.PropDesc_AET_Area">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die The area in which the AreaEventTrigger may get triggered. ähnelt.
            </summary>
        </member>
        <member name="P:Atom.Events.EventStrings.PropDesc_AET_TileArea">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die The area in which the AreaEventTrigger may get triggered (in tile-space). ähnelt.
            </summary>
        </member>
        <member name="P:Atom.Events.EventStrings.PropDesc_DSEvent_EventOff">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die The Event that gets triggered when the DualSwitchEvent is triggered and the IsSwitched flag is false. ähnelt.
            </summary>
        </member>
        <member name="P:Atom.Events.EventStrings.PropDesc_DSEvent_EventOn">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die The Event that gets triggered when the DualSwitchEvent is triggered and the IsSwitched flag is true. ähnelt.
            </summary>
        </member>
        <member name="P:Atom.Events.EventStrings.PropDesc_DSEvent_IsSwitchable">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die States whether the DualSwitchEvent can be switched on or off.. ähnelt.
            </summary>
        </member>
        <member name="P:Atom.Events.EventStrings.PropDesc_DSEvent_IsSwitched">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die States whether the DualSwitchEvent is initially in a switched state or not. ähnelt.
            </summary>
        </member>
        <member name="P:Atom.Events.EventStrings.PropDesc_E_Name">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die The (unique) name of the Event.  ähnelt.
            </summary>
        </member>
        <member name="P:Atom.Events.EventStrings.PropDesc_ET_Event">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die The Event which gets triggered when the EventTrigger is triggered. ähnelt.
            </summary>
        </member>
        <member name="P:Atom.Events.EventStrings.PropDesc_ET_IsActive">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die States whether the EventTrigger is initially in an active state or not. Only active Triggers can get triggered. ähnelt.
            </summary>
        </member>
        <member name="P:Atom.Events.EventStrings.PropDesc_ET_Name">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die The (unique) name of the EventTrigger. ähnelt.
            </summary>
        </member>
        <member name="P:Atom.Events.EventStrings.PropDesc_Floor">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die The floor this Object is part of. ähnelt.
            </summary>
        </member>
        <member name="P:Atom.Events.EventStrings.PropDesc_MultiEvent_Events">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die The list of events this MultiEvent delegates all calls to Trigger to. ähnelt.
            </summary>
        </member>
        <member name="P:Atom.Events.EventStrings.PropDesc_TimedEvent_Event">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die The event that gets triggered after Time seconds after the TimedEvent was triggered. ähnelt.
            </summary>
        </member>
        <member name="P:Atom.Events.EventStrings.PropDesc_TimedEvent_Time">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die The time in seconds until the TimedEvent delegates a Trigger call onto the Event. ähnelt.
            </summary>
        </member>
        <member name="P:Atom.Events.EventStrings.PropDesc_TypeName">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Specifies type information about the Object. ähnelt.
            </summary>
        </member>
        <member name="P:Atom.Events.EventStrings.PropDisp_AET_Area">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Trigger Area ähnelt.
            </summary>
        </member>
        <member name="P:Atom.Events.EventStrings.PropDisp_AET_TileArea">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Trigger Area (in tile-space) ähnelt.
            </summary>
        </member>
        <member name="P:Atom.Events.EventStrings.PropDisp_DSEvent_EventOff">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Event (when disabled) ähnelt.
            </summary>
        </member>
        <member name="P:Atom.Events.EventStrings.PropDisp_DSEvent_EventOn">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Event (when enabled) ähnelt.
            </summary>
        </member>
        <member name="P:Atom.Events.EventStrings.PropDisp_DSEvent_IsSwitchable">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Is Switchable ähnelt.
            </summary>
        </member>
        <member name="P:Atom.Events.EventStrings.PropDisp_DSEvent_IsSwitched">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Is Switched ähnelt.
            </summary>
        </member>
        <member name="P:Atom.Events.EventStrings.PropDisp_Event">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Event ähnelt.
            </summary>
        </member>
        <member name="P:Atom.Events.EventStrings.PropDisp_Floor">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Floor ähnelt.
            </summary>
        </member>
        <member name="P:Atom.Events.EventStrings.PropDisp_IsActive">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Is Active ähnelt.
            </summary>
        </member>
        <member name="P:Atom.Events.EventStrings.PropDisp_MultiEvent_Events">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Events ähnelt.
            </summary>
        </member>
        <member name="P:Atom.Events.EventStrings.PropDisp_Name">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Name ähnelt.
            </summary>
        </member>
        <member name="P:Atom.Events.EventStrings.PropDisp_TimedEvent_Event">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Event ähnelt.
            </summary>
        </member>
        <member name="P:Atom.Events.EventStrings.PropDisp_TimedEvent_Time">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Time ähnelt.
            </summary>
        </member>
        <member name="P:Atom.Events.EventStrings.PropDisp_TypeName">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Type Name ähnelt.
            </summary>
        </member>
        <member name="T:Atom.Events.DualSwitchEvent">
            <summary>
            Represents an on/off switch which triggers <see cref="T:Atom.Events.Event"/>s based on its current state.
            </summary>
        </member>
        <member name="E:Atom.Events.DualSwitchEvent.IsSwitchedChanged">
            <summary>
            Fired when the <see cref="P:Atom.Events.DualSwitchEvent.IsSwitched"/> state of this DualSwitchEvent has changed.
            </summary>
        </member>
        <member name="P:Atom.Events.DualSwitchEvent.IsSwitched">
            <summary>
            Gets or sets a value indicating whether this DualSwitchEvent
            is currently switched on or off.
            </summary>
            <value>The default value is true.</value>
        </member>
        <member name="P:Atom.Events.DualSwitchEvent.IsSwitchable">
            <summary>
            Gets or sets a value indicating whether this DualSwitchEvent
            can currently be switched on or off.
            </summary>
        </member>
        <member name="P:Atom.Events.DualSwitchEvent.EventWhenEnabled">
            <summary>
            Gets or sets the <see cref="T:Atom.Events.Event"/> triggered when the <see cref="T:Atom.Events.DualSwitchEvent"/> is enabled.
            </summary>
            <value>The default value is null.</value>
        </member>
        <member name="P:Atom.Events.DualSwitchEvent.EventWhenDisabled">
            <summary>
            Gets or sets the <see cref="T:Atom.Events.Event"/> triggered when the <see cref="T:Atom.Events.DualSwitchEvent"/> is disabled.
            </summary>
            <value>The default value is null.</value>
        </member>
        <member name="M:Atom.Events.DualSwitchEvent.Toggle">
            <summary>
            Toggles the <see cref="T:Atom.Events.DualSwitchEvent"/> from 'on to off' or from 'off to on'.
            </summary>
            <returns>The new state of the switch.</returns>
        </member>
        <member name="M:Atom.Events.DualSwitchEvent.CanBeTriggeredBy(System.Object)">
            <summary>
            Gets a value indicating whether the specified <see cref="T:System.Object"/> can trigger 
            this DualSwitchEvent's current <see cref="T:Atom.Events.Event"/> (based on the switch-state).
            </summary>
            <param name="obj">
            The object which wants to trigger this Event.
            </param>
            <returns>
            A value that indicates whether this Event can be triggered.
            </returns>
        </member>
        <member name="M:Atom.Events.DualSwitchEvent.Trigger(System.Object)">
            <summary>
            Triggers this <see cref="T:Atom.Events.DualSwitchEvent"/> by redirecting the call 
            to the current <see cref="T:Atom.Events.Event"/> based on the switch's current on/off state.
            </summary>
            <param name="obj">
            The object which has triggered the Event.
            </param>
        </member>
        <member name="M:Atom.Events.DualSwitchEvent.Serialize(Atom.Events.IEventSerializationContext)">
            <summary>
            Serializes this DualSwitchEvent using the specified IEventSerializationContext.
            </summary>
            <param name="context">
            The context under which the serialization process occurs.
            </param>
        </member>
        <member name="M:Atom.Events.DualSwitchEvent.Deserialize(Atom.Events.IEventDeserializationContext)">
            <summary>
            Deserializes this DualSwitchEvent using the specified IEventDeserializationContext.
            </summary>
            <param name="context">
            The context under which the deserialization process occurs.
            </param>
        </member>
        <member name="F:Atom.Events.DualSwitchEvent.isSwitched">
            <summary> 
            Specifies whether the DualSwitchEvent is currently set to on or off. 
            </summary>
        </member>
        <member name="F:Atom.Events.DualSwitchEvent.isSwitchable">
            <summary> 
            Specifies whether the DualSwitchEvent can be switched on or off.
            </summary>
        </member>
        <member name="F:Atom.Events.DualSwitchEvent.eventOnState">
            <summary>
            Identifies the event that is fired when the DualSwitchEvent is enabled.
            </summary>
        </member>
        <member name="F:Atom.Events.DualSwitchEvent.eventOffState">
            <summary>
            Identifies the event that is fired when the DualSwitchEvent is disabled.
            </summary>
        </member>
        <member name="T:Atom.Events.Event">
            <summary>
            Defines the abstract base class of all events.
            An event can be any (triggerable) action.
            </summary>
        </member>
        <member name="E:Atom.Events.Event.PropertyChanged">
            <summary>
            Fired when a property of this <see cref="T:Atom.Events.Event"/> has changed.
            Not all properties have to implement this kind of notification.
            </summary>
        </member>
        <member name="P:Atom.Events.Event.Empty">
            <summary>
            Gets an <see cref="T:Atom.Events.Event"/> instance that does nothing.
            </summary>
            <value>An Event object that does nothing.</value>
        </member>
        <member name="P:Atom.Events.Event.TypeName">
            <summary>
            Gets the type-name of the <see cref="T:Atom.Events.Event"/>
            that is used when serializing and deserializing.
            </summary>
            <value>The type-name of this Event.</value>
        </member>
        <member name="P:Atom.Events.Event.Name">
            <summary>
            Gets or sets the (unique and bindable) name of the <see cref="T:Atom.Events.Event"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            Set: If the given name is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            </exception>
            <value>The name that uniquely identifies this Event.</value>
        </member>
        <member name="P:Atom.Events.Event.EventManager">
            <summary>
            Gets the <see cref="P:Atom.Events.Event.EventManager"/> that manages the
            <see cref="T:Atom.Events.Event"/>.
            </summary>
            <value>
            This value is null if the event has not been added to
            an EventManager.
            </value>
            <remarks>
            An Event can only be active in a single EventManager at a time.
            Use cloning and syncing to have the 'same' events in different Managers.
            </remarks>
        </member>
        <member name="M:Atom.Events.Event.CanBeTriggeredBy(System.Object)">
            <summary>
            Gets a value that indicates whether the 
            specified <see cref="T:System.Object"/> can trigger this <see cref="T:Atom.Events.Event"/>.
            </summary>
            <param name="obj">
            The object to test.
            </param>
            <returns>
            Returns true if the object can trigger it; otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Events.Event.Trigger(System.Object)">
            <summary>
            Triggers this <see cref="T:Atom.Events.Event"/>.
            </summary>
            <param name="obj">
            The object which is triggering this event.
            </param>
        </member>
        <member name="M:Atom.Events.Event.Serialize(Atom.Events.IEventSerializationContext)">
            <summary>
            Serializes this Event using the specified IEventSerializationContext.
            </summary>
            <remarks>
            When overriding this function a call to base.Serialize 
            should always be the first action.
            Reason is that it writes the TypeName and Name of the <see cref="T:Atom.Events.Event"/>
            which is needed to create an instance of the <see cref="T:Atom.Events.Event"/>'s class.
            </remarks>
            <param name="context">
            The context under which the serialization process occurs.
            </param>
        </member>
        <member name="M:Atom.Events.Event.Deserialize(Atom.Events.IEventDeserializationContext)">
            <summary>
            Deserializes this Event using the specified IEventDeserializationContext.
            </summary>
            <remarks>
            When overriding this function a call to base.Deserialize 
            should always be the first action.
            When using this function from outside be sure to read the type-name and name
            by using
            <code>
            string typeName = context.ReadString();
            string name     = context.ReadString();
            </code>
            before calling Deserialize.
            </remarks>
            <param name="context">
            The context under which the deserialization process occurs.
            </param>
        </member>
        <member name="M:Atom.Events.Event.ToString">
            <summary>
            Overriden to return a short human-readable description name of the <see cref="T:Atom.Events.Event"/>.
            </summary>
            <returns>
            A string representation of the Event.
            </returns>
        </member>
        <member name="M:Atom.Events.Event.OnPropertyChanged(System.String)">
            <summary>
            Fires the <see cref="E:Atom.Events.Event.PropertyChanged"/> event.
            </summary>
            <param name="propertyName">
            The name of the property that has changed.
            </param>
        </member>
        <member name="F:Atom.Events.Event.name">
            <summary>
            The name of the <see cref="T:Atom.Events.Event"/>. May be null.
            </summary>
        </member>
        <member name="T:Atom.Events.LongTermEvent">
            <summary>
            Defines the base-class of all <see cref="T:Atom.Events.Event"/>s that
            are active for a longer period of time.
            </summary>
        </member>
        <member name="E:Atom.Events.LongTermEvent.Triggered">
            <summary>
            The events which are fired when the <see cref="T:Atom.Events.LongTermEvent"/> has been triggered.
            </summary>
        </member>
        <member name="E:Atom.Events.LongTermEvent.Stopped">
            <summary> 
            The events which are fired when the <see cref="T:Atom.Events.LongTermEvent"/> has stopped.
            </summary>
        </member>
        <member name="P:Atom.Events.LongTermEvent.IsTriggered">
            <summary>
            Gets a value indicating whether this <see cref="T:Atom.Events.LongTermEvent"/> is in a triggered state.
            </summary>
            <value>
            Returns true if this LongTermEvent is currently in a triggered state;
            otherwise false.
            </value>
        </member>
        <member name="P:Atom.Events.LongTermEvent.Object">
            <summary>
            Gets the object which has triggered this <see cref="T:Atom.Events.LongTermEvent"/>.
            </summary>
            <value>
            The object which has triggered this <see cref="T:Atom.Events.LongTermEvent"/>.
            </value>
        </member>
        <member name="M:Atom.Events.LongTermEvent.Trigger(System.Object)">
            <summary> 
            Triggers this <see cref="T:Atom.Events.LongTermEvent"/>, 
            and as such starting it.
            </summary>
            <param name="obj">
            The object which has triggered the event.
            </param>
            <exception cref="T:System.InvalidOperationException">
            If the <see cref="T:Atom.Events.LongTermEvent"/> has not yet been added to an <see cref="T:Atom.Events.EventManager"/>.
            </exception>
        </member>
        <member name="M:Atom.Events.LongTermEvent.Stop">
            <summary>
            Stops this <see cref="T:Atom.Events.LongTermEvent"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            If the <see cref="T:Atom.Events.LongTermEvent"/> has not yet been added to an <see cref="T:Atom.Events.EventManager"/>.
            </exception>
        </member>
        <member name="M:Atom.Events.LongTermEvent.InternalStopForce">
            <summary>
            Internal method that forces the <see cref="T:Atom.Events.LongTermEvent"/> to stop.
            </summary>
        </member>
        <member name="M:Atom.Events.LongTermEvent.Update(Atom.IUpdateContext)">
            <summary>
            Updates this <see cref="T:Atom.Events.LongTermEvent"/>.
            This method is called once per frame
            on triggered <see cref="T:Atom.Events.LongTermEvent"/>s.
            </summary>
            <param name="updateContext">
            The current IUpdateContext.
            </param>
        </member>
        <member name="M:Atom.Events.LongTermEvent.Stopping">
            <summary>
            Called when the event is stopping. 
            Can be overriten to include custom operations.
            </summary>
            <returns>
            True if the LongTermEvent should be stopped; otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Events.LongTermEvent.Triggering(System.Object)">
            <summary>
            Called when the event is triggered. 
            Can be overriten to include custom operations (for example for initialization).
            </summary>
            <param name="obj">The object that is about to trigger the event.</param>
            <returns>
            True if the LongTermEvent should be triggered; otherwise false.
            </returns>
        </member>
        <member name="F:Atom.Events.LongTermEvent.obj">
            <summary>
            The object which has triggered this <see cref="T:Atom.Events.LongTermEvent"/>. If any.
            </summary>
        </member>
        <member name="F:Atom.Events.LongTermEvent.isTriggered">
            <summary>
            States whether this <see cref="T:Atom.Events.LongTermEvent"/> is in a triggered state.
            </summary>
        </member>
        <member name="T:Atom.Events.LongTermLambdaEvent">
            <summary>
            Represents a LongTermEvent that is controlled using Lambda functions.
            </summary>
        </member>
        <member name="P:Atom.Events.LongTermLambdaEvent.Updated">
            <summary>
            Gets or sets the action that is executed when this LongTermLambdaEvent is updated.
            </summary>
        </member>
        <member name="P:Atom.Events.LongTermLambdaEvent.CanBeTriggered">
            <summary>
            Gets or sets the function that decides whether this LongTermLambdaEvent can be
            triggered.
            </summary>
        </member>
        <member name="M:Atom.Events.LongTermLambdaEvent.Update(Atom.IUpdateContext)">
            <summary>
            Updates this LongTermLambdaEvent.
            </summary>
            <param name="updateContext">
            The current IUpdateContext.
            </param>
        </member>
        <member name="M:Atom.Events.LongTermLambdaEvent.CanBeTriggeredBy(System.Object)">
            <summary>
            Gets a value that indicates whether the 
            specified <see cref="T:System.Object"/> can trigger this <see cref="T:Atom.Events.Event"/>.
            </summary>
            <param name="obj">
            The object to test.
            </param>
            <returns>
            Returns true if the object can trigger it; otherwise false.
            </returns>
        </member>
        <member name="T:Atom.Events.MultiEvent">
            <summary>
            Represents an <see cref="T:Atom.Events.Event"/> that delegates all calls to <see cref="M:Atom.Events.MultiEvent.Trigger(System.Object)"/>
            to a list of other <see cref="T:Atom.Events.Event"/>s.
            </summary>
            <remarks>
            Cyclic references won't be automatically detected.
            </remarks>
        </member>
        <member name="P:Atom.Events.MultiEvent.Events">
            <summary>
            Gets the list of events this <see cref="T:Atom.Events.MultiEvent"/> delegates all calls to <see cref="M:Atom.Events.MultiEvent.Trigger(System.Object)"/> over.
            </summary>
        </member>
        <member name="M:Atom.Events.MultiEvent.Trigger(System.Object)">
            <summary>
            Triggers this MultiEvent.
            </summary>
            <param name="obj">
            The object that has triggered this MultiEvent.
            </param>
        </member>
        <member name="M:Atom.Events.MultiEvent.Serialize(Atom.Events.IEventSerializationContext)">
            <summary>
            Serializes this MultiEvent using the specified IEventSerializationContext.
            </summary>
            <param name="context">
            The context under which the serialization process occurs.
            </param>
        </member>
        <member name="M:Atom.Events.MultiEvent.Deserialize(Atom.Events.IEventDeserializationContext)">
            <summary>
            Deserializes this MultiEvent using the specified IEventDeserializationContext.
            </summary>
            <param name="context">
            The context under which the deserialization process occurs.
            </param>
        </member>
        <member name="F:Atom.Events.MultiEvent.events">
            <summary>
            The list of events.
            </summary>
        </member>
        <member name="T:Atom.Events.NullEvent">
            <summary>
            Defines an <see cref="T:Atom.Events.Event"/> that does nothing.
            </summary>
        </member>
        <member name="F:Atom.Events.NullEvent.Instance">
            <summary>
            A read-only instance of the <see cref="T:Atom.Events.NullEvent"/> class.
            </summary>
        </member>
        <member name="M:Atom.Events.NullEvent.CanBeTriggeredBy(System.Object)">
            <summary>
            Does nothing.
            </summary>
            <param name="obj">
            This parameter is not used.
            </param>
            <returns>
            Always returns true.
            </returns>
        </member>
        <member name="M:Atom.Events.NullEvent.Trigger(System.Object)">
            <summary>
            Does nothing.
            </summary>
            <param name="obj">
            This parameter is not used.
            </param>
        </member>
        <member name="T:Atom.Events.PermanentEvent">
            <summary>
            Represents an <see cref="T:Atom.Events.Event"/> that is permanently active
            and as such gets updated each frame.
            </summary>
            <remarks>
            The difference between a <see cref="T:Atom.Events.PermanentEvent"/> and a <see cref="T:Atom.Events.LongTermEvent"/> is
            that the <see cref="T:Atom.Events.LongTermEvent"/> adds itself to the EventManager when it gets triggered.
            This is not required with <see cref="T:Atom.Events.PermanentEvent"/>s.
            <para>
            In the case of a game a <see cref="T:Atom.Events.PermanentEvent"/> may contain game logic that is
            constantly active and doesn't need to be activated by for example an <see cref="T:Atom.Events.EventTrigger"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Atom.Events.PermanentEvent.Update(Atom.IUpdateContext)">
            <summary>
            Updates this <see cref="T:Atom.Events.PermanentEvent"/>.
            </summary>
            <remarks>
            This method is called once per frame on the PermanentEvent <see cref="T:Atom.Events.LongTermEvent"/>s.
            </remarks>
            <param name="updateContext">
            The current IUpdateContext.
            </param>
        </member>
        <member name="M:Atom.Events.PermanentEvent.Trigger(System.Object)">
            <summary>
            Has been overriden to do nothing. PermanentEvents are
            permanently active.
            </summary>
            <param name="obj">
            The object that triggered the event.
            </param>
        </member>
        <member name="T:Atom.Events.TimedEvent">
            <summary>
            Defines an <see cref="P:Atom.Events.TimedEvent.Event"/> that when triggered
            triggers another <see cref="P:Atom.Events.TimedEvent.Event"/> after N seconds.
            </summary>
        </member>
        <member name="P:Atom.Events.TimedEvent.Time">
            <summary>
            Gets or sets the time (in seconds) until the TimedEvent
            delegates the trigger call to the <see cref="P:Atom.Events.TimedEvent.Event"/>.
            </summary>
        </member>
        <member name="P:Atom.Events.TimedEvent.Event">
            <summary>
            Gets or sets the <see cref="P:Atom.Events.TimedEvent.Event"/> that gets called
            <see cref="P:Atom.Events.TimedEvent.Time"/> seconds after triggering this TimedEvent.
            </summary>
        </member>
        <member name="M:Atom.Events.TimedEvent.Update(Atom.IUpdateContext)">
            <summary>
            Updates this TimedEvent.
            </summary>
            <param name="updateContext">
            The current <see cref="T:Atom.IUpdateContext"/>.
            </param>
        </member>
        <member name="M:Atom.Events.TimedEvent.Triggering(System.Object)">
            <summary>
            Called when this TimedEvent was triggered.
            </summary>
            <param name="obj">
            The object that triggered this TimedEvent.
            </param>
            <returns>
            Always returns true.
            </returns>
        </member>
        <member name="M:Atom.Events.TimedEvent.Serialize(Atom.Events.IEventSerializationContext)">
            <summary>
            Serializes this TimedEvent using the specified IEventSerializationContext.
            </summary>
            <param name="context">
            The context under which the serialization process occurs.
            </param>
        </member>
        <member name="M:Atom.Events.TimedEvent.Deserialize(Atom.Events.IEventDeserializationContext)">
            <summary>
            Deserializes this TimedEvent using the specified IEventDeserializationContext.
            </summary>
            <param name="context">
            The context under which the deserialization process occurs.
            </param>
        </member>
        <member name="F:Atom.Events.TimedEvent.timeLeft">
            <summary>
            The time left until the TimedEvent delegates the trigger call.
            </summary>
        </member>
        <member name="T:Atom.Events.EventTypeRegister">
            <summary>
            Static class that registers supported <see cref="T:Atom.Events.Event"/>s and <see cref="T:Atom.Events.EventTrigger"/>s.
            </summary>
        </member>
        <member name="M:Atom.Events.EventTypeRegister.RegisterEvent(System.Type)">
            <summary>
            Registers the given Type at the <see cref="T:Atom.Events.EventTypeRegister"/>.
            </summary>
            <param name="type">The type to register.</param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="type"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            If <paramref name="type"/> is not or doesn't sub-class the type <see cref="T:Atom.Events.Event"/>.
            </exception>
        </member>
        <member name="M:Atom.Events.EventTypeRegister.RegisterTrigger(System.Type)">
            <summary>
            Registers the given Type at the <see cref="T:Atom.Events.EventTypeRegister"/>.
            </summary>
            <param name="type">The type to register.</param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="type"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            If <paramref name="type"/> is not or doesn't sub-class the type <see cref="T:Atom.Events.EventTrigger"/>.
            </exception>
        </member>
        <member name="M:Atom.Events.EventTypeRegister.RegisterCommon">
            <summary>
            Registers the common Event Data types at the <see cref="T:Atom.Events.EventTypeRegister"/>.
            </summary>
            <remarks>
            <para>
            The following event types are registered:
            <see cref="T:Atom.Events.NullEvent"/> and <see cref="T:Atom.Events.DualSwitchEvent"/>
            </para>
            <para>
            The following trigger types are registered:
            <see cref="T:Atom.Events.EventTrigger"/>, <see cref="T:Atom.Events.AreaEventTrigger"/> and <see cref="T:Atom.Events.TileAreaEventTrigger"/>
            </para>
            </remarks>
        </member>
        <member name="M:Atom.Events.EventTypeRegister.GetEventTypes">
            <summary>
            Gets a new array that contains all <see cref="T:Atom.Events.Event"/> types which have been registered.
            </summary>
            <returns>
            A new array that contains all <see cref="T:Atom.Events.Event"/> types which have been registered.
            </returns>
        </member>
        <member name="M:Atom.Events.EventTypeRegister.GetTriggerTypes">
            <summary>
            Gets a new array that contains all <see cref="T:Atom.Events.EventTrigger"/> types which have been registered.
            </summary>
            <returns>
            A new array that contains all <see cref="T:Atom.Events.EventTrigger"/> types which have been registered.
            </returns>
        </member>
        <member name="M:Atom.Events.EventTypeRegister.GetEventEnumerator">
            <summary>
            Gets an enumerator over the <see cref="T:Atom.Events.Event"/> types which 
            have been registered.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerator`1"/> over <see cref="T:Atom.Events.Event"/> types 
            which have been registered.
            </returns>
        </member>
        <member name="M:Atom.Events.EventTypeRegister.GetTriggerEnumerator">
            <summary>
            Gets an enumerator over the <see cref="T:Atom.Events.EventTrigger"/> types which 
            have been registered.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerator`1"/> over <see cref="T:Atom.Events.EventTrigger"/> types 
            which have been registered.
            </returns>
        </member>
        <member name="F:Atom.Events.EventTypeRegister.eventRegister">
            <summary>
            The list of types that have been registered as <see cref="T:Atom.Events.Event"/>s at the EventTypeRegister.
            </summary>
        </member>
        <member name="F:Atom.Events.EventTypeRegister.triggerRegister">
            <summary>
            The list of types that have been registered as <see cref="T:Atom.Events.EventTrigger"/>s at the EventTypeRegister.
            </summary>
        </member>
        <member name="T:Atom.Events.IEventManagerService">
            <summary>
            Represents a service that allows the user to receive an <see cref="P:Atom.Events.IEventManagerService.EventManager"/> instance.
            </summary>
        </member>
        <member name="P:Atom.Events.IEventManagerService.EventManager">
            <summary>
            Gets the <see cref="P:Atom.Events.IEventManagerService.EventManager"/> instance provided by this IEventManagerService.
            </summary>
            <value>The EventManager instance provided by this IEventManagerService.</value>
        </member>
        <member name="T:Atom.Events.EventDeserializationContext">
            <summary>
            Implements a mechanism that allows deserialization of <Desee cref="T:Atom.Events.Event"/>s, <Desee cref="T:Atom.Events.EventTrigger"/>s,
            and <Desee cref="P:Atom.Events.EventDeserializationContext.EventManager"/>s.
            </summary>
        </member>
        <member name="P:Atom.Events.EventDeserializationContext.EventManager">
            <summary>
            Gets the <Desee cref="P:Atom.Events.EventDeserializationContext.EventManager"/> that is currently deserialized.
            </summary>
            <value>
            Is null when deserializing an event that is not attached to an EventManager.
            </value>
        </member>
        <member name="M:Atom.Events.EventDeserializationContext.#ctor(Atom.Events.EventManager,System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the EventDeserializationContext class.
            </summary>
            <param name="eventManager">
            The EventManager that is going to be deserialized.
            </param>
            <param name="reader">
            The BinaryReader that is going to be read with.
            </param>
        </member>
        <member name="M:Atom.Events.EventDeserializationContext.GetEvent(System.String)">
            <summary>
            Gets the <Desee cref="T:Atom.Events.Event"/> with the given <paramref name="name"/>.
            </summary>
            <param name="name">
            The name that uniquely identifies the Event to reveive.
            </param>
            <returns>
            The requested Event;
            or null.
            </returns>
        </member>
        <member name="M:Atom.Events.EventDeserializationContext.GetTrigger(System.String)">
            <summary>
            Gets the <Desee cref="T:Atom.Events.EventTrigger"/> with the given <paramref name="name"/>.
            </summary>
            <param name="name">
            The name that uniquely identifies the EventTrigger to reveive.
            </param>
            <returns>
            The requested EventTrigger;
            or null.
            </returns>
        </member>
        <member name="F:Atom.Events.EventDeserializationContext.eventManager">
            <summary>
            The <Desee cref="P:Atom.Events.EventDeserializationContext.EventManager"/> that is currently deserialized.
            </summary>
        </member>
        <member name="T:Atom.Events.EventSerializationContext">
            <summary>
            Implements a mechanism that allows serialization of <see cref="T:Atom.Events.Event"/>s, <see cref="T:Atom.Events.EventTrigger"/>s,
            and <see cref="P:Atom.Events.EventSerializationContext.EventManager"/>s.
            </summary>
        </member>
        <member name="P:Atom.Events.EventSerializationContext.EventManager">
            <summary>
            Gets the <see cref="P:Atom.Events.EventSerializationContext.EventManager"/> that is currently serialized.
            </summary>
            <value>
            Is null when serializing an event that is not attached to an EventManager.
            </value>
        </member>
        <member name="M:Atom.Events.EventSerializationContext.#ctor(Atom.Events.EventManager,System.IO.BinaryWriter)">
            <summary>
            Initializes a new instance of the EventSerializationContext class.
            </summary>
            <param name="eventManager">
            The EventManager that is going to be serialized.
            </param>
            <param name="writer">
            The BinaryWriter that is going to be written with.
            </param>
        </member>
        <member name="M:Atom.Events.EventSerializationContext.GetEvent(System.String)">
            <summary>
            Gets the <see cref="T:Atom.Events.Event"/> with the given <paramref name="name"/>.
            </summary>
            <param name="name">
            The name that uniquely identifies the Event to reveive.
            </param>
            <returns>
            The requested Event;
            or null.
            </returns>
        </member>
        <member name="M:Atom.Events.EventSerializationContext.GetTrigger(System.String)">
            <summary>
            Gets the <see cref="T:Atom.Events.EventTrigger"/> with the given <paramref name="name"/>.
            </summary>
            <param name="name">
            The name that uniquely identifies the EventTrigger to reveive.
            </param>
            <returns>
            The requested EventTrigger;
            or null.
            </returns>
        </member>
        <member name="F:Atom.Events.EventSerializationContext.eventManager">
            <summary>
            The <see cref="P:Atom.Events.EventSerializationContext.EventManager"/> that is currently serialized.
            </summary>
        </member>
        <member name="T:Atom.Events.IEventDeserializationContext">
            <summary>
            Provides a mechanism that allows deserialization of <see cref="T:Atom.Events.Event"/>s, <see cref="T:Atom.Events.EventTrigger"/>s
            and <see cref="T:Atom.Events.EventManager"/>s.
            </summary>
        </member>
        <member name="T:Atom.Events.IEventSerializationContext">
            <summary>
            Provides a mechanism that allows serialization of <see cref="T:Atom.Events.Event"/>s, <see cref="T:Atom.Events.EventTrigger"/>s,
            and <see cref="T:Atom.Events.EventManager"/>s.
            </summary>
        </member>
        <member name="T:Atom.Events.IEventStorageContext">
            <summary>
            Defines the common interface both the <see cref="T:Atom.Events.IEventSerializationContext"/> and <see cref="T:Atom.Events.IEventDeserializationContext"/>
            share.
            </summary>
        </member>
        <member name="P:Atom.Events.IEventStorageContext.EventManager">
            <summary>
            Gets the EventManager that is currently de-/serialized.
            </summary>
        </member>
        <member name="M:Atom.Events.IEventStorageContext.GetEvent(System.String)">
            <summary>
            Gets the <see cref="T:Atom.Events.Event"/> with the given <paramref name="name"/>.
            </summary>
            <param name="name">
            The name that uniquely identifies the Event to reveive.
            </param>
            <returns>
            The requested Event;
            or null.
            </returns>
        </member>
        <member name="M:Atom.Events.IEventStorageContext.GetTrigger(System.String)">
            <summary>
            Gets the <see cref="T:Atom.Events.EventTrigger"/> with the given <paramref name="name"/>.
            </summary>
            <param name="name">
            The name that uniquely identifies the EventTrigger to reveive.
            </param>
            <returns>
            The requested EventTrigger;
            or null.
            </returns>
        </member>
        <member name="T:Atom.Events.IEventStorageContextFactory">
            <summary>
            Provides a mechanism that builds new <see cref="T:Atom.Events.IEventSerializationContext"/> and <see cref="T:Atom.Events.IEventDeserializationContext"/>
            objects.
            </summary>
        </member>
        <member name="T:Atom.Events.TileEventManager">
            <summary>
            Defines an <see cref="T:Atom.Events.EventManager"/> that provides additional
            operations for tile based games and applications.
            </summary>
        </member>
        <member name="P:Atom.Events.TileEventManager.Map">
            <summary>
            Gets the <see cref="T:Atom.Scene.Tiles.TileMap"/> this <see cref="T:Atom.Events.TileEventManager"/> is associated with.
            </summary>
            <value>The TileMap object.</value>
        </member>
        <member name="M:Atom.Events.TileEventManager.TriggerEvents(System.Object,System.Int32,Atom.Math.Rectangle)">
            <summary>
            Triggers all related TileAreaEventTriggers for the given Object.
            </summary>
            <param name="obj">
            The related object.
            </param>
            <param name="floorNumber">
            The number of the floor the given object is on.
            </param>
            <param name="area">
            The area the given object triggers TileAreaEventTrigger in.
            </param>
        </member>
        <member name="M:Atom.Events.TileEventManager.GetTriggers``1(Atom.Events.TriggerContext,System.Int32,Atom.Math.Rectangle)">
            <summary>
            Gets all related TileAreaEventTriggers of type <typeparamref name="T"/> for the given Object
            in the given area.
            </summary>
            <typeparam name="T">The type of triggers to query.</typeparam>
            <param name="context">
            The context of execution.
            </param>
            <param name="floorNumber">
            The number of the floor the given object is on.
            </param>
            <param name="area">
            The area the given object triggers TileAreaEventTrigger in.
            </param>
            <returns>
            The triggers that would trigger.
            </returns>
        </member>
        <member name="M:Atom.Events.TileEventManager.#ctor(Atom.Scene.Tiles.TileMap,System.Int32,System.Int32,System.Predicate{Atom.Events.Event},System.Predicate{Atom.Events.EventTrigger})">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Events.TileEventManager"/> class.
            </summary>
            <param name="map">The <see cref="T:Atom.Scene.Tiles.TileMap"/> the new TileMapEventManager is associated with.</param>
            <param name="initialEventCapacity">
            The initial number of events the <see cref="T:Atom.Events.EventManager"/> can store
            with allocating more memory.
            </param>
            <param name="initialTriggerCapacity">
            The initial number of event triggers the <see cref="T:Atom.Events.EventManager"/> can store
            with allocating more memory.
            </param>
            <param name="eventSaveNeededDecider">
            The delegate that determines whether it's needed for an event to get saved.
            </param>
            <param name="triggerSaveNeededDecider">
            The delegate that determines whether it's needed for an trigger to get saved.
            </param>
        </member>
        <member name="M:Atom.Events.TileEventManager.#ctor(Atom.Scene.Tiles.TileMap,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Events.TileEventManager"/> class.
            </summary>
            <remarks>
            Uses the default NeedsToBeSavedDelegates.
            </remarks>
            <param name="map">The <see cref="T:Atom.Scene.Tiles.TileMap"/> the TileMapEventManager is associated with.</param>
            <param name="initialEventCapacity">
            The initial number of events the <see cref="T:Atom.Events.EventManager"/> can store
            with allocating more memory.
            </param>
            <param name="initialTriggerCapacity">
            The initial number of triggers the <see cref="T:Atom.Events.EventManager"/> can store
            with allocating more memory.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the given <paramref name="map"/> is null.
            </exception>
        </member>
        <member name="M:Atom.Events.TileEventManager.OnTriggerAdded(Atom.Events.EventTrigger)">
            <summary>
            Called when an <see cref="T:Atom.Events.EventTrigger"/> has been added to the <see cref="T:Atom.Events.EventManager"/>.
            </summary>
            <param name="trigger">
            The trigger which has been removed.
            </param>
        </member>
        <member name="M:Atom.Events.TileEventManager.OnTriggerRemoved(Atom.Events.EventTrigger)">
            <summary>
            Called when an <see cref="T:Atom.Events.EventTrigger"/> has been removed to the <see cref="T:Atom.Events.EventManager"/>.
            </summary>
            <param name="trigger">
            The trigger to remove.
            </param>
        </member>
        <member name="M:Atom.Events.TileEventManager.ValidateTriggerForAdd(Atom.Events.EventTrigger)">
            <summary>
            Override to add special case validation for <see cref="T:Atom.Events.TileAreaEventTrigger"/>s.
            </summary>
            <param name="trigger">
            The trigger to validate.
            </param>
        </member>
        <member name="P:Atom.Events.TileEventManager.FloorCount">
            <summary>
            Gets the number of floors this TileEventManager manages.
            </summary>
            <value>
            This value is linked to the FloorCount of the <see cref="T:Atom.Scene.Tiles.TileMap"/>.
            </value>
        </member>
        <member name="M:Atom.Events.TileEventManager.IsValidFloor(System.Int32)">
            <summary>
            Returns whether the given <paramref name="floorNumber"/> is valid.
            </summary>
            <param name="floorNumber">
            The number of the floor to validate.
            </param>
            <returns>
            Returns <see langword="true"/> if the given <paramref name="floorNumber"/> is valid;
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Events.TileEventManager.InternalInformTileAreaTriggerFloorHasChanged(Atom.Events.TileAreaEventTrigger,System.Int32)">
            <summary>
            Internal method that get called when the Depth setting of a
            <see cref="T:Atom.Events.TileAreaEventTrigger"/> has changed.
            </summary>
            <param name="trigger">The trigger that has changed.</param>
            <param name="oldFloor">The old floor number of the trigger.</param>
        </member>
        <member name="M:Atom.Events.TileEventManager.RebuildAreaTriggerArray">
            <summary>
            Rebuild the layeredAreaTrigger array.
            </summary>
        </member>
        <member name="M:Atom.Events.TileEventManager.CreateAreaTriggerArray">
            <summary>
            Creates, but doesn't setup the AreaTrigger Array.
            </summary>
        </member>
        <member name="M:Atom.Events.TileEventManager.OnMapFloorsChanged(Atom.Scene.Tiles.TileMap)">
            <summary>
            Called when a TileMapFloor has been added to or
            removed from the underlying TileMap.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
        </member>
        <member name="F:Atom.Events.TileEventManager.map">
            <summary>
            The TileMap the TileMapEventManager is associated with.
            </summary>
        </member>
        <member name="F:Atom.Events.TileEventManager.layeredAreaTriggers">
            <summary>
            Stores the TileAreaEventTrigger sorted by the floor they correspond to.
            </summary>
        </member>
        <member name="T:Atom.Events.TriggerContext">
            <summary>
            Represents the context of trigger search and execution.
            </summary>
        </member>
        <member name="F:Atom.Events.TriggerContext.Source">
            <summary>
            The source of the trigger execution. Can be used to execute some triggers only in specific execution contexts.
            </summary>
        </member>
        <member name="F:Atom.Events.TriggerContext.Object">
            <summary>
            The object that triggered the trigger execution.
            </summary>
        </member>
        <member name="M:Atom.Events.TriggerContext.#ctor(System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Events.TriggerContext"/> class.
            </summary>
            <param name="source">
            The source of the trigger execution.
            </param>
            <param name="object">
            The object that triggered the trigger execution.
            </param>
        </member>
        <member name="T:Atom.Events.AreaEventTriggerMode">
            <summary>
            Enumerates the various modes an <see cref="T:Atom.Events.AreaEventTrigger"/> can be triggered.
            </summary>
        </member>
        <member name="F:Atom.Events.AreaEventTriggerMode.Intersection">
            <summary>
            The object must merely touch the area to trigger it.
            This is the default mode.
            </summary>
        </member>
        <member name="F:Atom.Events.AreaEventTriggerMode.Containment">
            <summary>
            The object must be fully contained by the area to trigger it.
            </summary>
        </member>
        <member name="T:Atom.Events.AreaEventTrigger">
            <summary>
            Defines an <see cref="T:Atom.Events.EventTrigger"/> which triggers 
            when an object is within a specified rectangular area.
            </summary>
        </member>
        <member name="P:Atom.Events.AreaEventTrigger.Area">
            <summary> 
            Gets or sets the Rectangle that defines the area this <see cref="T:Atom.Events.AreaEventTrigger"/> is active in.
            </summary>
            <value>
            The area this AreaEventTrigger is active in.
            </value>
        </member>
        <member name="P:Atom.Events.AreaEventTrigger.TileArea">
            <summary>
            Gets or sets the area this ZeldaTileAreaEventTrigger triggers in tile-space.
            </summary>
        </member>
        <member name="P:Atom.Events.AreaEventTrigger.TriggerMode">
            <summary>
            Gets or sets a value indicating how this AreaEventTrigger is triggered.
            </summary>
        </member>
        <member name="P:Atom.Events.AreaEventTrigger.TileWidth">
            <summary>
            Gets the width of a single tile.
            </summary>
            <value>
            The default value is 16.
            </value>
        </member>
        <member name="P:Atom.Events.AreaEventTrigger.TileHeight">
            <summary>
            Gets the height of a single tile.
            </summary>
            <value>
            The default value is 16.
            </value>
        </member>
        <member name="M:Atom.Events.AreaEventTrigger.Intersects(Atom.Math.Rectangle@)">
            <summary>
            Tests whether the specified <see cref="T:Atom.Math.Rectangle"/> intersects the trigger's trigger-area.
            </summary>
            <param name="rectangle">The rectangle to test against.</param>
            <returns>
            Returns true if the rectangles intersect; otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Events.AreaEventTrigger.Intersects(Atom.Math.Rectangle)">
            <summary>
            Tests whether the specified <see cref="T:Atom.Math.Rectangle"/> intersects the trigger's trigger-area.
            </summary>
            <param name="rectangle">The rectangle to test against.</param>
            <returns>
            Returns true if the rectangles intersect; otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Events.AreaEventTrigger.Contains(Atom.Math.Point2)">
            <summary>
            Gets whether the specified <see cref="T:Atom.Math.Point2"/> is contained within the
            trigger's area.
            </summary>
            <param name="point">The point to test.</param>
            <returns>
            Returns true if the given <paramref name="point"/> is within the trigger's area;
            otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Events.AreaEventTrigger.Contains(Atom.Math.Rectangle@)">
            <summary>
            Gets whether the specified <see cref="T:Atom.Math.Rectangle"/> is contained within the
            trigger's area.
            </summary>
            <param name="area">The area to test.</param>
            <returns>
            Returns true if the given <paramref name="area"/> is within the trigger's area;
            otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Events.AreaEventTrigger.WouldTriggerBy(Atom.Events.TriggerContext,Atom.Math.Rectangle@)">
            <summary>
            Gets a value indicating whether the given object would be triggered
            by this AreaEventTrigger.
            </summary>
            <param name="context">
            The execution context.
            </param>
            <param name="area">
            The area of the object.
            </param>
            <returns>
            true if it can be triggered;
            -or- otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Events.AreaEventTrigger.Serialize(Atom.Events.IEventSerializationContext)">
            <summary>
            Serializes this AreaEventTrigger using the specified IEventSerializationContext.
            </summary>
            <param name="context">
            The context under which the serialization process occurs.
            </param>
        </member>
        <member name="M:Atom.Events.AreaEventTrigger.Deserialize(Atom.Events.IEventDeserializationContext)">
            <summary>
            Deserializes this AreaEventTrigger using the specified IEventDeserializationContext.
            </summary>
            <param name="context">
            The context under which the deserialization process occurs.
            </param>
        </member>
        <member name="F:Atom.Events.AreaEventTrigger.area">
            <summary>
            The Rectangle that defines the trigger-area.
            </summary>
        </member>
        <member name="T:Atom.Events.EventTrigger">
            <summary>
            An <see cref="T:Atom.Events.EventTrigger"/> triggers an <see cref="P:Atom.Events.EventTrigger.Event"/>.
            </summary>
        </member>
        <member name="E:Atom.Events.EventTrigger.PropertyChanged">
            <summary>
            Fired when a property of this <see cref="T:Atom.Events.EventTrigger"/> has changed.
            Not all properties have to implement this kind of notification.
            </summary>
        </member>
        <member name="P:Atom.Events.EventTrigger.TypeName">
            <summary>
            Gets the type-name of the <see cref="T:Atom.Events.EventTrigger"/>
            that is used when serializing and deserializing.
            </summary>
            <value>The type-name of this EventTrigger.</value>
        </member>
        <member name="P:Atom.Events.EventTrigger.Name">
            <summary>
            Gets or sets the name of the <see cref="T:Atom.Events.EventTrigger"/>.
            </summary>
            <value>The name that uniquely identifies this EventTrigger.</value>
        </member>
        <member name="P:Atom.Events.EventTrigger.Event">
            <summary>
            Gets or sets the underlying <see cref="P:Atom.Events.EventTrigger.Event"/> which is triggered by the <see cref="T:Atom.Events.EventTrigger"/>.
            </summary>
            <value>
            The <see cref="P:Atom.Events.EventTrigger.Event"/> which is triggered by the <see cref="T:Atom.Events.EventTrigger"/>.
            </value>
        </member>
        <member name="P:Atom.Events.EventTrigger.IsActive">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Atom.Events.EventTrigger"/> is currently active. 
            </summary>
            <value>The default value is true.</value>
        </member>
        <member name="P:Atom.Events.EventTrigger.EventManager">
            <summary>
            Gets the <see cref="P:Atom.Events.EventTrigger.EventManager"/> that manages the
            <see cref="T:Atom.Events.EventTrigger"/>.
            </summary>
            <value>
            This value is null if the event has not been added to
            an EventManager.
            </value>
            <remarks>
            An EventTrigger can only be active in a single EventManager at a time.
            Use cloning and syncing to have the 'same' EventTriggers in different Managers.
            </remarks>
        </member>
        <member name="P:Atom.Events.EventTrigger.Tag">
            <summary>
            Gets or sets the custom tag applied to this <see cref="T:Atom.Events.EventTrigger"/>.
            </summary>
            <remarks>
            The tag is not serialized by default.
            </remarks>
            <value>
            A custom user-setable object.
            </value>
        </member>
        <member name="M:Atom.Events.EventTrigger.#ctor(System.String,Atom.Events.Event)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Events.EventTrigger"/> class.
            </summary>
            <param name="name"> 
            The name of the EventTrigger.</param>
            <param name="e">
            The underlying Event.
            </param>
        </member>
        <member name="M:Atom.Events.EventTrigger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Events.EventTrigger"/> class.
            </summary>
        </member>
        <member name="M:Atom.Events.EventTrigger.CanBeTriggeredBy(Atom.Events.TriggerContext)">
            <summary>
            Gets whether the specified Object can trigger the <see cref="T:Atom.Events.EventTrigger"/>.
            </summary>
            <param name="context">
            The context of execution.
            </param>
            <returns>
            true if the object can trigger it;
            otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Events.EventTrigger.Trigger(System.Object)">
            <summary>
            Triggers the underlying event if active.
            </summary>
            <param name="obj">
            The object which has triggered the event.
            </param>
        </member>
        <member name="M:Atom.Events.EventTrigger.Serialize(Atom.Events.IEventSerializationContext)">
            <summary>
            Serializes this EventTrigger using the specified IEventSerializationContext.
            </summary>
            <param name="context">
            The context under which the serialization process occurs.
            </param>
        </member>
        <member name="M:Atom.Events.EventTrigger.Deserialize(Atom.Events.IEventDeserializationContext)">
            <summary>
            Deserializes this EventTrigger using the specified IEventDeserializationContext.
            </summary>
            <remarks>
            When overriding this function a call to base.Deserialize 
            should always be the first action.
            When using this function from outside be sure to read the type-name and name
            by using
            <code>
            string typeName = context.ReadString();
            string name     = context.ReadString();
            </code>
            before calling Deserialize.
            </remarks>
            <param name="context">
            The context under which the deserialization process occurs.
            </param>
        </member>
        <member name="M:Atom.Events.EventTrigger.ToString">
            <summary>
            Overriden to return a short human-readable description name of this <see cref="T:Atom.Events.EventTrigger"/>.
            </summary>
            <returns>
            A string representation of this <see cref="T:Atom.Events.EventTrigger"/>.
            </returns>
        </member>
        <member name="M:Atom.Events.EventTrigger.OnPropertyChanged(System.String)">
            <summary>
            Fires the <see cref="E:Atom.Events.EventTrigger.PropertyChanged"/> event.
            </summary>
            <param name="propertyName">
            The name of the property that has changed.
            </param>
        </member>
        <member name="F:Atom.Events.EventTrigger.name">
            <summary>
            The name of the <see cref="T:Atom.Events.EventTrigger"/>. May be null.
            </summary>
        </member>
        <member name="F:Atom.Events.EventTrigger.e">
            <summary>
            The underlying event.
            </summary>
        </member>
        <member name="F:Atom.Events.EventTrigger.isActive">
            <summary>
            States whether the <see cref="T:Atom.Events.EventTrigger"/> is currently active.
            </summary>
        </member>
        <member name="T:Atom.Events.TileAreaEventTrigger">
            <summary>
            Defines an <see cref="T:Atom.Events.AreaEventTrigger"/> that also
            stores the object depth layer the event is on.
            </summary>
        </member>
        <member name="P:Atom.Events.TileAreaEventTrigger.FloorNumber">
            <summary> 
            Gets or sets the (normalized) depth-layer the <see cref="T:Atom.Events.TileAreaEventTrigger"/> is on.
            </summary>
            <value>
            A value that represents the floor this TileAreaEventTrigger is on.
            </value>
        </member>
        <member name="M:Atom.Events.TileAreaEventTrigger.Serialize(Atom.Events.IEventSerializationContext)">
            <summary>
            Serializes this TileAreaEventTrigger using the specified IEventSerializationContext.
            </summary>
            <param name="context">
            The context under which the serialization process occurs.
            </param>
        </member>
        <member name="M:Atom.Events.TileAreaEventTrigger.Deserialize(Atom.Events.IEventDeserializationContext)">
            <summary>
            Deserializes this TileAreaEventTrigger using the specified IEventDeserializationContext.
            </summary>
            <param name="context">
            The context under which the deserialization process occurs.
            </param>
        </member>
        <member name="F:Atom.Events.TileAreaEventTrigger.floor">
            <summary>
            The number of the floor this <see cref="T:Atom.Events.TileAreaEventTrigger"/> is on.
            </summary>
        </member>
        <member name="T:Atom.IAction">
            <summary>
            Represents an undoable and storable action.
            </summary>
        </member>
        <member name="M:Atom.IAction.Execute">
            <summary>
            Executes this IAction.
            </summary>
        </member>
        <member name="M:Atom.IAction.Dexecute">
            <summary>
            Immediately undoes this IAction.
            </summary>
        </member>
        <member name="M:Atom.IAction.CanExecute">
            <summary>
            Gets a value indicating whether this IAction can be executed.
            </summary>
            <returns>
            true if this IAction can be executed;
            otherwise false.
            </returns>
        </member>
        <member name="M:Atom.IAction.GetDescription">
            <summary>
            Gets a localized description text of this IAction.
            </summary>
            <returns>
            The localized description of this IAction.
            </returns>
        </member>
        <member name="T:Atom.IFloorDrawable">
            <summary>
            Specifies the interface of a drawable object
            which is part of a floor, such as a TileMapFloor.
            </summary>
        </member>
        <member name="P:Atom.IFloorDrawable.RelativeDrawOrder">
            <summary>
            Gets a value that indicates whether this <see cref="T:Atom.IFloorDrawable"/> is drawn
            above or below other <see cref="T:Atom.IFloorDrawable"/>s on the same Floor as this <see cref="T:Atom.IFloorDrawable"/>.
            </summary>
            <value>
            The relative draw order of this IFloorDrawable.
            Is used when sorting the IDrawable objects for drawing.
            </value>
        </member>
        <member name="T:Atom.ISwitchable">
            <summary>
            Defines the interface of an object that can be switched on or off.
            </summary>
        </member>
        <member name="P:Atom.ISwitchable.IsSwitched">
            <summary>
            Gets or sets a value indicating whether this ISwitchable
            is currently switched on or off.
            </summary>
        </member>
        <member name="P:Atom.ISwitchable.IsSwitchable">
            <summary>
            Gets or sets a value indicating whether this ISwitchable
            can currently be switched on or off.
            </summary>
        </member>
        <member name="E:Atom.ISwitchable.IsSwitchedChanged">
            <summary>
            Fired when the <see cref="P:Atom.ISwitchable.IsSwitched"/> state of this ISwitchable has changed.
            </summary>
        </member>
        <member name="T:Atom.Scene.IFloorObject">
            <summary>
            Represents an object that is part of a Floor (such as <see cref="T:Atom.Scene.Tiles.TileMapFloor"/>) in a Scene.
            </summary>
        </member>
        <member name="P:Atom.Scene.IFloorObject.FloorNumber">
            <summary>
            Gets the number that uniquely identifies the floor this IFloorObject is on.
            </summary>
            <value>
            A zero-based value that can be used to index into the list of floors.
            </value>
        </member>
        <member name="T:Atom.Scene.IScene">
            <summary>
            A scene represents as an aggregation of <see cref="T:Atom.Components.IEntity"/>s the main
            meeting point of a game.
            </summary>
        </member>
        <member name="M:Atom.Scene.IScene.Add(Atom.Components.IEntity)">
            <summary>
            Adds the given <see cref="T:Atom.Components.IEntity"/> to this IScene.
            </summary>
            <param name="entity">
            The entity to add.
            </param>
        </member>
        <member name="M:Atom.Scene.IScene.Remove(Atom.Components.IEntity)">
            <summary>
            Tries to remove the given <see cref="T:Atom.Components.IEntity"/> from this IScene.
            </summary>
            <param name="entity">The Entity to remove.</param>
            <returns>
            Returns <see langword="true"/> if the Entity has been removed;
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Atom.Scene.ISceneEntity">
            <summary>
            Represents an <see cref="T:Atom.Components.IEntity"/> that is part of an <see cref="T:Atom.Scene.IScene"/>.
            </summary>
        </member>
        <member name="T:Atom.Scene.ISceneObject">
            <summary>
            Defines the interface that Objects must implement
            that wish to be part of a scene.
            </summary>
        </member>
        <member name="P:Atom.Scene.ISceneObject.Scene">
            <summary>
            Gets or sets the <see cref="T:Atom.Scene.IScene"/> that owns
            this <see cref="T:Atom.Scene.ISceneObject"/>.
            </summary>
            <value>
            Is null if the object is not part of a scene.
            </value>
        </member>
        <member name="M:Atom.Scene.ISceneObject.AddToScene(Atom.Scene.IScene)">
            <summary>
            Adds this <see cref="T:Atom.Scene.ISceneObject"/> to the specified <see cref="T:Atom.Scene.IScene"/>.
            </summary>
            <param name="scene">
            The IScene to add this <see cref="T:Atom.Scene.ISceneObject"/> to.
            </param>
        </member>
        <member name="M:Atom.Scene.ISceneObject.RemoveFromScene">
            <summary>
            Removes this <see cref="T:Atom.Scene.ISceneObject"/> from its current <see cref="P:Atom.Scene.ISceneObject.Scene"/>.
            </summary>
        </member>
        <member name="T:Atom.Scene.ISceneProvider">
            <summary>
            Provides access to an <see cref="T:Atom.Scene.IScene"/> object.
            </summary>
        </member>
        <member name="P:Atom.Scene.ISceneProvider.Scene">
            <summary>
            Gets an <see cref="T:Atom.Scene.IScene"/> object.
            </summary>
            <value>The <see cref="T:Atom.Scene.IScene"/> object provided by this ISceneProvider.</value>
        </member>
        <member name="T:Atom.Scene.Tiles.TileMapFloor">
            <summary>
            Defines a single floor in a <see cref="T:Atom.Scene.Tiles.TileMap"/>.
            </summary>
            <remarks> 
            <para>
                A floor consists of multiple <see cref="T:Atom.Scene.Tiles.TileMapDataLayer"/>s 
                and one single Action-<see cref="T:Atom.Scene.Tiles.TileMapDataLayer"/>
            </para>
            <para>
                The entities of a floor are usually rendered 
                above all the layers of the floor.
            </para>
            </remarks>
            <content>
            Defines the <see cref="T:Atom.Storage.IObjectReaderWriter"/> for the TileMapFloor class.
            </content>
        </member>
        <member name="P:Atom.Scene.Tiles.TileMapFloor.Layers">
            <summary>
            Gets a direct reference to the list of layers of this <see cref="T:Atom.Scene.Tiles.TileMapFloor"/>.
            WARNING: Don't modify this list directly.
            </summary>
        </member>
        <member name="P:Atom.Scene.Tiles.TileMapFloor.ActionLayer">
            <summary>
            Gets or sets the action layer of this <see cref="T:Atom.Scene.Tiles.TileMapFloor"/>.
            </summary>
            <value>
            The action layer contains non-graphical data, such as collision information,
            for every tile on this TileMapFloor.
            </value>
        </member>
        <member name="P:Atom.Scene.Tiles.TileMapFloor.FloorNumber">
            <summary>
            Gets the floor number of this <see cref="T:Atom.Scene.Tiles.TileMapFloor"/>.
            </summary>
            <value>
            The floor number can be used to index into the floors 
            of the <see cref="T:Atom.Scene.Tiles.TileMap"/> that owns this TileMapFloor.
            </value>
        </member>
        <member name="P:Atom.Scene.Tiles.TileMapFloor.Map">
            <summary>
            Gets the <see cref="T:Atom.Scene.Tiles.TileMap"/> that owns this <see cref="T:Atom.Scene.Tiles.TileMapFloor"/>.
            </summary>
            <value>The <see cref="T:Atom.Scene.Tiles.TileMap"/> that owns this <see cref="T:Atom.Scene.Tiles.TileMapFloor"/>.</value>
        </member>
        <member name="P:Atom.Scene.Tiles.TileMapFloor.Tag">
            <summary>
            Gets or sets the (user-setable) tag of this <see cref="T:Atom.Scene.Tiles.TileMapFloor"/>.
            </summary>
            <value>The dafault value is null.</value>
        </member>
        <member name="M:Atom.Scene.Tiles.TileMapFloor.#ctor(Atom.Scene.Tiles.TileMap,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Scene.Tiles.TileMapFloor"/> class.
            </summary>
            <param name="map">
            The <see cref="T:Atom.Scene.Tiles.TileMap"/> that owns the new TileMapFloor.
            </param>
            <param name="initialLayerCapacity">
            The initial number of layers the TileMapFloor can have without having to reallocate memory.
            </param>
        </member>
        <member name="M:Atom.Scene.Tiles.TileMapFloor.Create(Atom.Scene.Tiles.TileMap,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:Atom.Scene.Tiles.TileMapFloor"/> class.
            </summary>
            <param name="map">
            The <see cref="T:Atom.Scene.Tiles.TileMap"/> that owns the new TileMapFloor.
            </param>
            <param name="initialLayerCapacity">
            The initial number of layers the TileMapFloor can have without having to reallocate memory.
            </param>
            <returns>The newly created TileMapFloor.</returns>
        </member>
        <member name="M:Atom.Scene.Tiles.TileMapFloor.AddLayer(Atom.Scene.Tiles.TileMapDataLayer)">
            <summary>
            Adds the given <see cref="T:Atom.Scene.Tiles.TileMapDataLayer"/> to this <see cref="T:Atom.Scene.Tiles.TileMapFloor"/>.
            </summary>
            <param name="layer">
            The layer to add to the TileMapFloor.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="layer"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the size/tilesize of the TileMapDataLayer doesn't match the size 
            of the TileMap of this TileMapFloor.
            </exception>
        </member>
        <member name="M:Atom.Scene.Tiles.TileMapFloor.RemoveLayer(Atom.Scene.Tiles.TileMapDataLayer)">
            <summary>
            Removes the first occurence of the given <see cref="T:Atom.Scene.Tiles.TileMapDataLayer"/> from this <see cref="T:Atom.Scene.Tiles.TileMapFloor"/>.
            </summary>
            <param name="layer">
            The TileMapDataLayer to remove.
            </param>
            <returns>
            Returns <see langword="true"/> if the <paramref name="layer"/> has been removed;
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Scene.Tiles.TileMapFloor.GetLayer(System.Int32)">
            <summary>
            Gets the TileMapDataLayer at the given zero-based <paramref name="layerIndex"/>.
            </summary>
            <param name="layerIndex">
            The zero-based index of the TileMapDataLayer to get.
            </param>
            <returns>
            The TileMapDataLayer at the requested index;
            otherwise null if the given layerIndex is invalid.
            </returns>
        </member>
        <member name="F:Atom.Scene.Tiles.TileMapFloor.actionLayer">
            <summary>
            The action layer of this <see cref="T:Atom.Scene.Tiles.TileMapFloor"/>.
            </summary>
        </member>
        <member name="F:Atom.Scene.Tiles.TileMapFloor.layers">
            <summary>
            The collection of (graphical) layers.
            </summary>
        </member>
        <member name="T:Atom.Scene.Tiles.TileMapFloor.ReaderWriter">
            <summary>
            Implements a mechanism that serializes / deserializes <see cref="T:Atom.Scene.Tiles.TileMapFloor"/> objects.
            </summary>
        </member>
        <member name="M:Atom.Scene.Tiles.TileMapFloor.ReaderWriter.#ctor(Atom.ITypeActivator)">
            <summary>
            Initializes a new instance of the ReaderWriter class.
            </summary>
            <param name="layerTypeActivator">
            Responsible for creating the <see cref="T:Atom.Scene.Tiles.TileMapDataLayer"/> objects serialized in a TileMapFloor.
            </param>
        </member>
        <member name="M:Atom.Scene.Tiles.TileMapFloor.ReaderWriter.Serialize(Atom.Scene.Tiles.TileMapFloor,Atom.Storage.ISerializationContext)">
            <summary>
            Serializes the specified TileMapFloor object.
            </summary>
            <param name="object">
            The object to serialize.
            </param>
            <param name="context">
            The context that provides everything required for the serialization process.
            </param>
        </member>
        <member name="M:Atom.Scene.Tiles.TileMapFloor.ReaderWriter.Deserialize(Atom.Scene.Tiles.TileMapFloor,Atom.Storage.IDeserializationContext)">
            <summary>
            Deserializes the specified TileMapFloor object.
            </summary>
            <param name="object">
            The object to deserialize.
            </param>
            <param name="context">
            The context that provides everything required for the deserialization process.
            </param>
        </member>
        <member name="F:Atom.Scene.Tiles.TileMapFloor.ReaderWriter.layerTypeActivator">
            <summary>
            Responsible for creating the <see cref="T:Atom.Scene.Tiles.TileMapDataLayer"/> objects serialized in a TileMapFloor.
            </summary>
        </member>
        <member name="T:Atom.Scene.Tiles.TileMapFloorTag">
            <summary>
            Defines a tag which can be applied to a <see cref="T:Atom.Scene.Tiles.TileMapFloor"/>
            which stores the <see cref="T:Atom.IFloorDrawable"/>s that are currently visible on that specific floor.
            </summary>
        </member>
        <member name="P:Atom.Scene.Tiles.TileMapFloorTag.VisibleDrawables">
            <summary>
            Gets the list of <see cref="T:Atom.IDrawable"/>s that are visible on the <see cref="T:Atom.Scene.Tiles.TileMapFloor"/>.
            </summary>
            <value>The reference of the actual list stored in this TileMapFloorTag.</value>
        </member>
        <member name="F:Atom.Scene.Tiles.TileMapFloorTag.visibleDrawables">
            <summary>
            The list of <see cref="T:Atom.IFloorDrawable"/>s that are visible on the TileMapFloor.
            </summary>
        </member>
        <member name="T:Atom.Scene.Tiles.ITileHandler`1">
            <summary>
            Descripes the interface of an object that handles actions.
            </summary>
            <typeparam name="TCallerType">
            The type of object whos actions are handled.
            </typeparam>
        </member>
        <member name="M:Atom.Scene.Tiles.ITileHandler`1.Handle(System.Int32,System.Int32,System.Int32,`0)">
            <summary>
            Handles the action.
            </summary>
            <param name="x">
            The x-coordinate of the tile (in tile-space).
            </param>
            <param name="y">
            The y-coordinate of the tile (in tile-space).
            </param>
            <param name="id">
            The id of the action.
            </param>
            <param name="caller">
            The object that created the event.
            </param>
            <returns>
            Returns <see lamg="true"/> if to stop handling actions; 
            otherwise <see lamg="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Scene.Tiles.ITileHandler`1.IsWalkable(System.Int32,`0)">
            <summary>
            Returns whether the specified tile is walkable by the specified caller.
            </summary>
            <param name="id">
            The id of the action.
            </param>
            <param name="caller">
            The object to test for.</param>
            <returns>
            Returns <see lamg="true"/> if the tile with the given <paramref name="id"/> is walkable; 
            otherwise <see lamg="false"/>.
            </returns>
        </member>
        <member name="T:Atom.Scene.Tiles.ITileMapProvider">
            <summary>
            Defines an interface which provides
            access to a <see cref="T:Atom.Scene.Tiles.TileMap"/> object.
            </summary>
        </member>
        <member name="P:Atom.Scene.Tiles.ITileMapProvider.Map">
            <summary>
            Gets the <see cref="T:Atom.Scene.Tiles.TileMap"/> object this <see cref="T:Atom.Scene.Tiles.ITileMapProvider"/> provides.
            </summary>
            <value>
            The <see cref="T:Atom.Scene.Tiles.TileMap"/> object this <see cref="T:Atom.Scene.Tiles.ITileMapProvider"/> provides.
            </value>
        </member>
        <member name="T:Atom.Scene.Tiles.TilePath">
            <summary> 
            Represents a path of (connected) tiles on a TileMap.
            </summary>
        </member>
        <member name="P:Atom.Scene.Tiles.TilePath.State">
            <summary> 
            Gets the state of this <see cref="T:Atom.Scene.Tiles.TilePath"/>.
            </summary>
            <value>The <see cref="T:Atom.Scene.Tiles.TilePathState"/> of this <see cref="T:Atom.Scene.Tiles.TilePath"/>.</value>
        </member>
        <member name="P:Atom.Scene.Tiles.TilePath.Item(System.Int32)">
            <summary>
            Gets the location (in tile-space) at the given index
            of the <see cref="T:Atom.Scene.Tiles.TilePath"/>.
            </summary>
            <param name="index">The zero-based index of the tile location to receive.</param>
            <returns>The location of the tile.</returns>
        </member>
        <member name="P:Atom.Scene.Tiles.TilePath.Length">
            <summary>
            Gets the total length of this <see cref="T:Atom.Scene.Tiles.TilePath"/>.
            </summary>
            <value>The length of the <see cref="T:Atom.Scene.Tiles.TilePath"/>.</value>
        </member>
        <member name="P:Atom.Scene.Tiles.TilePath.Layer">
            <summary>
            Gets the <see cref="T:Atom.Scene.Tiles.TileMapDataLayer"/> that contains this <see cref="T:Atom.Scene.Tiles.TilePath"/>.
            </summary>
            <value>The TileMapDataLayer that is related to this TilePath.</value>
        </member>
        <member name="M:Atom.Scene.Tiles.TilePath.#ctor(Atom.Scene.Tiles.TileMapDataLayer,Atom.Scene.Tiles.TilePathState,Atom.Math.Point2[])">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Scene.Tiles.TilePath"/> class.
            </summary>
            <param name="layer">The layer the new TilePath is part of.</param>
            <param name="state">The state of the new TilePath.</param>
            <param name="path">The actual path data of the new TilePath.</param>
        </member>
        <member name="M:Atom.Scene.Tiles.TilePath.CreateFound(Atom.Scene.Tiles.TileMapDataLayer,Atom.Math.Point2[])">
            <summary>
            Creates a new <see cref="T:Atom.Scene.Tiles.TilePath"/> instance initialized 
            with the specified <paramref name="path"/>.
            </summary>
            <param name="layer">The layer the new path is in.</param>
            <param name="path">
            The path data.
            </param>
            <returns>
            A new <see cref="T:Atom.Scene.Tiles.TilePath"/> instance.
            </returns>
        </member>
        <member name="M:Atom.Scene.Tiles.TilePath.CreateFoundStartIsTarget(Atom.Scene.Tiles.TileMapDataLayer)">
            <summary>
            Creates a new <see cref="T:Atom.Scene.Tiles.TilePath"/> instance initialized 
            to indicate that the starting point is the end point.
            </summary>
            <param name="layer">The layer the new path is in.</param>
            <returns> A new <see cref="T:Atom.Scene.Tiles.TilePath"/> instance. </returns>
        </member>
        <member name="M:Atom.Scene.Tiles.TilePath.CreateNotFound(Atom.Scene.Tiles.TileMapDataLayer)">
            <summary>
            Creates a new <see cref="T:Atom.Scene.Tiles.TilePath"/> instance initialized 
            to indicate that no path has been found.
            </summary>
            <param name="layer">The layer the new path is in.</param>
            <returns> A new <see cref="T:Atom.Scene.Tiles.TilePath"/> instance. </returns>
        </member>
        <member name="M:Atom.Scene.Tiles.TilePath.GetDirToNext(System.Int32)">
            <summary>
            Gets the direction the next tile in this TilePath is facing.
            </summary>
            <param name="pathLocation"> The current position in the path. </param>
            <returns> The direction from the current tile to the next. </returns>
        </member>
        <member name="M:Atom.Scene.Tiles.TilePath.GetDirToNext(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the direction from the given current tile to the next tile in this TilePath.
            </summary>
            <param name="currentX">
            The current x position in tile-space.
            </param>
            <param name="currentY">
            The current y position in tile-space.
            </param>
            <param name="pathLocation">
            The current position in the path.
            </param>
            <returns>
            The direction from the current tile to the next.
            </returns>
        </member>
        <member name="M:Atom.Scene.Tiles.TilePath.ReversePath">
            <summary>
            Reverses the path.
            </summary>
        </member>
        <member name="M:Atom.Scene.Tiles.TilePath.GetPath">
            <summary>
            Gets the underlying path array.
            </summary>
            <returns>
            The reference of the underlying path data array.
            </returns>
        </member>
        <member name="F:Atom.Scene.Tiles.TilePath.path">
            <summary> 
            The underlying path. 
            </summary>
        </member>
        <member name="F:Atom.Scene.Tiles.TilePath.layer">
            <summary>
            The layer that contains the path.
            </summary>
        </member>
        <member name="F:Atom.Scene.Tiles.TilePath.state">
            <summary>
            The state of the path.
            </summary>
        </member>
        <member name="T:Atom.Scene.Tiles.TilePathState">
            <summary>
            Specifies the state of a <see cref="T:Atom.Scene.Tiles.TilePath"/>.
            </summary>
        </member>
        <member name="F:Atom.Scene.Tiles.TilePathState.Found">
            <summary>
            A path has been found.</summary>
        </member>
        <member name="F:Atom.Scene.Tiles.TilePathState.NotFound">
            <summary>
            No path has been found.
            </summary>
        </member>
        <member name="T:Atom.Scene.Tiles.TileMap">
            <summary>
            Implements a multi-floor multi-layered tile map
            which supports one action-layer per floor.
            </summary>
            <content>
            Defines the <see cref="T:Atom.Storage.IObjectReaderWriter"/> for the TileMap class.
            </content>
        </member>
        <member name="F:Atom.Scene.Tiles.TileMap.InvalidTile">
            <summary>
            Identifies an invalid tile.
            </summary>
            <value>The value is -1.</value>
        </member>
        <member name="E:Atom.Scene.Tiles.TileMap.FloorsChanged">
            <summary>
            Fired when a <see cref="T:Atom.Scene.Tiles.TileMapFloor"/> has been added to or removed from this <see cref="T:Atom.Scene.Tiles.TileMap"/>.
            </summary>
        </member>
        <member name="P:Atom.Scene.Tiles.TileMap.Name">
            <summary>
            Gets or sets the name of this <see cref="T:Atom.Scene.Tiles.TileMap"/>.
            </summary>
            <value>
            The name that (should) uniquely identify this <see cref="T:Atom.Scene.Tiles.TileMap"/>.
            </value>
        </member>
        <member name="P:Atom.Scene.Tiles.TileMap.Width">
            <summary>
            Gets the width of this <see cref="T:Atom.Scene.Tiles.TileMap"/> (in tile-space).
            </summary>
            <value>The number of tiles from the left to the right.</value>
        </member>
        <member name="P:Atom.Scene.Tiles.TileMap.Height">
            <summary>
            Gets the height of this <see cref="T:Atom.Scene.Tiles.TileMap"/> (in tile-space).
            </summary>
            <value>The number of tiles from the top to the bottom.</value>
        </member>
        <member name="P:Atom.Scene.Tiles.TileMap.Size">
            <summary>
            Gets the size of this <see cref="T:Atom.Scene.Tiles.TileMap"/> (in tile-space).
            </summary>
        </member>
        <member name="P:Atom.Scene.Tiles.TileMap.SizeInPixels">
            <summary>
            Gets the size of this <see cref="T:Atom.Scene.Tiles.TileMap"/> in pixels.
            </summary>
        </member>
        <member name="P:Atom.Scene.Tiles.TileMap.TileSize">
            <summary>
            Gets or sets the size of the tiles in this <see cref="T:Atom.Scene.Tiles.TileMap"/>.
            </summary>
            <value>The default value is 16.</value>
        </member>
        <member name="P:Atom.Scene.Tiles.TileMap.Floors">
            <summary>
            Gets a direct reference to the list that contains the <see cref="T:Atom.Scene.Tiles.TileMapFloor"/>s of this <see cref="T:Atom.Scene.Tiles.TileMap"/>.
            Warning: Don't modify this list directly.
            </summary>
        </member>
        <member name="P:Atom.Scene.Tiles.TileMap.FloorCount">
            <summary>
            Gets a value that indicates how many <see cref="T:Atom.Scene.Tiles.TileMapFloor"/>s this <see cref="T:Atom.Scene.Tiles.TileMap"/> contains.
            </summary>
            <value>The numbers of floors in this TileMap.</value>
        </member>
        <member name="M:Atom.Scene.Tiles.TileMap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Scene.Tiles.TileMap"/> class.
            </summary>
        </member>
        <member name="M:Atom.Scene.Tiles.TileMap.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Scene.Tiles.TileMap"/> class.
            </summary>
            <param name="tileSize">The size of a single tile in pixels of the new TileMap.</param>
            <exception cref="T:System.ArgumentException">
            If <paramref name="tileSize"/> is less or equals zero.
            </exception>
        </member>
        <member name="M:Atom.Scene.Tiles.TileMap.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Scene.Tiles.TileMap"/> class.
            </summary>
            <param name="width">The width of the new TileMap (in tile-space).</param>
            <param name="height">The height of the new TileMap (in tile-space).</param>
            <param name="tileSize">The size of a single tile in pixels of the new TileMap.</param>
            <param name="initialFloorCapacity">
            The initial number of floors the new TileMap can hold without having to reallocate memory.
            </param>
            <exception cref="T:System.ArgumentException">
            If <paramref name="tileSize"/> is less or equals zero.
            </exception>
        </member>
        <member name="M:Atom.Scene.Tiles.TileMap.AddFloor(System.Int32)">
            <summary>
            Adds a new <see cref="T:Atom.Scene.Tiles.TileMapFloor"/> to this <see cref="T:Atom.Scene.Tiles.TileMap"/>.
            </summary>
            <param name="initialLayerCapacity">
            The initial number of layers the new <see cref="T:Atom.Scene.Tiles.TileMapFloor"/>
            can hold.
            </param>
            <returns>
            The newly added floor.
            </returns>
        </member>
        <member name="M:Atom.Scene.Tiles.TileMap.RemoveFloor(System.Int32)">
            <summary>
            Removes the <see cref="T:Atom.Scene.Tiles.TileMapFloor"/> at the specified <paramref name="index"/>.
            </summary>
            <param name="index">
            The zero-based index of the element to remove.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            index is less than 0.-or-index is equal to or greater than the FloorCount.
            </exception>
        </member>
        <member name="M:Atom.Scene.Tiles.TileMap.RemoveFloor(Atom.Scene.Tiles.TileMapFloor)">
            <summary>
            Tries to remove the specified <see cref="T:Atom.Scene.Tiles.TileMapFloor"/> from this TileMap.
            </summary>
            <param name="floor">
            The TileMapFloor to remove.
            </param>
            <returns>
            Returns <see langword="true"/> if the given TileMapFloor has been removed from this TileMap;
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Scene.Tiles.TileMap.GetFloor(System.Int32)">
            <summary>
            Receives the <see cref="T:Atom.Scene.Tiles.TileMapFloor"/> of this <see cref="T:Atom.Scene.Tiles.TileMap"/>
            that has the given <paramref name="floorNumber"/>.
            </summary>
            <param name="floorNumber">
            The floor number of the Floor to receive.
            </param>
            <returns>
            The TileMapFloor at the given floorNumber;
            or null if there exists no TileMapFloor at the given floorNumber.
            </returns>
        </member>
        <member name="M:Atom.Scene.Tiles.TileMap.CreateFloor(System.Int32)">
            <summary>
            Creates a new <see cref="T:Atom.Scene.Tiles.TileMapFloor"/> for this <see cref="T:Atom.Scene.Tiles.TileMap"/>.
            </summary>
            <param name="initialLayerCapacity">
            The initial number of layers the new <see cref="T:Atom.Scene.Tiles.TileMapFloor"/>
            can hold.
            </param>
            <returns>
            The newly added floor.
            </returns>
        </member>
        <member name="M:Atom.Scene.Tiles.TileMap.ChangeTiles(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Changes tiles of a specific floor/layer in this TileMap. Two tiles are changed in one pass.
            </summary>
            <param name="floorNumber">
            The number of the floor.
            </param>
            <param name="layerIndex">
            The index of the layer.
            </param>
            <param name="sourceTile">
            The id of the tile to search in the layer.
            </param>
            <param name="targetTile">
            The id to change the tile to.
            </param>
            <param name="targetActionTile">
            The if to change the action tile of the tile to.
            </param>
        </member>
        <member name="M:Atom.Scene.Tiles.TileMap.ChangeTiles(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Changes tiles of a specific floor/layer in this TileMap. Two tiles are changed in one pass.
            </summary>
            <param name="floorNumber">
            The number of the floor.
            </param>
            <param name="layerIndex">
            The index of the layer.
            </param>
            <param name="sourceTileA">
            The id of the first tile to search in the layer.
            </param>
            <param name="targetTileA">
            The id to change the first tile to.
            </param>
            <param name="targetActionTileA">
            The if to change the action tile of the first tile to.
            </param>
            <param name="sourceTileB">
            The id of the second tile to search in the layer.
            </param>
            <param name="targetTileB">
            The id to change the second tile to.
            </param>
            <param name="targetActionTileB">
            The if to change the action tile of the second tile to.
            </param>
        </member>
        <member name="M:Atom.Scene.Tiles.TileMap.OnFloorsChanged">
            <summary>
            Fires the <see cref="E:Atom.Scene.Tiles.TileMap.FloorsChanged"/> event.
            </summary>
        </member>
        <member name="M:Atom.Scene.Tiles.TileMap.LimitScroll(Atom.Math.Vector2@,Atom.Math.Vector2,Atom.Math.Vector2)">
            <summary>
            Limits the given scroll value to be inside the map.
            </summary>
            <param name="scroll">The scroll value to limit.</param>
            <param name="mapSize">The size of the map in pixels.</param>
            <param name="screenSize">The size of the viewable area.</param>
        </member>
        <member name="M:Atom.Scene.Tiles.TileMap.Save(Atom.Scene.Tiles.TileMap,Atom.Storage.ISerializationContext)">
            <summary>
            Saves the specified <see cref="T:Atom.Scene.Tiles.TileMap"/> using the default <see cref="T:Atom.Scene.Tiles.TileMap.ReaderWriter"/>.
            </summary>
            <param name="map">
            The TileMap to serialize.
            </param>
            <param name="context">
            The context under which the serialization process should occur.
            </param>
        </member>
        <member name="M:Atom.Scene.Tiles.TileMap.Load(Atom.Scene.Tiles.TileMap,Atom.Storage.IDeserializationContext,Atom.ITypeActivator)">
            <summary>
            Loads the specified <see cref="T:Atom.Scene.Tiles.TileMap"/> using the default <see cref="T:Atom.Scene.Tiles.TileMap.ReaderWriter"/>.
            </summary>
            <param name="map">
            The TileMap to deserialize.
            </param>
            <param name="context">
            The context under which the deserialization process should occur.
            </param>
            <param name="typeActivator">
            Responsible for creating the <see cref="T:Atom.Scene.Tiles.TileMapDataLayer"/> objects serialized in a TileMapFloor.
            </param>
        </member>
        <member name="F:Atom.Scene.Tiles.TileMap.width">
            <summary>
            The width of this <see cref="T:Atom.Scene.Tiles.TileMap"/> (in tile-space).
            </summary>
        </member>
        <member name="F:Atom.Scene.Tiles.TileMap.height">
            <summary>
            The height of this <see cref="T:Atom.Scene.Tiles.TileMap"/> (in tile-space).
            </summary>
        </member>
        <member name="F:Atom.Scene.Tiles.TileMap.tileSize">
            <summary>
            The size of the tiles in this <see cref="T:Atom.Scene.Tiles.TileMap"/>.
            </summary>
        </member>
        <member name="F:Atom.Scene.Tiles.TileMap.floors">
            <summary>
            The collection of floors of this <see cref="T:Atom.Scene.Tiles.TileMap"/>.
            </summary>
        </member>
        <member name="T:Atom.Scene.Tiles.TileMap.ReaderWriter">
            <summary>
            Implements a mechanism that serializes / deserializes <see cref="T:Atom.Scene.Tiles.TileMap"/> objects.
            </summary>
        </member>
        <member name="M:Atom.Scene.Tiles.TileMap.ReaderWriter.#ctor(Atom.Storage.IObjectReaderWriter{Atom.Scene.Tiles.TileMapFloor})">
            <summary>
            Initializes a new instance of the ReaderWriter class.
            </summary>
            <param name="floorReaderWriter">
            Responsible for serializing and deserializing the TileMapFloors that are part of the TileMap.
            </param>
        </member>
        <member name="M:Atom.Scene.Tiles.TileMap.ReaderWriter.Serialize(Atom.Scene.Tiles.TileMap,Atom.Storage.ISerializationContext)">
            <summary>
            Serializes the given TileMap using the given ISerializationContext.
            </summary>
            <param name="object">
            The object to serialize.
            </param>
            <param name="context">
            The context that provides everything required for the serialization process.
            </param>
        </member>
        <member name="M:Atom.Scene.Tiles.TileMap.ReaderWriter.Deserialize(Atom.Scene.Tiles.TileMap,Atom.Storage.IDeserializationContext)">
            <summary>
            Deserializes the given TileMap using the given IDeserializationContext.
            </summary>
            <param name="object">
            The object to deserialize.
            </param>
            <param name="context">
            The context that provides everything required for the deserialization process.
            </param>
        </member>
        <member name="F:Atom.Scene.Tiles.TileMap.ReaderWriter.floorReaderWriter">
            <summary>
            Responsible for serializing and deserializing the TileMapFloors that are part of the TileMap.
            </summary>
        </member>
        <member name="T:Atom.Scene.Tiles.TileMapDataLayer">
            <summary>
            Defines a basic data layer of a <see cref="T:Atom.Scene.Tiles.TileMapFloor"/> of a <see cref="T:Atom.Scene.Tiles.TileMap"/>.
            </summary>
        </member>
        <member name="P:Atom.Scene.Tiles.TileMapDataLayer.Name">
            <summary>
            Gets or sets the name of this <see cref="T:Atom.Scene.Tiles.TileMapDataLayer"/>.
            </summary>
            <value>
            The name that (should) uniquely identify this <see cref="T:Atom.Scene.Tiles.TileMapDataLayer"/>.
            </value>
        </member>
        <member name="P:Atom.Scene.Tiles.TileMapDataLayer.Tag">
            <summary>
            Gets or sets the object where the user can store any optional data. 
            Is not serialized.
            </summary>
            <value>The default value is null.</value>
        </member>
        <member name="P:Atom.Scene.Tiles.TileMapDataLayer.TypeId">
            <summary>
            Gets or sets a value that indicates what kind of data 
            is stored in this <see cref="T:Atom.Scene.Tiles.TileMapDataLayer"/>.
            </summary>
            <value>The default value is 0.</value>
        </member>
        <member name="P:Atom.Scene.Tiles.TileMapDataLayer.IsVisible">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Atom.Scene.Tiles.TileMapDataLayer"/> is visible.
            </summary>
            <value>
            The default value is <see langword="true"/>.
            </value>
        </member>
        <member name="P:Atom.Scene.Tiles.TileMapDataLayer.Floor">
            <summary>
            Gets the <see cref="T:Atom.Scene.Tiles.TileMapFloor"/> this <see cref="T:Atom.Scene.Tiles.TileMapDataLayer"/> is part of.
            </summary>
            <value>The <see cref="T:Atom.Scene.Tiles.TileMapFloor"/> this TileMapDataLayer is part of.</value>
        </member>
        <member name="P:Atom.Scene.Tiles.TileMapDataLayer.Map">
            <summary>
            Gets the <see cref="T:Atom.Scene.Tiles.TileMap"/> this <see cref="T:Atom.Scene.Tiles.TileMapDataLayer"/> is part of.
            </summary>
            <value>The <see cref="T:Atom.Scene.Tiles.TileMap"/> this TileMapDataLayer is part of.</value>
        </member>
        <member name="P:Atom.Scene.Tiles.TileMapDataLayer.TileSize">
            <summary>
            Gets the size of the tiles in this <see cref="T:Atom.Scene.Tiles.TileMapDataLayer"/>.
            </summary>
            <value>The default value is 16.</value>
        </member>
        <member name="P:Atom.Scene.Tiles.TileMapDataLayer.Width">
            <summary>
            Gets the width of this <see cref="T:Atom.Scene.Tiles.TileMapDataLayer"/> (in tile-space).
            </summary>
            <value>The number of tiles from the left to the right.</value>
        </member>
        <member name="P:Atom.Scene.Tiles.TileMapDataLayer.Height">
            <summary>
            Gets the height of this <see cref="T:Atom.Scene.Tiles.TileMapDataLayer"/> (in tile-space).
            </summary>
            <value>The number of tiles from the top to the bottom.</value>
        </member>
        <member name="P:Atom.Scene.Tiles.TileMapDataLayer.Data">
            <summary>
            Gets the data array of this <see cref="T:Atom.Scene.Tiles.TileMapDataLayer"/>.
            </summary>
            <value>
            The array is returned directly; without copying the data.
            </value>
        </member>
        <member name="M:Atom.Scene.Tiles.TileMapDataLayer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Scene.Tiles.TileMapDataLayer"/> class.
            </summary>
        </member>
        <member name="M:Atom.Scene.Tiles.TileMapDataLayer.#ctor(System.String,Atom.Scene.Tiles.TileMapFloor,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Scene.Tiles.TileMapDataLayer"/> class.
            </summary>
            <param name="name">
            The name of the new TileMapDataLayer.
            </param>
            <param name="floor">
            The floor that owns the new TileMapDataLayer.
            </param>
            <param name="width">
            The width of the new TileMapDataLayer (in tile-space).
            </param>
            <param name="height">
            The height of the new TileMapDataLayer (in tile-space).
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="floor"/> is null.
            </exception>
        </member>
        <member name="M:Atom.Scene.Tiles.TileMapDataLayer.SetTile(System.Int32,System.Int32,System.Int32)">
            <summary> 
            Sets the tile at the given position.
            </summary>
            <param name="x"> The X coordinate of the tile in tile space. </param>
            <param name="y"> The Y coordinate of the tile in tile space. </param>
            <param name="newIndex"> The index to set to. </param>
        </member>
        <member name="M:Atom.Scene.Tiles.TileMapDataLayer.TrySetTile(System.Int32,System.Int32,System.Int32)">
            <summary> 
            Sets the tile at the given position.
            </summary>
            <param name="x"> X coordinate of the tile in tile space. </param>
            <param name="y"> Y coordinate of the tile in tile space. </param>
            <param name="newIndex"> The index to set to. </param>
            <returns>
            Whether the tile could be set; false if out of valid range.
            </returns>
        </member>
        <member name="M:Atom.Scene.Tiles.TileMapDataLayer.GetTileAt(System.Int32,System.Int32)">
            <summary>
            Receives the tile at the specified position.
            </summary>
            <param name="x">The X-coordinate of the tile to receive (in tile space).</param>
            <param name="y">The Y-coordinate of the tile to receive (in tile space).</param>
            <returns> 
            The tile at the given indices.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">
            If the given input indices are out of valid range.
            </exception>
        </member>
        <member name="M:Atom.Scene.Tiles.TileMapDataLayer.GetTileAtSafe(System.Int32,System.Int32)">
            <summary>
            Receives the tile at the specified position.
            </summary>
            <param name="x">The X-coordinate of the tile to receive (in tile space).</param>
            <param name="y">The Y-coordinate of the tile to receive (in tile space).</param>
            <returns> 
            The tile or <see cref="F:Atom.Scene.Tiles.TileMap.InvalidTile"/> if the given indices are out of valid range.
            </returns>
        </member>
        <member name="M:Atom.Scene.Tiles.TileMapDataLayer.TryGetTileAt(System.Int32,System.Int32,System.Int32@)">
            <summary> 
            Receives the tile at the specified position.
            </summary>
            <param name="x">The X-coordinate of the tile to receive (in tile space).</param>
            <param name="y">The Y-coordinate of the tile to receive (in tile space).</param>
            <param name="tileId">
            Will contain the tile at the specified position.
            </param>
            <returns>
            Returns <see langword="true"/> if the tile could be sucessfully received;
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Scene.Tiles.TileMapDataLayer.Fill(System.Int32)">
            <summary>
            Fills all entries in this TileMapDataLayer with the given <paramref name="value"/>.
            </summary>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:Atom.Scene.Tiles.TileMapDataLayer.RefreshTileSize">
            <summary>
            Refreshes the tile size stored within this <see cref="T:Atom.Scene.Tiles.TileMapDataLayer"/>.
            </summary>
        </member>
        <member name="M:Atom.Scene.Tiles.TileMapDataLayer.RayWalk``1(Atom.Math.Ray2,System.Single,System.Single,Atom.Scene.Tiles.ITileHandler{``0},``0)">
            <summary>
            Casts a ray against this TileMapDatalayer.
            </summary>
            <typeparam name="TCallerType">
            The type of the object that is walking on the line.
            </typeparam>
            <param name="ray">
            The ray to walk on.
            </param>
            <param name="totalLength">
            The maximum length to walk on the ray.
            </param>
            <param name="stepSize">
            The length of a single step on the ray.
            </param>
            <param name="idHandler">
            The handler that is used to decide.
            </param>
            <param name="caller">
            The object that is walking on the ray.
            </param>
            <returns>
            The length that could be walked on the ray.
            </returns>
        </member>
        <member name="M:Atom.Scene.Tiles.TileMapDataLayer.TestCollisionVertical(System.Int32,System.Int32,System.Int32,System.Single,System.Int32@,System.Int32@,System.Int32)">
            <summary>
            Tests for vertical collision against this <see cref="T:Atom.Scene.Tiles.TileMapDataLayer"/>.
            </summary>
            <param name="x">
            The position of the object on the x-axis.
            </param>
            <param name="y">
            The position of the object on the y-axis.
            </param>
            <param name="height">
            The height of the object.
            </param>
            <param name="velocityX"> 
            The celocity of the object on the x-axis.
            </param>
            <param name="tileCoordinateX">
            This value will contain the end position after moving on the x-axis in tile-space.</param>
            <param name="tileCoordinateY">
            This value will contain the end position after moving on the y-axis in tile-space.
            </param>
            <param name="idToTest">
            The id to test against.
            </param>
            <returns>
            Returns <see langword="true"/> if the it will intersect with the specified <paramref name="idToTest"/>;
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Scene.Tiles.TileMapDataLayer.TestCollisionVertical``1(System.Int32,System.Int32,System.Int32,System.Single,System.Int32@,System.Int32@,Atom.Scene.Tiles.ITileHandler{``0},``0)">
            <summary>
            Tests for vertical collision against this <see cref="T:Atom.Scene.Tiles.TileMapDataLayer"/>.
            </summary>
            <typeparam name="TCallerType">The type of object that is tested against the map.</typeparam>
            <param name="x">
            The position of the object on the x-axis.
            </param>
            <param name="y">
            The position of the object on the y-axis.
            </param>
            <param name="height">
            The height of the object.
            </param>
            <param name="velocityX">
            The celocity of the object on the x-axis.
            </param>
            <param name="tileCoordinateX">
            This value will contain the end position after moving on the x-axis in tile-space.
            </param>
            <param name="tileCoordinateY">
            This value will contain the end position after moving on the y-axis in tile-space.
            </param>
            <param name="idHandler">
            Contains the method which handles the ids. </param>
            <param name="caller">
            The object whos collesion borders are tested in this method.
            </param>
            <returns>
            Returns <see langword="true"/> if the <paramref name="idHandler"/> told the algorithm to stop;
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Scene.Tiles.TileMapDataLayer.TestCollisionHorizontal(System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32)">
            <summary>
            Tests for horizontal collision against this <see cref="T:Atom.Scene.Tiles.TileMapDataLayer"/>.
            </summary>
            <param name="x">
            The position of the object on the x-axis.
            </param>
            <param name="y">
            The position of the object on the y-axis.
            </param>
            <param name="width">
            The width of the object.
            </param>
            <param name="tileCoordinateX">
            This value will contain the end position after moving on the x-axis in tile-space. </param>
            <param name="tileCoordinateY">
            This value will contain the end position after moving on the y-axis in tile-space. </param>
            <param name="idToTest">
            The id to test against.
            </param>
            <returns>
            Returns <see langword="true"/> if the it will intersect with the specified <paramref name="idToTest"/>;
            otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Scene.Tiles.TileMapDataLayer.TestCollisionHorizontal``1(System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@,Atom.Scene.Tiles.ITileHandler{``0},``0)">
            <summary>
            Tests for horizontal collision against this <see cref="T:Atom.Scene.Tiles.TileMapDataLayer"/>.
            </summary>
            <typeparam name="TCallerType">
            The type of object that is tested against the layer.
            </typeparam>
            <param name="x">
            The position of the object on the x-axis.
            </param>
            <param name="y">
            The position of the object on the y-axis.
            </param>
            <param name="width">
            The width of the object.
            </param>
            <param name="tileCoordinateX">
            This value will contain the end position after moving on the x-axis in tile-space. </param>
            <param name="tileCoordinateY">
            This value will contain the end position after moving on the y-axis in tile-space. </param>
            <param name="idHandler">
            Contains the method which handles the ids.
            </param>
            <param name="caller">
            The object whos collesion borders are tested in this method.
            </param>
            <returns>
            Returns <see langword="true"/> if the <paramref name="idHandler"/> told the algorithm to stop;
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Scene.Tiles.TileMapDataLayer.SerializeCore(Atom.Storage.ISerializationContext)">
            <summary>
            Serializes this TileMapDataLayer.
            </summary>
            <param name="context">
            The context that provides everything required for the serialization process.
            </param>
        </member>
        <member name="M:Atom.Scene.Tiles.TileMapDataLayer.Serialize(Atom.Storage.ISerializationContext)">
            <summary>
            Serializes this TileMapDataLayer.
            </summary>
            <param name="context">
            The context that provides everything required for the serialization process.
            </param>
        </member>
        <member name="M:Atom.Scene.Tiles.TileMapDataLayer.DeserializeCore(Atom.Storage.IDeserializationContext)">
            <summary>
            Deserializes this TileMapDataLayer.
            </summary>
            <param name="context">
            The context that provides everything required for the deserialization process.
            </param>
        </member>
        <member name="M:Atom.Scene.Tiles.TileMapDataLayer.Deserialize(Atom.Storage.IDeserializationContext)">
            <summary>
            Deserializes this TileMapDataLayer.
            </summary>
            <param name="context">
            The context that provides everything required for the deserialization process.
            </param>
        </member>
        <member name="F:Atom.Scene.Tiles.TileMapDataLayer.data">
            <summary>
            The data of this TileMapDataLayer.
            </summary>
        </member>
        <member name="F:Atom.Scene.Tiles.TileMapDataLayer.width">
            <summary>
            The width of the TileMapDataLayer in tile-space.
            </summary>
        </member>
        <member name="F:Atom.Scene.Tiles.TileMapDataLayer.height">
            <summary>
            The height of the TileMapDataLayer in tile-space.
            </summary>
        </member>
        <member name="F:Atom.Scene.Tiles.TileMapDataLayer.tileSize">
            <summary>
            The size of the tiles used in the TileMapDataLayer.
            </summary>
        </member>
        <member name="F:Atom.Scene.Tiles.TileMapDataLayer.isVisible">
            <summary>
            States whether this TileMapDataLayer is visible.
            </summary>
        </member>
        <member name="F:Atom.Scene.Tiles.TileMapDataLayer.floor">
            <summary>
            Internal storage of the <see cref="P:Atom.Scene.Tiles.TileMapDataLayer.Floor"/> property.
            </summary>
        </member>
        <member name="T:Atom.Scene.Tiles.TileMapDataLayerType">
            <summary>
            Enumerates the different default tile-map layer types.
            </summary>
        </member>
        <member name="F:Atom.Scene.Tiles.TileMapDataLayerType.Normal">
            <summary>
            A normal layer which contains graphical data.
            </summary>
        </member>
        <member name="F:Atom.Scene.Tiles.TileMapDataLayerType.Action">
            <summary>
            An action layer which contains action data, such as collision information.
            </summary>
        </member>
        <member name="T:Atom.Scene.IQuadTreeItem2">
            <summary>
            Defines the interface that Objects must implement
            that want to be able to be stored in a <see cref="T:Atom.Scene.QuadTree2"/>.
            </summary>
        </member>
        <member name="P:Atom.Scene.IQuadTreeItem2.IsVisibleToQuadTree">
            <summary>
            Gets a value indicating whether this <see cref="T:Atom.Scene.IQuadTreeItem2"/> is visible to the <see cref="T:Atom.Scene.QuadTree2"/>.
            </summary>
            <value> 
            If this property returns <see langword="true"/> it is simply ignored
            when the QuadTree2 is searching for visible objects.
            </value>
        </member>
        <member name="P:Atom.Scene.IQuadTreeItem2.QuadTreeRectangle">
            <summary>
            Gets the collision rectangle of the <see cref="T:Atom.Scene.IQuadTreeItem2"/>.
            </summary>
            <value>
            The collision rectangle that is used to insert/re-insert this IQuadTree2Item.
            Should be up-to-date at all times.
            </value>
        </member>
        <member name="P:Atom.Scene.IQuadTreeItem2.QuadTreeLeaf">
            <summary>
            Gets or sets the <see cref="T:Atom.Scene.QuadTreeNode2"/> the <see cref="T:Atom.Scene.IQuadTreeItem2"/> is attached to.
            This property is used internally. 
            </summary>
            <value>
            This property is used internally. 
            All that is required by the user is to provide a storage for the QuadTreeNode2 object.
            Don't mess around with it.
            </value>
        </member>
        <member name="P:Atom.Scene.IQuadTreeItem2.QuadTreeListNode">
            <summary>
            Gets or sets the <see cref="T:System.Collections.Generic.LinkedListNode`1"/> that identifies 
            the position of this IQuadTree2Item in the LinkedList of the <see cref="T:Atom.Scene.QuadTreeNode2"/>.
            This property is used internally. 
            </summary>
            <value>
            This property is used internally. 
            All that is required by the user is to provide a storage for the QuadTreeNode2 object.
            Don't mess around with it.
            </value>
        </member>
        <member name="T:Atom.Scene.QuadTree2">
            <summary>
            This class reprents a 'loose' 2-D Quad Tree which supports moving objects.
            </summary>
            <remarks>
            A Quad Tree is one methods to divide a plane (the 2dim space) into sub-parts:
            The tree iteself is the root node.
            This node is divided into four quads of same size - the leaves of the first division.
            Those leaves can also again each be devided into sub-leaves; 
            this happens until the set division level is reached.
            Objects are stored in 'End Leaves'. Those are the leaves which aren't subdivided.
            The Leaf-Nodes overlap eachother by a predefinded value, this makes the tree 'loose'
            <code>
            A (non loose) QuadTree which has been sub-divided twice:
            +------*------+------*------+
            |  AA  |  AB  |      |      |
            |      |      |      |      |
            *------A------*------B------*
            |  AC  |  AD  |      |      |
            |      |      |      |      |
            |------*------+------*------+
            |      |      |      |      |
            |      |      |      |      |
            *------C------*------D------*
            |      |      |      |      |
            |      |      |      |      |
            +------*------+------*------+
            </code>
            </remarks>
        </member>
        <member name="P:Atom.Scene.QuadTree2.ItemCount">
            <summary>
            Gets the number of items contained in the <see cref="T:Atom.Scene.QuadTree2"/>.
            </summary>
            <value>The number of items contained in the <see cref="T:Atom.Scene.QuadTree2"/>.</value>
        </member>
        <member name="P:Atom.Scene.QuadTree2.SubdivisionCount">
            <summary>
            Gets the number of sub-divisions the QuadTree2 has.
            </summary>
            <value>
            The number of sub-divisions. Is applied on when the tree is created using <see cref="M:Atom.Scene.QuadTree2.Create(Atom.Math.Vector2,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Int32)"/>.
            </value>
        </member>
        <member name="P:Atom.Scene.QuadTree2.Width">
            <summary>
            Gets the width of the <see cref="T:Atom.Scene.QuadTree2"/>.
            </summary>
            <value>
            The original width of the (non-loose) QuadTree2.
            </value>
        </member>
        <member name="P:Atom.Scene.QuadTree2.Height">
            <summary>
            Gets the height of the <see cref="T:Atom.Scene.QuadTree2"/>.
            </summary>
            <value>
            The original height of the (non-loose) QuadTree2.
            </value>
        </member>
        <member name="P:Atom.Scene.QuadTree2.ExtraLooseWidth">
            <summary>
            Gets the range that is added to the width of a leaf
            to make the <see cref="T:Atom.Scene.QuadTree2"/> more loose.
            </summary>
            <value>
            The width of the area that is added 
            on the left and right to make the QuadTree2 more loose.
            </value>
        </member>
        <member name="P:Atom.Scene.QuadTree2.ExtraLooseHeight">
            <summary>
            Gets the range that is added to the height of a leaf
            to make the <see cref="T:Atom.Scene.QuadTree2"/> more loose.
            </summary>
            <value>
            The height of the area that is added 
            on the top and bottom to make the QuadTree2 more loose.
            </value>
        </member>
        <member name="P:Atom.Scene.QuadTree2.UseBruteForce">
            <summary>
            Gets or sets a value indicating whether the QuadTree2 should use
            brute force methods to find items.
            </summary>
            <value>The default value is false.</value>
        </member>
        <member name="P:Atom.Scene.QuadTree2.IsInitialized">
            <summary>
            Gets a value indicating whether this QuadTree2 has been created.
            </summary>
            <value>
            The value is false until <see cref="M:Atom.Scene.QuadTree2.Create(Atom.Math.Vector2,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Int32)"/> has been called.
            </value>
        </member>
        <member name="P:Atom.Scene.QuadTree2.Area">
            <summary>
            Gets the area this QuadTree2 takes up.
            </summary>
        </member>
        <member name="P:Atom.Scene.QuadTree2.UpperLeft">
            <summary>
            Gets the <see cref="T:Atom.Scene.QuadTreeNode2"/> in the upper-left corner.
            </summary>
        </member>
        <member name="P:Atom.Scene.QuadTree2.UpperRight">
            <summary>
            Gets the <see cref="T:Atom.Scene.QuadTreeNode2"/> in the upper-right corner.
            </summary>
        </member>
        <member name="P:Atom.Scene.QuadTree2.BottomLeft">
            <summary>
            Gets the <see cref="T:Atom.Scene.QuadTreeNode2"/> in the bottom-left corner.
            </summary>
        </member>
        <member name="P:Atom.Scene.QuadTree2.BottomRight">
            <summary>
            Gets the <see cref="T:Atom.Scene.QuadTreeNode2"/> in the bottom-right corner.
            </summary>
        </member>
        <member name="M:Atom.Scene.QuadTree2.Create(Atom.Math.Vector2,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
            Creates and setups a new <see cref="T:Atom.Scene.QuadTree2"/>.
            </summary>
            <param name="offset">
            The offset to the upper-left corner at which the tree should start spanning.
            </param>
            <param name="totalWidth"> 
            The width of the field the tree should spann over.
            </param>
            <param name="totalHeight">
            The height of the field the tree should spann over. 
            </param>
            <param name="extraLooseWidth"> 
            The extra value that can me used to make the tree more loose on the x-axis.
            This value must be great or equal zero.
            </param>
            <param name="extraLooseHeight">
            The extra value that can me used to make the tree more loose on the y-axis. 
            This value must be great or equal zero.
            </param>
            <param name="subdivisionCount">
            The total number of sub divisions the <see cref="T:Atom.Scene.QuadTree2"/> should have.
            </param>
            <param name="itemCount">
            The number of items the tree has space for without needing to allocate new space. 
            </param>
        </member>
        <member name="M:Atom.Scene.QuadTree2.RebuildTree">
            <summary>
            Rebuilds this tree by re-creating all leaves and reinserting all items.
            </summary>
        </member>
        <member name="M:Atom.Scene.QuadTree2.Insert(Atom.Scene.IQuadTreeItem2)">
            <summary>
            Inserts the specified <see cref="T:Atom.Scene.IQuadTreeItem2"/> into this QuadTree2.
            </summary>
            <param name="item">
            The item to insert.
            </param>
            <returns>
            Returns <see langword="true"/> if the given item has been inserted;
            otherweise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Scene.QuadTree2.Reinsert(Atom.Scene.IQuadTreeItem2)">
            <summary>
            Inserts the specified <see cref="T:Atom.Scene.IQuadTreeItem2"/> into this QuadTree2.
            </summary>
            <param name="item">
            The item to insert.
            </param>
        </member>
        <member name="M:Atom.Scene.QuadTree2.Remove(Atom.Scene.IQuadTreeItem2)">
            <summary>
            Tries to remove the specified <see cref="T:Atom.Scene.IQuadTreeItem2"/> from this QuadTree2.
            </summary>
            <param name="item">
            The item to remove. Can be null.
            </param>
            <returns>
            Returns <see langword="true"/> if the given item has been removed;
            otherweise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Scene.QuadTree2.RemoveAll">
            <summary>
            Removes all items from this <see cref="T:Atom.Scene.QuadTree2"/>.
            </summary>
        </member>
        <member name="M:Atom.Scene.QuadTree2.FindVisible(System.Collections.Generic.List{Atom.Scene.IQuadTreeItem2},Atom.Math.Rectangle)">
            <summary>
            Finds all visible items in the specified <see cref="T:Atom.Math.Rectangle"/>.
            </summary>
            <param name="items">
            This method inserts all found items into the given list.
            </param>
            <param name="area">
            The <see cref="T:Atom.Math.Rectangle"/> representing the 'view window'.
            </param>
        </member>
        <member name="M:Atom.Scene.QuadTree2.FindVisibleBruteForce(System.Collections.Generic.List{Atom.Scene.IQuadTreeItem2},Atom.Math.Rectangle@)">
            <summary>
            Finds all visible items in the specified <see cref="T:Atom.Math.Rectangle"/>.
            </summary>
            <param name="list">
            This method inserts all found items into the given list.
            </param>
            <param name="rectangle">
            The <see cref="T:Atom.Math.Rectangle"/> representing the 'view window'.
            </param>
        </member>
        <member name="M:Atom.Scene.QuadTree2.Contains(Atom.Scene.IQuadTreeItem2)">
            <summary>
            Gets whether the <see cref="T:Atom.Scene.QuadTree2"/> contains the specified <paramref name="item"/>.
            </summary>
            <param name="item"> The item to check. Can be null. </param>
            <returns>
            Returns <see langword="true"/> if the QuadTree2 contains the specified <paramref name="item"/>;
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Scene.QuadTree2.Contains(Atom.Math.Rectangle,System.Predicate{Atom.Scene.IQuadTreeItem2})">
            <summary>
            Gets whether this <see cref="T:Atom.Scene.QuadTree2"/> contains an <see cref="T:Atom.Scene.IQuadTreeItem2"/>
            in the given <paramref name="area"/> while the given additional <paramref name="predicate"/> holds true.
            </summary>
            <exception cref="T:System.ArgumentException">
            If <paramref name="predicate"/> is null.
            </exception>
            <param name="area">
            The area to look for items in.
            </param>
            <param name="predicate">
            The additional predicate that must hold true.
            </param>
            <returns>
            Returns <see langword="true"/>  if this QuadTree2 contains an IQuadTree2Item in the given <paramref name="area"/>
            while the given <paramref name="predicate"/> still holds true;
            or otherwise  <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Scene.QuadTree2.GetEnumerator">
            <summary>
            Gets an enumerator over the all items in the <see cref="T:Atom.Scene.QuadTree2"/>.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> for the QuadTree2.
            </returns>
        </member>
        <member name="M:Atom.Scene.QuadTree2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator over the all items in the <see cref="T:Atom.Scene.QuadTree2"/>.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> for the QuadTree2.
            </returns>
        </member>
        <member name="F:Atom.Scene.QuadTree2.useBruteForce">
            <summary>
            States whether to use brute force methods to find items
            or to actually use the quad tree.
            </summary>
        </member>
        <member name="F:Atom.Scene.QuadTree2.upperLeft">
            <summary> 
            The main leaves of the <see cref="T:Atom.Scene.QuadTree2"/>.
            </summary>
        </member>
        <member name="F:Atom.Scene.QuadTree2.upperRight">
            <summary> 
            The main leaves of the <see cref="T:Atom.Scene.QuadTree2"/>.
            </summary>
        </member>
        <member name="F:Atom.Scene.QuadTree2.bottomLeft">
            <summary> 
            The main leaves of the <see cref="T:Atom.Scene.QuadTree2"/>.
            </summary>
        </member>
        <member name="F:Atom.Scene.QuadTree2.bottomRight">
            <summary> 
            The main leaves of the <see cref="T:Atom.Scene.QuadTree2"/>.
            </summary>
        </member>
        <member name="F:Atom.Scene.QuadTree2.width">
            <summary> 
            The width and height (in pixels) of the <see cref="T:Atom.Scene.QuadTree2"/>.
            </summary>
        </member>
        <member name="F:Atom.Scene.QuadTree2.height">
            <summary> 
            The width and height (in pixels) of the <see cref="T:Atom.Scene.QuadTree2"/>.
            </summary>
        </member>
        <member name="F:Atom.Scene.QuadTree2.extraLooseWidth">
            <summary> 
            The width and height (in pixels) of the <see cref="T:Atom.Scene.QuadTree2"/>.
            </summary>
        </member>
        <member name="F:Atom.Scene.QuadTree2.extraLooseHeight">
            <summary> 
            The width and height (in pixels) of the <see cref="T:Atom.Scene.QuadTree2"/>.
            </summary>
        </member>
        <member name="F:Atom.Scene.QuadTree2.subdivisionCount">
            <summary> 
            The number of sub-division the <see cref="T:Atom.Scene.QuadTree2"/> has. 
            </summary>
        </member>
        <member name="F:Atom.Scene.QuadTree2.items">
            <summary>
            The list of items the <see cref="T:Atom.Scene.QuadTree2"/> contains.
            </summary>
        </member>
        <member name="T:Atom.Scene.QuadTreeItem2">
            <summary>
            Implements a <see cref="T:Atom.Components.Component"/> that allows
            the owning <see cref="T:Atom.Components.Entity"/> beeing added to a <see cref="T:Atom.Scene.QuadTree2"/>.
            </summary>
            <remarks>
            Depends on the <see cref="T:Atom.Components.Collision.Collision2"/> and <see cref="T:Atom.Components.Transform.Transform2"/> components.
            </remarks>
        </member>
        <member name="P:Atom.Scene.QuadTreeItem2.IsVisibleToQuadTree">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Atom.Scene.IQuadTreeItem2"/> 
            is visible to the <see cref="T:Atom.Scene.QuadTree2"/>.
            </summary>
            <remarks>
            Non-visible objects are simply ignored.
            </remarks>
            <value>The default value is true.</value>
        </member>
        <member name="P:Atom.Scene.QuadTreeItem2.QuadTreeRectangle">
            <summary>
            Gets the collision rectangle of the <see cref="T:Atom.Scene.IQuadTreeItem2"/>.
            </summary>
            <value>
            The collision rectangle as defined by the <see cref="T:Atom.Components.Collision.Collision2"/>
            component of the Entity that owns this QuadTree2Item component.
            </value>
        </member>
        <member name="P:Atom.Scene.QuadTreeItem2.QuadTreeLeaf">
            <summary>
            Gets or sets the <see cref="T:Atom.Scene.QuadTreeNode2"/> the <see cref="T:Atom.Scene.IQuadTreeItem2"/> is attached to.
            This property is used internally. 
            </summary>
            <value>
            This property is used internally. 
            All that is required by the user is to provide a storage for the QuadTreeNode2 object.
            Don't mess around with it.
            </value>
        </member>
        <member name="P:Atom.Scene.QuadTreeItem2.QuadTreeListNode">
            <summary>
            Gets or sets the <see cref="T:System.Collections.Generic.LinkedListNode`1"/> that identifies 
            the position of this IQuadTree2Item in the LinkedList of the <see cref="T:Atom.Scene.QuadTreeNode2"/>.
            This property is used internally. 
            </summary>
            <value>
            This property is used internally. 
            All that is required by the user is to provide a storage for the QuadTreeNode2 object.
            Don't mess around with it.
            </value>
        </member>
        <member name="M:Atom.Scene.QuadTreeItem2.InitializeBindings">
            <summary>
            Called when an IComponent has been removed or added to the <see cref="T:Atom.Components.IEntity"/> that owns this IComponent.
            </summary>
        </member>
        <member name="M:Atom.Scene.QuadTreeItem2.OnCollisionChanged(Atom.Components.Collision.ICollision2)">
            <summary>
            Gets called when the collision of this <see cref="T:Atom.Scene.QuadTreeItem2"/> has changed.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
        </member>
        <member name="F:Atom.Scene.QuadTreeItem2.collision">
            <summary>
            Provides the collision information
            about the entity.
            </summary>
        </member>
        <member name="F:Atom.Scene.QuadTreeItem2._isVisibleToQuadTree">
            <summary>
            Represents the storage field of the <see cref="P:Atom.Scene.QuadTreeItem2.IsVisibleToQuadTree"/> property.
            </summary>
        </member>
        <member name="T:Atom.Scene.QuadTreeNode2">
            <summary>
            Represents a node in a <see cref="T:Atom.Scene.QuadTree2"/>.
            This class can't be inherited.
            </summary>
        </member>
        <member name="P:Atom.Scene.QuadTreeNode2.Area">
            <summary>
            Gets the <see cref="T:Atom.Math.Rectangle"/> descriping the area this <see cref="T:Atom.Scene.QuadTreeNode2"/> covers.
            </summary>
        </member>
        <member name="P:Atom.Scene.QuadTreeNode2.LooseArea">
            <summary>
            Gets the <see cref="T:Atom.Math.Rectangle"/> descriping the 'loose' area this <see cref="T:Atom.Scene.QuadTreeNode2"/> covers.
            </summary>
        </member>
        <member name="P:Atom.Scene.QuadTreeNode2.Tree">
            <summary>
            Gets the <see cref="T:Atom.Scene.QuadTree2"/> that owns the <see cref="T:Atom.Scene.QuadTreeNode2"/>.
            </summary>
            <value>
            The <see cref="T:Atom.Scene.QuadTree2"/> that owns this QuadTreeNode2.
            </value>
        </member>
        <member name="P:Atom.Scene.QuadTreeNode2.IsLeaf">
            <summary>
            Gets a value indicating whether the <see cref="T:Atom.Scene.QuadTreeNode2"/> is a leaf.
            </summary>
            <value>
            Returns <see langword="true"/> if this QuadTreeNode2 is a leaf and as such may contain items;
            or otherwise <see langword="false"/> if this QuadTreeNode2 is not an end-leaf and as such contains sub leaves.
            </value>
        </member>
        <member name="P:Atom.Scene.QuadTreeNode2.Corner">
            <summary>
            Gets the corner relative to its parent of the <see cref="T:Atom.Scene.QuadTreeNode2"/>.
            </summary>
            <value>
            A <see cref="T:Atom.Math.QuadCorner"/> value that represents the position of
            this QuadTreeNode2 relative to its parent QuadTreeNode2.
            </value>
        </member>
        <member name="P:Atom.Scene.QuadTreeNode2.Corners">
            <summary>
            Gets a string that contains the corners reversed back 
            from the <see cref="T:Atom.Scene.QuadTreeNode2"/> to the <see cref="T:Atom.Scene.QuadTree2"/>. 
            </summary>
            <value>
            The string is of the format "UpperLeft.UpperRight.BottumLeft".
            </value>
        </member>
        <member name="P:Atom.Scene.QuadTreeNode2.UpperLeft">
            <summary>
            Gets the <see cref="T:Atom.Scene.QuadTreeNode2"/> in the upper-left corner.
            </summary>
        </member>
        <member name="P:Atom.Scene.QuadTreeNode2.UpperRight">
            <summary>
            Gets the <see cref="T:Atom.Scene.QuadTreeNode2"/> in the upper-right corner.
            </summary>
        </member>
        <member name="P:Atom.Scene.QuadTreeNode2.BottomLeft">
            <summary>
            Gets the <see cref="T:Atom.Scene.QuadTreeNode2"/> in the bottom-left corner.
            </summary>
        </member>
        <member name="P:Atom.Scene.QuadTreeNode2.BottomRight">
            <summary>
            Gets the <see cref="T:Atom.Scene.QuadTreeNode2"/> in the bottom-right corner.
            </summary>
        </member>
        <member name="M:Atom.Scene.QuadTreeNode2.#ctor(Atom.Scene.QuadTree2)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Scene.QuadTreeNode2"/> class.
            </summary>
            <param name="tree">
            The tree that owns the <see cref="T:Atom.Scene.QuadTreeNode2"/>.
            </param>
        </member>
        <member name="M:Atom.Scene.QuadTreeNode2.Create(System.Single,System.Single,System.Single,System.Single,System.Int32,Atom.Math.QuadCorner,Atom.Scene.QuadTreeNode2)">
            <summary> 
            Setups this <see cref="T:Atom.Scene.QuadTreeNode2"/> and also sub-divides it if needed.
            </summary>
            <param name="x">
            The position on the x-axis of the leaf.
            </param>
            <param name="y">
            The position on the y-axis of the leaf.
            </param>
            <param name="width"> 
            The width of the leaf.
            </param>
            <param name="height">
            The height of the leaf.
            </param>
            <param name="subdivisionsLeft">
            The number of sub divisions left.
            </param>
            <param name="corner">
            The corner this leaf is.
            </param>
            <param name="parent">
            The parent leaf of the <see cref="T:Atom.Scene.QuadTreeNode2"/>.
            </param>
        </member>
        <member name="M:Atom.Scene.QuadTreeNode2.Insert(Atom.Scene.IQuadTreeItem2)">
            <summary>
            Tries to insert the specified <see cref="T:Atom.Scene.IQuadTreeItem2"/>
            into this QuadTreeNode2.
            </summary>
            <param name="item"> 
            The <see cref="T:Atom.Scene.IQuadTreeItem2"/> to add.
            </param>
            <returns>
            Returns <see langword="true"/> if the specified <see cref="T:Atom.Scene.IQuadTreeItem2"/> has been inserted;
            otherwise <see langword="false"/>. 
            </returns>
        </member>
        <member name="M:Atom.Scene.QuadTreeNode2.RemoveAll">
            <summary>
            Removes all items from the <see cref="T:Atom.Scene.QuadTreeNode2"/>.
            </summary>
        </member>
        <member name="M:Atom.Scene.QuadTreeNode2.CheckItem(Atom.Scene.IQuadTreeItem2)">
            <summary>
            Tests whether this item (if it's part of this leaf) is still inside the bounderies.
            Reinserts the item if needed.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="item"/> is null.
            </exception>
            <param name="item"> The item to check. </param>
        </member>
        <member name="M:Atom.Scene.QuadTreeNode2.RemoveFromScene(Atom.Scene.IQuadTreeItem2)">
            <summary>
            Removes the owner of the given IQuadTree2Item from its current IScene.
            </summary>
            <param name="item">
            The item to remove.
            </param>
        </member>
        <member name="M:Atom.Scene.QuadTreeNode2.FindVisible(System.Collections.Generic.List{Atom.Scene.IQuadTreeItem2},Atom.Math.Rectangle@)">
            <summary>
            Finds all visible items in the specified <see cref="T:Atom.Math.Rectangle"/>.
            </summary>
            <param name="items">
            This method inserts all found items in this list.
            </param>
            <param name="area">
            The rectangle descriping the 'view window'. All items within the rectangle are inserted.
            </param>
        </member>
        <member name="M:Atom.Scene.QuadTreeNode2.ContainsItem(Atom.Math.Rectangle@,System.Predicate{Atom.Scene.IQuadTreeItem2})">
            <summary>
            Gets whether this <see cref="T:Atom.Scene.QuadTreeNode2"/> contains an <see cref="T:Atom.Scene.IQuadTreeItem2"/>
            in the given <paramref name="area"/> while the given additional <paramref name="predicate"/> holds true.
            </summary>
            <param name="area">
            The area to look for items in.
            </param>
            <param name="predicate">
            The additional predicate that must hold true.
            </param>
            <returns>
            Returns <see langword="true"/> if this QuadTree2 contains an IQuadTree2Item in the given <paramref name="area"/>
            while the given <paramref name="predicate"/> still holds true;
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="F:Atom.Scene.QuadTreeNode2.area">
            <summary>
            The <see cref="T:Atom.Math.Rectangle"/> descriping the area this <see cref="T:Atom.Scene.QuadTreeNode2"/> covers.
            </summary>
        </member>
        <member name="F:Atom.Scene.QuadTreeNode2.looseArea">
            <summary>
            The <see cref="T:Atom.Math.Rectangle"/> descriping the 'loose' area this <see cref="T:Atom.Scene.QuadTreeNode2"/> covers.
            </summary>
        </member>
        <member name="F:Atom.Scene.QuadTreeNode2.corner">
            <summary>
            The corner relative to its parent of this leaf.
            </summary>
        </member>
        <member name="F:Atom.Scene.QuadTreeNode2.parent">
            <summary> 
            The leaf that owns the <see cref="T:Atom.Scene.QuadTreeNode2"/>.
            Null if it's the first leaf in the hirarchy. 
            </summary>
        </member>
        <member name="F:Atom.Scene.QuadTreeNode2.upperLeft">
            <summary> 
            The sub-leaves of the <see cref="T:Atom.Scene.QuadTreeNode2"/>.
            Null if it's the last leaf in the hirarchy; aka an end leaf.
            </summary>
        </member>
        <member name="F:Atom.Scene.QuadTreeNode2.upperRight">
            <summary> 
            The sub-leaves of the <see cref="T:Atom.Scene.QuadTreeNode2"/>.
            Null if it's the last leaf in the hirarchy; aka an end leaf.
            </summary>
        </member>
        <member name="F:Atom.Scene.QuadTreeNode2.bottomLeft">
            <summary> 
            The sub-leaves of the <see cref="T:Atom.Scene.QuadTreeNode2"/>.
            Null if it's the last leaf in the hirarchy; aka an end leaf.
            </summary>
        </member>
        <member name="F:Atom.Scene.QuadTreeNode2.bottomRight">
            <summary> 
            The sub-leaves of the <see cref="T:Atom.Scene.QuadTreeNode2"/>.
            Null if it's the last leaf in the hirarchy; aka an end leaf.
            </summary>
        </member>
        <member name="F:Atom.Scene.QuadTreeNode2.tree">
            <summary>
            The <see cref="T:Atom.Scene.QuadTree2"/> that owns the <see cref="T:Atom.Scene.QuadTreeNode2"/>.
            </summary>
        </member>
        <member name="F:Atom.Scene.QuadTreeNode2.items">
            <summary> 
            The items that are stored in this <see cref="T:Atom.Scene.QuadTreeNode2"/>.
            Only end leaves can contain items -> null if no end leaf.
            </summary>
        </member>
        <member name="T:Atom.GameStateManager">
            <summary>
            Implements a mechanism that allows the management of the <see cref="T:Atom.IGameState"/>s of a game.
            </summary>
        </member>
        <member name="P:Atom.GameStateManager.Current">
            <summary>
            Gets the current IGameState.
            </summary>
            <value>
            The <see cref="T:Atom.IGameState"/> that is at the top of the IGameState stack;
            or null.
            </value>
        </member>
        <member name="M:Atom.GameStateManager.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.GameStateManager"/> class.
            </summary>
            <param name="initialStateCapacity"> 
            The initial number of states the <see cref="T:Atom.GameStateManager"/> can contain. 
            </param>
        </member>
        <member name="M:Atom.GameStateManager.Add(Atom.IGameState)">
            <summary>
            Adds the specified <see cref="T:Atom.IGameState"/> to the list of aviable states of this <see cref="T:Atom.GameStateManager"/>.
            </summary>
            <param name="state"> The state to add. </param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="state"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
            If there already exists a state with the same name as the specified.
            </exception>
        </member>
        <member name="M:Atom.GameStateManager.Remove(System.Type)">
            <summary>
            Removes the <see cref="T:Atom.IGameState"/> that has the given <paramref name="type"/>
            from the list of aviable states of the <see cref="T:Atom.GameStateManager"/>.
            </summary>
            <param name="type">
            The type of the state to remove.
            </param>
            <returns>
            true if the state has been removed;
            -or- otherwise false.
            </returns>
        </member>
        <member name="M:Atom.GameStateManager.Replace(System.Type)">
            <summary>
            Replaces the current state with the one with the specified <paramref name="type"/>.
            </summary>
            <param name="type">
            The type of the state.
            </param>
        </member>
        <member name="M:Atom.GameStateManager.Push(System.Type)">
            <summary>
            Pushes the state with the specified <paramref name="type"/> ontop of the stack.
            </summary>
            <param name="type">
            The type of the state.
            </param>
        </member>
        <member name="M:Atom.GameStateManager.Pop">
            <summary>
            Pops the current state from the stack and changes to the one before.
            </summary>
            <returns>
            Returns <see langword="true"/> if a state has been poped from the stack;
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.GameStateManager.Get(System.Type)">
            <summary>
            Tries to get the <see cref="T:Atom.IGameState"/> with the specified <paramref name="type"/>.
            </summary>
            <param name="type">
            The type of the <see cref="T:Atom.IGameState"/> to get.
            </param>
            <returns>
            The requested IGameState.
            </returns>
        </member>
        <member name="M:Atom.GameStateManager.Contains(System.Type)">
            <summary>
            Gets a value indicating whether this GameStateManager owns an <see cref="T:Atom.IGameState"/>
            of the given <paramref name="type"/>.
            </summary>
            <param name="type">
            The type of the state to test for.
            </param>
            <returns>
            True if this GameStateManager contains an <see cref="T:Atom.IGameState"/> of the given <paramref name="type"/>;
            otherwise false.
            </returns>
        </member>
        <member name="M:Atom.GameStateManager.Clear">
            <summary>
            Pops all <see cref="T:Atom.IGameState"/> and then clears the list
            of available states.
            </summary>
        </member>
        <member name="M:Atom.GameStateManager.GetEnumerator">
            <summary>
            Returns an enumerator that iterates over the
            <see cref="T:Atom.IGameState"/>s available to this <see cref="T:Atom.GameStateManager"/>.
            </summary>
            <returns>
            A new enumerator.
            </returns>
        </member>
        <member name="M:Atom.GameStateManager.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates over the
            <see cref="T:Atom.IGameState"/>s available to this <see cref="T:Atom.GameStateManager"/>.
            </summary>
            <returns>
            A new enumerator.
            </returns>
        </member>
        <member name="F:Atom.GameStateManager.stateStack">
            <summary>
            The current stack of states. The uppermost is the current.
            </summary>
        </member>
        <member name="F:Atom.GameStateManager.availableStates">
            <summary>
            All aviable states sorted by name.
            </summary>
        </member>
        <member name="T:Atom.GameStateManagerExtensions">
            <summary>
            Defines extension methods for the <see cref="T:Atom.IGameStateManager"/> interface.
            </summary>
        </member>
        <member name="M:Atom.GameStateManagerExtensions.PopAll(Atom.IGameStateManager)">
            <summary>
            Pops off all of the <see cref="T:Atom.IGameState"/>s of this <see cref="T:Atom.IGameStateManager"/>.
            </summary>
            <param name="manager">
            The IGameStateManager from which all <see cref="T:Atom.IGameState"/>s
            should be popped.
            </param>
        </member>
        <member name="M:Atom.GameStateManagerExtensions.Push``1(Atom.IGameStateManager)">
            <summary>
            Pushes the <see cref="T:Atom.IGameState"/> with the specified <typeparamref name="T"/>ype ontop of the stack.
            </summary>
            <typeparam name="T">
            The type of the IGameState to push.
            </typeparam>
            <param name="manager">
            The IGameStateManager onto which a <see cref="T:Atom.IGameState"/>
            should be pushed.
            </param>
        </member>
        <member name="M:Atom.GameStateManagerExtensions.Replace``1(Atom.IGameStateManager)">
            <summary>
            Replaces the current <see cref="T:Atom.IGameState"/> with the specified <typeparamref name="T"/>ype 
            from this IGameStateManager.
            </summary>
            <typeparam name="T">
            The type of the IGameState to remove.
            </typeparam>
            <param name="manager">
            The IGameStateManager onto which a <see cref="T:Atom.IGameState"/>
            should be pushed.
            </param>
        </member>
        <member name="M:Atom.GameStateManagerExtensions.Remove``1(Atom.IGameStateManager)">
            <summary>
            Attempts to remove the <see cref="T:Atom.IGameState"/> with the specified <typeparamref name="T"/>ype 
            from this IGameStateManager.
            </summary>
            <typeparam name="T">
            The type of the IGameState to remove.
            </typeparam>
            <param name="manager">
            The IGameStateManager onto which a <see cref="T:Atom.IGameState"/>
            should be pushed.
            </param>
            <returns>
            True if the state was removed;
            -or- otherwise false.
            </returns>
        </member>
        <member name="T:Atom.IGameState">
            <summary>
            Defines the common properties and methods of a GameState.
            </summary>
            <remarks> 
            Examples for game-states would be:
            "Title Screen", "Option Screen",
            "Mode Select Screen", "Ingame", ...
            </remarks>
        </member>
        <member name="M:Atom.IGameState.Draw(Atom.IDrawContext)">
            <summary>
            Draws this <see cref="T:Atom.IGameState"/>.
            </summary>
            <param name="drawContext">
            The current <see cref="T:Atom.IDrawContext"/>.
            </param>
        </member>
        <member name="M:Atom.IGameState.Update(Atom.IUpdateContext)">
            <summary>
            Updates this <see cref="T:Atom.IGameState"/>.
            </summary>
            <param name="updateContext">
            The current <see cref="T:Atom.IUpdateContext"/>.
            </param>
        </member>
        <member name="M:Atom.IGameState.ChangedFrom(Atom.IGameState)">
            <summary>
            Called when changing from the <paramref name="oldState"/> to this <see cref="T:Atom.IGameState"/>.
            </summary>
            <param name="oldState">
            The state before. Null means no state.
            </param>
        </member>
        <member name="M:Atom.IGameState.ChangedTo(Atom.IGameState)">
            <summary>
            Called when changing from this <see cref="T:Atom.IGameState"/> to the <paramref name="newState"/>.
            </summary>
            <param name="newState">
            The new state.
            </param>
        </member>
        <member name="M:Atom.IGameState.Load">
            <summary>
            Loads this <see cref="T:Atom.IGameState"/>, if required.
            </summary>
        </member>
        <member name="M:Atom.IGameState.Unload">
            <summary>
            Unloads this <see cref="T:Atom.IGameState"/>;
            while still being able to reload it.
            </summary>
        </member>
        <member name="T:Atom.IGameStateManager">
            <summary> 
            Provides a mechanism that allows the management of the <see cref="T:Atom.IGameState"/>s of a game.
            </summary>
        </member>
        <member name="P:Atom.IGameStateManager.Current">
            <summary>
            Gets the current IGameState.
            </summary>
            <value>
            The <see cref="T:Atom.IGameState"/> that is at the top of the IGameState stack;
            or null.
            </value>
        </member>
        <member name="M:Atom.IGameStateManager.Add(Atom.IGameState)">
            <summary>
            Adds the specified <see cref="T:Atom.IGameState"/> to the list of aviable states of this <see cref="T:Atom.GameStateManager"/>.
            </summary>
            <param name="state"> The state to add. </param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="state"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
            If there already exists a state with the same name as the specified.
            </exception>
        </member>
        <member name="M:Atom.IGameStateManager.Remove(System.Type)">
            <summary>
            Removes the <see cref="T:Atom.IGameState"/> that has the given <paramref name="type"/>
            from the list of aviable states of the <see cref="T:Atom.GameStateManager"/>.
            </summary>
            <param name="type">
            The type of the state to remove.
            </param>
            <returns>
            true if the state has been removed;
            -or- otherwise false.
            </returns>
        </member>
        <member name="M:Atom.IGameStateManager.Contains(System.Type)">
            <summary>
            Gets a value indicating whether this GameStateManager owns an <see cref="T:Atom.IGameState"/>
            of the given <paramref name="type"/>.
            </summary>
            <param name="type">
            The type of the state to test for.
            </param>
            <returns>
            True if this GameStateManager contains an <see cref="T:Atom.IGameState"/> of the given <paramref name="type"/>;
            otherwise false.
            </returns>
        </member>
        <member name="M:Atom.IGameStateManager.Get(System.Type)">
            <summary>
            Tries to get the <see cref="T:Atom.IGameState"/> with the specified <paramref name="type"/>.
            </summary>
            <param name="type">
            The type of the <see cref="T:Atom.IGameState"/> to get.
            </param>
            <returns>
            The requested IGameState.
            </returns>
        </member>
        <member name="M:Atom.IGameStateManager.Pop">
            <summary>
            Pops the current <see cref="T:Atom.IGameState"/> from the stack and changes to the one before.
            </summary>
            <returns>
            Returns <see langword="true"/> if a state has been poped from the stack;
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.IGameStateManager.Push(System.Type)">
            <summary>
            Pushes the <see cref="T:Atom.IGameState"/> with the specified <paramref name="type"/> ontop of the stack.
            </summary>
            <param name="type">
            The type of the state.
            </param>
        </member>
        <member name="M:Atom.IGameStateManager.Replace(System.Type)">
            <summary>
            Replaces the current <see cref="T:Atom.IGameState"/> with the one with the specified <paramref name="type"/>.
            </summary>
            <param name="type">
            The type of the state.
            </param>
        </member>
        <member name="T:Atom.Story.Design.TimeTickConverter">
            <summary>
            Provides a unified way of converting <see cref="T:Atom.Story.TimeTick"/> values to other types, 
            as well as for accessing standard values and subproperties.
            This class can't be inherited.
            </summary>
        </member>
        <member name="M:Atom.Story.Design.TimeTickConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Story.Design.TimeTickConverter"/> class.
            </summary>
        </member>
        <member name="M:Atom.Story.Design.TimeTickConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information. 
            </summary>
            <param name="context">The format context.</param>
            <param name="culture">The current culture.</param>
            <param name="value">The object to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Atom.Story.Design.TimeTickConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">The format context.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <param name="value">The object to convert.</param>
            <param name="destinationType">The destination type.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Atom.Story.Design.TimeTickConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            Creates an instance of the type that this TimeTickConverter is associated with, 
            using the specified context, given a set of property values for the object. 
            </summary>
            <param name="context">The format context.</param>
            <param name="propertyValues">The new property values.</param>
            <returns>An object representing propertyValues, or null if the object cannot be created.</returns>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="propertyValues"/> is null.
            </exception>
        </member>
        <member name="T:Atom.Story.Frame">
            <summary>
            Represents a single quantitized moment on a <see cref="T:Atom.Story.Timeline"/>.
            </summary>
            <remarks>
            It can contain multiple <see cref="T:Atom.Story.Incident"/>s that appear to take place
            on the same moment of tick time. The order of the incidents is not defined.
            </remarks>
        </member>
        <member name="P:Atom.Story.Frame.RelativeTick">
            <summary>
            Gets the TimeTick relative to the previous frame.
            </summary>
        </member>
        <member name="P:Atom.Story.Frame.ActualTick">
            <summary>
            Gets the TimeTick relative to the start of the timeline.
            </summary>
        </member>
        <member name="P:Atom.Story.Frame.Incidents">
            <summary>
            Gets the <see cref="T:Atom.Story.Incident"/> that occur on this Frame.
            </summary>
        </member>
        <member name="M:Atom.Story.Frame.#ctor(Atom.Story.TimeTick,Atom.Story.TimeTick)">
            <summary>
            Initializes a new instance of the Frame class.
            </summary>
            <param name="relativeTick">
            The TimeTick relative to the start of the parent Timeline.
            </param>
            <param name="startOffset">
            The offset this Timeline starts at, relative to the master <see cref="T:Atom.Story.Storyboard"/>.
            </param>
        </member>
        <member name="M:Atom.Story.Frame.Insert(Atom.Story.Incident)">
            <summary>
            Adds the given Incident to this Frame.
            </summary>
            <param name="incident">
            The Incident that should occur during this Frame.
            </param>
        </member>
        <member name="M:Atom.Story.Frame.Do">
            <summary>
            Executes all incidents that occur during this Frame.
            </summary>
        </member>
        <member name="M:Atom.Story.Frame.Undo">
            <summary>
            Reverses all incidents that occured during this Frame.
            </summary>
        </member>
        <member name="T:Atom.Story.Incident">
            <summary>
            Represents a single 'event' that is placed on a Timeline.
            </summary>
        </member>
        <member name="P:Atom.Story.Incident.RelativeTick">
            <summary>
            Gets or sets the <see cref="T:Atom.Story.TimeTick"/> this Incident occurs on.
            </summary>
        </member>
        <member name="P:Atom.Story.Incident.Action">
            <summary>
            Gets or sets the action that is executed when this Incident occurs.
            </summary>
        </member>
        <member name="M:Atom.Story.Incident.Do">
            <summary>
            Executes this Incident.
            </summary>
        </member>
        <member name="M:Atom.Story.Incident.Undo">
            <summary>
            Reverses the actions of this Incident.
            </summary>
        </member>
        <member name="M:Atom.Story.Incident.IsBefore(Atom.Story.TimeTick)">
            <summary>
            Gets a value indicating whether this Incident lies before the given TimeTick.
            </summary>
            <param name="tick">
            The TimeTick to compare to.
            </param>
            <returns>
            True if it lies before the given TimeTick; -or- otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Story.Incident.IsWithin(Atom.Story.TimeTick,Atom.Story.TimeTick)">
            <summary>
            Gets a value indicating whether this Incident lies within the given TimeTick range.
            </summary>
            <param name="tick">
            The TimeTick to compare to.
            </param>
            <param name="tolerance">
            The allowed tolerance.
            </param>
            <returns>
            True if it lies within the given TimeTick range; -or- otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Story.Incident.IsAfter(Atom.Story.TimeTick)">
            <summary>
            Gets a value indicating whether this Incident lies after the given TimeTick.
            </summary>
            <param name="tick">
            The TimeTick to compare to.
            </param>
            <returns>
            True if it lies after the given TimeTick; -or- otherwise false.
            </returns>
        </member>
        <member name="F:Atom.Story.Incident.state">
            <summary>
            States whether this Incident was executed yet.
            </summary>
        </member>
        <member name="T:Atom.Story.Storyboard">
            <summary>
            Combines multiple independent Timelines to lie on a single master timeline.
            </summary>
            <remarks>
            
                             +--------------->
                    +--------|----->
                +---|--->    |   +--->
            ____|___|________|___|___________
            
            
            where ______ is the time Storyboard master timeline.
            and +------> individual timelines, that are placed on the master timeline
            using their starting time.
            </remarks>
        </member>
        <member name="P:Atom.Story.Storyboard.IsActive">
            <summary>
            Gets or sets a value indicating whether this Storyboard is currently active.
            </summary>
            <value>
            The default value is true.
            </value>
        </member>
        <member name="P:Atom.Story.Storyboard.CurrentTick">
            <summary>
            Gets or sets the current TimeTick that is displayed on the Storyboard.
            </summary>
        </member>
        <member name="P:Atom.Story.Storyboard.TimelineCount">
            <summary>
            Gets the number of Timelines this Storyboard contains.
            </summary>
        </member>
        <member name="P:Atom.Story.Storyboard.Timelines">
            <summary>
            Gets the Timelines that this Storyboard contains.
            </summary>
        </member>
        <member name="M:Atom.Story.Storyboard.AddTimeline(Atom.Story.Timeline)">
            <summary>
            Adds the specified Timeline to this Storyboard.
            </summary>
            <remarks>
            One timeline should be added to only one Storyboard
            at a time or unexpected results might occour.
            </remarks>
            <param name="timeline">
            The Timeline to add to this Storyboard.
            </param>
        </member>
        <member name="M:Atom.Story.Storyboard.Update(Atom.IUpdateContext)">
            <summary>
            Updates this Storyboard.
            </summary>
            <param name="updateContext">
            The current IUpdateContext.
            </param>
        </member>
        <member name="M:Atom.Story.Storyboard.GetTimelineAt(System.Int32)">
            <summary>
            Gets the timeline at the specified zero-based index.
            </summary>
            <param name="index">
            The zero-based index of the Timeline to get.
            </param>
            <returns>
            The requested Timeline.
            </returns>
        </member>
        <member name="F:Atom.Story.Storyboard.timer">
            <summary>
            The timer that controls the position of time within this Storyboard.
            </summary>
        </member>
        <member name="F:Atom.Story.Storyboard.timelines">
            <summary>
            Stores the timelines (and their associated timeline walkers) pf this Storyboard.
            </summary>
        </member>
        <member name="F:Atom.Story.Storyboard.isActive">
            <summary>
            Represents the storage field of the IsActive property.
            </summary>
        </member>
        <member name="T:Atom.Story.TickTimer">
            <summary>
            Measures the flow of concrete tick time. 
            </summary>
        </member>
        <member name="E:Atom.Story.TickTimer.Ticked">
            <summary>
            Raised when the <see cref="P:Atom.Story.TickTimer.Current"/> TimeTick of this TickTimer has changed.
            </summary>
        </member>
        <member name="P:Atom.Story.TickTimer.Current">
            <summary>
            Gets or sets the current <see cref="T:Atom.Story.TimeTick"/> that has been recorded by this TickTimer.
            </summary>
        </member>
        <member name="P:Atom.Story.TickTimer.Factor">
            <summary>
            Gets or sets a value indicating how real time flow influences the progress of tick time.
            </summary>
        </member>
        <member name="M:Atom.Story.TickTimer.Update(Atom.IUpdateContext)">
            <summary>
            Updates this TickTimer.
            </summary>
            <param name="updateContext">
            The current IUpdateContext.
            </param>
        </member>
        <member name="M:Atom.Story.TickTimer.UpdateOnTick">
            <summary>
            Called when enough real time has flown for atleast one time tick.
            </summary>
        </member>
        <member name="M:Atom.Story.TickTimer.OnTick">
            <summary>
            Called when a TimeTick has occurred.
            </summary>
        </member>
        <member name="F:Atom.Story.TickTimer.timeUntilNextTick">
            <summary>
            The time (in seconds) until the next TimeTick occurs.
            </summary>
        </member>
        <member name="F:Atom.Story.TickTimer.factor">
            <summary>
            Represents the storage field of the Factor property.
            </summary>
        </member>
        <member name="F:Atom.Story.TickTimer.current">
            <summary>
            Stores the current TimeTick.
            </summary>
        </member>
        <member name="T:Atom.Story.Timeline">
            <summary>
            Represents an ordered series of <see cref="T:Atom.Story.Incident"/>, 
            which are placed on a quantizied time scale.
            </summary>
            <seealso cref="T:Atom.Story.TimeTick"/>
        </member>
        <member name="P:Atom.Story.Timeline.Name">
            <summary>
            Gets or sets the name that (uniquely) identifies this Timeline.
            </summary>
            <remarks>
            The names of Timelines "must" only be unique within the same Storyboard.
            </remarks>
        </member>
        <member name="P:Atom.Story.Timeline.IsActive">
            <summary>
            Gets or sets a value indicating whether this Timeline is active.
            </summary>
            <value>
            The default value is true.
            </value>
        </member>
        <member name="P:Atom.Story.Timeline.StartOffset">
            <summary>
            Gets or sets the offset this Timeline starts at,
            relative to the master <see cref="T:Atom.Story.Storyboard"/>.
            </summary>
        </member>
        <member name="P:Atom.Story.Timeline.IncidentCount">
            <summary>
            Gets the total number of incidents this Timeline contains.
            </summary>
        </member>
        <member name="P:Atom.Story.Timeline.FrameCount">
            <summary>
            Gets the number of <see cref="T:Atom.Story.Frame"/>s this Timeline is split in.
            </summary>
        </member>
        <member name="P:Atom.Story.Timeline.Frames">
            <summary>
            Gets the Frames of this Timeline.
            </summary>
        </member>
        <member name="P:Atom.Story.Timeline.Incidents">
            <summary>
            Gets the incidents this Timeline contains.
            </summary>
        </member>
        <member name="P:Atom.Story.Timeline.LastActualTick">
            <summary>
            Gets the TimeTick at which this Timeline ends.
            </summary>
        </member>
        <member name="M:Atom.Story.Timeline.Rebuild">
            <summary>
            Rebuilds the internal structure of this Timeline;
            recreating all Frames.
            </summary>
        </member>
        <member name="M:Atom.Story.Timeline.Insert(Atom.Story.Incident)">
            <summary>
            Inserts the specified Incident into this Timeline.
            </summary>
            <param name="incident">
            The incident to insert.
            </param>
        </member>
        <member name="M:Atom.Story.Timeline.Insert(Atom.Story.Frame)">
            <summary>
            Inserts the specified Frame into this Timeline.
            </summary>
            <param name="frame">
            The Frame to insert.
            </param>
        </member>
        <member name="M:Atom.Story.Timeline.GetFrameAt(System.Int32)">
            <summary>
            Gets the Frame at the specified index.
            </summary>
            <param name="index">
            The zero-based index of the Frame to get.
            </param>
            <returns>
            The requested Frame.
            </returns>
        </member>
        <member name="M:Atom.Story.Timeline.GetIncident(System.Int32,System.Int32)">
            <summary>
            Gets the Incident in the Frame at the specified frameIndex;
            at the specified incidentIndex.
            </summary>
            <param name="frameIndex">
            The zero-based index of the Frame that contains the Incident.
            </param>
            <param name="incidentIndex">
            The zero-based index into the Frame of the Incident to get.
            </param>
            <returns>
            The requested Incident.
            </returns>
        </member>
        <member name="M:Atom.Story.Timeline.FindRelativeFrame(Atom.Story.TimeTick)">
            <summary>
            Attempts to find the Frame at the specified relative TimeTick.
            </summary>
            <param name="tick">
            The relative time tick of the Frame to get.
            </param>
            <returns>
            The requested Frame; -or- null.
            </returns>
        </member>
        <member name="F:Atom.Story.Timeline.startOffset">
            <summary>
            Stores the offset at which this timeline begins, relative
            to its master timeline.
            </summary>
        </member>
        <member name="F:Atom.Story.Timeline.frames">
            <summary>
            The frames into which this Timeline has split.
            </summary>
        </member>
        <member name="F:Atom.Story.Timeline.isActive">
            <summary>
            Represents the storage field of the IsActive property.
            </summary>
        </member>
        <member name="T:Atom.Story.TimelineWalker">
            <summary>
            Implements a mechanism that walks on a Timeline based on the current TickTime.
            </summary>
        </member>
        <member name="E:Atom.Story.TimelineWalker.Ticked">
            <summary>
            Raised when the TickTimer has progressed by one TimeTick.
            </summary>
        </member>
        <member name="E:Atom.Story.TimelineWalker.FrameExecuted">
            <summary>
            Raised when a Frame has been executed.
            </summary>
        </member>
        <member name="P:Atom.Story.TimelineWalker.CurrentTick">
            <summary>
            Gets the current absolute TickTime.
            </summary>
        </member>
        <member name="P:Atom.Story.TimelineWalker.WalkSpeed">
            <summary>
            Gets or sets the speed at which the timer progresses this TimelineWalker.
            </summary>
        </member>
        <member name="P:Atom.Story.TimelineWalker.Timeline">
            <summary>
            Gets the Timeline this TimelineWalker walks on.
            </summary>
        </member>
        <member name="M:Atom.Story.TimelineWalker.#ctor(Atom.Story.Timeline,Atom.Story.TickTimer)">
            <summary>
            Initializes a new instance of the TimelineWalker class.
            </summary>
            <param name="timeline">
            The Timeline the new TimelineWalker walks on.
            </param>
            <param name="timer">
            The timer that is responsible for progressing TickTime.
            </param>
        </member>
        <member name="M:Atom.Story.TimelineWalker.Rebuild">
            <summary>
            Rebuilds the internal structure of this TimelineWalker
            based on the currently set Timeline and the state of the TickTimer.
            </summary>
        </member>
        <member name="M:Atom.Story.TimelineWalker.OnTicked(System.Object,Atom.Story.TimeTick)">
            <summary>
            Called when the TickTimer has progressed by one TimeTick.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
            <param name="tick">
            The current TimeTick.
            </param>
        </member>
        <member name="M:Atom.Story.TimelineWalker.Dispose">
            <summary>
            Disposes this TimelineWalker; unregistering it form the TickTimer.
            </summary>
        </member>
        <member name="M:Atom.Story.TimelineWalker.MoveFrame">
            <summary>
            Moves this TimelineWalker onward by one Frame.
            </summary>
        </member>
        <member name="M:Atom.Story.TimelineWalker.OnNextFrame">
            <summary>
            Called when the next Frame has been reached.
            </summary>
        </member>
        <member name="M:Atom.Story.TimelineWalker.OnEnded">
            <summary>
            Called when this TimelineWalker has reached the end of the Timeline.
            </summary>
        </member>
        <member name="F:Atom.Story.TimelineWalker.nextFrameIndex">
            <summary>
            The index into the timeline of the next Frame.
            </summary>
        </member>
        <member name="F:Atom.Story.TimelineWalker.nextFrame">
            <summary>
            Captures the Frame that will be executed next.
            </summary>
        </member>
        <member name="F:Atom.Story.TimelineWalker.hasEnded">
            <summary>
            States whether the Timeline has finished.
            </summary>
        </member>
        <member name="F:Atom.Story.TimelineWalker.timeline">
            <summary>
            The Timeline that is currently walked by this TimelineWalker.
            </summary>
        </member>
        <member name="F:Atom.Story.TimelineWalker.timer">
            <summary>
            Responsible for progressing TickTime.
            </summary>
        </member>
        <member name="T:Atom.Story.TimeTick">
            <summary>
            Represents a quantifized time position on a Timeline.
            </summary>
        </member>
        <member name="F:Atom.Story.TimeTick.TimeQuantity">
            <summary>
            The number of seconds between two TimeTicks: 0.5
            </summary>
        </member>
        <member name="P:Atom.Story.TimeTick.Zero">
            <summary>
            Gets an TimeTick instance that represents the start of a timeline.
            </summary>
        </member>
        <member name="F:Atom.Story.TimeTick.Value">
            <summary>
            The value that encodes the position of this TimeTick.
            </summary>
        </member>
        <member name="P:Atom.Story.TimeTick.Seconds">
            <summary>
            Gets the seconds this TimeTick instance represents.
            </summary>
        </member>
        <member name="P:Atom.Story.TimeTick.Minutes">
            <summary>
            Gets the minutes this TimeTick instance represents.
            </summary>
        </member>
        <member name="M:Atom.Story.TimeTick.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the TimeTick structure.
            </summary>
            <param name="value">
            Encodes the position of the new TimeTick.
            </param>
        </member>
        <member name="M:Atom.Story.TimeTick.FromSeconds(System.UInt32)">
            <summary>
            Creates a new instance of the TimeTick structure,
            converting the given amount of seconds into tick time.
            </summary>
            <param name="seconds">
            The seconds to convert.
            </param>
            <returns>
            The converted TimeTick-
            </returns>
        </member>
        <member name="M:Atom.Story.TimeTick.Equals(System.Object)">
            <summary>
            Indicates whether the specified object is equal
            to this TimeTick instance.
            </summary>
            <param name="obj">
            The object to compare to.
            </param>
            <returns>
            true if they are equal; otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Story.TimeTick.Equals(Atom.Story.TimeTick)">
            <summary>
            Indicates whether the specified TimeTick instance is equal
            to this TimeTick instance.
            </summary>
            <param name="other">
            The other TimeTick instance to compare to.
            </param>
            <returns>
            true if they are equal; otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Story.TimeTick.GetHashCode">
            <summary>
            Gets the hashcode of this TimeTick instance.
            </summary>
            <returns>
            The hashcode of this instance.
            </returns>
        </member>
        <member name="M:Atom.Story.TimeTick.ToString">
            <summary>
            Returns a string representation of this TimeTick instance.
            </summary>
            <returns>
            A string representation of this TimeTick instance.
            </returns>
        </member>
        <member name="M:Atom.Story.TimeTick.CompareTo(Atom.Story.TimeTick)">
            <summary>
            Compares this TimeTick instance to the specified TimeTick instance.
            </summary>
            <param name="other">
            The other TimeTick instance to compare to.
            </param>
            <returns>
            A value representing how this TimeTick instance is placed relative
            to the specified TimeTick instance.
            </returns>
        </member>
        <member name="M:Atom.Story.TimeTick.op_Implicit(System.UInt32)~Atom.Story.TimeTick">
            <summary>
            Implicitely converts an unsigned integer into a TimeTick instance.
            </summary>
            <param name="value">
            The value to convert.
            </param>
            <returns>
            The converted TimeTick.
            </returns>
        </member>
        <member name="M:Atom.Story.TimeTick.op_Subtraction(Atom.Story.TimeTick,Atom.Story.TimeTick)">
            <summary>
            Returns the result of substracting the TimeTick on the right side
            from the TimeTick on the left side.
            </summary>
            <param name="left">
            The TimeTick on the left side of the operator.
            </param>
            <param name="right">
            The TimeTick on the right side of the operator.
            </param>
            <returns>
            The result of the substraction.
            </returns>
        </member>
        <member name="M:Atom.Story.TimeTick.op_Addition(Atom.Story.TimeTick,Atom.Story.TimeTick)">
            <summary>
            Returns the result of adding the TimeTick on the right side
            to the TimeTick on the left side.
            </summary>
            <param name="left">
            The TimeTick on the left side of the operator.
            </param>
            <param name="right">
            The TimeTick on the right side of the operator.
            </param>
            <returns>
            The result of the addition.
            </returns>
        </member>
        <member name="M:Atom.Story.TimeTick.op_LessThan(Atom.Story.TimeTick,Atom.Story.TimeTick)">
            <summary>
            Returns a value indicating whether the specified TimeTick on the left side of the comparison
            is less than the TimeTick on the right side.
            </summary>
            <param name="left">
            The TimeTick on the left side of the comparison.
            </param>
            <param name="right">
            The TimeTick on the right side of the comparison.
            </param>
            <returns>
            true if the left TimeTick is less than the right TimeTick;
            -or- otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Story.TimeTick.op_LessThanOrEqual(Atom.Story.TimeTick,Atom.Story.TimeTick)">
            <summary>
            Returns a value indicating whether the specified TimeTick on the left side of the comparison
            is less than or equal the TimeTick on the right side.
            </summary>
            <param name="left">
            The TimeTick on the left side of the comparison.
            </param>
            <param name="right">
            The TimeTick on the right side of the comparison.
            </param>
            <returns>
            true if the left TimeTick is less than or equal the right TimeTick;
            -or- otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Story.TimeTick.op_GreaterThan(Atom.Story.TimeTick,Atom.Story.TimeTick)">
            <summary>
            Returns a value indicating whether the specified TimeTick on the left side of the comparison
            is greater than the TimeTick on the right side.
            </summary>
            <param name="left">
            The TimeTick on the left side of the comparison.
            </param>
            <param name="right">
            The TimeTick on the right side of the comparison.
            </param>
            <returns>
            true if the left TimeTick is greater than the right TimeTick;
            -or- otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Story.TimeTick.op_GreaterThanOrEqual(Atom.Story.TimeTick,Atom.Story.TimeTick)">
            <summary>
            Returns a value indicating whether the specified TimeTick on the left side of the comparison
            is greater than or equal the TimeTick on the right side.
            </summary>
            <param name="left">
            The TimeTick on the left side of the comparison.
            </param>
            <param name="right">
            The TimeTick on the right side of the comparison.
            </param>
            <returns>
            true if the left TimeTick is greater than or equal the right TimeTick;
            -or- otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Story.TimeTick.op_Equality(Atom.Story.TimeTick,Atom.Story.TimeTick)">
            <summary>
            Returns a value indicating whether the specified TimeTick instances
            represents the same tick.
            </summary>
            <param name="left">
            The TimeTick on the left side of the comparison.
            </param>
            <param name="right">
            The TimeTick on the right side of the comparison.
            </param>
            <returns>
            true if the left TimeTick is equal to the right TimeTick;
            -or- otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Story.TimeTick.op_Inequality(Atom.Story.TimeTick,Atom.Story.TimeTick)">
            <summary>
            Returns a value indicating whether the specified TimeTick instances
            do not represents the same tick.
            </summary>
            <param name="left">
            The TimeTick on the left side of the comparison.
            </param>
            <param name="right">
            The TimeTick on the right side of the comparison.
            </param>
            <returns>
            true if the left TimeTick is not equal to the right TimeTick;
            -or- otherwise false.
            </returns>
        </member>
    </members>
</doc>
