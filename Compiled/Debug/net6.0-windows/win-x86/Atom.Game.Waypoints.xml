<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Atom.Game.Waypoints</name>
    </assembly>
    <members>
        <member name="T:Atom.Waypoints.IWaypointGraphDataFactory">
            <summary>
            Represents the factory that is used to build the Waypoint and PathSegment data stored in
            the vertices and edges of the new WaypointGraph.
            </summary>
        </member>
        <member name="T:Atom.Waypoints.Path">
            <summary>
            Represents a path of connected <see cref="T:Atom.Waypoints.Waypoint"/>s.
            </summary>
        </member>
        <member name="P:Atom.Waypoints.Path.Name">
            <summary>
            Gets or sets the name that uniquely identifies this Path.
            </summary>
        </member>
        <member name="P:Atom.Waypoints.Path.Start">
            <summary>
            Gets the <see cref="T:Atom.Waypoints.Waypoint"/> this Path starts at.
            </summary>
        </member>
        <member name="P:Atom.Waypoints.Path.End">
            <summary>
            Gets the <see cref="T:Atom.Waypoints.Waypoint"/> this Path ends at.
            </summary>
        </member>
        <member name="P:Atom.Waypoints.Path.IsCircular">
            <summary>
            Gets a value indicating whether this Path starts and ends at the same Waypoint.
            </summary>
        </member>
        <member name="P:Atom.Waypoints.Path.Length">
            <summary>
            Gets the number of <see cref="T:Atom.Waypoints.Waypoint"/>s that lie on this Path.
            </summary>
        </member>
        <member name="P:Atom.Waypoints.Path.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Atom.Waypoints.Waypoint"/> at the specified index.
            </summary>
            <param name="index">
            The zero-based index of the Waypoint.
            </param>
            <returns>
            The requested Waypoint.
            </returns>
        </member>
        <member name="P:Atom.Waypoints.Path.Capacity">
            <summary>
            Gets or sets the number of Waypoints that can be added to this Path
            without having to re-allocate memory.
            </summary>
        </member>
        <member name="M:Atom.Waypoints.Path.Add(Atom.Waypoints.Waypoint)">
            <summary>
            Adds a new Waypoint to the end of this Path.
            </summary>
            <param name="waypoint">
            The Waypoint to add to this Path.
            </param>
        </member>
        <member name="M:Atom.Waypoints.Path.GetEnumerator">
            <summary>
            Gets an enumerator that iterates over the <see cref="T:Atom.Waypoints.Waypoint"/>s that lie on this Path.
            </summary>
            <returns>
            A new enumerator.
            </returns>
        </member>
        <member name="M:Atom.Waypoints.Path.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator that iterates over the <see cref="T:Atom.Waypoints.Waypoint"/>s that lie on this Path.
            </summary>
            <returns>
            A new enumerator.
            </returns>
        </member>
        <member name="M:Atom.Waypoints.Path.IndexOf(Atom.Waypoints.Waypoint)">
            <summary>
            Gets the zero-based index of the specified Waypoint in this Path.
            </summary>
            <param name="waypoint">
            The Waypoint to locate.
            </param>
            <returns>
            The zero-based index of the specified Waypoint
            -or- -1 if this Path doesn't contain the specified Waypoint.
            </returns>
        </member>
        <member name="M:Atom.Waypoints.Path.Insert(System.Int32,Atom.Waypoints.Waypoint)">
            <summary>
            Attempts to isnert the specified Waypoint at the specified index.
            </summary>
            <param name="index">
            The zero-based index at which the Waypoint should be inserted.
            </param>
            <param name="waypoint">
            The Waypoint to insert.
            </param>
        </member>
        <member name="M:Atom.Waypoints.Path.RemoveAt(System.Int32)">
            <summary>
            Attempts to remove the Waypoint at the specified index.
            </summary>
            <param name="index">
            THe zero-based index of the Waypoint to remove.
            </param>
            <returns>
            true if it was removed;
            -or- otherwise false if removing it would result in a not directly connected Path.
            </returns>
        </member>
        <member name="M:Atom.Waypoints.Path.RemoveAllAfter(System.Int32)">
            <summary>
            Removes all Waypoints after the specified zero-based index.
            </summary>
            <param name="index">
            The zero-based index to start removing at.
            </param>
        </member>
        <member name="M:Atom.Waypoints.Path.Clear">
            <summary>
            Removes all Waypoints from this Path.
            </summary>
        </member>
        <member name="M:Atom.Waypoints.Path.CreateBackup">
            <summary>
            Creates a backup of the Waypoint list this Path contains.
            </summary>
            <returns>
            The newly created Waypoint list that mirrors
            the waypoints of this Path.
            </returns>
        </member>
        <member name="M:Atom.Waypoints.Path.AreDirectlyConnected(System.Collections.Generic.IEnumerable{Atom.Waypoints.Waypoint})">
            <summary>
            Gets a value indicating whether the specified Waypoint are directly
            connected to their neighbours.
            </summary>
            <param name="waypoints">
            The Waypoints to check.
            </param>
            <returns>
            True if the specified Waypoints are directly connected;
            otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Waypoints.Path.RemoveStart">
            <summary>
            Removes the Waypoint at the start of this Path.
            </summary>
            <returns>
            true if it was removed;
            otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Waypoints.Path.RemoveEnd">
            <summary>
            Removes the Waypoint at the end of this Path.
            </summary>
            <returns>
            true if it was removed;
            otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Waypoints.Path.Contains(Atom.Waypoints.PathSegment)">
            <summary>
            Gets a value indicating whether this Path uses the specified PathSegment.
            </summary>
            <param name="segment">
            The segment to locate.
            </param>
            <returns>
            true if the specified PathSegment was found;
            otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Waypoints.Path.ToString">
            <summary>
            Overriden to return that name that uniquely identifies this Path.
            </summary>
            <returns>
            The name of this Path.
            </returns>
        </member>
        <member name="F:Atom.Waypoints.Path.waypoints">
            <summary>
            The Waypoints this Path consists of.
            </summary>
        </member>
        <member name="T:Atom.Waypoints.PathSegment">
            <summary>
            Represents a direct path between two <see cref="T:Atom.Waypoints.Waypoint"/>s.
            </summary>
        </member>
        <member name="P:Atom.Waypoints.PathSegment.Weight">
            <summary>
            Gets or sets the final weight of this PathSegment.
            </summary>
        </member>
        <member name="P:Atom.Waypoints.PathSegment.WeightModifier">
            <summary>
            Gets or sets the IValueModifier that is applied on the Distance to create the Weight.
            </summary>
        </member>
        <member name="P:Atom.Waypoints.PathSegment.Distance">
            <summary>
            Gets the distance this <see cref="T:Atom.Waypoints.PathSegment"/> takes up.
            </summary>
        </member>
        <member name="P:Atom.Waypoints.PathSegment.From">
            <summary>
            Gets the <see cref="T:Atom.Waypoints.Waypoint"/> at which this PathSegment begins.
            </summary>
        </member>
        <member name="P:Atom.Waypoints.PathSegment.To">
            <summary>
            Gets the <see cref="T:Atom.Waypoints.Waypoint"/> at which this PathSegment ends.
            </summary>
        </member>
        <member name="P:Atom.Waypoints.PathSegment.Edge">
            <summary>
            Gets the Edge{Waypoint, PathSegment} that owns this PathSegment.
            </summary>
        </member>
        <member name="P:Atom.Waypoints.PathSegment.Line">
            <summary>
            Gets the <see cref="T:Atom.Math.IReadOnlyLineSegment2"/> that represents this PathSegment.
            </summary>
            <returns>
            The line from the <see cref="P:Atom.Waypoints.PathSegment.From"/> WayPoint to the <see cref="P:Atom.Waypoints.PathSegment.To"/> Waypoint.
            </returns>
        </member>
        <member name="P:Atom.Waypoints.PathSegment.Atom#IOwnedBy{Atom#Math#Graph#Edge{Atom#Waypoints#Waypoint,Atom#Waypoints#PathSegment}}#Owner">
            <summary>
            Gets or sets the Edge{Waypoint, PathSegment} that owns this PathSegment.
            </summary>
        </member>
        <member name="M:Atom.Waypoints.PathSegment.OnWaypointTransformChangedCore(Atom.Components.Transform.ITransform2)">
            <summary>
            Called when the transformation of the starting or ending Waypoint has changed.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
        </member>
        <member name="M:Atom.Waypoints.PathSegment.UpdateLine">
            <summary>
            Updates the LineSegment2 to the newest position values.
            </summary>
        </member>
        <member name="M:Atom.Waypoints.PathSegment.OnWaypointTransformChanged(Atom.Components.Transform.ITransform2)">
            <summary>
            Called when the transformation of the starting or ending Waypoint has changed.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
        </member>
        <member name="M:Atom.Waypoints.PathSegment.OnWeightModifierChanged(System.Object,System.EventArgs)">
            <summary>
            Called when the internal state of the current WeightModifier has changed.
            </summary>
            <param name="modifier">
            The sender of the event.
            </param>
            <param name="e">
            The EventArgs that contain the event data.
            </param>
        </member>
        <member name="M:Atom.Waypoints.PathSegment.UpdateWeight">
            <summary>
            Updates the Weight of this PathSegment.
            </summary>
        </member>
        <member name="M:Atom.Waypoints.PathSegment.ToString">
            <summary>
            Overriden to return a description of this PathSegment.
            </summary>
            <returns>
            A human-readable description of this PathSegment.
            </returns>
        </member>
        <member name="F:Atom.Waypoints.PathSegment.line">
            <summary>
            Represents the actual LineSegment2 this PathSegment covers.
            </summary>
        </member>
        <member name="F:Atom.Waypoints.PathSegment.edge">
            <summary>
            Represents the edge that owns this PathSegment.
            </summary>
        </member>
        <member name="F:Atom.Waypoints.PathSegment._weightModifier">
            <summary>
            The IValueModifier that is applied on the Distance to create the Weight.
            </summary>
        </member>
        <member name="T:Atom.Waypoints.PathSegmentWaypoint">
            <summary>
            Enumerates the Waypoints that are part of a <see cref="T:Atom.Waypoints.PathSegment"/>.
            </summary>
        </member>
        <member name="F:Atom.Waypoints.PathSegmentWaypoint.From">
            <summary>
            The first Waypoint in a PathSegment.
            </summary>
        </member>
        <member name="F:Atom.Waypoints.PathSegmentWaypoint.To">
            <summary>
            The second Waypoint in a PathSegment.
            </summary>
        </member>
        <member name="T:Atom.Waypoints.ITilePathSegmentPathBuildService">
            <summary>
            Provides mechanism that builds the <see cref="T:Atom.Scene.Tiles.TilePath"/> of a <see cref="T:Atom.Waypoints.TilePathSegment"/>.
            </summary>
        </member>
        <member name="M:Atom.Waypoints.ITilePathSegmentPathBuildService.BuildPath(Atom.Waypoints.TilePathSegment)">
            <summary>
            Attempts to find a path from the From <see cref="T:Atom.Waypoints.Waypoint"/> to the To <see cref="T:Atom.Waypoints.Waypoint"/>
            of the specified <see cref="T:Atom.Waypoints.TilePathSegment"/>.
            </summary>
            <param name="pathSegment">
            The path segment to analayze.
            </param>
            <returns>
            The path for the specified TilePathSegment on the tile level.
            </returns>
        </member>
        <member name="T:Atom.Waypoints.TilePathSegment">
            <summary>
            Represents a <see cref="T:Atom.Waypoints.PathSegment"/> that calculates the TilePath that connects the
            <see cref="P:Atom.Waypoints.PathSegment.From"/> <see cref="T:Atom.Waypoints.Waypoint"/> with the <see cref="P:Atom.Waypoints.PathSegment.To"/> <see cref="T:Atom.Waypoints.Waypoint"/>
            on the tile-level.
            </summary>
            <remarks>
            The limitations of this implementation is that the path is calculated arbitrarly,
            not taking into account the properties of the 'object' traveling the TilePath.
            </remarks>
        </member>
        <member name="P:Atom.Waypoints.TilePathSegment.FloorNumber">
            <summary>
            Gets the number that uniquely identifies the floor this TilePathSegment uses
            to generate the underlying TilePath.
            </summary>
        </member>
        <member name="P:Atom.Waypoints.TilePathSegment.PreferredWaypoint">
            <summary>
            Gets or sets a value indicating what Waypoint is choosen to get the <see cref="P:Atom.Waypoints.TilePathSegment.FloorNumber"/> of this TilePathSegment.
            </summary>
        </member>
        <member name="P:Atom.Waypoints.TilePathSegment.IsTilePathCached">
            <summary>
            Gets a value indicating whether the TilePath of this TilePathSegment is currently cached.
            </summary>
        </member>
        <member name="M:Atom.Waypoints.TilePathSegment.#ctor(Atom.Waypoints.ITilePathSegmentPathBuildService)">
            <summary>
            Initializes a new instance of the TilePathSegment class.
            </summary>
            <param name="pathBuildService">
            Provides a mechanism for building the underlying TilePath of this TilePathSegment.
            </param>
        </member>
        <member name="M:Atom.Waypoints.TilePathSegment.GetTilePath">
            <summary>
            Gets the <see cref="T:Atom.Scene.Tiles.TilePath"/> that connects the <see cref="P:Atom.Waypoints.PathSegment.From"/> <see cref="T:Atom.Waypoints.Waypoint"/> with
            the <see cref="P:Atom.Waypoints.PathSegment.To"/> <see cref="T:Atom.Waypoints.Waypoint"/> on the tile-level.
            </summary>
            <returns>
            The TilePath that has been cached.
            </returns>
        </member>
        <member name="M:Atom.Waypoints.TilePathSegment.CacheTilePath">
            <summary>
            Creates and caches the underlying TilePath, if not already cached.
            </summary>
        </member>
        <member name="M:Atom.Waypoints.TilePathSegment.InvalidateCachedTilePath">
            <summary>
            Invalidates the currently cached TIlePath.
            </summary>
        </member>
        <member name="M:Atom.Waypoints.TilePathSegment.BuildTilePath">
            <summary>
            Builds the TilePath.
            </summary>
        </member>
        <member name="M:Atom.Waypoints.TilePathSegment.OnTilePathBuild(Atom.Scene.Tiles.TilePath)">
            <summary>
            Called when the TilePath underlying this TilePathSegment has been build.
            </summary>
            <param name="path">
            The TilePath that has been build.
            </param>
        </member>
        <member name="M:Atom.Waypoints.TilePathSegment.OnWaypointTransformChanged(Atom.Components.Transform.ITransform2)">
            <summary>
            Called when the transformation of the starting or ending Waypoint has changed.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
        </member>
        <member name="F:Atom.Waypoints.TilePathSegment.tilePath">
            <summary>
            The TilePath that connects the From Waypoint with the To Waypoint on the tile level.
            </summary>
        </member>
        <member name="F:Atom.Waypoints.TilePathSegment.pathBuildService">
            <summary>
            Provides a mechanism for building the underlying TilePath of this TilePathSegment.
            </summary>
        </member>
        <member name="T:Atom.Waypoints.TilePathSegmentPathBuildService">
            <summary>
            Provides mechanism that builds the <see cref="T:Atom.Scene.Tiles.TilePath"/> of a <see cref="T:Atom.Waypoints.TilePathSegment"/>.
            This class can't be inherited.
            </summary>
        </member>
        <member name="M:Atom.Waypoints.TilePathSegmentPathBuildService.#ctor(Atom.Scene.Tiles.ITileHandler{System.Object},Atom.AI.IMultiFloorPathSearcherProvider)">
            <summary>
            Initializes a new instance of the TilePathSegmentPathBuildService class.
            </summary>
            <param name="tileHandler">
            The handler that is used traverse the TileMap.
            </param>
            <param name="pathSearcherProvider">
            Provides a mechanism for receicing ITilePathSearchers by floor number.
            </param>
        </member>
        <member name="M:Atom.Waypoints.TilePathSegmentPathBuildService.BuildPath(Atom.Waypoints.TilePathSegment)">
            <summary>
            Attempts to find a path from the From <see cref="T:Atom.Waypoints.Waypoint"/> to the To <see cref="T:Atom.Waypoints.Waypoint"/>
            of the specified <see cref="T:Atom.Waypoints.TilePathSegment"/>.
            </summary>
            <param name="pathSegment">
            The path segment to analayze.
            </param>
            <returns>
            The path for the specified TilePathSegment on the tile level.
            </returns>
        </member>
        <member name="F:Atom.Waypoints.TilePathSegmentPathBuildService.pathSearcherProvider">
            <summary>
            Provides a mechanism for receicing ITilePathSearchers by floor number.
            </summary>
        </member>
        <member name="F:Atom.Waypoints.TilePathSegmentPathBuildService.tileHandler">
            <summary>
            The handler that is used traverse the TileMap.
            </summary>
        </member>
        <member name="T:Atom.Waypoints.Waypoint">
            <summary>
            Represents an important location in a <see cref="T:Atom.Waypoints.WaypointMap"/> that is connected to other locations.
            </summary>
        </member>
        <member name="P:Atom.Waypoints.Waypoint.Position">
            <summary>
            Gets or sets the position of this Waypoint.
            </summary>
        </member>
        <member name="P:Atom.Waypoints.Waypoint.FloorNumber">
            <summary>
            Gets or sets the number that identifies the floor this Waypoint is on.
            </summary>
            <remarks>
            This represents the Z-axis.
            </remarks>
            <value>
            The default value is 0.
            </value>
        </member>
        <member name="P:Atom.Waypoints.Waypoint.Transform">
            <summary>
            Gets the <see cref="T:Atom.Components.Transform.ITransform2"/> component that gives this Waypoint a position.
            </summary>
        </member>
        <member name="P:Atom.Waypoints.Waypoint.QuadTreeItem">
            <summary>
            Gets the <see cref="T:Atom.Scene.IQuadTreeItem2"/> component that allows this Waypoint
            to be stored in a Waypoint.
            </summary>
        </member>
        <member name="P:Atom.Waypoints.Waypoint.Vertex">
            <summary>
            Gets the Vertex{Waypoint, PathSegment} that owns this Waypoint.
            </summary>
        </member>
        <member name="P:Atom.Waypoints.Waypoint.Segments">
            <summary>
            Gets the <see cref="T:Atom.Waypoints.PathSegment"/> that connect this <see cref="T:Atom.Waypoints.Waypoint"/> with other <see cref="T:Atom.Waypoints.Waypoint"/>s.
            </summary>
        </member>
        <member name="P:Atom.Waypoints.Waypoint.Atom#IOwnedBy{Atom#Math#Graph#Vertex{Atom#Waypoints#Waypoint,Atom#Waypoints#PathSegment}}#Owner">
            <summary>
            Gets or sets the Vertex{Waypoint, PathSegment} that owns this Waypoint.
            </summary>
        </member>
        <member name="M:Atom.Waypoints.Waypoint.Equals(Atom.Waypoints.Waypoint)">
            <summary>
            Returns a value indicating whether the specified Waypoints are equal.
            </summary>
            <param name="other">
            The Waypoint to compare to.
            </param>
            <returns>
            true if they are equal;
            otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Waypoints.Waypoint.#ctor">
            <summary>
            Initializes a new instance of the Waypoint class.
            </summary>
        </member>
        <member name="M:Atom.Waypoints.Waypoint.#ctor(Atom.Components.Transform.ITransform2,Atom.Components.Collision.ICollision2,Atom.Scene.IQuadTreeItem2)">
            <summary>
            Initializes a new instance of the Waypoint class.
            </summary>
            <param name="transform">
            The component that is used to give the new Waypoint a position.
            </param>
            <param name="collision">
            The component that is used to give the new Waypoint a position.
            </param>
            <param name="quadTreeItem">
            The component that provides a mechanism for inserting the new Waypoint in a QuadTree.
            </param>
        </member>
        <member name="M:Atom.Waypoints.Waypoint.HasPathSegmentTo(Atom.Waypoints.Waypoint)">
            <summary>
            Gets a value indicating whether this Waypoint is directly connected to the specified Waypoint.
            </summary>
            <param name="waypoint">
            The Waypoint to compare to.
            </param>
            <returns>
            true if the Waypoints are connected;
            otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Waypoints.Waypoint.GetPathSegmentTo(Atom.Waypoints.Waypoint)">
            <summary>
            Gets the PathSegment that directly connects this Waypoint with the specified Waypoint.
            </summary>
            <param name="waypoint">
            The Waypoint to compare to.
            </param>
            <returns>
            true if the Waypoints are connected;
            otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Waypoints.Waypoint.HasPathSegment(Atom.Waypoints.PathSegment)">
            <summary>
            Gets a value indicating whether this Waypoint is connected to another Waypoint
            using the specified PathSegment.
            </summary>
            <param name="segment">
            The PathSegment to locate.
            </param>
            <returns>
            true if this Waypoint is connected to another Waypoint
            using the specified PathSegment -or- otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Waypoints.Waypoint.ToString">
            <summary>
            Overriden to return the name of this Waypoint.
            </summary>
            <returns>
            The name of this Waypoint.
            </returns>
        </member>
        <member name="F:Atom.Waypoints.Waypoint.vertex">
            <summary>
            Represents the vertex that owns this Waypoint.
            </summary>
        </member>
        <member name="F:Atom.Waypoints.Waypoint.transform">
            <summary>
            The component that is used to give this Waypoint a position.
            </summary>
        </member>
        <member name="F:Atom.Waypoints.Waypoint.collision">
            <summary>
            The component that is used to give this Waypoint a position.
            </summary>
        </member>
        <member name="F:Atom.Waypoints.Waypoint.quadTreeItem">
            <summary>
            The component that provides a mechanism for inserting this Waypoint in a QuadTree.
            </summary>
        </member>
        <member name="T:Atom.Waypoints.WaypointGraph">
            <summary>
            Represents the graph that contains the internal structure of a <see cref="T:Atom.Waypoints.WaypointMap"/>.
            </summary>
        </member>
        <member name="M:Atom.Waypoints.WaypointGraph.#ctor">
            <summary>
            Initializes a new instance of the WaypointGraph class.
            </summary>
        </member>
        <member name="M:Atom.Waypoints.WaypointGraph.#ctor(Atom.Waypoints.IWaypointGraphDataFactory)">
            <summary>
            Initializes a new instance of the WaypointGraph class.
            </summary>
            <param name="dataFactory">
            The factory that is used to build the Waypoint and PathSegment data stored in
            the vertices and edges of the new WaypointGraph.
            </param>
        </member>
        <member name="T:Atom.Waypoints.WaypointGraphDataFactory">
            <summary>
            Implements an <see cref="T:Atom.Math.Graph.IGraphDataFactory`2"/> for the WaypointGraph.
            </summary>
        </member>
        <member name="F:Atom.Waypoints.WaypointGraphDataFactory.Instance">
            <summary>
            Represents an instance of the WaypointGraphDataFactory class.
            </summary>
        </member>
        <member name="M:Atom.Waypoints.WaypointGraphDataFactory.BuildVertexData">
            <summary>
            Builds the TVertexData stored in a <see cref="T:Atom.Math.Graph.Vertex`2"/>.
            </summary>
            <returns>
            The TVertexData that will be assigned to the Vertex{TVertexData, TEdgeData}.
            </returns>
        </member>
        <member name="M:Atom.Waypoints.WaypointGraphDataFactory.BuildEdgeData">
            <summary>
            Builds the TEdgeData stored in a <see cref="T:Atom.Math.Graph.Edge`2"/>.
            </summary>
            <returns>
            The TEdgeData that will be assigned to the Edge{TVertexData, TEdgeData}.
            </returns>
        </member>
        <member name="T:Atom.Waypoints.WaypointMap">
            <summary>
            
            </summary>
        </member>
        <member name="E:Atom.Waypoints.WaypointMap.WaypointAdded">
            <summary>
            Raised when a <see cref="T:Atom.Waypoints.Waypoint"/> has been added to this WaypointMap.
            </summary>
        </member>
        <member name="E:Atom.Waypoints.WaypointMap.PathSegmentAdded">
            <summary>
            Raised when a <see cref="T:Atom.Waypoints.PathSegment"/> has been added to this WaypointMap.
            </summary>
        </member>
        <member name="E:Atom.Waypoints.WaypointMap.WaypointRemoved">
            <summary>
            Raised when a <see cref="T:Atom.Waypoints.Waypoint"/> has been removed from this WaypointMap.
            </summary>
        </member>
        <member name="E:Atom.Waypoints.WaypointMap.PathSegmentRemoved">
            <summary>
            Raised when a <see cref="T:Atom.Waypoints.PathSegment"/> has been removed from this WaypointMap.
            </summary>
        </member>
        <member name="P:Atom.Waypoints.WaypointMap.Waypoints">
            <summary>
            Gets the <see cref="T:Atom.Waypoints.Waypoint"/>s this WaypointMap contains.
            </summary>
        </member>
        <member name="P:Atom.Waypoints.WaypointMap.PathSegments">
            <summary>
            Gets the <see cref="T:Atom.Waypoints.PathSegment"/>s this WaypointMap contains.
            </summary>
        </member>
        <member name="P:Atom.Waypoints.WaypointMap.WaypointCount">
            <summary>
            Gets the number of <see cref="T:Atom.Waypoints.Waypoint"/>s this WaypointMap contains.
            </summary>
        </member>
        <member name="P:Atom.Waypoints.WaypointMap.PathSegmentCount">
            <summary>
            Gets the number of <see cref="T:Atom.Waypoints.PathSegment"/>s this WaypointMap contains.
            </summary>
        </member>
        <member name="M:Atom.Waypoints.WaypointMap.#ctor">
            <summary>
            Initializes a new instance of the WaypointMap class.
            </summary>
        </member>
        <member name="M:Atom.Waypoints.WaypointMap.#ctor(Atom.Waypoints.IWaypointGraphDataFactory)">
            <summary>
            Initializes a new instance of the WaypointMap class.
            </summary>
            <param name="graphDataFactory">
            The factory that is used to build the Waypoint and PathSegment data stored in
            the vertices and edges of the WaypointGraph.
            </param>
        </member>
        <member name="M:Atom.Waypoints.WaypointMap.Initialize(Atom.Math.Vector2,System.Int32)">
            <summary>
            Initializes this WaypointMap.
            </summary>
            <param name="mapSize">
            The size of the map (in pixels).
            </param>
            <param name="subdivisionCount">
            The number of times the WaypointMap is sub-divided.
            </param>
        </member>
        <member name="M:Atom.Waypoints.WaypointMap.AddWaypoint(Atom.Math.Vector2)">
            <summary>
            Adds a new Waypoint at the specified position to this WaypointMap.
            </summary>
            <param name="position">
            The initial position of the new Waypoint.
            </param>
            <returns>
            The newly created Waypoint.
            </returns>
        </member>
        <member name="M:Atom.Waypoints.WaypointMap.AddPathSegment(Atom.Waypoints.Waypoint,Atom.Waypoints.Waypoint)">
            <summary>
            Adds a new <see cref="T:Atom.Waypoints.PathSegment"/> between the specified <see cref="T:Atom.Waypoints.Waypoint"/>s.
            </summary>
            <param name="from">
            The first Waypoint.
            </param>
            <param name="to">
            The second Waypoint.
            </param>
            <returns>
            The newly created PathSegment.
            </returns>
        </member>
        <member name="M:Atom.Waypoints.WaypointMap.RemoveWaypoint(Atom.Waypoints.Waypoint,System.Boolean)">
            <summary>
            Attempts to remove the specified <see cref="T:Atom.Waypoints.Waypoint"/> from this WaypointMap.
            </summary>
            <param name="waypoint">
            The Waypoint to remove.
            </param>
            <param name="preservePath">
            States whether new PathSegments should be added this WaypointMap to fill
            the hole that will be created.
            </param>
            <returns>
            true if the specified Waypoint was removed;
            otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Waypoints.WaypointMap.RemovePathSegment(Atom.Waypoints.PathSegment)">
            <summary>
            Attempts to remove the specified <see cref="T:Atom.Waypoints.PathSegment"/> from this WaypointMap.
            </summary>
            <param name="segment">
            The PathSegment to remove.
            </param>
            <returns>
            true if the specified PathSegment was removed;
            otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Waypoints.WaypointMap.GetWaypointsIn(Atom.Math.Rectangle)">
            <summary>
            Gets the <see cref="T:Atom.Waypoints.Waypoint"/>s within the specified <paramref name="area"/>.
            </summary>
            <param name="area">
            The area in which Waypoints should be looked for.
            </param>
            <returns>
            The Waypoints within the specified area.
            </returns>
        </member>
        <member name="M:Atom.Waypoints.WaypointMap.GetPathSegment(Atom.Waypoints.Waypoint,Atom.Waypoints.Waypoint)">
            <summary>
            Attempts to get the <see cref="T:Atom.Waypoints.PathSegment"/> between the specified <see cref="T:Atom.Waypoints.Waypoint"/>s.
            </summary>
            <param name="from">
            The first Waypoint.
            </param>
            <param name="to">
            The second Waypoint.
            </param>
            <returns>
            The PathSegment between the specified Waypoints;
            -or- null if there is no direct connection between them.
            </returns>
        </member>
        <member name="M:Atom.Waypoints.WaypointMap.GetWaypointAt(System.Int32)">
            <summary>
            Gets the <see cref="T:Atom.Waypoints.Waypoint"/> at the specified <paramref name="index"/>.
            </summary>
            <param name="index">
            The zero-based index of the Waypoint to get.
            </param>
            <returns>
            The Waypoint at the specified index.
            </returns>
        </member>
        <member name="M:Atom.Waypoints.WaypointMap.GetPathSegmentAt(System.Int32)">
            <summary>
            Gets the <see cref="T:Atom.Waypoints.PathSegment"/> at the specified <paramref name="index"/>.
            </summary>
            <param name="index">
            The zero-based index of the PathSegment to get.
            </param>
            <returns>
            The PathSegment at the specified index.
            </returns>
        </member>
        <member name="M:Atom.Waypoints.WaypointMap.GetIndexOf(Atom.Waypoints.Waypoint)">
            <summary>
            Gets the zero-based index of the specified Waypoint.
            </summary>
            <param name="waypoint">
            The Waypoint to locate.
            </param>
            <returns>
            The index of the specified Waypoint;
            -or- "-1" if it could not be found.
            </returns>
        </member>
        <member name="M:Atom.Waypoints.WaypointMap.GetIndexOf(Atom.Waypoints.PathSegment)">
            <summary>
            Gets the zero-based index of the specified PathSegment.
            </summary>
            <param name="segment">
            The PathSegment to locate.
            </param>
            <returns>
            The index of the specified PathSegment;
            -or- "-1" if it could not be found.
            </returns>
        </member>
        <member name="F:Atom.Waypoints.WaypointMap.quadTree">
            <summary>
            The QuadTree2 in which Waypoints are inserted, and partially sorted.
            </summary>
        </member>
        <member name="F:Atom.Waypoints.WaypointMap.graph">
            <summary>
            The underlying graph that connects the Waypoints using PathSegments.
            </summary>
        </member>
    </members>
</doc>
