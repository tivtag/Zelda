<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ZeldasLibrary</name>
    </assembly>
    <members>
        <member name="T:Zelda.Actions.ActionResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Zelda.Actions.ActionResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Zelda.Actions.ActionResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Zelda.Actions.ActionResources.UpgradesSizeOfSharedChestFromTierAToTierB">
             <summary>
               Looks up a localized string similar to Upgrades the size of the Chest of Winds
            from Tier {0} to Tier {1}..
             </summary>
        </member>
        <member name="T:Zelda.Actions.BaseAction">
            <summary>
            Represents an abstract base implementation of the IAction interface.
            </summary>
        </member>
        <member name="M:Zelda.Actions.BaseAction.Execute">
            <summary>
            Executes this IAction.
            </summary>
        </member>
        <member name="M:Zelda.Actions.BaseAction.Dexecute">
            <summary>
            Deferredly undoes this IAction.
            </summary>
        </member>
        <member name="M:Zelda.Actions.BaseAction.CanExecute">
            <summary>
            Gets a value indicating whether this IAction can be executed.
            </summary>
            <returns>
            true if this IAction can be executed;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Actions.BaseAction.GetDescription">
            <summary>
            Gets a localized description text of this IAction.
            </summary>
            <returns>
            The localized description of this IAction.
            </returns>
        </member>
        <member name="M:Zelda.Actions.BaseAction.Serialize(Atom.Storage.ISerializationContext)">
            <summary>
            Serializes this IStoreable object using the given ISerializationContext.
            </summary>
            <param name="context">
            Provides access to the mechanisms required to serialize this IStoreable object.
            </param>
        </member>
        <member name="M:Zelda.Actions.BaseAction.Deserialize(Atom.Storage.IDeserializationContext)">
            <summary>
            Deserializes this IStoreable object using the given IDeserializationContext.
            </summary>
            <param name="context">
            Provides access to the mechanisms required to deserialize this IStoreable object.
            </param>
        </member>
        <member name="T:Zelda.Actions.Design.ActionEditor">
            <summary>
            Implements an ObjectSelectionEditor that provides a mechanism
            that allows the user to select a Faction.
            </summary>
        </member>
        <member name="M:Zelda.Actions.Design.ActionEditor.GetTypes">
            <summary>
            Gets the types that the user can select in this BaseTypeSelectionEditor.
            </summary>
            <returns>
            The types the user can select.
            </returns>
        </member>
        <member name="F:Zelda.Actions.Design.ActionEditor.types">
            <summary>
            Enumerates the types that can be created by this ActionEditor.
            </summary>
        </member>
        <member name="T:Zelda.Actions.Scene.ExecuteEventAction">
            <summary>
            Implements an action that triggers an event. The event must support null objects.
            </summary>
        </member>
        <member name="P:Zelda.Actions.Scene.ExecuteEventAction.Event">
            <summary>
            Gets or sets the event that will be triggered.
            </summary>
        </member>
        <member name="M:Zelda.Actions.Scene.ExecuteEventAction.Execute">
            <summary>
            Executes this IAction.
            </summary>
        </member>
        <member name="M:Zelda.Actions.Scene.ExecuteEventAction.Dexecute">
            <summary>
            Deferredly undoes this IAction.
            </summary>
        </member>
        <member name="M:Zelda.Actions.Scene.ExecuteEventAction.Serialize(Atom.Storage.ISerializationContext)">
            <summary>
            Serializes this IStoreable object using the given ISerializationContext.
            </summary>
            <param name="context">
            Provides access to the mechanisms required to serialize this IStoreable object.
            </param>
        </member>
        <member name="M:Zelda.Actions.Scene.ExecuteEventAction.Deserialize(Atom.Storage.IDeserializationContext)">
            <summary>
            Deserializes this IStoreable object using the given IDeserializationContext.
            </summary>
            <param name="context">
            Provides access to the mechanisms required to deserialize this IStoreable object.
            </param>
        </member>
        <member name="T:Zelda.Actions.Scene.ActivateEntityAction">
            <summary>
            Represents an action that when executed activates a specific entity.
            </summary>
            <seealso cref="T:Zelda.IActivatable"/>
        </member>
        <member name="P:Zelda.Actions.Scene.ActivateEntityAction.EntityName">
            <summary>
            Gets or sets the name that uniquely identifies the entity
            which gets activated by this ActivateEntityAction.
            </summary>
        </member>
        <member name="P:Zelda.Actions.Scene.ActivateEntityAction.RetainsState">
            <summary>
            Gets or sets a value indicating whether the entity keeps activated
            even after re-loading the game.
            </summary>
            <remarks>
            This is done by saving the Activatable State in the save file.
            </remarks>
        </member>
        <member name="M:Zelda.Actions.Scene.ActivateEntityAction.Execute">
            <summary>
            Executes this ActivateEntityAction.
            </summary>
        </member>
        <member name="M:Zelda.Actions.Scene.ActivateEntityAction.Dexecute">
            <summary>
            Deferredly undoes this IAction.
            </summary>
        </member>
        <member name="M:Zelda.Actions.Scene.ActivateEntityAction.SetState(System.Boolean)">
            <summary>
            Sets the IsAvtive state to the given value.
            </summary>
            <param name="state">
            The value to set.
            </param>
        </member>
        <member name="M:Zelda.Actions.Scene.ActivateEntityAction.RetainState(System.Boolean,Zelda.Saving.SceneStatus)">
            <summary>
            Retains the activated state of the entity by writing it to the save file.
            </summary>
            <param name="state">
            The state to set.
            </param>
            <param name="sceneStatus">
            Stores the current status of the scene.
            </param>
        </member>
        <member name="M:Zelda.Actions.Scene.ActivateEntityAction.Serialize(Atom.Storage.ISerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Actions.Scene.ActivateEntityAction.Deserialize(Atom.Storage.IDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="T:Zelda.Actions.Scene.BaseSceneAction">
            <summary>
            Represents an abstract base implementation of the IAction interface
            that provides conviniant methods for manipulating the current ZeldaScene.
            </summary>
        </member>
        <member name="P:Zelda.Actions.Scene.BaseSceneAction.Scene">
            <summary>
            Gets the currently active ZeldaScene.
            </summary>
        </member>
        <member name="T:Zelda.Actions.Player.BasePlayerAction">
            <summary>
            Represents an abstract base implementation of the IAction interface
            that provides conviniant methods for manipulating the current PlayerEntity.
            </summary>
        </member>
        <member name="P:Zelda.Actions.Player.BasePlayerAction.Player">
            <summary>
            Gets the currently active PlayerEntity.
            </summary>
        </member>
        <member name="P:Zelda.Actions.Player.BasePlayerAction.Statable">
            <summary>
            Gets the <see cref="T:Zelda.Status.ExtendedStatable"/> of the PlayerEntity.
            </summary>
        </member>
        <member name="T:Zelda.Actions.Player.ResetAction">
            <summary>
            Represents the base class for both the StatReset and TalentReset actions.
            </summary>
        </member>
        <member name="P:Zelda.Actions.Player.ResetAction.LevelToRubyFactor">
            <summary>
            The number of rubies resetting costs per character level.
            </summary>
        </member>
        <member name="M:Zelda.Actions.Player.ResetAction.#ctor">
            <summary>
            Initializes a new instance of the ResetAction class.
            </summary>
        </member>
        <member name="M:Zelda.Actions.Player.ResetAction.Dexecute">
            <summary>
            This method is not supported by this ResetAction.
            </summary>
        </member>
        <member name="M:Zelda.Actions.Player.ResetAction.GetRubyCost(Zelda.Status.Statable)">
            <summary>
            Gets the number of rubies resetting would cost.
            </summary>
            <param name="statble">
            The statble component of the player.
            </param>
            <returns>
            The number of rubies resetting the stat points would cost.
            </returns>
        </member>
        <member name="M:Zelda.Actions.Player.ResetAction.Execute">
            <summary>
            Executes this StatResetAction.
            </summary>
        </member>
        <member name="M:Zelda.Actions.Player.ResetAction.ActuallyReset">
            <summary>
            Executes the actual resetting logic.
            </summary>
        </member>
        <member name="M:Zelda.Actions.Player.ResetAction.CanExecute">
            <summary>
            Gets a value indicating whether this IAction can be executed.
            </summary>
            <returns>
            true if this IAction can be executed;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Actions.Player.ResetAction.Serialize(Atom.Storage.ISerializationContext)">
            <summary>
            Serializes this IStoreable object using the given ISerializationContext.
            </summary>
            <param name="context">
            Provides access to the mechanisms required to serialize this IStoreable object.
            </param>
        </member>
        <member name="M:Zelda.Actions.Player.ResetAction.Deserialize(Atom.Storage.IDeserializationContext)">
            <summary>
            Deserializes this IStoreable object using the given IDeserializationContext.
            </summary>
            <param name="context">
            Provides access to the mechanisms required to deserialize this IStoreable object.
            </param>
        </member>
        <member name="T:Zelda.Actions.Player.StatResetAction">
            <summary>
            Resets the stats of the current player.
            </summary>
        </member>
        <member name="P:Zelda.Actions.Player.StatResetAction.StatPoints">
            <summary>
            Gets the number of stat points that would be
            returned to the player.
            </summary>
        </member>
        <member name="M:Zelda.Actions.Player.StatResetAction.ActuallyReset">
            <summary>
            Executes the actual resetting logic.
            </summary>
        </member>
        <member name="M:Zelda.Actions.Player.StatResetAction.CanExecute">
            <summary>
            Gets a value indicating whether this IAction can be executed.
            </summary>
            <returns>
            true if this IAction can be executed;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Actions.Player.StatResetAction.GetDescription">
            <summary>
            Gets a localized description text of this IAction.
            </summary>
            <returns>
            The localized description of this IAction.
            </returns>
        </member>
        <member name="T:Zelda.Actions.Player.TalentResetAction">
            <summary>
            Resets the stats of the current player.
            </summary>
        </member>
        <member name="P:Zelda.Actions.Player.TalentResetAction.TalentPoints">
            <summary>
            Gets the number of talent points that would be
            returned to the player.
            </summary>
        </member>
        <member name="M:Zelda.Actions.Player.TalentResetAction.ActuallyReset">
            <summary>
            Executes the actual resetting logic.
            </summary>
        </member>
        <member name="M:Zelda.Actions.Player.TalentResetAction.CanExecute">
            <summary>
            Gets a value indicating whether this IAction can be executed.
            </summary>
            <returns>
            true if this IAction can be executed;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Actions.Player.TalentResetAction.GetDescription">
            <summary>
            Gets a localized description text of this IAction.
            </summary>
            <returns>
            The localized description of this IAction.
            </returns>
        </member>
        <member name="T:Zelda.Actions.Player.TeachSharedChestTierAction">
            <summary>
            Implements an action that teaches the player a new Shared Chest Tier,
            unless he has already learned it.
            </summary>
        </member>
        <member name="P:Zelda.Actions.Player.TeachSharedChestTierAction.UpgradeFrom">
            <summary>
            Gets or sets the <see cref="T:Zelda.Items.SharedChestTier"/> that is required for this action
            to have effect and upgrade the current tier of the players shared chest.
            </summary>
        </member>
        <member name="M:Zelda.Actions.Player.TeachSharedChestTierAction.CanExecute">
            <summary>
            Gets a value indicating whether this TeachSharedChestTierAction can be executed.
            </summary>
            <returns>
            true if this TeachSharedChestTierAction can be executed;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Actions.Player.TeachSharedChestTierAction.Execute">
            <summary>
            Executes this TeachSharedChestTierAction.
            </summary>
        </member>
        <member name="M:Zelda.Actions.Player.TeachSharedChestTierAction.Dexecute">
            <summary>
            Deferredly undoes this IAction.
            </summary>
        </member>
        <member name="M:Zelda.Actions.Player.TeachSharedChestTierAction.GetDescription">
            <summary>
            Gets a localized description text of this TeachSharedChestTierAction.
            </summary>
            <returns>
            The localized description of this TeachSharedChestTierAction.
            </returns>
        </member>
        <member name="M:Zelda.Actions.Player.TeachSharedChestTierAction.Serialize(Atom.Storage.ISerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Actions.Player.TeachSharedChestTierAction.Deserialize(Atom.Storage.IDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="T:Zelda.Actions.UI.BaseUserInterfaceAction">
            <summary>
            Represents an abstract base implementation of the IAction interface
            that provides conviniant methods for manipulating the current ZeldaUserInterface.
            </summary>
        </member>
        <member name="P:Zelda.Actions.UI.BaseUserInterfaceAction.UserInterface">
            <summary>
            Gets the currently active ZeldaUserInterface.
            </summary>
        </member>
        <member name="T:Zelda.Actions.UI.OpenSharedChestAction">
            <summary>
            Implements an action that when executed opens the UI for the <see cref="T:Zelda.Items.SharedChest"/>.
            </summary>
        </member>
        <member name="M:Zelda.Actions.UI.OpenSharedChestAction.Execute">
            <summary>
            Executes this OpenSharedChestAction.
            </summary>
        </member>
        <member name="M:Zelda.Actions.UI.OpenSharedChestAction.Dexecute">
            <summary>
            Deferredly undoes this IAction.
            </summary>
        </member>
        <member name="T:Zelda.Attacks.Attack">
            <summary>
            Represents the base-class of all <see cref="T:Zelda.Attacks.Attack"/>s.
            </summary>
        </member>
        <member name="P:Zelda.Attacks.Attack.Owner">
            <summary>
            Gets or sets the <see cref="T:Zelda.Entities.ZeldaEntity"/> that owns this <see cref="T:Zelda.Attacks.Attack"/>.
            </summary>
            <exception cref="T:Atom.Components.ComponentNotFoundException">
            Set: If the given ZeldaEntity doesn't own the Statable component.
            </exception>
        </member>
        <member name="P:Zelda.Attacks.Attack.OwnerAttackable">
            <summary>
            Gets the <see cref="T:Zelda.Entities.Components.Attackable"/> component of the Owner of this Attack.
            </summary>
        </member>
        <member name="P:Zelda.Attacks.Attack.DamageMethod">
            <summary>
            Gets or sets the <see cref="T:Zelda.Attacks.AttackDamageMethod"/> which is used
            to calculate the damage done by this <see cref="T:Zelda.Attacks.Attack"/>.
            </summary>
        </member>
        <member name="P:Zelda.Attacks.Attack.Limiter">
            <summary>
            Gets or sets the <see cref="T:Zelda.Attacks.Limiter.IAttackLimiter"/> that is used to limit this Attack.
            </summary>
        </member>
        <member name="P:Zelda.Attacks.Attack.IsAttacking">
            <summary>
            Gets a value indicating whether <see cref="T:Zelda.Attacks.Attack"/> the attack is currently in use.
            </summary>
        </member>
        <member name="P:Zelda.Attacks.Attack.IsReady">
            <summary>
            Gets a value indicating whether this <see cref="T:Zelda.Attacks.Attack"/> can be used;
            regarding the state of its cooldown.
            </summary>
        </member>
        <member name="P:Zelda.Attacks.Attack.IsUseable">
            <summary>
            Gets a value indicating whether this <see cref="T:Zelda.Attacks.Attack"/> is useable depending on the state of its owner.
            E.g. one usually can't use an attack while swimming, or if there is not enough mana to use it.
            </summary>
        </member>
        <member name="P:Zelda.Attacks.Attack.Statable">
            <summary>
            Gets the <see cref="P:Zelda.Attacks.Attack.Statable"/> component of the <see cref="T:Zelda.Entities.ZeldaEntity"/>
            that owns this <see cref="T:Zelda.Attacks.Attack"/>.
            </summary>
        </member>
        <member name="P:Zelda.Attacks.Attack.Transform">
            <summary>
            Gets the <see cref="T:Zelda.Entities.Components.ZeldaTransform"/> component of the <see cref="T:Zelda.Entities.ZeldaEntity"/>
            that owns this <see cref="T:Zelda.Attacks.Attack"/>.
            </summary>
        </member>
        <member name="P:Zelda.Attacks.Attack.ServiceProvider">
            <summary>
            Gets the object that provides fast access to game-related services.
            </summary>
        </member>
        <member name="P:Zelda.Attacks.Attack.Rand">
            <summary>
            Gets a random number generator.
            </summary>
        </member>
        <member name="M:Zelda.Attacks.Attack.#ctor(Zelda.Entities.ZeldaEntity,Zelda.Attacks.AttackDamageMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Attacks.Attack"/> class.
            </summary>
            <param name="owner">
            The entity that owns the new ZeldaEntity.
            </param>
            <param name="method">
            The AttackDamageMethod that calculates the damage the new Attack does. 
            </param>
        </member>
        <member name="M:Zelda.Attacks.Attack.Fire(Zelda.Entities.Components.Attackable)">
            <summary>
            Fires the attack at the given <paramref name="target"/>,
            if possible.
            </summary>
            <param name="target">
            The target of the attack.
            </param>
            <returns>
            true if the Attack was executed, otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Attacks.Attack.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this <see cref="T:Zelda.Attacks.Attack"/>.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Attacks.Attack.Setup(Zelda.IZeldaServiceProvider)">
            <summary>
            Setups this <see cref="T:Zelda.Attacks.Attack"/>
            </summary>
            <param name="serviceProvider">
            Provides fast access to game related services.
            </param>
        </member>
        <member name="M:Zelda.Attacks.Attack.OnFiredAgainst(Zelda.Entities.Components.Attackable)">
            <summary>
            Called when this Attack has been fired against the specified target.
            </summary>
            <param name="target">
            The traget of the attack.
            </param>
        </member>
        <member name="M:Zelda.Attacks.Attack.OnFiring">
            <summary>
            Called when this Attack ist just firing; e.g. before all possible targets have been checked.
            </summary>
        </member>
        <member name="M:Zelda.Attacks.Attack.OnFired">
            <summary>
            Called when this Attack has been fired; e.g. after all possible targets have been checked.
            </summary>
        </member>
        <member name="M:Zelda.Attacks.Attack.ShouldFireAgainst(Zelda.Entities.Components.Attackable)">
            <summary>
            Gets a value indicating whether this Attack should fire
            against the specified target.
            </summary>
            <param name="target">
            The traget of the attack.
            </param>
            <returns>
            true if it can and should fire;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Attacks.Attack.ShouldFire">
            <summary>
            Gets a value indicating whether this Attack should fire.
            </summary>
            <returns>
            true if it can and should fire;
            otherwise false.
            </returns>
        </member>
        <member name="F:Zelda.Attacks.Attack.limiter">
            <summary>
            the <see cref="T:Zelda.Attacks.Limiter.IAttackLimiter"/> that is used to limit this Attack.
            </summary>
        </member>
        <member name="F:Zelda.Attacks.Attack.owner">
            <summary>
            The ZeldaEntity that owns this <see cref="T:Zelda.Attacks.Attack"/>.
            </summary>
        </member>
        <member name="F:Zelda.Attacks.Attack.statable">
            <summary>
            Identifies the <see cref="P:Zelda.Attacks.Attack.Statable"/> component of the <see cref="T:Zelda.Entities.ZeldaEntity"/>
            that owns this <see cref="T:Zelda.Attacks.Attack"/>.
            </summary>
        </member>
        <member name="F:Zelda.Attacks.Attack.transform">
            <summary>
            Identifies the <see cref="T:Zelda.Entities.Components.ZeldaTransform"/> component of the <see cref="T:Zelda.Entities.ZeldaEntity"/>
            that owns this <see cref="T:Zelda.Attacks.Attack"/>.
            </summary>
        </member>
        <member name="F:Zelda.Attacks.Attack.attackable">
            <summary>
            Idenitfies the Attackable component of the Owner of this Attack.
            </summary>
        </member>
        <member name="F:Zelda.Attacks.Attack.serviceProvider">
            <summary>
            Provides fast-access to game-related services.
            </summary>
        </member>
        <member name="T:Zelda.Attacks.AttackDamageMethod">
            <summary>
            Specifies the interface of a method that is used to calculate
            the damage of a specific attack-way.
            </summary>
        </member>
        <member name="M:Zelda.Attacks.AttackDamageMethod.GetDamageDone(Zelda.Status.Statable,Zelda.Status.Statable)">
            <summary>
            Calculates the damage done by the <paramref name="user"/> on the <paramref name="target"/>
            using this <see cref="T:Zelda.Attacks.AttackDamageMethod"/>.
            </summary>
            <param name="user">The user of the attack.</param>
            <param name="target">The target of the attack.</param>
            <returns>The calculated result.</returns>
        </member>
        <member name="M:Zelda.Attacks.AttackDamageMethod.NotifyCallerChanged(System.Object)">
            <summary>
            Notifies this AttackDamageMethod that it is going to be used 
            by an object.
            </summary>
            <param name="caller">
            The object which is going to call this AttackDamageMethod.
            </param>
        </member>
        <member name="M:Zelda.Attacks.AttackDamageMethod.OnCallerChanged(System.Object)">
            <summary>
            Gets called just before this AttackDamageMethod is used by
            a new calling object.
            </summary>
            <param name="caller">
            The object which is going to call this AttackDamageMethod.
            </param>
        </member>
        <member name="M:Zelda.Attacks.AttackDamageMethod.Setup(Zelda.IZeldaServiceProvider)">
            <summary>
            Setups this <see cref="T:Zelda.Attacks.AttackDamageMethod"/>.
            </summary>
            <remarks>
            Called after the <see cref="T:Zelda.Attacks.AttackDamageMethod"/> has been created.
            </remarks>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Attacks.AttackDamageMethod.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Attacks.AttackDamageMethod.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Attacks.AttackDamageMethod.rand">
            <summary>
            A random number generator.
            </summary>
        </member>
        <member name="T:Zelda.Attacks.AttackDamageResult">
            <summary>
            Encapsulates the damage result of an attack.
            </summary>
        </member>
        <member name="F:Zelda.Attacks.AttackDamageResult.Damage">
            <summary>
            The amount of damage that was done.
            </summary>
        </member>
        <member name="F:Zelda.Attacks.AttackDamageResult.AttackReceiveType">
            <summary>
            States how the damage was received.
            </summary>
        </member>
        <member name="F:Zelda.Attacks.AttackDamageResult.WasBlocked">
            <summary>
            States whether the attack was blocked.
            </summary>
        </member>
        <member name="F:Zelda.Attacks.AttackDamageResult.DamageTypeInfo">
            <summary>
            Descripes the exact type of the damage that has been inflicted.
            </summary>
        </member>
        <member name="M:Zelda.Attacks.AttackDamageResult.#ctor(System.Int32,Zelda.Attacks.AttackReceiveType)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Attacks.AttackDamageResult"/> structure.
            </summary>
            <param name="damage">
            The amount of damage that was done.
            </param>
            <param name="attackReceiveType">
            States how the attack was received.
            </param>
        </member>
        <member name="M:Zelda.Attacks.AttackDamageResult.#ctor(System.Int32,Zelda.Attacks.AttackReceiveType,Zelda.Status.Damage.DamageTypeInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Attacks.AttackDamageResult"/> structure.
            </summary>
            <param name="damage">
            The amount of damage that was done.
            </param>
            <param name="attackReceiveType">
            States how the attack was received.
            </param>
            <param name="damageTypeInfo">
            Descripes the exact type of the damage that has been inflicted.
            </param>
        </member>
        <member name="M:Zelda.Attacks.AttackDamageResult.#ctor(System.Int32,Zelda.Attacks.AttackReceiveType,System.Boolean,Zelda.Status.Damage.DamageTypeInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Attacks.AttackDamageResult"/> structure.
            </summary>
            <param name="damage">
            The amount of damage that was done.
            </param>
            <param name="attackReceiveType">
            States how the attack was received.
            </param>
            <param name="wasBlocked">
            States whether the attack was blocked.
            </param>
            <param name="damageTypeInfo">
            Descripes the exact type of the damage that has been inflicted.
            </param>
        </member>
        <member name="M:Zelda.Attacks.AttackDamageResult.CreateResisted(Zelda.Status.Damage.DamageTypeInfo)">
            <summary>
            Creates a new <see cref="T:Zelda.Attacks.AttackDamageResult"/> that represents
            a fully resisted attack.
            </summary>
            <param name="damageTypeInfo">
            Descripes the exact type of the damage that might have been inflicted.
            </param>
            <returns>
            A new AttackDamageResult instance.
            </returns>
        </member>
        <member name="M:Zelda.Attacks.AttackDamageResult.CreateMissed(Zelda.Status.Damage.DamageTypeInfo)">
            <summary>
            Creates a new <see cref="T:Zelda.Attacks.AttackDamageResult"/> that represents
            an attack that has missed.
            </summary>
            <param name="damageTypeInfo">
            Descripes the exact type of the damage that might have been inflicted.
            </param>
            <returns>
            A new AttackDamageResult instance.
            </returns>
        </member>
        <member name="M:Zelda.Attacks.AttackDamageResult.CreateParried(Zelda.Status.Damage.DamageTypeInfo)">
            <summary>
            Creates a new <see cref="T:Zelda.Attacks.AttackDamageResult"/> that represents
            an attack that has been parried.
            </summary>
            <param name="damageTypeInfo">
            Descripes the exact type of the damage that might have been inflicted.
            </param>
            <returns>
            A new AttackDamageResult instance.
            </returns>
        </member>
        <member name="M:Zelda.Attacks.AttackDamageResult.CreateDodged(Zelda.Status.Damage.DamageTypeInfo)">
            <summary>
            Creates a new <see cref="T:Zelda.Attacks.AttackDamageResult"/> that represents
            an attack that has been dodged.
            </summary>
            <param name="damageTypeInfo">
            Descripes the exact type of the damage that might have been inflicted.
            </param>
            <returns>
            A new AttackDamageResult instance.
            </returns>
        </member>
        <member name="M:Zelda.Attacks.AttackDamageResult.Create(System.Int32,System.Boolean,Zelda.Status.Damage.DamageTypeInfo)">
            <summary>
            Creates a new <see cref="T:Zelda.Attacks.AttackDamageResult"/> that represents the normal outcome
            of an arabitary attack.
            </summary>
            <param name="damage">
            The damage that has been inflicted.
            </param>
            <param name="isCrit">
            States whether the attack has critted.
            </param>
            <param name="damageTypeInfo">
            Descripes the exact type of the damage that has been inflicted.
            </param>
            <returns>
            A new AttackDamageResult instance.
            </returns>
        </member>
        <member name="M:Zelda.Attacks.AttackDamageResult.Create(System.Int32,System.Boolean,System.Boolean,Zelda.Status.Damage.DamageTypeInfo)">
            <summary>
            Creates a new <see cref="T:Zelda.Attacks.AttackDamageResult"/> that represents the normal outcome
            of an arabitary attack.
            </summary>
            <param name="damage">
            The damage that has been inflicted.
            </param>
            <param name="isCrit">
            States whether the attack has critted.
            </param>
            <param name="wasBlocked">
            States whether the attack was blocked.
            </param>
            <param name="damageTypeInfo">
            Descripes the exact type of the damage that has been inflicted.
            </param>
            <returns>
            A new AttackDamageResult instance.
            </returns>
        </member>
        <member name="M:Zelda.Attacks.AttackDamageResult.CreateDamageOverTime(System.Int32,Zelda.Status.Damage.DamageTypeInfo)">
            <summary>
            Creates a new <see cref="T:Zelda.Attacks.AttackDamageResult"/> that represents the outcome
            of damage-over-time effect.
            </summary>
            <param name="damage">
            The damage that has been inflicted.
            </param>
            <param name="damageTypeInfo">
            Descripes the exact type of the damage that has been inflicted.
            </param>
            <returns>
            A new AttackDamageResult instance.
            </returns>
        </member>
        <member name="M:Zelda.Attacks.AttackDamageResult.CreateHealed(System.Int32)">
            <summary>
            Creates a new <see cref="T:Zelda.Attacks.AttackDamageResult"/> that represents
            a healing effect.
            </summary>
            <param name="amount">
            The amount that has been read.
            </param>
            <returns>
            A new AttackDamageResult instance.
            </returns>
        </member>
        <member name="M:Zelda.Attacks.AttackDamageResult.Equals(System.Object)">
            <summary>
            Returns whether the given Object is equal to this <see cref="T:Zelda.Attacks.AttackDamageResult"/>.
            </summary>
            <param name="obj">The object to compare this AttackDamageResult instance with.</param>
            <returns>true if they are equal; otherwise false.</returns>
        </member>
        <member name="M:Zelda.Attacks.AttackDamageResult.Equals(Zelda.Attacks.AttackDamageResult)">
            <summary>
            Returns whether the given <see cref="T:Zelda.Attacks.AttackDamageResult"/> is equal to this <see cref="T:Zelda.Attacks.AttackDamageResult"/>.
            </summary>
            <param name="other">The AttackDamageResult to compare this AttackDamageResult instance with.</param>
            <returns>true if they are equal; otherwise false.</returns>
        </member>
        <member name="M:Zelda.Attacks.AttackDamageResult.op_Equality(Zelda.Attacks.AttackDamageResult,Zelda.Attacks.AttackDamageResult)">
            <summary>
            Returns whether the given <see cref="T:Zelda.Attacks.AttackDamageResult"/> instances are equal.
            </summary>
            <param name="left">The AttackDamageResult instance on the left side.</param>
            <param name="right">The AttackDamageResult instance on the right side.</param>
            <returns>true if the given AttackDamageResult instances are equal; otherwise false.</returns>
        </member>
        <member name="M:Zelda.Attacks.AttackDamageResult.op_Inequality(Zelda.Attacks.AttackDamageResult,Zelda.Attacks.AttackDamageResult)">
            <summary>
            Returns whether the given <see cref="T:Zelda.Attacks.AttackDamageResult"/> instances are inequal.
            </summary>
            <param name="left">The AttackDamageResult instance on the left side.</param>
            <param name="right">The AttackDamageResult instance on the right side.</param>
            <returns>true if the given AttackDamageResult instances are inequal; otherwise false.</returns>
        </member>
        <member name="M:Zelda.Attacks.AttackDamageResult.GetHashCode">
            <summary>
            Returns the hash code of this <see cref="T:Zelda.Attacks.AttackDamageResult"/> instance.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Zelda.Attacks.AttackDamageResult.ToString">
            <summary>
            Returns a string representation of this <see cref="T:Zelda.Attacks.AttackDamageResult"/> instance.
            </summary>
            <returns>A string representation of this <see cref="T:Zelda.Attacks.AttackDamageResult"/> instance.</returns>
        </member>
        <member name="T:Zelda.Attacks.AttackReceiveType">
            <summary>
            Enumerates the different possible types
            of how an attack can be received.
            </summary>
        </member>
        <member name="F:Zelda.Attacks.AttackReceiveType.None">
            <summary>
            Indicates that no specific type has been selected.
            </summary>
        </member>
        <member name="F:Zelda.Attacks.AttackReceiveType.Hit">
            <summary>
            Indicates that the attack was a direct hit.
            </summary>
        </member>
        <member name="F:Zelda.Attacks.AttackReceiveType.Crit">
            <summary>
            Indicates that the attack was a critical hit, and as such did extra damage.
            </summary>
        </member>
        <member name="F:Zelda.Attacks.AttackReceiveType.Miss">
            <summary> 
            Indicates that the melee or ranged attack has missed its target.
            </summary>
        </member>
        <member name="F:Zelda.Attacks.AttackReceiveType.Dodge">
            <summary> 
            Indicates that the melee or ranged attack was dodged.
            </summary>
        </member>
        <member name="F:Zelda.Attacks.AttackReceiveType.Parry">
            <summary> 
            Indicates that the melee attack was parried.
            </summary>
        </member>
        <member name="F:Zelda.Attacks.AttackReceiveType.Resisted">
            <summary> 
            Indicates that the attack was resisted.
            </summary>
        </member>
        <member name="F:Zelda.Attacks.AttackReceiveType.PartialResisted">
            <summary> 
            Indicates that the attack was partialy resisted.
            </summary>
        </member>
        <member name="T:Zelda.Attacks.AttackType">
            <summary>
            Enumerates the different attack types.
            </summary>
        </member>
        <member name="F:Zelda.Attacks.AttackType.None">
            <summary>
            Represents no specific attack.
            </summary>
        </member>
        <member name="F:Zelda.Attacks.AttackType.Melee">
            <summary>
            The attack is a melee attack.
            </summary>
        </member>
        <member name="F:Zelda.Attacks.AttackType.Ranged">
            <summary>
            The attack is a ranged attack.
            </summary>
        </member>
        <member name="F:Zelda.Attacks.AttackType.Spell">
            <summary>
            The attack is a magic attack.
            </summary>
        </member>
        <member name="F:Zelda.Attacks.AttackType.All">
            <summary>
            All attack types in one.
            </summary>
        </member>
        <member name="T:Zelda.Attacks.DamageMeter">
            <summary>
            Provides a mechanism to capture the damage done of an <see cref="T:Zelda.Entities.Components.Attackable"/> ZeldaEntity.
            This is a sealed class.
            </summary>
        </member>
        <member name="P:Zelda.Attacks.DamageMeter.AttackerToFollow">
            <summary>
            Gets or sets the <see cref="T:Zelda.Entities.Components.Attackable"/> component of the
            ZeldaEntity to follow.
            </summary>
        </member>
        <member name="P:Zelda.Attacks.DamageMeter.DamagePerSecond">
            <summary>
            Gets the damage done  by the <see cref="P:Zelda.Attacks.DamageMeter.AttackerToFollow"/> in seconds.
            </summary>
        </member>
        <member name="M:Zelda.Attacks.DamageMeter.Reset">
            <summary>
            Resets this DamageMeter.
            </summary>
        </member>
        <member name="M:Zelda.Attacks.DamageMeter.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this DamageMeter.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Attacks.DamageMeter.UpdateReset(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates the reseting logic of this DamageMeter.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Attacks.DamageMeter.OnAttackUsed(System.Object,Zelda.Entities.Components.AttackEventArgs)">
            <summary>
            Gets called when the Entity to follow has used an attack.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
            <param name="e">
            The AttackEventArgs that contain the event data.
            </param>
        </member>
        <member name="M:Zelda.Attacks.DamageMeter.IsSelfAttack(Zelda.Entities.Components.AttackEventArgs@)">
            <summary>
            Gets a value indicating whether the player has attacked himself.
            </summary>
            <remarks>
            This happens for example when using the 'Frustration' skill.
            </remarks>
            <param name="e">
            The AttackEventArgs that contain the event data.
            </param>
            <returns>
            Returns true if the attack was a self-inflicted attack;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Attacks.DamageMeter.Hook">
            <summary>
            Hooks up the connections with the current Attackable.
            </summary>
        </member>
        <member name="M:Zelda.Attacks.DamageMeter.Unhook">
            <summary>
            Un-hooks up the connections with the current Attackable.
            </summary>
        </member>
        <member name="F:Zelda.Attacks.DamageMeter.totalTime">
            <summary>
            The total time that has elapsed since the last reset.
            </summary>
        </member>
        <member name="F:Zelda.Attacks.DamageMeter.totalDamageDone">
            <summary>
            The total damage done since the last reset.
            </summary>
        </member>
        <member name="F:Zelda.Attacks.DamageMeter.timeLeftResetCheck">
            <summary>
            The time in seconds until the next reset check.
            </summary>
        </member>
        <member name="F:Zelda.Attacks.DamageMeter.oldTotalDamage">
            <summary>
            The damage done on the last reset check.
            </summary>
        </member>
        <member name="F:Zelda.Attacks.DamageMeter.attacker">
            <summary>
            Identifies the <see cref="T:Zelda.Entities.Components.Attackable"/> component of the
            ZeldaEntity to follow.
            </summary>
        </member>
        <member name="T:Zelda.Attacks.HitEffects.DamageOverTimeAttackHitEffect">
            <summary>
            An <see cref="T:Zelda.Attacks.IAttackHitEffect"/> that applies a damage over time(DOT)
            effect on the target.
            This class can't be inherited.
            </summary>
            <seealso cref="T:Zelda.Status.Auras.DamageOverTimeAura"/>
        </member>
        <member name="M:Zelda.Attacks.HitEffects.DamageOverTimeAttackHitEffect.#ctor(Zelda.Status.Auras.DamageOverTimeAura,Zelda.Attacks.AttackDamageMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Attacks.HitEffects.DamageOverTimeAttackHitEffect"/> class.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="aura"/> or <paramref name="method"/> is null.
            </exception>
            <param name="aura">
            The aura that is applied on Hit
            </param>
            <param name="method">
            The AttackDamageMethod that is used to calculate damage done.
            </param>
        </member>
        <member name="M:Zelda.Attacks.HitEffects.DamageOverTimeAttackHitEffect.OnHit(Zelda.Status.Statable,Zelda.Status.Statable)">
            <summary>
            Called when the attack hits.
            </summary>
            <param name="user">
            The user of the attack.
            </param>
            <param name="target">
            The target of the attack.
            </param>
        </member>
        <member name="M:Zelda.Attacks.HitEffects.DamageOverTimeAttackHitEffect.HasAttackMissed(Zelda.Attacks.AttackDamageResult@)">
            <summary>
            Gets a value indcating whether the specified attakc has resisted, missed or dodged.
            </summary>
            <param name="results"></param>
            <returns></returns>
        </member>
        <member name="F:Zelda.Attacks.HitEffects.DamageOverTimeAttackHitEffect.method">
            <summary>
            The AttackDamageMethod that is used to calculate damage done.
            </summary>
        </member>
        <member name="F:Zelda.Attacks.HitEffects.DamageOverTimeAttackHitEffect.aura">
            <summary>
            The aura that is applied on Hit
            </summary>
        </member>
        <member name="T:Zelda.Attacks.HitEffects.UniqueTimedAuraAttackHitEffectWrapper">
            <summary>
            Defines an IAttackHitEffect that wraps around another IAttackHitEffect;
            redirecting calls to IAttackHitEffect.OnHit to the wrapped IAttackEffect
            if and only if a specific TimedAura isn't yet present on the target statable.
            If this is not the case the duration of the TimedAura is reset.
            This class can't be inherited.
            </summary>
        </member>
        <member name="M:Zelda.Attacks.HitEffects.UniqueTimedAuraAttackHitEffectWrapper.#ctor(Zelda.Status.TimedAura,Zelda.Attacks.IAttackHitEffect)">
            <summary>
            Initializes a new instance of the UniqueTimedAuraAttackHitEffectWrapper class.
            </summary>
            <param name="aura">
            The aura that may not be present on the target aura for the wrappedEffect to be executed.
            </param>
            <param name="wrappedEffect">
            The IAttackHitEffect the new UniqueTimedAuraAttackHitEffectWrapper wraps around.
            </param>
        </member>
        <member name="M:Zelda.Attacks.HitEffects.UniqueTimedAuraAttackHitEffectWrapper.OnHit(Zelda.Status.Statable,Zelda.Status.Statable)">
            <summary>
            Called when the effect is to be applied.
            </summary>
            <param name="user">
            The user of the attack.
            </param>
            <param name="target">
            The target of the attack.
            </param>
        </member>
        <member name="F:Zelda.Attacks.HitEffects.UniqueTimedAuraAttackHitEffectWrapper.aura">
            <summary>
            The aura that may not be present on the target aura for the wrappedEffect to be execute
            </summary>
        </member>
        <member name="F:Zelda.Attacks.HitEffects.UniqueTimedAuraAttackHitEffectWrapper.wrappedEffect">
            <summary>
            The IAttackHitEffect this UniqueTimedAuraAttackHitEffectWrapper wraps around.
            </summary>
        </member>
        <member name="T:Zelda.Attacks.IAttackHitEffect">
            <summary>
            An effect that is applied to an object which got hit by an attack.
            </summary>
        </member>
        <member name="M:Zelda.Attacks.IAttackHitEffect.OnHit(Zelda.Status.Statable,Zelda.Status.Statable)">
            <summary>
            Called when the effect is to be applied.
            </summary>
            <param name="user">
            The user of the attack.
            </param>
            <param name="target">
            The target of the attack.
            </param>
        </member>
        <member name="T:Zelda.Attacks.IProjectileAttack">
            <summary>
            Represents an attack that fires <see cref="T:Zelda.Entities.Projectiles.Projectile"/>s.
            </summary>
        </member>
        <member name="E:Zelda.Attacks.IProjectileAttack.ProjectileFired">
            <summary>
            Fired when a Projectile has been fired by this IProjectileAttack.
            </summary>
        </member>
        <member name="P:Zelda.Attacks.IProjectileAttack.Settings">
            <summary>
            Gets the <see cref="T:Zelda.Entities.Projectiles.ProjectileSettings"/> that control the
            Projectiles fired by this IProjectileAttack.
            </summary>
        </member>
        <member name="P:Zelda.Attacks.IProjectileAttack.HitSettings">
            <summary>
            Gets or sets the ProjectileHitSettings that is used for all Projectiles
            fired by this IProjectileAttack.
            </summary>        
        </member>
        <member name="T:Zelda.Attacks.Limiter.FreelyFireNtimesThenTimedAttackLimiter">
            <summary>
            Defins an IAttackLimiter that freely allows attacks to be used
            N times before it goes on a cooldown.
            </summary>
        </member>
        <member name="P:Zelda.Attacks.Limiter.FreelyFireNtimesThenTimedAttackLimiter.CanAttackFreely">
            <summary>
            Gets a value indicating whether attacks limited by this FreelyFireNtimesThenTimedAttackLimiter can be used freely. 
            </summary>
        </member>
        <member name="P:Zelda.Attacks.Limiter.FreelyFireNtimesThenTimedAttackLimiter.IsAllowed">
            <summary>
            Gets a value indicating whether attacking in general is allowed.
            </summary>
            <value>
            true if it is allowed;
            otherwise false.
            </value>
        </member>
        <member name="M:Zelda.Attacks.Limiter.FreelyFireNtimesThenTimedAttackLimiter.#ctor(System.Int32,Zelda.Cooldown)">
            <summary>
            Initializes a new instance of the FreelyFireNtimesThenTimedAttackLimiter class.
            </summary>
            <param name="maximumTimesAttackCanBeUsedBeforeCooldown">
            The number of times the attack can be freely used before it goes on cooldown.
            </param>
            <param name="cooldown">
            The cooldown to apply after the attack has been used.
            </param>
        </member>
        <member name="M:Zelda.Attacks.Limiter.FreelyFireNtimesThenTimedAttackLimiter.IsAllowedOn(Zelda.Status.Statable)">
            <summary>
            Gets a value indicating whether attacking the specified <paramref name="target"/>
            is allowed.
            </summary>
            <param name="target">
            The target of the attack.
            </param>
            <returns>
            true if it is allowed;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Attacks.Limiter.FreelyFireNtimesThenTimedAttackLimiter.OnAttackFired">
            <summary>
            Called when an attack that might be limited by this IAttackLimiter
            has been used.
            </summary>
        </member>
        <member name="M:Zelda.Attacks.Limiter.FreelyFireNtimesThenTimedAttackLimiter.OnAttackHit(Zelda.Status.Statable)">
            <summary>
            Called when an attack that might be limited by this IAttackLimiter
            has been used on a specific target.
            </summary>
            <param name="target">
            The target of the attack.
            </param>
        </member>
        <member name="M:Zelda.Attacks.Limiter.FreelyFireNtimesThenTimedAttackLimiter.Reset">
            <summary>
            Resets this FreelyFireNtimesThenTimedAttackLimiter.
            </summary>
        </member>
        <member name="M:Zelda.Attacks.Limiter.FreelyFireNtimesThenTimedAttackLimiter.Clone">
            <summary>
            Returns a clone of this FreelyFireNtimesThenTimedAttackLimiter.
            </summary>
            <returns>
            The cloned IAttackLimiter.
            </returns>
        </member>
        <member name="M:Zelda.Attacks.Limiter.FreelyFireNtimesThenTimedAttackLimiter.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this FreelyFireNtimesThenTimedAttackLimiter.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="T:Zelda.Attacks.Limiter.IAttackLimiter">
            <summary>
            Provides a mechanism that limits the usage of an <see cref="T:Zelda.Attacks.Attack"/>.
            </summary>
        </member>
        <member name="P:Zelda.Attacks.Limiter.IAttackLimiter.IsAllowed">
            <summary>
            Gets a value indicating whether attacking in general is allowed.
            </summary>
            <value>
            true if it is allowed;
            otherwise false.
            </value>
        </member>
        <member name="M:Zelda.Attacks.Limiter.IAttackLimiter.IsAllowedOn(Zelda.Status.Statable)">
            <summary>
            Gets a value indicating whether attacking the specified <paramref name="target"/>
            is allowed.
            </summary>
            <param name="target">
            The target of the attack.
            </param>
            <returns>
            true if it is allowed;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Attacks.Limiter.IAttackLimiter.OnAttackFired">
            <summary>
            Called when an attack that might be limited by this IAttackLimiter
            has been used.
            </summary>
        </member>
        <member name="M:Zelda.Attacks.Limiter.IAttackLimiter.OnAttackHit(Zelda.Status.Statable)">
            <summary>
            Called when an attack that might be limited by this IAttackLimiter
            has been used on a specific target.
            </summary>
            <param name="target">
            The target of the attack.
            </param>
        </member>
        <member name="M:Zelda.Attacks.Limiter.IAttackLimiter.Reset">
            <summary>
            Resets this IAttackLimiter to its initial state.
            </summary>
        </member>
        <member name="M:Zelda.Attacks.Limiter.IAttackLimiter.Clone">
            <summary>
            Returns a clone of this IAttackLimiter.
            </summary>
            <returns>
            The cloned IAttackLimiter.
            </returns>
        </member>
        <member name="T:Zelda.Attacks.Limiter.InitiallyLimitThenRedirectToOtherAttackLimiter">
            <summary>
            Defines an IAttackLimiter that initially limits attacks for a specified amount
            of time and then redirects calls to another <see cref="T:Zelda.Attacks.Limiter.IAttackLimiter"/>.
            This class can't be inherited.
            </summary>
        </member>
        <member name="M:Zelda.Attacks.Limiter.InitiallyLimitThenRedirectToOtherAttackLimiter.#ctor(System.Single,Zelda.Attacks.Limiter.IAttackLimiter)">
            <summary>
            Initializes a new instance of the InitiallyLimitThenRedirectToOtherAttackLimiter class.
            </summary>
            <param name="totalTimeLimited">
            The time attacks are limited for initially.
            </param>
            <param name="otherLimiter">
            The IAttackLimiter calls to thew new InitiallyLimitThenRedirectToOtherAttackLimiter are redirected
            to after the initial limitation.
            </param>
        </member>
        <member name="P:Zelda.Attacks.Limiter.InitiallyLimitThenRedirectToOtherAttackLimiter.IsAllowed">
            <summary>
            Gets a value indicating whether attacking in general is allowed.
            </summary>
            <value>
            true if it is allowed;
            otherwise false.
            </value>
        </member>
        <member name="P:Zelda.Attacks.Limiter.InitiallyLimitThenRedirectToOtherAttackLimiter.IsInitiallyLimited">
            <summary>
            Gets a value indicating whether this InitiallyLimitThenRedirectToOtherAttackLimiter is in the initial
            phase of limiting all attacks.
            </summary>
        </member>
        <member name="M:Zelda.Attacks.Limiter.InitiallyLimitThenRedirectToOtherAttackLimiter.IsAllowedOn(Zelda.Status.Statable)">
            <summary>
            Gets a value indicating whether attacking the specified <paramref name="target"/>
            is allowed.
            </summary>
            <param name="target">
            The target of the attack.
            </param>
            <returns>
            true if it is allowed;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Attacks.Limiter.InitiallyLimitThenRedirectToOtherAttackLimiter.OnAttackFired">
            <summary>
            Called when an attack that might be limited by this IAttackLimiter
            has been used.
            </summary>
        </member>
        <member name="M:Zelda.Attacks.Limiter.InitiallyLimitThenRedirectToOtherAttackLimiter.Reset">
            <summary>
            Resets this IAttackLimiter to its initial state.
            </summary>
        </member>
        <member name="M:Zelda.Attacks.Limiter.InitiallyLimitThenRedirectToOtherAttackLimiter.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this TimedAttackLimiter.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Attacks.Limiter.InitiallyLimitThenRedirectToOtherAttackLimiter.OnAttackHit(Zelda.Status.Statable)">
            <summary>
            Called when an attack that might be limited by this IAttackLimiter
            has been used on a specific target.
            </summary>
            <param name="target">
            The target of the attack.
            </param>
        </member>
        <member name="M:Zelda.Attacks.Limiter.InitiallyLimitThenRedirectToOtherAttackLimiter.Clone">
            <summary>
            Returns a clone of this TimedAttackLimiter.
            </summary>
            <returns>
            The cloned IAttackLimiter.
            </returns>
        </member>
        <member name="F:Zelda.Attacks.Limiter.InitiallyLimitThenRedirectToOtherAttackLimiter.timeLeftLimited">
            <summary>
            The time left this IAttackLimiter initially limits all attacks.
            </summary>
        </member>
        <member name="F:Zelda.Attacks.Limiter.InitiallyLimitThenRedirectToOtherAttackLimiter.totalTimeLimited">
            <summary>
            The total time this IAttackLimiter initially limits.
            </summary>
        </member>
        <member name="F:Zelda.Attacks.Limiter.InitiallyLimitThenRedirectToOtherAttackLimiter.otherLimiter">
            <summary>
            The other IAttackLimiter this IAttackLimiter redirects to once the initial limitation time has passed.
            </summary>
        </member>
        <member name="T:Zelda.Attacks.Limiter.MeleeAttackSpeedBasedAttackLimiter">
            <summary>
            Limits the usage of an Attack for <see cref="P:Zelda.Status.Statable.AttackSpeedMelee"/> seconds
            after the Attack has fired.
            </summary>
        </member>
        <member name="M:Zelda.Attacks.Limiter.MeleeAttackSpeedBasedAttackLimiter.#ctor(Zelda.Status.Statable)">
            <summary>
            Initializes a new instance of the MeleeAttackSpeedBasedAttackLimiter clas.
            </summary>
            <param name="statable">
            The statable component of the entity that owns the attack
            that is limited by the new MeleeAttackSpeedBasedAttackLimiter.
            </param>
        </member>
        <member name="P:Zelda.Attacks.Limiter.MeleeAttackSpeedBasedAttackLimiter.AttackDelay">
            <summary>
            Gets the time it takes until the Attack can go off again.
            </summary>
        </member>
        <member name="M:Zelda.Attacks.Limiter.MeleeAttackSpeedBasedAttackLimiter.Clone">
            <summary>
            This operation is not supported.
            </summary>
            <returns>
            The cloned IAttackLimiter.
            </returns>
        </member>
        <member name="F:Zelda.Attacks.Limiter.MeleeAttackSpeedBasedAttackLimiter.statable">
            <summary>
            The statable component of the entity that owns the attack
            that is limited by this MeleeAttackSpeedBasedAttackLimiter.
            </summary>
        </member>
        <member name="T:Zelda.Attacks.Limiter.RangedAttackSpeedBasedAttackLimiter">
            <summary>
            Limits the usage of an Attack for <see cref="P:Zelda.Status.Statable.AttackSpeedRanged"/> seconds
            after the Attack has fired.
            </summary>
        </member>
        <member name="M:Zelda.Attacks.Limiter.RangedAttackSpeedBasedAttackLimiter.#ctor(Zelda.Status.Statable)">
            <summary>
            Initializes a new instance of the RangedAttackSpeedBasedAttackLimiter clas.
            </summary>
            <param name="statable">
            The statable component of the entity that owns the attack
            that is limited by the new RangedAttackSpeedBasedAttackLimiter.
            </param>
        </member>
        <member name="P:Zelda.Attacks.Limiter.RangedAttackSpeedBasedAttackLimiter.AttackDelay">
            <summary>
            Gets the time it takes until the Attack can go off again.
            </summary>
        </member>
        <member name="M:Zelda.Attacks.Limiter.RangedAttackSpeedBasedAttackLimiter.Clone">
            <summary>
            This operation is not supported.
            </summary>
            <returns>
            The cloned IAttackLimiter.
            </returns>
        </member>
        <member name="F:Zelda.Attacks.Limiter.RangedAttackSpeedBasedAttackLimiter.statable">
            <summary>
            The statable component of the entity that owns the attack
            that is limited by this RangedAttackSpeedBasedAttackLimiter.
            </summary>
        </member>
        <member name="T:Zelda.Attacks.Limiter.StubAttackLimiter">
            <summary>
            Implemetns an <see cref="T:Zelda.Attacks.Limiter.IAttackLimiter"/> that does nothing and allows 
            all attacks to be fired.
            </summary>
        </member>
        <member name="F:Zelda.Attacks.Limiter.StubAttackLimiter.Instance">
            <summary>
            A cached instance of this StubAttackLimiter that is meant for re-use.
            </summary>
        </member>
        <member name="P:Zelda.Attacks.Limiter.StubAttackLimiter.IsAllowed">
            <summary>
            Gets a value indicating whether attacking in general is allowed.
            </summary>
            <value>
            true if it is allowed;
            otherwise false.
            </value>
        </member>
        <member name="M:Zelda.Attacks.Limiter.StubAttackLimiter.IsAllowedOn(Zelda.Status.Statable)">
            <summary>
            Gets a value indicating whether attacking the specified <paramref name="target"/>
            is allowed.
            </summary>
            <param name="target">
            The target of the attack.
            </param>
            <returns>
            true if it is allowed;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Attacks.Limiter.StubAttackLimiter.OnAttackFired">
            <summary>
            Called when an attack that might be limited by this IAttackLimiter
            has been used.
            </summary>
        </member>
        <member name="M:Zelda.Attacks.Limiter.StubAttackLimiter.Reset">
            <summary>
            Resets this IAttackLimiter to its initial state.
            </summary>
        </member>
        <member name="M:Zelda.Attacks.Limiter.StubAttackLimiter.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this IAttackLimiter.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Attacks.Limiter.StubAttackLimiter.OnAttackHit(Zelda.Status.Statable)">
            <summary>
            Called when an attack that might be limited by this IAttackLimiter
            has been used on a specific target.
            </summary>
            <param name="target">
            The target of the attack.
            </param>
        </member>
        <member name="M:Zelda.Attacks.Limiter.StubAttackLimiter.Clone">
            <summary>
            Returns a clone of this StubAttackLimiter.
            </summary>
            <returns>
            The cloned IAttackLimiter.
            </returns>
        </member>
        <member name="T:Zelda.Attacks.Limiter.TimedAttackLimiter">
            <summary>
            Limits the usage of an Attack by not allowing the Attack to go
            off for a fixed amount of time after it fired.
            </summary>
        </member>
        <member name="M:Zelda.Attacks.Limiter.TimedAttackLimiter.#ctor(Zelda.Cooldown)">
            <summary>
            Initializes a new instance of the TimedAttackLimiter class.
            </summary>
            <param name="cooldown">
            The cooldown of the attack.
            </param>
        </member>
        <member name="M:Zelda.Attacks.Limiter.TimedAttackLimiter.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the TimedAttackLimiter class.
            </summary>
            <param name="cooldown">
            The cooldown of the attack.
            </param>
        </member>
        <member name="M:Zelda.Attacks.Limiter.TimedAttackLimiter.#ctor">
            <summary>
            Initializes a new instance of the TimedAttackLimiter class.
            </summary>
        </member>
        <member name="P:Zelda.Attacks.Limiter.TimedAttackLimiter.IsAllowed">
            <summary>
            Gets a value indicating whether attacking in general is allowed.
            </summary>
            <value>
            true if it is allowed;
            otherwise false.
            </value>
        </member>
        <member name="P:Zelda.Attacks.Limiter.TimedAttackLimiter.AttackTick">
            <summary>
            Gets or sets the time until the Attack can be used again.
            </summary>
        </member>
        <member name="P:Zelda.Attacks.Limiter.TimedAttackLimiter.AttackDelay">
            <summary>
            Gets or sets the time it takes until the Attack can go off again.
            </summary>
        </member>
        <member name="M:Zelda.Attacks.Limiter.TimedAttackLimiter.IsAllowedOn(Zelda.Status.Statable)">
            <summary>
            Gets a value indicating whether attacking the specified <paramref name="target"/>
            is allowed.
            </summary>
            <param name="target">
            The target of the attack.
            </param>
            <returns>
            true if it is allowed;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Attacks.Limiter.TimedAttackLimiter.OnAttackFired">
            <summary>
            Called when an attack that might be limited by this IAttackLimiter
            has been used.
            </summary>
        </member>
        <member name="M:Zelda.Attacks.Limiter.TimedAttackLimiter.OnAttackHit(Zelda.Status.Statable)">
            <summary>
            Called when an attack that might be limited by this IAttackLimiter
            has been used on a specific target.
            </summary>
            <param name="target">
            The target of the attack.
            </param>
        </member>
        <member name="M:Zelda.Attacks.Limiter.TimedAttackLimiter.Reset">
            <summary>
            Resets this IAttackLimiter to its initial state.
            </summary>
        </member>
        <member name="M:Zelda.Attacks.Limiter.TimedAttackLimiter.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this TimedAttackLimiter.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Attacks.Limiter.TimedAttackLimiter.Clone">
            <summary>
            Returns a clone of this TimedAttackLimiter.
            </summary>
            <returns>
            The cloned IAttackLimiter.
            </returns>
        </member>
        <member name="F:Zelda.Attacks.Limiter.TimedAttackLimiter.cooldown">
            <summary>
            The cooldown of the Attack.
            </summary>
        </member>
        <member name="T:Zelda.Attacks.Limiter.TimedForEachTargetAttackLimiter">
            <summary>
            Represents an <see cref="T:Zelda.Attacks.Limiter.IAttackLimiter"/> that limits attacks for a specific amount of time
            for each indiviudual attack target.
            </summary>
        </member>
        <member name="P:Zelda.Attacks.Limiter.TimedForEachTargetAttackLimiter.AttackDelay">
            <summary>
            Gets or sets the time in seconds attacks are not allowed for
            on a specific target.
            </summary>
        </member>
        <member name="P:Zelda.Attacks.Limiter.TimedForEachTargetAttackLimiter.IsAllowed">
            <summary>
            Gets a value indicating whether attacking in general is allowed.
            </summary>
            <value>
            true if it is allowed;
            otherwise false.
            </value>
        </member>
        <member name="M:Zelda.Attacks.Limiter.TimedForEachTargetAttackLimiter.IsAllowedOn(Zelda.Status.Statable)">
            <summary>
            Gets a value indicating whether attacking the specified <paramref name="target"/>
            is allowed.
            </summary>
            <param name="target">
            The target of the attack.
            </param>
            <returns>
            true if it is allowed;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Attacks.Limiter.TimedForEachTargetAttackLimiter.OnAttackFired">
            <summary>
            Called when an attack that might be limited by this TimedForEachTargetAttackLimiter
            has been used.
            </summary>
        </member>
        <member name="M:Zelda.Attacks.Limiter.TimedForEachTargetAttackLimiter.OnAttackHit(Zelda.Status.Statable)">
            <summary>
            Called when an attack that might be limited by this IAttackLimiter
            has been used on a specific target.
            </summary>
            <param name="target">
            The target of the attack.
            </param>
        </member>
        <member name="M:Zelda.Attacks.Limiter.TimedForEachTargetAttackLimiter.Reset">
            <summary>
            Resets this TimedForEachTargetAttackLimiter to its initial state.
            </summary>
        </member>
        <member name="M:Zelda.Attacks.Limiter.TimedForEachTargetAttackLimiter.Clone">
            <summary>
            Returns a clone of this TimedForEachTargetAttackLimiter.
            </summary>
            <returns>
            The cloned IAttackLimiter.
            </returns>
        </member>
        <member name="M:Zelda.Attacks.Limiter.TimedForEachTargetAttackLimiter.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this TimedForEachTargetAttackLimiter.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="T:Zelda.Attacks.Limiter.TimedForEachTargetAttackLimiter.LimitedTarget">
            <summary>
            Represents information about a target that is limited by this TimedForEachTargetAttackLimiter.
            </summary>
        </member>
        <member name="M:Zelda.Attacks.Limiter.TimedForEachTargetAttackLimiter.LimitedTarget.#ctor(Zelda.Status.Statable,System.Single)">
            <summary>
            Initializes a new instance of the LimitedTarget structure.
            </summary>
            <param name="target">
            The target the attack is limited against.
            </param>
            <param name="timeLeft">
            The time the target is limited for in seconds.
            </param>
        </member>
        <member name="F:Zelda.Attacks.Limiter.TimedForEachTargetAttackLimiter.LimitedTarget.Target">
            <summary>
            The target this TimedForEachTargetAttackLimiter is limiting attacks against.
            </summary>
        </member>
        <member name="F:Zelda.Attacks.Limiter.TimedForEachTargetAttackLimiter.LimitedTarget.TimeLeft">
            <summary>
            The time left the target is limited for.
            </summary>
        </member>
        <member name="F:Zelda.Attacks.Limiter.TimedForEachTargetAttackLimiter.limitedTargets">
            <summary>
            The list of currently limited 
            </summary>
        </member>
        <member name="T:Zelda.Attacks.Melee.BladestormAttack">
            <summary>
            The player goes nuts after using Whirlwind, 
            turning for another X times, dealing (MeleeDamage x Y%) 
            non-parry nor dodgeable damage.
            Compared to Whirlwind movement is allowed with a speed penality of Z%.
            </summary>
        </member>
        <member name="P:Zelda.Attacks.Melee.BladestormAttack.MaximumTurns">
            <summary>
            Sets the number of times the player uses 'Whirlwind'
            while the Bladestorm attack is active.
            </summary>
        </member>
        <member name="P:Zelda.Attacks.Melee.BladestormAttack.IsActive">
            <summary>
            Gets a value indicating whether this BladestormAttack is currently active.
            </summary>
        </member>
        <member name="M:Zelda.Attacks.Melee.BladestormAttack.#ctor(Zelda.Entities.PlayerEntity,Zelda.Attacks.AttackDamageMethod,Zelda.Cooldown)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Attacks.Melee.BladestormAttack"/> class.
            </summary>
            <param name="player">
            The PlayerEntity that owns the new BladestormAttack.
            </param>
            <param name="method">
            The IAttackDamageMethod that is used to calculate the damage done by the new BladestormAttack.
            </param>
            <param name="cooldown">
            The time the new BladestormAttack needs to useable again.
            </param>
        </member>
        <member name="M:Zelda.Attacks.Melee.BladestormAttack.Fire(Zelda.Entities.Components.Attackable)">
            <summary>
            Fires this <see cref="T:Zelda.Attacks.Melee.BladestormAttack"/>.
            </summary>
            <param name="target">
            This parameter is not used.
            </param>
            <returns>
            true if this BladestormAttack has been used;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Attacks.Melee.BladestormAttack.ShouldFire">
            <summary>
            Gets a value indicating whether this Attack should fire.
            </summary>
            <returns>
            true if it can and should fire;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Attacks.Melee.BladestormAttack.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this <see cref="T:Zelda.Attacks.Melee.WhirlwindAttack"/>.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Attacks.Melee.BladestormAttack.GetAttackRectangle(System.Int32,Atom.Math.RectangleF@)">
            <summary>
            Gets the attack collision rectangle for the current frame.
            </summary>
            <param name="frameIndex">
            The index of the current frame.
            </param>
            <param name="attackRectangle">
            Will contain attack collision rectangle.
            </param>
        </member>
        <member name="F:Zelda.Attacks.Melee.BladestormAttack.turns">
            <summary>
            The number of whirlwinds that have been executed.
            </summary>
        </member>
        <member name="F:Zelda.Attacks.Melee.BladestormAttack.maximumTurns">
            <summary>
            The maximum number of turns to be executed.
            </summary>
        </member>
        <member name="F:Zelda.Attacks.Melee.BladestormAttack.isActive">
            <summary>
            States whether the Bladestorm is currently going on.
            </summary>
        </member>
        <member name="F:Zelda.Attacks.Melee.BladestormAttack.lastFrameIndex">
            <summary>
            The last frame-index.
            </summary>
        </member>
        <member name="T:Zelda.Attacks.Melee.BashDamageMethod">
            <summary>
            Defines the AttackDamageMethod responsible for calculating the damage done
            by the BashSkill.
            This class can't be inherited.
            </summary>
        </member>
        <member name="F:Zelda.Attacks.Melee.BashDamageMethod.DamageTypeInfo">
            <summary>
            Stores type information about the damage inflicted by the BashDamageMethod.
            </summary>
        </member>
        <member name="M:Zelda.Attacks.Melee.BashDamageMethod.GetDamageDone(Zelda.Status.Statable,Zelda.Status.Statable)">
            <summary>
            Calculates the damage done of the given user on the given target
            using the <see cref="T:Zelda.Attacks.Melee.BashDamageMethod"/>.
            </summary>
            <param name="user">The user of the attack.</param>
            <param name="target">The target of the attack.</param>
            <returns>The results of the calculation.</returns>
        </member>
        <member name="M:Zelda.Attacks.Melee.BashDamageMethod.SetValues(System.Single,System.Int32,System.Single)">
            <summary>
            Sets the parameters of this BashDamageMethod.
            </summary>
            <param name="multiplier">
            The damage multiplier provided by Bash.
            </param>
            <param name="fixedValue">
            The fixed damage increase provided by Bash.
            </param>
            <param name="increasedCrit">
            The crit chance increase provided by Improved Bash.
            </param>
        </member>
        <member name="F:Zelda.Attacks.Melee.BashDamageMethod.multiplier">
            <summary>
            The damage multiplier provided by Bash.
            </summary>
        </member>
        <member name="F:Zelda.Attacks.Melee.BashDamageMethod.fixedValue">
            <summary>
            The fixed damage increase provided by Bash.
            </summary>
        </member>
        <member name="F:Zelda.Attacks.Melee.BashDamageMethod.increasedCrit">
            <summary>
            The crit chance increase provided by Improved Bash.
            </summary>
        </member>
        <member name="T:Zelda.Attacks.Melee.CounterAttackDamageMethod">
            <summary>
            Defines the AttackDamageMethod responsible for calculating the damage done
            by the CounterAttackSkill.
            This class can't be inherited.
            </summary>
        </member>
        <member name="F:Zelda.Attacks.Melee.CounterAttackDamageMethod.DamageTypeInfo">
            <summary>
            Stores type information about the damage inflicted by the CounterAttackDamageMethod.
            </summary>
        </member>
        <member name="M:Zelda.Attacks.Melee.CounterAttackDamageMethod.GetDamageDone(Zelda.Status.Statable,Zelda.Status.Statable)">
            <summary>
            Calculates the damage done of the given user on the given target
            using the <see cref="T:Zelda.Attacks.Melee.CounterAttackDamageMethod"/>.
            </summary>
            <param name="user">The user of the attack.</param>
            <param name="target">The target of the attack.</param>
            <returns>The results of the calculation.</returns>
        </member>
        <member name="M:Zelda.Attacks.Melee.CounterAttackDamageMethod.SetValues(System.Single)">
            <summary>
            Sets the parameters of this CounterAttackDamageMethod.
            </summary>
            <param name="multiplier">
            The damage multiplier provided by Counter Attack.
            </param>
        </member>
        <member name="F:Zelda.Attacks.Melee.CounterAttackDamageMethod.multiplier">
            <summary>
            The damage multiplier provided by Counter Attack.
            </summary>
        </member>
        <member name="T:Zelda.Attacks.Melee.DefaultMeleeDamageMethod">
            <summary>
            Calculates the damage of a normal melee attack. 
            This class can't be inherited.
            </summary>
        </member>
        <member name="F:Zelda.Attacks.Melee.DefaultMeleeDamageMethod.DamageTypeInfo">
            <summary>
            Stores type information about the damage inflicted by the DefaultMeleeDamageMethod.
            </summary>
        </member>
        <member name="M:Zelda.Attacks.Melee.DefaultMeleeDamageMethod.GetDamageDone(Zelda.Status.Statable,Zelda.Status.Statable)">
            <summary>
            Calculates the damage done by the <paramref name="user"/> on the <paramref name="target"/>
            using this <see cref="T:Zelda.Attacks.AttackDamageMethod"/>.
            </summary>
            <param name="user">The user of the attack.</param>
            <param name="target">The target of the attack.</param>
            <returns>The calculated result.</returns>
        </member>
        <member name="T:Zelda.Attacks.Melee.FrustationDamageMethod">
            <summary>
            Calculates the damage of a self-inflicted attack caused by the Frustration skill.
            This class can't be inherited.
            </summary>
        </member>
        <member name="F:Zelda.Attacks.Melee.FrustationDamageMethod.DamageTypeInfo">
            <summary>
            Stores type information about the damage inflicted by the FrustationDamageMethod.
            </summary>
        </member>
        <member name="M:Zelda.Attacks.Melee.FrustationDamageMethod.GetDamageDone(Zelda.Status.Statable,Zelda.Status.Statable)">
            <summary>
            Calculates the damage done by the <paramref name="user"/> on the <paramref name="target"/>
            using this <see cref="T:Zelda.Attacks.AttackDamageMethod"/>.
            </summary>
            <param name="user">The user of the attack.</param>
            <param name="target">The target of the attack.</param>
            <returns>The calculated result.</returns>
        </member>
        <member name="M:Zelda.Attacks.Melee.FrustationDamageMethod.SetValues(System.Single)">
            <summary>
            Sets the values of this DamageMethod.
            </summary>
            <param name="multiplier">
            The damage multiplier value.
            </param>
        </member>
        <member name="F:Zelda.Attacks.Melee.FrustationDamageMethod.multiplier">
            <summary>
            The damage multiplier value.
            </summary>
        </member>
        <member name="T:Zelda.Attacks.Melee.NormalPlayerMeleeDamageMethod">
            <summary>
            Calculates the damage of a normal melee attack of the Player.
            This class can't be inherited.
            </summary>
        </member>
        <member name="F:Zelda.Attacks.Melee.NormalPlayerMeleeDamageMethod.DamageTypeInfo">
            <summary>
            Stores type information about the damage inflicted by the NormalPlayerMeleeDamageMethod.
            </summary>
        </member>
        <member name="M:Zelda.Attacks.Melee.NormalPlayerMeleeDamageMethod.GetDamageDone(Zelda.Status.Statable,Zelda.Status.Statable)">
            <summary>
            Calculates the damage done by the <paramref name="user"/> on the <paramref name="target"/>
            using this <see cref="T:Zelda.Attacks.AttackDamageMethod"/>.
            </summary>
            <param name="user">The user of the attack.</param>
            <param name="target">The target of the attack.</param>
            <returns>The calculated result.</returns>
        </member>
        <member name="T:Zelda.Attacks.Melee.PlayerMeleeDamageMethod">
            <summary>
            Calculates the damage of a melee attack of the Player.
            This class can't be inherited.
            </summary>
        </member>
        <member name="F:Zelda.Attacks.Melee.PlayerMeleeDamageMethod.DamageTypeInfo">
            <summary>
            Stores type information about the damage inflicted by the PlayerMeleeDamageMethod.
            </summary>
        </member>
        <member name="M:Zelda.Attacks.Melee.PlayerMeleeDamageMethod.GetDamageDone(Zelda.Status.Statable,Zelda.Status.Statable)">
            <summary>
            Calculates the damage done by the <paramref name="user"/> on the <paramref name="target"/>
            using this <see cref="T:Zelda.Attacks.AttackDamageMethod"/>.
            </summary>
            <param name="user">The user of the attack.</param>
            <param name="target">The target of the attack.</param>
            <returns>The calculated result.</returns>
        </member>
        <member name="T:Zelda.Attacks.Melee.ShieldBreakerDamageMethod">
            <summary>
            Calculates the damage done by the Shield Breaker skill.
            This class can't be inherited.
            </summary>
        </member>
        <member name="F:Zelda.Attacks.Melee.ShieldBreakerDamageMethod.DamageTypeInfo">
            <summary>
            Stores type information about the damage inflicted by the ShieldBreakerDamageMethod.
            </summary>
        </member>
        <member name="M:Zelda.Attacks.Melee.ShieldBreakerDamageMethod.GetDamageDone(Zelda.Status.Statable,Zelda.Status.Statable)">
            <summary>
            Calculates the damage done by the <paramref name="user"/> on the <paramref name="target"/>
            using this <see cref="T:Zelda.Attacks.AttackDamageMethod"/>.
            </summary>
            <param name="user">The user of the attack.</param>
            <param name="target">The target of the attack.</param>
            <returns>The calculated result.</returns>
        </member>
        <member name="M:Zelda.Attacks.Melee.ShieldBreakerDamageMethod.SetValues(System.Single)">
            <summary>
            Sets the values of this ShieldBreakerDamageMethod.
            </summary>
            <param name="blockValueToDamageMultiplier">
            The BlockValue to Damage multiplier value.
            </param>
        </member>
        <member name="F:Zelda.Attacks.Melee.ShieldBreakerDamageMethod.blockValueToDamageMultiplier">
            <summary>
            The BlockValue to Damage multiplier value.
            </summary>
        </member>
        <member name="T:Zelda.Attacks.Melee.WhirlwindDamageMethod">
            <summary>
            Defines the <see cref="T:Zelda.Attacks.AttackDamageMethod"/> of the <see cref="T:Zelda.Attacks.Melee.WhirlwindAttack"/>
            </summary>
        </member>
        <member name="F:Zelda.Attacks.Melee.WhirlwindDamageMethod.DamageTypeInfo">
            <summary>
            Stores type information about the damage inflicted by the WhirlwindDamageMethod.
            </summary>
        </member>
        <member name="M:Zelda.Attacks.Melee.WhirlwindDamageMethod.GetDamageDone(Zelda.Status.Statable,Zelda.Status.Statable)">
            <summary>
            Calculates the damage done of the given user on the given target
            using this WhirlwindDamageMethod.
            </summary>
            <param name="user">The user of the attack.</param>
            <param name="target">The target of the attack.</param>
            <returns>The results of the calculation.</returns>
        </member>
        <member name="M:Zelda.Attacks.Melee.WhirlwindDamageMethod.SetValues(System.Single)">
            <summary>
            Sets the values of the WhirlwindDamageMethod.
            </summary>
            <param name="multiplier">
            The damage multiplier.
            </param>
        </member>
        <member name="F:Zelda.Attacks.Melee.WhirlwindDamageMethod.multiplier">
            <summary>
            The damage multiplier of the Whirlwind attack.
            </summary>
        </member>
        <member name="T:Zelda.Attacks.Melee.PlayerMeleeAttack">
            <summary>
            Defines a <see cref="T:Zelda.Attacks.MeleeAttack"/> that is used by the Player.
            </summary>
        </member>
        <member name="P:Zelda.Attacks.Melee.PlayerMeleeAttack.IsUseable">
            <summary>
            Gets a value indicating whether this <see cref="T:Zelda.Attacks.Attack"/> is useable depending on the state of its owner.
            E.g. one usually can't use an attack while swimming, or if there is not enough mana to use it.
            </summary>
        </member>
        <member name="P:Zelda.Attacks.Melee.PlayerMeleeAttack.DrawStrategy">
            <summary>
            Gets the <see cref="T:Zelda.Entities.Drawing.PlayerDrawDataAndStrategy"/> of the PlayerEntity
            that owns this PlayerMeleeAttack.
            </summary>
        </member>
        <member name="M:Zelda.Attacks.Melee.PlayerMeleeAttack.#ctor(Zelda.Entities.PlayerEntity,Zelda.Attacks.AttackDamageMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Attacks.Melee.PlayerMeleeAttack"/> class.
            </summary>
            <param name="player">
            The entity that owns the new PlayerMeleeAttack.
            </param>
            <param name="method">
            The AttackDamageMethod that calculates the damage the new PlayerMeleeAttack does. 
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="player"/> or <paramref name="method"/> is null.
            </exception>
            <exception cref="T:Atom.Components.ComponentNotFoundException">
            If the given <see cref="T:Zelda.Entities.PlayerEntity"/> contains no <see cref="T:Zelda.Status.Statable"/> component.
            </exception>
        </member>
        <member name="M:Zelda.Attacks.Melee.PlayerMeleeAttack.#ctor(Zelda.Entities.PlayerEntity,Zelda.Attacks.AttackDamageMethod,Zelda.Cooldown)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Attacks.Melee.PlayerMeleeAttack"/> class.
            </summary>
            <param name="player">
            The entity that owns the new PlayerMeleeAttack.
            </param>
            <param name="method">
            The AttackDamageMethod that calculates the damage the new PlayerMeleeAttack does. 
            </param>
            <param name="cooldown">
            The Cooldown that is used to create a new TimedAttackLimiter for the new PlayerMeleeAttack.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="player"/>, <paramref name="method"/> or <paramref name="cooldown"/> is null.
            </exception>
            <exception cref="T:Atom.Components.ComponentNotFoundException">
            If the given <see cref="T:Zelda.Entities.PlayerEntity"/> contains no <see cref="T:Zelda.Status.Statable"/> component.
            </exception>
        </member>
        <member name="M:Zelda.Attacks.Melee.PlayerMeleeAttack.Fire(Zelda.Entities.Components.Attackable)">
            <summary>
            Fires this <see cref="T:Zelda.Attacks.Melee.PlayerMeleeAttack"/>.
            </summary>
            <param name="target">
            This parameter is not used. - 
            A player melee attack always hits all enemies in its range.
            </param>
            <returns>
            true if the Attack was executed, otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Attacks.Melee.PlayerMeleeAttack.ShouldFire">
            <summary>
            Gets a value indicating whether this PlayerMeleeAttack should fire.
            </summary>
            <returns>
            true if it can and should fire;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Attacks.Melee.PlayerMeleeAttack.HandleAttack">
            <summary>
            Handles the MeleeAttack by computing the current Attack Region.
            </summary>
        </member>
        <member name="M:Zelda.Attacks.Melee.PlayerMeleeAttack.HandleAttack(Atom.Math.RectangleF@)">
            <summary>
            Handles the MeleeAttack for the given <paramref name="attackRegion"/>.
            </summary>
            <param name="attackRegion">
            The region the attack should land.
            </param>
        </member>
        <member name="M:Zelda.Attacks.Melee.PlayerMeleeAttack.HandleActualTarget(Zelda.Entities.ZeldaEntity)">
            <summary>
            Handles the actual attacking of the given ZeldaEntity.
            </summary>
            <param name="target">
            A ZeldaEntity that actually got hit by this attack.
            </param>
        </member>
        <member name="F:Zelda.Attacks.Melee.PlayerMeleeAttack.player">
            <summary>
            The PlayerEntity that owns this <see cref="T:Zelda.Attacks.Melee.PlayerMeleeAttack"/>.
            </summary>
        </member>
        <member name="F:Zelda.Attacks.Melee.PlayerMeleeAttack.drawStrategy">
            <summary>
            The PlayerDrawDataAndStrategy associated with the PlayerEntity.
            </summary>
        </member>
        <member name="T:Zelda.Attacks.Melee.WhirlwindAttack">
            <summary>
            Whirlwind is a powerful attack that needs to be charged up.
            After the charge is complete the player turns like a Whirlwind,
            hitting and pushing all enemies very hard.
            </summary>
        </member>
        <member name="P:Zelda.Attacks.Melee.WhirlwindAttack.HasEnded">
            <summary>
            Gets a value indicating whether the animation of the WhirlwindAttack
            has completed, and as such the attack in itself.
            </summary>
        </member>
        <member name="M:Zelda.Attacks.Melee.WhirlwindAttack.#ctor(Zelda.Entities.PlayerEntity,Zelda.Attacks.Melee.WhirlwindDamageMethod,Zelda.Cooldown)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Attacks.Melee.WhirlwindAttack"/> class.
            </summary>
            <param name="player">
            The PlayerEntity that owns the new WhirlwindAttack.
            </param>
            <param name="method">
            The IAttackDamageMethod that is used to calculate the damage done by the new WhirlwindAttack.
            </param>
            <param name="cooldown">
            The time the new WhirlwindAttack needs to useable again.
            </param>
        </member>
        <member name="M:Zelda.Attacks.Melee.WhirlwindAttack.Fire(Zelda.Entities.Components.Attackable)">
            <summary>
            Fires this <see cref="T:Zelda.Attacks.Melee.WhirlwindAttack"/>.
            </summary>
            <param name="target">
            This parameter is not used.
            </param>
            <returns>
            true if this WhirlwindAttack has been used;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Attacks.Melee.WhirlwindAttack.ShouldFire">
            <summary>
            Gets a value indicating whether this Attack should fire.
            </summary>
            <returns>
            true if it can and should fire;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Attacks.Melee.WhirlwindAttack.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this <see cref="T:Zelda.Attacks.Melee.WhirlwindAttack"/>.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Attacks.Melee.WhirlwindAttack.OnWhirlwindCompleted">
            <summary>
            Called when the Whirlwind animation has completed.
            </summary>
        </member>
        <member name="M:Zelda.Attacks.Melee.WhirlwindAttack.GetAttackRectangle(System.Int32,Atom.Math.RectangleF@)">
            <summary>
            Gets the attack collision rectangle for the current frame.
            </summary>
            <param name="frameIndex">
            The index of the current frame.
            </param>
            <param name="attackRectangle">
            The attack area for the given frame.
            </param>
        </member>
        <member name="F:Zelda.Attacks.Melee.WhirlwindAttack.isActive">
            <summary>
            States whether the whirlwind is currently going on.
            </summary>
        </member>
        <member name="F:Zelda.Attacks.Melee.WhirlwindAttack.previousCanMoveState">
            <summary>
            The CanMove state before the animation has started.
            </summary>
        </member>
        <member name="F:Zelda.Attacks.Melee.WhirlwindAttack.lastFrameIndex">
            <summary>
            The last frame-index.
            </summary>
        </member>
        <member name="T:Zelda.Attacks.MeleeAttack">
            <summary>
            Represents an Attack that applies damage
            with direct contact in a specific area.
            </summary>
        </member>
        <member name="P:Zelda.Attacks.MeleeAttack.IsPushing">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Zelda.Attacks.Attack"/> is pushing hit enemies away.
            </summary>
        </member>
        <member name="P:Zelda.Attacks.MeleeAttack.PushingPowerMinimum">
            <summary>
            Gets or sets the minimum pushing power of this <see cref="T:Zelda.Attacks.Attack"/>.
            </summary>
        </member>
        <member name="P:Zelda.Attacks.MeleeAttack.PushingPowerMaximum">
            <summary>
            Gets or sets the maximum pushing power of this <see cref="T:Zelda.Attacks.Attack"/>.
            </summary>
        </member>
        <member name="P:Zelda.Attacks.MeleeAttack.HitEffect">
            <summary>
            Gets or sets the <see cref="T:Zelda.Attacks.IAttackHitEffect"/> applied by this IAttackHitEffect.
            </summary>
        </member>
        <member name="M:Zelda.Attacks.MeleeAttack.#ctor(Zelda.Entities.ZeldaEntity,Zelda.Attacks.AttackDamageMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Attacks.MeleeAttack"/> class.
            </summary>
            <param name="owner">
            The entity that owns the new MeleeAttack.
            </param>
            <param name="method">
            The AttackDamageMethod that calculates the damage the new MeleeAttack does. 
            </param>
        </member>
        <member name="M:Zelda.Attacks.MeleeAttack.Fire(Zelda.Entities.Components.Attackable)">
            <summary>
            Fires the attack at the given <paramref name="target"/>,
            if possible.
            </summary>
            <param name="target">
            The target of the attack.
            </param>
            <returns>
            true if the Attack was executed, otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Attacks.MeleeAttack.AttackTarget(Zelda.Entities.Components.Attackable)">
            <summary>
            Attacks the specified target attackable entity.
            </summary>
            <param name="target">
            The target of this attack.
            </param>
        </member>
        <member name="M:Zelda.Attacks.MeleeAttack.ApplyPushing(Zelda.Entities.Components.Attackable,Zelda.Attacks.AttackDamageResult)">
            <summary>
            Applies the pushing force of this MeleeAttack.
            </summary>
            <param name="target">
            The target that has been attacked.
            </param>
            <param name="result">
            The result of the attack.
            </param>
        </member>
        <member name="M:Zelda.Attacks.MeleeAttack.ApplyHitEffect(Zelda.Status.Statable,Zelda.Attacks.AttackDamageResult)">
            <summary>
            Applies the <see cref="P:Zelda.Attacks.MeleeAttack.HitEffect"/> of this MeleeAttack.
            </summary>
            <param name="target">
            The target that has been attacked.
            </param>
            <param name="result">
            The result of the attack.
            </param>
        </member>
        <member name="M:Zelda.Attacks.MeleeAttack.ShouldFireAttackAt(Zelda.Status.Statable)">
            <summary>
            Gets a value indicating whether this MeleeAttack
            should be fired at the given target.
            </summary>
            <param name="target">
            The target of the attack. May not be null.
            </param>
            <returns>
            Returns true if the attack should be executed;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Attacks.MeleeAttack.SetupClone(Zelda.Attacks.MeleeAttack)">
            <summary>
            Setups the specified MeleeAttack to be a clone of this MeleeAttack.
            </summary>
            <param name="clone">
            The MeleeAttack to setup as a clone of this MeleeAttack.
            </param>
        </member>
        <member name="T:Zelda.Attacks.Methods.FixedFireSpellDamageMethod">
            <summary>
            Defines an AttackDamageMethod that deals a fixed amount of
            magical fire spell damage.
            </summary>
        </member>
        <member name="F:Zelda.Attacks.Methods.FixedFireSpellDamageMethod.DamageTypeInfo">
            <summary>
            Stores type information about the damage inflicted by the FixedFireSpellDamageMethod.
            </summary>
        </member>
        <member name="P:Zelda.Attacks.Methods.FixedFireSpellDamageMethod.DamageRange">
            <summary>
            Gets or sets the damage range of the FixedFireSpellDamageMethod.
            </summary>
        </member>
        <member name="M:Zelda.Attacks.Methods.FixedFireSpellDamageMethod.GetDamageDone(Zelda.Status.Statable,Zelda.Status.Statable)">
            <summary>
            Calculates the damage done by the <paramref name="user"/> on the <paramref name="target"/>
            using this <see cref="T:Zelda.Attacks.AttackDamageMethod"/>.
            </summary>
            <param name="user">The user of the attack.</param>
            <param name="target">The target of the attack.</param>
            <returns>The calculated result.</returns>
        </member>
        <member name="M:Zelda.Attacks.Methods.FixedFireSpellDamageMethod.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Attacks.Methods.FixedFireSpellDamageMethod.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="T:Zelda.Attacks.Methods.FixedLightSpellDamageMethod">
            <summary>
            Defines an AttackDamageMethod that deals a fixed amount of
            magical Light spell damage.
            </summary>
        </member>
        <member name="F:Zelda.Attacks.Methods.FixedLightSpellDamageMethod.DamageTypeInfo">
            <summary>
            Stores type information about the damage inflicted by the FixedLightSpellDamageMethod.
            </summary>
        </member>
        <member name="P:Zelda.Attacks.Methods.FixedLightSpellDamageMethod.DamageRange">
            <summary>
            Gets or sets the damage range of the FixedLightSpellDamageMethod.
            </summary>
        </member>
        <member name="M:Zelda.Attacks.Methods.FixedLightSpellDamageMethod.GetDamageDone(Zelda.Status.Statable,Zelda.Status.Statable)">
            <summary>
            Calculates the damage done by the <paramref name="user"/> on the <paramref name="target"/>
            using this <see cref="T:Zelda.Attacks.AttackDamageMethod"/>.
            </summary>
            <param name="user">The user of the attack.</param>
            <param name="target">The target of the attack.</param>
            <returns>The calculated result.</returns>
        </member>
        <member name="M:Zelda.Attacks.Methods.FixedLightSpellDamageMethod.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Attacks.Methods.FixedLightSpellDamageMethod.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="T:Zelda.Attacks.Methods.FixedPoisonOverTimeSpellDamageMethod">
            <summary>
            Defines an AttackDamageMethod that deals a fixed amount of
            magical fire spell damage.
            </summary>
        </member>
        <member name="F:Zelda.Attacks.Methods.FixedPoisonOverTimeSpellDamageMethod.DamageTypeInfo">
            <summary>
            Stores type information about the damage inflicted by the FixedPoisonSpellDamageMethod.
            </summary>
        </member>
        <member name="P:Zelda.Attacks.Methods.FixedPoisonOverTimeSpellDamageMethod.DamageRange">
            <summary>
            Gets or sets the damage range of the FixedPoisonSpellDamageMethod.
            </summary>
        </member>
        <member name="M:Zelda.Attacks.Methods.FixedPoisonOverTimeSpellDamageMethod.GetDamageDone(Zelda.Status.Statable,Zelda.Status.Statable)">
            <summary>
            Calculates the damage done by the <paramref name="user"/> on the <paramref name="target"/>
            using this <see cref="T:Zelda.Attacks.AttackDamageMethod"/>.
            </summary>
            <param name="user">The user of the attack.</param>
            <param name="target">The target of the attack.</param>
            <returns>The calculated result.</returns>
        </member>
        <member name="M:Zelda.Attacks.Methods.FixedPoisonOverTimeSpellDamageMethod.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Attacks.Methods.FixedPoisonOverTimeSpellDamageMethod.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="T:Zelda.Attacks.Methods.FixedShadowSpellDamageMethod">
            <summary>
            Defines an AttackDamageMethod that deals a fixed amount of
            magical Shadow spell damage.
            </summary>
        </member>
        <member name="F:Zelda.Attacks.Methods.FixedShadowSpellDamageMethod.DamageTypeInfo">
            <summary>
            Stores type information about the damage inflicted by the FixedShadowSpellDamageMethod.
            </summary>
        </member>
        <member name="P:Zelda.Attacks.Methods.FixedShadowSpellDamageMethod.DamageRange">
            <summary>
            Gets or sets the damage range of the FixedShadowSpellDamageMethod.
            </summary>
        </member>
        <member name="M:Zelda.Attacks.Methods.FixedShadowSpellDamageMethod.GetDamageDone(Zelda.Status.Statable,Zelda.Status.Statable)">
            <summary>
            Calculates the damage done by the <paramref name="user"/> on the <paramref name="target"/>
            using this <see cref="T:Zelda.Attacks.AttackDamageMethod"/>.
            </summary>
            <param name="user">The user of the attack.</param>
            <param name="target">The target of the attack.</param>
            <returns>The calculated result.</returns>
        </member>
        <member name="M:Zelda.Attacks.Methods.FixedShadowSpellDamageMethod.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Attacks.Methods.FixedShadowSpellDamageMethod.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="T:Zelda.Attacks.Methods.MagicSpellDamageMethod">
            <summary>
            Defines an AttackDamageMethod that deals MagicMin/MagicMax of damage of a specific spell school.
            Warning: This does not use the usual DamageSchoolContainer of ExtendedStatables!
            </summary>
        </member>
        <member name="F:Zelda.Attacks.Methods.MagicSpellDamageMethod.DamageTypeInfo">
            <summary>
            Stores type information about the damage inflicted by the MagicSpellDamageMethod.
            </summary>
        </member>
        <member name="P:Zelda.Attacks.Methods.MagicSpellDamageMethod.Element">
            <summary>
            Gets or sets the Element of the damage.
            </summary>
        </member>
        <member name="P:Zelda.Attacks.Methods.MagicSpellDamageMethod.Dodgable">
            <summary>
            Gets or sets a value indicating whether the damaage can be dodged.
            </summary>
            <value>
            The default value is false.
            </value>
        </member>
        <member name="M:Zelda.Attacks.Methods.MagicSpellDamageMethod.GetDamageDone(Zelda.Status.Statable,Zelda.Status.Statable)">
            <summary>
            Calculates the damage done by the <paramref name="user"/> on the <paramref name="target"/>
            using this <see cref="T:Zelda.Attacks.AttackDamageMethod"/>.
            </summary>
            <param name="user">The user of the attack.</param>
            <param name="target">The target of the attack.</param>
            <returns>The calculated result.</returns>
        </member>
        <member name="M:Zelda.Attacks.Methods.MagicSpellDamageMethod.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Attacks.Methods.MagicSpellDamageMethod.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="T:Zelda.Attacks.PlayerMultiFrameAttackTracker">
            <summary>
            Tracks the current 'normal' melee attack of the player
            -----------
            | | = frame
            x   = hit
            o   = no hit
            -   = stopped tracking
            -----------
            |x|-|-|-|-|
            |o|x|-|-|-|
            |o|o|x|-|-|
            |o|o|o|x|-|
            |o|o|o|o|x|
            |o|o|o|o|o|
            </summary>
        </member>
        <member name="T:Zelda.Attacks.Ranged.ArrowShowerAttack">
            <summary>
            The ArrowShowerAttack is an instant ranged attack
            that releases X arrows at the same time.
            <para>
            The arrows travel into the same direction
            and slowly start to spread out.
            </para>
            </summary>
        </member>
        <member name="F:Zelda.Attacks.Ranged.ArrowShowerAttack.SpeedCorrection">
            <summary>
            The speed correction that is applied to each arrow.
            This is needed to let the arrows 'spread' out.
            </summary>
        </member>
        <member name="P:Zelda.Attacks.Ranged.ArrowShowerAttack.ProjectileCount">
            <summary>
            Sets the number of projectiles this ArrowShowerAttack releases at the same time. 
            </summary>
            <exception cref="T:System.ArgumentException">
            Set: If the given value is less than zero.
            </exception>
        </member>
        <member name="P:Zelda.Attacks.Ranged.ArrowShowerAttack.AttackCount">
            <summary>
            Sets the number of attacks this ArrowShowerAttack this ArrowShowerAttack unleashes. 
            </summary>
            <exception cref="T:System.ArgumentException">
            Set: If the given value is less than zero.
            </exception>
        </member>
        <member name="M:Zelda.Attacks.Ranged.ArrowShowerAttack.#ctor(Zelda.Entities.PlayerEntity,Zelda.Attacks.Ranged.MultiShotDamageMethod,Zelda.Cooldown)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Attacks.Ranged.ArrowShowerAttack"/> class.
            </summary>
            <param name="player">
            The PlayerEntity which owns the new ArrowShowerAttack.
            </param>
            <param name="method">
            The AttackDamageMethod to use for calculating the damage
            that is done by the new ArrowShowerAttack. 
            </param>
            <param name="cooldown">
            The cooldown which defines the delay between two RangedAttacks.
            </param>
        </member>
        <member name="M:Zelda.Attacks.Ranged.ArrowShowerAttack.Setup(Zelda.IZeldaServiceProvider)">
            <summary>
            Setups this ArrowShowerAttack.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Attacks.Ranged.ArrowShowerAttack.Fire(Zelda.Entities.Components.Attackable)">
            <summary> 
            Fires this <see cref="T:Zelda.Attacks.Ranged.ArrowShowerAttack"/>. 
            </summary>
            <param name="target">
            This parameter is not used.
            </param>
            <returns>
            Returns true if the ArrowShower was launched;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Attacks.Ranged.ArrowShowerAttack.StartArrowShower">
            <summary>
            Starts the arrow shower attack.
            </summary>
        </member>
        <member name="M:Zelda.Attacks.Ranged.ArrowShowerAttack.StopArrowShower">
            <summary>
            Stops the arrow shower attack.
            </summary>
        </member>
        <member name="M:Zelda.Attacks.Ranged.ArrowShowerAttack.FireMultiShot">
            <summary>
            Fires one Multi Shot.
            </summary>
        </member>
        <member name="M:Zelda.Attacks.Ranged.ArrowShowerAttack.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this ArrowShowerAttack.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Attacks.Ranged.ArrowShowerAttack.OnPlayerDied(Zelda.Status.Statable)">
            <summary>
            Called when the player that owns this ArrowShowerAttack has died 
            turing firing the Arrow Shower.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
        </member>
        <member name="F:Zelda.Attacks.Ranged.ArrowShowerAttack.multiShotsFired">
            <summary>
            The number of multi shots the arrow shower has fired.
            </summary>
        </member>
        <member name="F:Zelda.Attacks.Ranged.ArrowShowerAttack.timeToNextMultiShot">
            <summary>
            The time left in seconds until the next multi shot is fired.
            </summary>
        </member>
        <member name="F:Zelda.Attacks.Ranged.ArrowShowerAttack.isAttacking">
            <summary>
            States whether arrow shower is currently firing.
            </summary>
        </member>
        <member name="F:Zelda.Attacks.Ranged.ArrowShowerAttack.projectileCount">
            <summary>
            The number of projectiles released per multi shot.
            </summary>
        </member>
        <member name="F:Zelda.Attacks.Ranged.ArrowShowerAttack.attackCount">
            <summary>
            The number of multi shots the Arrow Shower unleashese.
            </summary>
        </member>
        <member name="T:Zelda.Attacks.Ranged.LightArrowAttack">
            <summary>
            The LightArrow attack is a modified PlayerRangedAttack that
            also applies a Light effect to the Projectile it fires.
            This is a sealed class.
            </summary>
        </member>
        <member name="M:Zelda.Attacks.Ranged.LightArrowAttack.#ctor(Zelda.Entities.PlayerEntity,Zelda.Attacks.Ranged.LightArrowDamageMethod,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Attacks.Ranged.LightArrowAttack"/> class.
            </summary>
            <param name="player">
            The PlayerEntity that owns the new LightArrowAttack.
            </param>
            <param name="attackDamageMethod">
            The <see cref="T:Zelda.Attacks.Ranged.LightArrowDamageMethod"/> used by the new LightArrowAttack.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Attacks.Ranged.LightArrowAttack.Setup(Zelda.IZeldaServiceProvider)">
            <summary>
            Setups this LightArrowAttack.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Attacks.Ranged.LightArrowAttack.CreateArrowLight">
            <summary>
            Creates a new Light, used by the Light Arrow.
            </summary>
            <returns>
            The newly created Light.
            </returns>
        </member>
        <member name="M:Zelda.Attacks.Ranged.LightArrowAttack.SpawnProjectile(Zelda.Status.Statable,Atom.Math.Vector2,System.Int32,Atom.Math.Direction4,Atom.Math.Vector2)">
            <summary>
            Creates a new projectile object with the given settings
            and spawns it in the scene.
            </summary>
            <param name="creator">
            The object that fires the projectile.
            </param>
            <param name="position">
            The starting position of the projectile.
            </param>
            <param name="floorNumber">
            The number of the floor the projectile should spawn at.
            </param>
            <param name="direction">
            The direction the projectile is travelling in.
            </param>
            <param name="speed">
            The traveling speed of the projectile to spawn.
            </param>
            <returns>
            The ProjectileObject; taken from a pool of inactive projectiles.
            </returns>
        </member>
        <member name="M:Zelda.Attacks.Ranged.LightArrowAttack.OnLightArrowDestroyed(Zelda.Entities.Projectiles.Projectile)">
            <summary>
            Gets called when a LightArrow Projectile has been destroyed.
            </summary>
            <param name="projectile">
            The sender of the event.
            </param>
        </member>
        <member name="F:Zelda.Attacks.Ranged.LightArrowAttack.lightPool">
            <summary>
            The pool of Light resources. There can be only 5 Light Arrows around at the same time.
            </summary>
        </member>
        <member name="F:Zelda.Attacks.Ranged.LightArrowAttack.lightSprite">
            <summary>
            The sprite that is used to visualize the light.
            </summary>
        </member>
        <member name="T:Zelda.Attacks.Ranged.FireBombDamageMethod">
            <summary>
            Calculates the damage of a FireBomb.
            This class can't be inherited.
            </summary>
        </member>
        <member name="F:Zelda.Attacks.Ranged.FireBombDamageMethod.DamageTypeInfo">
            <summary>
            Stores type information about the damage inflicted by the FireBombDamageMethod.
            </summary>
        </member>
        <member name="M:Zelda.Attacks.Ranged.FireBombDamageMethod.GetDamageDone(Zelda.Status.Statable,Zelda.Status.Statable)">
            <summary>
            Calculates the damage done of the given user on the given target
            using the <see cref="T:Zelda.Attacks.Ranged.FireBombDamageMethod"/>.
            </summary>
            <param name="user">The user of the attack.</param>
            <param name="target">The target of the attack.</param>
            <returns>The results of the calculation.</returns>
        </member>
        <member name="M:Zelda.Attacks.Ranged.FireBombDamageMethod.GetMagicDamage(Zelda.Status.ExtendedStatable)">
            <summary>
            Gets the magical damage done by the FireBomb.
            </summary>
            <param name="user">
            The planter of the FireBomb.
            </param>
            <returns>
            The magical damage done by the FireBomb; before modifiers.
            </returns>
        </member>
        <member name="M:Zelda.Attacks.Ranged.FireBombDamageMethod.GetRangedDamage(Zelda.Status.ExtendedStatable)">
            <summary>
            Gets the ranged damage done by the FireBomb.
            </summary>
            <param name="user">
            The planter of the FireBomb.
            </param>
            <returns>
            The ranged damage done by the FireBomb; before modifiers.
            </returns>
        </member>
        <member name="M:Zelda.Attacks.Ranged.FireBombDamageMethod.GetCritDamageModifier(Zelda.Status.Statable)">
            <summary>
            Gets the critical damage modifier used by this FireBombDamageMethod.
            </summary>
            <param name="user">
            The user of the FireBomb.
            </param>
            <returns>
            The critical damage modifier that should be used
            when the FireBomb crits.
            </returns>
        </member>
        <member name="M:Zelda.Attacks.Ranged.FireBombDamageMethod.SetValues(System.Single,System.Single)">
            <summary>
            Sets the parameters of this FireBombDamageMethod.
            </summary>
            <param name="rangedDamageContribution">
            The amount of damage that comes from the ranged damage of the user.
            </param>
            <param name="magicDamageContribution">
            The amount of damage that comes from the magic damage of the user.
            </param>
        </member>
        <member name="F:Zelda.Attacks.Ranged.FireBombDamageMethod.rangedDamageContribution">
            <summary>
            The amount of damage that comes from the ranged damage of the user.
            </summary>
        </member>
        <member name="F:Zelda.Attacks.Ranged.FireBombDamageMethod.magicDamageContribution">
            <summary>
            The amount of damage that comes from the magic damage of the user.
            </summary>
        </member>
        <member name="T:Zelda.Attacks.Ranged.HeadshotDamageMethod">
            <summary>
            Calculates the damage done by the Headshot attack.
            This class can't be inherited.
            </summary>
        </member>
        <member name="F:Zelda.Attacks.Ranged.HeadshotDamageMethod.DamageTypeInfo">
            <summary>
            Stores type information about the damage inflicted by the HeadshotDamageMethod.
            </summary>
        </member>
        <member name="M:Zelda.Attacks.Ranged.HeadshotDamageMethod.GetDamageDone(Zelda.Status.Statable,Zelda.Status.Statable)">
            <summary>
            Calculates the damage done by the <paramref name="user"/> on the <paramref name="target"/>
            using this <see cref="T:Zelda.Attacks.AttackDamageMethod"/>.
            </summary>
            <param name="user">The user of the attack.</param>
            <param name="target">The target of the attack.</param>
            <returns>The calculated result.</returns>
        </member>
        <member name="M:Zelda.Attacks.Ranged.HeadshotDamageMethod.SetValues(System.Single,System.Single)">
            <summary>
            Sets the additional values of thie HeadshotDamageMethod.
            </summary>
            <param name="critChanceIncrease">
            The crit chance increase the Headshot attack has compared to a normal attack.
            </param>
            <param name="armorPiercingModifier">
            The modifier that is applied to the armor of the enemy.
            </param>
        </member>
        <member name="F:Zelda.Attacks.Ranged.HeadshotDamageMethod.extraCritChance">
            <summary>
            The crit chance increase the Headshot attack has compared to a normal attack.
            </summary>
        </member>
        <member name="F:Zelda.Attacks.Ranged.HeadshotDamageMethod.armorPiercingModifier">
            <summary>
            The modifier that is applied to the armor of the enemy.
            </summary>
        </member>
        <member name="T:Zelda.Attacks.Ranged.LightArrowDamageMethod">
            <summary>
            Calculates the damage of a LightArrow attack of the Player.
            This class can't be inherited.
            </summary>
        </member>
        <member name="F:Zelda.Attacks.Ranged.LightArrowDamageMethod.DamageTypeInfo">
            <summary>
            Stores type information about the damage inflicted by the LightArrowDamageMethod.
            </summary>
        </member>
        <member name="M:Zelda.Attacks.Ranged.LightArrowDamageMethod.GetDamageDone(Zelda.Status.Statable,Zelda.Status.Statable)">
            <summary>
            Calculates the damage done of the given user on the given target
            using the <see cref="T:Zelda.Attacks.Ranged.LightArrowDamageMethod"/>.
            </summary>
            <param name="user">The user of the attack.</param>
            <param name="target">The target of the attack.</param>
            <returns>The results of the calculation.</returns>
        </member>
        <member name="M:Zelda.Attacks.Ranged.LightArrowDamageMethod.ApplyFixedModifiers(System.Int32,Zelda.Status.ExtendedStatable,Zelda.Status.Statable)">
            <summary>
            Applies the fixed damage modifiers to the input damage.
            </summary>
            <param name="damage">
            The input damage.
            </param>
            <param name="user">
            The user of the LightArrow.
            </param>
            <param name="target">
            The target of the LightArrow.
            </param>
            <returns>
            The output damage.
            </returns>
        </member>
        <member name="M:Zelda.Attacks.Ranged.LightArrowDamageMethod.ApplyMultipliers(System.Int32,Zelda.Status.ExtendedStatable,Zelda.Status.Statable)">
            <summary>
            Applies the damage multipliers to the input damage.
            </summary>
            <param name="damage">
            The input damage.
            </param>
            <param name="user">
            The user of the LightArrow.
            </param>
            <param name="target">
            The target of the LightArrow.
            </param>
            <returns>
            The output damage.
            </returns>
        </member>
        <member name="M:Zelda.Attacks.Ranged.LightArrowDamageMethod.SetValues(System.Single,System.Int32)">
            <summary>
            Sets the parameters of this LightArrowDamageMethod.
            </summary>
            <param name="multiplier">
            The damage multiplier value.
            </param>
            <param name="fixedValue">
            The fixed damage increase.
            </param>
        </member>
        <member name="F:Zelda.Attacks.Ranged.LightArrowDamageMethod.multiplier">
            <summary>
            The damage multiplier applied by this LightArrowDamageMethod.
            </summary>
        </member>
        <member name="F:Zelda.Attacks.Ranged.LightArrowDamageMethod.fixedValue">
            <summary>
            The fixed damage increase applied by this LightArrowDamageMethod.
            </summary>
        </member>
        <member name="T:Zelda.Attacks.Ranged.MultiShotDamageMethod">
            <summary>
            Defines the AttackDamageMethod for the MultiShotAttack.
            Multi Shot does reduced damage compared to a normal ranged attack.
            </summary>
        </member>
        <member name="F:Zelda.Attacks.Ranged.MultiShotDamageMethod.DamageTypeInfo">
            <summary>
            Stores type information about the damage inflicted by the MultiShotDamageMethod.
            </summary>
        </member>
        <member name="M:Zelda.Attacks.Ranged.MultiShotDamageMethod.GetDamageDone(Zelda.Status.Statable,Zelda.Status.Statable)">
            <summary>
            Calculates the damage done of the specified user on the specified target
            using this AttackDamageMethod.
            </summary>
            <param name="user">The user of the attack.</param>
            <param name="target">The target of the attack.</param>
            <returns>The results of the attack.</returns>
        </member>
        <member name="T:Zelda.Attacks.Ranged.NormalPlayerRangedDamageMethod">
            <summary>
            Calculates the damage of a normal ranged attack of the Player. This is a sealed class.
            </summary>
        </member>
        <member name="F:Zelda.Attacks.Ranged.NormalPlayerRangedDamageMethod.DamageTypeInfo">
            <summary>
            Stores type information about the damage inflicted by the NormalPlayerRangedDamageMethod.
            </summary>
        </member>
        <member name="M:Zelda.Attacks.Ranged.NormalPlayerRangedDamageMethod.GetDamageDone(Zelda.Status.Statable,Zelda.Status.Statable)">
            <summary>
            Calculates the damage done by the <paramref name="user"/> on the <paramref name="target"/>
            using this <see cref="T:Zelda.Attacks.AttackDamageMethod"/>.
            </summary>
            <param name="user">The user of the attack.</param>
            <param name="target">The target of the attack.</param>
            <returns>The calculated result.</returns>
        </member>
        <member name="T:Zelda.Attacks.Ranged.PlayerRangedDamageMethod">
            <summary>
            Calculates the damage of a normal ranged attack of the Player. This is a sealed class.
            </summary>
        </member>
        <member name="F:Zelda.Attacks.Ranged.PlayerRangedDamageMethod.DamageTypeInfo">
            <summary>
            Stores type information about the damage inflicted by the PlayerRangedDamageMethod.
            </summary>
        </member>
        <member name="M:Zelda.Attacks.Ranged.PlayerRangedDamageMethod.GetDamageDone(Zelda.Status.Statable,Zelda.Status.Statable)">
            <summary>
            Calculates the damage done by the <paramref name="user"/> on the <paramref name="target"/>
            using this <see cref="T:Zelda.Attacks.AttackDamageMethod"/>.
            </summary>
            <param name="user">The user of the attack.</param>
            <param name="target">The target of the attack.</param>
            <returns>The calculated result.</returns>
        </member>
        <member name="M:Zelda.Attacks.Ranged.PlayerRangedDamageMethod.SetValues(System.Single)">
            <summary>
            Sets the values used by this PlayerRangedDamageMethod.
            </summary> 
            <param name="multiplier">
            The multiplier value that is applied to the damage done by this PlayerRangedDamageMethod.
            </param>
        </member>
        <member name="F:Zelda.Attacks.Ranged.PlayerRangedDamageMethod.multiplier">
            <summary>
            The multiplier value that is applied to the damage done by this PlayerRangedDamageMethod.
            </summary>
        </member>
        <member name="T:Zelda.Attacks.Ranged.ProjectileDamageMethod">
            <summary>
            Represents an <see cref="T:Zelda.Attacks.AttackDamageMethod"/> that provides
            access to the <see cref="T:Zelda.Entities.Projectiles.Projectile"/> currently processed in the AttackDamageMethod.
            </summary>
        </member>
        <member name="P:Zelda.Attacks.Ranged.ProjectileDamageMethod.CurrentProjectile">
            <summary>
            Gets the <see cref="T:Zelda.Entities.Projectiles.Projectile"/> currently processed by this ProjectileDamageMethod.
            </summary>
        </member>
        <member name="M:Zelda.Attacks.Ranged.ProjectileDamageMethod.OnCallerChanged(System.Object)">
            <summary>
            Gets called just before this AttackDamageMethod is used by
            a new calling object.
            </summary>
            <param name="caller">
            The object which is going to call this AttackDamageMethod.
            </param>
        </member>
        <member name="F:Zelda.Attacks.Ranged.ProjectileDamageMethod.projectile">
            <summary>
            Identifies the Projectile currently processed by this ProjectileDamageMethod.
            </summary>
        </member>
        <member name="T:Zelda.Attacks.Ranged.RangedDamageMethod">
            <summary>
            Calculates the damage of a ranged attack.
            This class can't be inherited.
            </summary>
        </member>
        <member name="F:Zelda.Attacks.Ranged.RangedDamageMethod.DamageTypeInfo">
            <summary>
            Stores type information about the damage inflicted by the RangedDamageMethod.
            </summary>
        </member>
        <member name="M:Zelda.Attacks.Ranged.RangedDamageMethod.GetDamageDone(Zelda.Status.Statable,Zelda.Status.Statable)">
            <summary>
            Calculates the damage done by the <paramref name="user"/> on the <paramref name="target"/>
            using this <see cref="T:Zelda.Attacks.AttackDamageMethod"/>.
            </summary>
            <param name="user">The user of the attack.</param>
            <param name="target">The target of the attack.</param>
            <returns>The calculated result.</returns>
        </member>
        <member name="T:Zelda.Attacks.Ranged.RangedNatureDotDamageMethod">
            <summary>
            Defines an AttackDamageMethod that is used
            to calculate the damage done by ranged nature damage over time attack.
            (aka. Poisoned Shot)
            </summary>
        </member>
        <member name="F:Zelda.Attacks.Ranged.RangedNatureDotDamageMethod.DamageTypeInfo">
            <summary>
            Stores type information about the damage inflicted by the FireBombDamageMethod.
            </summary>
        </member>
        <member name="M:Zelda.Attacks.Ranged.RangedNatureDotDamageMethod.GetDamageDone(Zelda.Status.Statable,Zelda.Status.Statable)">
            <summary>
            Calculates the damage done of the specified user on the specified target
            using this AttackDamageMethod.
            </summary>
            <param name="user">The user of the attack.</param>
            <param name="target">The target of the attack.</param>
            <returns>The results of the attack.</returns>
        </member>
        <member name="M:Zelda.Attacks.Ranged.RangedNatureDotDamageMethod.SetValues(System.Single)">
            <summary>
            Sets the values of this RangedNatureDotDamageMethod.
            </summary>
            <param name="multiplier">
            The multiplier applied to the damage of the attack.
            </param>
        </member>
        <member name="F:Zelda.Attacks.Ranged.RangedNatureDotDamageMethod.multiplier">
            <summary>
            The multiplier applied to the damage of the attack.
            </summary>
        </member>
        <member name="T:Zelda.Attacks.Ranged.MultiShotAttack">
            <summary>
            The MultiShotAttack is an instant ranged attack
            that releases X arrows at the same time.
            <para>
            The arrows travel into the same direction
            and slowly start to spread out.
            </para>
            </summary>
        </member>
        <member name="F:Zelda.Attacks.Ranged.MultiShotAttack.SpeedCorrection">
            <summary>
            The speed correction that is applied to each arrow.
            This is needed to let the arrows 'spread' out.
            </summary>
        </member>
        <member name="P:Zelda.Attacks.Ranged.MultiShotAttack.ProjectileCount">
            <summary>
            Sets the number of projectiles this MultiShotAttack releases at the same time. 
            </summary>
            <exception cref="T:System.ArgumentException">
            Set: If the given value is less than zero.
            </exception>
        </member>
        <member name="M:Zelda.Attacks.Ranged.MultiShotAttack.#ctor(Zelda.Entities.PlayerEntity,Zelda.Attacks.Ranged.MultiShotDamageMethod,Zelda.Cooldown)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Attacks.Ranged.MultiShotAttack"/> class.
            </summary>
            <param name="player">
            The PlayerEntity which owns the new MultiShotAttack.
            </param>
            <param name="method">
            The AttackDamageMethod to use for calculating the damage
            that is done by the new MultiShotAttack. 
            </param>
            <param name="cooldown">
            The Cooldown of the new MultiShotAttack.
            </param>
        </member>
        <member name="M:Zelda.Attacks.Ranged.MultiShotAttack.Setup(Zelda.IZeldaServiceProvider)">
            <summary>
            Setups this MultiShotAttack.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Attacks.Ranged.MultiShotAttack.Fire(Zelda.Entities.Components.Attackable)">
            <summary> 
            Fires this <see cref="T:Zelda.Attacks.Ranged.MultiShotAttack"/>. 
            </summary>
            <param name="target">
            This parameter is not used.
            </param>
            <returns>
            Returns true if the Multi Shot has been launched;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Attacks.Ranged.MultiShotAttack.FireMultiShot">
            <summary>
            Fires a Multi Shot into the direction the player is currently facing.
            </summary>
        </member>
        <member name="F:Zelda.Attacks.Ranged.MultiShotAttack.projectileCount">
            <summary>
            The number of projectiles released at a time.
            </summary>
        </member>
        <member name="T:Zelda.Attacks.Ranged.ProjectileMeleeAttack">
            <summary>
            Defines the MeleeAttack that is internally used by a <see cref="P:Zelda.Attacks.Ranged.ProjectileMeleeAttack.Projectile"/>
            to launch a strike against a hit enemy.
            </summary>
        </member>
        <member name="F:Zelda.Attacks.Ranged.ProjectileMeleeAttack.TimeUntilPiercedProjectileCanHitAgain">
            <summary>
            The time until a Projectile that has pierced a target can hit a new target.
            </summary>
        </member>
        <member name="P:Zelda.Attacks.Ranged.ProjectileMeleeAttack.Projectile">
            <summary>
            Gets the <see cref="P:Zelda.Attacks.Ranged.ProjectileMeleeAttack.Projectile"/> that owns this ProjectileMeleeAttack.
            </summary>
        </member>
        <member name="M:Zelda.Attacks.Ranged.ProjectileMeleeAttack.#ctor(Zelda.Entities.Projectiles.Projectile)">
            <summary>
            Initializes a new instance of the ProjectileMeleeAttack class.
            </summary>
            <param name="projectile">
            The Projectile that owns the new ProjectileMeleeAttack.
            </param>
        </member>
        <member name="F:Zelda.Attacks.Ranged.ProjectileMeleeAttack.projectile">
            <summary>
            The Projectile that owns this ProjectileMeleeAttack.
            </summary>
        </member>
        <member name="T:Zelda.Attacks.Ranged.RangedAttack">
            <summary>
            Defines an <see cref="T:Zelda.Attacks.Attack"/> that is used in Ranged Combat.
            </summary>
            <remarks>
            By default the attack's attack delay is the same as the object that uses it.
            </remarks>
        </member>
        <member name="E:Zelda.Attacks.Ranged.RangedAttack.ProjectileFired">
            <summary>
            Fired when a Projectile has been fired by this RangedAttack.
            </summary>
        </member>
        <member name="P:Zelda.Attacks.Ranged.RangedAttack.Settings">
            <summary>
            Gets the <see cref="T:Zelda.Entities.Projectiles.ProjectileSettings"/> that control the
            Projectiles fired by this RangedAttack.
            </summary>
        </member>
        <member name="P:Zelda.Attacks.Ranged.RangedAttack.HitSettings">
            <summary>
            Gets or sets the ProjectileHitSettings that is used for all Projectiles
            fired by this RangedAttack.
            </summary>
            <value>
            Is null by default.
            </value>
        </member>
        <member name="M:Zelda.Attacks.Ranged.RangedAttack.#ctor(Zelda.Entities.ZeldaEntity,Zelda.Attacks.AttackDamageMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Attacks.Ranged.RangedAttack"/> class.
            </summary>
            <param name="entity">
            The entity that owns the new RangedAttack.
            </param>
            <param name="method">
            The AttackDamageMethod that calculates the damage the new RangedAttack does. 
            </param>
            <exception cref="T:Atom.Components.ComponentNotFoundException">
            If the given <see cref="T:Zelda.Entities.ZeldaEntity"/> contains no <see cref="T:Zelda.Status.Statable"/> component.
            </exception>
        </member>
        <member name="M:Zelda.Attacks.Ranged.RangedAttack.Fire(Zelda.Entities.Components.Attackable)">
            <summary> 
            Fires this <see cref="T:Zelda.Attacks.Ranged.RangedAttack"/>. 
            </summary>
            <param name="target">
            This parameter is not used.
            </param>
            <returns>
            Whether this attack has been fired.
            </returns>
        </member>
        <member name="M:Zelda.Attacks.Ranged.RangedAttack.SpawnProjectile">
            <summary>
            Spawns the next Projectile.
            </summary>
        </member>
        <member name="M:Zelda.Attacks.Ranged.RangedAttack.GetProjectileMovementSpeed">
            <summary>
            Gets the movement speed of the next Projectile.
            </summary>
            <returns>
            The movement speed of the next Projectile.
            </returns>
        </member>
        <member name="M:Zelda.Attacks.Ranged.RangedAttack.SpawnProjectile(Zelda.Status.Statable,Atom.Math.Vector2,System.Int32,Atom.Math.Direction4,Atom.Math.Vector2)">
            <summary>
            Creates a new projectile object with the given settings
            and spawns it in the scene.
            </summary>
            <param name="creator">
            The object that fires the projectile.
            </param>
            <param name="position">
            The starting position of the projectile.
            </param>
            <param name="floorNumber">
            The number of the floor the projectile should spawn at.
            </param>
            <param name="direction">
            The direction the projectile is travelling in.
            </param>
            <param name="speed">
            The traveling speed of the projectile to spawn.
            </param>
            <returns>
            The ProjectileObject; taken from a pool of inactive projectiles.
            </returns>
        </member>
        <member name="M:Zelda.Attacks.Ranged.RangedAttack.SpawnProjectile(Atom.Math.Vector2,Atom.Math.Vector2)">
            <summary>
            Spawns a new projectile.
            </summary>
            <param name="position">The position to spawn a projectile at.</param>
            <param name="speed">The traveling speed of the projectile to spawn.</param>
        </member>
        <member name="F:Zelda.Attacks.Ranged.RangedAttack.settings">
            <summary>
            The settings applies to the Projectiles spawned by this RangedAttack.
            </summary>
        </member>
        <member name="T:Zelda.Attacks.Ranged.RangedEnemyAttackSettings">
            <summary>
            Encapsulates the attack settings of a Ranged Enemy, controlled by a RangedEnemyBehaviour.
            </summary>
        </member>
        <member name="P:Zelda.Attacks.Ranged.RangedEnemyAttackSettings.ExtraTimeBetweenAttacks">
            <summary>
            Gets or sets the extra time that is added to the attack cooldown
            before the Ranged Enemy fires a Projectile attack again.
            </summary>
        </member>
        <member name="P:Zelda.Attacks.Ranged.RangedEnemyAttackSettings.TimeUnmoveableAfterAttack">
            <summary>
            Gets or sets the time the Ranged Enemy is unable to move for
            after firing a Projectile.
            </summary>
        </member>
        <member name="P:Zelda.Attacks.Ranged.RangedEnemyAttackSettings.DamageMethod">
            <summary>
            Gets or sets the AttackDamageMethod that is used to calculate the damage
            done by the Projectiles fired by the Ranged Enemy.
            </summary>
        </member>
        <member name="P:Zelda.Attacks.Ranged.RangedEnemyAttackSettings.ProjectileSpriteGroup">
            <summary>
            Gets or sets the Sprite Group that is used to load the Projectile Sprites
            used by the Ranged Enemy.
            </summary>
        </member>
        <member name="P:Zelda.Attacks.Ranged.RangedEnemyAttackSettings.ProjectileSpeed">
            <summary>
            Gets or sets the speed of the Projectiles fired by the Ranged Enemy.
            </summary>
        </member>
        <member name="P:Zelda.Attacks.Ranged.RangedEnemyAttackSettings.HitSettings">
            <summary>
            Gets the <see cref="T:Zelda.Entities.Projectiles.ProjectileHitSettings"/> of the Ranged Enemy.
            </summary>
        </member>
        <member name="P:Zelda.Attacks.Ranged.RangedEnemyAttackSettings.ProjectileSprites">
            <summary>
            Gets the IProjectileSprites used to visualize the Projectiles
            fired by the Ranged Enemy.
            </summary>
        </member>
        <member name="M:Zelda.Attacks.Ranged.RangedEnemyAttackSettings.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the RangedEnemyAttackSettings class.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related settings.
            </param>
        </member>
        <member name="M:Zelda.Attacks.Ranged.RangedEnemyAttackSettings.SetDefaults(Zelda.IZeldaServiceProvider)">
            <summary>
            Setups this RangedAttackSettings to default values.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related settings.
            </param>
        </member>
        <member name="M:Zelda.Attacks.Ranged.RangedEnemyAttackSettings.LoadProjectileSprites(Atom.Xna.ISpriteLoader)">
            <summary>
            Tries to load the <see cref="P:Zelda.Attacks.Ranged.RangedEnemyAttackSettings.ProjectileSprites"/> using the current <see cref="P:Zelda.Attacks.Ranged.RangedEnemyAttackSettings.ProjectileSpriteGroup"/>.
            </summary>
            <param name="spriteLoader">
            Provides a mechanism that loads ISprite assets.
            </param>
        </member>
        <member name="M:Zelda.Attacks.Ranged.RangedEnemyAttackSettings.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Attacks.Ranged.RangedEnemyAttackSettings.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Attacks.Ranged.RangedEnemyAttackSettings.hitSettings">
            <summary>
            The ProjectileHitSettings used by the Ranged Attack.
            </summary>
        </member>
        <member name="T:Zelda.Attacks.Ranged.RangedPlayerAttack">
            <summary>
            Defines a <see cref="T:Zelda.Attacks.Ranged.RangedAttack"/> that is used by the Player.
            </summary>
        </member>
        <member name="P:Zelda.Attacks.Ranged.RangedPlayerAttack.IsUseable">
            <summary>
            Gets a value indicating whether this <see cref="T:Zelda.Attacks.Ranged.RangedPlayerAttack"/> can be used
            depending on the state of the PlayerEntity that owns it.
            </summary>
            <remarks>
            Ranged Attacks require a ranged weapon to be equiped.
            </remarks>
        </member>
        <member name="P:Zelda.Attacks.Ranged.RangedPlayerAttack.Player">
            <summary>
            Gets the <see cref="T:Zelda.Entities.PlayerEntity"/> that owns this RangedPlayerAttack.
            </summary>
        </member>
        <member name="P:Zelda.Attacks.Ranged.RangedPlayerAttack.DrawStrategy">
            <summary>
            Gets the <see cref="T:Zelda.Entities.Drawing.PlayerDrawDataAndStrategy"/> of the PlayerEntity
            that owns this PlayerRangedAttack.
            </summary>
        </member>
        <member name="M:Zelda.Attacks.Ranged.RangedPlayerAttack.#ctor(Zelda.Entities.PlayerEntity,Zelda.Attacks.AttackDamageMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Attacks.Ranged.RangedPlayerAttack"/> class.
            </summary>
            <param name="player">
            The entity that owns the new RangedPlayerAttack.
            </param>
            <param name="method">
            The AttackDamageMethod that calculates the damage the new RangedPlayerAttack does. 
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="player"/> or <paramref name="method"/> is null.
            </exception>
            <exception cref="T:Atom.Components.ComponentNotFoundException">
            If the given <see cref="T:Zelda.Entities.PlayerEntity"/> contains no <see cref="T:Zelda.Status.Statable"/> component.
            </exception>
        </member>
        <member name="M:Zelda.Attacks.Ranged.RangedPlayerAttack.#ctor(Zelda.Entities.PlayerEntity,Zelda.Attacks.AttackDamageMethod,Zelda.Cooldown)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Attacks.Ranged.RangedPlayerAttack"/> class.
            </summary>
            <param name="player">
            The entity that owns the new RangedPlayerAttack.
            </param>
            <param name="method">
            The AttackDamageMethod that calculates the damage the new RangedPlayerAttack does. 
            </param>
            <param name="cooldown">
            The Cooldown that is used to create a new TimedAttackLimiter for the new RangedPlayerAttack.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="player"/>, <paramref name="method"/> or <paramref name="cooldown"/> is null.
            </exception>
            <exception cref="T:Atom.Components.ComponentNotFoundException">
            If the given <see cref="T:Zelda.Entities.PlayerEntity"/> contains no <see cref="T:Zelda.Status.Statable"/> component.
            </exception>
        </member>
        <member name="M:Zelda.Attacks.Ranged.RangedPlayerAttack.Fire(Zelda.Entities.Components.Attackable)">
            <summary>
            Fires this <see cref="T:Zelda.Attacks.Ranged.RangedPlayerAttack"/>,
            launching a projectile.
            </summary>
            <param name="target">This paramter is not used.</param>
            <returns>
            true if the attack has been used;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Attacks.Ranged.RangedPlayerAttack.ShouldFire">
            <summary>
            Gets a value indicating whether this PlayerRangedAttack should fire.
            </summary>
            <returns>
            true if it can and should fire;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Attacks.Ranged.RangedPlayerAttack.SpawnProjectile">
            <summary>
            Spawns a new Projectile heading into the right direction.
            </summary>
        </member>
        <member name="F:Zelda.Attacks.Ranged.RangedPlayerAttack.player">
            <summary>
            The PlayerEntity that owns this <see cref="T:Zelda.Attacks.Ranged.RangedPlayerAttack"/>.
            </summary>
        </member>
        <member name="F:Zelda.Attacks.Ranged.RangedPlayerAttack.drawStrategy">
            <summary>
            The PlayerDrawDataAndStrategy associated with the PlayerEntity.
            </summary>
        </member>
        <member name="T:Zelda.Audio.BackgroundMusic">
            <summary>
            Represents a music resource that is played in the background.
            </summary>
            <remarks>
            Every scene has a list of BackgroundMusic from which is randomly choosen.
            </remarks>
        </member>
        <member name="P:Zelda.Audio.BackgroundMusic.FileName">
            <summary>
            Gets or sets the name that uniquely identifies this BackgroundMusic.
            </summary>
            <remarks>
            This does not include the path; but does include the extension.
            </remarks>
        </member>
        <member name="P:Zelda.Audio.BackgroundMusic.Volumne">
            <summary>
            Gets or sets the volumne this BackgroundMusic is played back at.
            </summary>
            <value>
            A value between 0.0 = silent and 1.0 = full. The default value is 1.0f.
            </value>
        </member>
        <member name="P:Zelda.Audio.BackgroundMusic.Requirement">
            <summary>
            Gets or sets the <see cref="T:Zelda.Core.Requirements.IRequirement"/> that must be fulfilled for this BackgroundMusic to be
            allowed to be played.
            </summary>
            <value>
            The default value is null.
            </value>
        </member>
        <member name="M:Zelda.Audio.BackgroundMusic.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Audio.BackgroundMusic.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Audio.BackgroundMusic.volumne">
            <summary>
            Represents the storage field of the <see cref="P:Zelda.Audio.BackgroundMusic.Volumne"/> property.
            </summary>
        </member>
        <member name="T:Zelda.Audio.BackgroundMusicComponent">
            <summary>
            Manages the music that is playing in the background of the game.
            This class can't be inherited.
            </summary>
        </member>
        <member name="E:Zelda.Audio.BackgroundMusicComponent.Changed">
            <summary>
            Fired when the currently playing background music has changed.
            </summary>
        </member>
        <member name="P:Zelda.Audio.BackgroundMusicComponent.Mode">
            <summary>
            Gets or sets the current mode of this BackgroundMusicComponent.
            </summary>
            <value>The default value is <see cref="F:Zelda.Audio.BackgroundMusicMode.Random"/>.</value>
        </member>
        <member name="P:Zelda.Audio.BackgroundMusicComponent.FadeInIsEnabled">
            <summary>
            Gets or sets a value indicating whether the fading in
            of music is enabled.
            </summary>
            <value>The default value is true.</value>
        </member>
        <member name="P:Zelda.Audio.BackgroundMusicComponent.FadeOutIsEnabled">
            <summary>
            Gets or sets a value indicating whether the fading out
            of music is enabled.
            </summary>
            <value>The default value is true.</value>
        </member>
        <member name="P:Zelda.Audio.BackgroundMusicComponent.MusicList">
            <summary>
            Gets or sets the list of background music that
            play if the BackgroundMusicComponent's mode is set to
            <see cref="F:Zelda.Audio.BackgroundMusicMode.Random"/>.
            </summary>
            <value>
            The list of background music.
            </value>
        </member>
        <member name="P:Zelda.Audio.BackgroundMusicComponent.ChannelGroup">
            <summary>
            Gets the <see cref="P:Zelda.Audio.BackgroundMusicComponent.ChannelGroup"/> all background music runs under.
            </summary>
        </member>
        <member name="P:Zelda.Audio.BackgroundMusicComponent.ManualChangeAllowed">
            <summary>
            Gets or sets a value indicating whether changing the background music
            using <see cref="M:Zelda.Audio.BackgroundMusicComponent.ChangeTo(System.String)"/> is currently allowed.
            </summary>
        </member>
        <member name="M:Zelda.Audio.BackgroundMusicComponent.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Audio.BackgroundMusicComponent"/> class.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Audio.BackgroundMusicComponent.Initialize">
            <summary>
            Initializes this BackgroundMusicComponent.
            </summary>
        </member>
        <member name="M:Zelda.Audio.BackgroundMusicComponent.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this BackgroundMusicComponent.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Audio.BackgroundMusicComponent.ChangeTo(System.String)">
            <summary>
            Tells this BackgroundMusicComponent to change
            to the background music with the given name.
            </summary>
            <param name="musicName">
            The name that uniquely identifies the
            music resource to change to.
            </param>
        </member>
        <member name="M:Zelda.Audio.BackgroundMusicComponent.ChangeTo(Atom.Fmod.Sound)">
            <summary>
            Tells this BackgroundMusicComponent to change 
            to the given background <paramref name="music"/>.
            </summary>
            <param name="music">
            The music to change to. (Must be loaden!)
            </param>
        </member>
        <member name="M:Zelda.Audio.BackgroundMusicComponent.RequestChangeTo(Atom.Fmod.Sound)">
            <summary>
            Tells this BackgroundMusicComponent to change 
            to the given background <paramref name="music"/>.
            </summary>
            <param name="music">
            The music to change to. (Must be loaden!)
            </param>
        </member>
        <member name="M:Zelda.Audio.BackgroundMusicComponent.OnChanged">
            <summary>
            Fires the <see cref="E:Zelda.Audio.BackgroundMusicComponent.Changed"/> event.
            </summary>
        </member>
        <member name="M:Zelda.Audio.BackgroundMusicComponent.ChangeToRandom">
            <summary>
            Tells this BackgroundMusicComponent to randomly change 
            to one of the background music in the <see cref="P:Zelda.Audio.BackgroundMusicComponent.MusicList"/>.
            </summary>
        </member>
        <member name="M:Zelda.Audio.BackgroundMusicComponent.ChangeVolumeTo(System.Single)">
            <summary>
            Changes the volume of the background music to the given value.
            </summary>
            <param name="newVolume">
            The volume (a value between 0 and 1) to change to.
            </param>
        </member>
        <member name="M:Zelda.Audio.BackgroundMusicComponent.RestoreVolume">
            <summary>
            Restores the volume of the background music to the value
            before the last call to <see cref="M:Zelda.Audio.BackgroundMusicComponent.ChangeVolumeTo(System.Single)"/>.
            </summary>
        </member>
        <member name="M:Zelda.Audio.BackgroundMusicComponent.IsPlaying(System.String)">
            <summary>
            Gets a value indicating whether the music with the given name
            is currently playing in the background.
            </summary>
            <param name="musicName">
            The name that uniquely identifies the music.
            </param>
            <returns>
            Returns true if the music with the given name is currently playing;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Audio.BackgroundMusicComponent.FindNext">
            <summary>
            Finds the next music to play, depending on the current BackgroundMusicMode.
            </summary>
        </member>
        <member name="M:Zelda.Audio.BackgroundMusicComponent.SelectRandomMusic">
            <summary>
            Randomly selects a music from the music list.
            </summary>
            <returns>
            The music that has been selected.
            </returns>
        </member>
        <member name="M:Zelda.Audio.BackgroundMusicComponent.ActuallySelectRandomMusic(System.Int32)">
            <summary>
            Randomly selects a <see cref="T:Zelda.Audio.BackgroundMusic"/> from the musicList.
            </summary>
            <param name="recursionDepth">
            The number of times ActuallySelectRandomMusic has been called recursively;
            this happens when the IRequirement of a choosen BackgroundMusic has not been fulfilled.
            </param>
            <returns>
            The BackgroundMusic that has been selected;
            or null if none.
            </returns>
        </member>
        <member name="M:Zelda.Audio.BackgroundMusicComponent.OnCurrentChannel_Ended(Atom.Fmod.Channel)">
            <summary>
            Called when the current song has ended.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
        </member>
        <member name="M:Zelda.Audio.BackgroundMusicComponent.Stop">
            <summary>
            Stops playing the current background music,
            without starting a new one.
            </summary>
        </member>
        <member name="F:Zelda.Audio.BackgroundMusicComponent.current">
            <summary>
            Identifies the currently playing background music.
            </summary>
        </member>
        <member name="F:Zelda.Audio.BackgroundMusicComponent.currentChannel">
            <summary>
            Identifies the channel the current background music is playing on.
            </summary>
        </member>
        <member name="F:Zelda.Audio.BackgroundMusicComponent.next">
            <summary>
            The next music to play.
            </summary>
        </member>
        <member name="F:Zelda.Audio.BackgroundMusicComponent.mode">
            <summary>
            The current BackgroundMusicMode.
            </summary>
        </member>
        <member name="F:Zelda.Audio.BackgroundMusicComponent.musicList">
            <summary>
            The list of random songs.
            </summary>
        </member>
        <member name="F:Zelda.Audio.BackgroundMusicComponent.isStoppingManually">
            <summary>
            States whether the current music is currently stopping to play.
            </summary>
        </member>
        <member name="F:Zelda.Audio.BackgroundMusicComponent.FadeInTime">
            <summary>
            The duration the music fades in/out for.
            </summary>
        </member>
        <member name="F:Zelda.Audio.BackgroundMusicComponent.FadeOutTime">
            <summary>
            The duration the music fades in/out for.
            </summary>
        </member>
        <member name="F:Zelda.Audio.BackgroundMusicComponent.fadeOutTimeLeft">
            <summary>
            The time that has passed since the fide in/out command.
            </summary>
        </member>
        <member name="F:Zelda.Audio.BackgroundMusicComponent.oldVolume">
            <summary>
            Stores the volume of the background music before the last call to <see cref="M:Zelda.Audio.BackgroundMusicComponent.ChangeVolumeTo(System.Single)"/>.
            </summary>
        </member>
        <member name="F:Zelda.Audio.BackgroundMusicComponent.requestedChangeTo">
            <summary>
            The sound to which a change request has been noted. Change requests are progressed once per frame.
            </summary>
        </member>
        <member name="F:Zelda.Audio.BackgroundMusicComponent.channelGroup">
            <summary>
            Idenfities the ChannelGroup under which the background music is grouped. 
            </summary>
        </member>
        <member name="F:Zelda.Audio.BackgroundMusicComponent.ingameState">
            <summary>
            Provides access to the current ingame state.
            </summary>
        </member>
        <member name="F:Zelda.Audio.BackgroundMusicComponent.rand">
            <summary>
            A random number generator.
            </summary>
        </member>
        <member name="F:Zelda.Audio.BackgroundMusicComponent.audioSystem">
            <summary>
            The Atom.Fmod.AudioSystem object.
            </summary>
        </member>
        <member name="F:Zelda.Audio.BackgroundMusicComponent.serviceProvider">
            <summary>
            Provides fast access to game-related services.
            </summary>
        </member>
        <member name="T:Zelda.Audio.BackgroundMusicMode">
            <summary>
            Enumerates the different modes the <see cref="T:Zelda.Audio.BackgroundMusicComponent"/> supports.
            </summary>
        </member>
        <member name="F:Zelda.Audio.BackgroundMusicMode.Random">
            <summary>
            The next song is randomly selected from a list of songs.
            </summary>
        </member>
        <member name="F:Zelda.Audio.BackgroundMusicMode.Loop">
            <summary>
            The current song is looping until the mode is changed.
            </summary>
        </member>
        <member name="T:Zelda.Audio.MusicFadeIner">
            <summary>
            Encapsulates the process of fading-in a Channel.
            </summary>
        </member>
        <member name="M:Zelda.Audio.MusicFadeIner.#ctor(Atom.Fmod.Channel,System.Single)">
            <summary>
            Initializes a new instance of the MusicFadeIner class.
            </summary>
            <param name="channel">
            The channel to fade-in. Can be null.
            </param>
            <param name="maximumVolumneTime">
            The time in seconds at which the channel should be completely faded in.
            </param>
        </member>
        <member name="M:Zelda.Audio.MusicFadeIner.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this MusicFadeIner.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Audio.MusicFadeIner.ApplyNewVolumne">
            <summary>
            Applies the new volumne value to the channel.
            </summary>
        </member>
        <member name="F:Zelda.Audio.MusicFadeIner.tickTime">
            <summary>
            The time that has passed in seconds.
            </summary>
        </member>
        <member name="F:Zelda.Audio.MusicFadeIner.hasFaded">
            <summary>
            States whether the MusicFadeIner has completed the fading process.
            </summary>
        </member>
        <member name="F:Zelda.Audio.MusicFadeIner.channel">
            <summary>
            The channel to fade-in.
            </summary>
        </member>
        <member name="F:Zelda.Audio.MusicFadeIner.maximumVolumneTime">
            <summary>
            The time in seconds at which the channel should have the MaximumVolumne.
            </summary>
        </member>
        <member name="T:Zelda.Audio.SoundSampleSettings">
            <summary>
            Encapsulates the settings of a simple Sound Sample.
            This is a sealed class.
            </summary>
        </member>
        <member name="P:Zelda.Audio.SoundSampleSettings.SampleName">
            <summary>
            Gets or sets the name of the sound sample that is played
            when a Projectile hits.
            </summary>
        </member>
        <member name="P:Zelda.Audio.SoundSampleSettings.Volumne">
            <summary>
            Gets or sets the volumne the sound sample should
            be played at.
            </summary>
            <value>The default value is 1.</value>
        </member>
        <member name="P:Zelda.Audio.SoundSampleSettings.Distance">
            <summary>
            Gets or sets the distance at which the sound is still audible.
            </summary>
        </member>
        <member name="P:Zelda.Audio.SoundSampleSettings.IsLooping">
            <summary>
            Gets or sets a value indicating whether the sample is looping.
            </summary>
            <value>The default value is false.</value>
        </member>
        <member name="M:Zelda.Audio.SoundSampleSettings.#ctor">
            <summary>
            Initializes a new instance of the SoundSampleSettings class.
            </summary>
        </member>
        <member name="M:Zelda.Audio.SoundSampleSettings.Setup(Zelda.IZeldaServiceProvider)">
            <summary>
            Setups this ProjectileHitSoundSettings.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Audio.SoundSampleSettings.PlayAt(Atom.Math.Vector2)">
            <summary>
            Plays the sound sample at the given <paramref name="position"/>.
            </summary>
            <param name="position">
            The position of the projectile.
            </param>
            <returns>
            The Channel in which the sample is playing.
            Might be null.
            </returns>
        </member>
        <member name="M:Zelda.Audio.SoundSampleSettings.LoadSound">
            <summary>
            Loads the Sound sample.
            </summary>
        </member>
        <member name="M:Zelda.Audio.SoundSampleSettings.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Audio.SoundSampleSettings.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Audio.SoundSampleSettings.sound">
            <summary>
            The actual -loaded- sound.
            </summary>
        </member>
        <member name="F:Zelda.Audio.SoundSampleSettings.volumne">
            <summary>
            Represents the backend storage field of the <see cref="P:Zelda.Audio.SoundSampleSettings.Volumne"/> property.
            </summary>
        </member>
        <member name="F:Zelda.Audio.SoundSampleSettings.distance">
            <summary>
            Represents the backend storage field of the <see cref="P:Zelda.Audio.SoundSampleSettings.Distance"/> property.
            </summary>
        </member>
        <member name="F:Zelda.Audio.SoundSampleSettings.audioSystem">
            <summary>
            The AudioSystem responsible for loading the Sound.
            </summary>
        </member>
        <member name="T:Zelda.Audio.ZeldaAudioSystem">
            <summary>
            Represents the FMOD AudioSystem used by the Zelda game.
            </summary>
        </member>
        <member name="M:Zelda.Audio.ZeldaAudioSystem.#ctor">
            <summary>
            Initializes a new instance of the ZeldaAudioSystem class.
            </summary>
        </member>
        <member name="M:Zelda.Audio.ZeldaAudioSystem.Initialize(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes this <see cref="T:Zelda.Audio.ZeldaAudioSystem"/>.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
            <returns>
            true if the initialization was successful; -or- otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Audio.ZeldaAudioSystem.LoadStaticSounds(Zelda.IZeldaServiceProvider)">
            <summary>
            Loads all statically accessable Sounds.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="T:Zelda.BubbleText">
            <summary>
            Represents a text that shows up within the gameworld as a bubble over an object.
            </summary>
        </member>
        <member name="P:Zelda.BubbleText.Ended">
            <summary>
            Gets or sets the <see cref="T:System.EventHandler"/> that is called when this BubbleText stops to be shown.
            </summary>
        </member>
        <member name="P:Zelda.BubbleText.Area">
            <summary>
            Gets the area which this <see cref="T:Zelda.BubbleText"/> covers.
            </summary>
        </member>
        <member name="P:Zelda.BubbleText.TextPosition">
            <summary>
            Gets the position where the text of this <see cref="T:Zelda.BubbleText"/> is drawn.
            </summary>
        </member>
        <member name="P:Zelda.BubbleText.Entity">
            <summary>
            Gets or sets the parent entity over which this <see cref="T:Zelda.BubbleText"/> hovers.
            </summary>
        </member>
        <member name="P:Zelda.BubbleText.Text">
            <summary>
            Gets or sets the text which is displayed by this <see cref="T:Zelda.BubbleText"/>.
            </summary>
        </member>
        <member name="P:Zelda.BubbleText.TimeLeft">
            <summary>
            Gets or sets the time left in seconds for which this <see cref="T:Zelda.BubbleText"/> will stay visible.
            </summary>
        </member>
        <member name="M:Zelda.BubbleText.Draw(Zelda.ZeldaDrawContext)">
            <summary>
            Draws this <see cref="T:Zelda.BubbleText"/>.
            </summary>
            <param name="drawContext">
            The current ZeldaDrawContext.
            </param>
        </member>
        <member name="M:Zelda.BubbleText.SetDuration(System.Single)">
            <summary>
            Sets the duration for which this <see cref="T:Zelda.BubbleText"/> shoudl be shown.
            </summary>
            <param name="duration">
            The duration in seconds.
            </param>
        </member>
        <member name="M:Zelda.BubbleText.ForceBlendOut">
            <summary>
            Forces this BubbleText to blend out, even if there is still time left.
            </summary>
        </member>
        <member name="T:Zelda.BubbleTextManager">
            <summary>
            Manages the <see cref="T:Zelda.BubbleText"/>-instances currently active within the game.
            </summary>
        </member>
        <member name="P:Zelda.BubbleTextManager.ActiveTextCount">
            <summary>
            The number of active <see cref="T:Zelda.BubbleText"/>-instances.
            </summary>
        </member>
        <member name="M:Zelda.BubbleTextManager.LoadContent">
            <summary>
            Loads the content of this BubbleTextManager.
            </summary>
        </member>
        <member name="M:Zelda.BubbleTextManager.ShowText(System.String,System.Single,Zelda.Entities.ZeldaEntity)">
            <summary>
            Shows a new BubbeText-Instance under the given <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
            <param name="text">
            The text to display.
            </param>
            <param name="duration">
            The duration in seconds for which the BubbleText should shown.
            </param>
            <param name="speaker">
            The speaker under which the BubbleText should eb shown.
            </param>
        </member>
        <member name="M:Zelda.BubbleTextManager.FindTextOf(Zelda.Entities.ZeldaEntity)">
            <summary>
            Tries to find the text that is currently shown under the given <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
        </member>
        <member name="M:Zelda.BubbleTextManager.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this BubbleTextManager.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.BubbleTextManager.Draw(Zelda.ZeldaDrawContext)">
            <summary>
            Draws this BubbleTextManager.
            </summary>
            <param name="drawContext">
            The current ZeldaDrawContext.
            </param>
        </member>
        <member name="M:Zelda.BubbleTextManager.Clear">
            <summary>
            Removes all <see cref="T:Zelda.BubbleText"/>s.
            </summary>
        </member>
        <member name="T:Zelda.Casting.Castable">
            <summary>
            Defines a <see cref="T:Zelda.Entities.Components.ZeldaComponent"/> that gives
            the <see cref="T:Zelda.Entities.ZeldaEntity"/> that owns the component
            the possibility to cast <see cref="T:Zelda.Casting.Spell"/>s.
            This class can't be inherited.
            </summary>
        </member>
        <member name="P:Zelda.Casting.Castable.CastBar">
            <summary>
            Gets the <see cref="P:Zelda.Casting.Castable.CastBar"/> of the castable <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
        </member>
        <member name="M:Zelda.Casting.Castable.Initialize">
            <summary>
            Called when this ZeldaComponent has been successfully attached to an Atom.Components.IEntity.
            </summary>
        </member>
        <member name="M:Zelda.Casting.Castable.Update(Atom.IUpdateContext)">
            <summary>
            Updates this Castable component.
            </summary>
            <param name="updateContext">
            The current IUpdateContext.
            </param>
        </member>
        <member name="F:Zelda.Casting.Castable.castBar">
            <summary>
            The <see cref="P:Zelda.Casting.Castable.CastBar"/> of the castable <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
        </member>
        <member name="T:Zelda.Casting.CastBar">
            <summary>
            The CastBar holds the logic behind casting of spells.
            This class can't be inherited.
            </summary>
            <remarks>
            Magical attacks/Spells that aren't instant
            use the CastBar for their casting process.
            </remarks>
        </member>
        <member name="E:Zelda.Casting.CastBar.Started">
            <summary>
            Fired when the casting of a spell has started.
            </summary>
        </member>
        <member name="E:Zelda.Casting.CastBar.Finished">
            <summary>
            Fired when the casting of a spell has finished.
            </summary>
        </member>
        <member name="P:Zelda.Casting.CastBar.IsCasting">
            <summary>
            Gets a value indicating whether the caster that owns this CastBar
            is currently casting a spell.
            </summary>
        </member>
        <member name="P:Zelda.Casting.CastBar.CastTime">
            <summary>
            Gets the time (in seconds) the currently casting Spell takes to execute;
            including the cast speed reduction modifier of the caster.
            </summary>
        </member>
        <member name="P:Zelda.Casting.CastBar.CastTimeLeft">
            <summary>
            Gets the time left (in seconds) until the currently casting Spell executes.
            </summary>
        </member>
        <member name="P:Zelda.Casting.CastBar.CastIndex">
            <summary>
            Gets a value indicating how far the cast process
            for the current Spell has gone.
            </summary>
            <remarks>
            This value is used to find the correct animation frame
            of the caster. Casting animations always have three frames.
            </remarks>
        </member>
        <member name="P:Zelda.Casting.CastBar.Caster">
            <summary>
            Gets the ZeldaEntity that owns this CastBar.
            </summary>
        </member>
        <member name="P:Zelda.Casting.CastBar.Statable">
            <summary>
            Gets the Statable component of the <see cref="P:Zelda.Casting.CastBar.Caster"/> that owns this CastBar.
            </summary>
        </member>
        <member name="M:Zelda.Casting.CastBar.#ctor(Zelda.Entities.ZeldaEntity)">
            <summary>
            Initializes a new instance of the CastBar class.
            </summary>
            <param name="entity">
            The ZeldaEntity that owns the new CastBar.
            </param>
            <exception cref="T:Atom.Components.ComponentNotFoundException">
            If the given <paramref name="entity"/> doesn't own the Statable component.
            </exception>
        </member>
        <member name="M:Zelda.Casting.CastBar.StartCast(Zelda.Casting.Spell)">
            <summary>
            Starts casting of the given <see cref="T:Zelda.Casting.Spell"/>.
            </summary>
            <param name="spell">
            The Spell to cast.
            </param>
            <returns>
            Returns <see langword="true"/> if casting has started;
            or otherwise <see langword="false"/> if there is already another Spell
            under the process of casting.
            </returns>
        </member>
        <member name="M:Zelda.Casting.CastBar.Update(System.Single)">
            <summary>
            Updates this CastBar.
            </summary>
            <param name="frameTime">
            The time the last frame took to execute (in seconds).
            </param>
        </member>
        <member name="M:Zelda.Casting.CastBar.ExecuteCast">
            <summary>
            Executes the currently casting Spell.
            </summary>
        </member>
        <member name="F:Zelda.Casting.CastBar.spell">
            <summary>
            The spell currently beeing cast.
            </summary>
        </member>
        <member name="F:Zelda.Casting.CastBar.castTimeLeft">
            <summary>
            The time in seconds left until the current
            Spell cast ends.
            </summary>
        </member>
        <member name="F:Zelda.Casting.CastBar.caster">
            <summary>
            Identifies the ZeldaEntity that owns this CastBar.
            </summary>
        </member>
        <member name="F:Zelda.Casting.CastBar.statable">
            <summary>
            Identifies the Statable component of the ZeldaEntity that owns this CastBar.
            </summary>
        </member>
        <member name="T:Zelda.Casting.FireTail">
            <summary>
            Represents a tail of fire bombs that explore in a row.
            </summary>
        </member>
        <member name="P:Zelda.Casting.FireTail.Color">
            <summary>
            Gets or sets the color tint of this FireTail. 
            </summary>
        </member>
        <member name="M:Zelda.Casting.FireTail.#ctor(Zelda.Entities.ZeldaEntity,Zelda.Entities.ZeldaEntity,Zelda.Attacks.AttackDamageMethod,Zelda.Attacks.AttackDamageMethod,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new <see cref="T:Zelda.Casting.FireTail"/> instance.
            </summary>
        </member>
        <member name="M:Zelda.Casting.FireTail.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this FireTail.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="T:Zelda.Casting.PlayerSpell">
            <summary>
            Represents a Spell that can only be used by the Player.
            </summary>
        </member>
        <member name="P:Zelda.Casting.PlayerSpell.IsUseable">
            <summary>
            Gets a value indicating whether this <see cref="T:Zelda.Casting.PlayerSpell"/> is useable depending on the state of its owner.
            </summary>
            <remarks>
            E.g. one usually can't use an attack while swimming,
            or if there is not enough mana to use it.
            </remarks>
        </member>
        <member name="P:Zelda.Casting.PlayerSpell.IsCastable">
            <summary>
            Gets a value indicating whether this Spell can currently be cast.
            </summary>
            <remarks>
            This property is the ultimate castable check.
            </remarks>
        </member>
        <member name="M:Zelda.Casting.PlayerSpell.#ctor(Zelda.Entities.PlayerEntity,System.Single,Zelda.Attacks.AttackDamageMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Casting.PlayerSpell"/> class.
            </summary>
            <param name="owner">
            The entity that owns the new PlayerSpell.
            </param>
            <param name="castTime">
            The time it takes for the new PlayerSpell to cast.
            </param>
            <param name="method">
            The AttackDamageMethod that calculates the damage the new PlayerSpell does. 
            </param>
        </member>
        <member name="F:Zelda.Casting.PlayerSpell.player">
            <summary>
            The PlayerEntity that owns this <see cref="T:Zelda.Casting.PlayerSpell"/>.
            </summary>
        </member>
        <member name="T:Zelda.Casting.Spell">
            <summary>
            Represents the base class of all magical <see cref="T:Zelda.Attacks.Attack"/>s.
            </summary>
        </member>
        <member name="P:Zelda.Casting.Spell.CastTime">
            <summary>
            Gets or sets the time (in seconds) this Spell takes to cast;
            before applying any cast-time modifiers.
            </summary>
        </member>
        <member name="P:Zelda.Casting.Spell.IsInstant">
            <summary>
            Gets a value indicating whether this Spell casts instantly.
            </summary>
        </member>
        <member name="P:Zelda.Casting.Spell.Castable">
            <summary>
            Gets the <see cref="P:Zelda.Casting.Spell.Castable"/> component of the ZeldaEntity that owns this Spell.
            </summary>
        </member>
        <member name="P:Zelda.Casting.Spell.IsCastable">
            <summary>
            Gets a value indicating whether this Spell can currently be cast.
            </summary>
            <remarks>
            This property is the ultimate castable check.
            </remarks>
        </member>
        <member name="M:Zelda.Casting.Spell.#ctor(Zelda.Entities.ZeldaEntity,System.Single,Zelda.Attacks.AttackDamageMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Casting.Spell"/> class.
            </summary>
            <param name="owner">
            The entity that owns the new Spell.
            </param>
            <param name="castTime">
            The time it takes for the new Spell to cast.
            </param>
            <param name="method">
            The AttackDamageMethod that calculates the damage the new Spell does. 
            </param>
            <exception cref="T:Atom.Components.ComponentNotFoundException">
            If the given <see cref="T:Zelda.Entities.ZeldaEntity"/> doesn't contain the <see cref="T:Zelda.Status.Statable"/> 
            and/or <see cref="P:Zelda.Casting.Spell.Castable"/> component.
            </exception>
        </member>
        <member name="M:Zelda.Casting.Spell.Cast">
            <summary>
            Starts to cast this Spell.
            </summary>
            <returns>
            Returns <see langword="true"/> if casting of this Spell has begun;
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="F:Zelda.Casting.Spell.castable">
            <summary>
            Identifies the Castable component of the ZeldaEntity that owns this Spell.
            </summary>
        </member>
        <member name="T:Zelda.Casting.Spells.FirePillarSpell">
            <summary>
            Represents a static pillar of fire that deals area damage.
            </summary>
        </member>
        <member name="P:Zelda.Casting.Spells.FirePillarSpell.TimeBetweenPillarAttacks">
            <summary>
            The time in seconds betweens attacks of a single pillar against a specific target.
            </summary>
        </member>
        <member name="P:Zelda.Casting.Spells.FirePillarSpell.AllowedAnimationIndexRange">
            <summary>
            The indices of the spell animation that are dealing damage.
            </summary>
        </member>
        <member name="P:Zelda.Casting.Spells.FirePillarSpell.OwnerStatable">
            <summary>
            The Statable component of the caster of this Spell.
            </summary>
        </member>
        <member name="M:Zelda.Casting.Spells.FirePillarSpell.#ctor(Zelda.Entities.ZeldaEntity,Zelda.Status.Statable,System.Single,Zelda.Attacks.AttackDamageMethod,Zelda.IZeldaServiceProvider,System.String)">
            <summary>
            Initializes a new instance of the FirePillarSpell class.
            </summary>
            <param name="owner">
            The entity that owns the new FirePillarSpell.
            </param>
            <param name="ownerStatable">
            The statable component of the entity that owns the new FirePillarSpell.
            </param>
            <param name="castTime">
            The time in seconds it takes to cast the new FirePillarSpell.
            </param>
            <param name="damageMethod">
            The method that should be used to calculate the damage done by the new FirePillarSpell.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
            <param name="animationName">
            The name of the pillar sprite animation.
            </param>
        </member>
        <member name="M:Zelda.Casting.Spells.FirePillarSpell.CreateFirePillarEntity">
            <summary>
            Creates an new Fire Pillar entity.
            </summary>
            <returns>
            The newly created Fire Pillar.
            </returns>
        </member>
        <member name="M:Zelda.Casting.Spells.FirePillarSpell.SetupFirePillarEntity(Zelda.Entities.DamageEffectEntity)">
            <summary>
            Allows custom initialization logic for Fire Pillars created by this FirePillarSpell
            to be inserted.
            </summary>
            <param name="firePillar">
            The Fire Pillar that was created created.
            </param>
        </member>
        <member name="M:Zelda.Casting.Spells.FirePillarSpell.CreatePoolableFirePillarEntity">
            <summary>
            Creates a new poolable Fire Pillar entity.
            </summary>
            <returns>
            The newly created Fire Pillar.
            </returns>
        </member>
        <member name="M:Zelda.Casting.Spells.FirePillarSpell.Fire(Zelda.Entities.Components.Attackable)">
            <summary>
            Fires this FirePillarSpell.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Zelda.Casting.Spells.FirePillarSpell.SpawnFirePillarAt(Atom.Math.Vector2,System.Int32,Zelda.ZeldaScene)">
            <summary>
            Creates and spawns a Fire Pillar at the specified location.
            </summary>
            <param name="position">
            The position to spawn the Fire Pillar at.
            </param>
            <param name="floorNumber">
            The floor number to spawn the Fire Pillar at.
            </param>
            <param name="scene">
            The scene to spawn in.
            </param>
            <returns>
            The newly spawned Fire Pillar.
            </returns>
        </member>
        <member name="M:Zelda.Casting.Spells.FirePillarSpell.CanSpawnAt(Atom.Math.Vector2,System.Int32,Zelda.ZeldaScene)">
            <summary>
            Gets a value indicating whether the pillar can spawn at the specified position.
            </summary>
            <param name="position">
            The position to spawn at.
            </param>
            <param name="floorNumber"></param>
            <param name="scene"></param>
            <returns></returns>
        </member>
        <member name="T:Zelda.Casting.Spells.FirePillarSpell.FirePillarAttackLimiter">
            <summary>
            Defines the IAttackLimiter that is responsible for limiting damage done by Fillar Pillar.
            </summary>
        </member>
        <member name="P:Zelda.Casting.Spells.FirePillarSpell.FirePillarAttackLimiter.IsAllowed">
            <summary>
            Gets a value indicating whether attacking in general is allowed.
            </summary>
            <value>
            true if it is allowed;
            otherwise false.
            </value>
        </member>
        <member name="M:Zelda.Casting.Spells.FirePillarSpell.FirePillarAttackLimiter.#ctor(System.Single,Atom.Xna.SpriteAnimation,Atom.Math.IntegerRange)">
            <summary>
            Initializes a new instance of the FirePillarAttackLimiter class.
            </summary>
            <param name="attackDelay">
            The time between an attack can hit the same enemy twice.
            </param>
            <param name="animation">
            Identifies the animation of the Fire Pillar whose attacks are limited by the new FirePillarAttackLimiter.
            </param>
            <param name="allowedAnimationIndexRange">
            The indices of the spell animation that are dealing damage.
            </param>
        </member>
        <member name="F:Zelda.Casting.Spells.FirePillarSpell.FirePillarAttackLimiter.animation">
            <summary>
            Identifies the animation of the Fire Pillar.
            </summary>
        </member>
        <member name="F:Zelda.Casting.Spells.FirePillarSpell.animationName">
            <summary>
            The name of the sprite animation asset used by the FirePillar.
            </summary>
        </member>
        <member name="F:Zelda.Casting.Spells.FirePillarSpell.sprite">
            <summary>
            Stores the AnimatedSprite that is sued to visualuze the Fire Pillars.
            </summary>
        </member>
        <member name="F:Zelda.Casting.Spells.FirePillarSpell.ownerStatable">
            <summary>
            The statable component of the entity that owns this FirePillarSpell.
            </summary>
        </member>
        <member name="F:Zelda.Casting.Spells.FirePillarSpell.pool">
            <summary>
            The pool of Fire Pillars, used to avoid setup time and allocating memory during gameplay.
            </summary>
        </member>
        <member name="T:Zelda.Casting.Spells.FirewallSpell">
            <summary>
            Represents a spell that casts a wall of fire next to the player.
            </summary>
            <remarks>
            The two possible setups are; where X is a Firewall Pillar and * the player.
            <para>
            X*X
            </para>
            <para>
             X
             *
             X
            </para>
            </remarks>
        </member>
        <member name="M:Zelda.Casting.Spells.FirewallSpell.#ctor(Zelda.Entities.PlayerEntity,System.Single,Zelda.Attacks.AttackDamageMethod,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the FirewallSpell class.
            </summary>
            <param name="player">
            The PlayerEntity that owns the new FirewallSpell.
            </param>
            <param name="castTime">
            The time it takes to cast the Firewall.
            </param>
            <param name="damageMethod">
            The damage method responsible for calculating the damage done by the Firewall.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Casting.Spells.FirewallSpell.Fire(Zelda.Entities.Components.Attackable)">
            <summary>
            Fires this FirewallSpell.
            </summary>
            <param name="target">
            This parameter is not used.
            </param>
            <returns>
            true if it was used;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Casting.Spells.FirewallSpell.SpawnFirePillar(Atom.Math.Vector2)">
            <summary>
            Spawns a single pillar of the Firewall.
            </summary>
            <param name="position">
            The spawn position.
            </param>
        </member>
        <member name="F:Zelda.Casting.Spells.FirewallSpell.firePillarSpell">
            <summary>
            The FirewallPillarSpell that is responsible for creating the pillars the Firewall is made of.
            </summary>
        </member>
        <member name="T:Zelda.Casting.Spells.FirewallSpell.FirewallPillarSpell">
            <summary>
            Represents the spell that is responsible for creating the individual pillars of a Firewall.
            </summary>
        </member>
        <member name="M:Zelda.Casting.Spells.FirewallSpell.FirewallPillarSpell.#ctor(Zelda.Entities.PlayerEntity,Zelda.Attacks.AttackDamageMethod,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the FirewallPillarSpell class.
            </summary>
            <param name="player">
            The player that owns the new FirewallPillarSpell.
            </param>
            <param name="damageMethod">
            The damage method used to calculate the damage done by each individual pillar.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related servives.
            </param>
        </member>
        <member name="M:Zelda.Casting.Spells.FirewallSpell.FirewallPillarSpell.SetupFirePillarEntity(Zelda.Entities.DamageEffectEntity)">
            <summary>
            Allows custom initialization logic for Fire Pillars created by this FirePillarSpell
            to be inserted.
            </summary>
            <param name="firePillar">
            The Fire Pillar that was created created.
            </param>
        </member>
        <member name="T:Zelda.Casting.Spells.FlamesOfPhlegethonSpell">
            <summary>
            Summons {0} wave(s) of fire directly from the underworld.
            Targets that are hit take {0}% to {1}% fire damage.
            {1} secs cooldown. {2} secs cast time.
            </summary>
        </member>
        <member name="F:Zelda.Casting.Spells.FlamesOfPhlegethonSpell.TimeBetweenPillars">
            <summary>
            The time between two pillar spawns within a single wave.
            </summary>
        </member>
        <member name="F:Zelda.Casting.Spells.FlamesOfPhlegethonSpell.TimeBetweenWaves">
            <summary>
            The time between two waves of flames.
            </summary>
        </member>
        <member name="F:Zelda.Casting.Spells.FlamesOfPhlegethonSpell.WaveTime">
            <summary>
            The time any Wave is active for.
            </summary>
        </member>
        <member name="P:Zelda.Casting.Spells.FlamesOfPhlegethonSpell.MaximumWaveCount">
            <summary>
            Gets or sets the maximum number of waves the FlamesOfPhlegethonSpell should spawn.
            </summary>
        </member>
        <member name="M:Zelda.Casting.Spells.FlamesOfPhlegethonSpell.#ctor(Zelda.Entities.PlayerEntity,System.Single,Zelda.Attacks.AttackDamageMethod,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the FlamesOfPhlegethonSpell class.
            </summary>
            <param name="owner">
            The PlayerEntity that owns the new FlamesOfPhlegethonSpell.
            </param>
            <param name="castTime">
            The time it takes to cast the new FlamesOfPhlegethonSpell.
            </param>
            <param name="method">
            The AttackDamageMethod that is used to calculate the damage done of the new FlamesOfPhlegethonSpell.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Casting.Spells.FlamesOfPhlegethonSpell.OnPlayerDied(Zelda.Status.Statable)">
            <summary>
            Called when the player that owns this FlamesOfPhlegethonSpell has died
            </summary>
            <param name="sender">The sender of the event.</param>
        </member>
        <member name="M:Zelda.Casting.Spells.FlamesOfPhlegethonSpell.EnsureWavesAreAllocated">
            <summary>
            Ensures that enough <see cref="T:Zelda.Casting.Spells.FlamesOfPhlegethonSpell.Wave"/> instances have been allocated.
            </summary>
        </member>
        <member name="M:Zelda.Casting.Spells.FlamesOfPhlegethonSpell.AllocateWave">
            <summary>
            Allocates a new Wave instance.
            </summary>
        </member>
        <member name="M:Zelda.Casting.Spells.FlamesOfPhlegethonSpell.Fire(Zelda.Entities.Components.Attackable)">
            <summary>
            Fires this FlamesOfPhlegethonSpell.
            </summary>
            <param name="target">
            This paramter is not used.
            </param>
            <returns>
            Always true; spells are cast instead of fired.
            </returns>
        </member>
        <member name="M:Zelda.Casting.Spells.FlamesOfPhlegethonSpell.Reset">
            <summary>
            Resets the state of this FlamesOfPhlegethonSpell.
            </summary>
        </member>
        <member name="M:Zelda.Casting.Spells.FlamesOfPhlegethonSpell.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this FlamesOfPhlegethonSpell.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Casting.Spells.FlamesOfPhlegethonSpell.CanSpawnMoreWaves">
            <summary>
            Gets a value indicating whether more an additional
            <see cref="T:Zelda.Casting.Spells.FlamesOfPhlegethonSpell.Wave"/> of flames can be spawned.
            </summary>
        </member>
        <member name="M:Zelda.Casting.Spells.FlamesOfPhlegethonSpell.UpdateWaveSpawning(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates the logic of spawning the next Wave.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Casting.Spells.FlamesOfPhlegethonSpell.StartNextWave">
            <summary>
            Starts/Spawns the next wave.
            </summary>
        </member>
        <member name="M:Zelda.Casting.Spells.FlamesOfPhlegethonSpell.GetInactiveWave">
            <summary>
            Gets a currently non-active <see cref="T:Zelda.Casting.Spells.FlamesOfPhlegethonSpell.Wave"/> object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zelda.Casting.Spells.FlamesOfPhlegethonSpell.UpdateWaves(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates the currently active <see cref="T:Zelda.Casting.Spells.FlamesOfPhlegethonSpell.Wave"/>s.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Casting.Spells.FlamesOfPhlegethonSpell.OnWaveEnded(Zelda.Casting.Spells.FlamesOfPhlegethonSpell.Wave)">
            <summary>
            Called when a Wave of this FlamesOfPhlegethonSpell has ended.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
        </member>
        <member name="M:Zelda.Casting.Spells.FlamesOfPhlegethonSpell.AreAllWavesInactive">
            <summary>
            Gets a value indicating whether all Waves of this FlamesOfPhlegethonSpell
            are indicating.
            </summary>
            <returns>
            true if all waves are inactive;
            otherwise false.
            </returns>
        </member>
        <member name="F:Zelda.Casting.Spells.FlamesOfPhlegethonSpell.isActive">
            <summary>
            States whther this FlamesOfPhlegethonSpell is currently active.
            </summary>
        </member>
        <member name="F:Zelda.Casting.Spells.FlamesOfPhlegethonSpell.waveCount">
            <summary>
            The number of waves that have been spawned.
            </summary>
        </member>
        <member name="F:Zelda.Casting.Spells.FlamesOfPhlegethonSpell.timeLeftUntilNextWave">
            <summary>
            The time left in seconds until the next wave spawns.
            </summary>
        </member>
        <member name="F:Zelda.Casting.Spells.FlamesOfPhlegethonSpell.maximumWaveCount">
            <summary>
            The maximum number of waves that should be spawned.
            </summary>
        </member>
        <member name="F:Zelda.Casting.Spells.FlamesOfPhlegethonSpell.pillarSpell">
            <summary>
            The spell that is responsible for creating the individual pillars
            of the Waves.
            </summary>
        </member>
        <member name="F:Zelda.Casting.Spells.FlamesOfPhlegethonSpell.waves">
            <summary>
            The list of all active and non-active Waves.
            </summary>
        </member>
        <member name="T:Zelda.Casting.Spells.FlamesOfPhlegethonSpell.Wave">
            <summary>
            Represents a single wave of fire pillars of the FlamesOfPhlegethonSpell.
            </summary>
        </member>
        <member name="E:Zelda.Casting.Spells.FlamesOfPhlegethonSpell.Wave.Ended">
            <summary>
            Raised when this Wave has ended.
            </summary>
        </member>
        <member name="P:Zelda.Casting.Spells.FlamesOfPhlegethonSpell.Wave.IsActive">
            <summary>
            Gets a value indicating whether this Wave is currently active.
            </summary>
        </member>
        <member name="M:Zelda.Casting.Spells.FlamesOfPhlegethonSpell.Wave.#ctor(Zelda.Casting.Spells.FlamesOfPhlegethonSpell)">
            <summary>
            Initializes a new instance of the Wave class.
            </summary>
            <param name="spell">
            Identifies the FlamesOfPhlegethonSpell that owns the new Wave.
            </param>
        </member>
        <member name="M:Zelda.Casting.Spells.FlamesOfPhlegethonSpell.Wave.Reset">
            <summary>
            Resets this Wave.
            </summary>
        </member>
        <member name="M:Zelda.Casting.Spells.FlamesOfPhlegethonSpell.Wave.Start">
            <summary>
            Starts this Wave.
            </summary>
        </member>
        <member name="M:Zelda.Casting.Spells.FlamesOfPhlegethonSpell.Wave.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this Wave.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Casting.Spells.FlamesOfPhlegethonSpell.Wave.UpdateSpawnPosition(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates the position at which this Wave currently spawns pillars.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Casting.Spells.FlamesOfPhlegethonSpell.Wave.UpdatePillarSpawning(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates the spawning of the Fire Pillars of this Wave.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Casting.Spells.FlamesOfPhlegethonSpell.Wave.SpawnPillar">
            <summary>
            Spawns a new Fire Pillar at the current position.
            </summary>
        </member>
        <member name="M:Zelda.Casting.Spells.FlamesOfPhlegethonSpell.Wave.GetPillarSpawnPosition">
            <summary>
            Gets the position at which the next pillar should be spawned.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Zelda.Casting.Spells.FlamesOfPhlegethonSpell.Wave.timeLeft">
            <summary>
            The time left this Wave is active for.
            </summary>
        </member>
        <member name="F:Zelda.Casting.Spells.FlamesOfPhlegethonSpell.Wave.timeLeftUntilNextPillar">
            <summary>
            The time left until the next pillar of this Wave spawns.
            </summary>
        </member>
        <member name="F:Zelda.Casting.Spells.FlamesOfPhlegethonSpell.Wave.angle">
            <summary>
            The current angle of this Wave.
            </summary>
        </member>
        <member name="F:Zelda.Casting.Spells.FlamesOfPhlegethonSpell.Wave.angleSpeed">
            <summary>
            The speed at which the angle of this Wave changes.
            </summary>
        </member>
        <member name="F:Zelda.Casting.Spells.FlamesOfPhlegethonSpell.Wave.range">
            <summary>
            The current range of this Wave.
            </summary>
        </member>
        <member name="F:Zelda.Casting.Spells.FlamesOfPhlegethonSpell.Wave.rangeSpeed">
            <summary>
            The speed at which the range of this Wave changes.
            </summary>
        </member>
        <member name="F:Zelda.Casting.Spells.FlamesOfPhlegethonSpell.Wave.isActive">
            <summary>
            States whether this Wave is currently active.
            </summary>
        </member>
        <member name="F:Zelda.Casting.Spells.FlamesOfPhlegethonSpell.Wave.spell">
            <summary>
            Identifies the FlamesOfPhlegethonSpell that owns the new Wave.
            </summary>
        </member>
        <member name="T:Zelda.Casting.Spells.FlamesOfPhlegethonSpell.FlamesOfPhlegethonPillar">
            <summary>
            Represents the spell responsible for creating the individual pillars
            of the Flames of Phlegethon spell.
            </summary>
        </member>
        <member name="M:Zelda.Casting.Spells.FlamesOfPhlegethonSpell.FlamesOfPhlegethonPillar.#ctor(Zelda.Entities.PlayerEntity,Zelda.Attacks.AttackDamageMethod,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the FlamesOfPhlegethonPillar class.
            </summary>
            <param name="player">
            The player that owns the new FirewallPillarSpell.
            </param>
            <param name="damageMethod">
            The damage method used to calculate the damage done by each individual pillar.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related servives.
            </param>
        </member>
        <member name="M:Zelda.Casting.Spells.FlamesOfPhlegethonSpell.FlamesOfPhlegethonPillar.SetupFirePillarEntity(Zelda.Entities.DamageEffectEntity)">
            <summary>
            Allows custom initialization logic for Fire Pillars created by this FirePillarSpell
            to be inserted.
            </summary>
            <param name="firePillar">
            The Fire Pillar that was created created.
            </param>
        </member>
        <member name="T:Zelda.Casting.Spells.Lightning.LightningBoltEntity">
            <summary>
            Represents a single independent LightningBolt that damages everything
            that crosses its path.
            </summary>
        </member>
        <member name="P:Zelda.Casting.Spells.Lightning.LightningBoltEntity.StartJitterX">
            <summary>
            Gets or sets the jittering range on the x-axis of the start point.
            </summary>
        </member>
        <member name="P:Zelda.Casting.Spells.Lightning.LightningBoltEntity.StartJitterY">
            <summary>
            Gets or sets the jittering range on the y-axis of the start point.
            </summary>
        </member>
        <member name="P:Zelda.Casting.Spells.Lightning.LightningBoltEntity.EndJitterX">
            <summary>
            Gets or sets the jittering range on the x-axis of the end point.
            </summary>
        </member>
        <member name="P:Zelda.Casting.Spells.Lightning.LightningBoltEntity.EndJitterY">
            <summary>
            Gets or sets the jittering range on the y-axis of the end point.
            </summary>
        </member>
        <member name="P:Zelda.Casting.Spells.Lightning.LightningBoltEntity.Start">
            <summary>
            Gets the start point of the LightningBolt.
            </summary>
        </member>
        <member name="P:Zelda.Casting.Spells.Lightning.LightningBoltEntity.End">
            <summary>
            Gets the end point of the LightningBolt.
            </summary>
        </member>
        <member name="P:Zelda.Casting.Spells.Lightning.LightningBoltEntity.Width">
            <summary>
            Gets or sets the width of the collision area of the LightningBolt.
            </summary>
        </member>
        <member name="P:Zelda.Casting.Spells.Lightning.LightningBoltEntity.Settings">
            <summary>
            Gets or sets the LightningSettings instance that allows to change the settings of the LightningBolt.
            </summary>
        </member>
        <member name="P:Zelda.Casting.Spells.Lightning.LightningBoltEntity.IsLightningEnabled">
            <summary>
            Gets or sets a value indicating whether the lightning effect
            of the bolt is enabled.
            </summary>
        </member>
        <member name="P:Zelda.Casting.Spells.Lightning.LightningBoltEntity.IsLightOnly">
            <summary>
            Gets a value indicating whether only the DrawLight method of this ILight is called
            during the light drawing pass;
            -or- also the Draw method during the normal drawing pass.
            </summary>
        </member>
        <member name="M:Zelda.Casting.Spells.Lightning.LightningBoltEntity.#ctor">
            <summary>
            Initializes a new instance of the LightningBoltEntity class.
            </summary>
        </member>
        <member name="M:Zelda.Casting.Spells.Lightning.LightningBoltEntity.SetLocation(Atom.Math.Vector2,Atom.Math.Vector2)">
            <summary>
            Sets the start and end position of the LightningBolt.
            </summary>
            <param name="start">
            The start position.
            </param>
            <param name="end">
            The end. position.
            </param>
        </member>
        <member name="M:Zelda.Casting.Spells.Lightning.LightningBoltEntity.Setup(Zelda.IZeldaServiceProvider)">
            <summary>
            Setups this LightningBoltEntity.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Casting.Spells.Lightning.LightningBoltEntity.SetupPostProcess(Zelda.IZeldaServiceProvider)">
            <summary>
            Setups the post-processing effects required for the light pass.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Casting.Spells.Lightning.LightningBoltEntity.UpdateBoltPositions">
            <summary>
            Updates the position at which the LightningBolt is rendered.
            </summary>
        </member>
        <member name="M:Zelda.Casting.Spells.Lightning.LightningBoltEntity.Reset">
            <summary>
            Resets this LightningBoltEntity.
            </summary>
        </member>
        <member name="M:Zelda.Casting.Spells.Lightning.LightningBoltEntity.Draw(Zelda.ZeldaDrawContext)">
            <summary>
            Draws this LightningBoltEntity.
            </summary>
            <param name="drawContext">
            The current ZeldaDrawContext.
            </param>
        </member>
        <member name="M:Zelda.Casting.Spells.Lightning.LightningBoltEntity.DrawLight(Zelda.ZeldaDrawContext)">
            <summary>
            Draws this Light. This method is called during the "Light-Drawing-Pass".
            </summary>
            <param name="drawContext">
            The current IDrawContext.
            </param>
        </member>
        <member name="M:Zelda.Casting.Spells.Lightning.LightningBoltEntity.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this LightningBoltEntity.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Casting.Spells.Lightning.LightningBoltEntity.PreDraw(Zelda.ZeldaDrawContext)">
            <summary>
            Called before drawing anything is drawn.
            </summary>
            <param name="drawContext">
            The current ZeldaDrawContext.
            </param>
        </member>
        <member name="M:Zelda.Casting.Spells.Lightning.LightningBoltEntity.TestCollision">
            <summary>
            Tests for collesion against enemy objects.
            </summary>
        </member>
        <member name="F:Zelda.Casting.Spells.Lightning.LightningBoltEntity.bolt">
            <summary>
            The actual bolt effect that drives everything.
            </summary>
        </member>
        <member name="F:Zelda.Casting.Spells.Lightning.LightningBoltEntity.rand">
            <summary>
            A random number generator.
            </summary>
        </member>
        <member name="F:Zelda.Casting.Spells.Lightning.LightningBoltEntity.start">
            <summary>
            Captures the current source position of the LightningBolt.
            </summary>
        </member>
        <member name="F:Zelda.Casting.Spells.Lightning.LightningBoltEntity.end">
            <summary>
            Captures the current destionation position of the LightningBolt.
            </summary>
        </member>
        <member name="F:Zelda.Casting.Spells.Lightning.LightningBoltEntity.area">
            <summary>
            The oriented collision area the bolt takes up.
            </summary>
        </member>
        <member name="F:Zelda.Casting.Spells.Lightning.LightningBoltEntity.texture">
            <summary>
            Stores the Lightning that has been rendered.
            </summary>
        </member>
        <member name="F:Zelda.Casting.Spells.Lightning.LightningBoltEntity.settings">
            <summary>
            The LightningSettings the LightningBolt uses.
            </summary>
        </member>
        <member name="T:Zelda.Casting.Spells.Lightning.LightningSparkEntity">
            <summary>
            
            </summary>
            <remarks>
               *
               |
            *--X--*
               |
               *
            </remarks>
        </member>
        <member name="F:Zelda.Casting.Spells.Lightning.LightningSparkEntity.RayWalkStepSize">
            <summary>
            The length in pixels that is taken per step while ray-casting the lightning bolts against the tilemap.
            </summary>
        </member>
        <member name="P:Zelda.Casting.Spells.Lightning.LightningSparkEntity.MaximumLength">
            <summary>
            Gets or sets the maximum length of a single Lightning Bolt.
            </summary>
        </member>
        <member name="P:Zelda.Casting.Spells.Lightning.LightningSparkEntity.Offset">
            <summary>
            Gets or sets the offset from the position of this LightningSparkEntity to the
            start of the lightning bolts.
            </summary>
        </member>
        <member name="P:Zelda.Casting.Spells.Lightning.LightningSparkEntity.Creator">
            <summary>
            Gets or sets the statable component of the entity that
            has created the sparks.
            </summary>
        </member>
        <member name="P:Zelda.Casting.Spells.Lightning.LightningSparkEntity.DamageMethod">
            <summary>
            Gets or sets the method that is used to calculate thed amage
            done by the spark.
            </summary>
        </member>
        <member name="P:Zelda.Casting.Spells.Lightning.LightningSparkEntity.IsAutomaticallyRebuild">
            <summary>
            Gets or sets a value indicating whether this LightningSparkEntity
            is automatically rebuild when its transformation changes.
            </summary>
            <value>
            The default value is true.
            </value>
        </member>
        <member name="M:Zelda.Casting.Spells.Lightning.LightningSparkEntity.#ctor">
            <summary>
            Initializes a new instance of the LightningSparkEntity class.
            </summary>
        </member>
        <member name="M:Zelda.Casting.Spells.Lightning.LightningSparkEntity.OnAddedToScene(System.Object,Zelda.ZeldaScene)">
            <summary>
            Called when this LightningSparkEntity was added to the specified scene.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
            <param name="scene">
            The scene to which this LightningSparkEntity has been added to.
            </param>
        </member>
        <member name="M:Zelda.Casting.Spells.Lightning.LightningSparkEntity.OnRemovedFromScene(System.Object,Zelda.ZeldaScene)">
            <summary>
            Called when this LightningSparkEntity was removed to the specified scene.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
            <param name="scene">
            The scene to which this LightningSparkEntity has been removed from.
            </param>
        </member>
        <member name="M:Zelda.Casting.Spells.Lightning.LightningSparkEntity.Setup(Zelda.IZeldaServiceProvider)">
            <summary>
            Setups this LightningSparkEntity.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Casting.Spells.Lightning.LightningSparkEntity.OnTransformChanged(Atom.Components.Transform.ITransform2)">
            <summary>
            
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:Zelda.Casting.Spells.Lightning.LightningSparkEntity.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            
            </summary>
            <param name="updateContext"></param>
        </member>
        <member name="M:Zelda.Casting.Spells.Lightning.LightningSparkEntity.Rebuild">
            <summary>
            Updates the starting and ending positions of the lightning bolts this lightning sparks consists of. 
            </summary>
        </member>
        <member name="M:Zelda.Casting.Spells.Lightning.LightningSparkEntity.Reset">
            <summary>
            Resets all bolts of this spark.
            </summary>
        </member>
        <member name="F:Zelda.Casting.Spells.Lightning.LightningSparkEntity.settings">
            <summary>
            The settings taht are applied to the bolts.
            </summary>
        </member>
        <member name="F:Zelda.Casting.Spells.Lightning.LightningSparkEntity.bolts">
            <summary>
            The bolts this lightning sparks consists of. 
            </summary>
        </member>
        <member name="T:Zelda.Casting.Spells.CorrosiveFireDamageMethod">
            <summary>
            Defines an AttackDamageMethod used to calculate the
            damage done by the CorrosiveFire damage over time effect.
            </summary>
        </member>
        <member name="F:Zelda.Casting.Spells.CorrosiveFireDamageMethod.DamageTypeInfo">
            <summary>
            Stores type information about the damage inflicted by the CorrosiveFireDamageMethod.
            </summary>
        </member>
        <member name="M:Zelda.Casting.Spells.CorrosiveFireDamageMethod.GetDamageDone(Zelda.Status.Statable,Zelda.Status.Statable)">
            <summary>
            Calculates the damage done of the specified user on the specified target
            using this AttackDamageMethod.
            </summary>
            <param name="user">The user of the attack.</param>
            <param name="target">The target of the attack.</param>
            <returns>The results of the attack.</returns>
        </member>
        <member name="M:Zelda.Casting.Spells.CorrosiveFireDamageMethod.GetMultiplier">
            <summary>
            Gets the multplier value used for the next Corrosive Fire.
            </summary>
            <returns>
            The damage multiplier for the next Corrosive Fire dot.
            </returns>
        </member>
        <member name="M:Zelda.Casting.Spells.CorrosiveFireDamageMethod.SetValues(System.Single,System.Single)">
            <summary>
            Sets the values of this CorrosiveFireDamageMethod.
            </summary>
            <param name="minimumMultiplier">
            The minimum multiplier applied to the damage of the attack.
            </param>
            <param name="maximumMultiplier">
            The maximum multiplier applied to the damage of the attack.
            </param>
        </member>
        <member name="F:Zelda.Casting.Spells.CorrosiveFireDamageMethod.minimumMultiplier">
            <summary>
            The multiplier applied to the damage of the Corrosive Fire.
            </summary>
        </member>
        <member name="F:Zelda.Casting.Spells.CorrosiveFireDamageMethod.maximumMultiplier">
            <summary>
            The multiplier applied to the damage of the Corrosive Fire.
            </summary>
        </member>
        <member name="T:Zelda.Casting.Spells.FireSpellDamageMethod">
            <summary>
            Defines an AttackDamageMethod that deals a variable amount of
            magical fire spell damage.
            </summary>
        </member>
        <member name="F:Zelda.Casting.Spells.FireSpellDamageMethod.DamageTypeInfo">
            <summary>
            Stores type information about the damage inflicted by the FirewallDamageMethod.
            </summary>
        </member>
        <member name="M:Zelda.Casting.Spells.FireSpellDamageMethod.GetDamageDone(Zelda.Status.Statable,Zelda.Status.Statable)">
            <summary>
            Calculates the damage done by the <paramref name="user"/> on the <paramref name="target"/>
            using this <see cref="T:Zelda.Attacks.AttackDamageMethod"/>.
            </summary>
            <param name="user">The user of the attack.</param>
            <param name="target">The target of the attack.</param>
            <returns>The calculated result.</returns>
        </member>
        <member name="M:Zelda.Casting.Spells.FireSpellDamageMethod.GetDamageModifier">
            <summary>
            Gets the damage multiplier of the Firewall.
            </summary>
            <returns>
            The current damage modification value of the FireVortex.
            </returns>
        </member>
        <member name="M:Zelda.Casting.Spells.FireSpellDamageMethod.SetValues(Atom.Math.FloatRange)">
            <summary>
            Sets the value sof this AttackDamageMethod.
            </summary>
            <param name="damageMultiplierRange">
            The multiplier that is applied to the damage done.
            </param>
        </member>
        <member name="F:Zelda.Casting.Spells.FireSpellDamageMethod.damageMultiplierRange">
            <summary>
            The multiplier that is applied to the damage done.
            </summary>
        </member>
        <member name="T:Zelda.Casting.Spells.FirepillarDamageMethod">
            <summary>
            Defines an AttackDamageMethod that calculates the damage dealt by the Firewall spell.
            </summary>
        </member>
        <member name="F:Zelda.Casting.Spells.FirepillarDamageMethod.DamageTypeInfo">
            <summary>
            Stores type information about the damage inflicted by the FirewallDamageMethod.
            </summary>
        </member>
        <member name="M:Zelda.Casting.Spells.FirepillarDamageMethod.GetDamageDone(Zelda.Status.Statable,Zelda.Status.Statable)">
            <summary>
            Calculates the damage done by the <paramref name="user"/> on the <paramref name="target"/>
            using this <see cref="T:Zelda.Attacks.AttackDamageMethod"/>.
            </summary>
            <param name="user">The user of the attack.</param>
            <param name="target">The target of the attack.</param>
            <returns>The calculated result.</returns>
        </member>
        <member name="M:Zelda.Casting.Spells.FirepillarDamageMethod.GetDamageModifier">
            <summary>
            Gets the damage multiplier of the Firewall.
            </summary>
            <returns>
            The current damage modification value of the FireVortex.
            </returns>
        </member>
        <member name="M:Zelda.Casting.Spells.FirepillarDamageMethod.SetValues(Atom.Math.FloatRange,System.Single)">
            <summary>
            Sets the value sof this AttackDamageMethod.
            </summary>
            <param name="damageMultiplierRange">
            The multiplier that is applied to the damage done.
            </param>
            <param name="extraCritChance">
            The increased crit chance of Firewall.
            </param>
        </member>
        <member name="F:Zelda.Casting.Spells.FirepillarDamageMethod.damageMultiplierRange">
            <summary>
            The multiplier that is applied to the damage done.
            </summary>
        </member>
        <member name="F:Zelda.Casting.Spells.FirepillarDamageMethod.extraCritChance">
            <summary>
            The increased crit chance of Firewall.
            </summary>
        </member>
        <member name="T:Zelda.Casting.Spells.FirewhirlDamageMethod">
            <summary>
            Defines an AttackDamageMethod used to calculate the
            damage done by the FirewhirlDamageMethod attack.
            </summary>
        </member>
        <member name="F:Zelda.Casting.Spells.FirewhirlDamageMethod.DamageTypeInfo">
            <summary>
            Stores type information about the damage inflicted by the LightArrowDamageMethod.
            </summary>
        </member>
        <member name="M:Zelda.Casting.Spells.FirewhirlDamageMethod.GetDamageDone(Zelda.Status.Statable,Zelda.Status.Statable)">
            <summary>
            Calculates the damage done of the specified user on the specified target
            using this AttackDamageMethod.
            </summary>
            <param name="user">The user of the attack.</param>
            <param name="target">The target of the attack.</param>
            <returns>The results of the attack.</returns>
        </member>
        <member name="M:Zelda.Casting.Spells.FirewhirlDamageMethod.GetMultiplier">
            <summary>
            Gets the multplier value used for the next Firewhirl.
            </summary>
            <returns>
            The damage multiplier for the next Firewhirl.
            </returns>
        </member>
        <member name="M:Zelda.Casting.Spells.FirewhirlDamageMethod.SetValues(System.Single,System.Single)">
            <summary>
            Sets the values of this FirewhirlDamageMethod.
            </summary>
            <param name="minimumMultiplier">
            The minimum multiplier applied to the damage of the attack.
            </param>
            <param name="maximumMultiplier">
            The maximum multiplier applied to the damage of the attack.
            </param>
        </member>
        <member name="F:Zelda.Casting.Spells.FirewhirlDamageMethod.minimumMultiplier">
            <summary>
            The multiplier applied to the damage of the attack.
            </summary>
        </member>
        <member name="F:Zelda.Casting.Spells.FirewhirlDamageMethod.maximumMultiplier">
            <summary>
            The multiplier applied to the damage of the attack.
            </summary>
        </member>
        <member name="T:Zelda.Casting.Spells.PoisonCloudSpell">
            <summary>
            The PoisonCloudSpell creates cloud of poison that apply a damage over time and slowing effect
            to their enemy in an aoe radius.
            </summary>
        </member>
        <member name="F:Zelda.Casting.Spells.PoisonCloudSpell.PoisonCloudAnimation">
            <summary>
            The name of the sprite animation used by the Poison Clouds.
            </summary>
        </member>
        <member name="M:Zelda.Casting.Spells.PoisonCloudSpell.#ctor(Zelda.Attacks.AttackDamageMethod,Zelda.Status.Statable,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the PoisonCloudSpell class.
            </summary>
            <param name="damageMethod">
            The AttackDamageMethod the poison clouds use to calculate their damage output.
            </param>
            <param name="statable">
            The ZeldaEntity that owns the new PoisonCloudSpell.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Casting.Spells.PoisonCloudSpell.CreateCloudTemplate(Zelda.Attacks.IAttackHitEffect,Zelda.IZeldaServiceProvider)">
            <summary>
            Creates the template object from which further Poison Clouds are created / initialized.
            </summary>
            <param name="hitEffect">
            The effect that is executed when a PoisonCloud created by this PoisonCloudSpell
            has hit an enemy target.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
            <returns>
            The Poison Cloud template.
            </returns>
        </member>
        <member name="M:Zelda.Casting.Spells.PoisonCloudSpell.CreateAura(Zelda.Status.MovementSpeedEffect,Zelda.Status.AttackSpeedEffect,Zelda.Entities.ZeldaEntity,Zelda.IZeldaServiceProvider)">
            <summary>
            Creates the DamageOverTimeAura that gets applied to targets that got hit
            by a Poison Cloud.
            </summary>
            <param name="slowingEffect">
            The slowing effect that gets applied.
            </param>
            <param name="attackSpeedSlowingEffect">
            The attackspeed slowing effect that gets applied.
            </param>
            <param name="owner">
            The owner of the PoisonCloudSpell.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
            <returns>
            The DamageOverTimeAura to apply when a Poison Cloud hits a target.
            </returns>
        </member>
        <member name="M:Zelda.Casting.Spells.PoisonCloudSpell.LoadSymbol(Zelda.IZeldaServiceProvider)">
            <summary>
            Loads the sprite used to visualize the Poison Cloud aura.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
            <returns>
            The loaded symbol sprite.
            </returns>
        </member>
        <member name="M:Zelda.Casting.Spells.PoisonCloudSpell.Fire(Zelda.Entities.Components.Attackable)">
            <summary>
            Fires this PoisonCloudSpell.
            </summary>
            <param name="target">
            The target of the spell.
            </param>
            <returns>
            true if it has fired;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Casting.Spells.PoisonCloudSpell.CreatePoisonCloud(Atom.Math.Vector2,System.Int32)">
            <summary>
            Creates a new Poison Cloud at the specified position.
            </summary>
            <param name="position">
            The position at which the Poison Cloud should be spawned.
            </param>
            <param name="floorNumber">
            The floor number at which the Poison Cloud should be spawned.
            </param>
            <returns>
            The newly created DamageEffectEntity.
            </returns>
        </member>
        <member name="F:Zelda.Casting.Spells.PoisonCloudSpell.statable">
            <summary>
            Identifies the Statable component that controls the strength of the Poison Clouds.
            </summary>
        </member>
        <member name="F:Zelda.Casting.Spells.PoisonCloudSpell.cloudTemplate">
            <summary>
            The template entity that is used to create new Poison Clouds.
            </summary>
        </member>
        <member name="F:Zelda.Casting.Spells.PoisonCloudSpell.damageMethod">
            <summary>
            The damage method the PoisonClouds created by this PoisonCloudSpell use
            to calculate how much damage they have done.
            </summary>
        </member>
        <member name="F:Zelda.Casting.Spells.PoisonCloudSpell.hitEffect">
            <summary>
            The effect that is executed when a PoisonCloud created by this PoisonCloudSpell
            has hit an enemy target.
            </summary>
        </member>
        <member name="F:Zelda.Casting.Spells.PoisonCloudSpell.slowingEffect">
            <summary>
            The slowing effect applied to enemy entities that run thru the poison cloud.
            </summary>
        </member>
        <member name="F:Zelda.Casting.Spells.PoisonCloudSpell.attackSpeedSlowingEffect">
            <summary>
            The slowing effect applied to enemy entities that run thru the poison cloud.
            </summary>
        </member>
        <member name="F:Zelda.Casting.Spells.PoisonCloudSpell.dotAura">
            <summary>
            The damage over time aura that is applied to enemy entities that run thru the poison cloud.
            </summary>
        </member>
        <member name="T:Zelda.Casting.Spells.ProjectilePlayerSpell">
            <summary>
            Defines a PlayerSpell that fires a Projectile.
            </summary>
        </member>
        <member name="E:Zelda.Casting.Spells.ProjectilePlayerSpell.ProjectileFired">
            <summary>
            Fired when a Projectile has been fired by this ProjectilePlayerSpell.
            </summary>
        </member>
        <member name="E:Zelda.Casting.Spells.ProjectilePlayerSpell.ProjectileDestroyed">
            <summary>
            Fired when a Projectile that has been fired by this ProjectilePlayerSpell got destroyed.
            </summary>
        </member>
        <member name="P:Zelda.Casting.Spells.ProjectilePlayerSpell.Settings">
            <summary>
            Gets the <see cref="T:Zelda.Entities.Projectiles.ProjectileSettings"/> that control the
            Projectiles fired by this ProjectilePlayerSpell.
            </summary>
        </member>
        <member name="P:Zelda.Casting.Spells.ProjectilePlayerSpell.HitSettings">
            <summary>
            Gets or sets the ProjectileHitSettings that is used for all Projectiles
            fired by this ProjectilePlayerSpell.
            </summary>
        </member>
        <member name="M:Zelda.Casting.Spells.ProjectilePlayerSpell.#ctor(Zelda.Entities.PlayerEntity,System.Single,Zelda.Attacks.AttackDamageMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Casting.Spells.ProjectilePlayerSpell"/> class.
            </summary>
            <param name="owner">
            The entity that owns the new ProjectilePlayerSpell.
            </param>
            <param name="castTime">
            The time it takes for the new ProjectilePlayerSpell to cast.
            </param>
            <param name="method">
            The AttackDamageMethod that calculates the damage the new ProjectilePlayerSpell does. 
            </param>
        </member>
        <member name="M:Zelda.Casting.Spells.ProjectilePlayerSpell.Setup(Zelda.IZeldaServiceProvider)">
            <summary>
            Setups this ProjectilePlayerSpell.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Casting.Spells.ProjectilePlayerSpell.Fire(Zelda.Entities.Components.Attackable)">
            <summary> 
            Fires this <see cref="T:Zelda.Casting.Spells.ProjectilePlayerSpell"/>. 
            </summary>
            <param name="target">
            This parameter is not used.
            </param>
            <returns>
            Whether this attack has been fired.
            </returns>
        </member>
        <member name="M:Zelda.Casting.Spells.ProjectilePlayerSpell.GetCenteredSpawnPosition(Atom.Math.Vector2,Atom.Math.Direction4)">
            <summary>
            Gets a spawn position for a Projectile of this ProjectilePlayerSpell
            that travels into the given direction.
            </summary>
            <param name="position">
            The spawning position.
            </param>
            <param name="direction">
            The direction the projectile should head to visually.
            </param>
            <returns>
            The new and centered position.
            </returns>
        </member>
        <member name="M:Zelda.Casting.Spells.ProjectilePlayerSpell.FireFromInto(Atom.Math.Vector2,Atom.Math.Vector2,Atom.Math.Direction4,System.Int32)">
            <summary>
            Fires a projectile of this ProjectilePlayerSpell from the given position
            into the given direction.
            </summary>
            <param name="position">
            The spawning position.
            </param>
            <param name="directionVector">
            The actual direction the projectile should travel to.
            </param>
            <param name="direction">
            The direction the projectile should head to visually.
            </param>
            <param name="floorNumber">
            The number of the floor to spawn at.
            </param>
            <returns>
            The Projectile that has been fired.
            </returns>
        </member>
        <member name="M:Zelda.Casting.Spells.ProjectilePlayerSpell.SpawnProjectile">
            <summary>
            Spawns the next Projectile.
            </summary>
        </member>
        <member name="M:Zelda.Casting.Spells.ProjectilePlayerSpell.GetProjectileMovementSpeed">
            <summary>
            Gets the movement speed of the next Projectile.
            </summary>
            <returns>
            A random value within the range stored in the ProjectileSettings.
            </returns>
        </member>
        <member name="M:Zelda.Casting.Spells.ProjectilePlayerSpell.SpawnProjectile(Atom.Math.Vector2,Atom.Math.Vector2)">
            <summary>
            Spawns a new projectile.
            </summary>
            <param name="position">The position to spawn a projectile at.</param>
            <param name="speed">The traveling speed of the projectile to spawn.</param>
        </member>
        <member name="M:Zelda.Casting.Spells.ProjectilePlayerSpell.SpawnProjectile(Zelda.Status.Statable,Atom.Math.Vector2,System.Int32,Atom.Math.Direction4,Atom.Math.Vector2)">
            <summary>
            Creates a new projectile object with the given settings
            and spawns it in the scene.
            </summary>
            <param name="creator">
            The object that fires the projectile.
            </param>
            <param name="position">
            The starting position of the projectile.
            </param>
            <param name="floorNumber">
            The number of the floor the projectile should spawn at.
            </param>
            <param name="direction">
            The direction the projectile is travelling in.
            </param>
            <param name="speed">
            The traveling speed of the projectile to spawn.
            </param>
            <returns>
            The ProjectileObject; taken from a pool of inactive projectiles.
            </returns>
        </member>
        <member name="M:Zelda.Casting.Spells.ProjectilePlayerSpell.OnProjectileDestroyed(Zelda.Entities.Projectiles.Projectile)">
            <summary>
            Gets called when a Projectile fired by this ProjectilePlayerSpell has been destroyed;
            </summary>
            <param name="projectile">
            The sender of the event.
            </param>
        </member>
        <member name="F:Zelda.Casting.Spells.ProjectilePlayerSpell.settings">
            <summary>
            The settings applies to the Projectiles spawned by this ProjectilePlayerSpell.
            </summary>
        </member>
        <member name="T:Zelda.Cooldown">
            <summary>
            Encapsulates 
            This class can't be inherited.
            </summary>
            <remarks>
            The same Cooldown can be shared by multiple objects
            These shared cooldowns are identified by using an unique id.
            </remarks>
        </member>
        <member name="P:Zelda.Cooldown.TotalTime">
            <summary>
            Gets or sets the time in seconds the <see cref="T:Zelda.Cooldown"/> lasts.
            </summary>
        </member>
        <member name="P:Zelda.Cooldown.IsShared">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Zelda.Cooldown"/> is shared by multiple objects.
            </summary>
        </member>
        <member name="P:Zelda.Cooldown.Id">
            <summary>
            Gets or sets the unique Id of this <see cref="T:Zelda.Cooldown"/>.
            </summary>
        </member>
        <member name="P:Zelda.Cooldown.TimeLeft">
            <summary>
            Gets or sets the time the that is left until this <see cref="T:Zelda.Cooldown"/>
            is considered to be ready/over.
            </summary>
        </member>
        <member name="P:Zelda.Cooldown.IsReady">
            <summary>
            Gets a value indicating whether this <see cref="T:Zelda.Cooldown"/> is ready/over.
            </summary>
        </member>
        <member name="M:Zelda.Cooldown.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Cooldown"/> class,
            which is not shared.
            </summary>
        </member>
        <member name="M:Zelda.Cooldown.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Cooldown"/> class,
            which is not shared.
            </summary>
            <param name="totalTime">
            The time in seconds the new Cooldown lasts.
            </param>
            <exception cref="T:System.ArgumentException">
            If <paramref name="totalTime"/> is less than zero.
            </exception>
        </member>
        <member name="M:Zelda.Cooldown.#ctor(System.Int32,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Cooldown"/> class.
            </summary>
            <param name="id">
            The id that indentifies the new Cooldown.
            </param>
            <param name="totalTime">
            The time in seconds the new Cooldown lasts.
            </param>
            <param name="isShared">
            States whether the new Cooldown is a shared cooldown;
            shared cooldowns must have an (unique) <paramref name="id"/>.
            </param>
            <exception cref="T:System.ArgumentException">
            If <paramref name="totalTime"/> is less than zero.
            </exception>
        </member>
        <member name="M:Zelda.Cooldown.Update(System.Single)">
            <summary>
            Updates this <see cref="T:Zelda.Cooldown"/>.
            </summary>
            <param name="frameTime">
            The time in seconds the last frame took.
            </param>
        </member>
        <member name="M:Zelda.Cooldown.Reset">
            <summary>
            Resets this <see cref="T:Zelda.Cooldown"/>.
            </summary>
        </member>
        <member name="M:Zelda.Cooldown.Reset(System.Single)">
            <summary>
            Resets this <see cref="T:Zelda.Cooldown"/> using the given <paramref name="time"/>.
            </summary>
            <param name="time">
            The time in seconds that the cooldown such last.
            </param>
        </member>
        <member name="M:Zelda.Cooldown.ToString">
            <summary>
            Overwritten to return a localized string descriping how much time is left on the <see cref="T:Zelda.Cooldown"/>.
            </summary>
            <returns>
            A human-readable string.
            </returns>
        </member>
        <member name="M:Zelda.Cooldown.ToShortString">
            <summary>
            Returns a short localized string descriping how much time is left on the <see cref="T:Zelda.Cooldown"/>.
            </summary>
            <returns>
            A human-readable string.
            </returns>
        </member>
        <member name="M:Zelda.Cooldown.Clone">
            <summary>
            Returns a clone of this Cooldown.
            </summary>
            <returns>
            The cloned Cooldown; or this if the cooldown <see cref="P:Zelda.Cooldown.IsShared"/>.
            </returns>
        </member>
        <member name="F:Zelda.Cooldown.totalTime">
            <summary>
            The time the cooldown lasts.
            </summary>
        </member>
        <member name="F:Zelda.Cooldown.timeLeft">
            <summary>
            The time that is left until the cooldown is considered to be over.
            </summary>
        </member>
        <member name="F:Zelda.Cooldown.isShared">
            <summary>
            States whether the <see cref="T:Zelda.Cooldown"/> is a shared cooldown.
            </summary>
        </member>
        <member name="F:Zelda.Cooldown.id">
            <summary>
            The unique id of the <see cref="T:Zelda.Cooldown"/>.
            </summary>
        </member>
        <member name="F:Zelda.Cooldown.idMaker">
            <summary>
            Used to create ids of Cooldowns that are .
            </summary>
        </member>
        <member name="T:Zelda.Cooldown.TypeConverter">
            <summary>
            Defines the TypeConverter that allows the conversion of Cooldowns into other types.
            </summary>
        </member>
        <member name="M:Zelda.Cooldown.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, 
            using the specified context.
            </summary>
            <param name="context">
            An System.ComponentModel.ITypeDescriptorContext that provides a format context.
            </param>
            <param name="destinationType">
            A System.Type that represents the type you want to convert to.
            </param>
            <returns>
            Returns true if this converter can perform the conversion; 
            otherwise, false.
            </returns>
        </member>
        <member name="M:Zelda.Cooldown.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type,
            using the specified context and culture information.
            </summary>
            <param name="context">
            An System.ComponentModel.ITypeDescriptorContext that provides a format context.
            </param>
            <param name="culture">
            A System.Globalization.CultureInfo.
            </param>
            <param name="value">
            The System.Object to convert.
            </param>
            <param name="destinationType">
            The System.Type to convert the value parameter to.
            </param>
            <returns>
            An System.Object that represents the converted value.
            </returns>
        </member>
        <member name="T:Zelda.ChangeType">
            <summary>
            Enumerates the different ways an object can gain or lose focus.
            </summary>
        </member>
        <member name="F:Zelda.ChangeType.Away">
            <summary>
            The current scene has changed to a different scene.
            </summary>
        </member>
        <member name="F:Zelda.ChangeType.To">
            <summary>
            The current scene has changed to this scene.
            </summary>
        </member>
        <member name="T:Zelda.Core.Controls.PlayerControl">
            <summary>
            Transforms actual keyboard input into player action.
            </summary>
        </member>
        <member name="M:Zelda.Core.Controls.PlayerControl.#ctor(Zelda.Entities.PlayerEntity,Zelda.KeySettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Core.Controls.PlayerControl"/> class.
            </summary>
            <param name="player">
            The <see cref="T:Zelda.Entities.PlayerEntity"/> that gets controlled by the new PlayerControl.
            </param>
            <param name="keySettings">
            The <see cref="T:Zelda.KeySettings"/> instance that defines what keys map onto what actions.
            </param>
        </member>
        <member name="M:Zelda.Core.Controls.PlayerControl.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this <see cref="T:Zelda.Core.Controls.PlayerControl"/>.
            </summary>
            <param name="updateContext">
            The current <see cref="T:Zelda.ZeldaUpdateContext"/>.
            </param>
        </member>
        <member name="M:Zelda.Core.Controls.PlayerControl.Move(System.Boolean,System.Boolean,System.Boolean,System.Boolean,Zelda.ZeldaUpdateContext)">
            <summary>
            Moves the player entity into the specified directions.
            </summary>
            <param name="moveLeft">
            States whether the player should be moved left/west.
            </param>
            <param name="moveRight">
            States whether the player should be moved right/east.
            </param>
            <param name="moveUp">
            States whether the player should be moved up/north.
            </param>
            <param name="moveDown">
            States whether the player should be moved down/south.
            </param>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Core.Controls.PlayerControl.MoveLeft(System.Boolean,System.Boolean,Zelda.ZeldaUpdateContext)">
            <summary>
            Moves the player entity left/west and additionally, if specified, up or down.
            </summary>
            <param name="moveUp">
            States whether the player should be moved up/north.
            </param>
            <param name="moveDown">
            States whether the player should be moved down/south.
            </param>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Core.Controls.PlayerControl.MoveRight(System.Boolean,System.Boolean,Zelda.ZeldaUpdateContext)">
            <summary>
            Moves the player entity right/east and additionally, if specified, up or down.
            </summary>
            <param name="moveUp">
            States whether the player should be moved up/north.
            </param>
            <param name="moveDown">
            States whether the player should be moved down/south.
            </param>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Core.Controls.PlayerControl.CanMove">
            <summary>
            Gets a value indicating whether the player is allowed to move.
            </summary>
            <returns>
            Returns true if the player is allowed to move;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Core.Controls.PlayerControl.ResetSpecialAnimation">
            <summary>
            Disables the special animation of the Player.
            </summary>
        </member>
        <member name="M:Zelda.Core.Controls.PlayerControl.ResetDiagonalMovementStates">
            <summary>
            Resets all boolean flags that capture the movement
            of the player to <see langword="false"/>.
            </summary>
        </member>
        <member name="M:Zelda.Core.Controls.PlayerControl.OnPlayerWeaponChanged(System.Object,System.EventArgs)">
            <summary>
            Gets called when the WeaponHand of the player changes.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The EventArgs that contain the event data.</param>
        </member>
        <member name="M:Zelda.Core.Controls.PlayerControl.RefreshMovementTimeFactor">
            <summary>
            Refreshes the time factors that specify when after attacking the player is allowed to move again.
            </summary>
        </member>
        <member name="F:Zelda.Core.Controls.PlayerControl.keySettings">
            <summary>
            Descripes what keys map onto what actions.
            </summary>
        </member>
        <member name="F:Zelda.Core.Controls.PlayerControl.player">
            <summary>
            Identifies the PlayerEntity.
            </summary>
        </member>
        <member name="F:Zelda.Core.Controls.PlayerControl.moveable">
            <summary>
            Identifies the Moveable component of the Player.
            </summary>
        </member>
        <member name="F:Zelda.Core.Controls.PlayerControl.drawData">
            <summary>
            Controls and contains the draw data and strategy of the player.
            </summary>
        </member>
        <member name="F:Zelda.Core.Controls.PlayerControl.timeFactorMovementAfterMeleeAttack">
            <summary>
            States the % of time required before moving after an attack is allowed again.
            </summary>
        </member>
        <member name="F:Zelda.Core.Controls.PlayerControl.wasMoveLeft">
            <summary>
            The state of the keyboard one frame ago.
            </summary>
        </member>
        <member name="F:Zelda.Core.Controls.PlayerControl.wasMoveRight">
            <summary>
            The state of the keyboard one frame ago.
            </summary>
        </member>
        <member name="F:Zelda.Core.Controls.PlayerControl.wasMoveUp">
            <summary>
            The state of the keyboard one frame ago.
            </summary>
        </member>
        <member name="F:Zelda.Core.Controls.PlayerControl.wasMoveDown">
            <summary>
            The state of the keyboard one frame ago.
            </summary>
        </member>
        <member name="F:Zelda.Core.Controls.PlayerControl.wasMoveLeftUp">
            <summary>
            These state variables are used to reproduce the original Zelda diagonal-movement.
            </summary>
        </member>
        <member name="F:Zelda.Core.Controls.PlayerControl.wasMoveUpLeft">
            <summary>
            These state variables are used to reproduce the original Zelda diagonal-movement.
            </summary>
        </member>
        <member name="F:Zelda.Core.Controls.PlayerControl.wasMoveRightUp">
            <summary>
            These state variables are used to reproduce the original Zelda diagonal-movement.
            </summary>
        </member>
        <member name="F:Zelda.Core.Controls.PlayerControl.wasMoveUpRight">
            <summary>
            These state variables are used to reproduce the original Zelda diagonal-movement.
            </summary>
        </member>
        <member name="F:Zelda.Core.Controls.PlayerControl.wasMoveLeftDown">
            <summary>
            These state variables are used to reproduce the original Zelda diagonal-movement.
            </summary>
        </member>
        <member name="F:Zelda.Core.Controls.PlayerControl.wasMoveDownLeft">
            <summary>
            These state variables are used to reproduce the original Zelda diagonal-movement.
            </summary>
        </member>
        <member name="F:Zelda.Core.Controls.PlayerControl.wasMoveRightDown">
            <summary>
            These state variables are used to reproduce the original Zelda diagonal-movement.
            </summary>
        </member>
        <member name="F:Zelda.Core.Controls.PlayerControl.wasMoveDownRight">
            <summary>
            These state variables are used to reproduce the original Zelda diagonal-movement.
            </summary>
        </member>
        <member name="T:Zelda.Core.Predicates.AggregatePredicate`1">
            <summary>
            Represents an IPredicate{T} that acts on multiple other IPredicate{T}s.
            </summary>
            <typeparam name="T">
            The type of the value the IPredicate{T}s act on.
            </typeparam>
        </member>
        <member name="P:Zelda.Core.Predicates.AggregatePredicate`1.Predicates">
            <summary>
            Gets the list of IPredicate{T}s this AggregatePredicate{T} acts on.
            </summary>
        </member>
        <member name="M:Zelda.Core.Predicates.AggregatePredicate`1.#ctor">
            <summary>
            Initializes a new instance of the AggregatePredicate{T} class.
            </summary>
        </member>
        <member name="M:Zelda.Core.Predicates.AggregatePredicate`1.#ctor(Zelda.Core.Predicates.IPredicate{`0}[])">
            <summary>
            Initializes a new instance of the AggregatePredicate{T} class.
            </summary>
            <param name="predicates">
            The IPredicate{T}s the new AggregatePredicate{T} should act on.
            </param>
        </member>
        <member name="F:Zelda.Core.Predicates.AggregatePredicate`1.predicates">
            <summary>
            The IPredicate{T}s this AggregatePredicate{T} acts on.
            </summary>
        </member>
        <member name="T:Zelda.Core.Predicates.Design.KnownPredicate">
            <summary>
            Enumerates all IPredicate{T}s that are available at design-time.
            </summary>
        </member>
        <member name="P:Zelda.Core.Predicates.Design.KnownPredicate.Types">
            <summary>
            Gets the IPredicate{T} types supported by the design-time editors.
            </summary>
        </member>
        <member name="F:Zelda.Core.Predicates.Design.KnownPredicate.types">
            <summary>
            The list of predicate types supported by the design-time editors.
            </summary>
        </member>
        <member name="T:Zelda.Core.Predicates.Design.PredicateEditor`1">
            <summary>
            Implements an <see cref="T:Zelda.Design.BaseZeldaObjectCreationEditor"/> that provides a mechanism
            that allows the user to create <see cref="T:Zelda.Core.Predicates.IPredicate`1"/> instances.
            </summary>
            <typeparam name="T">
            The type of the value the IPredicate{T}s acts on.
            </typeparam>
        </member>
        <member name="M:Zelda.Core.Predicates.Design.PredicateEditor`1.GetTypes">
            <summary>
            Gets the types of the objects that can be created by this IsUseableEditor.
            </summary>
            <returns>
            The list of types.
            </returns>
        </member>
        <member name="T:Zelda.Core.Predicates.Entity.InDeepWaterPredicate">
            <summary>
            Represents an IPredicate{IEntity} that holds true when the entity
            is currently swimming in deep water.
            </summary>
        </member>
        <member name="M:Zelda.Core.Predicates.Entity.InDeepWaterPredicate.Holds(Atom.Components.IEntity)">
            <summary>
            Gets a value indicating whether this IPredicate{T}
            holds on the specified value.
            </summary>
            <param name="value">
            The input value.
            </param>
            <returns>
            true if this IPredicate{T} holds on the specified value;
            -or- otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Core.Predicates.Entity.InShallowOrDeepWaterPredicate">
            <summary>
            Represents an IPredicate{IEntity} that holds true when the entity
            is currently standing in shallow water or swimming in deep water.
            </summary>
        </member>
        <member name="M:Zelda.Core.Predicates.Entity.InShallowOrDeepWaterPredicate.#ctor">
            <summary>
            Initializes a new instance of the InShallowOrDeepWaterPredicate class.
            </summary>
        </member>
        <member name="T:Zelda.Core.Predicates.Entity.InShallowWaterPredicate">
            <summary>
            Represents an IPredicate{IEntity} that holds true when the entity
            is currently standing in shallow water.
            </summary>
        </member>
        <member name="M:Zelda.Core.Predicates.Entity.InShallowWaterPredicate.Holds(Atom.Components.IEntity)">
            <summary>
            Gets a value indicating whether this IPredicate{T}
            holds on the specified value.
            </summary>
            <param name="value">
            The input value.
            </param>
            <returns>
            true if this IPredicate{T} holds on the specified value;
            -or- otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Core.Predicates.IPredicate`1">
            <summary>
            Represents a yes/no question against a specific value.
            </summary>
            <typeparam name="T">
            The type of the value the IPredicate{T} acts on.
            </typeparam>
        </member>
        <member name="M:Zelda.Core.Predicates.IPredicate`1.Holds(`0)">
            <summary>
            Gets a value indicating whether this IPredicate{T}
            holds on the specified value.
            </summary>
            <param name="value">
            The input value.
            </param>
            <returns>
            true if this IPredicate{T} holds on the specified value;
            -or- otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Core.Predicates.OrPredicate`1">
            <summary>
            Represents an AggregatePredicate{T} that holds true if any of its
            IPredicate{T}s holds true.
            </summary>
            <typeparam name="T">
            The type of the value the IPredicate{T}s acts on.
            </typeparam>
        </member>
        <member name="M:Zelda.Core.Predicates.OrPredicate`1.#ctor">
            <summary>
            Initializes a new instance of the OrPredicate{T} class.
            </summary>
        </member>
        <member name="M:Zelda.Core.Predicates.OrPredicate`1.#ctor(Zelda.Core.Predicates.IPredicate{`0}[])">
            <summary>
            Initializes a new instance of the OrPredicate{T} class.
            </summary>
            <param name="predicates">
            The IPredicate{T}s the new OrPredicate{T} should act on.
            </param>
        </member>
        <member name="M:Zelda.Core.Predicates.OrPredicate`1.Holds(`0)">
            <summary>
            Gets a value indicating whether this OrPredicate{T}
            holds on the specified value.
            </summary>
            <param name="value">
            The input value.
            </param>
            <returns>
            true if this IPredicate{T} holds on the specified value;
            -or- otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Core.Predicates.Predicate`1">
            <summary>
            Represents a yes/no question against a specific value.
            </summary>
            <typeparam name="T">
            The type of the value the Predicate{T} acts on.
            </typeparam>
        </member>
        <member name="M:Zelda.Core.Predicates.Predicate`1.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Core.Predicates.Predicate`1.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Core.Predicates.Predicate`1.Holds(`0)">
            <summary>
            Gets a value indicating whether this IPredicate{T}
            holds on the specified value.
            </summary>
            <param name="value">
            The input value.
            </param>
            <returns>
            true if this IPredicate{T} holds on the specified value;
            -or- otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Core.Predicates.WrappingPredicate`1">
            <summary>
            Represents an IPredicate{T} that wraps around another IPredicate{T}.
            </summary>
            <typeparam name="T">
            The type of the value the Predicate{T} acts on.
            </typeparam>
        </member>
        <member name="M:Zelda.Core.Predicates.WrappingPredicate`1.#ctor(Zelda.Core.Predicates.IPredicate{`0})">
            <summary>
            Initializes a new instance of the WrappingPredicate class.
            </summary>
            <param name="predicate">
            The IPredicate{T} the new WrappingPredicate{T} wraps around.
            </param>
        </member>
        <member name="M:Zelda.Core.Predicates.WrappingPredicate`1.Holds(`0)">
            <summary>
            Gets a value indicating whether this IPredicate{T}
            holds on the specified value.
            </summary>
            <param name="value">
            The input value.
            </param>
            <returns>
            true if this IPredicate{T} holds on the specified value;
            -or- otherwise false.
            </returns>
        </member>
        <member name="F:Zelda.Core.Predicates.WrappingPredicate`1.predicate">
            <summary>
            The IPredicate{T} this WrappingPredicate{T} wraps around.
            </summary>
        </member>
        <member name="T:Zelda.Core.Properties.IProperty">
            <summary>
            Represents an arbitary property.
            </summary>
        </member>
        <member name="T:Zelda.Core.Properties.IPropertyList">
            <summary>
            Represents a list of IProperties.
            </summary>
        </member>
        <member name="M:Zelda.Core.Properties.IPropertyList.TryGet``1">
            <summary>
            Tries to get the IProperty of the specified type.
            </summary>
            <typeparam name="TProperty">
            The exact type of the property to get.
            </typeparam>
            <returns>
            The requested property; or null.
            </returns>
        </member>
        <member name="T:Zelda.Core.Properties.PropertyList">
            <summary>
            Represents a list of IProperties.
            </summary>
        </member>
        <member name="M:Zelda.Core.Properties.PropertyList.Add(Zelda.Core.Properties.IProperty)">
            <summary>
            Adds the specified IProperty to this PropertyList.
            </summary>
            <param name="property">
            The property to add.
            </param>
        </member>
        <member name="M:Zelda.Core.Properties.PropertyList.Insert(System.Int32,Zelda.Core.Properties.IProperty)">
            <summary>
            Inserts the given IProperty into this PropertyList.
            </summary>
            <param name="index">The zero-based index at which to insert.</param>
            <param name="property">The IProperty to insert.</param>
        </member>
        <member name="M:Zelda.Core.Properties.PropertyList.AnalyzeAttributes(Zelda.Core.Properties.IProperty)">
            <summary>
            Analyzes the attributes of the specified IProperty.
            </summary>
            <param name="property">
            The IProperty to analyze.
            </param>
        </member>
        <member name="M:Zelda.Core.Properties.PropertyList.HasProperty(System.Type)">
            <summary>
            Gets a value indicating whether this IPropertyList contains
            an IProperty of the specified type.
            </summary>
            <param name="type">
            The exact type of the property to search for.
            </param>
            <returns>
            true if this IPropertyList contains the specified type;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Core.Properties.PropertyList.TryGet``1">
            <summary>
            Tries to get the IProperty of the specified type.
            </summary>
            <typeparam name="TProperty">
            The exact type of the property to get.
            </typeparam>
            <returns>
            The requested property; or null.
            </returns>
        </member>
        <member name="M:Zelda.Core.Properties.PropertyList.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Core.Properties.PropertyList.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="T:Zelda.Core.Properties.Scene.AlsoResetAnotherZoneOnZoneResetProperty">
            <summary>
            Defines an <see cref="T:Zelda.Core.Properties.IProperty"/> that states that another zone
            should also be reset when a zone reset request comes in.
            </summary>
        </member>
        <member name="P:Zelda.Core.Properties.Scene.AlsoResetAnotherZoneOnZoneResetProperty.Scene">
            <summary>
            Gets or sets the name of the scene the zone reset also should reset.
            </summary>
        </member>
        <member name="M:Zelda.Core.Properties.Scene.AlsoResetAnotherZoneOnZoneResetProperty.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Core.Properties.Scene.AlsoResetAnotherZoneOnZoneResetProperty.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="T:Zelda.Core.Properties.Scene.DungeonProperty">
            <summary>
            Defines an <see cref="T:Zelda.Core.Properties.IProperty"/> that states that the
            current scene is considered to be a dungeon area.
            </summary>
        </member>
        <member name="M:Zelda.Core.Properties.Scene.DungeonProperty.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Core.Properties.Scene.DungeonProperty.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="T:Zelda.Core.Properties.Scene.RedirectZoneResetProperty">
            <summary>
            Defines an <see cref="T:Zelda.Core.Properties.IProperty"/> that states that when a Zone Reset
            request comes in on a scene that has this property will redirect the request
            to another zone/scene.
            </summary>
        </member>
        <member name="P:Zelda.Core.Properties.Scene.RedirectZoneResetProperty.ToScene">
            <summary>
            Gets or sets the name of the scene the zone reset should be redirected to.
            </summary>
        </member>
        <member name="P:Zelda.Core.Properties.Scene.RedirectZoneResetProperty.ResetCurrentBeforeRedirecting">
            <summary>
            Gets or sets a value indicating whether the current scene
            should be reset before redirecting the zone reset.
            </summary>
        </member>
        <member name="M:Zelda.Core.Properties.Scene.RedirectZoneResetProperty.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Core.Properties.Scene.RedirectZoneResetProperty.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="T:Zelda.Core.Properties.UniquePropertyAttribute">
            <summary>
            When applied on an <see cref="T:Zelda.Core.Properties.IProperty"/> states that a PropertyList
            can only contain one of those IProperties.
            </summary>
        </member>
        <member name="T:Zelda.Core.Requirements.Design.RequirementEditor">
            <summary>
            Implements an <see cref="T:Zelda.Design.BaseZeldaObjectCreationEditor"/> that provides a mechanism
            that allows the user to create <see cref="T:Zelda.Core.Requirements.IRequirement"/> instances.
            </summary>
        </member>
        <member name="M:Zelda.Core.Requirements.Design.RequirementEditor.GetTypes">
            <summary>
            Gets the types of the objects that can be created by this IsUseableEditor.
            </summary>
            <returns>
            The list of types.
            </returns>
        </member>
        <member name="F:Zelda.Core.Requirements.Design.RequirementEditor.types">
            <summary>
            The types that can be constructed by the IsUseableEditor.
            </summary>
        </member>
        <member name="T:Zelda.Core.Requirements.MinimumDifficultyRequirement">
            <summary>
            Represents an IRequirement that requires the player to have choosen a specific
            minimum difficutly for it to be fulfilled.
            </summary>
        </member>
        <member name="P:Zelda.Core.Requirements.MinimumDifficultyRequirement.MinimumDifficulty">
            <summary>
            Gets or sets the minimum difficulty that is required before
            this MinimumDifficultyRequirement is fulfilled.
            </summary>
        </member>
        <member name="M:Zelda.Core.Requirements.MinimumDifficultyRequirement.IsFulfilledBy(Zelda.Entities.PlayerEntity)">
            <summary>
            Gets a value indicating whether this IRequirement is fulfilled.
            </summary>
            <param name="player">
            The PlayerEntity for which this IRequirement is checked against.
            </param>
            <returns>
            true if it is fulfilled;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Core.Requirements.MinimumDifficultyRequirement.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Core.Requirements.MinimumDifficultyRequirement.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="T:Zelda.Core.Requirements.NeverRequirement">
            <summary>
            Implements an <see cref="T:Zelda.Core.Requirements.IRequirement"/> that always returns false.
            </summary>
        </member>
        <member name="M:Zelda.Core.Requirements.NeverRequirement.IsFulfilledBy(Zelda.Entities.PlayerEntity)">
            <summary>
            Gets a value indicating whether the given PlayerEntity
            fulfills the requirements as specified by this IItemDropRequirement.
            </summary>
            <param name="player">
            The realted PlayerEntity.
            </param>
            <returns>
            Returns true if the given PlayerEntity fulfills the specified requirement;
            or otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Core.Requirements.NeverRequirement.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Core.Requirements.NeverRequirement.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="T:Zelda.Core.Requirements.SpecificTimeOfDayRequirement">
            <summary>
            Implements a predicate that returns true in a specific time frame of the ingame day.
            </summary>
        </member>
        <member name="P:Zelda.Core.Requirements.SpecificTimeOfDayRequirement.TimeFrame">
            <summary>
            Gets or sets the period of the day in which this IIsUseable
            predicate returns true.
            </summary>
        </member>
        <member name="M:Zelda.Core.Requirements.SpecificTimeOfDayRequirement.IsFulfilledBy(Zelda.Entities.PlayerEntity)">
            <summary>
            Gets a value indicating whether something is currently useable.
            </summary>
            <param name="user">
            The object that wants to know whether it can use something.
            </param>
            <returns>
            true if it is useable;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Core.Requirements.SpecificTimeOfDayRequirement.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Core.Requirements.SpecificTimeOfDayRequirement.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="T:Zelda.Core.Requirements.IRequirement">
            <summary>
            Represents a serializeable predicate that returns a value indicating
            whether something can be used or executed.
            </summary>
        </member>
        <member name="M:Zelda.Core.Requirements.IRequirement.IsFulfilledBy(Zelda.Entities.PlayerEntity)">
            <summary>
            Gets a value indicating whether this IRequirement is fulfilled.
            </summary>
            <param name="player">
            The PlayerEntity for which this IRequirement is checked against.
            </param>
            <returns>
            true if it is fulfilled;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Core.Useability.IsUseableInSpecificScene">
            <summary>
            Defines an <see cref="T:Zelda.Core.Requirements.IRequirement"/> that returns true if
            the player is currently in a specific scene.
            </summary>
        </member>
        <member name="P:Zelda.Core.Useability.IsUseableInSpecificScene.SceneName">
            <summary>
            Gets or sets the name of the Scene the user must be
            part of for the IsUseable method to return true. 
            </summary>
        </member>
        <member name="M:Zelda.Core.Useability.IsUseableInSpecificScene.IsFulfilledBy(Zelda.Entities.PlayerEntity)">
            <summary>
            Gets a value indicating whether something is currently useable.
            </summary>
            <param name="user">
            The object that wants to know whether it can use something.
            </param>
            <returns>
            true if it is useable;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Core.Useability.IsUseableInSpecificScene.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Core.Useability.IsUseableInSpecificScene.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="T:Zelda.Core.ToggleMode">
            <summary>
            Enumerates the different ways something can be toggled.
            </summary>
        </member>
        <member name="F:Zelda.Core.ToggleMode.Invert">
            <summary>
            Toggles from on to off, or from off to on.
            </summary>
        </member>
        <member name="F:Zelda.Core.ToggleMode.On">
            <summary>
            Toggles on.
            </summary>
        </member>
        <member name="F:Zelda.Core.ToggleMode.Off">
            <summary>
            Toggles off.
            </summary>
        </member>
        <member name="T:Zelda.Difficulties.BaseDifficulty">
            <summary>
            Implements the base functionality of an <see cref="T:Zelda.Difficulties.IDifficulty"/> object.
            </summary>
        </member>
        <member name="P:Zelda.Difficulties.BaseDifficulty.Id">
            <summary>
            Gets the ID that uniquely identifies this IDifficulty.
            </summary>
        </member>
        <member name="P:Zelda.Difficulties.BaseDifficulty.Name">
            <summary>
            Gets the (localized) name of this IDifficulty.
            </summary>
        </member>
        <member name="M:Zelda.Difficulties.BaseDifficulty.ApplyOn(Zelda.Entities.Enemy)">
            <summary>
            Applies this IDifficulty to the specified Enemy.
            </summary>
            <param name="enemy">
            The enemy to apply this IDifficulty on.
            </param>
        </member>
        <member name="M:Zelda.Difficulties.BaseDifficulty.OnChange(Zelda.ChangeType)">
            <summary>
            Called when this IDifficulty has been choosen or given up.
            </summary>
            <param name="changeType">
            States whether this IDifficulty has been choosen or given up.
            </param>
        </member>
        <member name="M:Zelda.Difficulties.BaseDifficulty.EnsureUseable">
            <summary>
            Ensures that this BaseDifficulty can be applied.
            </summary>
        </member>
        <member name="M:Zelda.Difficulties.BaseDifficulty.CreateStatusEffects">
            <summary>
            Creates the StatusValueEffects that are applied to enemies.
            </summary>
            <returns>
            The newly created StatusValueEffects.
            </returns>
        </member>
        <member name="F:Zelda.Difficulties.BaseDifficulty.StatusEffects">
            <summary>
            The StatusEffects that are applied to enemies for this difficulty.
            </summary>
        </member>
        <member name="T:Zelda.Difficulties.DifficultyId">
            <summary>
            Enumerates the difficulties of the game;
            assigning an unique id to each.
            </summary>
        </member>
        <member name="F:Zelda.Difficulties.DifficultyId.Easy">
            <summary>
            Represents the default difficulty.
            </summary>
        </member>
        <member name="F:Zelda.Difficulties.DifficultyId.Normal">
            <summary>
            Represents the difficulty after the Easy difficulty.
            </summary>
        </member>
        <member name="F:Zelda.Difficulties.DifficultyId.Nightmare">
            <summary>
            Represents the difficulty after the Normal difficulty.
            </summary>
        </member>
        <member name="F:Zelda.Difficulties.DifficultyId.Hell">
            <summary>
            Represents the difficulty after the Nightmare difficulty.
            </summary>
        </member>
        <member name="F:Zelda.Difficulties.DifficultyId.Insane">
            <summary>
            Represents the difficulty after the Hell difficulty. Must be unlocked.
            </summary>
        </member>
        <member name="T:Zelda.Difficulties.DifficultyIndicatorDrawer">
            <summary>
            Implements a mechanism that draws a simple indicator for the difficulty of the game.
            </summary>
        </member>
        <member name="P:Zelda.Difficulties.DifficultyIndicatorDrawer.Position">
            <summary>
            Gets or sets the position the indicator is drawn at.
            </summary>
        </member>
        <member name="P:Zelda.Difficulties.DifficultyIndicatorDrawer.Alignment">
            <summary>
            Gets or sets the <see cref="T:Atom.Math.HorizontalAlignment"/> of the indicator.
            </summary>
        </member>
        <member name="M:Zelda.Difficulties.DifficultyIndicatorDrawer.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the DifficultyIndicatorDrawer class.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Difficulties.DifficultyIndicatorDrawer.LoadContent">
            <summary>
            Loads the resources this DifficultyIndicatorDrawer uses.
            </summary>
        </member>
        <member name="M:Zelda.Difficulties.DifficultyIndicatorDrawer.Draw(Zelda.Difficulties.DifficultyId,System.Boolean,Atom.Xna.ISpriteDrawContext)">
            <summary>
            Draws the indicator for the IDifficulty that is identified by the specified DifficultyId.
            </summary>
            <param name="difficulty">
            The DifficultyId that has been found.
            </param>
            <param name="hardcore">
            States whether hardcore modus is enabled.
            </param>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="F:Zelda.Difficulties.DifficultyIndicatorDrawer.spriteSkull">
            <summary>
            The Sprite that is used to visualize the difficulty.
            </summary>
        </member>
        <member name="F:Zelda.Difficulties.DifficultyIndicatorDrawer.serviceProvider">
            <summary>
            Provides fast access to game-related services.
            </summary>
        </member>
        <member name="T:Zelda.Difficulties.GameDifficulty">
            <summary>
            Provides access to the currently selected <see cref="T:Zelda.Difficulties.IDifficulty"/> of the game.
            </summary>
        </member>
        <member name="P:Zelda.Difficulties.GameDifficulty.All">
            <summary>
            Gets the different difficulties the game has to offer.
            </summary>
        </member>
        <member name="P:Zelda.Difficulties.GameDifficulty.Current">
            <summary>
            Gets or sets the currently selected <see cref="T:Zelda.Difficulties.IDifficulty"/>.
            </summary>
        </member>
        <member name="M:Zelda.Difficulties.GameDifficulty.ApplyOn(Zelda.Entities.Enemy)">
            <summary>
            Applies the current <see cref="T:Zelda.Difficulties.IDifficulty"/> on the specified <see cref="T:Zelda.Entities.Enemy"/>.
            </summary>
            <param name="enemy">
            The enemy to apply the current IDifficulty on.
            </param>
        </member>
        <member name="M:Zelda.Difficulties.GameDifficulty.ApplyOn(Zelda.Entities.ZeldaEntity)">
            <summary>
            Applies the current <see cref="T:Zelda.Difficulties.IDifficulty"/> on the specified <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
            <param name="entity">
            The ZeldaEntity to apply the current IDifficulty on.
            </param>
        </member>
        <member name="F:Zelda.Difficulties.GameDifficulty.current">
            <summary>
            The currently selected difficulty.
            </summary>
        </member>
        <member name="F:Zelda.Difficulties.GameDifficulty.difficulties">
            <summary>
            Enumerates the different difficulties the game has to offer.
            </summary>
        </member>
        <member name="T:Zelda.Difficulties.IDifficulty">
            <summary>
            Represents a difficulty mode of the game.
            </summary>
        </member>
        <member name="P:Zelda.Difficulties.IDifficulty.Id">
            <summary>
            Gets the <see cref="T:Zelda.Difficulties.DifficultyId"/> that uniquely identifies this IDifficulty.
            </summary>
        </member>
        <member name="M:Zelda.Difficulties.IDifficulty.ApplyOn(Zelda.Entities.Enemy)">
            <summary>
            Applies this IDifficulty to the specified Enemy.
            </summary>
            <param name="enemy">
            The enemy to apply this IDifficulty on.
            </param>
        </member>
        <member name="M:Zelda.Difficulties.IDifficulty.OnChange(Zelda.ChangeType)">
            <summary>
            Called when this IDifficulty has been choosen or given up.
            </summary>
            <param name="changeType">
            States whether this IDifficulty has been choosen or given up.
            </param>
        </member>
        <member name="T:Zelda.Difficulties.EasyDifficulty">
            <summary>
            Represents the easiest IDifficulty of the game.
            </summary>
        </member>
        <member name="P:Zelda.Difficulties.EasyDifficulty.Id">
            <summary>
            Gets the ID that uniquely identifies this IDifficulty.
            </summary>
        </member>
        <member name="P:Zelda.Difficulties.EasyDifficulty.Name">
            <summary>
            Gets the (localized) name of this IDifficulty.
            </summary>
        </member>
        <member name="M:Zelda.Difficulties.EasyDifficulty.CreateStatusEffects">
            <summary>
            Creates the StatusValueEffects that are applied to enemies.
            </summary>
            <returns>
            The newly created StatusValueEffects.
            </returns>
        </member>
        <member name="T:Zelda.Difficulties.HellDifficulty">
            <summary>
            Represents the IDifficulty after the <see cref="T:Zelda.Difficulties.NightmareDifficulty"/>.
            </summary>
        </member>
        <member name="P:Zelda.Difficulties.HellDifficulty.Id">
            <summary>
            Gets the ID that uniquely identifies this IDifficulty.
            </summary>
        </member>
        <member name="P:Zelda.Difficulties.HellDifficulty.Name">
            <summary>
            Gets the (localized) name of this IDifficulty.
            </summary>
        </member>
        <member name="M:Zelda.Difficulties.HellDifficulty.CreateStatusEffects">
            <summary>
            Creates the StatusValueEffects that are applied to enemies.
            </summary>
            <returns>
            The newly created StatusValueEffects.
            </returns>
        </member>
        <member name="T:Zelda.Difficulties.InsaneDifficulty">
            <summary>
            Represents the IDifficulty after the <see cref="T:Zelda.Difficulties.NightmareDifficulty"/>.
            </summary>
        </member>
        <member name="F:Zelda.Difficulties.InsaneDifficulty.MinimumHellLevel">
            <summary>
            The minimum level hell-character required for the insane difficulty to unlock.
            </summary>
        </member>
        <member name="P:Zelda.Difficulties.InsaneDifficulty.Id">
            <summary>
            Gets the ID that uniquely identifies this IDifficulty.
            </summary>
        </member>
        <member name="P:Zelda.Difficulties.InsaneDifficulty.Name">
            <summary>
            Gets the (localized) name of this IDifficulty.
            </summary>
        </member>
        <member name="M:Zelda.Difficulties.InsaneDifficulty.CreateStatusEffects">
            <summary>
            Creates the StatusValueEffects that are applied to enemies.
            </summary>
            <returns>
            The newly created StatusValueEffects.
            </returns>
        </member>
        <member name="T:Zelda.Difficulties.NightmareDifficulty">
            <summary>
            Represents the IDifficulty after the <see cref="T:Zelda.Difficulties.NormalDifficulty"/>.
            </summary>
        </member>
        <member name="P:Zelda.Difficulties.NightmareDifficulty.Id">
            <summary>
            Gets the ID that uniquely identifies this IDifficulty.
            </summary>
        </member>
        <member name="P:Zelda.Difficulties.NightmareDifficulty.Name">
            <summary>
            Gets the (localized) name of this IDifficulty.
            </summary>
        </member>
        <member name="M:Zelda.Difficulties.NightmareDifficulty.CreateStatusEffects">
            <summary>
            Creates the StatusValueEffects that are applied to enemies.
            </summary>
            <returns>
            The newly created StatusValueEffects.
            </returns>
        </member>
        <member name="T:Zelda.Difficulties.NormalDifficulty">
            <summary>
            Represents the IDifficulty after the <see cref="T:Zelda.Difficulties.EasyDifficulty"/>.
            </summary>
        </member>
        <member name="P:Zelda.Difficulties.NormalDifficulty.Id">
            <summary>
            Gets the ID that uniquely identifies this IDifficulty.
            </summary>
        </member>
        <member name="P:Zelda.Difficulties.NormalDifficulty.Name">
            <summary>
            Gets the (localized) name of this IDifficulty.
            </summary>
        </member>
        <member name="M:Zelda.Difficulties.NormalDifficulty.CreateStatusEffects">
            <summary>
            Creates the StatusValueEffects that are applied to enemies.
            </summary>
            <returns>
            The newly created StatusValueEffects.
            </returns>
        </member>
        <member name="T:Zelda.IActivatable">
            <summary>
            Represents an object that can be either active or inactive.
            </summary>
        </member>
        <member name="P:Zelda.IActivatable.IsActive">
            <summary>
            Gets or sets a value indicating whether the object is currently active.
            </summary>
        </member>
        <member name="T:Zelda.ICooldownDependant">
            <summary>
            Represents an object that is dependant on a <see cref="T:Zelda.Cooldown"/>.
            </summary>
        </member>
        <member name="M:Zelda.ICooldownDependant.RefreshCooldown">
            <summary>
            Refreshes the cooldown of this ICooldownDependant object.
            </summary>
        </member>
        <member name="T:Zelda.IDescriptionProvider">
            <summary>
            Defines an interface which provides a description.
            </summary>
        </member>
        <member name="P:Zelda.IDescriptionProvider.Description">
            <summary>
            Gets the description provided by this IDescriptionProvider.
            </summary>
        </member>
        <member name="T:Zelda.IEditModeDrawable">
            <summary>
            Defines the interface of an drawable object that supports 
            special drawing if the application/game is in edit-mode.
            </summary>
        </member>
        <member name="M:Zelda.IEditModeDrawable.DrawEditMode(Zelda.ZeldaDrawContext)">
            <summary>
            Draws this <see cref="T:Zelda.IEditModeDrawable"/>.
            </summary>
            <param name="drawContext">
            The current ZeldaDrawContext.
            </param>
        </member>
        <member name="T:Zelda.IIngameState">
            <summary>
            Provides a basic interface the 
            ingame game-state implements.
            </summary>
        </member>
        <member name="P:Zelda.IIngameState.BackgroundMusic">
            <summary>
            Gets the <see cref="T:Zelda.Audio.BackgroundMusicComponent"/> that manages 
            the music that is playing in the background of the game.
            </summary>
        </member>
        <member name="P:Zelda.IIngameState.Player">
            <summary>
            Gets the PlayerEntity that is currently active in this IIngameState.
            </summary>
        </member>
        <member name="P:Zelda.IIngameState.UserInterface">
            <summary>
            Gets the UserInterface shown ingame.
            </summary>
        </member>
        <member name="M:Zelda.IIngameState.RequestSceneChange(System.String,System.Boolean)">
            <summary>
            Tells this IIngameState to change the current <see cref="T:Zelda.ZeldaScene"/>.
            </summary>
            <param name="name">
            The name that uniquely identifies the ZeldaScene to change to.
            </param>
            <param name="cachePrevious">
            States whether the previous ZeldaScene should be cached using the <see cref="T:Zelda.ZeldaScenesCache"/>.
            </param>
            <returns>
            The new current ZeldaScene.
            </returns>
        </member>
        <member name="M:Zelda.IIngameState.RequestSceneReload">
            <summary>
            Tells this IIngameState to reload the current <see cref="T:Zelda.ZeldaScene"/>
            by discarding and the loading it again.
            </summary>
            <returns>
            The new ZeldaScene instance.
            </returns>
        </member>
        <member name="M:Zelda.IIngameState.ChangeDrawingPipeline(Zelda.Graphics.DrawingPipeline)">
            <summary>
            Attempts to change to the specified drawing pipeline.
            </summary>
            <param name="newDrawingPipeline">
            The DrawingPipeline to change to.
            </param>
            <returns>
            true if the change has been successful;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.IManualEditNotifier">
            <summary>
            Provides a mechanism of informing an object
            that manual editing of the object has started.
            </summary>
            <remarks>
            This interface is useful for objects that need to be initialized
            before a tool starts manually editing the object.
            </remarks>
        </member>
        <member name="M:Zelda.IManualEditNotifier.StartManualEdit">
            <summary>
            Notifies this IManualEditNotifier that editing has begun.
            </summary>
        </member>
        <member name="T:Zelda.IReadOnlyLocalizedNameable">
            <summary>
            Represents an object that provides a mechanism for receiving the localized name of it.
            </summary>
        </member>
        <member name="P:Zelda.IReadOnlyLocalizedNameable.LocalizedName">
            <summary>
            Gets the localized name of this object.
            </summary>
        </member>
        <member name="T:Zelda.IReloadable">
            <summary>
            Provides a mechanism for reloading an object.
            </summary>
        </member>
        <member name="M:Zelda.IReloadable.Reload(Zelda.IZeldaServiceProvider)">
            <summary>
            Reloads this <see cref="T:Zelda.IReloadable"/> object.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="T:Zelda.IRemoveableState">
            <summary>
            Provides a mechanism to receive a value
            indicating whether the object can be
            removed manually by the user.
            </summary>
            <remarks>
            Mostly used to restrict removement of the object
            in the editor.
            </remarks>
        </member>
        <member name="P:Zelda.IRemoveableState.IsRemoveAllowed">
            <summary>
            Gets a value indicating whether the object that
            implements this interface is allowed be removed
            manually by the user.
            </summary>
        </member>
        <member name="T:Zelda.IUseable">
            <summary>
            Defines a mechanism that allows a PlayerEntity to use the implementing object.
            </summary>
        </member>
        <member name="M:Zelda.IUseable.Use(Zelda.Entities.PlayerEntity)">
            <summary>
            Tries to use this <see cref="T:Zelda.IUseable"/> object.
            </summary>
            <param name="user">
            The object which tries to use this <see cref="T:Zelda.IUseable"/>.
            </param>
            <returns>
            true if this IUseable object has been used;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.IZeldaServiceProvider">
            <summary>
            Provides fast access to game related services.
            </summary>
            <remarks>
            The implementor of this interface usually provides access (but slower) to 
            additional objects by implementing <see cref="M:System.IServiceProvider.GetService(System.Type)"/>.
            </remarks>
        </member>
        <member name="P:Zelda.IZeldaServiceProvider.TextureLoader">
            <summary>
            Gets the <see cref="T:Atom.Xna.ITexture2DLoader"/> object that provides a mechanism for loading Texture2D assets.
            </summary>
        </member>
        <member name="P:Zelda.IZeldaServiceProvider.SpriteLoader">
            <summary>
            Gets the <see cref="T:Atom.Xna.ISpriteLoader"/> object that provides a mechanism for loading Sprite and AnimatedSprite assets.
            </summary>
        </member>
        <member name="P:Zelda.IZeldaServiceProvider.SpriteSheetLoader">
            <summary>
            Gets the <see cref="T:Atom.Xna.ISpriteSheetLoader"/> object that provides a mechanism for loading ISpriteSheet assets.
            </summary>
        </member>
        <member name="P:Zelda.IZeldaServiceProvider.Rand">
            <summary>
            Gets a random number generator.
            </summary>
        </member>
        <member name="P:Zelda.IZeldaServiceProvider.ViewSize">
            <summary>
            Gets the size of the (unscaled) game window.
            </summary>
        </member>
        <member name="P:Zelda.IZeldaServiceProvider.Game">
            <summary>
            Gets the Xna game object of the current application.
            </summary>
        </member>
        <member name="P:Zelda.IZeldaServiceProvider.EntityReaderWriterManager">
            <summary>
            Gets the ObjectReaderWriterManager object.
            </summary>
        </member>
        <member name="P:Zelda.IZeldaServiceProvider.EntityTemplateManager">
            <summary>
            Gets the Zelda.Entities.EntityTemplateManager object.
            </summary>
        </member>
        <member name="P:Zelda.IZeldaServiceProvider.BehaviourManager">
            <summary>
            Gets the <see cref="T:Zelda.Entities.Behaviours.BehaviourManager"/> object.
            </summary>
        </member>
        <member name="P:Zelda.IZeldaServiceProvider.DrawStrategyManager">
            <summary>
            Gets the <see cref="T:Zelda.Entities.Drawing.DrawStrategyManager"/> object.
            </summary>
        </member>
        <member name="P:Zelda.IZeldaServiceProvider.ItemManager">
            <summary>
            Gets the <see cref="T:Zelda.Items.ItemManager"/> object.
            </summary>
        </member>
        <member name="P:Zelda.IZeldaServiceProvider.AudioSystem">
            <summary>
            Gets the <see cref="T:Zelda.Audio.ZeldaAudioSystem"/> object.
            </summary>
        </member>
        <member name="T:Zelda.IZeldaSetupable">
            <summary>
            Provides a method that allows to setup the object.
            </summary>
        </member>
        <member name="M:Zelda.IZeldaSetupable.Setup(Zelda.IZeldaServiceProvider)">
            <summary>
            Setups this IZeldaSetupable.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="T:Zelda.IZeldaUpdateable">
            <summary>
            Provides a mechanism that updates the object. 
            </summary>
            <remarks>
            <see cref="M:Zelda.IZeldaUpdateable.Update(Zelda.ZeldaUpdateContext)"/> is usually called once per frame.
            </remarks>
        </member>
        <member name="M:Zelda.IZeldaUpdateable.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this IZeldaUpdateable.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="T:Zelda.PathFollowState">
            <summary>
            Enumerates the different states a <see cref="T:Zelda.TilePathFollower"/> can be in.
            </summary>
        </member>
        <member name="F:Zelda.PathFollowState.Following">
            <summary>
            If the object is following the path.
            </summary>
        </member>
        <member name="F:Zelda.PathFollowState.Reached">
            <summary>
            If the object reached the end point.
            </summary>
        </member>
        <member name="F:Zelda.PathFollowState.Stuck">
            <summary>
            If the object didn't manage to follow the path anymore
            to do unknown sources.
            </summary>
        </member>
        <member name="F:Zelda.PathFollowState.HardStuck">
            <summary>
            If the object can't follow the path anymore
            because a solid tile or object is blocking the path.
            </summary>
        </member>
        <member name="T:Zelda.TilePathFollower">
            <summary>
            Provides a mechanism for a <see cref="T:Zelda.Entities.Components.Moveable"/> <see cref="T:Zelda.Entities.ZeldaEntity"/> to follow a <see cref="T:Atom.Scene.Tiles.TilePath"/>.
            This class can't be inherited.
            </summary>
        </member>
        <member name="F:Zelda.TilePathFollower.TimeUnmovedUntilDeclaredStuck">
            <summary>
            The time an entity that hasn't moved until it is considered to be 'stuck'.
            </summary>
        </member>
        <member name="P:Zelda.TilePathFollower.FollowPath">
            <summary>
            Gets or sets a value indicating whether to follow the current path.
            </summary>
        </member>
        <member name="P:Zelda.TilePathFollower.IsAtEndOfPath">
            <summary>
            Gets a value indicating whether the ZeldEntity that is using this PathFollower
            has reached the end of the path.
            </summary>
        </member>
        <member name="P:Zelda.TilePathFollower.HasPath">
            <summary>
            Gets a value indicating whether there exists
            a path this PathFollower can follow.
            </summary>
        </member>
        <member name="P:Zelda.TilePathFollower.TargetTile">
            <summary>
            Gets the position of the tile the current path ends at.
            </summary>
        </member>
        <member name="M:Zelda.TilePathFollower.Setup(Zelda.Entities.IMoveableEntity,Atom.Scene.Tiles.TilePath,Atom.Scene.Tiles.TileMapDataLayer)">
            <summary> 
            Setups this <see cref="T:Zelda.TilePathFollower"/> for a new following task.
            </summary>
            <param name="entity">
            The IMoveableEntity that should follow the path.
            </param>
            <param name="path">
            The path to follow.
            </param>
            <param name="actionLayer">
            The layer the PathFollowerer should operate on.
            </param>
        </member>
        <member name="M:Zelda.TilePathFollower.Follow(Zelda.ZeldaUpdateContext)">
            <summary> 
            When called the <see cref="T:Zelda.TilePathFollower"/> tries to
            tell the set ZeldaEntity how to follow the set Path.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
            <returns>
            Returns the current state of this PathFollower.
            </returns>
        </member>
        <member name="M:Zelda.TilePathFollower.HasNotReachedEndOfPath">
            <summary>
            Gets a value indicating whether this PathFollower has
            not reached the end of the path yet.
            </summary>
            <returns>
            true if it has not reached the end of the path yet and should continue to follow it;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.TilePathFollower.ShouldFollowPath">
            <summary>
            Gets a value indicating whether the PathFollower should continue
            to follow the current path.
            </summary>
            <returns>
            true if it should continue;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.TilePathFollower.UpdateStuckDetection(Atom.Math.Point2,Zelda.ZeldaUpdateContext)">
            <summary>
            Updates the logic that tries to detect whether the entity following
            the path got stuck.
            </summary>
            <param name="tilePosition">
            The position of the entity that is following the path (in tile-space).
            </param>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
            <returns>
            true if the entity is considered to be stuck;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.TilePathFollower.ResetPath">
            <summary>
            Tells this PathFollower to follow no path.
            </summary>
        </member>
        <member name="F:Zelda.TilePathFollower.entity">
            <summary>
            The ZeldaEntity that follows the path.
            </summary>
        </member>
        <member name="F:Zelda.TilePathFollower.moveable">
            <summary>
            Identifies the <see cref="T:Zelda.Entities.Components.Moveable"/> component of the ZeldaEntity.
            </summary>
        </member>
        <member name="F:Zelda.TilePathFollower.actionLayer">
            <summary>
            The underlying collision layer.
            </summary>
        </member>
        <member name="F:Zelda.TilePathFollower.path">
            <summary>
            The path to follow.
            </summary>
        </member>
        <member name="F:Zelda.TilePathFollower.targetTile">
            <summary>
            The tile at which the current path ends.
            </summary>
        </member>
        <member name="F:Zelda.TilePathFollower.pathIndex">
            <summary>
            The location of the moveable Entity in the path.
            </summary>
        </member>
        <member name="F:Zelda.TilePathFollower.followPath">
            <summary>
            Indicates whether to follow the current path.
            </summary>
        </member>
        <member name="F:Zelda.TilePathFollower.stuckTimer">
            <summary>
            The time an entity hasn't moved.
            </summary>
        </member>
        <member name="F:Zelda.TilePathFollower.oldTilePosition">
            <summary>
            The old position of the entity.
            </summary>
        </member>
        <member name="T:Zelda.Timing.ITimer">
            <summary>
            Represents a timer that raises an event after a specified time.
            </summary>
        </member>
        <member name="E:Zelda.Timing.ITimer.Ended">
            <summary>
            Raised when this ITimer has ended.
            </summary>
        </member>
        <member name="T:Zelda.Timing.ResetableRangeTimer">
            <summary>
            Represents a Timer that can be reset to be run again with the same timing values.
            </summary>
        </member>
        <member name="E:Zelda.Timing.ResetableRangeTimer.Ended">
            <summary>
            Raised when this Timer has ended.
            </summary>
        </member>
        <member name="P:Zelda.Timing.ResetableRangeTimer.TimeRange">
            <summary>
            Gets or sets the time this <see cref="T:Zelda.Timing.ResetableRangeTimer"/> takes until it ends.
            </summary>
        </member>
        <member name="P:Zelda.Timing.ResetableRangeTimer.TimeLeft">
            <summary>
            Gets or sets the time until this ITimer ends.
            </summary>
        </member>
        <member name="P:Zelda.Timing.ResetableRangeTimer.Ratio">
            <summary>
            Gets the current ratio between time left and time.
            </summary>
        </member>
        <member name="P:Zelda.Timing.ResetableRangeTimer.HasEnded">
            <summary>
            Gets a value indicating whether this ITimer has ended.
            </summary>
        </member>
        <member name="P:Zelda.Timing.ResetableRangeTimer.HasNotEnded">
            <summary>
            Gets a value indicating whether this ITimer has not ended.
            </summary>
        </member>
        <member name="M:Zelda.Timing.ResetableRangeTimer.Setup(Zelda.IZeldaServiceProvider)">
            <summary>
            Setup this ResetableRangeTimer instance.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Timing.ResetableRangeTimer.Reset">
            <summary>
            Resets the time left until the action is useable again.
            </summary>
        </member>
        <member name="M:Zelda.Timing.ResetableRangeTimer.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this ITimer.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Timing.ResetableRangeTimer.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Timing.ResetableRangeTimer.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Timing.ResetableRangeTimer.lastTime">
            <summary>
            The time this ITimer takes in the current pass.
            </summary>
        </member>
        <member name="F:Zelda.Timing.ResetableRangeTimer.timeLeft">
            <summary>
            The time left until this ITimer ends.
            </summary>
        </member>
        <member name="T:Zelda.Timing.ResetableTimer">
            <summary>
            Represents a Timer that can be reset to be run again with the same timing values.
            </summary>
        </member>
        <member name="E:Zelda.Timing.ResetableTimer.Ended">
            <summary>
            Raised when this Timer has ended.
            </summary>
        </member>
        <member name="P:Zelda.Timing.ResetableTimer.Time">
            <summary>
            Gets or sets the time this <see cref="T:Zelda.Timing.ResetableTimer"/> takes until it ends.
            </summary>
        </member>
        <member name="P:Zelda.Timing.ResetableTimer.TimeLeft">
            <summary>
            Gets or sets the time until this ITimer ends.
            </summary>
        </member>
        <member name="P:Zelda.Timing.ResetableTimer.Ratio">
            <summary>
            Gets the current ratio between time left and time.
            </summary>
        </member>
        <member name="P:Zelda.Timing.ResetableTimer.HasEnded">
            <summary>
            Gets a value indicating whether this ITimer has ended.
            </summary>
        </member>
        <member name="P:Zelda.Timing.ResetableTimer.HasNotEnded">
            <summary>
            Gets a value indicating whether this ITimer has not ended.
            </summary>
        </member>
        <member name="M:Zelda.Timing.ResetableTimer.#ctor">
            <summary>
            Initializes a new instance of the ResetableTimer class.
            </summary>
        </member>
        <member name="M:Zelda.Timing.ResetableTimer.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the ResetableTimer class.
            </summary>
            <param name="time">
            The time in seconds the action is not allowed to be executed for.
            </param>
        </member>
        <member name="M:Zelda.Timing.ResetableTimer.Reset">
            <summary>
            Resets the time left until the action is useable again.
            </summary>
        </member>
        <member name="M:Zelda.Timing.ResetableTimer.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this ITimer.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Timing.ResetableTimer.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Timing.ResetableTimer.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Timing.ResetableTimer.time">
            <summary>
            The time this ITimer takes.
            </summary>
        </member>
        <member name="F:Zelda.Timing.ResetableTimer.timeLeft">
            <summary>
            The time left until this ITimer ends.
            </summary>
        </member>
        <member name="T:Zelda.Timing.Timer">
            <summary>
            Represents an ITimer that raises an event after a specified time.
            </summary>
        </member>
        <member name="E:Zelda.Timing.Timer.Ended">
            <summary>
            Raised when this Timer has ended.
            </summary>
        </member>
        <member name="P:Zelda.Timing.Timer.Time">
            <summary>
            Gets or sets the time until this Timer ends.
            </summary>
        </member>
        <member name="M:Zelda.Timing.Timer.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this Timer.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Timing.Timer.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Timing.Timer.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Timing.Timer.timeLeft">
            <summary>
            The time left until this Timer ends.
            </summary>
        </member>
        <member name="T:Zelda.Timing.TimerMap">
            <summary>
            Represents a dictionary that maps <see cref="T:Zelda.Timing.ITimer"/>s onto (unique)
            identifier strings.
            </summary>
        </member>
        <member name="M:Zelda.Timing.TimerMap.#ctor">
            <summary>
            Initializes a new instance of the TimerMap class.
            </summary>
        </member>
        <member name="M:Zelda.Timing.TimerMap.Add(System.String,Zelda.Timing.ITimer)">
            <summary>
            Tries to add the given ITimer to this TimerMap by
            associating it with the given identifier.
            </summary>
            <param name="identifier">
            An (unique) string that identifies the given ITtimer.
            </param>
            <param name="timer">
            The ITtimer to add.
            </param>
            <returns>
            Returns true if the ITimer has been added;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Timing.TimerMap.TryGet(System.String)">
            <summary>
            Tries to get the ITimer that is associated with the given
            identifier string.
            </summary>
            <param name="identifier">
            The string that (uniquely) identifies the the ITimer to get.
            </param>
            <returns>
            The requested timer;
            or null.
            </returns>
        </member>
        <member name="M:Zelda.Timing.TimerMap.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this TimerMap.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Timing.TimerMap.RemoveTimersThatEnded">
            <summary>
            Removes all timers from the map that have been ended.
            </summary>
        </member>
        <member name="M:Zelda.Timing.TimerMap.AddToPendingRemove(Zelda.Timing.TimerMap.WrappedTimer)">
            <summary>
            Adds the given WrappedTimer to the list of timers that
            have been ended; and should be removed from the map soon.
            </summary>
            <param name="timer">
            The WrappedTimer that should be removed.
            </param>
        </member>
        <member name="M:Zelda.Timing.TimerMap.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Timing.TimerMap.GetTimersToSerialize">
            <summary>
            Gets the collection of WrappedTimers that should be serialized.
            </summary>
            <returns>
            A new collection of timers.
            </returns>
        </member>
        <member name="M:Zelda.Timing.TimerMap.ShouldSerializeTimer(Zelda.Timing.TimerMap.WrappedTimer)">
            <summary>
            Gets a value indicating whether the given WrappedTimer should be
            serialized.
            </summary>
            <param name="wrappedTimer">
            The wrapped timer that should be checked.
            </param>
            <returns>
            true if the timer should be serialized;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Timing.TimerMap.SerializeTimer(Zelda.Timing.TimerMap.WrappedTimer,Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe the specified map entry of this TimerMap.
            </summary>
            <param name="wrappedTimer">
            The timer to serialize.
            </param>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Timing.TimerMap.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Timing.TimerMap.DeserializeAndAddEntry(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe one entry in this TimerMap.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Timing.TimerMap.map">
            <summary>
            The dictionary that maps an (unique) identifier string onto an <see cref="T:Zelda.Timing.ITimer"/>.
            </summary>
        </member>
        <member name="F:Zelda.Timing.TimerMap.timers">
            <summary>
            The (cached) collection of mapped timers; for direct access.
            </summary>
        </member>
        <member name="F:Zelda.Timing.TimerMap.pendingRemoves">
            <summary>
            The list of ITimers that want to be removed from this TimerMap.
            </summary>
        </member>
        <member name="T:Zelda.Timing.TimerMap.WrappedTimer">
            <summary>
            Decorates an existing <see cref="T:Zelda.Timing.ITimer"/>
            with the identifier string that is associated with it.
            </summary>
        </member>
        <member name="E:Zelda.Timing.TimerMap.WrappedTimer.Ended">
            <summary>
            Raised when the wrapped ITimer has ended.
            </summary>
        </member>
        <member name="P:Zelda.Timing.TimerMap.WrappedTimer.Identifier">
            <summary>
            Gets the (unique) identifier string that is associated with this WrappedTimer.
            </summary>
        </member>
        <member name="P:Zelda.Timing.TimerMap.WrappedTimer.Timer">
            <summary>
            Gets the <see cref="T:Zelda.Timing.ITimer"/> that gets wrapped by this WrappedTimer.
            </summary>
        </member>
        <member name="M:Zelda.Timing.TimerMap.WrappedTimer.#ctor(System.String,Zelda.Timing.ITimer,Zelda.Timing.TimerMap)">
            <summary>
            Initializes a new instance of the WrappedTimer class.
            </summary>
            <param name="identifier">
            The identifier that is associated with the <paramref name="timer"/>.
            </param>
            <param name="timer">
            The ITimer that is wrapped by the new WrappedTimer.
            </param>
            <param name="map">
            The TimerMap that owns the new WrappedTimer.
            </param>
        </member>
        <member name="M:Zelda.Timing.TimerMap.WrappedTimer.OnTimerEnded(Zelda.Timing.ITimer)">
            <summary>
            Called when the timer this WrappedTimer wraps around
            has ended.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
        </member>
        <member name="M:Zelda.Timing.TimerMap.WrappedTimer.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this IZeldaUpdateable.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Timing.TimerMap.WrappedTimer.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Timing.TimerMap.WrappedTimer.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Timing.TimerMap.WrappedTimer.identifier">
            <summary>
            The identifier that is associated with the wrapped ITimer.
            </summary>
        </member>
        <member name="F:Zelda.Timing.TimerMap.WrappedTimer.timer">
            <summary>
            The ITimer that is wrapped by this WrappedTimer.
            </summary>
        </member>
        <member name="F:Zelda.Timing.TimerMap.WrappedTimer.map">
            <summary>
            The TimerMap this WrappedTimer is associated with.
            </summary>
        </member>
        <member name="T:Zelda.Timing.UnsavedTimer">
            <summary>
            Represents a wrapper around an <see cref="T:Zelda.Timing.ITimer"/> that by 
            implementing the <see cref="T:Zelda.Saving.IMaybeSaved"/> interface tells
            consumers that it doesn't want to be saved/serializes.
            This class can't be inherited.
            </summary>
        </member>
        <member name="E:Zelda.Timing.UnsavedTimer.Ended">
            <summary>
            Raised when the <see cref="P:Zelda.Timing.UnsavedTimer.Timer"/> has ended.
            </summary>
        </member>
        <member name="P:Zelda.Timing.UnsavedTimer.Timer">
            <summary>
            Gets the <see cref="T:Zelda.Timing.ITimer"/> this UnsavedTimer wraps around.
            </summary>
        </member>
        <member name="M:Zelda.Timing.UnsavedTimer.#ctor(Zelda.Timing.ITimer)">
            <summary>
            Initializes a new instance of the UnsavedTimer class.
            </summary>
            <param name="timer">
            The <see cref="T:Zelda.Timing.ITimer"/> the new UnsavedTimer wraps around.
            </param>
        </member>
        <member name="M:Zelda.Timing.UnsavedTimer.ShouldSerialize">
            <summary>
            Gets a value indicating whether this UnsavedTimer
            should be saved.
            </summary>
            <returns>
            Always returns false.
            </returns>
        </member>
        <member name="M:Zelda.Timing.UnsavedTimer.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this UnsavedTimer.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Timing.UnsavedTimer.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Timing.UnsavedTimer.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Timing.UnsavedTimer.timer">
            <summary>
            Identifies the <see cref="T:Zelda.Timing.ITimer"/> this UnsavedTimer wraps around.
            </summary>
        </member>
        <member name="T:Zelda.Crafting.CraftingBottle">
            <summary>
            The Crafting Bottle resamples the magic cube of Diablo 2.
            This class can't be inherited.
            </summary>
            <remarks>
            The player may place any item in the cube and 
            then try to transform them into a different item.
            <see cref="T:Zelda.Crafting.Recipe"/>s descripe what items are needed to create another item.
            </remarks>
        </member>
        <member name="F:Zelda.Crafting.CraftingBottle.BottleGridWidth">
            <summary>
            The default size of the grid (in cell space) of the <see cref="T:Zelda.Crafting.CraftingBottle"/>.
            </summary>
        </member>
        <member name="F:Zelda.Crafting.CraftingBottle.BottleGridHeight">
            <summary>
            The default size of the grid (in cell space) of the <see cref="T:Zelda.Crafting.CraftingBottle"/>.
            </summary>
        </member>
        <member name="P:Zelda.Crafting.CraftingBottle.TotalRubiesWorth">
            <summary>
            Gets the total number of rubies that all items in this CraftingBottle are worth.
            </summary>
        </member>
        <member name="M:Zelda.Crafting.CraftingBottle.#ctor(Zelda.Entities.PlayerEntity)">
            <summary>
            Initializes a new instance of the CraftingBottle class.
            </summary>
            <param name="player">
            The PlayerEntity that owns the new CraftingBottle.
            </param>
        </member>
        <member name="M:Zelda.Crafting.CraftingBottle.Transform(Zelda.Crafting.RecipeDatabase,Zelda.Items.ItemManager)">
            <summary>
            To be a transformation to be sucessfull only items 
            needed for a particular recipe are allowed to be in the cube.
            </summary>
            <param name="recipeDatabase">
            The <see cref="T:Zelda.Crafting.RecipeDatabase"/> object.
            </param>
            <param name="itemManager">
            The <see cref="T:Zelda.Items.ItemManager"/> object.
            </param>
        </member>
        <member name="M:Zelda.Crafting.CraftingBottle.FindWorkingRecipe(Zelda.Crafting.RecipeDatabase)">
            <summary>
            Finds the first Recipe that works with the current content of the bottle.
            </summary>
            <param name="recipeDatabase">
            The <see cref="T:Zelda.Crafting.RecipeDatabase"/> object.
            </param>
            <returns>
            The Recipe that would work; -or- otherwise null.
            </returns>
        </member>
        <member name="M:Zelda.Crafting.CraftingBottle.GetRecipes(Zelda.Crafting.RecipeDatabase)">
            <summary>
            Gets all <see cref="T:Zelda.Crafting.Recipe"/>s the items in this CraftingBottle
            relate to; sorted by importance.
            </summary>
            <param name="recipeDatabase">
            The <see cref="T:Zelda.Crafting.RecipeDatabase"/> object.
            </param>
            <returns>
            A new list containing the Recipes relating to the content of this CraftingBottle.
            </returns>
        </member>
        <member name="M:Zelda.Crafting.CraftingBottle.GetRecipesUnsorted(Zelda.Crafting.RecipeDatabase)">
            <summary>
            Gets all <see cref="T:Zelda.Crafting.Recipe"/>s the items in this CraftingBottle
            relate to.
            </summary>
            <param name="recipeDatabase">
            The <see cref="T:Zelda.Crafting.RecipeDatabase"/> object.
            </param>
            <returns>
            A new list containing the Recipes relating to the content of this CraftingBottle.
            </returns>
        </member>
        <member name="M:Zelda.Crafting.CraftingBottle.TryTransformRecipe(Zelda.Crafting.Recipe,Zelda.Items.ItemManager)">
            <summary>
            Tries to transform the items in this CraftingBottle
            by using the specified <see cref="T:Zelda.Crafting.Recipe"/>.
            </summary>
            <param name="recipe">
            The related recipe.
            </param>
            <param name="itemManager">
            The ItemManager object that provides a mechanism to load and create new Items.
            </param>
            <returns>
            true if transformation was successful;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Crafting.CraftingBottle.IsRecipeWorking(Zelda.Crafting.Recipe)">
            <summary>
            Gets a value indicating whether the given Recipe can currently be used.
            </summary>
            <param name="recipe">
            The Recipe to check.
            </param>
            <returns>
            true if the given Recipe is working; -or- otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Crafting.CraftingBottle.HasRequired(Zelda.Crafting.Recipe)">
            <summary>
            Gets a value indicating whether this CraftingBottle contains
            all items needed for the specified <see cref="T:Zelda.Crafting.Recipe"/>.
            </summary>
            <param name="recipe">
            The related recipe.
            </param>
            <returns>
            true if this CraftingBottle contains everything 
            needed for the specified <see cref="T:Zelda.Crafting.Recipe"/>;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Crafting.CraftingBottle.RemoveRequired(Zelda.Crafting.Recipe)">
            <summary>
            Removes the items needed for the specified <see cref="T:Zelda.Crafting.Recipe"/>.
            </summary>
            <param name="recipe">
            The related recipe.
            </param>
            <returns>
            The ItemInstances that have been modified.
            </returns>
        </member>
        <member name="M:Zelda.Crafting.CraftingBottle.CreateAndSpawnResult(Zelda.Crafting.Recipe,System.Collections.Generic.IEnumerable{Zelda.Items.ItemInstance},Zelda.Items.ItemManager)">
            <summary>
            Spawns the items of a successfully used <see cref="T:Zelda.Crafting.Recipe"/>.
            </summary>
            <param name="recipe">
            The related recipe.
            </param>
            <param name="usedItems">
            The ItemInstances that have been modified when removing the needed items.
            </param>
            <param name="itemManager">
            The ItemManager that is required to load any Items related to the Recipe.
            </param>
        </member>
        <member name="M:Zelda.Crafting.CraftingBottle.SpawnResult(Zelda.Items.ItemInstance)">
            <summary>
            Spawns the given ItemInstance, by inserting it into the Bottle.
            </summary>
            <remarks>
            If the bottle is full other places to insert the item are tried.
            </remarks>
            <param name="itemInstance">
            The instance of the Item to spawn.
            </param>
        </member>
        <member name="M:Zelda.Crafting.CraftingBottle.TransformItemsIntoRubies">
            <summary>
            Transforms all items currently in  this CraftingBottle into rubies.
            </summary>
            <returns>
            true if any item was transformed into rubies;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Crafting.CraftingBottle.SwapItemsOnShiftLeftClick(Zelda.Items.ItemInstance,Atom.Math.Point2)">
            <summary>
            Handles the case of the user left-clicking on an item in the CraftingBottle
            while the Shift key is down.
            </summary>
            <remarks>
            The default behaviour is to move the item into the inventory.
            </remarks>
            <param name="item">The related item.</param>
            <param name="cellX">The original position of the <paramref name="item"/> (in cell-space).</param>
        </member>
        <member name="M:Zelda.Crafting.NormalRecipeHandler.GetAffixedItem(System.String,System.Collections.Generic.IEnumerable{Zelda.Items.ItemInstance})">
            <summary>
            Helper method that gets the AffixedItem whose BaseItem has the given name.
            </summary>
            <param name="baseName">
            The name of the base item of the AffixedItem to get.
            </param>
            <param name="items">
            The list of item to search.
            </param>
            <returns>
            The requested AffixedItem; or null.
            </returns>
        </member>
        <member name="T:Zelda.Crafting.TransformGemsRecipeHandler">
            <summary>
            Given 3x gems of the same color produces a gem of the same color within +- 5 item-level of the average
            input gem level.
            </summary>
        </member>
        <member name="M:Zelda.Crafting.TransformGemsRecipeHandler.IsWithinAverageItemLevel(Zelda.Items.Gem,Atom.Math.IntegerRange)">
            <summary>
            Gets a value indicating whether the gem is within the required item level range.
            </summary>
            <example>
            avg = 13
            gem = 40
            4 .. 25
            -> False
            
            avg = 13
            gem = 20
            4 .. 25
            -> True
            </example>
            <param name="gem">
            The gem to check.
            </param>
            <returns>
            true when the gem is within the required range;
            -or- otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Crafting.Recipe">
            <summary>
            A Recipe descripes what items are required 
            to create another item using the magic <see cref="T:Zelda.Crafting.CraftingBottle"/>.
            This class can't be inherited.
            </summary>
        </member>
        <member name="P:Zelda.Crafting.Recipe.Name">
            <summary>
            Gets the name that uniquely identifies this <see cref="T:Zelda.Crafting.Recipe"/>.
            </summary>
        </member>
        <member name="P:Zelda.Crafting.Recipe.Description">
            <summary>
            Gets the (optional and localized) description of this <see cref="T:Zelda.Crafting.Recipe"/>.
            </summary>
        </member>
        <member name="P:Zelda.Crafting.Recipe.Category">
            <summary>
            Gets the category this Recipe is sorted under.
            </summary>
        </member>
        <member name="P:Zelda.Crafting.Recipe.Handler">
            <summary>
            Gets the object that is responsible for controlling the usage of this Recipe.
            </summary>
        </member>
        <member name="P:Zelda.Crafting.Recipe.Level">
            <summary>
            Gets the level of this Recipe.
            </summary>
        </member>
        <member name="P:Zelda.Crafting.Recipe.IsHidden">
            <summary>
            Gets a value indicating whether this Recipe is not shown
            in the Recipes UI.
            </summary>
        </member>
        <member name="P:Zelda.Crafting.Recipe.RequiredCount">
            <summary>
            Gets the number of individual parts this Recipe requires.
            </summary>
        </member>
        <member name="P:Zelda.Crafting.Recipe.Required">
            <summary>
            Gets the list of items which are needed 
            to craft the <see cref="P:Zelda.Crafting.Recipe.Result"/> of this Recipe.
            </summary>
        </member>
        <member name="P:Zelda.Crafting.Recipe.Result">
            <summary>
            Gets the ites which is crafted via this <see cref="T:Zelda.Crafting.Recipe"/>.
            </summary>
        </member>
        <member name="M:Zelda.Crafting.Recipe.#ctor(System.String,System.String,Zelda.Crafting.RecipeCategory,System.Int32,System.Boolean,System.Collections.Generic.IList{Zelda.Crafting.RequiredRecipeItem},Zelda.Crafting.ResultRecipeItem,Zelda.Crafting.IRecipeHandler)">
            <summary>
            Initializes a new instance of the Recipe class.
            </summary>
            <param name="name">
            The name that uniquely identifies the new Recipe.
            </param>
            <param name="description">
            The (optional and localized) description of the new Recipe.
            </param>
            <param name="category">
            The category of the new Recipe.
            </param>
            <param name="level">
            The level of the new Recipe.
            </param>
            <param name="isHidden">
            States whether the new Recipe is hidden from the recipes UI.
            </param>
            <param name="requiredItems">
            The items that are needed to create the <paramref name="result"/> of the new Recipe.
            </param>
            <param name="result">
            The result of the new Recipe.
            </param>
            <param name="handler">
            The object responsible for applying/using the new Recipe.
            </param>
        </member>
        <member name="M:Zelda.Crafting.Recipe.IsVisibleAt(System.Int32)">
            <summary>
            Gets a value indicating whether a player with the specified level is able to see this Recipe.
            </summary>
            <param name="level">
            The level of the player that wishes to use the Recipe.
            </param>
            <returns>
            true if the recipe is visible to a player at the specified level;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Crafting.Recipe.IsAvailableTo(Zelda.Entities.PlayerEntity)">
            <summary>
            Gets a value indicating whether the specified PlayerEntity is able
            to use this Recipe.
            </summary>
            <param name="player">
            The PlayerEntity that wishes to use the Recipe.
            </param>
            <returns>
            true if the recipe is available to the specified player;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Crafting.Recipe.IsAvailableAt(System.Int32)">
            <summary>
            Gets a value indicating whether a player with the specified level is able to use this Recipe.
            </summary>
            <param name="level">
            The level of the player that wishes to use the Recipe.
            </param>
            <returns>
            true if the recipe is available to a player at the specified level;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Crafting.Recipe.FullyLoad(Zelda.Items.ItemManager)">
            <summary>
            Fully loads, if required, the item data this Recipe uses into memory.
            </summary>
            <param name="itemManager">
            Implements a mechanism that allows loading of Item definition files
            into memory.
            </param>
        </member>
        <member name="M:Zelda.Crafting.Recipe.ActuallyFullyLoad(Zelda.Items.ItemManager)">
            <summary>
            Fully loads the item data this Recipe uses into memory.
            </summary>
            <param name="itemManager">
            Implements a mechanism that allows loading of Item definition files
            into memory.
            </param>
        </member>
        <member name="M:Zelda.Crafting.Recipe.Serialize(Zelda.Crafting.Recipe,Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes/Writes the data of the given Recipe into the given binary stream.
            </summary>
            <param name="recipe">
            The Recipe to serialize.
            </param>
            <param name="context">
            The IDeserializationContext to which is written.
            </param>
        </member>
        <member name="M:Zelda.Crafting.Recipe.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes/Reads the data stored in the given binary stream
            to create a new Recipe.
            </summary>
            <param name="context">
            The IDeserializationContext from which is read.
            </param>
            <returns>
            The deserializes Recipe.
            </returns>
        </member>
        <member name="F:Zelda.Crafting.Recipe.name">
            <summary>
            The name that uniquely identifies this <see cref="T:Zelda.Crafting.Recipe"/>. This string is not localized.
            </summary>
        </member>
        <member name="F:Zelda.Crafting.Recipe.description">
            <summary>
            The (optional and localized) description of this <see cref="T:Zelda.Crafting.Recipe"/>.
            </summary>
        </member>
        <member name="F:Zelda.Crafting.Recipe.category">
            <summary>
            The category this Recipe is sorted under.
            </summary>
        </member>
        <member name="F:Zelda.Crafting.Recipe.level">
            <summary>
            The level of this Recipe.
            </summary>
        </member>
        <member name="F:Zelda.Crafting.Recipe.requiredItems">
            <summary>
            The items needed to craft the result.
            </summary>
        </member>
        <member name="F:Zelda.Crafting.Recipe.result">
            <summary>
            The resulting item.
            </summary>
        </member>
        <member name="F:Zelda.Crafting.Recipe.isFullyLoaded">
            <summary>
            States whether this Recipe has been fully loaded.
            </summary>
        </member>
        <member name="F:Zelda.Crafting.Recipe.isHidden">
            <summary>
            States whether this Recipe is not shown in the Recipes UI.
            </summary>
        </member>
        <member name="F:Zelda.Crafting.Recipe.handler">
            <summary>
            The object responsible for applying/using this Recipe.
            </summary>
        </member>
        <member name="T:Zelda.Crafting.RecipeCategory">
            <summary>
            Enumerates the various categories into which <see cref="T:Zelda.Crafting.Recipe"/>s
            are grouped.
            </summary>
        </member>
        <member name="F:Zelda.Crafting.RecipeCategory.All">
            <summary>
            Represents all categories together.
            </summary>
        </member>
        <member name="F:Zelda.Crafting.RecipeCategory.Food">
            <summary>
            All buff food; includes potions.
            </summary>
        </member>
        <member name="F:Zelda.Crafting.RecipeCategory.Weapons">
            <summary>
            All weapons; including melee, ranged and offhand.
            </summary>
        </member>
        <member name="F:Zelda.Crafting.RecipeCategory.Shields">
            <summary>
            All defensive offhand items.
            </summary>
        </member>
        <member name="F:Zelda.Crafting.RecipeCategory.Armor">
            <summary>
            All armor items; including chests, belts, heads and boots.
            </summary>
        </member>
        <member name="F:Zelda.Crafting.RecipeCategory.Miscellaneous">
            <summary>
            All items that don't git in any of the other categories.
            </summary>
        </member>
        <member name="F:Zelda.Crafting.RecipeCategory.Jewelry">
            <summary>
            All jewelry; including rings, trinkets, necklaces and relics.
            </summary>
        </member>
        <member name="T:Zelda.Crafting.RecipeDatabase">
            <summary>
            Manages all of <see cref="T:Zelda.Crafting.Recipe"/> that are part of the game.
            </summary>
            <remarks>
            The RecipeDatabase is originally stored in a human-editable XML format.
            This format gets converted into a binary format when compiling the game-data.
            The binary database is stored in the Content\\RecipeDatabase.zrdb file.
            </remarks>
        </member>
        <member name="P:Zelda.Crafting.RecipeDatabase.SpecialRecipes">
            <summary>
            Gets the recipes that don't have the default <see cref="T:Zelda.Crafting.NormalRecipeHandler"/>.
            </summary>
        </member>
        <member name="P:Zelda.Crafting.RecipeDatabase.Count">
            <summary>
            Gets the number of Recipes in this RecipeDatabase.
            </summary>
        </member>
        <member name="M:Zelda.Crafting.RecipeDatabase.GetVisibleRecipes(System.Int32,Zelda.Crafting.RecipeCategory)">
            <summary>
            Gets the recipes that are visible at the given level in the given category.
            </summary>
            <param name="level">
            The level of the player.
            </param>
            <param name="category">
            The RecipeCategory to filter for.
            </param>
            <returns>
            The visible recipes.
            </returns>
        </member>
        <member name="M:Zelda.Crafting.RecipeDatabase.LearnsNewRecipesAt(System.Int32)">
            <summary>
            Gets a value indicating whether the player learns any new recipes at the given player level.
            </summary>
            <param name="playerLevel">
            The level of the player.
            </param>
            <returns>
            true if the player would learn at least one new visible recipe; -or- otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Crafting.RecipeDatabase.GetVisibleRecipesCountAt(System.Int32)">
            <summary>
            Gets the number of recipes that are visibile at the given level.
            </summary>
            <param name="level">
            The player level to check.
            </param>
            <returns>
            The number of visible recipes.
            </returns>
        </member>
        <member name="M:Zelda.Crafting.RecipeDatabase.GetRecipesInCategory(Zelda.Crafting.RecipeCategory)">
            <summary>
            Gets all of the Recipes that are in the given RecipeCategory.
            </summary>
            <param name="category">
            The RecipeCategory to filter for.
            </param>
            <returns>
            The Recipes associated with the specified RecipeCategory.
            </returns>
        </member>
        <member name="M:Zelda.Crafting.RecipeDatabase.Get(System.String)">
            <summary>
            Tries to get the <see cref="T:Zelda.Crafting.Recipe"/> with the specified <paramref name="name"/>.
            </summary>
            <param name="name">
            The name of the recipe to get.
            </param>
            <returns>
            The <see cref="T:Zelda.Crafting.Recipe"/>; or null if not found.
            </returns>
        </member>
        <member name="M:Zelda.Crafting.RecipeDatabase.Add(Zelda.Crafting.Recipe)">
            <summary>
            Adds the given Recipe to this RecipeDatabase.
            </summary>
            <param name="recipe">
            The Recipe to add.
            </param>
        </member>
        <member name="M:Zelda.Crafting.RecipeDatabase.GetEnumerator">
            <summary>
            Gets an enumerator that iterates over the <see cref="T:Zelda.Crafting.Recipe"/>s
            in this RecipeDatabase.
            </summary>
            <returns>
            A new enumerator.
            </returns>
        </member>
        <member name="M:Zelda.Crafting.RecipeDatabase.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator that iterates over the <see cref="T:Zelda.Crafting.Recipe"/>s
            in this RecipeDatabase.
            </summary>
            <returns>
            A new enumerator.
            </returns>
        </member>
        <member name="M:Zelda.Crafting.RecipeDatabase.Load(Zelda.IZeldaServiceProvider)">
            <summary>
            Loads this RecipeDatabase by reading the Content\\RecipeDatabase.zrdb file.
            </summary>
            <param name="serviceProvider">
            Provides a mechanism for accessing game-related services.
            </param>
        </member>
        <member name="M:Zelda.Crafting.RecipeDatabase.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes this RecipeDatabase.
            </summary>
            <param name="context">
            The ISerializationContext to which is written.
            </param>
        </member>
        <member name="M:Zelda.Crafting.RecipeDatabase.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes this RecipeDatabase.
            </summary>
            <param name="context">
            The IDeserializationContext from which is read.
            </param>
        </member>
        <member name="F:Zelda.Crafting.RecipeDatabase.specialRecipes">
            <summary>
            The recipes that don't have the default <see cref="T:Zelda.Crafting.NormalRecipeHandler"/>.
            </summary>
        </member>
        <member name="F:Zelda.Crafting.RecipeDatabase.recipes">
            <summary>
            The Recipes this RecipeDatabase contains; sorted by their name.
            </summary>
        </member>
        <member name="T:Zelda.Crafting.RecipeItem">
            <summary>
            Represents a single item used in a <see cref="T:Zelda.Crafting.Recipe"/>.
            </summary>
        </member>
        <member name="P:Zelda.Crafting.RecipeItem.Name">
            <summary>
            Gets the name that uniquely identifies the Item.
            </summary>
        </member>
        <member name="P:Zelda.Crafting.RecipeItem.Amount">
            <summary>
            Gets a value that represents the number of Items
            required.
            </summary>
        </member>
        <member name="P:Zelda.Crafting.RecipeItem.Item">
            <summary>
            Gets the actual Item this RecipeItem is based on.
            Is null until this RecipeItem is <see cref="M:Zelda.Crafting.RecipeItem.FullyLoad(Zelda.Items.ItemManager)"/>ed.
            </summary>
        </member>
        <member name="M:Zelda.Crafting.RecipeItem.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Crafting.RecipeItem"/> class.
            </summary>
            <param name="name">
            The name that uniquely identifies the Item.
            </param>
            <param name="amount">
            The number of items needed.
            </param>
        </member>
        <member name="M:Zelda.Crafting.RecipeItem.FullyLoad(Zelda.Items.ItemManager)">
            <summary>
            Fully loads the actual item data of this RecipeItem into memory.
            </summary>
            <param name="itemManager">
            Implements a mechanism that allows loading of Item definition files
            into memory.
            </param>
        </member>
        <member name="F:Zelda.Crafting.RecipeItem.name">
            <summary>
            The name that uniquely identifies the Item.
            </summary>
        </member>
        <member name="F:Zelda.Crafting.RecipeItem.amount">
            <summary>
            The number of items needed.
            </summary>
        </member>
        <member name="T:Zelda.Crafting.RequiredRecipeItem">
            <summary>
            Represents an item that is required for an <see cref="T:Zelda.Crafting.Recipe"/> to work.
            </summary>
        </member>
        <member name="P:Zelda.Crafting.RequiredRecipeItem.AllowsAffixed">
            <summary>
            Gets a value indicating whether AffixedItems are allowed.
            </summary>
        </member>
        <member name="P:Zelda.Crafting.RequiredRecipeItem.Matcher">
            <summary>
            Gets the predicate object that decides which actual Item matches this RequiredRecipeItem.
            </summary>
        </member>
        <member name="M:Zelda.Crafting.RequiredRecipeItem.#ctor(System.String,System.Int32,System.Boolean,Zelda.Crafting.IRecipeItemMatcher)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Crafting.RequiredRecipeItem"/> class.
            </summary>
            <param name="name">
            The name that uniquely identifies the Item.
            </param>
            <param name="amount">
            The number of items needed.
            </param>
            <param name="allowsAffixed">
             States whether affixed items are allowed.
            </param>
        </member>
        <member name="M:Zelda.Crafting.RequiredRecipeItem.Serialize(Zelda.Crafting.RequiredRecipeItem,Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes an instance of the <see cref="T:Zelda.Crafting.RequiredRecipeItem"/> class by reading from the specified IDeserializationContext.
            </summary>
            <param name="item">
            The item to serialize.
            </param>
            <param name="context">
            The ISerializationContext to write to.
            </param>
        </member>
        <member name="M:Zelda.Crafting.RequiredRecipeItem.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes an instance of the <see cref="T:Zelda.Crafting.RequiredRecipeItem"/> class by reading from the specified IDeserializationContext.
            </summary>
            <param name="context">
            The IDeserializationContext to read from.
            </param>
            <returns>
            The newly created NeededRecipeItem.
            </returns>
        </member>
        <member name="F:Zelda.Crafting.RequiredRecipeItem.allowsAffixed">
            <summary>
            States whether affixed items are allowed.
            </summary>
        </member>
        <member name="T:Zelda.Crafting.ResultRecipeItem">
            <summary>
            Represents the item that results from a <see cref="T:Zelda.Crafting.Recipe"/>.
            </summary>
        </member>
        <member name="P:Zelda.Crafting.ResultRecipeItem.AppliesAffixesOf">
            <summary>
            Gets the name that uniquely identifies the base item of the AffixedItem
            whose affixes should be applied to the resulting item.
            </summary>
        </member>
        <member name="M:Zelda.Crafting.ResultRecipeItem.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Crafting.ResultRecipeItem"/> class.
            </summary>
            <param name="name">
            The name that uniquely identifies the Item.
            </param>
            <param name="amount">
            The number of items needed.
            </param>
            <param name="appliesAffixesOf">
            The name that uniquely identifies the base item of the AffixedItem
            whose affixes should be applied to the resulting item.
            </param>
        </member>
        <member name="M:Zelda.Crafting.ResultRecipeItem.Serialize(Zelda.Crafting.ResultRecipeItem,Atom.Storage.ISerializationContext)">
            <summary>
            Serializes an instance of the <see cref="T:Zelda.Crafting.ResultRecipeItem"/> class by reading from the specified IDeserializationContext.
            </summary>
            <param name="item">
            The item to serialize.
            </param>
            <param name="context">
            The ISerializationContext to write to.
            </param>
        </member>
        <member name="M:Zelda.Crafting.ResultRecipeItem.Deserialize(Atom.Storage.IDeserializationContext)">
            <summary>
            Deserializes an instance of the <see cref="T:Zelda.Crafting.ResultRecipeItem"/> class by reading from the specified IDeserializationContext.
            </summary>
            <param name="context">
            The IDeserializationContext to read from.
            </param>
            <returns>
            The newly created ResultRecipeItem.
            </returns>
        </member>
        <member name="F:Zelda.Crafting.ResultRecipeItem.appliesAffixesOf">
            <summary>
            The name that uniquely identifies the base item of the AffixedItem
            whose affixes should be applied to the resulting item.
            </summary>
        </member>
        <member name="T:Zelda.DayNightState">
            <summary>
            Enumerates the various <see cref="T:Zelda.DayNightCycle"/> related events.
            </summary>
        </member>
        <member name="F:Zelda.DayNightState.None">
            <summary>
            Represents no specific state.
            </summary>
        </member>
        <member name="F:Zelda.DayNightState.Day">
            <summary>
            Day goes from 6:00 to 18:00.
            </summary>
        </member>
        <member name="F:Zelda.DayNightState.Evening">
            <summary>
            Evening goes from 18:00 to 23:00.
            </summary>
        </member>
        <member name="F:Zelda.DayNightState.Night">
            <summary>
            Night goes from 23:00 to 6:00.
            </summary>
        </member>
        <member name="T:Zelda.DayNightEvent">
            <summary>
            Enumerates the various <see cref="T:Zelda.DayNightCycle"/> related events.
            </summary>
        </member>
        <member name="F:Zelda.DayNightEvent.None">
            <summary>
            Represents no specific event.
            </summary>
        </member>
        <member name="F:Zelda.DayNightEvent.DayBegan">
            <summary>
            The event fired when the day begins. Day goes from 6:00 to 18:00.
            </summary>
        </member>
        <member name="F:Zelda.DayNightEvent.DayEnded">
            <summary>
            The event fired when the day ends. Day goes from 6:00 to 18:00.
            </summary>
        </member>
        <member name="F:Zelda.DayNightEvent.EveningBegan">
            <summary>
            The event fired when the evening begins. Evening goes from 18:00 to 23:00.
            </summary>
        </member>
        <member name="F:Zelda.DayNightEvent.EveningEnded">
            <summary>
            The event fired when the evening ends. Evening goes from 18:00 to 23:00.
            </summary>
        </member>
        <member name="F:Zelda.DayNightEvent.NightBegan">
            <summary>
            The event fired when the night begins. Night goes from 23:00 to 6:00.
            </summary>
        </member>
        <member name="F:Zelda.DayNightEvent.NightEnded">
            <summary>
            The event fired when the night ends. Night goes from 23:00 to 6:00.
            </summary>
        </member>
        <member name="T:Zelda.DayNightCycle">
            <summary> 
            Defines the day/night cycle controller.  
            </summary>
        </member>
        <member name="E:Zelda.DayNightCycle.Event">
            <summary>
            Raised when a <see cref="T:Zelda.DayNightEvent"/> has occurred.
            </summary>
        </member>
        <member name="P:Zelda.DayNightCycle.IsEnabled">
            <summary>
            Gets or sets a value indicating whether  this <see cref="T:Zelda.DayNightCycle"/> is activated.
            </summary>
        </member>
        <member name="P:Zelda.DayNightCycle.Alpha">
            <summary>
            Gets the current alpha value.
            </summary>
        </member>
        <member name="P:Zelda.DayNightCycle.State">
            <summary>
            Gets the current <see cref="T:Zelda.DayNightState"/>.
            </summary>
        </member>
        <member name="P:Zelda.DayNightCycle.IngameDateTime">
            <summary>
            Gets or sets the current <see cref="P:Zelda.DayNightCycle.IngameDateTime"/>.
            </summary>
        </member>
        <member name="M:Zelda.DayNightCycle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.DayNightCycle"/> class.
            </summary>
        </member>
        <member name="M:Zelda.DayNightCycle.#ctor(Zelda.IngameDateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.DayNightCycle"/> class.
            </summary>
            <param name="currentDateTime">
            A reference to the <see cref="P:Zelda.DayNightCycle.IngameDateTime"/> object
            which stores to current time ingame.
            </param>
        </member>
        <member name="M:Zelda.DayNightCycle.Update">
            <summary>
            Updates this DayNightCycle based on the current date/time.
            </summary>
        </member>
        <member name="M:Zelda.DayNightCycle.UpdateEvents">
            <summary>
            Updates the raising of Day/Night - change events.
            </summary>
        </member>
        <member name="M:Zelda.DayNightCycle.LeaveState">
            <summary>
            Leaves the current DayNightState, raising the Event.
            </summary>
        </member>
        <member name="M:Zelda.DayNightCycle.EnterState(Zelda.DayNightState)">
            <summary>
            Enters the given DayNightState, raising the Event.
            </summary>
            <param name="newState">
            The DayNightState to enter.
            </param>
        </member>
        <member name="M:Zelda.DayNightCycle.GetBeginEvent(Zelda.DayNightState)">
            <summary>
            Gets the begin <see cref="T:Zelda.DayNightEvent"/> that is associated
            with the given DayNightState.
            </summary>
            <param name="state">
            The input DayNightState.
            </param>
            <returns>
            The related DayNightEvent.
            </returns>
        </member>
        <member name="M:Zelda.DayNightCycle.GetEndEvent(Zelda.DayNightState)">
            <summary>
            Gets the end <see cref="T:Zelda.DayNightEvent"/> that is associated
            with the given DayNightState.
            </summary>
            <param name="state">
            The input DayNightState.
            </param>
            <returns>
            The related DayNightEvent.
            </returns>
        </member>
        <member name="M:Zelda.DayNightCycle.GetState(System.DateTime)">
            <summary>
            Gets the DayNightState for the given <see cref="T:System.DateTime"/>. 
            </summary>
            <param name="dateTime">
            The input DateTime.
            </param>
            <returns>
            The output DayNightState.
            </returns>
        </member>
        <member name="M:Zelda.DayNightCycle.UpdateLightRatio">
            <summary>
            Updates the current ambient Light Ratio.
            </summary>
        </member>
        <member name="F:Zelda.DayNightCycle.state">
            <summary>
            THe current state of the DayNightCycle.
            </summary>
        </member>
        <member name="F:Zelda.DayNightCycle.lightRatio">
            <summary>
            Stores the current global alpha value.
            </summary>
        </member>
        <member name="F:Zelda.DayNightCycle.ingameDateTime">
            <summary>
            Stores the current date/time.
            </summary>
        </member>
        <member name="F:Zelda.DayNightCycle.isActivated">
            <summary>
            Specifies whether the DayNightCycle is activated. 
            </summary>
        </member>
        <member name="T:Zelda.DayNightCycle.LightRatios">
            <summary>
            Provides a mechanism to receive the
            </summary>
        </member>
        <member name="M:Zelda.DayNightCycle.LightRatios.Get(System.DateTime)">
            <summary>
            Calculates and returns the current light ratio value based on the current date and time.
            </summary>
            <param name="dateTime">
            The current ingame DateTime.
            </param>
            <returns>
            The light ratio value.
            </returns>
        </member>
        <member name="M:Zelda.DayNightCycle.LightRatios.CreateAndSetupLightRatiosArray">
            <summary>
            Creates and setups the array of light ratios.
            </summary>
            <returns>
            The 2D array of light ratios; indexed by [month][hour].
            </returns>
        </member>
        <member name="M:Zelda.DayNightCycle.LightRatios.SetupEuropean(System.Single[][])">
            <summary>
            Setups the specified light <paramref name="ratios"/> array
            to roughtly represent middle european light.
            </summary>
            <param name="ratios">
            The array to initialize.
            </param>
        </member>
        <member name="F:Zelda.DayNightCycle.LightRatios.lightRatios">
            <summary> 
            Stores the light ratio sorted by month|hour;
            </summary>
        </member>
        <member name="T:Zelda.Design.BaseZeldaObjectCreationEditor">
            <summary>
            Represents an <see cref="T:System.Drawing.Design.UITypeEditor"/> that allows the user to create an object.
            </summary>
        </member>
        <member name="M:Zelda.Design.BaseZeldaObjectCreationEditor.SetupCreatedObject(System.Object)">
            <summary>
            Called after the given object has been created.
            </summary>
            <param name="obj">
            The object which has been created.
            </param>
        </member>
        <member name="T:Zelda.Design.DesignTime">
            <summary>
            Provides access to design-time-only services.
            </summary>
            <remarks>
            This class should only be used by design-time components;
            such as UITypeEditors.
            </remarks>
        </member>
        <member name="P:Zelda.Design.DesignTime.Services">
            <summary>
            Gets an object that provides fast access to game-related services.
            </summary>
        </member>
        <member name="M:Zelda.Design.DesignTime.Initialize(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes the <see cref="T:Zelda.Design.DesignTime"/> singleton.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Design.DesignTime.GetService``1">
            <summary>
            Gets the service of the specified type <typeparamref name="TService"/>.
            </summary>
            <typeparam name="TService">
            The type of service to get.
            </typeparam>
            <returns>
            The requested service;
            or null if no such service was registered.
            </returns>
        </member>
        <member name="T:Zelda.Design.SceneNameEditor">
            <summary>
            Defines an <see cref="T:System.Drawing.Design.UITypeEditor"/> that
            allows the user to select an existing ZeldaScene.
            This class can't be inherited.
            </summary>
        </member>
        <member name="M:Zelda.Design.SceneNameEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the value of the specified object using the editor style indicated
            by the System.Drawing.Design.UITypeEditor.GetEditStyle() method.
            </summary>
            <param name="context">
            An System.ComponentModel.ITypeDescriptorContext that can be used to gain
            additional context information.
            </param>
            <param name="provider">
             An System.IServiceProvider that this editor can use to obtain services.
             </param>
            <param name="value">  
            The object to edit.
            </param>
            <returns>
            The new value of the object.
            </returns>
        </member>
        <member name="M:Zelda.Design.SceneNameEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the editor style used by the 
            System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)
            method.
            </summary>
            <param name="context">
            An System.ComponentModel.ITypeDescriptorContext that can be used to gain
            additional context information.
            </param>
            <returns>
            Returns UITypeEditorEditStyle.Modal.
            </returns>
        </member>
        <member name="T:Zelda.Entities.AreaSoundEmitter">
            <summary>
            Represents a <see cref="T:Zelda.Entities.SoundEmitter"/> that plays a <see cref="T:Atom.Fmod.Sound"/>
            that changes its volumne depending on the position of the current audio listener.
            The area of sound is rectangular.
            </summary>
        </member>
        <member name="P:Zelda.Entities.AreaSoundEmitter.MinimumDistance">
            <summary>
            Gets or sets the the minimum area size that the sound emitter
            will cease to continue growing louder at (as it approaches the listener).
            </summary>
        </member>
        <member name="P:Zelda.Entities.AreaSoundEmitter.MaximumDistance">
            <summary>
            Gets or sets the maximum area size the sound stops attenuating at. 
            Beyond this point it will stay at the volume it would be at MaximumDistance units from the listener 
            and will not attenuate any more.
            </summary>
        </member>
        <member name="P:Zelda.Entities.AreaSoundEmitter.MaximumAreaOffset">
            <summary>
            Gets or sets the offset for the outer (maximum) area.
            </summary>
        </member>
        <member name="P:Zelda.Entities.AreaSoundEmitter.MinimumArea">
            <summary>
            Gets the area in which the sound emitter will cease to continue growing louder at (as it approaches the listener).
            </summary>
        </member>
        <member name="P:Zelda.Entities.AreaSoundEmitter.MaximumArea">
            <summary>
            Gets the maximum area the sound stops attenuating at. 
            Beyond this point it will stay at the volume it would be at MaximumDistance units from the listener 
            and will not attenuate any more.
            </summary>
        </member>
        <member name="M:Zelda.Entities.AreaSoundEmitter.#ctor">
            <summary>
            Initializes a new instance of the AreaSoundEmitter class.
            </summary>
        </member>
        <member name="M:Zelda.Entities.AreaSoundEmitter.Setup(Zelda.IZeldaServiceProvider)">
            <summary>
            Setups this AreaSoundEmitter.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Entities.AreaSoundEmitter.LoadSound(Atom.Fmod.Sound)">
            <summary>
            Loads the given Sound object, by default as a simple music file.
            </summary>
            <param name="sound">
            The sound object. Is never null.
            </param>
        </member>
        <member name="M:Zelda.Entities.AreaSoundEmitter.CreateChannel(Atom.Fmod.Sound)">
            <summary>
            Creates a new Channel object of the given Sound object.
            </summary>
            <param name="sound">
            The sound object. Is never null.
            </param>
            <returns>
            The new channel.
            </returns>
        </member>
        <member name="M:Zelda.Entities.AreaSoundEmitter.SetupChannel(Atom.Fmod.Channel)">
            <summary>
            Setups the given channel for playback.
            </summary>
            <param name="channel">
            The channel object. Is never null.
            </param>
        </member>
        <member name="M:Zelda.Entities.AreaSoundEmitter.OnPositionChanged(System.Object,Atom.ChangedValue{Atom.Math.Vector2})">
            <summary>
            Called when the position of this SoundEntity has changed.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The Atom.ChangedValue{Atom.Math.Vector2} that contains the event data.</param>
        </member>
        <member name="M:Zelda.Entities.AreaSoundEmitter.RefreshAreas">
            <summary>
            Refreshes the cached minimum and maximum areas.
            </summary>
        </member>
        <member name="M:Zelda.Entities.AreaSoundEmitter.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates the volume of the emitter.
            </summary>
            <param name="updateContext">
            The current update context.
            </param>
        </member>
        <member name="M:Zelda.Entities.AreaSoundEmitter.DrawEditMode(Zelda.ZeldaDrawContext)">
            <summary>
            Draws this <see cref="T:Zelda.Entities.AreaSoundEmitter"/> in edit-mode.
            </summary>
            <param name="drawContext">
            The current ZeldaDrawContext.
            </param>
        </member>
        <member name="F:Zelda.Entities.AreaSoundEmitter.minimumDistance">
            <summary>
            The storage field of the <see cref="P:Zelda.Entities.AreaSoundEmitter.MinimumDistance"/> property.
            </summary>
        </member>
        <member name="F:Zelda.Entities.AreaSoundEmitter.maximumDistance">
            <summary>
            The storage field of the <see cref="P:Zelda.Entities.AreaSoundEmitter.MaximumDistance"/> property.
            </summary>
        </member>
        <member name="F:Zelda.Entities.AreaSoundEmitter.maximumAreaOffset">
            <summary>
            The storage field of the <see cref="!:MaximumOffset"/> property.
            </summary>
        </member>
        <member name="F:Zelda.Entities.AreaSoundEmitter.minimumArea">
            <summary>
            Cached sound areas.
            </summary>
        </member>
        <member name="F:Zelda.Entities.AreaSoundEmitter.maximumArea">
            <summary>
            Cached sound areas.
            </summary>
        </member>
        <member name="F:Zelda.Entities.AreaSoundEmitter.audioSystem">
            <summary>
            Used to get the current audio listener position.
            </summary>
        </member>
        <member name="T:Zelda.Entities.AreaSoundEmitter.ReaderWriter">
            <summary>
            Defines the <see cref="T:Zelda.Entities.IEntityReaderWriter"/> for <see cref="T:Zelda.Entities.AreaSoundEmitter"/> entities.
            </summary>
        </member>
        <member name="M:Zelda.Entities.AreaSoundEmitter.ReaderWriter.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the ReaderWriter class.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services. 
            </param>
        </member>
        <member name="M:Zelda.Entities.AreaSoundEmitter.ReaderWriter.Serialize(Zelda.Entities.AreaSoundEmitter,Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the given object using the given <see cref="T:System.IO.BinaryWriter"/>.
            </summary>
            <param name="entity">
            The entity to serialize.
            </param>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.AreaSoundEmitter.ReaderWriter.Deserialize(Zelda.Entities.AreaSoundEmitter,Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data in the given <see cref="T:System.IO.BinaryWriter"/> to initialize
            the given ZeldaEntity.
            </summary>
            <param name="entity">
            The ZeldaEntity to initialize.
            </param>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="T:Zelda.Entities.PositionalShotSoundEmitter">
            <summary>
            Represents a <see cref="T:Zelda.Entities.SoundEmitter"/> that plays a <see cref="T:Atom.Fmod.Sound"/>
            that changes its volumne depending on the position of the current ZeldaCamera.
            </summary>
        </member>
        <member name="F:Zelda.Entities.PositionalShotSoundEmitter.SoundTag">
            <summary>
            The tag under which sounds used by the PositionalSoundEmitter are created. 
            </summary>
        </member>
        <member name="P:Zelda.Entities.PositionalShotSoundEmitter.MinimumDistance">
            <summary>
            Gets or sets the the minimum distance that the sound emitter
            will cease to continue growing louder at (as it approaches the listener).
            </summary>
        </member>
        <member name="P:Zelda.Entities.PositionalShotSoundEmitter.MaximumDistance">
            <summary>
            Gets or sets the maximum distance the sound stops attenuating at. 
            Beyond this point it will stay at the volume it would be at MaximumDistance units from the listener 
            and will not attenuate any more.
            </summary>
        </member>
        <member name="P:Zelda.Entities.PositionalShotSoundEmitter.PanLevel3D">
            <summary>
            Gets or sets how much the 3d engine has an effect on the sound emitter, versus that set by Channel::setPan, Channel::setSpeakerMix, Channel::setSpeakerLevels
            </summary>
            <value>
            1 = Sound pans and attenuates according to 3d position. 0 = Attenuation is ignored and pan/speaker levels are defined by Channel::setPan, Channel::setSpeakerMix, Channel::setSpeakerLevels.
            Default = 1 (all by 3D position). 
            </value>
        </member>
        <member name="M:Zelda.Entities.PositionalShotSoundEmitter.#ctor">
            <summary>
            Initializes a new instance of the PositionalShotSoundEmitter class.
            </summary>
        </member>
        <member name="M:Zelda.Entities.PositionalShotSoundEmitter.LoadSound(Atom.Fmod.Sound)">
            <summary>
            Loads the given Sound object.
            </summary>
            <param name="sound">
            The sound object. Is never null.
            </param>
        </member>
        <member name="M:Zelda.Entities.PositionalShotSoundEmitter.SetupChannel(Atom.Fmod.Channel)">
            <summary>
            Setups the given channel for playback.
            </summary>
            <param name="channel">
            The channel object. Is never null.
            </param>
        </member>
        <member name="M:Zelda.Entities.PositionalShotSoundEmitter.DrawEditMode(Zelda.ZeldaDrawContext)">
            <summary>
            Draws this <see cref="T:Zelda.Entities.PositionalSoundEmitter"/> in edit-mode.
            </summary>
            <param name="drawContext">
            The current ZeldaDrawContext.
            </param>
        </member>
        <member name="F:Zelda.Entities.PositionalShotSoundEmitter.minimumDistance">
            <summary>
            The storage field of the <see cref="P:Zelda.Entities.PositionalShotSoundEmitter.MinimumDistance"/> property.
            </summary>
        </member>
        <member name="F:Zelda.Entities.PositionalShotSoundEmitter.maximumDistance">
            <summary>
            The storage field of the <see cref="P:Zelda.Entities.PositionalShotSoundEmitter.MaximumDistance"/> property.
            </summary>
        </member>
        <member name="F:Zelda.Entities.PositionalShotSoundEmitter.panLevel3D">
            <summary>
            The storage field of the <see cref="P:Zelda.Entities.PositionalShotSoundEmitter.PanLevel3D"/> property.
            </summary>
        </member>
        <member name="T:Zelda.Entities.PositionalShotSoundEmitter.ReaderWriter">
            <summary>
            Defines the <see cref="T:Zelda.Entities.IEntityReaderWriter"/> for <see cref="T:Zelda.Entities.PositionalShotSoundEmitter"/> entities.
            </summary>
        </member>
        <member name="M:Zelda.Entities.PositionalShotSoundEmitter.ReaderWriter.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the ReaderWriter class.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services. 
            </param>
        </member>
        <member name="M:Zelda.Entities.PositionalShotSoundEmitter.ReaderWriter.Serialize(Zelda.Entities.PositionalShotSoundEmitter,Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the given object using the given <see cref="T:System.IO.BinaryWriter"/>.
            </summary>
            <param name="entity">
            The entity to serialize.
            </param>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.PositionalShotSoundEmitter.ReaderWriter.Deserialize(Zelda.Entities.PositionalShotSoundEmitter,Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data in the given <see cref="T:System.IO.BinaryWriter"/> to initialize
            the given ZeldaEntity.
            </summary>
            <param name="entity">
            The ZeldaEntity to initialize.
            </param>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="T:Zelda.Entities.PositionalSoundEmitter">
            <summary>
            Represents a <see cref="T:Zelda.Entities.SoundEmitter"/> that plays a <see cref="T:Atom.Fmod.Sound"/>
            that changes its volumne depending on the position of the current ZeldaCamera.
            </summary>
        </member>
        <member name="F:Zelda.Entities.PositionalSoundEmitter.SoundTag">
            <summary>
            The tag under which sounds used by the PositionalSoundEmitter are created. 
            </summary>
        </member>
        <member name="P:Zelda.Entities.PositionalSoundEmitter.MinimumDistance">
            <summary>
            Gets or sets the the minimum distance that the sound emitter
            will cease to continue growing louder at (as it approaches the listener).
            </summary>
        </member>
        <member name="P:Zelda.Entities.PositionalSoundEmitter.MaximumDistance">
            <summary>
            Gets or sets the maximum distance the sound stops attenuating at. 
            Beyond this point it will stay at the volume it would be at MaximumDistance units from the listener 
            and will not attenuate any more.
            </summary>
        </member>
        <member name="P:Zelda.Entities.PositionalSoundEmitter.PanLevel3D">
            <summary>
            Gets or sets how much the 3d engine has an effect on the sound emitter, versus that set by Channel::setPan, Channel::setSpeakerMix, Channel::setSpeakerLevels
            </summary>
            <value>
            1 = Sound pans and attenuates according to 3d position. 0 = Attenuation is ignored and pan/speaker levels are defined by Channel::setPan, Channel::setSpeakerMix, Channel::setSpeakerLevels.
            Default = 1 (all by 3D position). 
            </value>
        </member>
        <member name="M:Zelda.Entities.PositionalSoundEmitter.#ctor">
            <summary>
            Initializes a new instance of the PositionalSoundEmitter class.
            </summary>
        </member>
        <member name="M:Zelda.Entities.PositionalSoundEmitter.LoadSound(Atom.Fmod.Sound)">
            <summary>
            Loads the given Sound object, by default as a simple music file.
            </summary>
            <param name="sound">
            The sound object. Is never null.
            </param>
        </member>
        <member name="M:Zelda.Entities.PositionalSoundEmitter.CreateChannel(Atom.Fmod.Sound)">
            <summary>
            Creates a new Channel object of the given Sound object.
            </summary>
            <param name="sound">
            The sound object. Is never null.
            </param>
            <returns>
            The new channel.
            </returns>
        </member>
        <member name="M:Zelda.Entities.PositionalSoundEmitter.SetupChannel(Atom.Fmod.Channel)">
            <summary>
            Setups the given channel for playback.
            </summary>
            <param name="channel">
            The channel object. Is never null.
            </param>
        </member>
        <member name="M:Zelda.Entities.PositionalSoundEmitter.OnPositionChanged(System.Object,Atom.ChangedValue{Atom.Math.Vector2})">
            <summary>
            Called when the position of this SoundEntity has changed.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The Atom.ChangedValue{Atom.Math.Vector2} that contains the event data.</param>
        </member>
        <member name="M:Zelda.Entities.PositionalSoundEmitter.DrawEditMode(Zelda.ZeldaDrawContext)">
            <summary>
            Draws this <see cref="T:Zelda.Entities.PositionalSoundEmitter"/> in edit-mode.
            </summary>
            <param name="drawContext">
            The current ZeldaDrawContext.
            </param>
        </member>
        <member name="F:Zelda.Entities.PositionalSoundEmitter.minimumDistance">
            <summary>
            The storage field of the <see cref="P:Zelda.Entities.PositionalSoundEmitter.MinimumDistance"/> property.
            </summary>
        </member>
        <member name="F:Zelda.Entities.PositionalSoundEmitter.maximumDistance">
            <summary>
            The storage field of the <see cref="P:Zelda.Entities.PositionalSoundEmitter.MaximumDistance"/> property.
            </summary>
        </member>
        <member name="F:Zelda.Entities.PositionalSoundEmitter.panLevel3D">
            <summary>
            The storage field of the <see cref="P:Zelda.Entities.PositionalSoundEmitter.PanLevel3D"/> property.
            </summary>
        </member>
        <member name="T:Zelda.Entities.PositionalSoundEmitter.ReaderWriter">
            <summary>
            Defines the <see cref="T:Zelda.Entities.IEntityReaderWriter"/> for <see cref="T:Zelda.Entities.PositionalSoundEmitter"/> entities.
            </summary>
        </member>
        <member name="M:Zelda.Entities.PositionalSoundEmitter.ReaderWriter.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the ReaderWriter class.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services. 
            </param>
        </member>
        <member name="M:Zelda.Entities.PositionalSoundEmitter.ReaderWriter.Serialize(Zelda.Entities.PositionalSoundEmitter,Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the given object using the given <see cref="T:System.IO.BinaryWriter"/>.
            </summary>
            <param name="entity">
            The entity to serialize.
            </param>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.PositionalSoundEmitter.ReaderWriter.Deserialize(Zelda.Entities.PositionalSoundEmitter,Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data in the given <see cref="T:System.IO.BinaryWriter"/> to initialize
            the given ZeldaEntity.
            </summary>
            <param name="entity">
            The ZeldaEntity to initialize.
            </param>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="T:Zelda.Entities.ShotSoundEmitter">
            <summary>
            Represents a one-shot <see cref="P:Zelda.Entities.ShotSoundEmitter.Sound"/> effect that can be added to a <see cref="T:Zelda.ZeldaScene"/>.
            It doesn't keep track of it's active sound channel(s).
            </summary>
        </member>
        <member name="P:Zelda.Entities.ShotSoundEmitter.Sound">
            <summary>
            Gets or sets the <see cref="P:Zelda.Entities.ShotSoundEmitter.Sound"/> this SoundEntity is playing.
            </summary>
        </member>
        <member name="P:Zelda.Entities.ShotSoundEmitter.Volume">
            <summary>
            Gets or sets the range of volumnes the sound is playing at; 
            where 0 = silence and 1 = full effect.
            </summary>
        </member>
        <member name="P:Zelda.Entities.ShotSoundEmitter.IsLooping">
            <summary>
            Gets a value indicating whether the sound is looping.
            </summary>
        </member>
        <member name="P:Zelda.Entities.ShotSoundEmitter.TriggerPeriod">
            <summary>
            Gets or sets the range of time in seconds between two triggers of this ShotSoundEmitter.
            </summary>
        </member>
        <member name="M:Zelda.Entities.ShotSoundEmitter.#ctor">
            <summary>
            Initializes a new instance of the ShotSoundEmitter class.
            </summary>
        </member>
        <member name="M:Zelda.Entities.ShotSoundEmitter.Setup(Zelda.IZeldaServiceProvider)">
            <summary>
            Setups this ShotSoundEmitter.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Entities.ShotSoundEmitter.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this ShotSoundEmitter.
            </summary>
            <param name="updateContext">
            The current update context.
            </param>
        </member>
        <member name="M:Zelda.Entities.ShotSoundEmitter.Play">
            <summary>
            Triggers this ShotSoundEmitter.
            </summary>
        </member>
        <member name="M:Zelda.Entities.ShotSoundEmitter.LoadSound(Atom.Fmod.Sound)">
            <summary>
            Loads the given Sound object, by default as a simple music file.
            </summary>
            <param name="sound">
            The sound object. Is never null.
            </param>
        </member>
        <member name="M:Zelda.Entities.ShotSoundEmitter.CreateChannel(Atom.Fmod.Sound)">
            <summary>
            Creates a new Channel object of the given Sound object.
            </summary>
            <param name="sound">
            The sound object. Is never null.
            </param>
            <returns>
            The new channel.
            </returns>
        </member>
        <member name="M:Zelda.Entities.ShotSoundEmitter.SetupChannel(Atom.Fmod.Channel)">
            <summary>
            Setups the given channel for playback.
            </summary>
            <param name="channel">
            The channel object. Is never null.
            </param>
        </member>
        <member name="F:Zelda.Entities.ShotSoundEmitter.sound">
            <summary>
            The <see cref="P:Zelda.Entities.ShotSoundEmitter.Sound"/> this SoundEntity is playing.
            </summary>
        </member>
        <member name="F:Zelda.Entities.ShotSoundEmitter.rand">
            <summary>
            A random number generator. Used for the random elements of the ShotSoundEmitter.
            </summary>
        </member>
        <member name="T:Zelda.Entities.SoundEmitter">
            <summary>
            Represents a looping <see cref="P:Zelda.Entities.SoundEmitter.Sound"/> effect that can be added to a <see cref="T:Zelda.ZeldaScene"/>.
            </summary>
        </member>
        <member name="P:Zelda.Entities.SoundEmitter.Sound">
            <summary>
            Gets or sets the <see cref="P:Zelda.Entities.SoundEmitter.Sound"/> this SoundEntity is playing.
            </summary>
        </member>
        <member name="P:Zelda.Entities.SoundEmitter.Channel">
            <summary>
            Gets the current <see cref="P:Zelda.Entities.SoundEmitter.Channel"/> object.
            </summary>
        </member>
        <member name="P:Zelda.Entities.SoundEmitter.Volume">
            <summary>
            Gets or sets the volumne the sound is playing at; 
            where 0 = silence and 1 = full effect.
            </summary>
        </member>
        <member name="P:Zelda.Entities.SoundEmitter.Audibility">
            <summary>
            Gets the combined volume of the channel after 3d sound, volume 
            and channel group volume  calculations have been performed on it.  
            </summary>
        </member>
        <member name="P:Zelda.Entities.SoundEmitter.IsLooping">
            <summary>
            Gets a value indicating whether the sound is looping.
            </summary>
        </member>
        <member name="P:Zelda.Entities.SoundEmitter.IsMuted">
            <summary>
            Gets or sets a value indicating whether the SoundEmitter has been muted.
            </summary>
        </member>
        <member name="M:Zelda.Entities.SoundEmitter.OnSoundChangedInternal(Atom.Fmod.Sound)">
            <summary>
            Called when the current Sound has changed.
            </summary>
            <param name="sound">
            The new Sound value.
            </param>
        </member>
        <member name="M:Zelda.Entities.SoundEmitter.LoadSound(Atom.Fmod.Sound)">
            <summary>
            Loads the given Sound object, by default as a simple music file.
            </summary>
            <param name="sound">
            The sound object. Is never null.
            </param>
        </member>
        <member name="M:Zelda.Entities.SoundEmitter.OnSoundChanged(Atom.Fmod.Sound)">
            <summary>
            Called when the current Sound has changed.
            </summary>
            <param name="sound">
            The new Sound value.
            </param>
        </member>
        <member name="M:Zelda.Entities.SoundEmitter.CreateChannel(Atom.Fmod.Sound)">
            <summary>
            Creates a new Channel object of the given Sound object.
            </summary>
            <param name="sound">
            The sound object. Is never null.
            </param>
            <returns>
            The new channel.
            </returns>
        </member>
        <member name="M:Zelda.Entities.SoundEmitter.SetupChannel(Atom.Fmod.Channel)">
            <summary>
            Setups the given channel for playback.
            </summary>
            <param name="channel">
            The channel object. Is never null.
            </param>
        </member>
        <member name="M:Zelda.Entities.SoundEmitter.NotifySceneChange(Zelda.ChangeType)">
            <summary>
            Notifies this SoundEntity that a scene change has occured.
            </summary>
            <param name="changeType">
            States whether the current scene has changed away or to its current scene.
            </param>
        </member>
        <member name="M:Zelda.Entities.SoundEmitter.AddToScene(Zelda.ZeldaScene)">
            <summary>
            Called when this SoundEmitter gets added to the given Scene.
            </summary>
            <param name="scene">
            The related scene.
            </param>
        </member>
        <member name="M:Zelda.Entities.SoundEmitter.RemoveFromScene">
            <summary>
            Called when this SoundEmitter gets removed from its current Scene.
            </summary>
        </member>
        <member name="M:Zelda.Entities.SoundEmitter.OnVolumeChanged(System.Single)">
            <summary>
            Called when the value of the Volume property has changed.
            </summary>
        </member>
        <member name="F:Zelda.Entities.SoundEmitter.volumne">
            <summary>
            The volumne the sound is playing at; 
            where 0 = silence and 1 = full effect.
            </summary>
        </member>
        <member name="F:Zelda.Entities.SoundEmitter.isMuted">
            <summary>
            States whether the channel has been muted.
            </summary>
        </member>
        <member name="F:Zelda.Entities.SoundEmitter.sound">
            <summary>
            The <see cref="P:Zelda.Entities.SoundEmitter.Sound"/> this SoundEntity is playing.
            </summary>
        </member>
        <member name="F:Zelda.Entities.SoundEmitter.channel">
            <summary>
            The channel the sound is playing on.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Behaviours.BehaviourManager">
            <summary>
            The <see cref="T:Zelda.Entities.Behaviours.BehaviourManager"/> manages the creation of <see cref="T:Zelda.Entities.Behaviours.IEntityBehaviour"/>s.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Behaviours.BehaviourManager.KnownBehaviourNames">
            <summary>
            Gets a collection that contains the names of all known <see cref="T:Zelda.Entities.Behaviours.IEntityBehaviour"/>s.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Behaviours.BehaviourManager.KnownBehaviours">
            <summary>
            Gets a collection that contains the types of all known <see cref="T:Zelda.Entities.Behaviours.IEntityBehaviour"/>s.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.BehaviourManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Entities.Behaviours.BehaviourManager"/> class.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.BehaviourManager.LoadDefaults(Zelda.IZeldaServiceProvider)">
            <summary>
            Loads the default IEntityBehaviours into this BehaviourManager.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-services.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="serviceProvider"/> is null.
            </exception>
        </member>
        <member name="M:Zelda.Entities.Behaviours.BehaviourManager.GetBehaviourTemplate(System.String)">
            <summary>
            Gets the IEntityBehaviour template with the given name.
            </summary>
            <param name="name">
            The name of the behaviour.
            </param>
            <returns>
            The requested IEntityBehaviour.
            </returns>
        </member>
        <member name="M:Zelda.Entities.Behaviours.BehaviourManager.GetBehaviourClone(System.String,Atom.Components.Entity)">
            <summary>
            Receives a clone of the <see cref="T:Zelda.Entities.Behaviours.IEntityBehaviour"/> that has the given <paramref name="name"/>
            for the given <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
            <param name="name">
            The name of the <see cref="T:Zelda.Entities.Behaviours.IEntityBehaviour"/> to receive.
            </param>
            <param name="newOwner">
            The entity that should get controlled by the cloned IEntityBehaviour.
            </param>
            <returns>
            The newly cloned the <see cref="T:Zelda.Entities.Behaviours.IEntityBehaviour"/>.
            </returns>
        </member>
        <member name="M:Zelda.Entities.Behaviours.BehaviourManager.GetBehaviourClone(System.String,Zelda.Entities.ZeldaEntity)">
            <summary>
            Receives a clone of the <see cref="T:Zelda.Entities.Behaviours.IEntityBehaviour"/> that has the given <paramref name="name"/>
            for the given <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
            <param name="name">
            The name of the <see cref="T:Zelda.Entities.Behaviours.IEntityBehaviour"/> to receive.
            </param>
            <param name="newOwner">
            The entity that should get controlled by the cloned IEntityBehaviour.
            </param>
            <returns>
            The newly cloned the <see cref="T:Zelda.Entities.Behaviours.IEntityBehaviour"/>.
            </returns>
        </member>
        <member name="M:Zelda.Entities.Behaviours.BehaviourManager.GetBehaviourClone(System.Type,Zelda.Entities.ZeldaEntity)">
            <summary>
            Receives a clone of the <see cref="T:Zelda.Entities.Behaviours.IEntityBehaviour"/> of the given <paramref name="type"/>
            for the given <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
            <param name="type">
            The type of the <see cref="T:Zelda.Entities.Behaviours.IEntityBehaviour"/> to receive.
            </param>
            <param name="newOwner">
            The entity that should get controlled by the cloned IEntityBehaviour.
            </param>
            <returns>
            The newly cloned the <see cref="T:Zelda.Entities.Behaviours.IEntityBehaviour"/>.
            </returns>
        </member>
        <member name="M:Zelda.Entities.Behaviours.BehaviourManager.GetName(Zelda.Entities.Behaviours.IEntityBehaviour)">
            <summary>
            Utility method that returns the name that identifies the given <see cref="T:Zelda.Entities.Behaviours.IEntityBehaviour"/>.
            </summary>
            <param name="entityBehaviour">The IEntityBehaviour to receive the name for.</param>
            <returns>The name that identifies the IEntityBehaviour.</returns>
        </member>
        <member name="M:Zelda.Entities.Behaviours.BehaviourManager.GetName(System.Type)">
            <summary>
            Utility method that returns the name that identifies the <see cref="T:Zelda.Entities.Behaviours.IEntityBehaviour"/> of the given <paramref name="type"/>.
            </summary>
            <param name="type">The type of the IEntityBehaviour to receive the name for.</param>
            <returns>The name that identifies the IEntityBehaviour.</returns>
        </member>
        <member name="M:Zelda.Entities.Behaviours.BehaviourManager.Register(Zelda.Entities.Behaviours.IEntityBehaviour)">
            <summary>
            Utility method that registers the given IEntityBehaviour.
            </summary>
            <param name="behaviour">
            The IEntityBehaviour to register.
            </param>
        </member>
        <member name="F:Zelda.Entities.Behaviours.BehaviourManager.dict">
            <summary>
            The dictionary that stores the known <see cref="T:Zelda.Entities.Behaviours.IEntityBehaviour"/> implementations, sorted by name.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Behaviours.Bosses.HellChicken.HellChickenBossBehaviour">
            <summary>
            Defines the IEntityBehaviour of the hell chicken boss.
            </summary>
            <remarks>
            The main mechanic of this boss is that he changes 'polarity' every
            ~10 seconds. Adds are spawned on the change.
            <seealso cref="T:Zelda.Entities.Behaviours.Bosses.HellChicken.BossPolarity"/>
            </remarks>
        </member>
        <member name="F:Zelda.Entities.Behaviours.Bosses.HellChicken.HellChickenBossBehaviour.BossMusicName">
            <summary>
            The name of the background music resource
            that is playing when the players fights the boss.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.Bosses.HellChicken.HellChickenBossBehaviour.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Entities.Behaviours.Bosses.HellChicken.HellChickenBossBehaviour"/> class.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.Bosses.HellChicken.HellChickenBossBehaviour.#ctor(Zelda.Entities.Enemy,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Entities.Behaviours.Bosses.HellChicken.HellChickenBossBehaviour"/> class.
            </summary>
            <param name="enemy">
            The entity that is controlled by the new HellChickenBossBehaviour.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="enemy"/> is null.
            </exception>
        </member>
        <member name="M:Zelda.Entities.Behaviours.Bosses.HellChicken.HellChickenBossBehaviour.HookBossEvents">
            <summary>
            Hooks up the events of this HellChickenBossBehaviour.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.Bosses.HellChicken.HellChickenBossBehaviour.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this HellChickenBossBehaviour.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.Bosses.HellChicken.HellChickenBossBehaviour.PlayBossMusic">
            <summary>
            Plays the background music of the boss fight.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.Bosses.HellChicken.HellChickenBossBehaviour.PlayNormalMusicAgain">
            <summary>
            Tells the game to start playing normal music again.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.Bosses.HellChicken.HellChickenBossBehaviour.OnStateChanged(Zelda.Entities.Behaviours.MeleeEnemyBehaviour.BehaviourState,Zelda.Entities.Behaviours.MeleeEnemyBehaviour.BehaviourState)">
            <summary>
            Gets called when the BehaviourState of this StoneTombsBossBehaviour
            has changed.
            </summary>
            <param name="oldState">
            The old BehaviourState of the boss.
            </param>
            <param name="newState">
            The new BehaviourState of the boss.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.Bosses.HellChicken.HellChickenBossBehaviour.ChangeToDarkLight">
            <summary>
            Darkens the ambient light of the scene.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.Bosses.HellChicken.HellChickenBossBehaviour.ChangeToBrightLight">
            <summary>
            Lightens the ambient light of the scene.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.Bosses.HellChicken.HellChickenBossBehaviour.HookEvents">
            <summary>
            Hooks up extra events when the boss is starting to chase the player.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.Bosses.HellChicken.HellChickenBossBehaviour.UnhookEvents">
            <summary>
            Unhooks the extra events when the boss is starting to wander again.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.Bosses.HellChicken.HellChickenBossBehaviour.OnPlayerDied(Zelda.Status.Statable)">
            <summary>
            Gets called when the player has died.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.Bosses.HellChicken.HellChickenBossBehaviour.FullyHealUpBoss">
            <summary>
            Fully heals up the boss. Happens when the player dies.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.Bosses.HellChicken.HellChickenBossBehaviour.OnBossAttacked(System.Object,Zelda.Entities.Components.AttackEventArgs)">
            <summary>
            Gets called when the player has attacked the boss.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
            <param name="e">
            The AttackedEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.Bosses.HellChicken.HellChickenBossBehaviour.OnBossDied(Zelda.Status.Statable)">
            <summary>
            Gets called when the player managed to defeat the boss.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.Bosses.HellChicken.HellChickenBossBehaviour.Clone(Zelda.Entities.ZeldaEntity)">
            <summary>
            Returns a clone of this HellChickenBossBehaviour.
            </summary>
            <param name="newOwner">
            The owner of the cloned HellChickenBossBehaviour.
            </param>
            <returns>
            The cloned IEntityBehaviour.
            </returns>
        </member>
        <member name="F:Zelda.Entities.Behaviours.Bosses.HellChicken.HellChickenBossBehaviour.polarityBehaviour">
            <summary>
            Controls the polarity behaviour of the hell chicken boss.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.Bosses.HellChicken.HellChickenBossBehaviour.spawnAddsBehaviour">
            <summary>
            Controls how additional adds spawn when the polarity of the boss changes.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.Bosses.HellChicken.HellChickenBossBehaviour.increaseSizeBehaviour">
            <summary>
            Controls how the boss increases in size when the polarity of the boss changes.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.Bosses.HellChicken.HellChickenBossBehaviour.boss">
            <summary>
            Identifies the Enemy entity that goes after the player.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.Bosses.HellChicken.HellChickenBossBehaviour.ingameState">
            <summary>
            Identifies the ingame state.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.Bosses.HellChicken.HellChickenBossBehaviour.serviceProvider">
            <summary>
            Provides fast access to game-related services.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Behaviours.Bosses.HellChicken.IncreaseSizeAndStrengthOnPolarityChangeBehaviour">
            <summary>
            Defines the behaviour that increases the size of the Chicken Hell
            boss when he changes polarity.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.Bosses.HellChicken.IncreaseSizeAndStrengthOnPolarityChangeBehaviour.ScaleIncrease">
            <summary>
            The amount the scaling factor increases when the polarity changes.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.Bosses.HellChicken.IncreaseSizeAndStrengthOnPolarityChangeBehaviour.DamageIncrease">
            <summary>
            The amount of damage the boss does additionaly when his polarity changes.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.Bosses.HellChicken.IncreaseSizeAndStrengthOnPolarityChangeBehaviour.#ctor(Zelda.Entities.Behaviours.Bosses.HellChicken.PolarityBehaviour,Zelda.Entities.Enemy)">
            <summary>
            Initializes a new instance of the IncreaseSizeAndStrengthOnPolarityChangeBehaviour class.
            </summary>
            <param name="polarityBehaviour">
            The PolarityBehaviour to hook onto.
            </param>
            <param name="boss">
            The boss that is controlled by this IncreaseSizeAndStrengthOnPolarityChangeBehaviour.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.Bosses.HellChicken.IncreaseSizeAndStrengthOnPolarityChangeBehaviour.OnPolarityChanged(System.Object,System.EventArgs)">
            <summary>
            Called when the polarity of the boss has changed.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The EventArgs that contain the event data.</param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.Bosses.HellChicken.IncreaseSizeAndStrengthOnPolarityChangeBehaviour.ShouldStillIncreaseSize">
            <summary>
            Gets a value indicating whether the boss should still increase in size.
            </summary>
            <returns>
            true if the boss hasn't reached the size limit yet; 
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Entities.Behaviours.Bosses.HellChicken.IncreaseSizeAndStrengthOnPolarityChangeBehaviour.Reset">
            <summary>
            Resets the increased strength and size of the boss.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.Bosses.HellChicken.IncreaseSizeAndStrengthOnPolarityChangeBehaviour.initialDamage">
            <summary>
            Stores the initial damage of the boss.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.Bosses.HellChicken.IncreaseSizeAndStrengthOnPolarityChangeBehaviour.boss">
            <summary>
            The boss that is controlled by this SpawnAddsOnPolarityChangeBehaviour.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Behaviours.Bosses.HellChicken.BossPolarity">
            <summary>
            Represents a polarity of the Chicken Hell boss.
            </summary>
            <remarks>
            If the boss changes to a specific polarity then
            he takes extra damage towards that polarity.
            </remarks>
        </member>
        <member name="P:Zelda.Entities.Behaviours.Bosses.HellChicken.BossPolarity.Color">
            <summary>
            Gets the color of this BossPolarity.
            </summary>
            <remarks>Used for tinting the boss.</remarks>
        </member>
        <member name="P:Zelda.Entities.Behaviours.Bosses.HellChicken.BossPolarity.Boss">
            <summary>
            Gets the hell-chicken boss object that owns this BossPolarity.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.Bosses.HellChicken.BossPolarity.#ctor(Atom.Math.Vector4,Zelda.Status.PermanentAura,Zelda.Entities.Enemy)">
            <summary>
            Initializes a new instance of the BossPolarity class.
            </summary>
            <param name="color">
            The color of the new BossPolarity.
            </param>
            <param name="aura">
            The effect the new BossPolarity has on the boss.
            </param>
            <param name="boss">
            Identifies the hell-chicken boss object that owns the new BossPolarity.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.Bosses.HellChicken.BossPolarity.Enable">
            <summary>
            Enables this BossPolarity.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.Bosses.HellChicken.BossPolarity.Disable">
            <summary>
            Disables this BossPolarity.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.Bosses.HellChicken.BossPolarity.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this BossPolarity.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="F:Zelda.Entities.Behaviours.Bosses.HellChicken.BossPolarity.color">
            <summary>
            The color of this BossPolarity.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.Bosses.HellChicken.BossPolarity.boss">
            <summary>
            Identifies the hell-chicken boss object that owns this BossPolarity.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.Bosses.HellChicken.BossPolarity.aura">
            <summary>
            The effect the BossPolarity has on the boss.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Behaviours.Bosses.HellChicken.FirePolarity">
            <summary>
            During the FirePolarity the hell-chicken boss takes increased fire damage
            and randomly spawns fire below him.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.Bosses.HellChicken.FirePolarity.DurationBetweenFires">
            <summary>
            The time in seconds between two fires are spawned under the boss.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.Bosses.HellChicken.FirePolarity.FireTemplateName">
            <summary>
            The name of the entity template that is used to create the Fire entities.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.Bosses.HellChicken.FirePolarity.#ctor(Zelda.IZeldaServiceProvider,Zelda.Entities.Enemy)">
            <summary>
            Initializes a new instance of the FirePolarity class.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
            <param name="boss">
            Identifies the hell-chicken boss object that owns the new FirePolarity.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.Bosses.HellChicken.FirePolarity.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this FirePolarity
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.Bosses.HellChicken.FirePolarity.SpawnFire">
            <summary>
            Spawns a new fire under the boss.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.Bosses.HellChicken.FirePolarity.timeLeftUntilNewFireSpawned">
            <summary>
            The time left until a fire is spawned under the boss.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.Bosses.HellChicken.FirePolarity.rand">
            <summary>
            A random number generator.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.Bosses.HellChicken.FirePolarity.offsetFromBossCenter">
            <summary>
            The offset that is applied to the boss center to get the spawn position of the fire.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.Bosses.HellChicken.FirePolarity.fireTemplate">
            <summary>
            The template from which the fire entities are created.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Behaviours.Bosses.HellChicken.LightPolarity">
            <summary>
            During the LightPolarity the hell-chicken boss takes increased fire damage
            and randomly spawns fire below him.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.Bosses.HellChicken.LightPolarity.MaximumBoltLength">
            <summary>
            States the maximum length the lightning bolts reach.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.Bosses.HellChicken.LightPolarity.LightDamageRange">
            <summary>
            The damage the lightning bolts are doing.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.Bosses.HellChicken.LightPolarity.TimeUntilSparkFullySized">
            <summary>
            The time it takes for the lightning sparks to fully extract.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.Bosses.HellChicken.LightPolarity.TimeToReactForSpawn">
            <summary>
            The time the player has before the spark spawns after entering this polarity.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Behaviours.Bosses.HellChicken.LightPolarity.SparkRotationMode">
            <summary>
            Enumerates the various rotation modes of the spark.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Behaviours.Bosses.HellChicken.LightPolarity.SparkRotation">
            <summary>
            Sets the current rotation factor.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.Bosses.HellChicken.LightPolarity.RotateMode">
            <summary>
            Changes to the next SparkRotationMode.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.Bosses.HellChicken.LightPolarity.#ctor(Zelda.IZeldaServiceProvider,Zelda.Entities.Enemy)">
            <summary>
            Initializes a new instance of the LightPolarity class.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
            <param name="boss">
            Identifies the hell-chicken boss object that owns the new LightPolarity.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.Bosses.HellChicken.LightPolarity.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this LightPolarity
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.Bosses.HellChicken.LightPolarity.UpdateSparkTransform">
            <summary>
            Refreshes the transform of the spark that is attached to the boss.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.Bosses.HellChicken.LightPolarity.Enable">
            <summary>
            Enables this BossPolarity.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.Bosses.HellChicken.LightPolarity.Disable">
            <summary>
            Disables this BossPolarity.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.Bosses.HellChicken.LightPolarity.mode">
            <summary>
            The current rotation mode of the spark.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.Bosses.HellChicken.LightPolarity.currentMaximumBoltLength">
            <summary>
            Stores the current maximum bolt length. Changes on every activation.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.Bosses.HellChicken.LightPolarity.spawnTimer">
            <summary>
            The timer that is used to allow the player to back-off the lightning.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.Bosses.HellChicken.LightPolarity.lengthTimer">
            <summary>
            The timer that is used to interpolate the maximum length of the spark.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.Bosses.HellChicken.LightPolarity.spark">
            <summary>
            The spark that is spawned in this phase.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.Bosses.HellChicken.LightPolarity.rand">
            <summary>
            A random number generator.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Behaviours.Bosses.HellChicken.MagicalPolarity">
            <summary>
            Represent a BossPolarity that increases damage taken of the boss
            towards a specific element.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.Bosses.HellChicken.MagicalPolarity.ElementalDamageTakenIncrease">
            <summary>
            The damage taken increase the boss takes against the elemental school
            of the MagicalPolarity while the MagicalPolarity is active, in percent.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.Bosses.HellChicken.MagicalPolarity.#ctor(Atom.Math.Vector4,Zelda.Status.ElementalSchool,Zelda.Entities.Enemy)">
            <summary>
            Initializes a new instance of the MagicalPolarity class.
            </summary>
            <param name="color">
            The color of the new MagicalPolarity.
            </param>
            <param name="school">
            The elemental school of the new MagicalPolarity.
            </param>
            <param name="boss">
            Identifies the hell-chicken boss object that owns the new MagicalPolarity.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.Bosses.HellChicken.MagicalPolarity.CreateAura(Zelda.Status.ElementalSchool)">
            <summary>
            Creates the effect that is applied when the boss changes
            into a magical polarity.
            </summary>
            <param name="elementalSchool">
            The school of the magical polarity.
            </param>
            <returns>
            A new PermanentAura that encapsulates the effect.
            </returns>
        </member>
        <member name="T:Zelda.Entities.Behaviours.Bosses.HellChicken.NaturePolarity">
            <summary>
            During the NaturePolarity the hell-chicken boss takes increased fire damage
            and randomly spawns poison clouds around him.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.Bosses.HellChicken.NaturePolarity.SpawnCount">
            <summary>
            The number of poison clouds that should spawn.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.Bosses.HellChicken.NaturePolarity.SpawnRange">
            <summary>
            The range, starting at the boss at which the poison clouds should spawn.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.Bosses.HellChicken.NaturePolarity.PoisonDamageRange">
            <summary>
            The damage the poison clouds are doing.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.Bosses.HellChicken.NaturePolarity.TimeBetweenAdditionalPoisonClouds">
            <summary>
            The time between additional Poison Cloud spawns.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.Bosses.HellChicken.NaturePolarity.#ctor(Zelda.IZeldaServiceProvider,Zelda.Entities.Enemy)">
            <summary>
            Initializes a new instance of the NaturePolarity class.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
            <param name="boss">
            Identifies the hell-chicken boss object that owns the new NaturePolarity.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.Bosses.HellChicken.NaturePolarity.Enable">
            <summary>
            Called when this NaturePolarity gets enabled.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.Bosses.HellChicken.NaturePolarity.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this NaturePolarity.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.Bosses.HellChicken.NaturePolarity.SpawnPoisonCloud">
            <summary>
            Spawns a poison cloud somewhere around the boss.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.Bosses.HellChicken.NaturePolarity.GetRandomPoisonCloudSpawnPosition">
            <summary>
            Gets a position somewhere around the boss, at which the poison cloud should be spawned.
            </summary>
            <returns>
            A random position.
            </returns>
        </member>
        <member name="F:Zelda.Entities.Behaviours.Bosses.HellChicken.NaturePolarity.timeLeftUntilPoisonCloud">
            <summary>
            The time left in seconds until an additional Poison Cloud is spawned.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.Bosses.HellChicken.NaturePolarity.rand">
            <summary>
            A random number generator.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.Bosses.HellChicken.NaturePolarity.poisonCloudSpell">
            <summary>
            The spell responsible for creating Poison Clouds.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Behaviours.Bosses.HellChicken.PolarityBehaviour">
            <summary>
            Encapsulates the polarity behaviour of the Hell Chicken Boss.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.Bosses.HellChicken.PolarityBehaviour.TintInterpolationDuration">
            <summary>
            The time it takes for the tinting effect to fully interpolate.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.Bosses.HellChicken.PolarityBehaviour.TimeBetweenPolarityChanges">
            <summary>
            The time between two polarity changes.
            </summary>
        </member>
        <member name="E:Zelda.Entities.Behaviours.Bosses.HellChicken.PolarityBehaviour.PolarityChanged">
            <summary>
            Raised when the current BossPolarity has changed.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.Bosses.HellChicken.PolarityBehaviour.#ctor(Zelda.Entities.Enemy,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the PolarityBehaviour class.
            </summary>
            <param name="boss">
            The boss whose polarity is modifies by the new PolarityBehaviour.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.Bosses.HellChicken.PolarityBehaviour.CreatePolarities(Zelda.IZeldaServiceProvider)">
            <summary>
            Creates all polarities the chicken boss might change to.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
            <returns>
            A new array of polarities.
            </returns>
        </member>
        <member name="M:Zelda.Entities.Behaviours.Bosses.HellChicken.PolarityBehaviour.CreateGhostPolarity">
            <summary>
            Creates the ghost BossPolarity.
            </summary>
            <returns>
            A newly created BossPolarity instance.
            </returns>
        </member>
        <member name="M:Zelda.Entities.Behaviours.Bosses.HellChicken.PolarityBehaviour.CreateGhostPolarityEffect">
            <summary>
            Creates the effect the Ghost BossPolarity applies.
            </summary>
            <returns>
            A newly created PermanentAura that gets applied to
            the boss when he changes to the Ghost Polarity.
            </returns>
        </member>
        <member name="M:Zelda.Entities.Behaviours.Bosses.HellChicken.PolarityBehaviour.CreatePhysicalPolarityEffect">
            <summary>
            Creates the effect that is applied when the boss changes
            into a physical polarity.
            </summary>
            <returns>
            A new PermanentAura that encapsulates the effect.
            </returns>
        </member>
        <member name="M:Zelda.Entities.Behaviours.Bosses.HellChicken.PolarityBehaviour.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this PolarityBehaviour.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.Bosses.HellChicken.PolarityBehaviour.ChangePolarity">
            <summary>
            Randomly changes to a -different- polarity.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.Bosses.HellChicken.PolarityBehaviour.GetRandomDifferentPolarity">
            <summary>
            Randomly returns one of the BossPolarities; that is different
            compared to the current BossPolarity.
            </summary>
            <returns>
            A random, but different, BossPolarity.
            </returns>
        </member>
        <member name="M:Zelda.Entities.Behaviours.Bosses.HellChicken.PolarityBehaviour.ChangeToPolarity(Zelda.Entities.Behaviours.Bosses.HellChicken.BossPolarity)">
            <summary>
            Changes to the specified BossPolarity.
            </summary>
            <param name="polarity">
            The polarity to change to. Might not be null.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.Bosses.HellChicken.PolarityBehaviour.ModifyColorTintOnPolarityChange(Zelda.Entities.Behaviours.Bosses.HellChicken.BossPolarity)">
            <summary>
            Modifies the IColorTint that is applied to visually show the
            new polarity.
            </summary>
            <param name="polarity">
            The new BossPolarity.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.Bosses.HellChicken.PolarityBehaviour.AddColorTintToBoss">
            <summary>
            Adds the IColorTint that visualuzes the current polarity to the boss.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.Bosses.HellChicken.PolarityBehaviour.GetInitialPolarityTintColor">
            <summary>
            Gets the initial polarity of the polarityChangeTint; taken
            into account when changing to a new BossPolarity.
            </summary>
            <returns>
            The initial polarity.
            </returns>
        </member>
        <member name="M:Zelda.Entities.Behaviours.Bosses.HellChicken.PolarityBehaviour.DisableOldAndEnableNewPolarityEffect(Zelda.Entities.Behaviours.Bosses.HellChicken.BossPolarity)">
            <summary>
            Disables the effect of the current polarity and applies the effect
            of the new polarity.
            </summary>
            <param name="polarity">
            The new BossPolarity.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.Bosses.HellChicken.PolarityBehaviour.ResetPolarity">
            <summary>
            Resets the current polarity of the boss to the default.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.Bosses.HellChicken.PolarityBehaviour.GetDefaultPolarity">
            <summary>
            Gets the default BossPolarity.
            </summary>
            <returns>
            The default BossPolarity instance.
            </returns>
        </member>
        <member name="F:Zelda.Entities.Behaviours.Bosses.HellChicken.PolarityBehaviour.currentPolarity">
            <summary>
            The current polarity of the boss.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.Bosses.HellChicken.PolarityBehaviour.timeLeftUntilPolarityChange">
            <summary>
            Stores the time that is left until the new polarity change.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.Bosses.HellChicken.PolarityBehaviour.tintHasBeenAdded">
            <summary>
            States whether the IColorTint that visualuzes the polarity of this boss has been added.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.Bosses.HellChicken.PolarityBehaviour.polarities">
            <summary>
            The list of all polarities the boss can possibly change to.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.Bosses.HellChicken.PolarityBehaviour.polarityChangeTint">
            <summary>
            The IColorTint that is used to tint the boss for the current polarity.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.Bosses.HellChicken.PolarityBehaviour.boss">
            <summary>
            Identifies the boss whose polarity is controlled by this PolarityBehaviour.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.Bosses.HellChicken.PolarityBehaviour.rand">
            <summary>
            A random number generator.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Behaviours.Bosses.HellChicken.SpawnAddsOnPolarityChangeBehaviour">
            <summary>
            Defines the behaviour that spawns additional adds when the Chicken Hell
            boss changes polarity.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.Bosses.HellChicken.SpawnAddsOnPolarityChangeBehaviour.SpiderTemplateName">
            <summary>
            The template name of the spider adds to spawn.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.Bosses.HellChicken.SpawnAddsOnPolarityChangeBehaviour.AddsToSpawn">
            <summary>
            States how many adds might spawn when the polarity changes.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.Bosses.HellChicken.SpawnAddsOnPolarityChangeBehaviour.#ctor(Zelda.Entities.Behaviours.Bosses.HellChicken.PolarityBehaviour,Zelda.Entities.Enemy,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the SpawnAddsOnPolarityChangeBehaviour class.
            </summary>
            <param name="polarityBehaviour">
            The PolarityBehaviour to hook onto.
            </param>
            <param name="boss">
            The boss that is controlled by this SpawnAddsOnPolarityChangeBehaviour.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related servies.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.Bosses.HellChicken.SpawnAddsOnPolarityChangeBehaviour.DespawnAll">
            <summary>
            Despawns all adds that have been spawned by the boss.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.Bosses.HellChicken.SpawnAddsOnPolarityChangeBehaviour.OnPolarityChanged(System.Object,System.EventArgs)">
            <summary>
            Called when the polarity of the boss has changed.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The EventArgs that contain the event data.</param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.Bosses.HellChicken.SpawnAddsOnPolarityChangeBehaviour.SpawnAdd(Zelda.Entities.ZeldaEntity)">
            <summary>
            Spawns an add under the boss using the specified EntityTemplate.
            </summary>
            <param name="template">
            The template of the add to spawn.
            </param>
        </member>
        <member name="F:Zelda.Entities.Behaviours.Bosses.HellChicken.SpawnAddsOnPolarityChangeBehaviour.boss">
            <summary>
            The boss that is controlled by this SpawnAddsOnPolarityChangeBehaviour.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.Bosses.HellChicken.SpawnAddsOnPolarityChangeBehaviour.spiderTemplate">
            <summary>
            The template that is used to create spider adds.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.Bosses.HellChicken.SpawnAddsOnPolarityChangeBehaviour.rand">
            <summary>
            A random number generator.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Behaviours.Bosses.StoneTombsBossBehaviour">
            <summary>
            Represents the behaviour script of the end boss of the Family Stone Tombs.
            </summary>
            <remarks>
            As the player fights the boss enemies randomly spawn in the boss room.
            </remarks>
        </member>
        <member name="F:Zelda.Entities.Behaviours.Bosses.StoneTombsBossBehaviour.WaveTime">
            <summary>
            The time until the first enemy wave.
            The time between the other waves is also based on the WaveTime.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.Bosses.StoneTombsBossBehaviour.BossMusicName">
            <summary>
            The name of the background music resource
            that is playing when the players fights the boss.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.Bosses.StoneTombsBossBehaviour.ShadowTailDamageRange">
            <summary>
            The variable shadow damage of the fire tail attack.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.Bosses.StoneTombsBossBehaviour.ShadowExplosionDamageRange">
            <summary>
            The variable shadow damage of the explosion part of the fire tail attack.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.Bosses.StoneTombsBossBehaviour.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Entities.Behaviours.Bosses.StoneTombsBossBehaviour"/> class.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.Bosses.StoneTombsBossBehaviour.#ctor(Zelda.Entities.Enemy,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Entities.Behaviours.Bosses.StoneTombsBossBehaviour"/> class.
            </summary>
            <param name="enemy">
            The entity that is controlled by the new StoneTombsBossBehaviour.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="enemy"/> is null.
            </exception>
        </member>
        <member name="M:Zelda.Entities.Behaviours.Bosses.StoneTombsBossBehaviour.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this StoneTombsBossBehaviour.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.Bosses.StoneTombsBossBehaviour.GetRandomSpawnPoint">
            <summary>
            Randomly gets one of the ISpawnPoint used in this boss fight
            to spawn enemy waves on.
            </summary>
            <returns>
            A ISpawnPoint.
            </returns>
        </member>
        <member name="M:Zelda.Entities.Behaviours.Bosses.StoneTombsBossBehaviour.SpawnWave">
            <summary>
            Spawns the next wave on enemies.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.Bosses.StoneTombsBossBehaviour.PlayBossMusic">
            <summary>
            Plays the background music of the boss fight.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.Bosses.StoneTombsBossBehaviour.EnableEnrage">
            <summary>
            Applies the enrage effect to the boss.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.Bosses.StoneTombsBossBehaviour.OnStateChanged(System.Object,System.EventArgs)">
            <summary>
            Gets called when the BehaviourState of this StoneTombsBossBehaviour
            has changed.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
            <param name="e">
            The EventArgs that contains the event data.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.Bosses.StoneTombsBossBehaviour.OnBossAttacked(System.Object,Zelda.Entities.Components.AttackEventArgs)">
            <summary>
            Gets called when the player has attacked the boss.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
            <param name="e">
            The AttackedEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.Bosses.StoneTombsBossBehaviour.OnBossDied(Zelda.Status.Statable)">
            <summary>
            Gets called when the player managed to defeat the boss.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.Bosses.StoneTombsBossBehaviour.Clone(Zelda.Entities.ZeldaEntity)">
            <summary>
            Returns a clone of this <see cref="T:Zelda.Entities.Behaviours.Bosses.StoneTombsBossBehaviour"/>
            for the given <see cref="T:Zelda.Entities.Enemy"/> entity.
            </summary>
            <param name="newOwner">
            The entity that wants to be controlled by the newly cloned IEntityBehaviour.
            </param>
            <returns>The cloned IEntityBehaviour.</returns>
        </member>
        <member name="F:Zelda.Entities.Behaviours.Bosses.StoneTombsBossBehaviour.isEnraged">
            <summary>
            States whether the boss is currently enraged; %lt; 25% Hp.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.Bosses.StoneTombsBossBehaviour.waveCount">
            <summary>
            The number of enemy waves that have been spawned.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.Bosses.StoneTombsBossBehaviour.timeLeftNextWave">
            <summary>
            The time left until the next enemy wave spawns.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.Bosses.StoneTombsBossBehaviour.boss">
            <summary>
            Identifies the Enemy entity that goes after the player.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.Bosses.StoneTombsBossBehaviour.ingameState">
            <summary>
            Identifies the IIngameState object.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.Bosses.StoneTombsBossBehaviour.enrageAura">
            <summary>
            The aura that gets activated when the boss reaches 25% or less HP.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.Bosses.StoneTombsBossBehaviour.secondaryEnrageAura">
            <summary>
            The aura that gets activated when the boss reaches 25% or less HP.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.Bosses.StoneTombsBossBehaviour.serviceProvider">
            <summary>
            Provides fast access to game-related services.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Behaviours.Design.BehaviourEditor">
            <summary>
            Implements an UITypeEditor that allows the creation of
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.Design.BehaviourEditor.CreateObject(System.Type)">
            <summary>
            Creates an instance of the object of the given selected <see cref="T:System.Type"/>.
            </summary>
            <param name="type">
            The type that has been selected by the user.
            </param>
            <returns>
            The newly created object.
            </returns>
        </member>
        <member name="M:Zelda.Entities.Behaviours.Design.BehaviourEditor.GetTypes">
            <summary>
            Gets the types that the user can select in this BehaviourEditor.
            </summary>
            <returns>
            The types the user can select.
            </returns>
        </member>
        <member name="T:Zelda.Entities.Behaviours.DespawnAfterAnimationEndedBehaviour">
            <summary>
            Defines an IEntityBehaviour that despawns the entity that it controls
            after a fixed amount of time.
            </summary>
            <seealso cref="T:Zelda.Entities.Drawing.IAnimatedDrawDataAndStrategy"/>
        </member>
        <member name="P:Zelda.Entities.Behaviours.DespawnAfterAnimationEndedBehaviour.IsActive">
            <summary>
            Gets a value indicating whether this <see cref="T:Zelda.Entities.Behaviours.IEntityBehaviour"/> is currently active.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Behaviours.DespawnAfterAnimationEndedBehaviour.FadeOutTime">
            <summary>
            Gets or sets the time the entity is fading out before beeing removed
            from the scene while despawning.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.DespawnAfterAnimationEndedBehaviour.#ctor">
            <summary>
            Initializes a new instance of the DespawnAfterAnimationEndedBehaviour class.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.DespawnAfterAnimationEndedBehaviour.#ctor(Zelda.Entities.ZeldaEntity)">
            <summary>
            Initializes a new instance of the DespawnAfterAnimationEndedBehaviour class.
            </summary>
            <param name="entity">
            The entity that should be despawned.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.DespawnAfterAnimationEndedBehaviour.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this DespawnAfterAnimationEndedBehaviour.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.DespawnAfterAnimationEndedBehaviour.DespawnEntity">
            <summary>
            Despawn the entity that is controlled by this DespawnAfterAnimationEndedBehaviour.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.DespawnAfterAnimationEndedBehaviour.Enter">
            <summary>
            Called when an entity enters this <see cref="T:Zelda.Entities.Behaviours.IEntityBehaviour"/>.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.DespawnAfterAnimationEndedBehaviour.OnAnimation_ReachedEnd(Atom.Xna.SpriteAnimation)">
            <summary>
            Called when the current hooked-up animation has ended.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.DespawnAfterAnimationEndedBehaviour.Leave">
            <summary>
            Called when an entity leaves this <see cref="T:Zelda.Entities.Behaviours.IEntityBehaviour"/>.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.DespawnAfterAnimationEndedBehaviour.Reset">
            <summary>
            Reset this <see cref="T:Zelda.Entities.Behaviours.IEntityBehaviour"/> to its original state.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.DespawnAfterAnimationEndedBehaviour.Clone(Zelda.Entities.ZeldaEntity)">
            <summary>
            Returns a clone of this DespawnAfterAnimationEndedBehaviour.
            </summary>
            <param name="newOwner">
            The ZeldaEntity that should be controlled by the cloned IEntityBehaviour.
            </param>
            <returns>
            The cloned IEntityBehaviour.
            </returns>
        </member>
        <member name="M:Zelda.Entities.Behaviours.DespawnAfterAnimationEndedBehaviour.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.DespawnAfterAnimationEndedBehaviour.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Entities.Behaviours.DespawnAfterAnimationEndedBehaviour.animation">
            <summary>
            The animation that currently is followed.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.DespawnAfterAnimationEndedBehaviour.isDespawning">
            <summary>
            States whether this DespawnAfterAnimationEndedBehaviour is despawning the entity currently.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.DespawnAfterAnimationEndedBehaviour.fadeOutTime">
            <summary>
            The time it should take for the entity to fade out when despawning.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.DespawnAfterAnimationEndedBehaviour.entity">
            <summary>
            The ZeldaEntity that should be despawned by this DespawnAfterAnimationEndedBehaviour.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Behaviours.DespawnAfterBehaviour">
            <summary>
            Defines an IEntityBehaviour that despawns the entity that it controls
            after a fixed amount of time.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Behaviours.DespawnAfterBehaviour.IsActive">
            <summary>
            Gets a value indicating whether this <see cref="T:Zelda.Entities.Behaviours.IEntityBehaviour"/> is currently active.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Behaviours.DespawnAfterBehaviour.Duration">
            <summary>
            Gets or sets the duration for the entity to despawn after entering this behaviour.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.DespawnAfterBehaviour.#ctor(Atom.Math.IRand)">
            <summary>
            Initializes a new instance of the DespawnAfterBehaviour class.
            </summary>
            <param name="rand">
            A random number generator.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.DespawnAfterBehaviour.#ctor(Zelda.Entities.ZeldaEntity,Atom.Math.IRand)">
            <summary>
            Initializes a new instance of the DespawnAfterBehaviour class.
            </summary>
            <param name="entity">
            The entity that should be despawned.
            </param>
            <param name="rand">
            A random number generator.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.DespawnAfterBehaviour.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this DespawnAfterBehaviour.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.DespawnAfterBehaviour.DespawnEntity">
            <summary>
            Despawn the entity that is controlled by this DespawnAfterBehaviour.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.DespawnAfterBehaviour.Enter">
            <summary>
            Called when an entity enters this <see cref="T:Zelda.Entities.Behaviours.IEntityBehaviour"/>.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.DespawnAfterBehaviour.Leave">
            <summary>
            Called when an entity leaves this <see cref="T:Zelda.Entities.Behaviours.IEntityBehaviour"/>.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.DespawnAfterBehaviour.Reset">
            <summary>
            Reset this <see cref="T:Zelda.Entities.Behaviours.IEntityBehaviour"/> to its original state.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.DespawnAfterBehaviour.Clone(Zelda.Entities.ZeldaEntity)">
            <summary>
            Returns a clone of this DespawnAfterBehaviour
            </summary>
            <param name="newOwner">
            The ZeldaEntity that should be controlled by the cloned IEntityBehaviour.
            </param>
            <returns>
            The cloned IEntityBehaviour.
            </returns>
        </member>
        <member name="M:Zelda.Entities.Behaviours.DespawnAfterBehaviour.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.DespawnAfterBehaviour.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Entities.Behaviours.DespawnAfterBehaviour.timeLeftUntilDespawn">
            <summary>
            The time left until the ZeldaEntity gets despawned.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.DespawnAfterBehaviour.entity">
            <summary>
            The ZeldaEntity that should be despawned by this DespawnAfterBehaviour.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.DespawnAfterBehaviour.rand">
            <summary>
            A random number generator.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Behaviours.EnemyChasePlayerBehaviour">
            <summary>
            Defines an IEntityBehaviour which commands an <see cref="T:Zelda.Entities.Enemy"/> entity 
            to chase after the <see cref="T:Zelda.Entities.PlayerEntity"/>.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.EnemyChasePlayerBehaviour.StuckWaitTime">
            <summary>
            The time the Enemy waits after it got stuck to try to find
            a new path to the player.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Behaviours.EnemyChasePlayerBehaviour.IsActive">
            <summary>
            Gets a value indicating whether this <see cref="T:Zelda.Entities.Behaviours.EnemyChasePlayerBehaviour"/> is currently active.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Behaviours.EnemyChasePlayerBehaviour.BehaviourState">
            <summary>
            Gets the current state of this <see cref="T:Zelda.Entities.Behaviours.EnemyChasePlayerBehaviour"/>.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Behaviours.EnemyChasePlayerBehaviour.ChasingTime">
            <summary>
            Gets or sets the time the Enemy continues to chase the player.
            </summary> 
        </member>
        <member name="P:Zelda.Entities.Behaviours.EnemyChasePlayerBehaviour.ChasingSpeedModifier">
            <summary>
            Gets or sets the movement speed increase that is 
            applied to the enemy when he charges the player )in percent).
            </summary> 
        </member>
        <member name="P:Zelda.Entities.Behaviours.EnemyChasePlayerBehaviour.IsChasingForever">
            <summary>
            Gets or sets a value indicating whether the Enemy is chasing the PlayerEntity forever. Usually boss-scripts.
            </summary> 
        </member>
        <member name="P:Zelda.Entities.Behaviours.EnemyChasePlayerBehaviour.Target">
            <summary>
            Gets the target the enemy is supposed to chase.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.EnemyChasePlayerBehaviour.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Entities.Behaviours.EnemyChasePlayerBehaviour"/> class.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.EnemyChasePlayerBehaviour.#ctor(Zelda.Entities.Enemy)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Entities.Behaviours.EnemyChasePlayerBehaviour"/> class.
            </summary>
            <param name="enemy">
            The entity that is controlled by the new EnemyChasePlayerBehaviour.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="enemy"/> is null.
            </exception>
        </member>
        <member name="M:Zelda.Entities.Behaviours.EnemyChasePlayerBehaviour.NotifyAttackedByPlayer">
            <summary>
            Notifies this script that the player has attacked the enemy.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.EnemyChasePlayerBehaviour.RecalculateChasingPath">
            <summary>
            Commands this script to recalculate it's path.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.EnemyChasePlayerBehaviour.ContinueToChase">
            <summary>
            Tells the behaviour script to continue to chase the player.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.EnemyChasePlayerBehaviour.OnNoPathFound">
            <summary>
            Called when no path to the player could be found.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.EnemyChasePlayerBehaviour.OnPathStuck(Zelda.PathFollowState)">
            <summary>
            Called when the Enemy got stuck on his path.
            </summary>
            <param name="followState">
            States what kind of stuck state the entity is in.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.EnemyChasePlayerBehaviour.GiveUpTargetIsDeadOrGone">
            <summary>
            When the player has died the mobs should give up to chase
            and simply start to run around again.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.EnemyChasePlayerBehaviour.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this <see cref="T:Zelda.Entities.Behaviours.EnemyChasePlayerBehaviour"/>.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.EnemyChasePlayerBehaviour.ExistingPathOutdatedTargetMovedAway(Atom.Math.Point2)">
            <summary>
            Checks whether the currently existing path is considered to be 'outdated'.
            This might happen when the target has moved since the path has been calculated.
            </summary>
            <param name="targetTilePosition">
            The position of the target (in tile-space).
            </param>
            <returns>
            true if the path should be recreated;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Entities.Behaviours.EnemyChasePlayerBehaviour.UpdateChasing(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates the chasing behaviour.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
            <returns>
            true if the script should cancel at this point;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Entities.Behaviours.EnemyChasePlayerBehaviour.FollowPath(Zelda.ZeldaUpdateContext)">
            <summary>
            Commands the enemy to follow the tile path that has been calculated-
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.EnemyChasePlayerBehaviour.OnReachedPathEnd">
            <summary>
            Called when the enemy has followed the currently
            calculated path to the end.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.EnemyChasePlayerBehaviour.GetEnemyTilePosition">
            <summary>
            Gets the current position of the enemy controlled
            by this EnemyChasePlayerBehaviour.
            </summary>
            <returns>
            The position of the chaser (in tile-space).
            </returns>
        </member>
        <member name="M:Zelda.Entities.Behaviours.EnemyChasePlayerBehaviour.GetTargetTilePosition">
            <summary>
            Gets the current position of the target of the enemy
            controlled by this EnemyChasePlayerBehaviour.
            </summary>
            <returns>
            The position of the chased target (in tile-space).
            </returns>
        </member>
        <member name="M:Zelda.Entities.Behaviours.EnemyChasePlayerBehaviour.GetTilePosition(Zelda.Entities.ZeldaEntity)">
            <summary>
            Gets the tile position of the specified ZeldaEntity.
            </summary>
            <param name="entity">
            The entity whose position on the tile-map should be computed.
            </param>
            <returns></returns>
        </member>
        <member name="M:Zelda.Entities.Behaviours.EnemyChasePlayerBehaviour.Enter">
            <summary>
            Enters this <see cref="T:Zelda.Entities.Behaviours.EnemyChasePlayerBehaviour"/>.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.EnemyChasePlayerBehaviour.Leave">
            <summary>
            Called when the Enemy entity leaves this <see cref="T:Zelda.Entities.Behaviours.EnemyChasePlayerBehaviour"/>.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.EnemyChasePlayerBehaviour.Reset">
            <summary>
            Resets this IEntityBehaviour.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.EnemyChasePlayerBehaviour.OnEnemyChangedFloor(System.Object,Atom.ChangedValue{System.Int32})">
            <summary>
            Gets called when the enemy has changed floor during chasing the player.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The Atom.ChangedValue{Int32} that contains the event data.</param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.EnemyChasePlayerBehaviour.OnEnemyAttacked(System.Object,Zelda.Entities.Components.AttackEventArgs)">
            <summary>
            Gets called when the enemy has been attacked (by the player).
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The AttackedEventArgs that contains the event data.</param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.EnemyChasePlayerBehaviour.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.EnemyChasePlayerBehaviour.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.EnemyChasePlayerBehaviour.Clone(Zelda.Entities.ZeldaEntity)">
            <summary>
            Returns a clone of this <see cref="T:Zelda.Entities.Behaviours.EnemyChasePlayerBehaviour"/>
            for the given <see cref="T:Zelda.Entities.Enemy"/> entity.
            </summary>
            <param name="newOwner">
            The entity that wants to be controlled by the newly cloned IEntityBehaviour.
            </param>
            <returns>The cloned IEntityBehaviour.</returns>
        </member>
        <member name="M:Zelda.Entities.Behaviours.EnemyChasePlayerBehaviour.SetupClone(Zelda.Entities.Behaviours.EnemyChasePlayerBehaviour)">
            <summary>
            Setups the given <see cref="T:Zelda.Entities.Behaviours.EnemyChasePlayerBehaviour"/> to be a clone of this <see cref="T:Zelda.Entities.Behaviours.EnemyChasePlayerBehaviour"/>.
            </summary>
            <param name="clone">The EnemyChasePlayerBehaviour to setup as a clone of this EnemyChasePlayerBehaviour.</param>
        </member>
        <member name="F:Zelda.Entities.Behaviours.EnemyChasePlayerBehaviour.enemy">
            <summary>
            Identifies the Enemy entity that goes after the player.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.EnemyChasePlayerBehaviour.moveable">
            <summary>
            Identifies the <see cref="T:Zelda.Entities.Components.Moveable"/> component of the Enemy entity.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.EnemyChasePlayerBehaviour.state">
            <summary>
            The current state of this <see cref="T:Zelda.Entities.Behaviours.EnemyChasePlayerBehaviour"/>.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.EnemyChasePlayerBehaviour.chasingTime">
            <summary>
            The time the Enemy continues to chase the player.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.EnemyChasePlayerBehaviour.chasingTimeLeft">
            <summary>
            The time left the enemy will continue chasing after the player.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.EnemyChasePlayerBehaviour.stuckTimeLeft">
            <summary>
            The time left until the enemy will continue to try 
            to chase the player after going stuck.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.EnemyChasePlayerBehaviour.originalTile">
            <summary>
            The position of the object when it started to chase the player.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.EnemyChasePlayerBehaviour.isStuck">
            <summary>
            States whether the object is currently stuck.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.EnemyChasePlayerBehaviour.isMovingBack">
            <summary> 
            States whether the Enemy gave up on chasing the player,
            and is currently returning back to it's original position. 
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.EnemyChasePlayerBehaviour.pathFollower">
            <summary>
            The <see cref="T:Zelda.TilePathFollower"/> which provides the mechanism
            of following the tile path from the current position of the enemy to the position of the player.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.EnemyChasePlayerBehaviour.chasingSpeedEffect">
            <summary>
            Identifies the MovementSpeedEffect that is applied to the enemy
            when he chases the enemy.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.EnemyChasePlayerBehaviour.chasingAura">
            <summary>
            The modifiers applied to the enemy while he chasing the player.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.EnemyChasePlayerBehaviour.returningAura">
            <summary>
            The modifiers applied to the enemy while he is returning to his original position.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.EnemyChasePlayerBehaviour.eventHandlerEnemyChangedFloor">
            <summary>
            The eventhandler that gets invoked when the Enemy has changed Floor while chasing the player.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.EnemyChasePlayerBehaviour.eventHandlerEnemyAttacked">
            <summary>
            The event handler that gets invoked when the enemy gets attacked (by the player).
            </summary>
        </member>
        <member name="T:Zelda.Entities.Behaviours.EnemyChasePlayerBehaviour.State">
            <summary>
            Enumerates the different states of the <see cref="T:Zelda.Entities.Behaviours.EnemyChasePlayerBehaviour"/>.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.EnemyChasePlayerBehaviour.State.Chasing">
            <summary>
            The enemy is chasing the player.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.EnemyChasePlayerBehaviour.State.Returning">
            <summary>
            The enemy gave up on chasing the player and
            is now returning to its original position.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.EnemyChasePlayerBehaviour.State.Returned">
            <summary>
            The enemy gave up on chasing the player and
            has returned back to its original position.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Behaviours.AggressionType">
            <summary>
            Enumerates the different aggression types of an entity. 
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.AggressionType.None">
            <summary>
            No specific aggression type.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.AggressionType.AlwaysAggressive">
            <summary>
            The entity is aggressive (towards the player).
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.AggressionType.Aggressive">
            <summary>
            The entity is aggressive (towards the player).
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.AggressionType.Neutral">
            <summary>
            The entity is not aggressive.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Behaviours.FairyMovementBehaviour">
            <summary>
            Implements the movement logic of the fairy.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.FairyMovementBehaviour.FollowPath(Zelda.ZeldaUpdateContext)">
            <summary>
            Commands the enemy to follow the tile path that has been calculated-
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="F:Zelda.Entities.Behaviours.FairyMovementBehaviour.pathFollower">
            <summary>
            The <see cref="T:Zelda.TilePathFollower"/> which provides the mechanism
            of following the tile path from the current position of the fairy to the position of the player.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Behaviours.IEntityBehaviour">
            <summary>
            An <see cref="T:Zelda.Entities.Behaviours.IEntityBehaviour"/> controls how
            an <see cref="T:Zelda.Entities.ZeldaEntity"/> reacts to the world.
            </summary>
            <remarks>
            There are at first Behaviours that do one specialized thing,
            and then there are Behaviours that take these specialized Behaviours
            and mix them/use them internally.
            </remarks>
        </member>
        <member name="P:Zelda.Entities.Behaviours.IEntityBehaviour.IsActive">
            <summary>
            Gets a value indicating whether this <see cref="T:Zelda.Entities.Behaviours.IEntityBehaviour"/> is currently active.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.IEntityBehaviour.Enter">
            <summary>
            Called when an entity enters this <see cref="T:Zelda.Entities.Behaviours.IEntityBehaviour"/>.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.IEntityBehaviour.Leave">
            <summary>
            Called when an entity leaves this <see cref="T:Zelda.Entities.Behaviours.IEntityBehaviour"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException"> 
            If this <see cref="T:Zelda.Entities.Behaviours.IEntityBehaviour"/> is currently not active.
            </exception>
        </member>
        <member name="M:Zelda.Entities.Behaviours.IEntityBehaviour.Reset">
            <summary>
            Reset this <see cref="T:Zelda.Entities.Behaviours.IEntityBehaviour"/> to its original state.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.IEntityBehaviour.Clone(Zelda.Entities.ZeldaEntity)">
            <summary>
            Returns a clone of this <see cref="T:Zelda.Entities.Behaviours.IEntityBehaviour"/> for the given <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
            <param name="newOwner">
            The owner of the cloned IEntityBehaviour.
            </param>
            <returns>
            The cloned IEntityBehaviour.
            </returns>
        </member>
        <member name="T:Zelda.Entities.Behaviours.IRangedEnemyBehaviour">
            <summary>
            An <see cref="T:Zelda.Entities.Behaviours.IRangedEnemyBehaviour"/> controls the behaviour of a ranged enemy.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Behaviours.IRangedEnemyBehaviour.RangedAttack">
            <summary>
            Gets the <see cref="P:Zelda.Entities.Behaviours.IRangedEnemyBehaviour.RangedAttack"/> that controls the attack logic
            of the ranged enemy.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Behaviours.IRangedEnemyBehaviour.AttackSettings">
            <summary>
            Gets the <see cref="T:Zelda.Attacks.Ranged.RangedEnemyAttackSettings"/> that stores
            the ranged attack settings of the ranged enemy.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Behaviours.ISubEntityBehaviourContainer">
            <summary>
            Provides a mechanism to receive a sub behaviour
            from the object that implements this interface.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.ISubEntityBehaviourContainer.GetSubBehaviour(System.Type)">
            <summary>
            Tries to get the sub <see cref="T:Zelda.Entities.Behaviours.IEntityBehaviour"/>
            of the given <paramref name="type"/>.
            </summary>
            <param name="type">
            The type of the IEntityBehaviour to get.
            </param>
            <returns>
            The requested IEntityBehaviour;
            or null if there exists no IEntityBehaviour of the given <paramref name="type"/>.
            </returns>
        </member>
        <member name="T:Zelda.Entities.Behaviours.MeleeEnemyBehaviour">
            <summary>
            Represents the default <see cref="T:Zelda.Entities.Behaviours.IEntityBehaviour"/> for melee Enemies.
            </summary>
        </member>
        <member name="E:Zelda.Entities.Behaviours.MeleeEnemyBehaviour.StateChanged">
            <summary>
            Called when the state of this MeleeEnemyBehaviour has changed.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Behaviours.MeleeEnemyBehaviour.IsActive">
            <summary>
            Gets a value indicating whether this MeleeEnemyBehaviour
            is currently active.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Behaviours.MeleeEnemyBehaviour.State">
            <summary>
            Gets the current <see cref="T:Zelda.Entities.Behaviours.MeleeEnemyBehaviour.BehaviourState"/> of this MeleeEnemyBehaviour.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Behaviours.MeleeEnemyBehaviour.RandomMovementBehaviour">
            <summary>
            Gets the behaviour that controlls the random wandering of the Enemy.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Behaviours.MeleeEnemyBehaviour.ChasePlayerBehaviour">
            <summary>
            Gets the behaviour that controlls the chasing of the player.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.MeleeEnemyBehaviour.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Entities.Behaviours.MeleeEnemyBehaviour"/> class.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="serviceProvider"/> is null.</exception>
        </member>
        <member name="M:Zelda.Entities.Behaviours.MeleeEnemyBehaviour.#ctor(Zelda.Entities.Enemy,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Entities.Behaviours.MeleeEnemyBehaviour"/> class.
            </summary>
            <param name="enemy">
            The entity that is controlled by the new MeleeEnemyBehaviour.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="enemy"/> or <paramref name="serviceProvider"/> is null.
            </exception>
        </member>
        <member name="M:Zelda.Entities.Behaviours.MeleeEnemyBehaviour.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this MeleeEnemyBehaviour.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.MeleeEnemyBehaviour.OnEnemyAttacked(System.Object,Zelda.Entities.Components.AttackEventArgs)">
            <summary>
            Gets called when the enemy has been attacked (by the player).
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The AttackedEventArgs that contains the event data.</param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.MeleeEnemyBehaviour.Enter">
            <summary>
            Enters this <see cref="T:Zelda.Entities.Behaviours.MeleeEnemyBehaviour"/>.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.MeleeEnemyBehaviour.Leave">
            <summary>
            Leaves this <see cref="T:Zelda.Entities.Behaviours.MeleeEnemyBehaviour"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException"> 
            If this <see cref="T:Zelda.Entities.Behaviours.IEntityBehaviour"/> is currently not active.
            </exception>
        </member>
        <member name="M:Zelda.Entities.Behaviours.MeleeEnemyBehaviour.Reset">
            <summary>
            Resets this <see cref="T:Zelda.Entities.Behaviours.MeleeEnemyBehaviour"/>.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.MeleeEnemyBehaviour.SetState(Zelda.Entities.Behaviours.MeleeEnemyBehaviour.BehaviourState)">
            <summary>
            Sets the state of this <see cref="T:Zelda.Entities.Behaviours.MeleeEnemyBehaviour"/>.
            </summary>
            <param name="newState">The state to set.</param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.MeleeEnemyBehaviour.OnStateChangedPrivate(Zelda.Entities.Behaviours.MeleeEnemyBehaviour.BehaviourState,Zelda.Entities.Behaviours.MeleeEnemyBehaviour.BehaviourState)">
            <summary>
            Called when the BehaviourState of this MeleeENemyBehaviour has changed.
            </summary>
            <param name="oldState">
            The old BehaviourState.
            </param>
            <param name="newState">
            The new BehaviourState.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.MeleeEnemyBehaviour.OnStateChanged(Zelda.Entities.Behaviours.MeleeEnemyBehaviour.BehaviourState,Zelda.Entities.Behaviours.MeleeEnemyBehaviour.BehaviourState)">
            <summary>
            Called when the BehaviourState of this MeleeENemyBehaviour has changed.
            </summary>
            <param name="oldState">
            The old BehaviourState.
            </param>
            <param name="newState">
            The new BehaviourState.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.MeleeEnemyBehaviour.GetSubBehaviour(Zelda.Entities.Behaviours.MeleeEnemyBehaviour.BehaviourState)">
            <summary>
            Gets the sub-<see cref="T:Zelda.Entities.Behaviours.IEntityBehaviour"/> associated with the given BehaviourState.
            </summary>
            <param name="state">
            The input BehaviourState.
            </param>
            <returns>
            The IEntityBehaviour that relates to the given BehaviourState.
            </returns>
        </member>
        <member name="M:Zelda.Entities.Behaviours.MeleeEnemyBehaviour.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.MeleeEnemyBehaviour.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.MeleeEnemyBehaviour.Clone(Zelda.Entities.ZeldaEntity)">
            <summary>
            Returns a clone of this <see cref="T:Zelda.Entities.Behaviours.MeleeEnemyBehaviour"/>.
            </summary>
            <param name="newOwner">
            The Enemy entity that wants to get controlled by the cloned MeleeEnemyBehaviour.
            </param>
            <returns>The cloned IEntityBehaviour.</returns>
        </member>
        <member name="M:Zelda.Entities.Behaviours.MeleeEnemyBehaviour.SetupClone(Zelda.Entities.Behaviours.MeleeEnemyBehaviour)">
            <summary>
            Setups the given <see cref="T:Zelda.Entities.Behaviours.MeleeEnemyBehaviour"/> to be a clone of this <see cref="T:Zelda.Entities.Behaviours.MeleeEnemyBehaviour"/>.
            </summary>
            <param name="clone">
            The <see cref="T:Zelda.Entities.Behaviours.MeleeEnemyBehaviour"/> to setup aas clone of this <see cref="T:Zelda.Entities.Behaviours.MeleeEnemyBehaviour"/>.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.MeleeEnemyBehaviour.GetSubBehaviour(System.Type)">
            <summary>
            Tries to get the sub-<see cref="T:Zelda.Entities.Behaviours.IEntityBehaviour"/> of this <see cref="T:Zelda.Entities.Behaviours.MeleeEnemyBehaviour"/>
            that has the given type.
            </summary>
            <remarks>
            Valid types are: 
            <see cref="P:Zelda.Entities.Behaviours.MeleeEnemyBehaviour.RandomMovementBehaviour"/>, 
            <see cref="T:Zelda.Entities.Behaviours.RandomEnemyMovementBehaviour"/> and 
            <see cref="T:Zelda.Entities.Behaviours.EnemyChasePlayerBehaviour"/>.
            </remarks>
            <param name="type">
            The type of the sub IEntityBehaviour to get.
            </param>
            <returns>The found sub-IEntityBehaviour or null.</returns>
        </member>
        <member name="F:Zelda.Entities.Behaviours.MeleeEnemyBehaviour.enemy">
            <summary>
            The enemy that is controlled by this DefaultMeleeEnemyBehaviour.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.MeleeEnemyBehaviour.state">
            <summary>
            The current state of this DefaultMeleeEnemyBehaviour.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.MeleeEnemyBehaviour.activeSubBehaviour">
            <summary>
            The currently active sub behaviour.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.MeleeEnemyBehaviour.randomMovementBehaviour">
            <summary>
            The behaviour that controlls the random wandering of the Enemy.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.MeleeEnemyBehaviour.chasePlayerBehaviour">
            <summary>
            The behaviour that controlls the chasing of the player.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.MeleeEnemyBehaviour.eventHandlerEnemyAttacked">
            <summary>
            The event handler that gets invoked when the enemy gets attacked (by the player).
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.MeleeEnemyBehaviour.serviceProvider">
            <summary>
            Provides fast access to game-related services.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Behaviours.MeleeEnemyBehaviour.BehaviourState">
            <summary>
            Enumerates the different states of the <see cref="T:Zelda.Entities.Behaviours.MeleeEnemyBehaviour"/>.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.MeleeEnemyBehaviour.BehaviourState.Wandering">
            <summary>
            The Enemy is randomly wandering around.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.MeleeEnemyBehaviour.BehaviourState.ChasingPlayer">
            <summary>
            The Enemy is chasing the player.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Behaviours.MultiBehaviour">
            <summary>
            Represents an <see cref="T:Zelda.Entities.Behaviours.IEntityBehaviour"/> that consists of multiple other sub <see cref="T:Zelda.Entities.Behaviours.IEntityBehaviour"/>.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Behaviours.MultiBehaviour.Behaviours">
            <summary>
            Gets the list of sub behaviours that make up this MultiBehaviour.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Behaviours.MultiBehaviour.IsActive">
            <summary>
            Gets a value indicating whether this MultiBehaviour is currently active.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.MultiBehaviour.#ctor">
            <summary>
            Initializes a new instance of the MultiBehaviour class.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.MultiBehaviour.#ctor(Zelda.Entities.ZeldaEntity)">
            <summary>
            Initializes a new instance of the MultiBehaviour class.
            </summary>
            <param name="owner">
            The ZeldaEntity that gets controlled by the new MultiBehaviour.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.MultiBehaviour.#ctor(Zelda.Entities.ZeldaEntity,System.Collections.Generic.IEnumerable{Zelda.Entities.Behaviours.IEntityBehaviour})">
            <summary>
            Initializes a new instance of the MultiBehaviour class.
            </summary>
            <param name="owner">
            The ZeldaEntity that gets controlled by the new MultiBehaviour.
            </param>
            <param name="behaviours">
            The behaviours to initially add.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.MultiBehaviour.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this MultiBehaviour.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.MultiBehaviour.Enter">
            <summary>
            Enters this MultiBehaviour.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.MultiBehaviour.Leave">
            <summary>
            Leaves this MultiBehaviour.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.MultiBehaviour.Reset">
            <summary>
            Resets this MultiBehaviour.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.MultiBehaviour.Clone(Zelda.Entities.ZeldaEntity)">
            <summary>
            Returns a clone of this MultiBehaviour.
            </summary>
            <param name="newOwner">
            The ZeldaEntity that should own the newly owned MultiBehaviour.
            </param>
            <returns>
            The cloned IEntityBehaviour.
            </returns>
        </member>
        <member name="M:Zelda.Entities.Behaviours.MultiBehaviour.SetupClone(Zelda.Entities.Behaviours.MultiBehaviour)">
            <summary>
            Setups the specified MultiBehaviour to be a clone of this MultiBehaviour.
            </summary>
            <param name="clone">
            The MultiBehaviour to setup as a clone of this MultiBehaviour.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.MultiBehaviour.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.MultiBehaviour.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.MultiBehaviour.Add(Zelda.Entities.Behaviours.IEntityBehaviour)">
            <summary>
            Adds the specified IEntityBehaviour to the list of sub IEntityBehaviour of this MultiBehaviour.
            </summary>
            <param name="behaviour">
            The IEntityBehaviour to add.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.MultiBehaviour.GetSubBehaviour(System.Type)">
            <summary>
            Tries to get the sub <see cref="T:Zelda.Entities.Behaviours.IEntityBehaviour"/>
            of the given <paramref name="type"/>.
            </summary>
            <param name="type">
            The type of the IEntityBehaviour to get.
            </param>
            <returns>
            The requested IEntityBehaviour;
            or null if there exists no IEntityBehaviour of the given <paramref name="type"/>.
            </returns>
        </member>
        <member name="F:Zelda.Entities.Behaviours.MultiBehaviour.list">
            <summary>
            The list of sub behaviours that make up this MultiBehaviour.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.MultiBehaviour.owner">
            <summary>
            Identifies the ZeldaEntity that owns this MultiBehaviour;
            </summary>
        </member>
        <member name="T:Zelda.Entities.Behaviours.RandomEnemyMovementBehaviour">
            <summary>
            Defines the default <see cref="T:Zelda.Entities.Behaviours.RandomMovementBehaviour"/> for <see cref="T:Zelda.Entities.Enemy"/> entities.
            </summary>
            <remarks>
            The difference is that the behaviour looks for the player and
            leaves the behaviour if it sees the Player.
            <para>
            An above standing behaviour may react to this by changing into a different behaviour, 
            such as the EnemyChasePlayerBehaviour.
            </para>
            </remarks>
        </member>
        <member name="P:Zelda.Entities.Behaviours.RandomEnemyMovementBehaviour.BehaviourState">
            <summary>
            Gets the current state of this <see cref="T:Zelda.Entities.Behaviours.RandomEnemyMovementBehaviour"/>.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RandomEnemyMovementBehaviour.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Entities.Behaviours.RandomEnemyMovementBehaviour"/> class.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="serviceProvider"/> is null.</exception>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RandomEnemyMovementBehaviour.#ctor(Zelda.Entities.Enemy,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Entities.Behaviours.RandomEnemyMovementBehaviour"/> class.
            </summary>
            <param name="entity">
            The entity that is controlled by the new RandomMovementBehaviour.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="entity"/> or <paramref name="serviceProvider"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the given <paramref name="entity"/> doesn't own the <see cref="T:Zelda.Entities.Components.Moveable"/> component.
            </exception>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RandomEnemyMovementBehaviour.Enter">
            <summary>
            Enters the <see cref="T:Zelda.Entities.Behaviours.RandomEnemyMovementBehaviour"/>.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RandomEnemyMovementBehaviour.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this <see cref="T:Zelda.Entities.Behaviours.RandomEnemyMovementBehaviour"/>.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RandomEnemyMovementBehaviour.CheckVision">
            <summary>
            Checks whether the player is in vision of the enemy controlled by this IEntityBehaviour.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RandomEnemyMovementBehaviour.Reset">
            <summary>
            Resets this <see cref="T:Zelda.Entities.Behaviours.RandomEnemyMovementBehaviour"/>.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RandomEnemyMovementBehaviour.Clone(Zelda.Entities.ZeldaEntity)">
            <summary>
            Returns a clone of this <see cref="T:Zelda.Entities.Behaviours.RandomEnemyMovementBehaviour"/>
            for the given ZeldaEntity.
            </summary>
            <param name="newOwner">The owner of the clone to create.</param>
            <returns>The cloned IEntityBehaviour.</returns>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RandomEnemyMovementBehaviour.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RandomEnemyMovementBehaviour.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Entities.Behaviours.RandomEnemyMovementBehaviour.state">
            <summary>
            The current state of the <see cref="T:Zelda.Entities.Behaviours.RandomEnemyMovementBehaviour"/>.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.RandomEnemyMovementBehaviour.timeLeftVisioCheck">
            <summary>
            The time that is left until the Enemy looks for the player again.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.RandomEnemyMovementBehaviour.TimeBetweenVisioChecks">
            <summary>
            The time between the tests that check whether the Enemy sees the Player.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.RandomEnemyMovementBehaviour.enemy">
            <summary>
            Identifies the Enemy entity that this IEntityBehaviour controls.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Behaviours.RandomEnemyMovementBehaviour.State">
            <summary>
            Enumerates the different states of the <see cref="T:Zelda.Entities.Behaviours.RandomEnemyMovementBehaviour"/>.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.RandomEnemyMovementBehaviour.State.Default">
            <summary>
            The default state, the enemy is wandering around.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.RandomEnemyMovementBehaviour.State.FoundPlayer">
            <summary>
            The enemy found the player.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Behaviours.RandomMovementBehaviour">
            <summary>
            Defines an <see cref="T:Zelda.Entities.Behaviours.IEntityBehaviour"/> which
            lets the Entity move randomly around the Scene.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RandomMovementBehaviour.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Entities.Behaviours.RandomMovementBehaviour"/> class.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="serviceProvider"/> is null.</exception>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RandomMovementBehaviour.#ctor(Zelda.Entities.ZeldaEntity,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Entities.Behaviours.RandomMovementBehaviour"/> class.
            </summary>
            <param name="entity">
            The entity that is controlled by the new RandomMovementBehaviour.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="entity"/> or <paramref name="serviceProvider"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the given <paramref name="entity"/> doesn't own the <see cref="T:Zelda.Entities.Components.Moveable"/> component.
            </exception>
        </member>
        <member name="P:Zelda.Entities.Behaviours.RandomMovementBehaviour.IsActive">
            <summary>
            Gets a value indicating whether this <see cref="T:Zelda.Entities.Behaviours.IEntityBehaviour"/> is currently active.
            </summary>
            <value>The default value is false.</value>
        </member>
        <member name="P:Zelda.Entities.Behaviours.RandomMovementBehaviour.MovementTimeMinimum">
            <summary>
            Gets or sets the minimum value the movementTimeLeft variable may get populated with.
            </summary>
            <exception cref="T:System.ArgumentException"> If the given value is greater than the MovementTimeMaximum. </exception>
        </member>
        <member name="P:Zelda.Entities.Behaviours.RandomMovementBehaviour.MovementTimeMaximum">
            <summary>
            Gets or sets the maximum value the movementTimeLeft variable may get populated with.
            </summary>
            <exception cref="T:System.ArgumentException"> If the given value is less than the MovementTimeMinimum. </exception>
        </member>
        <member name="P:Zelda.Entities.Behaviours.RandomMovementBehaviour.ChanceToNotMove">
            <summary>
            Gets or sets the chance in % for the entity to not move at all.
            </summary>
            <exception cref="T:System.ArgumentException">
            If the given value is less than zero.
            </exception>
        </member>
        <member name="P:Zelda.Entities.Behaviours.RandomMovementBehaviour.MovementDirection">
            <summary>
            Gets the direction the entity is currently is moving towards.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Behaviours.RandomMovementBehaviour.Moveable">
            <summary>
            Gets the moveable component of the entity.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Behaviours.RandomMovementBehaviour.Entity">
            <summary>
            Gets the entity that is moved by this behaviour.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Behaviours.RandomMovementBehaviour.ServiceProvider">
            <summary>
            Gets the <see cref="T:Zelda.IZeldaServiceProvider"/> object
            which provides fast access to game-related services.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Behaviours.RandomMovementBehaviour.Rand">
            <summary>
            Gets a random number generator.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RandomMovementBehaviour.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this <see cref="T:Zelda.Entities.Behaviours.RandomMovementBehaviour"/>.
            </summary>
            <param name="updateContext">
            The current IUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RandomMovementBehaviour.Move(Zelda.ZeldaUpdateContext)">
            <summary>
            Moves the entity.
            </summary>
            <param name="updateContext">
            The current IUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RandomMovementBehaviour.OnMapCollisionOccurred(Zelda.Entities.Components.Moveable)">
            <summary>
            Gets called when the Entity collides with the TileMap.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RandomMovementBehaviour.RandomiseMovementTime">
            <summary>
            Fills the movementTimeLeft field with a random value of the interval [movementTimeMin,movementTimeMax].
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RandomMovementBehaviour.ChangeMovement">
            <summary>
            Changes the movement direction of the object randomly.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RandomMovementBehaviour.Enter">
            <summary>
            Called when an entity enters this <see cref="T:Zelda.Entities.Behaviours.IEntityBehaviour"/>.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RandomMovementBehaviour.Leave">
            <summary>
            Called when an entity leaves this <see cref="T:Zelda.Entities.Behaviours.IEntityBehaviour"/>.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RandomMovementBehaviour.Reset">
            <summary>
            Reset this <see cref="T:Zelda.Entities.Behaviours.IEntityBehaviour"/> to its original state.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RandomMovementBehaviour.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RandomMovementBehaviour.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RandomMovementBehaviour.Clone(Zelda.Entities.ZeldaEntity)">
            <summary>
            Returns a clone of this <see cref="T:Zelda.Entities.Behaviours.RandomMovementBehaviour"/> for the given <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
            <param name="newOwner">The owner of the cloned IEntityBehaviour.</param>
            <returns>The cloned IEntityBehaviour.</returns>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RandomMovementBehaviour.SetupClone(Zelda.Entities.Behaviours.RandomMovementBehaviour)">
            <summary>
            Setups the given <see cref="T:Zelda.Entities.Behaviours.RandomMovementBehaviour"/> to be a clone of this RandomMovementBehaviour.
            </summary>
            <param name="clone">
            The RandomMovementBehaviour to setup as a clone of this RandomMovementBehaviour.
            </param>
        </member>
        <member name="F:Zelda.Entities.Behaviours.RandomMovementBehaviour.movementDirection">
            <summary>
            The direction the entity currently moves.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.RandomMovementBehaviour.movementTimeLeft">
            <summary>
            Stores the time left until the object changes direction.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.RandomMovementBehaviour.movementTimeMinimum">
            <summary>
            The range from which the <see cref="F:Zelda.Entities.Behaviours.RandomMovementBehaviour.movementTimeLeft"/> variable is populated with.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.RandomMovementBehaviour.movementTimeMaximum">
            <summary>
            The range from which the <see cref="F:Zelda.Entities.Behaviours.RandomMovementBehaviour.movementTimeLeft"/> variable is populated with.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.RandomMovementBehaviour.chanceToNotMove">
            <summary>
            The chance for the entity to not move at all.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.RandomMovementBehaviour.moveable">
            <summary>
            Identifies the Moveable component of the Entity.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.RandomMovementBehaviour.rand">
            <summary>
            A random number generator.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.RandomMovementBehaviour.serviceProvider">
            <summary>
            Provides fast access to game-related services.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.RandomMovementBehaviour.entity">
            <summary>
            The entity that is moved by this RandomMovementBehaviour.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Behaviours.RandomSinusMovementBehaviour">
            <summary>
            Defines an <see cref="T:Zelda.Entities.Behaviours.IEntityBehaviour"/> which
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RandomSinusMovementBehaviour.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Entities.Behaviours.RandomSinusMovementBehaviour"/> class.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="serviceProvider"/> is null.</exception>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RandomSinusMovementBehaviour.#ctor(Zelda.Entities.ZeldaEntity,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Entities.Behaviours.RandomSinusMovementBehaviour"/> class.
            </summary>
            <param name="entity">
            The entity that is controlled by the new RandomSinusMovementBehaviour.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="entity"/> or <paramref name="serviceProvider"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the given <paramref name="entity"/> doesn't own the <see cref="T:Zelda.Entities.Components.Moveable"/> component.
            </exception>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RandomSinusMovementBehaviour.ChangeMovement">
            <summary>
            
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RandomSinusMovementBehaviour.Move(Zelda.ZeldaUpdateContext)">
            <summary>
            
            </summary>
            <param name="updateContext"></param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RandomSinusMovementBehaviour.Clone(Zelda.Entities.ZeldaEntity)">
            <summary>
            Returns a clone of this <see cref="T:Zelda.Entities.Behaviours.RandomSinusMovementBehaviour"/>
            for the given ZeldaEntity.
            </summary>
            <param name="newOwner">The owner of the clone to create.</param>
            <returns>The cloned IEntityBehaviour.</returns>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RandomSinusMovementBehaviour.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RandomSinusMovementBehaviour.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="T:Zelda.Entities.Behaviours.RangedEnemyBehaviour">
            <summary>
            Represents the default <see cref="T:Zelda.Entities.Behaviours.IEntityBehaviour"/> for ranged Enemies.
            </summary>
        </member>
        <member name="E:Zelda.Entities.Behaviours.RangedEnemyBehaviour.StateChanged">
            <summary>
            Called when the state of this RangedEnemyBehaviour has changed.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Behaviours.RangedEnemyBehaviour.IsActive">
            <summary>
            Gets a value indicating whether this RangedEnemyBehaviour
            is currently active.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Behaviours.RangedEnemyBehaviour.State">
            <summary>
            Gets the current <see cref="T:Zelda.Entities.Behaviours.RangedEnemyBehaviour.BehaviourState"/> of this RangedEnemyBehaviour.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Behaviours.RangedEnemyBehaviour.RandomMovementBehaviour">
            <summary>
            Gets the behaviour that controlls the random wandering of the Enemy.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Behaviours.RangedEnemyBehaviour.ChasePlayerBehaviour">
            <summary>
            Gets the behaviour that controlls the chasing of the player.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Behaviours.RangedEnemyBehaviour.RangedAttack">
            <summary>
            Gets the <see cref="P:Zelda.Entities.Behaviours.RangedEnemyBehaviour.RangedAttack"/> associated with this RangedEnemyBehaviour.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Behaviours.RangedEnemyBehaviour.AttackSettings">
            <summary>
            Gets the <see cref="P:Zelda.Entities.Behaviours.RangedEnemyBehaviour.AttackSettings"/> associated with this RangedEnemyBehaviour.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RangedEnemyBehaviour.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Entities.Behaviours.RangedEnemyBehaviour"/> class.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RangedEnemyBehaviour.#ctor(Zelda.Entities.Enemy,Zelda.Attacks.Ranged.RangedEnemyAttackSettings,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Entities.Behaviours.RangedEnemyBehaviour"/> class.
            </summary>
            <param name="enemy">
            The entity that is controlled by the new RangedEnemyBehaviour.
            </param>
            <param name="attackSettings">
            The RangedEnemyAttackSettings of the Enemy.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RangedEnemyBehaviour.ApplyAttackSettings(Zelda.IZeldaServiceProvider)">
            <summary>
            Applies the Attack Settings to this RangedEnemyBehaviour.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RangedEnemyBehaviour.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this RangedEnemyBehaviour.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RangedEnemyBehaviour.UpdateSubBehaviour(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates the current sub-behaviour.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RangedEnemyBehaviour.UpdateRangedAttack(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates the ranged attacking logic.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RangedEnemyBehaviour.GetExtraTimeBetweenAttacks">
            <summary>
            Gets the time (in seconds) before the next attack will be launched.
            </summary>
            <returns>
            The time in seconds.
            </returns>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RangedEnemyBehaviour.ShouldFireProjectile">
            <summary>
            Gets a value indicating whether the Enemy should fire a Projectile.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RangedEnemyBehaviour.FireProjectile">
            <summary>
            Fires a Projectile.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RangedEnemyBehaviour.UpdateMovementRestriction(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates the movement restriction logic.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RangedEnemyBehaviour.OnEnemyAttacked(System.Object,Zelda.Entities.Components.AttackEventArgs)">
            <summary>
            Gets called when the enemy has been attacked (by the player).
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The AttackedEventArgs that contains the event data.</param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RangedEnemyBehaviour.Enter">
            <summary>
            Enters this <see cref="T:Zelda.Entities.Behaviours.RangedEnemyBehaviour"/>.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RangedEnemyBehaviour.Leave">
            <summary>
            Leaves this <see cref="T:Zelda.Entities.Behaviours.RangedEnemyBehaviour"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException"> 
            If this <see cref="T:Zelda.Entities.Behaviours.IEntityBehaviour"/> is currently not active.
            </exception>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RangedEnemyBehaviour.Reset">
            <summary>
            Resets this <see cref="T:Zelda.Entities.Behaviours.RangedEnemyBehaviour"/>.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RangedEnemyBehaviour.SetState(Zelda.Entities.Behaviours.RangedEnemyBehaviour.BehaviourState)">
            <summary>
            Sets the state of this <see cref="T:Zelda.Entities.Behaviours.RangedEnemyBehaviour"/>.
            </summary>
            <param name="newState">The state to set.</param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RangedEnemyBehaviour.GetSubBehaviour(Zelda.Entities.Behaviours.RangedEnemyBehaviour.BehaviourState)">
            <summary>
            Gets the sub-<see cref="T:Zelda.Entities.Behaviours.IEntityBehaviour"/> associated with the given BehaviourState.
            </summary>
            <param name="state">
            The input BehaviourState.
            </param>
            <returns>
            The IEntityBehaviour that relates to the given BehaviourState.
            </returns>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RangedEnemyBehaviour.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RangedEnemyBehaviour.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RangedEnemyBehaviour.Clone(Zelda.Entities.ZeldaEntity)">
            <summary>
            Returns a clone of this <see cref="T:Zelda.Entities.Behaviours.RangedEnemyBehaviour"/>.
            </summary>
            <param name="newOwner">
            The Enemy entity that wants to get controlled by the cloned RangedEnemyBehaviour.
            </param>
            <returns>The cloned IEntityBehaviour.</returns>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RangedEnemyBehaviour.SetupClone(Zelda.Entities.Behaviours.RangedEnemyBehaviour)">
            <summary>
            Setups the given <see cref="T:Zelda.Entities.Behaviours.RangedEnemyBehaviour"/> to be a clone of this <see cref="T:Zelda.Entities.Behaviours.RangedEnemyBehaviour"/>.
            </summary>
            <param name="clone">
            The <see cref="T:Zelda.Entities.Behaviours.RangedEnemyBehaviour"/> to setup aas clone of this <see cref="T:Zelda.Entities.Behaviours.RangedEnemyBehaviour"/>.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RangedEnemyBehaviour.GetSubBehaviour(System.Type)">
            <summary>
            Tries to get the sub-<see cref="T:Zelda.Entities.Behaviours.IEntityBehaviour"/> of this <see cref="T:Zelda.Entities.Behaviours.RangedEnemyBehaviour"/>
            that has the given type.
            </summary>
            <remarks>
            Valid types are: 
            <see cref="P:Zelda.Entities.Behaviours.RangedEnemyBehaviour.RandomMovementBehaviour"/>, 
            <see cref="T:Zelda.Entities.Behaviours.RandomEnemyMovementBehaviour"/> and 
            <see cref="T:Zelda.Entities.Behaviours.EnemyChasePlayerBehaviour"/>.
            </remarks>
            <param name="type">
            The type of the sub IEntityBehaviour to get.
            </param>
            <returns>The found sub-IEntityBehaviour or null.</returns>
        </member>
        <member name="F:Zelda.Entities.Behaviours.RangedEnemyBehaviour.timeUntilNextRangedAttack">
            <summary>
            The time until the next ranged attack is fired.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.RangedEnemyBehaviour.rangedAttack">
            <summary>
            The RangedAttack of the ranged Enemy.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.RangedEnemyBehaviour.attackSettings">
            <summary>
            The <see cref="T:Zelda.Attacks.Ranged.RangedEnemyAttackSettings"/> associated with this RangedEnemyBehaviour.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.RangedEnemyBehaviour.enemy">
            <summary>
            The enemy that is controlled by this DefaultRangedEnemyBehaviour.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.RangedEnemyBehaviour.moveable">
            <summary>
            Identifies the Moveable component of the Enemy.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.RangedEnemyBehaviour.timeLeftUnableToMove">
            <summary>
            The time (in seconds) the enemy is unable to move.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.RangedEnemyBehaviour.isMovementRestricted">
            <summary>
            States whether the enemy's movement is currently restricted.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.RangedEnemyBehaviour.state">
            <summary>
            The current state of this DefaultRangedEnemyBehaviour.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.RangedEnemyBehaviour.activeSubBehaviour">
            <summary>
            The currently active sub behaviour.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.RangedEnemyBehaviour.randomMovementBehaviour">
            <summary>
            The behaviour that controlls the random wandering of the Enemy.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.RangedEnemyBehaviour.chasePlayerBehaviour">
            <summary>
            The behaviour that controlls the chasing of the player.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.RangedEnemyBehaviour.serviceProvider">
            <summary>
            Provides fast access to game-related services.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Behaviours.RangedEnemyBehaviour.BehaviourState">
            <summary>
            Enumerates the different states of the <see cref="T:Zelda.Entities.Behaviours.RangedEnemyBehaviour"/>.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.RangedEnemyBehaviour.BehaviourState.Wandering">
            <summary>
            The Enemy is randomly wandering around.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.RangedEnemyBehaviour.BehaviourState.ChasingPlayer">
            <summary>
            The Enemy is chasing the player.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Behaviours.RazorMovementBehaviour">
            <summary>
            The movement behaviour of a 'Razor' enemy entity is unique.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Behaviours.RazorMovementBehaviour.IsActive">
            <summary>
            Gets a value indicating whether this <see cref="T:Zelda.Entities.Behaviours.RazorMovementBehaviour"/>
            is currently active.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Behaviours.RazorMovementBehaviour.BehaviourType">
            <summary>
            Gets or sets the <see cref="T:Zelda.Entities.Behaviours.RazorMovementBehaviour.RazorBehaviourType"/> of this RazorMovementBehaviour,
            which states how the razor entity moves or gets triggered.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Behaviours.RazorMovementBehaviour.MaximumBounceCount">
            <summary>
            Gets or sets the maximum number of bounces
            that may occur before the razor entity stops to bounce.
            </summary>
            <exception cref="T:System.ArgumentException">
            Set: If the given value is negative.
            </exception>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RazorMovementBehaviour.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Entities.Behaviours.RazorMovementBehaviour"/> class.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RazorMovementBehaviour.#ctor(Zelda.Entities.Enemy,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Entities.Behaviours.RazorMovementBehaviour"/> class.
            </summary>
            <param name="enemy">
            The entity that is controlled by the new MeleeEnemyBehaviour.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="enemy"/> or <paramref name="serviceProvider"/> is null.
            </exception>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RazorMovementBehaviour.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this RazorMovementBehaviour.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RazorMovementBehaviour.FindCollision">
            <summary>
            Tries to detect any collision that occurs between
            the razor entity and any other solid entity in the ZeldaScene.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RazorMovementBehaviour.FireRazor">
            <summary>
            Tells this RazorMovementBehaviour to fire
            the controlled razor entity.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RazorMovementBehaviour.StopRazor">
            <summary>
            Stops the movement of the razor entity.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RazorMovementBehaviour.InvertDirection">
            <summary>
            Inverses the movement direction of the razor.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RazorMovementBehaviour.ChangeMovementOnHit">
            <summary>
            Changes the movement of the razor.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RazorMovementBehaviour.OnEnemyMapCollisionOccurred(Zelda.Entities.Components.Moveable)">
            <summary>
            Gets called when the entity that gets controlled by
            this RazorMovementBehaviour has collided with the TileMap.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RazorMovementBehaviour.Enter">
            <summary>
            Called when the ZeldaEntity that owns this IEntityBehaviour
            wishes to enter this RazorMovementBehaviour.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RazorMovementBehaviour.Leave">
            <summary>
            Called when the ZeldaEntity that owns this IEntityBehaviour
            wishes to leave this RazorMovementBehaviour.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RazorMovementBehaviour.Reset">
            <summary>
            Resets the state of this RazorMovementBehaviour.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RazorMovementBehaviour.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RazorMovementBehaviour.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RazorMovementBehaviour.Clone(Zelda.Entities.ZeldaEntity)">
            <summary>
            Returns a clone of this RazorMovementBehaviour.
            </summary>
            <param name="newOwner">
            The owner of the cloned IEntityBehaviour.
            </param>
            <returns>
            The cloned IEntityBehaviour.
            </returns>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RazorMovementBehaviour.SetupClone(Zelda.Entities.Behaviours.RazorMovementBehaviour)">
            <summary>
            Setups the given <see cref="T:Zelda.Entities.Behaviours.RazorMovementBehaviour"/> to be a clone of this RazorMovementBehaviour.
            </summary>
            <param name="clone">The RazorMovementBehaviour to setup as a clone of this RazorMovementBehaviour.</param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RazorMovementBehaviour.OnRazorAddedToScene(System.Object,Zelda.ZeldaScene)">
            <summary>
            Gets called when the razor Enemy entity has been added
            to a ZeldaScene.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
            <param name="scene">
            The related ZeldaScene.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RazorMovementBehaviour.OnRazorRemovedFromScene(System.Object,Zelda.ZeldaScene)">
            <summary>
            Gets called when the razor Enemy entity has been removed
            from a ZeldaScene.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
            <param name="scene">
            The related ZeldaScene.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RazorMovementBehaviour.CreateEvents">
            <summary>
            Creates the Event and EventTrigger that are used
            in the <see cref="F:Zelda.Entities.Behaviours.RazorMovementBehaviour.RazorBehaviourType.Triggered"/>.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RazorMovementBehaviour.AddEvents(Zelda.ZeldaScene)">
            <summary>
            Adds the event and eventTrigger used by this RazorMovementBehaviour
            in the <see cref="F:Zelda.Entities.Behaviours.RazorMovementBehaviour.RazorBehaviourType.Triggered"/> 
            to the given scene.
            </summary>
            <param name="scene">
            The related ZeldaScene.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RazorMovementBehaviour.RemoveEvents(Zelda.ZeldaScene)">
            <summary>
            Removes the event and eventTrigger used by this RazorMovementBehaviour
            in the <see cref="F:Zelda.Entities.Behaviours.RazorMovementBehaviour.RazorBehaviourType.Triggered"/> from the given ZeldaScene.
            </summary>
            <param name="scene">
            The related ZeldaScene.
            </param>
        </member>
        <member name="F:Zelda.Entities.Behaviours.RazorMovementBehaviour.maximumBounceCount">
            <summary>
            States the maximum number of bounces if in Triggered Mode.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.RazorMovementBehaviour.direction">
            <summary>
            States the direction the razor entity starts moving once triggered.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.RazorMovementBehaviour.behaviourType">
            <summary>
            States the <see cref="T:Zelda.Entities.Behaviours.RazorMovementBehaviour.RazorBehaviourType"/> this RazorMovementBehaviour uses.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.RazorMovementBehaviour.isMoving">
            <summary>
            Indicates whether this RazorMovementBehaviour makes the razor entity to move currently.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.RazorMovementBehaviour.bounceCount">
            <summary>
            The number of times the razor entity changed direction since it was fired.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.RazorMovementBehaviour.trigger">
            <summary>
            The TileAreaEventTrigger that triggers that is used to trigger
            this RazorMovementBehaviour.
            Only used in <see cref="F:Zelda.Entities.Behaviours.RazorMovementBehaviour.RazorBehaviourType.Triggered"/> mode.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.RazorMovementBehaviour.triggerEvent">
            <summary>
            The RazorTriggerEvent that fires this RazorMovementBehaviour when triggered.
            Only used in <see cref="F:Zelda.Entities.Behaviours.RazorMovementBehaviour.RazorBehaviourType.Triggered"/> mode.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.RazorMovementBehaviour.razor">
            <summary>
            The Enemy entity that is controlled by this RazorMovementBehaviour.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.RazorMovementBehaviour.serviceProvider">
            <summary>
            Provides fast access to game-related services.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Behaviours.RazorMovementBehaviour.RazorBehaviourType">
            <summary>
            States the different movement behaviours supported by the <see cref="T:Zelda.Entities.Behaviours.RazorMovementBehaviour"/>.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.RazorMovementBehaviour.RazorBehaviourType.None">
            <summary>
            No specific movement behaviour has been set.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.RazorMovementBehaviour.RazorBehaviourType.Always">
            <summary>
            The razor is always bouncing back and fourth.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.RazorMovementBehaviour.RazorBehaviourType.Triggered">
            <summary>
            The razor bounces once triggered, then waits until it's triggered again.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.RazorMovementBehaviour.RazorBehaviourType.ManuallyTriggered">
            <summary>
            The razor bounces once triggered, then waits until it's manually triggered again.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Behaviours.RazorMovementBehaviour.RazorTriggerEvent">
            <summary>
            Defines the <see cref="T:Atom.Events.Event"/> that gets triggered
            for a Enemy entity that uses the <see cref="T:Zelda.Entities.Behaviours.RazorMovementBehaviour"/>
            that is sets to have a <see cref="T:Zelda.Entities.Behaviours.RazorMovementBehaviour.RazorBehaviourType"/> of <see cref="F:Zelda.Entities.Behaviours.RazorMovementBehaviour.RazorBehaviourType.Triggered"/>.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RazorMovementBehaviour.RazorTriggerEvent.#ctor(Zelda.Entities.Behaviours.RazorMovementBehaviour)">
            <summary>
            Initializes a new instance of the RazorTriggerEvent class.
            </summary>
            <param name="razorBehaviour">
            The related RazorMovementBehaviour.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RazorMovementBehaviour.RazorTriggerEvent.Trigger(System.Object)">
            <summary>
            Triggers this RazorTriggerEvent.
            </summary>
            <param name="obj">
            The object that has triggered the RazorTriggerEvent.
            </param>
        </member>
        <member name="F:Zelda.Entities.Behaviours.RazorMovementBehaviour.RazorTriggerEvent.razorBehaviour">
            <summary>
            Identifies the related RazorMovementBehaviour.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Behaviours.RemoveAfterAnimationEndedBehaviour">
            <summary>
            Defines an IEntityBehaviour that removes an entity from its current scene
            afters its animation has ended and reset N times.
            </summary>
            <seealso cref="T:Zelda.Entities.Drawing.IAnimatedDrawDataAndStrategy"/>
        </member>
        <member name="P:Zelda.Entities.Behaviours.RemoveAfterAnimationEndedBehaviour.IsActive">
            <summary>
            Gets a value indicating whether this <see cref="T:Zelda.Entities.Behaviours.IEntityBehaviour"/> is currently active.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RemoveAfterAnimationEndedBehaviour.#ctor">
            <summary>
            Initializes a new instance of the RemoveAfterAnimationEndedBehaviour class.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RemoveAfterAnimationEndedBehaviour.#ctor(Zelda.Entities.ZeldaEntity)">
            <summary>
            Initializes a new instance of the RemoveAfterAnimationEndedBehaviour class.
            </summary>
            <param name="entity">
            The entity that should be despawned.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RemoveAfterAnimationEndedBehaviour.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this DespawnAfterAnimationEndedBehaviour.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RemoveAfterAnimationEndedBehaviour.Enter">
            <summary>
            Called when an entity enters this <see cref="T:Zelda.Entities.Behaviours.IEntityBehaviour"/>.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RemoveAfterAnimationEndedBehaviour.OnAnimation_ReachedEnd(Atom.Xna.SpriteAnimation)">
            <summary>
            Called when the current hooked-up animation has ended.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RemoveAfterAnimationEndedBehaviour.Leave">
            <summary>
            Called when an entity leaves this <see cref="T:Zelda.Entities.Behaviours.IEntityBehaviour"/>.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RemoveAfterAnimationEndedBehaviour.Reset">
            <summary>
            Reset this <see cref="T:Zelda.Entities.Behaviours.IEntityBehaviour"/> to its original state.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RemoveAfterAnimationEndedBehaviour.Clone(Zelda.Entities.ZeldaEntity)">
            <summary>
            Returns a clone of this RemoveAfterAnimationEndedBehaviour.
            </summary>
            <param name="newOwner">
            The ZeldaEntity that should be controlled by the cloned IEntityBehaviour.
            </param>
            <returns>
            The cloned IEntityBehaviour.
            </returns>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RemoveAfterAnimationEndedBehaviour.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RemoveAfterAnimationEndedBehaviour.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Entities.Behaviours.RemoveAfterAnimationEndedBehaviour.animation">
            <summary>
            The animation that currently is followed.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.RemoveAfterAnimationEndedBehaviour.entity">
            <summary>
            The ZeldaEntity that should be despawned by this RemoveAfterAnimationEndedBehaviour.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Behaviours.RemoveAfterAnimationEndedNtimesBehaviour">
            <summary>
            Defines an IEntityBehaviour that removes an entity from its current scene
            afters its animation has ended and reset N times.
            </summary>
            <seealso cref="T:Zelda.Entities.Drawing.IAnimatedDrawDataAndStrategy"/>
        </member>
        <member name="P:Zelda.Entities.Behaviours.RemoveAfterAnimationEndedNtimesBehaviour.IsActive">
            <summary>
            Gets a value indicating whether this <see cref="T:Zelda.Entities.Behaviours.IEntityBehaviour"/> is currently active.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Behaviours.RemoveAfterAnimationEndedNtimesBehaviour.TimesAnimationHasToEnded">
            <summary>
            Gets or sets the number of times the animation has to end
            before the entity is removed from its current scene.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RemoveAfterAnimationEndedNtimesBehaviour.#ctor">
            <summary>
            Initializes a new instance of the RemoveAfterAnimationEndedNtimesBehaviour class.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RemoveAfterAnimationEndedNtimesBehaviour.#ctor(Zelda.Entities.ZeldaEntity)">
            <summary>
            Initializes a new instance of the RemoveAfterAnimationEndedNtimesBehaviour class.
            </summary>
            <param name="entity">
            The entity that should be despawned.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RemoveAfterAnimationEndedNtimesBehaviour.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this RemoveAfterAnimationEndedNtimesBehaviour.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RemoveAfterAnimationEndedNtimesBehaviour.Enter">
            <summary>
            Called when an entity enters this <see cref="T:Zelda.Entities.Behaviours.IEntityBehaviour"/>.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RemoveAfterAnimationEndedNtimesBehaviour.OnAnimation_ReachedEnd(Atom.Xna.SpriteAnimation)">
            <summary>
            Called when the current hooked-up animation has ended.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RemoveAfterAnimationEndedNtimesBehaviour.Leave">
            <summary>
            Called when an entity leaves this <see cref="T:Zelda.Entities.Behaviours.IEntityBehaviour"/>.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RemoveAfterAnimationEndedNtimesBehaviour.Reset">
            <summary>
            Reset this <see cref="T:Zelda.Entities.Behaviours.IEntityBehaviour"/> to its original state.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RemoveAfterAnimationEndedNtimesBehaviour.Clone(Zelda.Entities.ZeldaEntity)">
            <summary>
            Returns a clone of this RemoveAfterAnimationEndedNtimesBehaviour.
            </summary>
            <param name="newOwner">
            The ZeldaEntity that should be controlled by the cloned IEntityBehaviour.
            </param>
            <returns>
            The cloned IEntityBehaviour.
            </returns>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RemoveAfterAnimationEndedNtimesBehaviour.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.RemoveAfterAnimationEndedNtimesBehaviour.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Entities.Behaviours.RemoveAfterAnimationEndedNtimesBehaviour.timesAnimationEnded">
            <summary>
            The number of times the animation has ended.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.RemoveAfterAnimationEndedNtimesBehaviour.animation">
            <summary>
            The animation that currently is followed.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.RemoveAfterAnimationEndedNtimesBehaviour.entity">
            <summary>
            The ZeldaEntity that should be despawned by this RemoveAfterAnimationEndedNtimesBehaviour.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Behaviours.ResizeToCurrentSpriteBehaviour">
            <summary>
            Defines an IEntityBehaviour that despawns the entity that it controls
            after a fixed amount of time.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Behaviours.ResizeToCurrentSpriteBehaviour.IsActive">
            <summary>
            Gets a value indicating whether this <see cref="T:Zelda.Entities.Behaviours.IEntityBehaviour"/> is currently active.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.ResizeToCurrentSpriteBehaviour.#ctor">
            <summary>
            Initializes a new instance of the ResizeToCurrentSpriteBehaviour class.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.ResizeToCurrentSpriteBehaviour.#ctor(Zelda.Entities.ZeldaEntity)">
            <summary>
            Initializes a new instance of the ResizeToCurrentSpriteBehaviour class.
            </summary>
            <param name="entity">
            The entity that should be despawned.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.ResizeToCurrentSpriteBehaviour.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this ResizeToCurrentSpriteBehaviour.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.ResizeToCurrentSpriteBehaviour.Set(Atom.Math.Vector2,Atom.Math.Vector2)">
            <summary>
            Sets the collision rectangle of the entity.
            </summary>
            <param name="offset">
            The offset from the entity position to the upper left corner of the collision rectangle.
            </param>
            <param name="size">
            The size of the collision rectangle.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.ResizeToCurrentSpriteBehaviour.Enter">
            <summary>
            Called when an entity enters this <see cref="T:Zelda.Entities.Behaviours.IEntityBehaviour"/>.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.ResizeToCurrentSpriteBehaviour.Leave">
            <summary>
            Called when an entity leaves this <see cref="T:Zelda.Entities.Behaviours.IEntityBehaviour"/>.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.ResizeToCurrentSpriteBehaviour.Reset">
            <summary>
            Reset this <see cref="T:Zelda.Entities.Behaviours.IEntityBehaviour"/> to its original state.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.ResizeToCurrentSpriteBehaviour.Clone(Zelda.Entities.ZeldaEntity)">
            <summary>
            Returns a clone of this ResizeToCurrentSpriteBehaviour
            </summary>
            <param name="newOwner">
            The ZeldaEntity that should be controlled by the cloned IEntityBehaviour.
            </param>
            <returns>
            The cloned IEntityBehaviour.
            </returns>
        </member>
        <member name="M:Zelda.Entities.Behaviours.ResizeToCurrentSpriteBehaviour.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.ResizeToCurrentSpriteBehaviour.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Entities.Behaviours.ResizeToCurrentSpriteBehaviour.entity">
            <summary>
            The ZeldaEntity that should be despawned by this ResizeToCurrentSpriteBehaviour.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Behaviours.TravellingSalesmanBehaviour">
            <summary>
            I
            </summary>
        </member>
        <member name="P:Zelda.Entities.Behaviours.TravellingSalesmanBehaviour.IsActive">
            <summary>
            Gets a value indicating whether this <see cref="T:Zelda.Entities.Behaviours.IEntityBehaviour"/> is currently active.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Behaviours.TravellingSalesmanBehaviour.Route">
            <summary>
            Gets or sets the route the salesman travels on.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Behaviours.TravellingSalesmanBehaviour.IsLooping">
            <summary>
            Gets or sets a value indicating whether when the entity has reached the end of the
            path it should start over at the first Waypoint.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.TravellingSalesmanBehaviour.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the TravellingSalesmanBehaviour class.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.TravellingSalesmanBehaviour.#ctor(Zelda.Entities.ZeldaEntity,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the TravellingSalesmanBehaviour class.
            </summary>
            <param name="entity">
            The entity that is controlled by the new TravellingSalesmanBehaviour.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.TravellingSalesmanBehaviour.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this TravellingSalesmanBehaviour.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.TravellingSalesmanBehaviour.Enter">
            <summary>
            Called when an entity enters this <see cref="T:Zelda.Entities.Behaviours.IEntityBehaviour"/>.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.TravellingSalesmanBehaviour.Leave">
            <summary>
            Called when an entity leaves this <see cref="T:Zelda.Entities.Behaviours.IEntityBehaviour"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException"> 
            If this <see cref="T:Zelda.Entities.Behaviours.IEntityBehaviour"/> is currently not active.
            </exception>
        </member>
        <member name="M:Zelda.Entities.Behaviours.TravellingSalesmanBehaviour.Reset">
            <summary>
            Reset this <see cref="T:Zelda.Entities.Behaviours.IEntityBehaviour"/> to its original state.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.TravellingSalesmanBehaviour.OnSalesmanSeesPlayerStateChanged(System.Object,System.EventArgs)">
            <summary>
            Called when the salesman entity sees or doesn't see the player anymore.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
            <param name="e">
            The EventArgs that contain the event data.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.TravellingSalesmanBehaviour.Clone(Zelda.Entities.ZeldaEntity)">
            <summary>
            Returns a clone of this <see cref="T:Zelda.Entities.Behaviours.IEntityBehaviour"/> for the given <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
            <param name="newOwner">
            The owner of the cloned IEntityBehaviour.
            </param>
            <returns>
            The cloned IEntityBehaviour.
            </returns>
        </member>
        <member name="M:Zelda.Entities.Behaviours.TravellingSalesmanBehaviour.SetupClone(Zelda.Entities.Behaviours.TravellingSalesmanBehaviour)">
            <summary>
            Setups the specified TravellingSalesmanBehaviour to be a clone of this TravellingSalesmanBehaviour.
            </summary>
            <param name="clone">
            The TravellingSalesmanBehaviour to setup as a clone of this TravellingSalesmanBehaviour.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.TravellingSalesmanBehaviour.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.TravellingSalesmanBehaviour.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Entities.Behaviours.TravellingSalesmanBehaviour.waypointPathFollower">
            <summary>
            Responsible for following the Route.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.TravellingSalesmanBehaviour.turnToPlayerBehaviour">
            <summary>
            The sub behaviour of this TravellingSalesmanBehaviour that makes the salesman stop and turn
            to the player.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.TravellingSalesmanBehaviour.entity">
            <summary>
            Represents the entity that is controlled by this TravellingSalesmanBehaviour.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.TravellingSalesmanBehaviour.serviceProvider">
            <summary>
            Provides fast access to game-related services.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Behaviours.TurnToPlayerOnSightBehaviour">
            <summary>
            Implements a simple <see cref="T:Zelda.Entities.Behaviours.IEntityBehaviour"/>
            that turns the entity (using the Transform.Direction) towards the player.
            </summary>
            <remarks>
            The controlled entity is required to have 
            the <see cref="T:Zelda.Entities.Components.Visionable"/> component.
            </remarks>
        </member>
        <member name="F:Zelda.Entities.Behaviours.TurnToPlayerOnSightBehaviour.CheckTime">
            <summary>
            The time between two vision checks.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.TurnToPlayerOnSightBehaviour.CheckTimeInVision">
            <summary>
            The time between two vision checks; when the player was in vision.
            </summary>
        </member>
        <member name="E:Zelda.Entities.Behaviours.TurnToPlayerOnSightBehaviour.InVisionChanged">
            <summary>
            Raised when the <see cref="P:Zelda.Entities.Behaviours.TurnToPlayerOnSightBehaviour.InVision"/> property has changed.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Behaviours.TurnToPlayerOnSightBehaviour.IsActive">
            <summary>
            Gets a value indicating whether this <see cref="T:Zelda.Entities.Behaviours.IEntityBehaviour"/> is currently active.
            </summary>
            <value>The default value is false.</value>
        </member>
        <member name="P:Zelda.Entities.Behaviours.TurnToPlayerOnSightBehaviour.InVision">
            <summary>
            Gets a value indicating whether the player is currently in vision of the entity. 
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.TurnToPlayerOnSightBehaviour.#ctor(Atom.Math.RandMT)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Entities.Behaviours.TurnToPlayerOnSightBehaviour"/> class.
            </summary>
            <param name="rand">
            A random number generator.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.TurnToPlayerOnSightBehaviour.#ctor(Zelda.Entities.ZeldaEntity,Atom.Math.RandMT)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Entities.Behaviours.TurnToPlayerOnSightBehaviour"/> class.
            </summary>
            <param name="entity">
            The entity that is controlled by the new TurnToPlayerOnSightBehaviour.
            </param>
            <param name="rand">
            A random number generator.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="entity"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the given <paramref name="entity"/> doesn't own the <see cref="T:Zelda.Entities.Components.Visionable"/> component.
            </exception>
        </member>
        <member name="M:Zelda.Entities.Behaviours.TurnToPlayerOnSightBehaviour.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this <see cref="T:Zelda.Entities.Behaviours.TurnToPlayerOnSightBehaviour"/>.
            </summary>
            <param name="updateContext">
            The current IUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.TurnToPlayerOnSightBehaviour.TurnTo(Zelda.Entities.PlayerEntity)">
            <summary>
            Turns the entity towards the specified PlayerEntity.
            </summary>
            <param name="player">
            The player to turn to.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.TurnToPlayerOnSightBehaviour.Enter">
            <summary>
            Called when an entity enters this <see cref="T:Zelda.Entities.Behaviours.IEntityBehaviour"/>.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.TurnToPlayerOnSightBehaviour.Leave">
            <summary>
            Called when an entity leaves this <see cref="T:Zelda.Entities.Behaviours.IEntityBehaviour"/>.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.TurnToPlayerOnSightBehaviour.Reset">
            <summary>
            Reset this <see cref="T:Zelda.Entities.Behaviours.IEntityBehaviour"/> to its original state.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Behaviours.TurnToPlayerOnSightBehaviour.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.TurnToPlayerOnSightBehaviour.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.Behaviours.TurnToPlayerOnSightBehaviour.Clone(Zelda.Entities.ZeldaEntity)">
            <summary>
            Returns a clone of this <see cref="T:Zelda.Entities.Behaviours.TurnToPlayerOnSightBehaviour"/> for the given <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
            <param name="newOwner">The owner of the cloned IEntityBehaviour.</param>
            <returns>The cloned IEntityBehaviour.</returns>
        </member>
        <member name="F:Zelda.Entities.Behaviours.TurnToPlayerOnSightBehaviour.initialDirection">
            <summary>
            The direction the entity initialy turned into.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.TurnToPlayerOnSightBehaviour.wasInVision">
            <summary>
            States whether the player was seen by the controlled entity last frame.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.TurnToPlayerOnSightBehaviour.timeLeft">
            <summary>
            The time left until an vision check is done again.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.TurnToPlayerOnSightBehaviour.entity">
            <summary>
            The entity controlled by this TurnToPlayerOnSightBehaviour.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.TurnToPlayerOnSightBehaviour.visionable">
            <summary>
            Identifies the Visionable component of the Entity.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.TurnToPlayerOnSightBehaviour.rand">
            <summary>
            A random number generator.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Behaviours.TurnToPlayerOnSightBehaviour._inVision">
            <summary>
            Represents the storage field of the <see cref="P:Zelda.Entities.Behaviours.TurnToPlayerOnSightBehaviour.InVision"/> property.
            </summary>
        </member>
        <member name="T:Zelda.Entities.BlockTrigger">
            <summary>
            Represents a trigger that executes an event when it is triggered.
            The player can trigger the trigger by attacking or using it.
            </summary>
        </member>
        <member name="P:Zelda.Entities.BlockTrigger.IsEnabled">
            <summary>
            Gets or sets a value indicating whether this BlockTrigger is currently enabled.
            </summary>
        </member>
        <member name="P:Zelda.Entities.BlockTrigger.Event">
            <summary>
            Gets or sets the <see cref="P:Zelda.Entities.BlockTrigger.Event"/> that controls the
            actions when this BlockTrigger gets triggered.
            </summary>
        </member>
        <member name="M:Zelda.Entities.BlockTrigger.#ctor">
            <summary>
            Initializes a new instance of the BlockTrigger class.
            </summary>
        </member>
        <member name="M:Zelda.Entities.BlockTrigger.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this BlockTrigger.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.BlockTrigger.Use(Zelda.Entities.PlayerEntity)">
            <summary>
            Uses this BlockTrigger, and as such triggering it.
            </summary>
            <param name="user">
            The PlayerEntity that wants to use this BlockTrigger.
            </param>
            <returns>
            True if the BlockTrigger has been triggered;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Entities.BlockTrigger.Trigger(System.Object)">
            <summary>
            Triggers this BlockTrigger.
            </summary>
            <param name="obj">
            The object that has triggered this BlockTrigger.
            </param>
            <returns>
            True if the BlockTrigger has been triggered;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Entities.BlockTrigger.OnTriggered(System.Object)">
            <summary>
            Called when this BlockTrigger has been triggered.
            </summary>
            <param name="obj">
            The object that has triggered this BlockTrigger.
            </param>
        </member>
        <member name="M:Zelda.Entities.BlockTrigger.OnAttacked(System.Object,Zelda.Entities.Components.AttackEventArgs)">
            <summary>
            Gets called when this BlockTrigger has been attacked.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
            <param name="e">
            The <see cref="T:Zelda.Entities.Components.AttackEventArgs"/> that contains
            the event data.
            </param>
        </member>
        <member name="M:Zelda.Entities.BlockTrigger.Clone">
            <summary>
            Returns a clone of this BlockTrigger.
            </summary>
            <returns>The cloned ZeldaEntity.</returns>
        </member>
        <member name="F:Zelda.Entities.BlockTrigger.attackable">
            <summary>
            Identifies the Components.Attackable component of this BlockTrigger.
            </summary>
        </member>
        <member name="F:Zelda.Entities.BlockTrigger.timeLeftUntriggerable">
            <summary>
            The time left until this BlockTrigger becomes triggerable again.
            </summary>
        </member>
        <member name="F:Zelda.Entities.BlockTrigger.TimeNotTriggerable">
            <summary>
            The minimum time in seconds between triggering a BlockTrigger again.
            </summary>
        </member>
        <member name="T:Zelda.Entities.BlockTrigger.ReaderWriter">
            <summary>
            Defines the <see cref="T:Zelda.Entities.IEntityReaderWriter"/> for <see cref="T:Zelda.Entities.BlockTrigger"/> entities.
            </summary>
        </member>
        <member name="M:Zelda.Entities.BlockTrigger.ReaderWriter.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the ReaderWriter class.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Entities.BlockTrigger.ReaderWriter.Serialize(Zelda.Entities.BlockTrigger,Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the given object using the given <see cref="T:System.IO.BinaryWriter"/>.
            </summary>
            <param name="entity">
            The entity to serialize.
            </param>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.BlockTrigger.ReaderWriter.Deserialize(Zelda.Entities.BlockTrigger,Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data in the given <see cref="T:System.IO.BinaryWriter"/> to initialize
            the given ZeldaEntity.
            </summary>
            <param name="entity">
            The ZeldaEntity to initialize.
            </param>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="T:Zelda.Entities.Components.AttackEventArgs">
            <summary>
            Represents the data of the <see cref="E:Zelda.Entities.Components.Attackable.Attacked"/> event.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Components.AttackEventArgs.Attacker">
            <summary>
            Identifies the entity that has attacked.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Components.AttackEventArgs.Target">
            <summary>
            Identifies the entity that has been hit by the attack.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Components.AttackEventArgs.TargetStatable">
            <summary>
            Identifies the statable component of the entity that has been hit by the attack.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Components.AttackEventArgs.Attack">
            <summary>
            Identifies the attack that has been used.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Components.AttackEventArgs.DamageResult">
            <summary>
            Stores the damage results of the attack.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Components.AttackEventArgs.#ctor(Zelda.Entities.ZeldaEntity,Zelda.Entities.ZeldaEntity,Zelda.Status.Statable,Zelda.Attacks.Attack,Zelda.Attacks.AttackDamageResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Entities.Components.AttackEventArgs"/> structure.
            </summary>
            <param name="attacker">
            The entity that has attacked.
            </param>
            <param name="target">
            The entity that has been hit by the attack.
            </param>
            <param name="attack">
            The attack that has been used.
            </param>
            <param name="damageResult">
            The damage results of the attack.
            </param>
        </member>
        <member name="T:Zelda.Entities.Components.Attackable">
            <summary>
            Defines a Component that makes its owning <see cref="T:Zelda.Entities.ZeldaEntity"/>
            able to attack and be attacked. This class can't be inherited.
            </summary>
        </member>
        <member name="E:Zelda.Entities.Components.Attackable.Attacked">
            <summary>
            Fires when the attackable <see cref="T:Zelda.Entities.ZeldaEntity"/> has been attacked.
            </summary>
        </member>
        <member name="E:Zelda.Entities.Components.Attackable.AttackHit">
            <summary>
            Fires when the attackable <see cref="T:Zelda.Entities.ZeldaEntity"/> has used an Attack and hit a target.
            </summary>
        </member>
        <member name="E:Zelda.Entities.Components.Attackable.AttackFiring">
            <summary>
            Fires when the attackable <see cref="T:Zelda.Entities.ZeldaEntity"/> has just started using an Attack.
            </summary>
        </member>
        <member name="E:Zelda.Entities.Components.Attackable.AttackFired">
            <summary>
            Fires when the attackable <see cref="T:Zelda.Entities.ZeldaEntity"/> has used an Attack.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Components.Attackable.Statable">
            <summary>
            Gets the <see cref="T:Zelda.Status.Statable"/> component of the <see cref="T:Zelda.Entities.ZeldaEntity"/>
            that owns this <see cref="T:Zelda.Entities.Components.Attackable"/> component. Can be null.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Components.Attackable.InitializeBindings">
            <summary>
            Called when an IComponent has been removed or added to the IEntity that owns this IComponent.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Components.Attackable.NotifyFiring(Zelda.Attacks.Attack)">
            <summary>
            Called when this attackable ZeldaEntity has just started using an attack.
            </summary>
            <param name="attack">
            The attack that was used.
            </param>
        </member>
        <member name="M:Zelda.Entities.Components.Attackable.NotifyFired(Zelda.Attacks.Attack)">
            <summary>
            Called when this attackable ZeldaEntity has used an attack.
            </summary>
            <param name="attack">
            The attack that was used.
            </param>
        </member>
        <member name="M:Zelda.Entities.Components.Attackable.NotifyHit(Zelda.Entities.Components.AttackEventArgs)">
            <summary>
            Called when this attackable ZeldaEntity has attacked another ZeldaEntity.
            </summary>
            <param name="attackEventArgs">
            The AttackEventArgs.
            </param>
        </member>
        <member name="M:Zelda.Entities.Components.Attackable.Attack(Zelda.Attacks.Attack,Zelda.Attacks.AttackDamageResult)">
            <summary>
            Attacks this attackable <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
            <param name="usedAttack">
            The attack that has been used against the attackable ZeldaEntity.
            </param>
            <param name="damageResult">
            The result of the attack.
            </param>
        </member>
        <member name="M:Zelda.Entities.Components.Attackable.Attack(Zelda.Entities.ZeldaEntity,Zelda.Attacks.AttackDamageResult)">
            <summary>
            Attacks this attackable <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
            <remarks>
            This version of the Attack method doesn't provide information about the used Attack.
            </remarks>
            <param name="attacker">The entity that has attacked this attackable entity.</param>
            <param name="damageResult">The result of the attack.</param>
        </member>
        <member name="M:Zelda.Entities.Components.Attackable.Attack(Zelda.Entities.IAttackableEntity,Zelda.Attacks.AttackDamageResult)">
            <summary>
            Attacks this attackable <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
            <remarks>
            This version of the Attack method doesn't provide information about the used Attack.
            </remarks>
            <param name="attacker">The entity that has attacked this attackable entity.</param>
            <param name="damageResult">The result of the attack.</param>
        </member>
        <member name="F:Zelda.Entities.Components.Attackable.statable">
            <summary>
            Identifies the <see cref="T:Zelda.Status.Statable"/> component of the Entity that owns this component.
            Can be null.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Components.Behaveable">
            <summary>
            Defines a <see cref="T:Atom.Components.Component"/> that allows the Entity that owns 
            the <see cref="T:Zelda.Entities.Components.Behaveable"/> component to be controlled by an <see cref="T:Zelda.Entities.Behaviours.IEntityBehaviour"/>.
            This class can't be inherited.
            </summary> 
        </member>
        <member name="P:Zelda.Entities.Components.Behaveable.Behaviour">
            <summary>
            Gets or sets the <see cref="T:Zelda.Entities.Behaviours.IEntityBehaviour"/> that controls how the Entity acts in the world.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Components.Behaveable.Update(Atom.IUpdateContext)">
            <summary>
            Updates this <see cref="T:Zelda.Entities.Components.Behaveable"/> component.
            </summary>
            <param name="updateContext">
            The current Atom.IUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Components.Behaveable.GetBehaviour(System.Type)">
            <summary>
            Tries to get the <see cref="T:Zelda.Entities.Behaviours.IEntityBehaviour"/> or sub <see cref="T:Zelda.Entities.Behaviours.IEntityBehaviour"/>
            of the given <paramref name="type"/>.
            </summary>
            <param name="type">
            The type of the IEntityBehaviour to get.
            </param>
            <returns>
            The requested IEntityBehaviour; or null.
            </returns>
        </member>
        <member name="M:Zelda.Entities.Components.Behaveable.Reset">
            <summary>
            Resets the current <see cref="P:Zelda.Entities.Components.Behaveable.Behaviour"/> of this Behaveable component.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Components.Behaveable.Enter">
            <summary>
            Enters the current <see cref="P:Zelda.Entities.Components.Behaveable.Behaviour"/> of this Behaveable component.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Components.Behaveable.SetupClone(Zelda.Entities.Components.Behaveable)">
            <summary>
            Setups the given <see cref="T:Zelda.Entities.Components.Behaveable"/> component to be a clone of this <see cref="T:Zelda.Entities.Components.Behaveable"/>.
            </summary>
            <param name="clone">
            The <see cref="T:Zelda.Entities.Components.Behaveable"/> component to setup as a clone of this <see cref="T:Zelda.Entities.Components.Behaveable"/>.
            </param>
        </member>
        <member name="M:Zelda.Entities.Components.Behaveable.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.Components.Behaveable.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Entities.Components.Behaveable.behaviour">
            <summary>
            Internal storage the <see cref="P:Zelda.Entities.Components.Behaveable.Behaviour"/> property.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Components.ZeldaCollision">
            <summary>
            Defines the <see cref="T:Atom.Components.Component"/> that is responsible 
            for descriping the collision area of the <see cref="T:Atom.Components.Entity"/>.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Components.ZeldaCollision.IsSolid">
            <summary>
            Gets or sets a value indicating whether the ZeldaEntity is a solid object.
            </summary>
            <value>
            The default value is true.
            </value>
        </member>
        <member name="M:Zelda.Entities.Components.ZeldaCollision.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.Components.ZeldaCollision.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.Components.ZeldaCollision.IntersectsUnstrict(Zelda.Entities.Components.ZeldaCollision)">
            <summary>
            Returns whether the <see cref="P:Atom.Components.Collision.Collision2.Rectangle"/> of the given <see cref="T:Zelda.Entities.Components.ZeldaCollision"/> component
            intersects with the <see cref="P:Atom.Components.Collision.Collision2.Rectangle"/> of this <see cref="T:Zelda.Entities.Components.ZeldaCollision"/> component.
            </summary>
            <remarks>
            This method provides an unstrict intersection test;
            as such the collision rectangles are considered to intersect even with a small margin of error.
            </remarks>
            <param name="collision">
            The collision component to test against.
            </param>
            <returns>
            true if the rectangles intersect;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Entities.Components.ZeldaCollision.IntersectsUnstrict2px(Zelda.Entities.Components.ZeldaCollision)">
            <summary>
            Returns whether the <see cref="P:Atom.Components.Collision.Collision2.Rectangle"/> of the given <see cref="T:Zelda.Entities.Components.ZeldaCollision"/> component
            intersects with the <see cref="P:Atom.Components.Collision.Collision2.Rectangle"/> of this <see cref="T:Zelda.Entities.Components.ZeldaCollision"/> component.
            </summary>
            <remarks>
            This method provides an unstrict intersection test;
            as such the collision rectangles are considered to intersect even with a small margin of error.
            </remarks>
            <param name="collision">
            The collision component to test against.
            </param>
            <returns>
            true if the rectangles intersect;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Entities.Components.ZeldaCollision.IntersectsUnstrict(Zelda.Entities.Components.ZeldaCollision,System.Single)">
            <summary>
            Returns whether the <see cref="P:Atom.Components.Collision.Collision2.Rectangle"/> of the given <see cref="T:Zelda.Entities.Components.ZeldaCollision"/> component
            intersects with the <see cref="P:Atom.Components.Collision.Collision2.Rectangle"/> of this <see cref="T:Zelda.Entities.Components.ZeldaCollision"/> component.
            </summary>
            <param name="collision">
            The collision component to test against.
            </param>
            <param name="tolerance">
            The tolerance to allow.
            </param>
            <returns>
            true if the rectangles intersect;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Entities.Components.ZeldaCollision.Intersects(Atom.Math.Circle@)">
            <summary>
            Returns whether the <see cref="P:Atom.Components.Collision.Collision2.Rectangle"/> of the given <see cref="T:Zelda.Entities.Components.ZeldaCollision"/> component
            intersects with the given Circle.
            </summary>
            <param name="circle">
            The circle to test against.
            </param>
            <returns>
            true if the circle intersects;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Entities.Components.ZeldaCollision.SetupClone(Zelda.Entities.Components.ZeldaCollision)">
            <summary>
            Setups the given ZeldaCollision component to be a clone of this ZeldaCollision.
            </summary>
            <param name="clone">
            The ZeldaCollision component to setup as a clone of this ZeldaCollision.
            </param>
        </member>
        <member name="F:Zelda.Entities.Components.ZeldaCollision.isSolid">
            <summary>
            Identifies the storage field of the IsSolid property.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Components.Killable">
            <summary>
            Defines the <see cref="T:Atom.Components.Component"/> that makes a <see cref="T:Zelda.Entities.ZeldaEntity"/> killable (by the player).
            This class can't be inherited.
            </summary>
            <remarks>
            The entities that attack the killable ZeldaEntity
            may want to implement the <see cref="T:Zelda.Entities.INotifyKilledEntity"/> if they want to be informed.
            </remarks>
        </member>
        <member name="E:Zelda.Entities.Components.Killable.Killed">
            <summary>
            Fired when the ZeldaEntity has been killed.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Components.Killable.Experience">
            <summary>
            Gets or sets the experience the ZeldaEntity gives when killed.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Components.Killable.InitializeBindings">
            <summary>
            Called when an IComponent has been removed or added to the <see cref="T:Atom.Components.IEntity"/> that owns this IComponent.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Components.Killable.OnAttacked(System.Object,Zelda.Entities.Components.AttackEventArgs)">
            <summary>
            Gets called when the killable ZeldaEntity has been attacked.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The AttackedEventArgs that contains the event data.</param>
        </member>
        <member name="M:Zelda.Entities.Components.Killable.SetupClone(Zelda.Entities.Components.Killable)">
            <summary>
            Setups the given <see cref="T:Zelda.Entities.Components.Killable"/> component to be a clone of this <see cref="T:Zelda.Entities.Components.Killable"/> component.
            </summary>
            <param name="clone">
            The <see cref="T:Zelda.Entities.Components.Killable"/> component to setup as a clone of this <see cref="T:Zelda.Entities.Components.Killable"/> component.
            </param>
        </member>
        <member name="M:Zelda.Entities.Components.Killable.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.Components.Killable.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Entities.Components.Killable.statable">
            <summary>
            Identifies the <see cref="T:Zelda.Status.Statable"/> component.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Components.Killable.attackable">
            <summary>
            Identifies the <see cref="T:Zelda.Entities.Components.Attackable"/> component.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Components.Lootable">
            <summary>
            Defines the <see cref="T:Zelda.Entities.Components.ZeldaComponent"/> that makes a <see cref="T:Zelda.Entities.ZeldaEntity"/> lootable (by the player).
            This class can't be inherited.
            </summary>
            <remarks>
            This component must be Setup before it can be used correctly.
            </remarks>
        </member>
        <member name="M:Zelda.Entities.Components.Lootable.Setup(Zelda.IZeldaServiceProvider)">
            <summary>
            Setups this <see cref="T:Zelda.Entities.Components.Lootable"/> component.
            </summary>
            <param name="serviceProvider">
            Provides access to game-related services.
            </param>
        </member>
        <member name="P:Zelda.Entities.Components.Lootable.DropMode">
            <summary>
            Gets or sets a value that indicates how many items 
            the lootable <see cref="T:Zelda.Entities.ZeldaEntity"/> may drop.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Components.Lootable.DropRange">
            <summary>
            Gets or sets the radius of the circle, centering at the collision center of the parent entity,
            in which items will drop.
            </summary>
            <value>The default value is 5.</value>
        </member>
        <member name="P:Zelda.Entities.Components.Lootable.Loot">
            <summary>
            Gets the <see cref="T:Zelda.Items.LootTable"/> of the lootable ZeldaEntity.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Components.Lootable.DropLoot(Atom.Math.RandMT)">
            <summary>
            Drops loot of the <see cref="T:Zelda.Entities.Components.Lootable"/> ZeldaEntity.
            </summary>
            <param name="rand">A random number generator.</param>
        </member>
        <member name="M:Zelda.Entities.Components.Lootable.DropItems(System.Int32,Atom.Math.RandMT)">
            <summary>
            Drops N random items.
            </summary>
            <param name="dropCount">
            The number of items to drop.
            </param>
            <param name="rand">
            A random number generator.
            </param>
        </member>
        <member name="M:Zelda.Entities.Components.Lootable.SpawnItem(Zelda.Items.ItemInstance,Atom.Math.Vector2,Atom.Math.RandMT)">
            <summary>
            Spawns the given Item at the given position.
            </summary>
            <param name="item">
            The item to spawn.
            </param>
            <param name="dropPosition">
            The position the item should drop at.
            </param>
            <param name="rand">
            A random number generator.
            </param>
        </member>
        <member name="M:Zelda.Entities.Components.Lootable.FindItemSpawnPosition(Zelda.Entities.MapItem,Atom.Math.Vector2,Atom.Math.RandMT)">
            <summary>
            Attempts to find a reachable spawn position for an item.
            </summary>
            <param name="mapItem">
            The item that will spawn.
            </param>
            <param name="dropPosition">
            The central drop position.
            </param>
            <param name="rand">
            A random number generator.
            </param>
            <returns>
            The position at which the item should spawn.
            </returns>
        </member>
        <member name="M:Zelda.Entities.Components.Lootable.GetItemDropCount(Atom.Math.RandMT)">
            <summary>
            Receives a value that states how many <see cref="T:Zelda.Items.Item"/>s the lootable ZeldaEntity should drop.
            </summary>
            <param name="rand">A random number generator.</param>
            <returns>
            How many <see cref="T:Zelda.Items.Item"/>s the lootable ZeldaEntity should drop.
            </returns>
        </member>
        <member name="M:Zelda.Entities.Components.Lootable.SetupClone(Zelda.Entities.Components.Lootable)">
            <summary>
            Setups the given Lootable component to be a clone
            of this Lootable component.
            </summary>
            <param name="lootable">
            The Lootable component to setup as a clone.
            </param>
        </member>
        <member name="M:Zelda.Entities.Components.Lootable.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.Components.Lootable.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Entities.Components.Lootable.dropRange">
            <summary>
            The radius of the circle, centering at the collision center of the parent entity,
            in which items will drop.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Components.Lootable.loot">
            <summary>
            Stores the <see cref="T:Zelda.Items.LootTable"/> of the lootable ZeldaEntity.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Components.Moveable">
            <summary>
            Defines the <see cref="T:Atom.Components.Component"/> that allows an Entity
            to move around the Scene. This class can't be inherited.
            </summary>
        </member>
        <member name="E:Zelda.Entities.Components.Moveable.MapCollisionOccurred">
            <summary>
            Raised when the Entity has moved against a tile that has stopped his movement.
            </summary>
        </member>
        <member name="E:Zelda.Entities.Components.Moveable.SpeedChanged">
            <summary>
            Raised when the movement speed of the moveable entity has changed.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Components.Moveable.TileHandler">
            <summary>
            Gets or sets the <see cref="T:Zelda.IZeldaTileHandler"/> the <see cref="T:Zelda.Entities.Components.Moveable"/> component uses 
            to interact with the Tile Map of the Scene.
            </summary>
            <exception cref="T:System.ArgumentNullException">Set: If the given value is null.</exception>
        </member>
        <member name="P:Zelda.Entities.Components.Moveable.Direction">
            <summary>
            Gets or sets the direction the Entity is facing.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Components.Moveable.CanSwim">
            <summary>
            Gets or sets a value indicating whether the Entity can swim in deep water.
            </summary>
            <value>The default value is false.</value>
        </member>
        <member name="P:Zelda.Entities.Components.Moveable.CanCurrentlySwim">
            <summary>
            Gets a value indicating whether the moveable Entity can currently swim,
            taking its current state into account.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Components.Moveable.CanCurrentlySwimStateFunction">
            <summary>
            Gets or sets the function that can be used to state
            whether the moveable Entity can currently swim. 
            </summary>
            <value>
            The default value is null.
            </value>
        </member>
        <member name="P:Zelda.Entities.Components.Moveable.IsSwimming">
            <summary>
            Gets a value indicating whether the Entity is currently swimming in deep water.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Components.Moveable.IsInShallowWater">
            <summary>
            Gets a value indicating whether the Entity currently is in shallow (moveable) water.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Components.Moveable.CanBePushed">
            <summary>
            Gets or sets a value indicating whether the Entity can be pushed.
            </summary>
            <value>The default value is true.</value>
        </member>
        <member name="P:Zelda.Entities.Components.Moveable.PushingForceModifier">
            <summary>
            Gets or sets the value all pushing forces 
            applied to this moveable Entity are multiplied by.
            </summary>
            <value>The default value is 1.</value>
        </member>
        <member name="P:Zelda.Entities.Components.Moveable.CollidesWithMap">
            <summary>
            Gets or sets a value indicating whether the Entity is solid
            and as such collides with the Tile Map of the Scene.
            </summary>
            <value>The default value is true.</value>
        </member>
        <member name="P:Zelda.Entities.Components.Moveable.CanMove">
            <summary>
            Gets or sets a value indicating whether the Entity can currently move.
            </summary>
            <value>The default value is true.</value>
        </member>
        <member name="P:Zelda.Entities.Components.Moveable.CanSlide">
            <summary>
            Gets or sets a value indicating whether the Entity can slide
            around the edges of a tile.
            </summary>
            <value>The default value is true.</value>
        </member>
        <member name="P:Zelda.Entities.Components.Moveable.CanChangeFloor">
            <summary>
            Gets or sets a value indicating whether the Entity can change between TileMapFloors.
            </summary>
            <value>The default value is true.</value>
        </member>
        <member name="P:Zelda.Entities.Components.Moveable.Speed">
            <summary>
            Gets or sets the current movement speed of the Entity
            </summary>
        </member>
        <member name="P:Zelda.Entities.Components.Moveable.BaseSpeed">
            <summary>
            Gets or sets the base(non modified) movement speed of the Entity.
            </summary>   
        </member>
        <member name="P:Zelda.Entities.Components.Moveable.SpeedSwimming">
            <summary>
            Gets the movement speed while the Entity is swimming in deep water.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Components.Moveable.GetStateModifiedSpeed">
            <summary>
            Gets the movement speed of the moveable Entity,
            taking into account the current actions/state of the entity and the world.
            </summary>
            <returns>
            The current speed.
            </returns>
        </member>
        <member name="P:Zelda.Entities.Components.Moveable.IsStanding">
            <summary>
            Gets a value indicating whether the Entity is currently standing.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Components.Moveable.WasStanding">
            <summary>
            Gets a value indicating whether the Entity was standing in the last frame.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Components.Moveable.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Entities.Components.Moveable"/> class.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Components.Moveable.InitializeBindings">
            <summary>
            Called when an IComponent has been removed or added to the <see cref="T:Atom.Components.IEntity"/> that owns this IComponent.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Components.Moveable.Update(Atom.IUpdateContext)">
            <summary>
            Updates this <see cref="T:Zelda.Entities.Components.Moveable"/> component.
            </summary>
            <param name="updateContext">
            The current Atom.IUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Components.Moveable.PreUpdate(Atom.IUpdateContext)">
            <summary>
            Gets called before <see cref="M:Zelda.Entities.Components.Moveable.Update(Atom.IUpdateContext)"/> is called.
            </summary>
            <param name="updateContext">
            The current Atom.IUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Components.Moveable.UpdatePositionMap(Atom.IUpdateContext)">
            <summary>
            Integrates the current velocity of the Entity,
            checking for collision with tiles.
            </summary>
            <param name="updateContext">
            The current IUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Components.Moveable.UpdatePositionMapSlide(Atom.Scene.Tiles.TileMapDataLayer)">
            <summary>
            Updates the position of the player by sliding along a tile.
            </summary>
            <param name="actionLayer">
            The current Action Layer.
            </param>
        </member>
        <member name="M:Zelda.Entities.Components.Moveable.UpdatePushing(Atom.IUpdateContext)">
            <summary>
            Updates the Entity's active pushing effect.
            </summary>
            <param name="updateContext">
            The current IUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Components.Moveable.Move(System.Single,System.Single,System.Single)">
            <summary> 
            Moves the Entity without altering its this.Direction.
            </summary>
            <param name="speedX"> The movement speed on the x-axis. </param>
            <param name="speedY"> The movement speed on the y-axis. </param>
            <param name="frameTime">The time the last frame took in seconds.</param>
        </member>
        <member name="M:Zelda.Entities.Components.Moveable.Move(Atom.Math.Vector2,System.Single)">
            <summary>
            Moves the Entity without altering its this.Direction.
            </summary>
            <param name="speed"> The movement speed. </param>
            <param name="frameTime">The time the last frame took in seconds.</param>
        </member>
        <member name="M:Zelda.Entities.Components.Moveable.Move(Atom.Math.Vector2,System.Single,Atom.Math.Vector2@)">
            <summary>
            Moves the Entity without altering its this.Direction.
            </summary>
            <param name="speed"> The movement speed. </param>
            <param name="frameTime">The time the last frame took in seconds.</param>
            <param name="change">
            Will store the change in velocity.
            </param>
        </member>
        <member name="M:Zelda.Entities.Components.Moveable.MoveDir(Atom.Math.Vector2,System.Single)">
            <summary>
            Moves the Entity into the specified this.Direction.
            </summary>
            <param name="direction">
            The this.Direction to move to. Must be a normalised this.Direction vector. 
            </param>
            <param name="frameTime">The time the last frame took in seconds.</param>
        </member>
        <member name="M:Zelda.Entities.Components.Moveable.MoveDir(Atom.Math.Direction4,System.Single)">
            <summary>
            Moves this object into the specified this.Direction.
            </summary>
            <param name="direction">
            The this.Direction to move into.
            </param>
            <param name="frameTime">
            The time the last frame took in seconds.
            </param>
        </member>
        <member name="M:Zelda.Entities.Components.Moveable.MoveDir(Atom.Math.Direction8,System.Single)">
            <summary>
            Moves the specified Entity into the specified this.Direction.
            </summary>
            <param name="dir"> The this.Direction to move to. </param>
            <param name="frameTime">The time the last frame took in seconds.</param>
        </member>
        <member name="M:Zelda.Entities.Components.Moveable.MoveTo(Atom.Math.Vector2,System.Single)">
            <summary>
            Moves the Entity on a straight line to the specified <paramref name="location"/>.
            </summary>
            <param name="location"> The location to move to. </param>
            <param name="frameTime">The time the last frame took in seconds.</param>
        </member>
        <member name="M:Zelda.Entities.Components.Moveable.MoveToCenter(Atom.Math.Vector2,System.Single)">
            <summary>
            Moves the Entity on a straight line to the specified <paramref name="location"/>.
            </summary>
            <param name="location"> The location to move to. </param>
            <param name="frameTime">The time the last frame took in seconds.</param>
        </member>
        <member name="M:Zelda.Entities.Components.Moveable.MoveLeft(System.Single)">
            <summary>
            Moves the Entity left/west.
            </summary>
            <param name="frameTime">The time the last frame took in seconds.</param>
        </member>
        <member name="M:Zelda.Entities.Components.Moveable.MoveRight(System.Single)">
            <summary>
            Moves the Entity right/east.
            </summary>
            <param name="frameTime">The time the last frame took in seconds.</param>
        </member>
        <member name="M:Zelda.Entities.Components.Moveable.MoveUp(System.Single)">
            <summary>
            Moves the Entity up/north.
            </summary>
            <param name="frameTime">The time the last frame took in seconds.</param>
        </member>
        <member name="M:Zelda.Entities.Components.Moveable.MoveDown(System.Single)">
            <summary>
            Moves the Entity down/south.
            </summary>
            <param name="frameTime">The time the last frame took in seconds.</param>
        </member>
        <member name="M:Zelda.Entities.Components.Moveable.MoveLeftUp(System.Single)">
            <summary>
            Moves the Entity left/west and up/north.
            </summary>
            <param name="frameTime">The time the last frame took in seconds.</param>
        </member>
        <member name="M:Zelda.Entities.Components.Moveable.MoveUpLeft(System.Single)">
            <summary>
            Moves the Entity up/north and left/west.
            </summary>
            <param name="frameTime">The time the last frame took in seconds.</param>
        </member>
        <member name="M:Zelda.Entities.Components.Moveable.MoveRightUp(System.Single)">
            <summary>
            Moves the Entity right/east and up/north.
            </summary>
            <param name="frameTime">The time the last frame took in seconds.</param>
        </member>
        <member name="M:Zelda.Entities.Components.Moveable.MoveUpRight(System.Single)">
            <summary>
            Moves the Entity up/north and right/east.
            </summary>
            <param name="frameTime">The time the last frame took in seconds.</param>
        </member>
        <member name="M:Zelda.Entities.Components.Moveable.MoveLeftDown(System.Single)">
            <summary>
            Moves the Entity left/west and down/south.
            </summary>
            <param name="frameTime">The time the last frame took in seconds.</param>
        </member>
        <member name="M:Zelda.Entities.Components.Moveable.MoveDownLeft(System.Single)">
            <summary>
            Moves the Entity down/south and left/west.
            </summary>
            <param name="frameTime">The time the last frame took in seconds.</param>
        </member>
        <member name="M:Zelda.Entities.Components.Moveable.MoveRightDown(System.Single)">
            <summary>
            Moves the Entity right/east and down/south.
            </summary>
            <param name="frameTime">The time the last frame took in seconds.</param>
        </member>
        <member name="M:Zelda.Entities.Components.Moveable.MoveDownRight(System.Single)">
            <summary>
            Moves the Entity down/south and right/east.
            </summary>
            <param name="frameTime">The time the last frame took in seconds.</param>
        </member>
        <member name="M:Zelda.Entities.Components.Moveable.Push(Atom.Math.Vector2)">
            <summary>
            Pushes the Entity using the given <paramref name="force"/>.
            </summary>
            <param name="force">The force to apply.</param>
        </member>
        <member name="M:Zelda.Entities.Components.Moveable.Push(System.Single,Atom.Math.Direction4)">
            <summary>
            Pushes the Entity with the given power into the given direction.
            </summary>
            <param name="power">The power of the push.</param>
            <param name="direction">The direction of the push.</param>
        </member>
        <member name="M:Zelda.Entities.Components.Moveable.ResetPush">
            <summary>
            Resets the current pushing value affecting the moveable ZeldaEntity.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Components.Moveable.MoveFloorUp">
            <summary>
            Moves the Entity one TileMapFloor up.
            </summary>
            <returns>
            true if the entity has moved one floor up;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Entities.Components.Moveable.MoveFloorDown">
            <summary>
            Moves the Entity one TileMapFloor down.
            </summary>
            <returns>
            true if the entity has moved one floor down;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Entities.Components.Moveable.ChangeFloor(System.Int32)">
            <summary>
            Changes the floor of the Entity.
            </summary>
            <param name="newFloorNumber">
            The floor number to change to.
            </param>
            <returns>
            true if the entity has changed to the specified floor;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Entities.Components.Moveable.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.Components.Moveable.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.Components.Moveable.SetupClone(Zelda.Entities.Components.Moveable)">
            <summary>
            Setups the given <see cref="T:Zelda.Entities.Components.Moveable"/> object to be a clone of this <see cref="T:Zelda.Entities.Components.Moveable"/>.
            </summary>
            <param name="clone">
            The object to setup as a clone.
            </param>
        </member>
        <member name="M:Zelda.Entities.Components.Moveable.IsWalkableAt(Atom.Math.Vector2,Atom.Scene.Tiles.TileMapDataLayer)">
            <summary>
            Gets a value indicating whether the moveable entity could move at the given position on the given action layer.
            </summary>
            <param name="position">
            The world space position to check.
            </param>
            <param name="actionLayer">
            The action layer to check on.
            </param>
            <returns>
            True if the moveable entity could walk; -or- otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Entities.Components.Moveable.OnMapCollisionOccurred">
            <summary>
            Fires the <see cref="E:Zelda.Entities.Components.Moveable.MapCollisionOccurred"/> event.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Components.Moveable.velocity">
            <summary>
            The current movement velocity of the Entity.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Components.Moveable.tileHandler">
            <summary>
            The IZeldaTileHandler used by the Moveable.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Components.Moveable.isPushed">
            <summary>
            States whether the Entity is currently under a Pushing effect.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Components.Moveable.pushingValue">
            <summary>
            Stores the currently active pushing value.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Components.Moveable.pushingForceModifier">
            <summary>
            The value all pushing forces applied to this moveable entity are multiplied by.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Components.Moveable.speed">
            <summary>
            The movement speed of the Entity.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Components.Moveable.baseSpeed">
            <summary>
            The movement speed of the Entity.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Components.Moveable.tileSlideSpeed">
            <summary>
            The movement speed when sliding against a solid tile.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Components.Moveable.upliqueMovementMod">
            <summary>
            The modifier that is applied to uplique movement.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Components.Moveable.isStanding">
            <summary>
            States whether the Entity is currently standing.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Components.Moveable.wasStanding">
            <summary>
            States whether the Entity was standing in the last frame.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Components.Moveable.transform">
            <summary>
            Identifies the ZeldaTransform component of the Entity that owns this <see cref="T:Zelda.Entities.Components.Moveable"/> component.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Components.Moveable.collision">
            <summary>
            Identifies the ZeldaTransform component of the Entity that owns this <see cref="T:Zelda.Entities.Components.Moveable"/> component.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Components.QuestsGiveable">
            <summary>
            Defines a <see cref="T:Zelda.Entities.Components.ZeldaComponent"/> that allows
            a <see cref="T:Zelda.Entities.ZeldaEntity"/> to give out <see cref="T:Zelda.Quests.Quest"/>s.
            This class can't be inherited.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Components.QuestsGiveable.Setup(Zelda.IZeldaServiceProvider)">
            <summary>
            Setups this QuestsGiveable component.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="P:Zelda.Entities.Components.QuestsGiveable.QuestNames">
            <summary>
            Gets the list of names that uniquely identifiy the Quests this QuestsGiveable provides.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Components.QuestsGiveable.Quests">
            <summary>
            Gets the (loaden) Quests this QuestsGiveable provides.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Components.QuestsGiveable.LoadRelevantQuests(Zelda.Quests.QuestLog)">
            <summary>
            Loads all quests which are needed. 
            </summary>
            <remarks>
            Quests which already have been finished aren't loaded.
            </remarks>
            <param name="questLog">
            The <see cref="T:Zelda.Quests.QuestLog"/> that stores all quest information.
            </param>
        </member>
        <member name="M:Zelda.Entities.Components.QuestsGiveable.SetupClone(Zelda.Entities.Components.QuestsGiveable)">
            <summary>
            Setups the given <see cref="T:Zelda.Entities.Components.QuestsGiveable"/> component
            to be a clone of this QuestsGiveable.
            </summary>
            <param name="clone">
            The <see cref="T:Zelda.Entities.Components.QuestsGiveable"/> component
            to be a clone of this QuestsGiveable.
            </param>
        </member>
        <member name="M:Zelda.Entities.Components.QuestsGiveable.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.Components.QuestsGiveable.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Entities.Components.QuestsGiveable.questNames">
            <summary>
            The names that uniquely identify the <see cref="T:Zelda.Quests.Quest"/>s this QuestsGiveable provides.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Components.QuestsGiveable.quests">
            <summary>
            The <see cref="T:Zelda.Quests.Quest"/>s which have been loaden for this QuestsGiveable.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Components.QuestsGiveable.relevantQuestsLoaden">
            <summary>
            States whether all relevant <see cref="T:Zelda.Quests.Quest"/>s have been loaden.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Components.QuestsGiveable.serviceProvider">
            <summary>
            Provides fast access to game-related services.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Components.Respawnable">
            <summary>
            Defines a <see cref="T:Zelda.Entities.Components.ZeldaComponent"/> that allows
            a <see cref="T:Zelda.Entities.ZeldaEntity"/> to be respawned.
            This class can't be inherited.
            </summary>
        </member>
        <member name="E:Zelda.Entities.Components.Respawnable.RespawnNeeded">
            <summary>
            Fired when the respawnable ZeldaEntity wants to be respawned.
            </summary>
        </member>
        <member name="E:Zelda.Entities.Components.Respawnable.Respawned">
            <summary>
            Fired when the respawnable ZeldaEntity has been respawned.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Components.Respawnable.RespawnTime">
            <summary>
            Gets or sets the time in seconds it takes for the ZeldaEntity to respawn.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Components.Respawnable.NotifyRespawnNeeded">
            <summary>
            Notifies the respawnable ZeldaEntity that 
            a respawn is needed.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Components.Respawnable.CanRespawnAt(Zelda.ZeldaScene,Atom.Math.Vector2,System.Int32,System.Boolean)">
            <summary>
            Gets wgetger the respawnable <see cref="T:Zelda.Entities.ZeldaEntity"/>
            can spawn at the given position without any problems.
            </summary>
            <param name="scene">
            The related ZeldaScene.
            </param>
            <param name="position">
            The respawn position.
            </param>
            <param name="floorNumber">
            The number of the floor to spawn at.
            </param>
            <param name="isInitialSpawn">
            States whether the respawn is going to be the initial spawn of the ZeldaEntity.
            </param>
            <returns>
            true if the respawnable ZeldaEntity can respawn at the given position;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Entities.Components.Respawnable.Respawn(Zelda.ZeldaScene,Atom.Math.Vector2,System.Int32)">
            <summary>
            Respawns the respawnable <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>    
            <param name="scene">
            The related ZeldaScene.
            </param>
            <param name="position">
            The respawn position.
            </param>
            <param name="floorNumber">
            The number of the floor to spawn at.
            </param>
        </member>
        <member name="M:Zelda.Entities.Components.Respawnable.SetupClone(Zelda.Entities.Components.Respawnable)">
            <summary>
            Setups the given <see cref="T:Zelda.Entities.Components.Respawnable"/> component
            to be a clone of this <see cref="T:Zelda.Entities.Components.Respawnable"/> component.
            </summary>
            <param name="clone">
            The <see cref="T:Zelda.Entities.Components.Respawnable"/> component to setup as a clone.
            </param>
        </member>
        <member name="M:Zelda.Entities.Components.Respawnable.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.Components.Respawnable.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Entities.Components.Respawnable.respawnTime">
            <summary>
            The time in seconds it takes for the ZeldaEntity to respawn.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Components.SceneStatusStoreable">
            <summary>
            Adds the functionallity of storing the entity within the dynamic scene status storage;
            instead of the static map file.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Components.SceneStatusStoreable.Stored">
            <summary>
            Gets or sets a value indicating whether the entity is currently stored by the scene status.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Components.SceneStatusStoreable.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.Components.SceneStatusStoreable.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="T:Zelda.Entities.Components.Talkable">
            <summary>
            Defines a <see cref="T:Zelda.Entities.Components.ZeldaComponent"/> that allows
            a <see cref="T:Zelda.Entities.ZeldaEntity"/> to talk to the player.
            This class can't be inherited.
            </summary>
            <remarks>
            -- Developer Remarks --
            The internal implementation of this class is a bit messy.
            It depends on the exact format of the <see cref="T:Zelda.Factions.ReputationLevel"/> enumeration.
            </remarks>
        </member>
        <member name="F:Zelda.Entities.Components.Talkable.ReputationLevelCount">
            <summary>
            States the number of different reputation levels.
            </summary>
            <remarks>
            The talkable ZeldaEntity may say different things depending 
            on the current Reputation Level of the player towards the ZeldaEntity.
            </remarks>
        </member>
        <member name="M:Zelda.Entities.Components.Talkable.GetText(Zelda.Factions.ReputationLevel,Atom.Math.RandMT)">
            <summary>
            Tries to get the text the ZeldaEntity says.
            </summary>
            <param name="level">
            The current <see cref="T:Zelda.Factions.ReputationLevel"/> of the player
            towards the talkable ZeldaEntity.
            </param>
            <param name="rand">
            A random number generator.
            </param>
            <returns>
            The text the talkable ZeldaEntity says;
            or null if the talkable ZeldaEntity doesn't want to talk.
            </returns>
        </member>
        <member name="M:Zelda.Entities.Components.Talkable.GetTextList(Zelda.Factions.ReputationLevel)">
            <summary>
            Gets the list of text for the given <see cref="T:Zelda.Factions.ReputationLevel"/>.
            </summary>
            <param name="level">
            The <see cref="T:Zelda.Factions.ReputationLevel"/> to get the list of text for.
            </param>
            <returns>
            The list of text for the given <paramref name="level"/>. (may be null)
            </returns>
        </member>
        <member name="M:Zelda.Entities.Components.Talkable.SetTextList(Zelda.Factions.ReputationLevel,System.Collections.Generic.List{Zelda.LocalizableText})">
            <summary>
            Gets the list of text for the given <see cref="T:Zelda.Factions.ReputationLevel"/>.
            </summary>
            <param name="level">
            The <see cref="T:Zelda.Factions.ReputationLevel"/> to set the list of text for.
            </param>
            <param name="list">
            The list of text the talkable ZeldaEntity uses to chose 
            a line of text to say on the given <see cref="T:Zelda.Factions.ReputationLevel"/>.
            </param>
        </member>
        <member name="M:Zelda.Entities.Components.Talkable.CreateTextsArray">
            <summary>
            Helpers method that creates the texts array.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Components.Talkable.SetupClone(Zelda.Entities.Components.Talkable)">
            <summary>
            Setups the given Talkable component to be a clone of this Talkable component.
            </summary>
            <param name="clone">
            The Talkable component to setup as a clone of this Talkable component.
            </param>
        </member>
        <member name="M:Zelda.Entities.Components.Talkable.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.Components.Talkable.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Entities.Components.Talkable.texts">
            <summary>
            Stores the lists of text the talkable ZeldaEntity may speak, sorted by <see cref="T:Zelda.Factions.ReputationLevel"/>.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Components.ZeldaTransform">
            <summary>
            Defines the component that represents 
            the transformation of the entity that owns the <see cref="T:Zelda.Entities.Components.ZeldaTransform"/> component.
            This class can't be inherited.
            </summary>
        </member>
        <member name="E:Zelda.Entities.Components.ZeldaTransform.DirectionChanged">
            <summary>
            Fired when the <see cref="P:Zelda.Entities.Components.ZeldaTransform.Direction"/> property of this <see cref="T:Zelda.Entities.Components.ZeldaTransform"/> has changed.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Components.ZeldaTransform.Direction">
            <summary>
            Gets or sets the direction the Entity is facing.
            </summary>
            <value>The default value is <see cref="F:Atom.Math.Direction4.Down"/>.</value>
        </member>
        <member name="P:Zelda.Entities.Components.ZeldaTransform.OldDirection">
            <summary>
            Gets the direction the Entity was facing last frame.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Components.ZeldaTransform.PositionTile">
            <summary>
            Gets the position of the transformable ZeldaEntity in tile-space.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Components.ZeldaTransform.Update(Atom.IUpdateContext)">
            <summary>
            Updates this <see cref="T:Zelda.Entities.Components.ZeldaTransform"/> component.
            </summary>
            <param name="updateContext">
            The current Atom.IUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Components.ZeldaTransform.IsFacing(Zelda.Entities.Components.ZeldaTransform)">
            <summary>
            Returns whether the ZeldaEntity with the given <see cref="T:Zelda.Entities.Components.ZeldaTransform"/>
            is facing the ZeldaEntity with this <see cref="T:Zelda.Entities.Components.ZeldaTransform"/>.
            </summary>
            <param name="other">
            The other ZeldaTransform.
            </param>
            <returns>
            Returns true if the given ZeldaTransform is facing this ZeldaTransform;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Entities.Components.ZeldaTransform.IsFacing(Atom.Math.Vector2)">
            <summary>
            Returns whether this transformable ZeldaEntity is facing the specified location
            </summary>
            <param name="location">
            The location to check.
            </param>
            <returns>
            Returns true if this transformable ZeldaEntity is facing
            the specified location;
            otherwise false.
            </returns>
        </member>
        <member name="F:Zelda.Entities.Components.ZeldaTransform.direction">
            <summary>
            Represents the storage field for the <see cref="P:Zelda.Entities.Components.ZeldaTransform.Direction"/> property.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Components.Visionable">
            <summary>
            Defines the <see cref="T:Atom.Components.Component"/> that enables a <see cref="T:Zelda.Entities.ZeldaEntity"/> 
            to have a vision of the world. This class can't be inherited.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Components.Visionable.InitializeBindings">
            <summary>
            Called when an IComponent has been removed or added to the <see cref="T:Atom.Components.IEntity"/> that owns this IComponent.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Components.Visionable.VisionRange">
            <summary>
            Gets or sets the range of the circular vision field.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Set: If the given value is negative.
            </exception>
        </member>
        <member name="P:Zelda.Entities.Components.Visionable.FeelingRange">
            <summary>
            Gets or sets the range of the circular feeling field.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Set: If the given value is negative.
            </exception>
        </member>
        <member name="M:Zelda.Entities.Components.Visionable.IsWithinCircularVision(Zelda.Entities.ZeldaEntity)">
            <summary>
            Gets whether the specified <see cref="T:Zelda.Entities.ZeldaEntity"/> is within 
            the circular vision of this <see cref="T:Zelda.Entities.Components.Visionable"/> entity.
            </summary>
            <param name="entity">
            The entity to test against.
            </param>
            <returns>
            true if the given <paramref name="entity"/> is within 
            the circular vision field of this <see cref="T:Zelda.Entities.Components.Visionable"/> entity.
            </returns>
        </member>
        <member name="M:Zelda.Entities.Components.Visionable.IsWithinVision(Zelda.Entities.ZeldaEntity)">
            <summary>
            Gets whether the specified <see cref="T:Zelda.Entities.ZeldaEntity"/> is within 
            the vision of this <see cref="T:Zelda.Entities.Components.Visionable"/> entity.
            </summary>
            <param name="entity">
            The entity to test against.
            </param>
            <returns>
            true if the given <paramref name="entity"/> is within 
            the circular vision field of this <see cref="T:Zelda.Entities.Components.Visionable"/> entity.
            </returns>
        </member>
        <member name="M:Zelda.Entities.Components.Visionable.SetupClone(Zelda.Entities.Components.Visionable)">
            <summary>
            Setups the given Visionable component
            to be a clone of this Visionable component.
            </summary>
            <param name="clone">
            The Visionable component to setup as a clone of this Visionable component.
            </param>
        </member>
        <member name="M:Zelda.Entities.Components.Visionable.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.Components.Visionable.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Entities.Components.Visionable.visionRange">
            <summary>
            The range of the circular vision field.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Components.Visionable.feelingRange">
            <summary>
            The range of the circular feeling field.
            </summary>  
        </member>
        <member name="F:Zelda.Entities.Components.Visionable.moveable">
            <summary>
            Identifies the <see cref="T:Zelda.Entities.Components.Moveable"/> component of the <see cref="T:Zelda.Entities.Components.Visionable"/> entity.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Components.ZeldaComponent">
            <summary>
            Represents a <see cref="T:Atom.Components.Component"/> in a <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
            <remarks>
            Not all components must inherit from this class.
            </remarks>
        </member>
        <member name="P:Zelda.Entities.Components.ZeldaComponent.Owner">
            <summary>
            Gets the <see cref="T:Zelda.Entities.ZeldaEntity"/> that owns this ZeldaComponent.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Components.ZeldaComponent.Scene">
            <summary>
            Gets the <see cref="T:Zelda.ZeldaScene"/> that owns the <see cref="T:Zelda.Entities.ZeldaEntity"/> of this ZeldaComponent.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Components.ZeldaComponent.Initialize">
            <summary>
            Called when this ZeldaComponent has been successfully attached to an Atom.Components.IEntity.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Components.ZeldaComponent.owner">
            <summary>
            Identifies the ZeldaEntity that owns this ZeldaComponent.
            </summary>
        </member>
        <member name="T:Zelda.Entities.DamageEffectEntity">
            <summary>
            Represents an object that deals damage to other entities
            but its status is based on its creator.
            </summary>
        </member>
        <member name="P:Zelda.Entities.DamageEffectEntity.Behaveable">
            <summary>
            Gets the Behaveable component that owns this DamageEffectEntity.
            </summary>
        </member>
        <member name="P:Zelda.Entities.DamageEffectEntity.MeleeAttack">
            <summary>
            Gets the MeleeAttack this DamageEffectEntity uses to deal damage.
            </summary>
        </member>
        <member name="P:Zelda.Entities.DamageEffectEntity.Creator">
            <summary>
            Gets or sets the Statable component of the entity that has created this DamageEffectEntity.
            </summary>
        </member>
        <member name="M:Zelda.Entities.DamageEffectEntity.#ctor">
            <summary>
            Initializes a new instance of the DamageEffectEntity class.
            </summary>
        </member>
        <member name="M:Zelda.Entities.DamageEffectEntity.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this DamageEffectEntity.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.DamageEffectEntity.UpdateAttack(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates the attack logic of this Projectile.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.DamageEffectEntity.TestCollision">
            <summary>
            Tests for collesion against enemy objects.
            </summary>
        </member>
        <member name="M:Zelda.Entities.DamageEffectEntity.TryAttack(Zelda.Entities.ZeldaEntity)">
            <summary>
            Tries to attack the specified target.
            </summary>
            <param name="target">
            The entity that got attacked.
            </param>
        </member>
        <member name="M:Zelda.Entities.DamageEffectEntity.OnHitTarget(Zelda.Entities.ZeldaEntity)">
            <summary>
            Called when this DamageEffectEntity has attacked an Entity.
            </summary>
            <param name="target">
            The entity that got hit.
            </param>
        </member>
        <member name="M:Zelda.Entities.DamageEffectEntity.Clone">
            <summary>
            Returns a clone of this DamageEffectEntity.
            </summary>
            <returns>
            The cloned ZeldaEntity.
            </returns>
        </member>
        <member name="M:Zelda.Entities.DamageEffectEntity.SetupClone(Zelda.Entities.DamageEffectEntity)">
            <summary>
            Setups the specified DamageEffectEntity to be a clone of this DamageEffectEntity.
            </summary>
            <param name="clone">
            The DamageEffectEntity to setup as a clone of this DamageEffectEntity.
            </param>
        </member>
        <member name="F:Zelda.Entities.DamageEffectEntity.creator">
            <summary>
            The Statable component of the Entity that has created this DamageEffectEntity.
            </summary>
        </member>
        <member name="F:Zelda.Entities.DamageEffectEntity.meleeAttack">
            <summary>
            The melee attack that gets executed when this DamageEffectEntity hits an enemy.
            </summary>
        </member>
        <member name="F:Zelda.Entities.DamageEffectEntity.behaveable">
            <summary>
            Identifies the Behaveable component that controls this DamageEffectEntity.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Data.ActivatableData">
            <summary>
            Represents an <see cref="T:Zelda.IActivatable"/> state of an entity that is stored in the save file.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Data.ActivatableData.IsActive">
            <summary>
            Gets or sets a value indicating whether the entity is currently active.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Data.ActivatableData.ApplyOn(Zelda.IActivatable)">
            <summary>
            Applies this IEntityDataStorage on the specified constrained entity.
            </summary>
            <param name="entity">
            The entity to apply the data stored in this IEntityDataStorage on.
            </param>
        </member>
        <member name="M:Zelda.Entities.Data.ActivatableData.ReceiveFrom(Zelda.IActivatable)">
            <summary>
            Receives the data that is stored in this IEntityDataStorage about
            the specified constrained entity and then stores it.
            </summary>
            <param name="entity">
            The entity from which the data should be received from.
            </param>
        </member>
        <member name="M:Zelda.Entities.Data.ActivatableData.SerializeStorage(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this IEntityDataStorage.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.Data.ActivatableData.DeserializeStorage(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this IEntityDataStorage.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="T:Zelda.Entities.Decoration">
            <summary>
            Represents a purely decorative entity, whose lone purpose is to
            be drawn using its DrawDataAndStrategy.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Decoration.#ctor">
            <summary>
            Initializes a new instance of the Decoration class.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Decoration.Clone">
            <summary>
            Creates a clone of this <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
            <returns>The cloned ZeldaEntity.</returns>
        </member>
        <member name="T:Zelda.Entities.Decoration.ReaderWriter">
            <summary>
            Defines the <see cref="T:Zelda.Entities.IEntityReaderWriter"/> for <see cref="T:Zelda.Entities.Decoration"/> entities.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Decoration.ReaderWriter.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the ReaderWriter class.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services. 
            </param>
        </member>
        <member name="M:Zelda.Entities.Decoration.ReaderWriter.Serialize(Zelda.Entities.Decoration,Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the given object using the given <see cref="T:System.IO.BinaryWriter"/>.
            </summary>
            <param name="entity">
            The entity to serialize.
            </param>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.Decoration.ReaderWriter.Deserialize(Zelda.Entities.Decoration,Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data in the given <see cref="T:System.IO.BinaryWriter"/> to initialize
            the given ZeldaEntity.
            </summary>
            <param name="entity">
            The ZeldaEntity to initialize.
            </param>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="T:Zelda.Entities.Design.EntitySelectionEditor">
            <summary>
            Defines an <see cref="T:System.Drawing.Design.UITypeEditor"/> that
            enables one to select an existing entity.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Design.EntitySelectionEditor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Entities.Design.EntitySelectionEditor"/> class.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Design.EntitySelectionEditor.#ctor(System.Func{Zelda.Entities.ZeldaEntity,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Entities.Design.EntitySelectionEditor"/> class.
            </summary>
            <param name="predicate">
            The predicate an entity must fulfill to be included in the selection list.
            </param>
        </member>
        <member name="M:Zelda.Entities.Design.EntitySelectionEditor.GetSelectableItems">
            <summary>
            Gets the items that can be selected in this BaseItemSelectionEditor{TItem}.
            </summary>
            <returns>
            The list of items.
            </returns>
        </member>
        <member name="F:Zelda.Entities.Design.EntitySelectionEditor.predicate">
            <summary>
            The predicate an entity must fulfill to be included in the selection list.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Design.SwitchableEntitySelectionEditor">
            <summary>
            Represents an <see cref="T:Zelda.Entities.Design.EntitySelectionEditor"/> that filters
            out all entities that don't implement the <see cref="T:Atom.ISwitchable"/> interface.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Design.SwitchableEntitySelectionEditor.#ctor">
            <summary>
            Initializes a new instance of the SwitchableEntitySelectionEditor class.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Drawing.Design.DrawDataAndStrategyTypeEditor">
            <summary>
            Implements an <see cref="T:System.Drawing.Design.UITypeEditor"/> that
            allows the user to select from a list of IDrawDataAndStrategy types.
            This class can't be inherited.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Drawing.Design.DrawDataAndStrategyTypeEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the value of the specified object using the editor style indicated
            by the System.Drawing.Design.UITypeEditor.GetEditStyle() method.
            </summary>
            <param name="context">
            An System.ComponentModel.ITypeDescriptorContext that can be used to gain
            additional context information.
            </param>
            <param name="provider">
             An System.IServiceProvider that this editor can use to obtain services.
             </param>
            <param name="value">  
            The object to edit.
            </param>
            <returns>
            The new value of the object.
            </returns>
        </member>
        <member name="M:Zelda.Entities.Drawing.Design.DrawDataAndStrategyTypeEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the editor style used by the 
            System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)
            method.
            </summary>
            <param name="context">
            An System.ComponentModel.ITypeDescriptorContext that can be used to gain
            additional context information.
            </param>
            <returns>
            Returns UITypeEditorEditStyle.Modal.
            </returns>
        </member>
        <member name="T:Zelda.Entities.Drawing.DrawStrategyManager">
            <summary>
            The <see cref="T:Zelda.Entities.Drawing.DrawStrategyManager"/> manages the creation of <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>ies.
            This class can't be inherited.
            </summary>
            <remarks>
            The <see cref="T:Zelda.Entities.Drawing.DrawStrategyManager"/> only stores uninitialized
            <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>ies.
            </remarks>
        </member>
        <member name="P:Zelda.Entities.Drawing.DrawStrategyManager.KnownStrategyNames">
            <summary>
            Gets a collection that contains the names of all known strategies.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Drawing.DrawStrategyManager.KnownStrategies">
            <summary>
            Gets a collection that contains the types of all known strategies.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Drawing.DrawStrategyManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Entities.Drawing.DrawStrategyManager"/> class.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Drawing.DrawStrategyManager.LoadDefaults(Zelda.IZeldaServiceProvider)">
            <summary>
            Loads the default IDrawDataAndStrategies into this <see cref="T:Zelda.Entities.Drawing.DrawStrategyManager"/>.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.DrawStrategyManager.GetStrategyClone(System.String,Zelda.Entities.ZeldaEntity)">
            <summary>
            Gets a clone of the <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/> 
            with the given <paramref name="name"/> for the given
            <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
            <param name="name">The name of the <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/> to get.</param>
            <param name="newOwner">The entity to visualize with the <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.</param>
            <returns>A clone of the <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.</returns>
        </member>
        <member name="M:Zelda.Entities.Drawing.DrawStrategyManager.GetStrategyClone(System.Type,Zelda.Entities.ZeldaEntity)">
            <summary>
            Gets a clone of the <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/> 
            of the given <paramref name="type"/> for the given
            <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
            <param name="type">The type of the <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/> to get.</param>
            <param name="newOwner">The entity to visualize with the <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.</param>
            <returns>A clone of the <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.</returns>
        </member>
        <member name="M:Zelda.Entities.Drawing.DrawStrategyManager.GetName(Zelda.Entities.Drawing.IDrawDataAndStrategy)">
            <summary>
            Utility method that returns the name that identifies the given <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
            <param name="drawDataAndStrategy">The IDrawDataAndStrategy to receive the name for.</param>
            <returns>The name that identifies the IDrawDataAndStrategy.</returns>
        </member>
        <member name="M:Zelda.Entities.Drawing.DrawStrategyManager.GetName(System.Type)">
            <summary>
            Utility method that returns the name that identifies the given <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
            <param name="type">The type of the IDrawDataAndStrategy to receive the name for.</param>
            <returns>The name that identifies the IDrawDataAndStrategy.</returns>
        </member>
        <member name="M:Zelda.Entities.Drawing.DrawStrategyManager.Register(Zelda.Entities.Drawing.IDrawDataAndStrategy)">
            <summary>
            Utility method that registers the given IDrawDataAndStrategy.
            </summary>
            <param name="drawDataAndStrategy">
            The IDrawDataAndStrategy to register.
            </param>
        </member>
        <member name="F:Zelda.Entities.Drawing.DrawStrategyManager.dict">
            <summary>
            The dictionary that stores the known <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/> implementations; sorted by name.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Drawing.IAnimatedDrawDataAndStrategy">
            <summary>
            Represents an IDrawDataAndStrategy that uses SpriteAnimation(s) for
            drawing.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Drawing.IAnimatedDrawDataAndStrategy.CurrentAnimation">
            <summary>
            Gets the currently shown SpriteAnimation.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Drawing.IDrawDataAndStrategy">
            <summary>
            Defines the interface of an object which contains the 
            data and strategy required to draw a <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Drawing.IDrawDataAndStrategy.SpriteGroup">
            <summary>
            Gets or sets the name of the Sprite Group of this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>-
            </summary>
            <remarks>
            Changing the Sprite Group won't have any effect until <see cref="M:Zelda.Entities.Drawing.IDrawDataAndStrategy.Load(Zelda.IZeldaServiceProvider)"/> is called.
            </remarks>
        </member>
        <member name="M:Zelda.Entities.Drawing.IDrawDataAndStrategy.Draw(Zelda.ZeldaDrawContext)">
            <summary>
            Draws this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
            <param name="drawContext">
            The current ZeldaDrawContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.IDrawDataAndStrategy.Load(Zelda.IZeldaServiceProvider)">
            <summary>
            Loads the assets this IDrawDataAndStrategy requires.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.IDrawDataAndStrategy.Clone(Zelda.Entities.ZeldaEntity)">
            <summary>
            Clones this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/> for use by the specified object.
            </summary>
            <param name="newOwner">
            The new owner of the cloned <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </param>
            <returns>
            The cloned <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If the <paramref name="newOwner"/> is null.
            </exception>
        </member>
        <member name="T:Zelda.Entities.Drawing.OneDirAnimDrawDataAndStrategy">
            <summary>
            Defines an <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/> that draws
            the same Animated Sprite for all actions and directions.
            </summary>
            <remarks>
            SpriteGroup format, where X is the SpriteGroup:
            'X'
            </remarks>
        </member>
        <member name="P:Zelda.Entities.Drawing.OneDirAnimDrawDataAndStrategy.SpriteGroup">
            <summary>
            Gets or sets the name of the Sprite Group of this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Drawing.OneDirAnimDrawDataAndStrategy.Animation">
            <summary>
            Gets or sets the <see cref="T:Atom.Xna.SpriteAnimation"/> displayed by this <see cref="T:Zelda.Entities.Drawing.OneDirAnimDrawDataAndStrategy"/>.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Drawing.OneDirAnimDrawDataAndStrategy.#ctor(Zelda.Entities.ZeldaEntity)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Entities.Drawing.OneDirAnimDrawDataAndStrategy"/> class.
            </summary>
            <param name="entity">
            The entity to visualize with the new <see cref="T:Zelda.Entities.Drawing.OneDirAnimDrawDataAndStrategy"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="entity"/> is null.
            </exception>
        </member>
        <member name="M:Zelda.Entities.Drawing.OneDirAnimDrawDataAndStrategy.#ctor">
            <summary>
            Initializes a new instance of the OneDirAnimDrawDataAndStrategy class.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Drawing.OneDirAnimDrawDataAndStrategy.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.OneDirAnimDrawDataAndStrategy.Draw(Zelda.ZeldaDrawContext)">
            <summary>
            Draws this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
            <param name="drawContext">
            The current ZeldaDrawContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.OneDirAnimDrawDataAndStrategy.Draw(Microsoft.Xna.Framework.Color,Zelda.ZeldaDrawContext)">
            <summary>
            Draws this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
            <param name="color">
            The color tint that hsould be used instead of the default tint of each sprite.
            </param>
            <param name="drawContext">
            The current ZeldaDrawContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.OneDirAnimDrawDataAndStrategy.Load(Zelda.IZeldaServiceProvider)">
            <summary>
            Loads the assets needed by this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.OneDirAnimDrawDataAndStrategy.Clone(Zelda.Entities.ZeldaEntity)">
            <summary>
            Clones this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/> for use by the specified object.
            </summary>
            <param name="newOwner">
            The new owner of the cloned <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </param>
            <returns>
            The cloned <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If the <paramref name="newOwner"/> is null.
            </exception>
        </member>
        <member name="M:Zelda.Entities.Drawing.OneDirAnimDrawDataAndStrategy.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.OneDirAnimDrawDataAndStrategy.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Entities.Drawing.OneDirAnimDrawDataAndStrategy.entity">
            <summary>
            The entity that is visualized by the <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Drawing.OneDirAnimMoveStandDrawDataAndStrategy">
            <summary>
            Defines an <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/> that draws
            an Animated Sprite if the entity is moving;
            and a normal Sprite when standing.
            </summary>
            <remarks>
            SpriteGroup format, where X is the SpriteGroup:
            'X'
            'X_Standing'
            </remarks>
        </member>
        <member name="P:Zelda.Entities.Drawing.OneDirAnimMoveStandDrawDataAndStrategy.SpriteGroup">
            <summary>
            Gets or sets the name of the Sprite Group of this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Drawing.OneDirAnimMoveStandDrawDataAndStrategy.MovingAnimation">
            <summary>
            Gets or sets the <see cref="T:Atom.Xna.SpriteAnimation"/> displayed by this <see cref="T:Zelda.Entities.Drawing.OneDirAnimMoveStandDrawDataAndStrategy"/>
            if the entity is currently moving.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Drawing.OneDirAnimMoveStandDrawDataAndStrategy.StandingSprite">
            <summary>
            Gets or sets the <see cref="T:Atom.Xna.Sprite"/> displayed by this <see cref="T:Zelda.Entities.Drawing.OneDirAnimMoveStandDrawDataAndStrategy"/>
            if the entity is currently standing.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Drawing.OneDirAnimMoveStandDrawDataAndStrategy.#ctor(Zelda.Entities.ZeldaEntity)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Entities.Drawing.OneDirAnimMoveStandDrawDataAndStrategy"/> class.
            </summary>
            <param name="entity">
            The entity to visualize with the new <see cref="T:Zelda.Entities.Drawing.OneDirAnimMoveStandDrawDataAndStrategy"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="entity"/> is null.
            </exception>
        </member>
        <member name="M:Zelda.Entities.Drawing.OneDirAnimMoveStandDrawDataAndStrategy.#ctor">
            <summary>
            Initializes a new instance of the OneDirAnimMoveStandDrawDataAndStrategy class.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Drawing.OneDirAnimMoveStandDrawDataAndStrategy.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.OneDirAnimMoveStandDrawDataAndStrategy.Draw(Zelda.ZeldaDrawContext)">
            <summary>
            Draws this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
            <param name="drawContext">
            The current ZeldaDrawContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.OneDirAnimMoveStandDrawDataAndStrategy.Load(Zelda.IZeldaServiceProvider)">
            <summary>
            Loads the assets needed by this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.OneDirAnimMoveStandDrawDataAndStrategy.Clone(Zelda.Entities.ZeldaEntity)">
            <summary>
            Clones this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/> for use by the specified object.
            </summary>
            <param name="newOwner">
            The new owner of the cloned <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </param>
            <returns>
            The cloned <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If the <paramref name="newOwner"/> is null.
            </exception>
        </member>
        <member name="M:Zelda.Entities.Drawing.OneDirAnimMoveStandDrawDataAndStrategy.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.OneDirAnimMoveStandDrawDataAndStrategy.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Entities.Drawing.OneDirAnimMoveStandDrawDataAndStrategy.currentSprite">
            <summary>
            Stores the currently drawn sprite.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.OneDirAnimMoveStandDrawDataAndStrategy.entity">
            <summary>
            The entity that is visualized by the <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.OneDirAnimMoveStandDrawDataAndStrategy.attackingEntity">
            <summary>
            Provides a mechanism to receive a value that is indicating whether
            the ZeldaEntity is currently attacking.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.OneDirAnimMoveStandDrawDataAndStrategy.moveable">
            <summary>
            Identifies the moveable component of the <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Drawing.OneDirDrawDataAndStrategy">
            <summary>
            Defines an <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/> that draws
            the same Sprite for all actions and directions.
            </summary>
            <remarks>
            SpriteGroup format, where X is the SpriteGroup:
            'X'
            </remarks>
        </member>
        <member name="P:Zelda.Entities.Drawing.OneDirDrawDataAndStrategy.SpriteGroup">
            <summary>
            Gets or sets the name of the Sprite Group of this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>-
            </summary>
        </member>
        <member name="P:Zelda.Entities.Drawing.OneDirDrawDataAndStrategy.Sprite">
            <summary>
            Gets or sets the sprite displayed by this <see cref="T:Zelda.Entities.Drawing.OneDirDrawDataAndStrategy"/>.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Drawing.OneDirDrawDataAndStrategy.#ctor(Zelda.Entities.ZeldaEntity)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Entities.Drawing.OneDirDrawDataAndStrategy"/> class.
            </summary>
            <param name="entity">
            The entity to visualize with the new <see cref="T:Zelda.Entities.Drawing.OneDirDrawDataAndStrategy"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="entity"/> is null.
            </exception>
        </member>
        <member name="M:Zelda.Entities.Drawing.OneDirDrawDataAndStrategy.#ctor">
            <summary>
            Initializes a new instance of the OneDirDrawDataAndStrategy class.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Drawing.OneDirDrawDataAndStrategy.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.OneDirDrawDataAndStrategy.Draw(Zelda.ZeldaDrawContext)">
            <summary>
            Draws this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
            <param name="drawContext">
            The current ZeldaDrawContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.OneDirDrawDataAndStrategy.Load(Zelda.IZeldaServiceProvider)">
            <summary>
            Loads the assets needed by this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.OneDirDrawDataAndStrategy.Clone(Zelda.Entities.ZeldaEntity)">
            <summary>
            Clones this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/> for use by the specified object.
            </summary>
            <param name="newOwner">
            The new owner of the cloned <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </param>
            <returns>
            The cloned <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If the <paramref name="newOwner"/> is null.
            </exception>
        </member>
        <member name="M:Zelda.Entities.Drawing.OneDirDrawDataAndStrategy.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.OneDirDrawDataAndStrategy.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Entities.Drawing.OneDirDrawDataAndStrategy.entity">
            <summary>
            The entity that is visualized by the <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Drawing.OneDirMoveStandAttackAnimDrawDataAndStrategy">
            <summary>
            Defines an <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/> that draws
            the same Animated Sprite for all actions and directions.
            </summary>
            <remarks>
            SpriteGroup format, where X is the SpriteGroup:
            'X'
            </remarks>
        </member>
        <member name="P:Zelda.Entities.Drawing.OneDirMoveStandAttackAnimDrawDataAndStrategy.Animation">
            <summary>
            Gets or sets the <see cref="T:Atom.Xna.SpriteAnimation"/> displayed by this <see cref="T:Zelda.Entities.Drawing.OneDirMoveStandAttackAnimDrawDataAndStrategy"/>.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Drawing.OneDirMoveStandAttackAnimDrawDataAndStrategy.#ctor(Zelda.Entities.ZeldaEntity)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Entities.Drawing.OneDirMoveStandAttackAnimDrawDataAndStrategy"/> class.
            </summary>
            <param name="entity">
            The entity to visualize with the new <see cref="T:Zelda.Entities.Drawing.OneDirMoveStandAttackAnimDrawDataAndStrategy"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="entity"/> is null.
            </exception>
        </member>
        <member name="M:Zelda.Entities.Drawing.OneDirMoveStandAttackAnimDrawDataAndStrategy.#ctor">
            <summary>
            Initializes a new instance of the OneDirMoveStandAttackAnimDrawDataAndStrategy class.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Drawing.OneDirMoveStandAttackAnimDrawDataAndStrategy.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.OneDirMoveStandAttackAnimDrawDataAndStrategy.ShouldAnimateSprite">
            <summary>
            Gets a value indicating whether the sprite of 
            this TintedDrawDataAndStrategy should be animated.
            </summary>
            <returns>
            true if it should be animated;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Entities.Drawing.OneDirMoveStandAttackAnimDrawDataAndStrategy.Draw(Zelda.ZeldaDrawContext)">
            <summary>
            Draws this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
            <param name="drawContext">
            The current ZeldaDrawContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.OneDirMoveStandAttackAnimDrawDataAndStrategy.Load(Zelda.IZeldaServiceProvider)">
            <summary>
            Loads the assets needed by this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.OneDirMoveStandAttackAnimDrawDataAndStrategy.Clone(Zelda.Entities.ZeldaEntity)">
            <summary>
            Clones this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/> for use by the specified object.
            </summary>
            <param name="newOwner">
            The new owner of the cloned <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </param>
            <returns>
            The cloned <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If the <paramref name="newOwner"/> is null.
            </exception>
        </member>
        <member name="F:Zelda.Entities.Drawing.OneDirMoveStandAttackAnimDrawDataAndStrategy.entity">
            <summary>
            The entity that is visualized by the <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.OneDirMoveStandAttackAnimDrawDataAndStrategy.attackingEntity">
            <summary>
            Provides a mechanism to receive a value that indicates whether
            the ZeldaEntity is currently attacking.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.OneDirMoveStandAttackAnimDrawDataAndStrategy.moveable">
            <summary>
            Identifies the moveable component of the <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Drawing.RandomOneDirAnimDrawDataAndStrategy">
            <summary>
            Defines an <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/> that draws
            the same Animated Sprite for all actions and directions.
            The animation is only animated once in a while.
            </summary>
            <remarks>
            SpriteGroup format, where X is the SpriteGroup:
            'X'
            </remarks>
        </member>
        <member name="P:Zelda.Entities.Drawing.RandomOneDirAnimDrawDataAndStrategy.Animation">
            <summary>
            Gets or sets the <see cref="T:Atom.Xna.SpriteAnimation"/> displayed by this <see cref="T:Zelda.Entities.Drawing.OneDirAnimDrawDataAndStrategy"/>.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Drawing.RandomOneDirAnimDrawDataAndStrategy.TimeBetweenAnimations">
            <summary>
            Gets or sets the range of time that can be between animating the Animation.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Drawing.RandomOneDirAnimDrawDataAndStrategy.IsAnimating">
            <summary>
            Gets or sets a value indicating whether the Animation
            is currently animating.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Drawing.RandomOneDirAnimDrawDataAndStrategy.#ctor(Zelda.Entities.ZeldaEntity,Atom.Math.RandMT)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Entities.Drawing.RandomOneDirAnimDrawDataAndStrategy"/> class.
            </summary>
            <param name="entity">
            The entity to visualize with the new <see cref="T:Zelda.Entities.Drawing.RandomOneDirAnimDrawDataAndStrategy"/>.
            </param>
            <param name="rand">
            A random number generator.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="entity"/> is null.
            </exception>
        </member>
        <member name="M:Zelda.Entities.Drawing.RandomOneDirAnimDrawDataAndStrategy.#ctor(Atom.Math.RandMT)">
            <summary>
            Initializes a new instance of the RandomOneDirAnimDrawDataAndStrategy class.
            </summary>
            <param name="rand">
            A random number generator.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.RandomOneDirAnimDrawDataAndStrategy.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.RandomOneDirAnimDrawDataAndStrategy.RandomizeTimeLeftUntilAnimation">
            <summary>
            Randomizes the value of the timeLeftUntilAnimation field
            to a value within <see cref="P:Zelda.Entities.Drawing.RandomOneDirAnimDrawDataAndStrategy.TimeBetweenAnimations"/>.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Drawing.RandomOneDirAnimDrawDataAndStrategy.Draw(Zelda.ZeldaDrawContext)">
            <summary>
            Draws this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
            <param name="drawContext">
            The current ZeldaDrawContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.RandomOneDirAnimDrawDataAndStrategy.Load(Zelda.IZeldaServiceProvider)">
            <summary>
            Loads the assets needed by this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.RandomOneDirAnimDrawDataAndStrategy.Clone(Zelda.Entities.ZeldaEntity)">
            <summary>
            Clones this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/> for use by the specified object.
            </summary>
            <param name="newOwner">
            The new owner of the cloned <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </param>
            <returns>
            The cloned <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If the <paramref name="newOwner"/> is null.
            </exception>
        </member>
        <member name="M:Zelda.Entities.Drawing.RandomOneDirAnimDrawDataAndStrategy.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.RandomOneDirAnimDrawDataAndStrategy.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Entities.Drawing.RandomOneDirAnimDrawDataAndStrategy.timeLeftUntilAnimation">
            <summary>
            The time left in seconds until the Animation
            is animated for one time.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.RandomOneDirAnimDrawDataAndStrategy.rand">
            <summary>
            A random number generator.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.RandomOneDirAnimDrawDataAndStrategy.entity">
            <summary>
            The entity that is visualized by the <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Drawing.TintedAndScaledOneDirAnimDrawDataAndStrategy">
            <summary>
            Defines an <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/> that draws
            the same Animated Sprite for all actions and directions.
            </summary>
            <remarks>
            SpriteGroup format, where X is the SpriteGroup:
            'X'
            </remarks>
        </member>
        <member name="P:Zelda.Entities.Drawing.TintedAndScaledOneDirAnimDrawDataAndStrategy.Animation">
            <summary>
            Gets or sets the <see cref="T:Atom.Xna.SpriteAnimation"/> displayed by this <see cref="T:Zelda.Entities.Drawing.TintedAndScaledOneDirAnimDrawDataAndStrategy"/>.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Drawing.TintedAndScaledOneDirAnimDrawDataAndStrategy.Scale">
            <summary>
            Gets or sets the scaling factor applied when drawing the SpriteAnimation.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Drawing.TintedAndScaledOneDirAnimDrawDataAndStrategy.#ctor(Zelda.Entities.ZeldaEntity)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Entities.Drawing.TintedAndScaledOneDirAnimDrawDataAndStrategy"/> class.
            </summary>
            <param name="entity">
            The entity to visualize with the new <see cref="T:Zelda.Entities.Drawing.TintedAndScaledOneDirAnimDrawDataAndStrategy"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="entity"/> is null.
            </exception>
        </member>
        <member name="M:Zelda.Entities.Drawing.TintedAndScaledOneDirAnimDrawDataAndStrategy.#ctor">
            <summary>
            Initializes a new instance of the TintedAndScaledOneDirAnimDrawDataAndStrategy class.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Drawing.TintedAndScaledOneDirAnimDrawDataAndStrategy.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.TintedAndScaledOneDirAnimDrawDataAndStrategy.Draw(Zelda.ZeldaDrawContext)">
            <summary>
            Draws this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
            <param name="drawContext">
            The current ZeldaDrawContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.TintedAndScaledOneDirAnimDrawDataAndStrategy.Load(Zelda.IZeldaServiceProvider)">
            <summary>
            Loads the assets needed by this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.TintedAndScaledOneDirAnimDrawDataAndStrategy.Clone(Zelda.Entities.ZeldaEntity)">
            <summary>
            Clones this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/> for use by the specified object.
            </summary>
            <param name="newOwner">
            The new owner of the cloned <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </param>
            <returns>
            The cloned <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If the <paramref name="newOwner"/> is null.
            </exception>
        </member>
        <member name="M:Zelda.Entities.Drawing.TintedAndScaledOneDirAnimDrawDataAndStrategy.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.TintedAndScaledOneDirAnimDrawDataAndStrategy.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Entities.Drawing.TintedAndScaledOneDirAnimDrawDataAndStrategy.entity">
            <summary>
            The entity that is visualized by the <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Drawing.TintedOneDirAnimDrawDataAndStrategy">
            <summary>
            Defines an <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/> that draws
            the same Animated Sprite for all actions and directions.
            </summary>
            <remarks>
            SpriteGroup format, where X is the SpriteGroup:
            'X'
            </remarks>
        </member>
        <member name="P:Zelda.Entities.Drawing.TintedOneDirAnimDrawDataAndStrategy.Animation">
            <summary>
            Gets or sets the <see cref="T:Atom.Xna.SpriteAnimation"/> displayed by this <see cref="T:Zelda.Entities.Drawing.TintedOneDirAnimDrawDataAndStrategy"/>.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Drawing.TintedOneDirAnimDrawDataAndStrategy.CurrentAnimation">
            <summary>
            Gets the currently shown SpriteAnimation.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Drawing.TintedOneDirAnimDrawDataAndStrategy.#ctor(Zelda.Entities.ZeldaEntity)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Entities.Drawing.TintedOneDirAnimDrawDataAndStrategy"/> class.
            </summary>
            <param name="entity">
            The entity to visualize with the new <see cref="T:Zelda.Entities.Drawing.TintedOneDirAnimDrawDataAndStrategy"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="entity"/> is null.
            </exception>
        </member>
        <member name="M:Zelda.Entities.Drawing.TintedOneDirAnimDrawDataAndStrategy.#ctor">
            <summary>
            Initializes a new instance of the TintedOneDirAnimDrawDataAndStrategy class.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Drawing.TintedOneDirAnimDrawDataAndStrategy.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.TintedOneDirAnimDrawDataAndStrategy.Draw(Zelda.ZeldaDrawContext)">
            <summary>
            Draws this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
            <param name="drawContext">
            The current ZeldaDrawContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.TintedOneDirAnimDrawDataAndStrategy.Draw(Microsoft.Xna.Framework.Color,Zelda.ZeldaDrawContext)">
            <summary>
            Draws this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
            <param name="color">
            The final color tint to use.
            </param>
            <param name="drawContext">
            The current ZeldaDrawContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.TintedOneDirAnimDrawDataAndStrategy.Load(Zelda.IZeldaServiceProvider)">
            <summary>
            Loads the assets needed by this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.TintedOneDirAnimDrawDataAndStrategy.Clone(Zelda.Entities.ZeldaEntity)">
            <summary>
            Clones this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/> for use by the specified object.
            </summary>
            <param name="newOwner">
            The new owner of the cloned <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </param>
            <returns>
            The cloned <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If the <paramref name="newOwner"/> is null.
            </exception>
        </member>
        <member name="F:Zelda.Entities.Drawing.TintedOneDirAnimDrawDataAndStrategy.entity">
            <summary>
            The entity that is visualized by the <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Drawing.TintedOneDirAnimMoveStandDrawDataAndStrategy">
            <summary>
            Defines an <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/> that draws
            an Animated Sprite if the entity is moving;
            and a normal Sprite when standing.
            </summary>
            <remarks>
            SpriteGroup format, where X is the SpriteGroup:
            'X'
            'X_Standing'
            </remarks>
        </member>
        <member name="P:Zelda.Entities.Drawing.TintedOneDirAnimMoveStandDrawDataAndStrategy.MovingAnimation">
            <summary>
            Gets or sets the <see cref="T:Atom.Xna.SpriteAnimation"/> displayed by this <see cref="T:Zelda.Entities.Drawing.TintedOneDirAnimMoveStandDrawDataAndStrategy"/>
            if the entity is currently moving.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Drawing.TintedOneDirAnimMoveStandDrawDataAndStrategy.StandingSprite">
            <summary>
            Gets or sets the <see cref="T:Atom.Xna.Sprite"/> displayed by this <see cref="T:Zelda.Entities.Drawing.TintedOneDirAnimMoveStandDrawDataAndStrategy"/>
            if the entity is currently standing.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Drawing.TintedOneDirAnimMoveStandDrawDataAndStrategy.#ctor(Zelda.Entities.ZeldaEntity)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Entities.Drawing.TintedOneDirAnimMoveStandDrawDataAndStrategy"/> class.
            </summary>
            <param name="entity">
            The entity to visualize with the new <see cref="T:Zelda.Entities.Drawing.TintedOneDirAnimMoveStandDrawDataAndStrategy"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="entity"/> is null.
            </exception>
        </member>
        <member name="M:Zelda.Entities.Drawing.TintedOneDirAnimMoveStandDrawDataAndStrategy.#ctor">
            <summary>
            Initializes a new instance of the TintedOneDirAnimMoveStandDrawDataAndStrategy class.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Drawing.TintedOneDirAnimMoveStandDrawDataAndStrategy.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.TintedOneDirAnimMoveStandDrawDataAndStrategy.Draw(Zelda.ZeldaDrawContext)">
            <summary>
            Draws this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
            <param name="drawContext">
            The current ZeldaDrawContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.TintedOneDirAnimMoveStandDrawDataAndStrategy.Load(Zelda.IZeldaServiceProvider)">
            <summary>
            Loads the assets needed by this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.TintedOneDirAnimMoveStandDrawDataAndStrategy.Clone(Zelda.Entities.ZeldaEntity)">
            <summary>
            Clones this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/> for use by the specified object.
            </summary>
            <param name="newOwner">
            The new owner of the cloned <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </param>
            <returns>
            The cloned <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If the <paramref name="newOwner"/> is null.
            </exception>
        </member>
        <member name="F:Zelda.Entities.Drawing.TintedOneDirAnimMoveStandDrawDataAndStrategy.currentSprite">
            <summary>
            Stores the currently drawn sprite.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.TintedOneDirAnimMoveStandDrawDataAndStrategy.entity">
            <summary>
            The entity that is visualized by the <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.TintedOneDirAnimMoveStandDrawDataAndStrategy.attackingEntity">
            <summary>
            Provides a mechanism to receive a value that is indicating whether
            the ZeldaEntity is currently attacking.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.TintedOneDirAnimMoveStandDrawDataAndStrategy.moveable">
            <summary>
            Identifies the moveable component of the <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Drawing.TintedOneDirDrawDataAndStrategy">
            <summary>
            Defines an <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/> that draws
            the same Sprite for all actions and directions.
            </summary>
            <remarks>
            SpriteGroup format, where X is the SpriteGroup:
            'X'
            </remarks>
        </member>
        <member name="P:Zelda.Entities.Drawing.TintedOneDirDrawDataAndStrategy.Sprite">
            <summary>
            Gets or sets the sprite displayed by this <see cref="T:Zelda.Entities.Drawing.TintedOneDirDrawDataAndStrategy"/>.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Drawing.TintedOneDirDrawDataAndStrategy.#ctor(Zelda.Entities.ZeldaEntity)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Entities.Drawing.TintedOneDirDrawDataAndStrategy"/> class.
            </summary>
            <param name="entity">
            The entity to visualize with the new <see cref="T:Zelda.Entities.Drawing.TintedOneDirDrawDataAndStrategy"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="entity"/> is null.
            </exception>
        </member>
        <member name="M:Zelda.Entities.Drawing.TintedOneDirDrawDataAndStrategy.#ctor">
            <summary>
            Initializes a new instance of the TintedOneDirDrawDataAndStrategy class.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Drawing.TintedOneDirDrawDataAndStrategy.Draw(Zelda.ZeldaDrawContext)">
            <summary>
            Draws this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
            <param name="drawContext">
            The current ZeldaDrawContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.TintedOneDirDrawDataAndStrategy.Load(Zelda.IZeldaServiceProvider)">
            <summary>
            Loads the assets needed by this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.TintedOneDirDrawDataAndStrategy.Clone(Zelda.Entities.ZeldaEntity)">
            <summary>
            Clones this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/> for use by the specified object.
            </summary>
            <param name="newOwner">
            The new owner of the cloned <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </param>
            <returns>
            The cloned <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If the <paramref name="newOwner"/> is null.
            </exception>
        </member>
        <member name="F:Zelda.Entities.Drawing.TintedOneDirDrawDataAndStrategy.entity">
            <summary>
            The entity that is visualized by the <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Drawing.FourDirAnimDrawDataAndStrategy">
            <summary>
            Defines an <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>
            which contains data for moving LEFT, RIGHT, UP and DOWN.
            </summary>
            <remarks>
            This IDrawDataAndStrategy's sprite group layout is, X is the SpriteGroup:
            X_Left, X_Right, X_Up, X_Down
            They are tequired to be AnimatedSprites.
            </remarks>
        </member>
        <member name="P:Zelda.Entities.Drawing.FourDirAnimDrawDataAndStrategy.SpriteGroup">
            <summary>
            Gets or sets the name of the Sprite Group of this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>-
            </summary>
        </member>
        <member name="M:Zelda.Entities.Drawing.FourDirAnimDrawDataAndStrategy.#ctor(Zelda.Entities.ZeldaEntity)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Entities.Drawing.FourDirAnimDrawDataAndStrategy"/> class.
            </summary>
            <param name="entity">The entity to visualize.</param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="entity"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the given <see cref="T:Zelda.Entities.ZeldaEntity"/> doesn't own the <see cref="T:Zelda.Entities.Components.Moveable"/> component.
            </exception>
        </member>
        <member name="M:Zelda.Entities.Drawing.FourDirAnimDrawDataAndStrategy.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Entities.Drawing.FourDirAnimDrawDataAndStrategy"/> class.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Drawing.FourDirAnimDrawDataAndStrategy.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.FourDirAnimDrawDataAndStrategy.Draw(Zelda.ZeldaDrawContext)">
            <summary>
            Draws this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
            <param name="drawContext">
            The current ZeldaDrawContext
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.FourDirAnimDrawDataAndStrategy.Load(Zelda.IZeldaServiceProvider)">
            <summary>
            Loads the assets needed by this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.FourDirAnimDrawDataAndStrategy.Clone(Zelda.Entities.ZeldaEntity)">
            <summary>
            Creates a clone of this <see cref="T:Zelda.Entities.Drawing.FourDirAnimDrawDataAndStrategy"/> for the given <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
            <param name="newOwner">The owner of the clone to create.</param>
            <returns>
            The cloned <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </returns>
        </member>
        <member name="M:Zelda.Entities.Drawing.FourDirAnimDrawDataAndStrategy.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.FourDirAnimDrawDataAndStrategy.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Entities.Drawing.FourDirAnimDrawDataAndStrategy.animMoveLeft">
            <summary>
            The movement animations.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.FourDirAnimDrawDataAndStrategy.animMoveRight">
            <summary>
            The movement animations.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.FourDirAnimDrawDataAndStrategy.animMoveUp">
            <summary>
            The movement animations.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.FourDirAnimDrawDataAndStrategy.animMoveDown">
            <summary>
            The movement animations.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.FourDirAnimDrawDataAndStrategy.current">
            <summary>
            The current <see cref="T:Atom.Xna.SpriteAnimation"/>.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.FourDirAnimDrawDataAndStrategy.entity">
            <summary>
            The object that gets visualized by thise <see cref="T:Zelda.Entities.Drawing.FourDirAnimDrawDataAndStrategy"/>.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.FourDirAnimDrawDataAndStrategy.moveable">
            <summary>
            Identifies the moveable component of the <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Drawing.FourDirDrawDataAndStrategy">
            <summary>
            Defines an <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>
            which contains data for standing LEFT, RIGHT, UP and DOWN.
            </summary>
            <remarks>
            This IDrawDataAndStrategy's sprite group layout is, X is the SpriteGroup:
            X_Left, X_Right, X_Up, X_Down
            They are required to be normal Sprites.
            </remarks>
        </member>
        <member name="P:Zelda.Entities.Drawing.FourDirDrawDataAndStrategy.SpriteGroup">
            <summary>
            Gets or sets the name of the Sprite Group of this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>-
            </summary>
        </member>
        <member name="M:Zelda.Entities.Drawing.FourDirDrawDataAndStrategy.#ctor(Zelda.Entities.ZeldaEntity)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Entities.Drawing.FourDirDrawDataAndStrategy"/> class.
            </summary>
            <param name="entity">The entity to visualize.</param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="entity"/> is null.
            </exception>
        </member>
        <member name="M:Zelda.Entities.Drawing.FourDirDrawDataAndStrategy.#ctor">
            <summary>
            Initializes a new instance of the FourDirDrawDataAndStrategy class.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Drawing.FourDirDrawDataAndStrategy.Load(Zelda.IZeldaServiceProvider)">
            <summary>
            Loads the assets needed by this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.FourDirDrawDataAndStrategy.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.FourDirDrawDataAndStrategy.Draw(Zelda.ZeldaDrawContext)">
            <summary>
            Draws this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
            <param name="drawContext">
            The current ZeldaDrawContext
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.FourDirDrawDataAndStrategy.Clone(Zelda.Entities.ZeldaEntity)">
            <summary>
            Creates a clone of this <see cref="T:Zelda.Entities.Drawing.FourDirDrawDataAndStrategy"/> for the given <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
            <param name="newOwner">The owner of the clone to create.</param>
            <returns>
            The cloned <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </returns>
        </member>
        <member name="M:Zelda.Entities.Drawing.FourDirDrawDataAndStrategy.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.FourDirDrawDataAndStrategy.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Entities.Drawing.FourDirDrawDataAndStrategy.spriteLeft">
            <summary>
            The sprites.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.FourDirDrawDataAndStrategy.spriteRight">
            <summary>
            The sprites.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.FourDirDrawDataAndStrategy.spriteUp">
            <summary>
            The sprites.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.FourDirDrawDataAndStrategy.spriteDown">
            <summary>
            The sprites.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.FourDirDrawDataAndStrategy.current">
            <summary>
            The current <see cref="T:Atom.Xna.Sprite"/>.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.FourDirDrawDataAndStrategy.entity">
            <summary>
            The object that gets visualized by thise <see cref="T:Zelda.Entities.Drawing.FourDirDrawDataAndStrategy"/>.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Drawing.RangedEnemyDrawDataAndStrategy">
            <summary>
            Defines an <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>
            which contains data for moving LEFT, RIGHT, UP and DOWN.
            </summary>
            <remarks>
            This IDrawDataAndStrategy's sprite group layout is, X is the SpriteGroup:
            <para>
            X_Left, X_Right, X_Up, X_Down
            X_Attack_Ranged_Left
            X_Attack_Ranged_Right,
            X_Attack_Ranged_Up
            X_Attack_Ranged_Down
            </para>
            They are required to be AnimatedSprites.
            </remarks>
        </member>
        <member name="M:Zelda.Entities.Drawing.RangedEnemyDrawDataAndStrategy.#ctor(Zelda.Entities.ZeldaEntity)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Entities.Drawing.RangedEnemyDrawDataAndStrategy"/> class.
            </summary>
            <param name="entity">The entity to visualize.</param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="entity"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the given <see cref="T:Zelda.Entities.ZeldaEntity"/> doesn't own the <see cref="T:Zelda.Entities.Components.Moveable"/> component.
            </exception>
        </member>
        <member name="M:Zelda.Entities.Drawing.RangedEnemyDrawDataAndStrategy.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Entities.Drawing.RangedEnemyDrawDataAndStrategy"/> class.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Drawing.RangedEnemyDrawDataAndStrategy.Load(Zelda.IZeldaServiceProvider)">
            <summary>
            Loads the assets needed by this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.RangedEnemyDrawDataAndStrategy.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.RangedEnemyDrawDataAndStrategy.SelectCurrentSprite">
            <summary>
            Selects the current sprite to draw.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Drawing.RangedEnemyDrawDataAndStrategy.UpdateCurrent(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates/Animates the current sprite.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.RangedEnemyDrawDataAndStrategy.Draw(Zelda.ZeldaDrawContext)">
            <summary>
            Draws this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
            <param name="drawContext">
            The current ZeldaDrawContext
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.RangedEnemyDrawDataAndStrategy.OnProjectileFired(System.Object,Zelda.Entities.Projectiles.Projectile)">
            <summary>
            Gets called when the enemy has fired a Projectile.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="projectile">The Projectile that has been fired.</param>
        </member>
        <member name="M:Zelda.Entities.Drawing.RangedEnemyDrawDataAndStrategy.OnRangedAttackAnimationHasReachedEnd(Atom.Xna.SpriteAnimation)">
            <summary>
            Gets called when the current Ranged Attack animation has ended.
            </summary>
            <param name="sender">The sender of the event.</param>
        </member>
        <member name="M:Zelda.Entities.Drawing.RangedEnemyDrawDataAndStrategy.GetRangedAttackAnimation">
            <summary>
            Gets the SpriteAnimation that should be used to visualize a ranged attack.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zelda.Entities.Drawing.RangedEnemyDrawDataAndStrategy.Clone(Zelda.Entities.ZeldaEntity)">
            <summary>
            Creates a clone of this <see cref="T:Zelda.Entities.Drawing.RangedEnemyDrawDataAndStrategy"/> for the given <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
            <param name="newOwner">The owner of the clone to create.</param>
            <returns>
            The cloned <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </returns>
        </member>
        <member name="M:Zelda.Entities.Drawing.RangedEnemyDrawDataAndStrategy.HookSpriteEvents">
            <summary>
            Hooks-up the sprite related events.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.RangedEnemyDrawDataAndStrategy.current">
            <summary>
            The current <see cref="T:Atom.Xna.SpriteAnimation"/>.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.RangedEnemyDrawDataAndStrategy.showAttackAnimation">
            <summary>
            States whether the attack animation should currently be shown.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.RangedEnemyDrawDataAndStrategy.animMoveLeft">
            <summary>
            The movement animations.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.RangedEnemyDrawDataAndStrategy.animMoveRight">
            <summary>
            The movement animations.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.RangedEnemyDrawDataAndStrategy.animMoveUp">
            <summary>
            The movement animations.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.RangedEnemyDrawDataAndStrategy.animMoveDown">
            <summary>
            The movement animations.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.RangedEnemyDrawDataAndStrategy.animAttackRangedLeft">
            <summary>
            The ranged attack animations.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.RangedEnemyDrawDataAndStrategy.animAttackRangedRight">
            <summary>
            The ranged attack animations.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.RangedEnemyDrawDataAndStrategy.animAttackRangedUp">
            <summary>
            The ranged attack animations.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.RangedEnemyDrawDataAndStrategy.animAttackRangedDown">
            <summary>
            The ranged attack animations.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.RangedEnemyDrawDataAndStrategy.enemy">
            <summary>
            The entity that gets visualized by thise <see cref="T:Zelda.Entities.Drawing.RangedEnemyDrawDataAndStrategy"/>.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.RangedEnemyDrawDataAndStrategy.moveable">
            <summary>
            Identifies the moveable component of the <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Drawing.TintedFourDirAnimDrawDataAndStrategy">
            <summary>
            Defines an <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>
            which contains data for moving LEFT, RIGHT, UP and DOWN;
            and also tints the sprites in a specific color.
            </summary>
            <remarks>
            This IDrawDataAndStrategy's sprite group layout is, X is the SpriteGroup:
            X_Left, X_Right, X_Up, X_Down
            They are tequired to be AnimatedSprites.
            </remarks>
        </member>
        <member name="M:Zelda.Entities.Drawing.TintedFourDirAnimDrawDataAndStrategy.#ctor(Zelda.Entities.ZeldaEntity)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Entities.Drawing.TintedFourDirAnimDrawDataAndStrategy"/> class.
            </summary>
            <param name="entity">The entity to visualize.</param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="entity"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the given <see cref="T:Zelda.Entities.ZeldaEntity"/> doesn't own the <see cref="T:Zelda.Entities.Components.Moveable"/> component.
            </exception>
        </member>
        <member name="M:Zelda.Entities.Drawing.TintedFourDirAnimDrawDataAndStrategy.#ctor">
            <summary>
            Initializes a new instance of the TintedFourDirAnimDrawDataAndStrategy class.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Drawing.TintedFourDirAnimDrawDataAndStrategy.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.TintedFourDirAnimDrawDataAndStrategy.Draw(Zelda.ZeldaDrawContext)">
            <summary>
            Draws this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
            <param name="drawContext">
            The current ZeldaDrawContext
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.TintedFourDirAnimDrawDataAndStrategy.Load(Zelda.IZeldaServiceProvider)">
            <summary>
            Loads the assets needed by this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.TintedFourDirAnimDrawDataAndStrategy.Clone(Zelda.Entities.ZeldaEntity)">
            <summary>
            Creates a clone of this <see cref="T:Zelda.Entities.Drawing.TintedFourDirAnimDrawDataAndStrategy"/> for the given <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
            <param name="newOwner">The owner of the clone to create.</param>
            <returns>
            The cloned <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </returns>
        </member>
        <member name="F:Zelda.Entities.Drawing.TintedFourDirAnimDrawDataAndStrategy.animMoveLeft">
            <summary>
            The movement animations.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.TintedFourDirAnimDrawDataAndStrategy.animMoveRight">
            <summary>
            The movement animations.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.TintedFourDirAnimDrawDataAndStrategy.animMoveUp">
            <summary>
            The movement animations.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.TintedFourDirAnimDrawDataAndStrategy.animMoveDown">
            <summary>
            The movement animations.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.TintedFourDirAnimDrawDataAndStrategy.current">
            <summary>
            The current <see cref="T:Atom.Xna.SpriteAnimation"/>.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.TintedFourDirAnimDrawDataAndStrategy.entity">
            <summary>
            The object that gets visualized by thise <see cref="T:Zelda.Entities.Drawing.TintedFourDirAnimDrawDataAndStrategy"/>.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.TintedFourDirAnimDrawDataAndStrategy.moveable">
            <summary>
            Identifies the moveable component of the <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Drawing.DualSwitchableDrawDataAndStrategy">
            <summary>
            Defines an <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/> that draws a <see cref="T:Zelda.Entities.ZeldaEntity"/>
            that implements the <see cref="T:Atom.ISwitchable"/> interface. A different <see cref="T:Atom.Xna.ISprite"/> 
            is drawn depending on the current switch state of the ZeldaEntity.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Drawing.DualSwitchableDrawDataAndStrategy.SpriteOnName">
            <summary>
            Gets or sets the name of the sprite that is
            used when the ISwitchable ZeldaEntity is switched on.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Drawing.DualSwitchableDrawDataAndStrategy.SpriteOn">
            <summary>
            Gets or sets the sprite that is used when
            the ISwitchable ZeldaEntity is switched on.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Drawing.DualSwitchableDrawDataAndStrategy.SpriteOffName">
            <summary>
            Gets or sets the name of the sprite that is
            used when the ISwitchable ZeldaEntity is switched off.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Drawing.DualSwitchableDrawDataAndStrategy.SpriteOff">
            <summary>
            Gets or sets the sprite that is used when
            the ISwitchable ZeldaEntity is switched off.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Drawing.DualSwitchableDrawDataAndStrategy.Zelda#Entities#Drawing#IDrawDataAndStrategy#SpriteGroup">
            <summary>
            Gets or sets the name of the Sprite Group of this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
            <remarks>We store the SpriteOnName in this.</remarks>
        </member>
        <member name="M:Zelda.Entities.Drawing.DualSwitchableDrawDataAndStrategy.#ctor(Zelda.Entities.ZeldaEntity)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Entities.Drawing.DualSwitchableDrawDataAndStrategy"/> class.
            </summary>
            <param name="entity">
            The entity to visualize with the new <see cref="T:Zelda.Entities.Drawing.DualSwitchableDrawDataAndStrategy"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="entity"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the given <see cref="T:Zelda.Entities.ZeldaEntity"/> doesn't implement the required <see cref="T:Atom.ISwitchable"/> interface.
            </exception>
        </member>
        <member name="M:Zelda.Entities.Drawing.DualSwitchableDrawDataAndStrategy.#ctor">
            <summary>
            Initializes a new instance of the DualSwitchableDrawDataAndStrategy class.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Drawing.DualSwitchableDrawDataAndStrategy.Load(Zelda.IZeldaServiceProvider)">
            <summary>
            Loads the assets needed by this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.DualSwitchableDrawDataAndStrategy.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.DualSwitchableDrawDataAndStrategy.Draw(Zelda.ZeldaDrawContext)">
            <summary>
            Draws this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
            <param name="drawContext">
            The current ZeldaDrawContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.DualSwitchableDrawDataAndStrategy.Clone(Zelda.Entities.ZeldaEntity)">
            <summary>
            Clones this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/> for use by the specified object.
            </summary>
            <param name="newOwner">
            The new owner of the cloned <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </param>
            <returns>
            The cloned <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If the <paramref name="newOwner"/> is null.
            </exception>
        </member>
        <member name="M:Zelda.Entities.Drawing.DualSwitchableDrawDataAndStrategy.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.DualSwitchableDrawDataAndStrategy.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Entities.Drawing.DualSwitchableDrawDataAndStrategy.currentSprite">
            <summary>
            Stores the currently drawn sprite.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.DualSwitchableDrawDataAndStrategy.entity">
            <summary>
            The entity that is visualized by the <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.DualSwitchableDrawDataAndStrategy.switchable">
            <summary>
            The ZeldaEntity cast to an <see cref="T:Atom.ISwitchable"/>, cached.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Drawing.HorizontalMoveRandomStandAttackDDS">
            <summary>
            Defines an <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>
            which contains the data and logic to draw an ZeldaEntity that is moving/attack LEFT and RIGHT.
            </summary>
            <remarks>
            <para>
            This IDrawDataAndStrategy's sprite group layout is, X is the SpriteGroup:
            X__Left, X_Right, X_Stand_Left, X_Stand_Right
            </para>
            <para>
            The ZeldaEntity is required to implement the <see cref="T:Zelda.Entities.IAttackingEntity"/> interface.
            </para>
            </remarks>
        </member>
        <member name="P:Zelda.Entities.Drawing.HorizontalMoveRandomStandAttackDDS.StandingAnimationLeft">
            <summary>
            Gets or sets the animation shown when the ZeldaEntity is standing around.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Drawing.HorizontalMoveRandomStandAttackDDS.StandingAnimationRight">
            <summary>
            Gets or sets the animation shown when the ZeldaEntity is standing around.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Drawing.HorizontalMoveRandomStandAttackDDS.MovingAnimationLeft">
            <summary>
            Gets or sets the animation shown when the ZeldaEntity is moving around.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Drawing.HorizontalMoveRandomStandAttackDDS.MovingAnimationRight">
            <summary>
            Gets or sets the animation shown when the ZeldaEntity is moving around.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Drawing.HorizontalMoveRandomStandAttackDDS.AttackingAnimationLeft">
            <summary>
            Gets the animation shown when the ZeldaEntity is attacking.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Drawing.HorizontalMoveRandomStandAttackDDS.AttackingAnimationRight">
            <summary>
            Gets the animation shown when the ZeldaEntity is attacking.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Drawing.HorizontalMoveRandomStandAttackDDS.#ctor(Zelda.Entities.ZeldaEntity,Atom.Math.RandMT)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Entities.Drawing.HorizontalMoveRandomStandAttackDDS"/> class.
            </summary>
            <param name="entity">The entity to visualize.</param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="entity"/> is null.
            </exception>
            <param name="rand">
            A random number generator.
            </param>
            <exception cref="T:System.ArgumentException">
            If the given ZeldaEntity doesn't implement the <see cref="T:Zelda.Entities.IAttackingEntity"/> interface.
            </exception>
        </member>
        <member name="M:Zelda.Entities.Drawing.HorizontalMoveRandomStandAttackDDS.#ctor(Atom.Math.RandMT)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Entities.Drawing.HorizontalMoveRandomStandAttackDDS"/> class.
            </summary>
            <param name="rand">
            A random number generator.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.HorizontalMoveRandomStandAttackDDS.Load(Zelda.IZeldaServiceProvider)">
            <summary>
            Loads the assets needed by this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.HorizontalMoveRandomStandAttackDDS.Draw(Zelda.ZeldaDrawContext)">
            <summary>
            Draws this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
            <param name="drawContext">
            The current ZeldaDrawContext
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.HorizontalMoveRandomStandAttackDDS.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.HorizontalMoveRandomStandAttackDDS.SelectCurrentAnimation(System.Boolean)">
            <summary>
            Selects the animation to draw in the current frame.
            </summary>
            <param name="isAttacking">
            States whether the entity is currently attacking.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.HorizontalMoveRandomStandAttackDDS.UpdateAttacking(Zelda.ZeldaUpdateContext)">
            <summary>
            Gets whether the attacking animation should be shown
            by updating the currently known attacking state.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
            <returns>
            Whether the attack animation should be shown.
            </returns>
        </member>
        <member name="M:Zelda.Entities.Drawing.HorizontalMoveRandomStandAttackDDS.SelectStandingAnimation(System.Boolean,Atom.Math.HorizontalDirection)">
            <summary>
            Selects the correct SpriteAnimation for the current Sprite.
            </summary>
            <param name="showAttackAnimation">
            States whether the attacking animation should be shown.
            </param>
            <param name="direction">
            The direction the entity is facing.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.HorizontalMoveRandomStandAttackDDS.SelectMovingAnimation(System.Boolean,Atom.Math.HorizontalDirection)">
            <summary>
            Selects the correct SpriteAnimation for the current Sprite.
            </summary>
            <param name="showAttackAnimation">
            States whether the attacking animation should be shown.
            </param>
            <param name="direction">
            The direction the entity is facing.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.HorizontalMoveRandomStandAttackDDS.OnStandingAnimation_ReachedEnd(Atom.Xna.SpriteAnimation)">
            <summary>
            Called when the standing animation has ended.
            </summary>
            <param name="animation">
            The sender of the event.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.HorizontalMoveRandomStandAttackDDS.Clone(Zelda.Entities.ZeldaEntity)">
            <summary>
            Creates a clone of this <see cref="T:Zelda.Entities.Drawing.LeftRightMoveAttackDDS"/> for the given <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
            <param name="newOwner">The owner of the clone to create.</param>
            <returns>
            The cloned <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </returns>
        </member>
        <member name="F:Zelda.Entities.Drawing.HorizontalMoveRandomStandAttackDDS.lastHoriDir">
            <summary>
            Stores the last horizontal direction of the object.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.HorizontalMoveRandomStandAttackDDS.current">
            <summary>
            The currently selected <see cref="T:Atom.Xna.SpriteAnimation"/>.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.HorizontalMoveRandomStandAttackDDS.MaximumAttackTick">
            <summary>
            The time for which the attack animation will be shown
            for, even after the entity has stopped attacking.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.HorizontalMoveRandomStandAttackDDS.attackExtensionTick">
            <summary>
            The time left for which the attack animation will be shown
            for, even after the entity has stopped attacking.
            </summary>
            <seealso cref="F:Zelda.Entities.Drawing.HorizontalMoveRandomStandAttackDDS.MaximumAttackTick"/>
        </member>
        <member name="F:Zelda.Entities.Drawing.HorizontalMoveRandomStandAttackDDS.wasAttacking">
            <summary>
            States whether the entity was attacking last frame.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.HorizontalMoveRandomStandAttackDDS.attackingEntity">
            <summary>
            Provides a mechanism to receive a value that indicates whether
            the ZeldaEntity is currently attacking.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.HorizontalMoveRandomStandAttackDDS.transform">
            <summary>
            The <see cref="T:Zelda.Entities.Components.ZeldaTransform"/> component of the ZeldaEntity.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.HorizontalMoveRandomStandAttackDDS.moveable">
            <summary>
            The <see cref="T:Zelda.Entities.Components.Moveable"/> component of the ZeldaEntity.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.HorizontalMoveRandomStandAttackDDS.rand">
            <summary>
            A random number generator.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.HorizontalMoveRandomStandAttackDDS._standingAnimationLeft">
            <summary>
            The storage field of the <see cref="P:Zelda.Entities.Drawing.HorizontalMoveRandomStandAttackDDS.StandingAnimationLeft"/> property.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.HorizontalMoveRandomStandAttackDDS._standingAnimationRight">
            <summary>
            The storage field of the <see cref="P:Zelda.Entities.Drawing.HorizontalMoveRandomStandAttackDDS.StandingAnimationRight"/> property.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Drawing.LeftRightMoveAttackDDS">
            <summary>
            Defines an <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>
            which contains the data and logic to draw an ZeldaEntity that is moving/attack LEFT and RIGHT.
            </summary>
            <remarks>
            <para>
            This IDrawDataAndStrategy's sprite group layout is, X is the SpriteGroup:
            X_Move_Left, X_Move_Right, X_Attack_Left, X_Attack_Right
            </para>
            <para>
            The ZeldaEntity is required to implement the <see cref="T:Zelda.Entities.IAttackingEntity"/> interface.
            </para>
            </remarks>
        </member>
        <member name="P:Zelda.Entities.Drawing.LeftRightMoveAttackDDS.SpriteGroup">
            <summary>
            Gets or sets the set Sprite Group of the <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            Is null until initialized.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Drawing.LeftRightMoveAttackDDS.#ctor(Zelda.Entities.ZeldaEntity)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Entities.Drawing.LeftRightMoveAttackDDS"/> class.
            </summary>
            <param name="entity">The entity to visualize.</param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="entity"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the given ZeldaEntity doesn't implement the <see cref="T:Zelda.Entities.IAttackingEntity"/> interface.
            </exception>
        </member>
        <member name="M:Zelda.Entities.Drawing.LeftRightMoveAttackDDS.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Entities.Drawing.LeftRightMoveAttackDDS"/> class.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Drawing.LeftRightMoveAttackDDS.Load(Zelda.IZeldaServiceProvider)">
            <summary>
            Loads the assets needed by this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.LeftRightMoveAttackDDS.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.LeftRightMoveAttackDDS.Draw(Zelda.ZeldaDrawContext)">
            <summary>
            Draws this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
            <param name="drawContext">
            The current ZeldaDrawContext
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.LeftRightMoveAttackDDS.Clone(Zelda.Entities.ZeldaEntity)">
            <summary>
            Creates a clone of this <see cref="T:Zelda.Entities.Drawing.LeftRightMoveAttackDDS"/> for the given <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
            <param name="newOwner">The owner of the clone to create.</param>
            <returns>
            The cloned <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </returns>
        </member>
        <member name="M:Zelda.Entities.Drawing.LeftRightMoveAttackDDS.GetSpriteAnimationClone(Atom.Xna.SpriteAnimation)">
            <summary>
            Helper function that creates a clone of the given SpriteAnimation.
            </summary>
            <param name="animation">
            The SpriteAnimation to clone. Can be null.
            </param>
            <returns>
            The cloned SpriteAnimation. Might be null.
            </returns>
        </member>
        <member name="M:Zelda.Entities.Drawing.LeftRightMoveAttackDDS.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.LeftRightMoveAttackDDS.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Entities.Drawing.LeftRightMoveAttackDDS.lastHoriDir">
            <summary>
            Stores the last horizontal direction of the object.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.LeftRightMoveAttackDDS.entity">
            <summary>
            The object that gets visualized by the <see cref="T:Zelda.Entities.Drawing.LeftRightMoveAttackDDS"/>.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.LeftRightMoveAttackDDS.attackingEntity">
            <summary>
            Provides a mechanism to receive a value that indicates whether
            the ZeldaEntity is currently attacking.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.LeftRightMoveAttackDDS.animMoveLeft">
            <summary>
            The movement animations.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.LeftRightMoveAttackDDS.animMoveRight">
            <summary>
            The movement animations.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.LeftRightMoveAttackDDS.animAttackLeft">
            <summary>
            The attack animations.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.LeftRightMoveAttackDDS.animAttackRight">
            <summary>
            The attack animations.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.LeftRightMoveAttackDDS.current">
            <summary>
            The currently selected <see cref="T:Atom.Xna.SpriteAnimation"/>.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Drawing.LeftRightMoveStandDrawDataAndStrategy">
            <summary>
            Defines an <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/> that draws
            an Animated Sprite if the entity is moving;
            and a normal Sprite when standing.
            </summary>
            <remarks>
            SpriteGroup format, where X is the SpriteGroup:
            'X'
            'X_Standing'
            </remarks>
        </member>
        <member name="P:Zelda.Entities.Drawing.LeftRightMoveStandDrawDataAndStrategy.SpriteGroup">
            <summary>
            Gets or sets the name of the Sprite Group of this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Drawing.LeftRightMoveStandDrawDataAndStrategy.MovingAnimationLeft">
            <summary>
            Gets or sets the <see cref="T:Atom.Xna.SpriteAnimation"/> displayed by this <see cref="T:Zelda.Entities.Drawing.LeftRightMoveStandDrawDataAndStrategy"/>
            if the entity is currently moving left.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Drawing.LeftRightMoveStandDrawDataAndStrategy.MovingAnimationRight">
            <summary>
            Gets or sets the <see cref="T:Atom.Xna.SpriteAnimation"/> displayed by this <see cref="T:Zelda.Entities.Drawing.LeftRightMoveStandDrawDataAndStrategy"/>
            if the entity is currently moving right.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Drawing.LeftRightMoveStandDrawDataAndStrategy.StandingSpriteLeft">
            <summary>
            Gets or sets the <see cref="T:Atom.Xna.Sprite"/> displayed by this <see cref="T:Zelda.Entities.Drawing.LeftRightMoveStandDrawDataAndStrategy"/>
            if the entity is currently standing.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Drawing.LeftRightMoveStandDrawDataAndStrategy.StandingSpriteRight">
            <summary>
            Gets or sets the <see cref="T:Atom.Xna.Sprite"/> displayed by this <see cref="T:Zelda.Entities.Drawing.LeftRightMoveStandDrawDataAndStrategy"/>
            if the entity is currently standing.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Drawing.LeftRightMoveStandDrawDataAndStrategy.#ctor(Zelda.Entities.ZeldaEntity)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Entities.Drawing.LeftRightMoveStandDrawDataAndStrategy"/> class.
            </summary>
            <param name="entity">
            The entity to visualize with the new <see cref="T:Zelda.Entities.Drawing.LeftRightMoveStandDrawDataAndStrategy"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="entity"/> is null.
            </exception>
        </member>
        <member name="M:Zelda.Entities.Drawing.LeftRightMoveStandDrawDataAndStrategy.#ctor">
            <summary>
            Initializes a new instance of the LeftRightMoveStandDrawDataAndStrategy class.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Drawing.LeftRightMoveStandDrawDataAndStrategy.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.LeftRightMoveStandDrawDataAndStrategy.Draw(Zelda.ZeldaDrawContext)">
            <summary>
            Draws this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
            <param name="drawContext">
            The current ZeldaDrawContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.LeftRightMoveStandDrawDataAndStrategy.Load(Zelda.IZeldaServiceProvider)">
            <summary>
            Loads the assets needed by this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.LeftRightMoveStandDrawDataAndStrategy.Clone(Zelda.Entities.ZeldaEntity)">
            <summary>
            Clones this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/> for use by the specified object.
            </summary>
            <param name="newOwner">
            The new owner of the cloned <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </param>
            <returns>
            The cloned <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If the <paramref name="newOwner"/> is null.
            </exception>
        </member>
        <member name="M:Zelda.Entities.Drawing.LeftRightMoveStandDrawDataAndStrategy.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.LeftRightMoveStandDrawDataAndStrategy.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Entities.Drawing.LeftRightMoveStandDrawDataAndStrategy.lastHoriDir">
            <summary>
            Stores the last horizontal direction of the object.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.LeftRightMoveStandDrawDataAndStrategy.currentSprite">
            <summary>
            Stores the currently drawn sprite.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.LeftRightMoveStandDrawDataAndStrategy.entity">
            <summary>
            The entity that is visualized by the <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.LeftRightMoveStandDrawDataAndStrategy.moveable">
            <summary>
            Identifies the moveable component of the <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Drawing.TintedLeftRightMoveAttackDDS">
            <summary>
            Defines an <see cref="T:Zelda.Entities.Drawing.TintedDrawDataAndStrategy"/>
            which contains data for moving/attack LEFT and RIGHT.
            </summary>
            <remarks>
            This IDrawDataAndStrategy's sprite group layout is, X is the SpriteGroup:
            X_Move_Left, X_Move_Right, X_Attack_Left, X_Attack_Right
            </remarks>
        </member>
        <member name="M:Zelda.Entities.Drawing.TintedLeftRightMoveAttackDDS.#ctor(Zelda.Entities.ZeldaEntity)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Entities.Drawing.TintedLeftRightMoveAttackDDS"/> class.
            </summary>
            <param name="entity">The entity to visualize.</param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="entity"/> is null.
            </exception>
        </member>
        <member name="M:Zelda.Entities.Drawing.TintedLeftRightMoveAttackDDS.#ctor">
            <summary>
            Initializes a new instance of the TintedLeftRightMoveAttackDDS class.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Drawing.TintedLeftRightMoveAttackDDS.Load(Zelda.IZeldaServiceProvider)">
            <summary>
            Loads the assets needed by this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.TintedLeftRightMoveAttackDDS.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.TintedLeftRightMoveAttackDDS.SelectCurrentSprite">
            <summary>
            Selects the <see cref="F:Zelda.Entities.Drawing.TintedLeftRightMoveAttackDDS.current"/> SpriteAnimation.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Drawing.TintedLeftRightMoveAttackDDS.Draw(Zelda.ZeldaDrawContext)">
            <summary>
            Draws this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
            <param name="drawContext">
            The current ZeldaDrawContext
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.TintedLeftRightMoveAttackDDS.Clone(Zelda.Entities.ZeldaEntity)">
            <summary>
            Creates a clone of this <see cref="T:Zelda.Entities.Drawing.TintedLeftRightMoveAttackDDS"/> for the given <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
            <param name="newOwner">The owner of the clone to create.</param>
            <returns>
            The cloned <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </returns>
        </member>
        <member name="F:Zelda.Entities.Drawing.TintedLeftRightMoveAttackDDS.lastHoriDir">
            <summary>
            Stores the last horizontal direction of the object.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.TintedLeftRightMoveAttackDDS.entity">
            <summary>
            The object that gets visualized by the <see cref="T:Zelda.Entities.Drawing.TintedLeftRightMoveAttackDDS"/>.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.TintedLeftRightMoveAttackDDS.animMoveLeft">
            <summary>
            The movement animations.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.TintedLeftRightMoveAttackDDS.animMoveRight">
            <summary>
            The movement animations.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.TintedLeftRightMoveAttackDDS.animAttackLeft">
            <summary>
            The attack animations.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.TintedLeftRightMoveAttackDDS.animAttackRight">
            <summary>
            The attack animations.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.TintedLeftRightMoveAttackDDS.current">
            <summary>
            The currently selected <see cref="T:Atom.Xna.SpriteAnimation"/>.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Drawing.LinkSprites">
            <summary>
            Holds the sprites responsible for drawing the main character: Link!
            </summary>
        </member>
        <member name="T:Zelda.Entities.Drawing.LinkSprites.ColorDefaults">
            <summary>         
            Enumerates the default colors used by the Link sprites.
            These are tintable.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.LinkSprites.StandLeft">
            <summary>
            The Sprites that show Link standing around.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.LinkSprites.StandRight">
            <summary>
            The Sprites that show Link standing around.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.LinkSprites.StandDown">
            <summary>
            The Sprites that show Link standing around.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.LinkSprites.StandUp">
            <summary>
            The Sprites that show Link standing around.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.LinkSprites.SwimStandLeft">
            <summary>
            The SpriteAnimations that shown Link swimming (but not moving) in deep water.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.LinkSprites.SwimStandRight">
            <summary>
            The SpriteAnimations that shown Link swimming (but not moving) in deep water.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.LinkSprites.SwimStandDown">
            <summary>
            The SpriteAnimations that shown Link swimming (but not moving) in deep water.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.LinkSprites.SwimStandUp">
            <summary>
            The SpriteAnimations that shown Link swimming (but not moving) in deep water.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.LinkSprites.MoveLeft">
            <summary>
            The SpriteAnimations that show Link moving around.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.LinkSprites.MoveRight">
            <summary>
            The SpriteAnimations that show Link moving around.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.LinkSprites.MoveDown">
            <summary>
            The SpriteAnimations that show Link moving around.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.LinkSprites.MoveUp">
            <summary>
            The SpriteAnimations that show Link moving around.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.LinkSprites.SwimLeft">
            <summary>
            The SpriteAnimations that shown Link swimming in deep water.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.LinkSprites.SwimRight">
            <summary>
            The SpriteAnimations that shown Link swimming in deep water.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.LinkSprites.SwimDown">
            <summary>
            The SpriteAnimations that shown Link swimming in deep water.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.LinkSprites.SwimUp">
            <summary>
            The SpriteAnimations that shown Link swimming in deep water.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.LinkSprites.ClosingEyesDown">
            <summary>
            The Sprites that show Link closes/opens his eyes.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.LinkSprites.ClosedEyesDown">
            <summary>
            The Sprites that show Link closes/opens his eyes.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.LinkSprites.ClosingEyesLeft">
            <summary>
            The Sprites that show Link closes/opens his eyes.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.LinkSprites.ClosedEyesLeft">
            <summary>
            The Sprites that show Link closes/opens his eyes.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.LinkSprites.ClosingEyesRight">
            <summary>
            The Sprites that show Link closes/opens his eyes.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.LinkSprites.ClosedEyesRight">
            <summary>
            The Sprites that show Link closes/opens his eyes.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.LinkSprites.PlayOcarinaStand">
            <summary>
            The  that shows link playing his ocarina.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.LinkSprites.Dieing">
            <summary>
            The ation displayed when Link dies.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.LinkSprites.MeleeDown">
            <summary>
            The melee attack SpriteAnimations.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.LinkSprites.MeleeUp">
            <summary>
            The melee attack SpriteAnimations.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.LinkSprites.MeleeLeft">
            <summary>
            The melee attack SpriteAnimations.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.LinkSprites.MeleeRight">
            <summary>
            The melee attack SpriteAnimations.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.LinkSprites.RangedDown">
            <summary>
            The ranged attack SpriteAnimations.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.LinkSprites.RangedUp">
            <summary>
            The ranged attack SpriteAnimations.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.LinkSprites.RangedLeft">
            <summary>
            The ranged attack SpriteAnimations.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.LinkSprites.RangedRight">
            <summary>
            The ranged attack SpriteAnimations.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.LinkSprites.CastUp">
            <summary>
            The casting SpriteAnimations.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.LinkSprites.CastDown">
            <summary>
            The casting SpriteAnimations.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.LinkSprites.CastLeft">
            <summary>
            The casting SpriteAnimations.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.LinkSprites.CastRight">
            <summary>
            The casting SpriteAnimations.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.LinkSprites.AtkWhirlwind">
            <summary>
            The SpriteAnimation of the Whirlwind special ation.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.LinkSprites.SwordWhirlwind">
            <summary>
            The sword s of the whirlwind/bladestorm attacks.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.LinkSprites.SwordBladestorm">
            <summary>
            The sword s of the whirlwind/bladestorm attacks.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.LinkSprites.AtkBladestorm">
            <summary>
            The SpriteAnimation of the Bladestorm special ation.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Drawing.LinkSprites.ColorTint">
            <summary>
            Gets the color tint applied to Link's sprites.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Drawing.LinkSprites.#ctor(Atom.Xna.ISpriteLoader)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Entities.Drawing.LinkSprites"/> class.
            </summary>
            <param name="spriteLoader">
            The loader that is responsible for loading the sprites.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.LinkSprites.GetStand(Atom.Math.Direction4)">
            <summary>
            Gets the standing sprite for the given direction.
            </summary>
            <param name="direction">
            The direction Link is facing.
            </param>
            <returns>
            The sprite for the given direction.
            </returns>
        </member>
        <member name="M:Zelda.Entities.Drawing.LinkSprites.GetMove(Atom.Math.Direction4)">
            <summary>
            Gets the movement sprite animation for the given direction.
            </summary>
            <param name="direction">
            The direction Link is facing.
            </param>
            <returns>
            The sprite animation for the given direction.
            </returns>
        </member>
        <member name="M:Zelda.Entities.Drawing.LinkSprites.SetColorTint(Zelda.Entities.Drawing.LinkSpriteColorTint)">
            <summary>
            Changes the color tinting of Link's sprites.
            </summary>
            <param name="colorTint">
            The new color tint to apply.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.LinkSprites.ReapplyTint">
            <summary>
            Reapplies the current color tinting to the link's texture.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Drawing.LinkSprites.ResetTint">
            <summary>
            Resets the color tint of the sprites to their default values.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Drawing.LinkSprites.SetMoveAnimSpeed(System.Single)">
            <summary>
            Sets the animation speed of all movement animations.
            </summary>
            <param name="animationSpeed">
            The new animation speed.
            </param>
        </member>
        <member name="F:Zelda.Entities.Drawing.LinkSprites.colorTint">
            <summary>
            The currently active color replacement of the clothes and hair.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.LinkSprites.textureOriginalData">
            <summary>
            The original color data of link's sprites. Used as a template when color tinting
            links clothes and hair.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Drawing.PlayerDrawDataAndStrategy">
            <summary>
            Stores the data and provides the strategy to
            render the <see cref="T:Zelda.Entities.PlayerEntity"/>. 
            This is a sealed class.
            </summary>
            <remarks>
            This class is quite a -quirks-. It should be rewritten.
            </remarks>
        </member>
        <member name="P:Zelda.Entities.Drawing.PlayerDrawDataAndStrategy.SpriteGroup">
            <summary>
            Gets or sets the sprite group used for this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Drawing.PlayerDrawDataAndStrategy.FrontSprite">
            <summary>
            Gets the sprite that represents the front of the player.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Drawing.PlayerDrawDataAndStrategy.CurrentAnimation">
            <summary>
            Gets the current <see cref="T:Atom.Xna.SpriteAnimation"/>, if any.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Drawing.PlayerDrawDataAndStrategy.SpecialAnimation">
            <summary>
            Gets or sets what <see cref="T:Zelda.Entities.Drawing.PlayerSpecialAnimation"/> is currently shown.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Drawing.PlayerDrawDataAndStrategy.#ctor(Zelda.Entities.PlayerEntity,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Entities.Drawing.PlayerDrawDataAndStrategy"/> class.
            </summary>
            <param name="player">The player that is drawn using the new IDrawDataAndStrategy.</param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.PlayerDrawDataAndStrategy.Load(Zelda.IZeldaServiceProvider)">
            <summary>
            Loads this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.PlayerDrawDataAndStrategy.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.PlayerDrawDataAndStrategy.UpdateSprites_AttackMelee">
            <summary>
            Updates the sprite to show link attacking with the default melee attack.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Drawing.PlayerDrawDataAndStrategy.UpdateSprites_AttackRanged">
            <summary>
            Updates the sprite to show link attacking with the default ranged attack.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Drawing.PlayerDrawDataAndStrategy.UpdateSprites_AttackWhirlwind">
            <summary>
            Updates the sprite to show link attacking with the whirlwind attack.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Drawing.PlayerDrawDataAndStrategy.UpdateSprites_AttackBladestorm">
            <summary>
            Updates the sprite to show link attacking with the Bladestorm attack.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Drawing.PlayerDrawDataAndStrategy.UpdateSprites_Casting">
            <summary>
            Updates the sprite to show link casting.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Drawing.PlayerDrawDataAndStrategy.UpdateSprites_Standing(System.Single)">
            <summary>
            Updates the sprite to show link standing.
            </summary>
            <param name="frameTime">
            The time the last frame took (in seconds).
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.PlayerDrawDataAndStrategy.UpdateSprites_Moving">
            <summary>
            Updates the sprite to show link moving.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Drawing.PlayerDrawDataAndStrategy.UpdateSprites_PlayOcarina">
            <summary>
            Updates the current sprite to show link playing his ocarina.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Drawing.PlayerDrawDataAndStrategy.Draw(Zelda.ZeldaDrawContext)">
            <summary>
            Draws this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
            <param name="drawContext">
            The current ZeldaDrawContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.PlayerDrawDataAndStrategy.DrawExtended_SpecialAnimationShown(Atom.Math.Vector2,Atom.Xna.Batches.ISpriteBatch)">
            <summary>
            Draws anything related to the current <see cref="P:Zelda.Entities.Drawing.PlayerDrawDataAndStrategy.SpecialAnimation"/>.
            </summary>
            <param name="drawPosition">The draw position.</param>
            <param name="batch">The XNA SpriteBatch object.</param>
        </member>
        <member name="M:Zelda.Entities.Drawing.PlayerDrawDataAndStrategy.DrawEquipment(Zelda.Items.EquipmentInstance,Atom.Math.Vector2,Atom.Xna.Batches.ISpriteBatch)">
            <summary>
            Utility method that draws the given equipment (on the player).
            </summary>
            <param name="equipmentInstance">The instance of the equipment to draw.</param>
            <param name="drawPosition">The draw position.</param>
            <param name="batch">The XNA SpriteBatch object.</param>
        </member>
        <member name="M:Zelda.Entities.Drawing.PlayerDrawDataAndStrategy.SetSpecialAnimationSpeed(Zelda.Entities.Drawing.PlayerSpecialAnimation,System.Single)">
            <summary>
            Sets the animationspeed of the given <see cref="T:Zelda.Entities.Drawing.PlayerSpecialAnimation"/>.
            </summary>
            <param name="animation">
            The PlayerSpecialAnimation to modify.
            </param>
            <param name="animationSpeed">
            The new speed of the animation.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.PlayerDrawDataAndStrategy.ShowSpecialAnimation(Zelda.Entities.Drawing.PlayerSpecialAnimation)">
            <summary>
            Shows the given <see cref="T:Zelda.Entities.Drawing.PlayerSpecialAnimation"/>.
            </summary>
            <param name="specialAnimation">
            The PlayerSpecialAnimation to show.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.PlayerDrawDataAndStrategy.ShowSpecialAnimation(Zelda.Entities.Drawing.PlayerSpecialAnimation,Atom.Math.Direction4)">
            <summary>
            Shows the given <see cref="T:Zelda.Entities.Drawing.PlayerSpecialAnimation"/> for the given Direction4.
            </summary>
            <param name="specialAnimation">
            The PlayerSpecialAnimation to show.
            </param>
            <param name="direction">
            The initial direction.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.PlayerDrawDataAndStrategy.DisableCurrentSpecialAnimation">
            <summary>
            Disables the currently used special animation.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Drawing.PlayerDrawDataAndStrategy.IsMeleeAttackAnimationDone(System.Single)">
            <summary>
            Gets a value indicating whether the Melee Attack Animation has been completed sprites.ating.
            </summary>
            <param name="timeFactor">
            The time factor to apply to the total time of the animation.
            </param>
            <returns>
            Whether the Melee Animation has been completed.
            </returns>
        </member>
        <member name="M:Zelda.Entities.Drawing.PlayerDrawDataAndStrategy.GetCurrentOrLastMeleeAnimation">
            <summary>
            Helpers method that returns the current animationif it is a Melee Attack animation;
            otherwise it returns the lastMeleeAnimation.
            </summary>
            <returns>
            An SpriteAnimation instance; might be null.
            </returns>
        </member>
        <member name="M:Zelda.Entities.Drawing.PlayerDrawDataAndStrategy.IsCurrentAnimation(Zelda.Entities.Drawing.PlayerSpecialAnimation)">
            <summary>
            Gets a value indicating whether the CurrentAnimation is the given PlayerSpecialAnimation.
            </summary>
            <param name="animation">
            The PlayerSpecialAnimation the currentAnim should be compared to.
            </param>
            <returns>
            true if the specified PlayerSpecialAnimation is currently shown;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Entities.Drawing.PlayerDrawDataAndStrategy.ResetAnimationDead">
            <summary>
            Resets the dieing animation.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Drawing.PlayerDrawDataAndStrategy.ResetSpecialAnimation(Zelda.Entities.Drawing.PlayerSpecialAnimation)">
            <summary>
            Resets the given <see cref="T:Zelda.Entities.Drawing.PlayerSpecialAnimation"/> for no specific Direction.
            </summary>
            <param name="animation">
            States what animationto reset.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.PlayerDrawDataAndStrategy.ResetSpecialAnimation(Zelda.Entities.Drawing.PlayerSpecialAnimation,Atom.Math.Direction4)">
            <summary>
            Resets the given <see cref="T:Zelda.Entities.Drawing.PlayerSpecialAnimation"/>.
            </summary>
            <param name="animation">
            States what animationto reset.
            </param>
            <param name="direction">
            The direction of the animationto reset.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.PlayerDrawDataAndStrategy.IsSpecialAnimationDone(Zelda.Entities.Drawing.PlayerSpecialAnimation)">
            <summary>
            Gets whether the given <see cref="T:Zelda.Entities.Drawing.PlayerSpecialAnimation"/> is done sprites.ating.
            </summary>
            <param name="animation">
            The related animation.
            </param>
            <returns>
            true if the given animationis done;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Entities.Drawing.PlayerDrawDataAndStrategy.GetSpecialAnimationFrameIndex(Zelda.Entities.Drawing.PlayerSpecialAnimation)">
            <summary>
            Receives the current FrameIndex of the given <see cref="T:Zelda.Entities.Drawing.PlayerSpecialAnimation"/>.
            </summary>
            <param name="animation">
            The animationto receive the current frame index for.
            </param>
            <returns>The requested frame index.</returns>
        </member>
        <member name="M:Zelda.Entities.Drawing.PlayerDrawDataAndStrategy.GetSpecialAnimation(Zelda.Entities.Drawing.PlayerSpecialAnimation,Atom.Math.Direction4)">
            <summary>
            Gets the given PlayerSpecialAnimation for the given Direction.
            </summary>
            <param name="animation">The animationtype to receive.</param>
            <param name="direction">The direction of the animationto receive.</param>
            <returns>The requested animation.</returns>
        </member>
        <member name="M:Zelda.Entities.Drawing.PlayerDrawDataAndStrategy.Zelda#Entities#Drawing#IDrawDataAndStrategy#Clone(Zelda.Entities.ZeldaEntity)">
            <summary>
            This operation is not supported by this IDrawDataAndStrategy.
            </summary>
            <exception cref="T:System.NotSupportedException"></exception>
            <param name="newOwner">This parameter is unused.</param>
            <returns>This function will never return.</returns>
        </member>
        <member name="M:Zelda.Entities.Drawing.PlayerDrawDataAndStrategy.Zelda#Saving#ISaveable#Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.PlayerDrawDataAndStrategy.Zelda#Saving#ISaveable#Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Entities.Drawing.PlayerDrawDataAndStrategy.current">
            <summary>
            The currently displayed <see cref="T:Atom.Xna.ISprite"/>.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.PlayerDrawDataAndStrategy.currentAnim">
            <summary>
            The currently displayed <see cref="T:Atom.Xna.SpriteAnimation"/>, if any.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.PlayerDrawDataAndStrategy.lastMeleeAnimation">
            <summary>
            Stores the last-used attack animation.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.PlayerDrawDataAndStrategy.sprites">
            <summary>
            Holds the sprites and sprite animations used to draw the player.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.PlayerDrawDataAndStrategy.drawOffset">
            <summary>
            The draw offset applied to the currently drawn sprite, if any.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.PlayerDrawDataAndStrategy.movementAnimationSpeedCurve">
            <summary>
            Used to calculate the animationspeed factor based on movement speed.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.PlayerDrawDataAndStrategy.player">
            <summary>
            The PlayerEntity this PlayerDrawDataAndStrategy helps to draw.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.PlayerDrawDataAndStrategy.castBar">
            <summary>
            Identifies the CastBar of the player.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.PlayerDrawDataAndStrategy.statable">
            <summary>
            Identifies the ExtendedStatable component of the player.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.PlayerDrawDataAndStrategy.moveable">
            <summary>
            Identifies the moveable component of the player.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.PlayerDrawDataAndStrategy.transform">
            <summary>
            Identifies the transform component of the player.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.PlayerDrawDataAndStrategy.rand">
            <summary>
            A random number generator.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.PlayerDrawDataAndStrategy.eyeClosingTick">
            <summary>
            Idendicates the current eye animationtick.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.PlayerDrawDataAndStrategy.eyeExtraTicks">
            <summary>
            The current random extra tick value.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.PlayerDrawDataAndStrategy.updateEyeExtraTicks">
            <summary>
            Indicates whether to update the eyeExtraTicks value.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Drawing.PlayerSpecialAnimation">
            <summary>
            Enumerates the different Special Animations of the PlayerDrawDataAndStrategy.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.PlayerSpecialAnimation.None">
            <summary>
            No specific special animation.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.PlayerSpecialAnimation.AttackMelee">
            <summary>
            The default melee attack.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.PlayerSpecialAnimation.AttackRanged">
            <summary>
            The default ranged attack.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.PlayerSpecialAnimation.AttackWhirlwind">
            <summary>
            The Wirlwind attack.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.PlayerSpecialAnimation.AttackBladestorm">
            <summary>
            The Bladestorm attack.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.PlayerSpecialAnimation.PlayOcarina">
            <summary>
            Shows link playing the ocarina.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Drawing.TintedDrawDataAndStrategy">
            <summary>
            Defines a base implementation of the <see cref="T:Zelda.Entities.Drawing.ITintedDrawDataAndStrategy"/> interface.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Drawing.TintedDrawDataAndStrategy.SpriteGroup">
            <summary>
            Gets or sets the name of the Sprite Group of this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>-
            </summary>
            <remarks>
            Changing the Sprite Group won't have any effect until <see cref="M:Zelda.Entities.Drawing.TintedDrawDataAndStrategy.Load(Zelda.IZeldaServiceProvider)"/> is called.
            </remarks>
        </member>
        <member name="P:Zelda.Entities.Drawing.TintedDrawDataAndStrategy.TintList">
            <summary>
            Gets the <see cref="T:Zelda.Graphics.Tinting.ColorTintList"/> this TintedDrawDataAndStrategy is associated with.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Drawing.TintedDrawDataAndStrategy.BaseColor">
            <summary>
            Gets or sets the base tinting color used while drawing with this TintedDrawDataAndStrategy.
            </summary>
            <value>The default value is Color.White.</value>
        </member>
        <member name="P:Zelda.Entities.Drawing.TintedDrawDataAndStrategy.FinalColor">
            <summary>
            Gets the final tinting color used while drawing with this TintedDrawDataAndStrategy.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Drawing.TintedDrawDataAndStrategy.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this TintedDrawDataAndStrategy.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.TintedDrawDataAndStrategy.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.TintedDrawDataAndStrategy.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.TintedDrawDataAndStrategy.Draw(Zelda.ZeldaDrawContext)">
            <summary>
            Draws this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
            <param name="drawContext">
            The current ZeldaDrawContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.TintedDrawDataAndStrategy.Load(Zelda.IZeldaServiceProvider)">
            <summary>
            Loads the assets this IDrawDataAndStrategy requires.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.TintedDrawDataAndStrategy.Clone(Zelda.Entities.ZeldaEntity)">
            <summary>
            Clones this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/> for use by the specified object.
            </summary>
            <param name="newOwner">
            The new owner of the cloned <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </param>
            <returns>
            The cloned <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If the <paramref name="newOwner"/> is null.
            </exception>
        </member>
        <member name="M:Zelda.Entities.Drawing.TintedDrawDataAndStrategy.SetupClone(Zelda.Entities.Drawing.TintedDrawDataAndStrategy)">
            <summary>
            Setups a clone of this TintedDrawDataAndStrategy.
            </summary>
            <param name="clone">
            The TintedDrawDataAndStrategy to setup as a clone of this TintedDrawDataAndStrategy.
            </param>
        </member>
        <member name="M:Zelda.Entities.Drawing.TintedDrawDataAndStrategy.GetSpriteAnimationClone(Atom.Xna.SpriteAnimation)">
            <summary>
            Helper function that creates a clone of the given SpriteAnimation.
            </summary>
            <param name="animation">
            The SpriteAnimation to clone. Can be null.
            </param>
            <returns>
            The cloned SpriteAnimation. Might be null.
            </returns>
        </member>
        <member name="F:Zelda.Entities.Drawing.TintedDrawDataAndStrategy.baseColor">
            <summary>
            The base color that is used for tinting; before any IColorTints are applied.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Drawing.TintedDrawDataAndStrategy.tintList">
            <summary>
            The list of IColorTints applied to the BaseColor to make the FinalColor.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Drawing.ITintedDrawDataAndStrategy">
            <summary>
            Defines the interface of an object which contains the
            data and strategy required to draw a tinted <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Drawing.ITintedDrawDataAndStrategy.TintList">
            <summary>
            Gets the <see cref="T:Zelda.Graphics.Tinting.ColorTintList"/> this ITintedDrawDataAndStrategy is associated with.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Drawing.ITintedDrawDataAndStrategy.BaseColor">
            <summary>
            Gets or sets the base tinting color used while drawing with this ITintedDrawDataAndStrategy.
            </summary>
            <value>The default value is Color.White.</value>
        </member>
        <member name="P:Zelda.Entities.Drawing.ITintedDrawDataAndStrategy.FinalColor">
            <summary>
            Gets the final tinting color used while drawing with this ITintedDrawDataAndStrategy.
            </summary>
        </member>
        <member name="T:Zelda.Entities.BasicDrawObject">
            <summary>
            Implements some of the properties of a <see cref="T:Atom.IFloorDrawable"/> to allow easy-creation
            of new independent draw objects.
            </summary>
        </member>
        <member name="E:Zelda.Entities.BasicDrawObject.IsVisibleChanged">
            <summary>
            Fired when the visabilty state of this <see cref="T:Atom.IFloorDrawable"/> has changed.
            </summary>
        </member>
        <member name="P:Zelda.Entities.BasicDrawObject.RelativeDrawOrder">
            <summary>
            Gets the relative draw order of this <see cref="T:Zelda.Entities.BasicDrawObject"/>.
            </summary>
        </member>
        <member name="P:Zelda.Entities.BasicDrawObject.SecondaryDrawOrder">
            <summary>
            Gets the secondary draw order value of this IZeldaFloorDrawable.
            </summary>
            <value>
            This value is used as a secondary sorting-value that is
            used when the RelativeDrawOrder of two IZeldaFloorDrawable is equal.
            </value>
        </member>
        <member name="P:Zelda.Entities.BasicDrawObject.FloorNumber">
            <summary>
            Gets the floor number this <see cref="T:Zelda.Entities.BasicDrawObject"/> is drawn on.
            </summary>
        </member>
        <member name="P:Zelda.Entities.BasicDrawObject.IsVisible">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Zelda.Entities.BasicDrawObject"/> is visible.
            </summary>
            <value>The default value is true.</value>
        </member>
        <member name="P:Zelda.Entities.BasicDrawObject.Scene">
            <summary>
            Gets or sets the ZeldaScene this TileAreaTriggerDrawObject is part of.
            </summary>
        </member>
        <member name="M:Zelda.Entities.BasicDrawObject.Draw(Atom.IDrawContext)">
            <summary>
            Draws this <see cref="T:Zelda.Entities.TileAreaTriggerDrawObject"/>.
            </summary>
            <param name="drawContext">
            The current DrawContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.BasicDrawObject.PreDraw(Zelda.ZeldaDrawContext)">
            <summary>
            Called before drawing anything is drawn.
            </summary>
            <param name="drawContext">
            The current ZeldaDrawContext.
            </param>
        </member>
        <member name="F:Zelda.Entities.BasicDrawObject.isVisible">
            <summary>
            Stores whether this IFloorDrawable is visible.
            </summary>
        </member>
        <member name="T:Zelda.Entities.TileAreaTriggerDrawObject">
            <summary>
            Defines an <see cref="T:Atom.IFloorDrawable"/> that can be used to visualize a <see cref="T:Atom.Events.TileAreaEventTrigger"/>.
            </summary>
        </member>
        <member name="F:Zelda.Entities.TileAreaTriggerDrawObject.DrawColor">
            <summary>
            The color used to visualize a TileAreaEventTrigger.
            </summary>
        </member>
        <member name="P:Zelda.Entities.TileAreaTriggerDrawObject.RelativeDrawOrder">
            <summary>
            Gets the relative draw order of this <see cref="T:Zelda.Entities.TileAreaTriggerDrawObject"/>.
            </summary>
        </member>
        <member name="P:Zelda.Entities.TileAreaTriggerDrawObject.FloorNumber">
            <summary>
            Gets the floor number this <see cref="T:Zelda.Entities.TileAreaTriggerDrawObject"/> is drawn on.
            </summary>
        </member>
        <member name="M:Zelda.Entities.TileAreaTriggerDrawObject.#ctor(Atom.Events.TileAreaEventTrigger)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Entities.TileAreaTriggerDrawObject"/> class.
            </summary>
            <param name="trigger">
            The TileAreaEventTrigger the new TileAreaTriggerDrawObject is going to draw.
            </param>
        </member>
        <member name="M:Zelda.Entities.TileAreaTriggerDrawObject.Draw(Atom.IDrawContext)">
            <summary>
            Draws this <see cref="T:Zelda.Entities.TileAreaTriggerDrawObject"/>.
            </summary>
            <param name="drawContext">
            The current DrawContext.
            </param>
        </member>
        <member name="F:Zelda.Entities.TileAreaTriggerDrawObject.trigger">
            <summary>
            The trigger this TileAreaTriggerDrawObject draws.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Enemy">
            <summary>
            Represents an Entity that is an enemy of the Player.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Enemy.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Entities.Enemy"/> class.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Enemy.Setup(Zelda.IZeldaServiceProvider)">
            <summary>
            Setups this <see cref="T:Zelda.Entities.Enemy"/>.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game related services.
            </param>
        </member>
        <member name="P:Zelda.Entities.Enemy.Name">
            <summary>
            Gets or sets the name that uniquely identifies this <see cref="T:Zelda.Entities.Enemy"/>.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Enemy.AgressionType">
            <summary>
            Gets or sets the <see cref="T:Zelda.Entities.Behaviours.AggressionType"/> of the Enemy controlled by this RandomEnemyMovementBehaviour.
            </summary>
            <remarks>
            Enemies with an aggression type of <see cref="F:Zelda.Entities.Behaviours.AggressionType.Neutral"/> won't
            pursuit the enemy on sight.
            </remarks>
        </member>
        <member name="P:Zelda.Entities.Enemy.LocalizedName">
            <summary>
            Gets the name of this <see cref="T:Zelda.Entities.Enemy"/>.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Enemy.IsAttacking">
            <summary>
            Gets a value indicating whether this Enemy is currently attacking.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Enemy.MeleeAttack">
            <summary>
            Gets the default Melee Attack of this <see cref="T:Zelda.Entities.Enemy"/>.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Enemy.Moveable">
            <summary>
            Gets the <see cref="P:Zelda.Entities.Enemy.Moveable"/> component of this <see cref="T:Zelda.Entities.Enemy"/> entity.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Enemy.Behaveable">
            <summary>
            Gets the <see cref="P:Zelda.Entities.Enemy.Behaveable"/> component of this <see cref="T:Zelda.Entities.Enemy"/> entity.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Enemy.Statable">
            <summary>
            Gets the <see cref="P:Zelda.Entities.Enemy.Statable"/> component of this <see cref="T:Zelda.Entities.Enemy"/> entity.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Enemy.Killable">
            <summary>
            Gets the <see cref="P:Zelda.Entities.Enemy.Killable"/> component of this <see cref="T:Zelda.Entities.Enemy"/> entity.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Enemy.Lootable">
            <summary>
            Gets the <see cref="P:Zelda.Entities.Enemy.Lootable"/> component of this <see cref="T:Zelda.Entities.Enemy"/> entity.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Enemy.Visionable">
            <summary>
            Gets the <see cref="P:Zelda.Entities.Enemy.Visionable"/> component of this <see cref="T:Zelda.Entities.Enemy"/> entity.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Enemy.Attackable">
            <summary>
            Gets the <see cref="P:Zelda.Entities.Enemy.Attackable"/> component of this <see cref="T:Zelda.Entities.Enemy"/> entity.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Enemy.NotifyCollisionWithPlayer(Zelda.Entities.PlayerEntity)">
            <summary>
            Notifies this <see cref="T:Zelda.Entities.Enemy"/> entity that the <paramref name="player"/> is colliding with it.
            </summary>
            <param name="player">
            The corresponding <see cref="T:Zelda.Entities.PlayerEntity"/>.
            </param>
        </member>
        <member name="M:Zelda.Entities.Enemy.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this <see cref="T:Zelda.Entities.Enemy"/> entity.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Enemy.OnKilled(Zelda.Entities.Components.Killable)">
            <summary>
            Gets called when this Enemy etity has been killed.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
        </member>
        <member name="M:Zelda.Entities.Enemy.OnDamaged(Zelda.Status.Statable,Zelda.Attacks.AttackDamageResult)">
            <summary>
            Gets called when this Enemy etity has been damaged.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
            <param name="e">
            The event data.
            </param>
        </member>
        <member name="M:Zelda.Entities.Enemy.SetupClone(Zelda.Entities.Enemy)">
            <summary>
            Setups the given <see cref="T:Zelda.Entities.Enemy"/> entity to be a clone of this <see cref="T:Zelda.Entities.Enemy"/> entity.
            </summary>
            <param name="clone">
            The Enemy entity to setup as a clone of this Enemy.
            </param>
        </member>
        <member name="M:Zelda.Entities.Enemy.Clone">
            <summary>
            Returns a clone of this <see cref="T:Zelda.Entities.Enemy"/> entity.
            </summary>
            <returns>The cloned ZeldaEntity.</returns>
        </member>
        <member name="F:Zelda.Entities.Enemy.aggressionType">
            <summary>
            The aggression type of the enemy.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Enemy.meleeAttack">
            <summary>
            The default Melee Attack of this <see cref="T:Zelda.Entities.Enemy"/> entity.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Enemy.moveable">
            <summary>
            Identifies the <see cref="P:Zelda.Entities.Enemy.Moveable"/> component of this <see cref="T:Zelda.Entities.Enemy"/> entity.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Enemy.behaveable">
            <summary>
            Identifies the <see cref="P:Zelda.Entities.Enemy.Behaveable"/> component of this <see cref="T:Zelda.Entities.Enemy"/> entity.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Enemy.statable">
            <summary>
            Identifies the <see cref="P:Zelda.Entities.Enemy.Statable"/> component of this <see cref="T:Zelda.Entities.Enemy"/> entity.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Enemy.killable">
            <summary>
            Identifies the <see cref="P:Zelda.Entities.Enemy.Killable"/> component of this <see cref="T:Zelda.Entities.Enemy"/> entity.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Enemy.lootable">
            <summary>
            Identifies the <see cref="P:Zelda.Entities.Enemy.Lootable"/> component of this <see cref="T:Zelda.Entities.Enemy"/> entity.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Enemy.visionable">
            <summary>
            Identifies the <see cref="P:Zelda.Entities.Enemy.Visionable"/> component of this <see cref="T:Zelda.Entities.Enemy"/> entity.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Enemy.attackable">
            <summary>
            Identifies the <see cref="P:Zelda.Entities.Enemy.Attackable"/> component of this <see cref="T:Zelda.Entities.Enemy"/> entity.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Enemy.serviceProvider">
            <summary>
            Provides fast access to game related services.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Enemy.ReaderWriter">
            <summary>
            Defines the <see cref="T:Zelda.Entities.IEntityReaderWriter"/> for <see cref="T:Zelda.Entities.Enemy"/> entities.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Enemy.ReaderWriter.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the ReaderWriter class.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services. 
            </param>
        </member>
        <member name="M:Zelda.Entities.Enemy.ReaderWriter.Serialize(Zelda.Entities.Enemy,Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the given object using the given <see cref="T:System.IO.BinaryWriter"/>.
            </summary>
            <param name="entity">
            The entity to serialize.
            </param>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.Enemy.ReaderWriter.Deserialize(Zelda.Entities.Enemy,Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data in the given <see cref="T:System.IO.BinaryWriter"/> to initialize
            the given ZeldaEntity.
            </summary>
            <param name="entity">
            The ZeldaEntity to initialize.
            </param>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="T:Zelda.Entities.EntityFloorRelativity">
            <summary>
            States how an Entity is handled relative to the other Entity on the same Floor.
            </summary>
        </member>
        <member name="F:Zelda.Entities.EntityFloorRelativity.IsStrongBelow">
            <summary>
            The entity is below all other Entities.
            Usually used for graphical StatusEffects that are part of the map
            and must be drawn below entities.
            </summary>
        </member>
        <member name="F:Zelda.Entities.EntityFloorRelativity.IsBelow">
            <summary>
            Represents the layer above IsStrongBelow and below Normal, IsAbove, IsStrongAbove.
            Usually used for 'real' objects that are below normal entities such as Items.
            </summary>
        </member>
        <member name="F:Zelda.Entities.EntityFloorRelativity.Normal">
            <summary>
            Represents the layer above IsStrongBelow, IsBelow and below IsAbove, IsStrongAbove.
            Used for normal Entities. This is the default setting.
            </summary>
        </member>
        <member name="F:Zelda.Entities.EntityFloorRelativity.IsAbove">
            <summary>
            Represents the layer above IsStrongBelow, IsBelow, Normal and below IsStrongAbove.
            Used for overlay objects.
            </summary>
        </member>
        <member name="F:Zelda.Entities.EntityFloorRelativity.IsStrongAbove">
            <summary>
            Represents the layer above IsStrongBelow, IsBelow, Normal, IsStrongAbove.
            Used for overlay objects.
            </summary>
        </member>
        <member name="T:Zelda.Entities.EntityPool`1">
            <summary>
            Defines a <see cref="T:Atom.Collections.Pooling.Pool`1"/> that contains poolable <see cref="T:Zelda.Entities.ZeldaEntity"/>
            objects.
            </summary>
            <typeparam name="TEntity">
            The type of Entity the EntityPool can contain.
            </typeparam>
        </member>
        <member name="M:Zelda.Entities.EntityPool`1.#ctor(System.Int32,Atom.Collections.Pooling.PooledObjectCreator{Atom.Collections.Pooling.IPooledObjectWrapper{`0}})">
            <summary>
            Initializes a new instance of the EntityPool class.
            </summary>
            <param name="initialSize">
            The initial size of the new EntityPool{TEntity}.
            </param>
            <param name="creator">
            The creation function of the new EntityPool.
            </param>
        </member>
        <member name="M:Zelda.Entities.EntityPool`1.OnCreated(Atom.Collections.Pooling.PoolNode{Atom.Collections.Pooling.IPooledObjectWrapper{`0}})">
            <summary>
            Called when the given PoolNode&lt;IPooledObjectWrapper&lt;TEntity&gt;&gt; has been created
            for this Pool{T}.
            </summary>
            <param name="node">
            The PoolNode{T} that has just been created.
            This value is never null.
            </param>
        </member>
        <member name="M:Zelda.Entities.EntityPool`1.OnEntityRemoved(System.Object,Zelda.ZeldaScene)">
            <summary>
            Called when an Entity created by this EntityPool has been disabled.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
            <param name="scene">
            The scene from which the entity was removed from.
            </param>
        </member>
        <member name="T:Zelda.Entities.EntityReaderWriter`1">
            <summary>
            Represents an <see cref="T:Zelda.Entities.IEntityReaderWriter"/> that implements
            the basic default behaviour of an IEntityReaderWriter.
            </summary>
            <remarks>
            This class is used to reduce the amount of duplicate code.
            </remarks>
            <typeparam name="TEntity">
            The entity type the BasicEntityReaderWriter is supposed to handle.
            </typeparam>
        </member>
        <member name="P:Zelda.Entities.EntityReaderWriter`1.EntityType">
            <summary>
            Gets the entity-type handled by this <see cref="T:Zelda.Entities.EntityReaderWriter`1"/>.
            </summary>
        </member>
        <member name="M:Zelda.Entities.EntityReaderWriter`1.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the EntityReaderWriter{TEntity} class.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Entities.EntityReaderWriter`1.Create(System.String)">
            <summary>
            Creates a new ZeldaEntity of the <see cref="P:Zelda.Entities.EntityReaderWriter`1.EntityType"/> this IEntityReaderWriter supports.
            </summary>
            <param name="name">
            The name that uniquely identifies the new ZeldaEntity.
            </param>
            <returns>
            The newly created ZeldaEntity.
            </returns>
        </member>
        <member name="M:Zelda.Entities.EntityReaderWriter`1.Serialize(Zelda.Entities.ZeldaEntity,Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the given object using the given <see cref="T:System.IO.BinaryWriter"/>.
            </summary>
            <param name="entity">
            The entity to serialize.
            </param>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
            <exception cref="T:System.InvalidCastException">
            If the type of the given entity is invalid for the <see cref="T:Zelda.Entities.IEntityReaderWriter"/>.
            </exception>
        </member>
        <member name="M:Zelda.Entities.EntityReaderWriter`1.Deserialize(Zelda.Entities.ZeldaEntity,Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data in the given <see cref="T:System.IO.BinaryWriter"/> to initialize
            the given ZeldaEntity.
            </summary>
            <exception cref="T:System.InvalidCastException">
            If the type of the given entity is invalid for the <see cref="T:Zelda.Entities.IEntityReaderWriter"/>.
            </exception>
            <param name="entity">
            The ZeldaEntity to initialize.
            </param>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.EntityReaderWriter`1.Serialize(`0,Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the given object using the given <see cref="T:System.IO.BinaryWriter"/>.
            </summary>
            <param name="entity">
            The entity to serialize.
            </param>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.EntityReaderWriter`1.Deserialize(`0,Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data in the given <see cref="T:System.IO.BinaryWriter"/> to initialize
            the given ZeldaEntity.
            </summary>
            <param name="entity">
            The ZeldaEntity to initialize.
            </param>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.EntityReaderWriter`1.ShouldSave(Zelda.Entities.ZeldaEntity)">
            <summary>
            Gets a value indicating whether the given entity should be serialized.
            </summary>
            <param name="entity">
            The entity to check.
            </param>
            <returns>
            True if it should be serialized; 
            -or- otherwise false if the entity should be abondend -
            e.g. when the entity is in an unrecoverable save state.
            </returns>
        </member>
        <member name="M:Zelda.Entities.EntityReaderWriter`1.ShouldSave(`0)">
            <summary>
            Gets a value indicating whether the given entity should be serialized.
            </summary>
            <param name="entity">
            The entity to check.
            </param>
            <returns>
            True if it should be serialized; 
            -or- otherwise false if the entity should be abondend -
            e.g. when the entity is in an unrecoverable save state.
            </returns>
        </member>
        <member name="F:Zelda.Entities.EntityReaderWriter`1.serviceProvider">
            <summary>
            Provides fast access to game-related services.
            </summary>
        </member>
        <member name="T:Zelda.Entities.EntityReaderWriterManager">
            <summary>
            Manages all <see cref="T:Zelda.Entities.IEntityReaderWriter"/> the gme knows about.
            This class can't be inherited.
            </summary>
        </member>
        <member name="M:Zelda.Entities.EntityReaderWriterManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Entities.EntityReaderWriterManager"/> class.
            </summary>
            <remarks>
            All <see cref="T:Zelda.Entities.IEntityReaderWriter"/> that are supported by default are added.
            </remarks>
        </member>
        <member name="M:Zelda.Entities.EntityReaderWriterManager.LoadDefaults(Zelda.IZeldaServiceProvider)">
            <summary>
            Adds any known default Object Reader Writers to the <see cref="T:Zelda.Entities.EntityReaderWriterManager"/>´.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Entities.EntityReaderWriterManager.Get(System.Type)">
            <summary>
            Gets the <see cref="T:Zelda.Entities.IEntityReaderWriter"/> that handles 
            objects of the given <paramref name="type"/>.
            </summary>
            <exception cref="T:System.ArgumentException">
            If there is no reader-writer for the given object type.
            </exception>
            <param name="type">
            The type of the object to receive the IEntityReaderWriter for.
            </param>
            <returns>
            The <see cref="T:Zelda.Entities.IEntityReaderWriter"/> object.
            </returns>
        </member>
        <member name="M:Zelda.Entities.EntityReaderWriterManager.TryGet(System.Type)">
            <summary>
            Gets the <see cref="T:Zelda.Entities.IEntityReaderWriter"/> that handles 
            objects of the given <paramref name="type"/>.
            </summary>
            <param name="type">
            The type of the object to receive the IEntityReaderWriter for.
            </param>
            <returns>
            The <see cref="T:Zelda.Entities.IEntityReaderWriter"/> object; -or- null if no reader-writer exists for the object type.
            </returns>
        </member>
        <member name="M:Zelda.Entities.EntityReaderWriterManager.Contains(System.Type)">
            <summary>
            Gets whether the <see cref="T:Zelda.Entities.EntityReaderWriterManager"/> contains
            an <see cref="T:Zelda.Entities.IEntityReaderWriter"/> that handles the objects
            with the given <paramref name="type"/>.
            </summary>
            <param name="type">The type to check for.</param>
            <returns>
            true if this ObjectReaderWriterManager has an <see cref="T:Zelda.Entities.IEntityReaderWriter"/> for the given Type;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Entities.EntityReaderWriterManager.Register(Zelda.Entities.IEntityReaderWriter)">
            <summary>
            Registers the given IEntityReaderWriter at this ObjectReaderWriterManager.
            </summary>
            <param name="readerWriter">
            The IEntityReaderWriter to register.
            </param>
        </member>
        <member name="F:Zelda.Entities.EntityReaderWriterManager.dict">
            <summary>
            The dictionary of <see cref="T:Zelda.Entities.IEntityReaderWriter"/>s.
            </summary>
        </member>
        <member name="T:Zelda.Entities.FirePlace">
            <summary>
            Encapsulates the functionality of a fire-place entity.
            This class can't be inherited.
            </summary>
            <remarks>
            The player can unlit or lit fire places by simply using them.
            </remarks>
        </member>
        <member name="E:Zelda.Entities.FirePlace.IsSwitchedChanged">
            <summary>
            Fired when the FirePlace has been lit or unlit.
            </summary>
        </member>
        <member name="P:Zelda.Entities.FirePlace.IsSwitched">
            <summary>
            Gets or sets a value indicating whether the FirePlace
            is currently lit.
            </summary>
            <value>
            The FirePlace is lit if the value is true;
            and unlit if false. The default value is true.
            </value>
            <remarks>
            This property doesn't take into account the <see cref="P:Zelda.Entities.FirePlace.IsSwitchable"/> property
            to allow change using simple code.
            </remarks>
        </member>
        <member name="P:Zelda.Entities.FirePlace.IsSwitchable">
            <summary>
            Gets or sets a value indicating whether this FirePlace
            can be lit / unlit.
            </summary>
            <value>The default value is true.</value>
        </member>
        <member name="P:Zelda.Entities.FirePlace.HasLight">
            <summary>
            Gets or sets a value indicating whether this FirePlace 
            has a <see cref="P:Zelda.Entities.FirePlace.Light"/> entity associated with it.
            </summary>
            <value>The default value is false.</value>
        </member>
        <member name="P:Zelda.Entities.FirePlace.Light">
            <summary>
            Gets the Light entity that is associated with this FirePlace.
            </summary>
        </member>
        <member name="P:Zelda.Entities.FirePlace.HasSoundEmitter">
            <summary>
            Gets or sets a value indicating whether this FirePlace 
            has a <see cref="T:Zelda.Entities.PositionalSoundEmitter"/> entity associated with it.
            </summary>
            <value>The default value is false.</value>
        </member>
        <member name="P:Zelda.Entities.FirePlace.SoundEmitter">
            <summary>
            Gets the <see cref="T:Zelda.Entities.PositionalSoundEmitter"/> entity that is associated with this FirePlace.
            </summary>
        </member>
        <member name="P:Zelda.Entities.FirePlace.DrawDataAndStrategy">
            <summary>
            Gets the <see cref="T:Zelda.Entities.Drawing.DualSwitchableDrawDataAndStrategy"/> of this <see cref="T:Zelda.Entities.FirePlace"/>.
            </summary>
        </member>
        <member name="M:Zelda.Entities.FirePlace.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Entities.FirePlace"/> class.
            </summary>
        </member>
        <member name="M:Zelda.Entities.FirePlace.Use(Zelda.Entities.PlayerEntity)">
            <summary>
            Uses this FirePlace, and as such litting or unlitting it.
            </summary>
            <param name="user">The player that wants to lit/unlit this FirePlace.</param>
            <returns>
            Returns true if the FirePlace has been lit or unlit; 
            or false if nothing has happened.
            </returns>
        </member>
        <member name="M:Zelda.Entities.FirePlace.AddToScene(Zelda.ZeldaScene)">
            <summary>
            Adds this FirePlace and it's associated Light to the given <paramref name="scene"/>.
            </summary>
            <param name="scene">
            The related ZeldaScene.
            </param>
        </member>
        <member name="M:Zelda.Entities.FirePlace.RemoveFromScene">
            <summary>
            Removes this FirePlace and it's associated Light
            from the <see cref="T:Zelda.ZeldaScene"/> they are in.
            </summary>
        </member>
        <member name="F:Zelda.Entities.FirePlace.isSwitched">
            <summary>
            Represents the storage field of the <see cref="P:Zelda.Entities.FirePlace.IsSwitched"/> property.
            </summary>
        </member>
        <member name="F:Zelda.Entities.FirePlace.light">
            <summary>
            The <see cref="P:Zelda.Entities.FirePlace.Light"/> entity that is associated with this FirePlace.
            </summary>
        </member>
        <member name="F:Zelda.Entities.FirePlace.soundEmitter">
            <summary>
            The <see cref="T:Zelda.Entities.PositionalSoundEmitter"/> entity that is associated with this FirePlace.
            </summary>
        </member>
        <member name="T:Zelda.Entities.FirePlace.ReaderWriter">
            <summary>
            Defines the <see cref="T:Zelda.Entities.IEntityReaderWriter"/> for <see cref="T:Zelda.Entities.FirePlace"/> entities.
            </summary>
        </member>
        <member name="M:Zelda.Entities.FirePlace.ReaderWriter.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the ReaderWriter class.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services. 
            </param>
        </member>
        <member name="M:Zelda.Entities.FirePlace.ReaderWriter.Serialize(Zelda.Entities.FirePlace,Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the given object using the given <see cref="T:System.IO.BinaryWriter"/>.
            </summary>
            <param name="entity">
            The entity to serialize.
            </param>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.FirePlace.ReaderWriter.Deserialize(Zelda.Entities.FirePlace,Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data in the given <see cref="T:System.IO.BinaryWriter"/> to initialize
            the given ZeldaEntity.
            </summary>
            <param name="entity">
            The ZeldaEntity to initialize.
            </param>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="T:Zelda.Entities.FriendlyNpc">
            <summary>
            Represents a Non Player Character that is friendly towards the player.
            <para>
            As such the player may talk to the NPC and receive quests from the NPC.
            </para>
            </summary>
        </member>
        <member name="P:Zelda.Entities.FriendlyNpc.Faction">
            <summary>
            Gets or sets the Faction this <see cref="T:Zelda.Entities.FriendlyNpc"/> is part of.
            </summary>
        </member>
        <member name="P:Zelda.Entities.FriendlyNpc.Talkable">
            <summary>
            Gets the <see cref="P:Zelda.Entities.FriendlyNpc.Talkable"/> component of this FriendlyNpc.
            </summary>
        </member>
        <member name="P:Zelda.Entities.FriendlyNpc.Moveable">
            <summary>
            Gets the <see cref="P:Zelda.Entities.FriendlyNpc.Moveable"/> component of this FriendlyNpc.
            </summary>
        </member>
        <member name="P:Zelda.Entities.FriendlyNpc.QuestsGiveable">
            <summary>
            Gets the <see cref="P:Zelda.Entities.FriendlyNpc.QuestsGiveable"/> component of this FriendlyNpc.
            </summary>
        </member>
        <member name="P:Zelda.Entities.FriendlyNpc.Visionable">
            <summary>
            Gets the <see cref="P:Zelda.Entities.FriendlyNpc.Visionable"/> component of this FriendlyNpc.
            </summary>
        </member>
        <member name="P:Zelda.Entities.FriendlyNpc.Behaveable">
            <summary>
            Gets the <see cref="P:Zelda.Entities.FriendlyNpc.Behaveable"/> component of this FriendlyNpc.
            </summary>
        </member>
        <member name="M:Zelda.Entities.FriendlyNpc.#ctor">
            <summary>
            Initializes a new instance of the FriendlyNpc class.
            </summary>
        </member>
        <member name="M:Zelda.Entities.FriendlyNpc.Setup(Zelda.IZeldaServiceProvider)">
            <summary>
            Setups this FriendlyNpc entity.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Entities.FriendlyNpc.Use(Zelda.Entities.PlayerEntity)">
            <summary>
            Talks to this FriendlyNpc.
            </summary>
            <param name="user">
            The related PlayerEntity.
            </param>
            <returns>
            true if the PlayerEntity has used this FriendlyNpc;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Entities.FriendlyNpc.AnalyzeAndLoadQuests(Zelda.Entities.PlayerEntity)">
            <summary>
            Loads and analyzes the quests that are relevant to this FriendlyNpc.
            </summary>
            <param name="user">
            The PlayerEntity that is talking to this FriendlyNpc.
            </param>
            <returns>
            true if the player is talking to the npc;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Entities.FriendlyNpc.ShowUncompletedQuestsOrDefaultText(Zelda.Entities.PlayerEntity)">
            <summary>
            Shows either the quest related to any uncompleted quests that
            have its origin at this FriendlyNpc or shows the default text of
            this FriendlyNpc.
            </summary>
            <param name="user">
            The PlayerEntity that is talking to this FriendlyNpc.
            </param>
            <returns>
            true if the player is talking to the npc;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Entities.FriendlyNpc.AnalyzeCompletedQuests(Zelda.Quests.QuestLog)">
            <summary>
            Analyzes the quests of the player regarding
            whether he has any completed quests that can be turned
            in at this FriendlyNpc.
            </summary>
            <param name="questLog">
            The related quest-log.
            </param>
            <returns>
            Returns <see langword="true"/> if the Player has talked to this Npc;
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Zelda.Entities.FriendlyNpc.AnalyzeUncompletedQuests(Zelda.Quests.QuestLog)">
            <summary>
            Analyzes the quests of the player regarding
            whether he has any quests that can be turned
            in at this FriendlyNpc but aren't completed yet.
            </summary>
            <param name="questLog">
            The related quest-log.
            </param>
            <returns>
            Returns <see langword="true"/> if the Player has talked to this Npc;
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Zelda.Entities.FriendlyNpc.AnalyzeNpcQuests(Zelda.Entities.PlayerEntity)">
            <summary>
            Analyzes the quests of this Friendly Npc.
            </summary>
            <param name="user">
            The related PlayerEntity.
            </param>
            <returns>
            true if the Player has talked to this Npc;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Entities.FriendlyNpc.ShowDefaultText(Zelda.Entities.PlayerEntity)">
            <summary>
            Shows the default text of this friendly npc.
            </summary>
            <param name="user">
            The related PlayerEntity.
            </param>
            <returns>
            Returns <see langword="true"/> if the Player has talked to this Npc;
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Zelda.Entities.FriendlyNpc.Dialog_AcceptQuestEnded(System.Object,System.EventArgs)">
            <summary>
            Called when the player ends the <see cref="T:Zelda.UI.Dialog"/>
            which presents the user the quest.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The EventArgs that contains the event data.</param>
        </member>
        <member name="M:Zelda.Entities.FriendlyNpc.ShowText(System.String)">
            <summary>
            Helper method that shows
            some text using a Dialog.
            </summary>
            <param name="text">
            The text to show.
            </param>
        </member>
        <member name="M:Zelda.Entities.FriendlyNpc.Clone">
            <summary>
            Returns a clone of this FriendlyNpc entity.
            </summary>
            <returns>
            The cloned ZeldaEntity.
            </returns>
        </member>
        <member name="M:Zelda.Entities.FriendlyNpc.SetupClone(Zelda.Entities.FriendlyNpc)">
            <summary>
            Setups the given FriendlyNpc entity to be a clone of this FriendlyNpc.
            </summary>
            <param name="clone">
            The FriendlyNpc to setup as a clone of this FriendlyNpc.
            </param>
        </member>
        <member name="F:Zelda.Entities.FriendlyNpc.questAccept">
            <summary>
            Identifies the quest the player is currently accepting.
            </summary>
        </member>
        <member name="F:Zelda.Entities.FriendlyNpc.talkable">
            <summary>
            Identifies the <see cref="P:Zelda.Entities.FriendlyNpc.Talkable"/> component of this <see cref="T:Zelda.Entities.FriendlyNpc"/> entity.
            </summary>
        </member>
        <member name="F:Zelda.Entities.FriendlyNpc.questsGiveable">
            <summary>
            Identifies the <see cref="P:Zelda.Entities.FriendlyNpc.QuestsGiveable"/> component of this <see cref="T:Zelda.Entities.FriendlyNpc"/> entity.
            </summary>
        </member>
        <member name="F:Zelda.Entities.FriendlyNpc.behaveable">
            <summary>
            Identifies the <see cref="P:Zelda.Entities.FriendlyNpc.Behaveable"/> component of this <see cref="T:Zelda.Entities.FriendlyNpc"/> entity.
            </summary>
        </member>
        <member name="F:Zelda.Entities.FriendlyNpc.moveable">
            <summary>
            Identifies the <see cref="P:Zelda.Entities.FriendlyNpc.Moveable"/> component of this <see cref="T:Zelda.Entities.FriendlyNpc"/> entity.
            </summary>
        </member>
        <member name="F:Zelda.Entities.FriendlyNpc.visionable">
            <summary>
            Identifies the <see cref="P:Zelda.Entities.FriendlyNpc.Visionable"/> component of this <see cref="T:Zelda.Entities.FriendlyNpc"/> entity.
            </summary>
        </member>
        <member name="T:Zelda.Entities.FriendlyNpc.ReaderWriter">
            <summary>
            Defines the <see cref="T:Zelda.Entities.IEntityReaderWriter"/> for <see cref="T:Zelda.Entities.FriendlyNpc"/> entities.
            </summary>
        </member>
        <member name="M:Zelda.Entities.FriendlyNpc.ReaderWriter.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the ReaderWriter class.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services. 
            </param>
        </member>
        <member name="M:Zelda.Entities.FriendlyNpc.ReaderWriter.Serialize(Zelda.Entities.FriendlyNpc,Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the given object using the given <see cref="T:System.IO.BinaryWriter"/>.
            </summary>
            <param name="entity">
            The entity to serialize.
            </param>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.FriendlyNpc.ReaderWriter.Deserialize(Zelda.Entities.FriendlyNpc,Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data in the given <see cref="T:System.IO.BinaryWriter"/> to initialize
            the given ZeldaEntity.
            </summary>
            <param name="entity">
            The ZeldaEntity to initialize.
            </param>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="T:Zelda.Entities.ILight">
            <summary>
            Represents a light entity that is drawn seperately from
            other entities in the so called "Light Pass" which is later
            recombined with the normal pass.
            </summary>
        </member>
        <member name="P:Zelda.Entities.ILight.IsLightOnly">
            <summary>
            Gets a value indicating whether only the DrawLight method of this ILight is called
            during the light drawing pass;
            -or- also the Draw method during the normal drawing pass.
            </summary>
        </member>
        <member name="M:Zelda.Entities.ILight.DrawLight(Zelda.ZeldaDrawContext)">
            <summary>
            Draws this Light. This method is called during the "Light-Drawing-Pass".
            </summary>
            <param name="drawContext">
            The current IDrawContext.
            </param>
        </member>
        <member name="T:Zelda.Entities.IAttackableEntity">
            <summary>
            Represents an entity that can attack and/or be attacked.
            </summary>
        </member>
        <member name="P:Zelda.Entities.IAttackableEntity.Attackable">
            <summary>
            Gets the <see cref="P:Zelda.Entities.IAttackableEntity.Attackable"/> component of this IAttackingEntity.
            </summary>
        </member>
        <member name="T:Zelda.Entities.IAttackingEntity">
            <summary>
            Provides a mechanism to receive a value that 
            indicates whether the Entity is currently attacking.
            </summary>
        </member>
        <member name="P:Zelda.Entities.IAttackingEntity.IsAttacking">
            <summary>
            Gets a value indicating whether this Enemy is currently attacking.
            </summary>
        </member>
        <member name="T:Zelda.Entities.ICollisionWithPlayerNotifier">
            <summary>
            Provides a mechanism to inform a <see cref="T:Zelda.Entities.ZeldaEntity"/>
            that it is/was colliding the the <see cref="T:Zelda.Entities.PlayerEntity"/>.
            </summary>
            <remarks>
            Implementing this interface on an Entity is all
            that is needed to get the functionallity to function.
            </remarks>
        </member>
        <member name="M:Zelda.Entities.ICollisionWithPlayerNotifier.NotifyCollisionWithPlayer(Zelda.Entities.PlayerEntity)">
            <summary>
            Notifies the object that implements this interface
            that the <paramref name="player"/> is colliding with the object.
            </summary>
            <param name="player">
            The corresponding <see cref="T:Zelda.Entities.PlayerEntity"/>.
            </param>
        </member>
        <member name="T:Zelda.Entities.IEntityOwned">
            <summary>
            Represents an object that is owned by a <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
        </member>
        <member name="P:Zelda.Entities.IEntityOwned.Owner">
            <summary>
            Gets the <see cref="T:Zelda.Entities.ZeldaEntity"/> that owns this IEntityOwned object.
            </summary>
        </member>
        <member name="T:Zelda.Entities.IEntityReaderWriter">
            <summary>
            Defines the interface for an object that encapsulates the process
            of serializing and deserializing the data of a specific ZeldaEntity type
            to and from a binary format.
            </summary>
        </member>
        <member name="P:Zelda.Entities.IEntityReaderWriter.EntityType">
            <summary>
            Gets the entity-type handled by the <see cref="T:Zelda.Entities.IEntityReaderWriter"/>.
            </summary>
        </member>
        <member name="M:Zelda.Entities.IEntityReaderWriter.Create(System.String)">
            <summary>
            Creates a new ZeldaEntity of the <see cref="P:Zelda.Entities.IEntityReaderWriter.EntityType"/> this IEntityReaderWriter supports.
            </summary>
            <param name="name">
            The name that uniquely identifies the new ZeldaEntity.
            </param>
            <returns>
            The newly created ZeldaEntity.
            </returns>
        </member>
        <member name="M:Zelda.Entities.IEntityReaderWriter.Serialize(Zelda.Entities.ZeldaEntity,Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the given object using the given <see cref="T:System.IO.BinaryWriter"/>.
            </summary>
            <param name="entity">
            The entity to serialize.
            </param>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
            <exception cref="T:System.InvalidCastException">
            If the type of the given entity is invalid for the <see cref="T:Zelda.Entities.IEntityReaderWriter"/>.
            </exception>
        </member>
        <member name="M:Zelda.Entities.IEntityReaderWriter.Deserialize(Zelda.Entities.ZeldaEntity,Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data in the given <see cref="T:System.IO.BinaryWriter"/> to initialize
            the given ZeldaEntity.
            </summary>
            <exception cref="T:System.InvalidCastException">
            If the type of the given entity is invalid for the <see cref="T:Zelda.Entities.IEntityReaderWriter"/>.
            </exception>
            <param name="entity">
            The ZeldaEntity to initialize.
            </param>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.IEntityReaderWriter.ShouldSave(Zelda.Entities.ZeldaEntity)">
            <summary>
            Gets a value indicating whether the given entity should be serialized.
            </summary>
            <param name="entity">
            The entity to check.
            </param>
            <returns>
            True if it should be serialized; 
            -or- otherwise false if the entity should be abondend -
            e.g. when the entity is in an unrecoverable save state.
            </returns>
        </member>
        <member name="T:Zelda.Entities.IEntityUpdateLogic`1">
            <summary>
            Provides a mechanism that updates a ZeldaEntity.
            </summary>
            <typeparam name="TEntity">
            The type of the entity.
            </typeparam>
        </member>
        <member name="M:Zelda.Entities.IEntityUpdateLogic`1.Update(`0,Zelda.ZeldaUpdateContext)">
            <summary>
            Updates the given entity.
            </summary>
            <param name="entity">
            The entity to update.
            </param>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="T:Zelda.Entities.ILaternOwner">
            <summary>
            Represents an IZeldaEntity that owns a <see cref="P:Zelda.Entities.ILaternOwner.Latern"/>.
            </summary>
        </member>
        <member name="P:Zelda.Entities.ILaternOwner.Latern">
            <summary>
            Gets the <see cref="T:Zelda.Latern"/> this ILaternOwner owns.
            </summary>
        </member>
        <member name="T:Zelda.Entities.IMoveableEntity">
            <summary>
            Represents an <see cref="T:Zelda.Entities.IZeldaEntity"/> that can move by
            providing the <see cref="P:Zelda.Entities.IMoveableEntity.Moveable"/> component.
            </summary>
        </member>
        <member name="P:Zelda.Entities.IMoveableEntity.Moveable">
            <summary>
            Gets the <see cref="P:Zelda.Entities.IMoveableEntity.Moveable"/> component of this IMoveableEntity.
            </summary>
        </member>
        <member name="T:Zelda.Entities.INotifyKilledEntity">
            <summary>
            Provides a mechanism to notify the object
            that it managed to kill a <see cref="T:Zelda.Entities.Components.Killable"/> <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
        </member>
        <member name="E:Zelda.Entities.INotifyKilledEntity.EntityKilled">
            <summary>
            Fired when this object has managed to kill the specified <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
        </member>
        <member name="M:Zelda.Entities.INotifyKilledEntity.NotifyKilled(Zelda.Entities.Components.Killable)">
            <summary>
            Notifies this object that it managed to kill a <see cref="T:Zelda.Entities.Components.Killable"/> <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
            <param name="killable">
            The Components.Killable component of the ZeldaEntity that has been killed.
            </param>
        </member>
        <member name="T:Zelda.Entities.IPersistentEntity">
            <summary>
            Defines an object that gets saved to the <see cref="T:Zelda.Saving.SaveFile"/>.
            </summary>
        </member>
        <member name="P:Zelda.Entities.IPersistentEntity.Name">
            <summary>
            Gets the (unique) name of this <see cref="T:Zelda.Entities.IPersistentEntity"/>.
            </summary>
        </member>
        <member name="T:Zelda.Entities.IPickupableEntity">
            <summary>
            Defines a mechanism that when implemented allows to pickup the entity.
            </summary>
        </member>
        <member name="M:Zelda.Entities.IPickupableEntity.PickUp(Zelda.Entities.PlayerEntity)">
            <summary>
            Tries to pickup this <see cref="T:Zelda.Entities.IPickupableEntity"/>.
            </summary>
            <param name="player">
            The PlayerEntity that tries t pick it up.
            </param>
            <returns>
            true if it has been picked up;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Entities.IStatefulEntityUpdateLogic`1">
            <summary>
            Provides a mechanism that updates a ZeldaEntity;
            each entity requires its own instance of the update logic.
            </summary>
            <typeparam name="TEntity">
            The type of the entity.
            </typeparam>
        </member>
        <member name="T:Zelda.Entities.IZeldaEntity">
            <summary>
            Defines the base interface the <see cref="T:Zelda.Entities.ZeldaEntity"/> class
            implements.
            </summary>
        </member>
        <member name="E:Zelda.Entities.IZeldaEntity.FloorNumberChanged">
            <summary>
            Fired when the FloorNumber of this IZeldaEntity has changed.
            </summary>
        </member>
        <member name="E:Zelda.Entities.IZeldaEntity.Added">
            <summary>
            Fired when this IZeldaEntity has been added to a <see cref="T:Zelda.ZeldaScene"/>.
            </summary>
        </member>
        <member name="E:Zelda.Entities.IZeldaEntity.Removed">
            <summary>
            Fired when this IZeldaEntity has been removed from a <see cref="T:Zelda.ZeldaScene"/>.
            </summary>
        </member>
        <member name="P:Zelda.Entities.IZeldaEntity.Scene">
            <summary>
            Gets the ZeldaScene this IZeldaEntity is part of.
            </summary>
        </member>
        <member name="P:Zelda.Entities.IZeldaEntity.Transform">
            <summary>
            Gets the <see cref="T:Zelda.Entities.Components.ZeldaTransform"/> component of this IZeldaEntity.
            </summary>
        </member>
        <member name="P:Zelda.Entities.IZeldaEntity.Collision">
            <summary>
            Gets the <see cref="T:Zelda.Entities.Components.ZeldaCollision"/> component of this IZeldaEntity.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Light">
            <summary>
            A <see cref="T:Zelda.Entities.Light"/> lightens up OR darkens the Scene.
            </summary>
            <remarks>
            Lights use simple white and transparent Sprites that are tinted
            and the drawn to a LightMap using additive color blending.
            The drawing of Lights is seperated from the drawing of other objects.
            </remarks>
        </member>
        <member name="P:Zelda.Entities.Light.Color">
            <summary>
            Gets or sets the <see cref="T:Microsoft.Xna.Framework.Color"/> of the <see cref="T:Zelda.Entities.Light"/>.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Light.Sprite">
            <summary>
            Gets or sets the <see cref="T:Atom.Xna.ISprite"/>
            that is used to visualize the <see cref="T:Zelda.Entities.Light"/>.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Light.IsLightOnly">
            <summary>
            Gets a value indicating whether only the DrawLight method of this ILight is called
            during the light drawing pass;
            -or- also the Draw method during the normal drawing pass.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Light.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Entities.Light"/> class.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Light.DrawLight(Zelda.ZeldaDrawContext)">
            <summary>
            Draws this Light. This method is called during the "Light-Drawing-Pass".
            </summary>
            <param name="drawContext">
            The current IDrawContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Light.Draw(Zelda.ZeldaDrawContext)">
            <summary>
            Overwridden to do nothing.
            </summary>
            <param name="drawContext">
            The current IDrawContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Light.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates the <see cref="T:Zelda.Entities.Light"/>.
            </summary>
            <param name="updateContext">
            The current IUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Light.Clone">
            <summary>
            Creates a clone of this <see cref="T:Zelda.Entities.Light"/>.
            </summary>
            <returns>The cloned ZeldaEntity.</returns>
        </member>
        <member name="M:Zelda.Entities.Light.SetupClone(Zelda.Entities.Light)">
            <summary>
            Setups the given <see cref="T:Zelda.Entities.Light"/> object
            to be a clone of this <see cref="T:Zelda.Entities.Light"/>.
            </summary>
            <param name="light">
            The entity to clone.
            </param>
        </member>
        <member name="M:Zelda.Entities.Light.UpdateCollisionBoundings">
            <summary>
            Calculates the bounding rectangle of the <see cref="T:Zelda.Entities.Light"/>.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Light.sprite">
            <summary>
            The <see cref="T:Atom.Xna.ISprite"/> of the <see cref="T:Zelda.Entities.Light"/>.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Light.color">
            <summary>
            The color of the Light.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Light.ReaderWriter">
            <summary>
            Defines the <see cref="T:Zelda.Entities.IEntityReaderWriter"/> for <see cref="T:Zelda.Entities.Light"/> entities.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Light.ReaderWriter.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the ReaderWriter class.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services. 
            </param>
        </member>
        <member name="M:Zelda.Entities.Light.ReaderWriter.Serialize(Zelda.Entities.Light,Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the given object using the given <see cref="T:System.IO.BinaryWriter"/>.
            </summary>
            <param name="entity">
            The entity to serialize.
            </param>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.Light.ReaderWriter.Deserialize(Zelda.Entities.Light,Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data in the given <see cref="T:System.IO.BinaryWriter"/> to initialize
            the given ZeldaEntity.
            </summary>
            <param name="entity">
            The ZeldaEntity to initialize.
            </param>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="T:Zelda.Entities.MapItem">
            <summary>
            Represents an <see cref="T:Zelda.Entities.ZeldaEntity"/> that allows
            to place an <see cref="P:Zelda.Entities.MapItem.ItemInstance"/> in a <see cref="T:Zelda.ZeldaScene"/>.
            </summary>
        </member>
        <member name="P:Zelda.Entities.MapItem.ItemInstance">
            <summary>
            Gets or sets the <see cref="P:Zelda.Entities.MapItem.ItemInstance"/> displayed by this <see cref="T:Zelda.Entities.MapItem"/>.
            </summary>
        </member>
        <member name="M:Zelda.Entities.MapItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Entities.MapItem"/> class.
            </summary>
        </member>
        <member name="M:Zelda.Entities.MapItem.#ctor(Zelda.Items.ItemInstance)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Entities.MapItem"/> class.
            </summary>
            <param name="itemInstance">
            The <see cref="P:Zelda.Entities.MapItem.ItemInstance"/>.
            </param>
        </member>
        <member name="M:Zelda.Entities.MapItem.Setup">
            <summary>
            Setups the <see cref="T:Zelda.Entities.MapItem"/> to visualize a new <see cref="P:Zelda.Entities.MapItem.ItemInstance"/>.
            </summary>
        </member>
        <member name="M:Zelda.Entities.MapItem.Draw(Zelda.ZeldaDrawContext)">
            <summary>
            Draws this <see cref="T:Zelda.Entities.MapItem"/>.
            </summary>
            <param name="drawContext">
            The current ZeldaDrawContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.MapItem.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this <see cref="T:Zelda.Entities.MapItem"/>.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext
            </param>
        </member>
        <member name="M:Zelda.Entities.MapItem.PickUp(Zelda.Entities.PlayerEntity)">
            <summary>
            Tries to pickup this <see cref="T:Zelda.Entities.MapItem"/>.
            </summary>
            <param name="player">
            The PlayerEntity that tries t pick it up.
            </param>
            <returns>
            true if it has been picked up;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Entities.MapItem.Clone">
            <summary>
            Returns a clone of this <see cref="T:Zelda.Entities.MapItem"/>.
            </summary>
            <returns>The cloned ZeldaEntity.</returns>
        </member>
        <member name="M:Zelda.Entities.MapItem.SetupClone(Zelda.Entities.MapItem)">
            <summary>
            Setups the given <see cref="T:Zelda.Entities.MapItem"/> object
            to be a clone of this <see cref="T:Zelda.Entities.MapItem"/>.
            </summary>
            <param name="clone">
            The entity to clone.
            </param>
        </member>
        <member name="F:Zelda.Entities.MapItem.itemInstance">
            <summary>
            The <see cref="P:Zelda.Entities.MapItem.ItemInstance"/> visualized by this <see cref="T:Zelda.Entities.MapItem"/>.
            </summary>
        </member>
        <member name="T:Zelda.Entities.MapItem.ReaderWriter">
            <summary>
            Defines the <see cref="T:Zelda.Entities.IEntityReaderWriter"/> for <see cref="T:Zelda.Entities.MapItem"/> entities.
            </summary>
        </member>
        <member name="M:Zelda.Entities.MapItem.ReaderWriter.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the ReaderWriter class.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services. 
            </param>
        </member>
        <member name="M:Zelda.Entities.MapItem.ReaderWriter.Serialize(Zelda.Entities.MapItem,Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the given object using the given <see cref="T:System.IO.BinaryWriter"/>.
            </summary>
            <param name="entity">
            The entity to serialize.
            </param>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.MapItem.ReaderWriter.Deserialize(Zelda.Entities.MapItem,Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data in the given <see cref="T:System.IO.BinaryWriter"/> to initialize
            the given ZeldaEntity.
            </summary>
            <exception cref="T:System.InvalidCastException">
            If the type of the given entity is invalid for the <see cref="T:Zelda.Entities.IEntityReaderWriter"/>.
            </exception>
            <param name="entity">
            The ZeldaEntity to initialize.
            </param>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="T:Zelda.Entities.Modifiers.Design.EntityModifierEditor">
            <summary>
            Implements an ObjectSelectionEditor that provides a mechanism
            that allows the user to select a Faction.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Modifiers.Design.EntityModifierEditor.GetTypes">
            <summary>
            Gets the Types of the objects that can be created by this EntityModifierEditor.
            </summary>
            <returns>
            The list of types.
            </returns>
        </member>
        <member name="F:Zelda.Entities.Modifiers.Design.EntityModifierEditor.types">
            <summary>
            Enumerates the types this EntityModifierEditor can create.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Modifiers.IAttachedEntityModifier">
            <summary>
            Represents an object that modifies an entity while being directly attached to it.
            As such the modification of the entity can change over time.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Modifiers.IEntityModifier">
            <summary>
            Represents some logic that modifies an <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Modifiers.IEntityModifier.Apply(Zelda.Entities.ZeldaEntity)">
            <summary>
            Applies this IEntityModifier on the specified ZeldaEntity.
            </summary>
            <param name="entity">
            The entity to modify.
            </param>
        </member>
        <member name="T:Zelda.Entities.Modifiers.ScaleCurveEntityModifier">
            <summary>
            Scales an entity based on a curve over time.
            The scale on x and y-axis have the same value.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Modifiers.SetBehaviourEntityModifier">
            <summary>
            Implements an <see cref="T:Zelda.Entities.Modifiers.IEntityModifier"/> that sets the <see cref="T:Zelda.Entities.Behaviours.IEntityBehaviour"/> of
            a <see cref="T:Zelda.Entities.Components.Behaveable"/> ZeldaEntity.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Modifiers.SetBehaviourEntityModifier.TemplateBehaviour">
            <summary>
            Gets or sets the template IEntityBehaviour that is cloned and then
            injected into behaveable entities to which this IEntityModifier is applied.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Modifiers.SetBehaviourEntityModifier.Apply(Zelda.Entities.ZeldaEntity)">
            <summary>
            Applies this IEntityModifier on the specified IZeldaEntity.
            </summary>
            <param name="entity">
            The entity to modify.
            </param>
        </member>
        <member name="M:Zelda.Entities.Modifiers.SetBehaviourEntityModifier.GetBehaviourFor(Zelda.Entities.ZeldaEntity)">
            <summary>
            Gets the <see cref="T:Zelda.Entities.Behaviours.IEntityBehaviour"/> for the specified ZeldaEntity.
            </summary>
            <param name="entity">
            The entity for which the new behaviour is for.
            </param>
            <returns>
            The newly created IEntityBehaviour.
            </returns>
        </member>
        <member name="M:Zelda.Entities.Modifiers.SetBehaviourEntityModifier.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.Modifiers.SetBehaviourEntityModifier.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="T:Zelda.Entities.PersistentMapItem">
            <summary>
            Represents a <see cref="T:Zelda.Entities.MapItem"/> that also is an <see cref="T:Zelda.Entities.IPersistentEntity"/>;
            which allows it to be removed from the Scene forever.
            </summary>
        </member>
        <member name="P:Zelda.Entities.PersistentMapItem.IsRemovingPersistanceOnPickUp">
            <summary>
            Gets or sets a value indicating whether
            the persistance of this PersistantMapItem is
            removed when the player has picked it up.
            </summary>
            <value>The default value is true.</value>
        </member>
        <member name="M:Zelda.Entities.PersistentMapItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Entities.PersistentMapItem"/> class.
            </summary>
        </member>
        <member name="M:Zelda.Entities.PersistentMapItem.#ctor(Zelda.Items.ItemInstance)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Entities.PersistentMapItem"/> class.
            </summary>
            <param name="itemInstance">
            The <see cref="T:Zelda.Items.ItemInstance"/>.
            </param>
        </member>
        <member name="M:Zelda.Entities.PersistentMapItem.PickUp(Zelda.Entities.PlayerEntity)">
            <summary>
            Tries to pickup this <see cref="T:Zelda.Entities.PersistentMapItem"/>.
            </summary>
            <param name="player">
            The PlayerEntity that tries t pick it up.
            </param>
            <returns>
            true if it has been picked up;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Entities.PersistentMapItem.Clone">
            <summary>
            Returns a clone of this <see cref="T:Zelda.Entities.MapItem"/>.
            </summary>
            <returns>The cloned ZeldaEntity.</returns>
        </member>
        <member name="M:Zelda.Entities.PersistentMapItem.SetupClone(Zelda.Entities.PersistentMapItem)">
            <summary>
            Setups the given <see cref="T:Zelda.Entities.ZeldaEntity"/> object
            to be a clone of this <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
            <param name="entity">
            The entity to clone.
            </param>
        </member>
        <member name="T:Zelda.Entities.PersistentMapItem.ReaderWriter">
            <summary>
            Defines the <see cref="T:Zelda.Entities.IEntityReaderWriter"/> for <see cref="T:Zelda.Entities.PersistentMapItem"/> entities.
            </summary>
        </member>
        <member name="M:Zelda.Entities.PersistentMapItem.ReaderWriter.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the ReaderWriter class.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services. 
            </param>
        </member>
        <member name="M:Zelda.Entities.PersistentMapItem.ReaderWriter.Serialize(Zelda.Entities.PersistentMapItem,Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the given object using the given <see cref="T:System.IO.BinaryWriter"/>.
            </summary>
            <param name="entity">
            The entity to serialize.
            </param>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.PersistentMapItem.ReaderWriter.Deserialize(Zelda.Entities.PersistentMapItem,Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data in the given <see cref="T:System.IO.BinaryWriter"/> to initialize
            the given ZeldaEntity.
            </summary>
            <param name="entity">
            The ZeldaEntity to initialize.
            </param>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="T:Zelda.Entities.Plant">
            <summary>
            A plant is un-moveable but killable entity that may drop loot.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Plant.Statable">
            <summary>
            Gets the <see cref="P:Zelda.Entities.Plant.Statable"/> component of this <see cref="T:Zelda.Entities.Plant"/> entity.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Plant.Killable">
            <summary>
            Gets the <see cref="P:Zelda.Entities.Plant.Killable"/> component of this <see cref="T:Zelda.Entities.Plant"/> entity.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Plant.Lootable">
            <summary>
            Gets the <see cref="P:Zelda.Entities.Plant.Lootable"/> component of this <see cref="T:Zelda.Entities.Plant"/> entity.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Plant.Attackable">
            <summary>
            Gets the <see cref="P:Zelda.Entities.Plant.Attackable"/> component of this <see cref="T:Zelda.Entities.Plant"/> entity.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Plant.Respawnable">
            <summary>
            Gets the <see cref="P:Zelda.Entities.Plant.Respawnable"/> component of this <see cref="T:Zelda.Entities.Plant"/> entity.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Plant.CutEffectAnimationName">
            <summary>
            Gets or sets the name of the special effect animation that is
            displayed when this Plant got cut.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Plant.CutEffectAnimationColor">
            <summary>
            Gets or sets the Color of the Cut Effect Animation that 
            is shown when the player cuts the plant.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Plant.HasCutEffect">
            <summary>
            Gets a value indicating whether this Plant will display a
            'special' effect when she gets cut.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Plant.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Entities.Plant"/> class.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Plant.Setup(Zelda.IZeldaServiceProvider)">
            <summary>
            Setups this <see cref="T:Zelda.Entities.Plant"/>.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game related services.
            </param>
        </member>
        <member name="M:Zelda.Entities.Plant.SpawnCutEffect">
            <summary>
            Helper method that spawns the cut effect for this Plant.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Plant.OnKilled(Zelda.Entities.Components.Killable)">
            <summary>
            Called when this Plant has been destroyed.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
        </member>
        <member name="M:Zelda.Entities.Plant.OnRespawned(Zelda.Entities.Components.Respawnable)">
            <summary>
            Called when this Plant has been respawned.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>>
        </member>
        <member name="M:Zelda.Entities.Plant.OnDamaged(Zelda.Status.Statable,Zelda.Attacks.AttackDamageResult)">
            <summary>
            Gets called when this Plant etity has been damaged.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
            <param name="e">
            The <see cref="T:Zelda.Attacks.AttackDamageResult"/> that contains the event data.
            </param>
        </member>
        <member name="M:Zelda.Entities.Plant.OnCutEffectEnded(Atom.Xna.SpriteAnimation)">
            <summary>
            Called when the cut effect ended displaying.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
        </member>
        <member name="M:Zelda.Entities.Plant.SetupClone(Zelda.Entities.Plant)">
            <summary>
            Setups the given <see cref="T:Zelda.Entities.Plant"/> entity to be a clone of this <see cref="T:Zelda.Entities.Plant"/> entity.
            </summary>
            <param name="plant">
            The Plant entity to setup as a clone of this Plant.
            </param>
        </member>
        <member name="M:Zelda.Entities.Plant.Clone">
            <summary>
            Returns a clone of this <see cref="T:Zelda.Entities.Plant"/> entity.
            </summary>
            <returns>The cloned ZeldaEntity.</returns>
        </member>
        <member name="F:Zelda.Entities.Plant.respawnable">
            <summary>
            Identifies the <see cref="P:Zelda.Entities.Plant.Respawnable"/> component of this <see cref="T:Zelda.Entities.Plant"/> entity.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Plant.statable">
            <summary>
            Identifies the <see cref="P:Zelda.Entities.Plant.Statable"/> component of this <see cref="T:Zelda.Entities.Plant"/> entity.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Plant.killable">
            <summary>
            Identifies the <see cref="P:Zelda.Entities.Plant.Killable"/> component of this <see cref="T:Zelda.Entities.Plant"/> entity.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Plant.lootable">
            <summary>
            Identifies the <see cref="P:Zelda.Entities.Plant.Lootable"/> component of this <see cref="T:Zelda.Entities.Plant"/> entity.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Plant.attackable">
            <summary>
            Identifies the <see cref="P:Zelda.Entities.Plant.Attackable"/> component of this <see cref="T:Zelda.Entities.Plant"/> entity.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Plant.cutEffect">
            <summary>
            The effect object that is added to the scene
            once the player has cut the plant.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Plant.serviceProvider">
            <summary>
            Provides fast access to game related services.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Plant.ReaderWriter">
            <summary>
            Defines the <see cref="T:Zelda.Entities.IEntityReaderWriter"/> for <see cref="T:Zelda.Entities.Plant"/> entities.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Plant.ReaderWriter.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the ReaderWriter class.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services. 
            </param>
        </member>
        <member name="M:Zelda.Entities.Plant.ReaderWriter.Serialize(Zelda.Entities.Plant,Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the given object using the given <see cref="T:System.IO.BinaryWriter"/>.
            </summary>
            <param name="entity">
            The entity to serialize.
            </param>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.Plant.ReaderWriter.Deserialize(Zelda.Entities.Plant,Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data in the given <see cref="T:System.IO.BinaryWriter"/> to initialize
            the given ZeldaEntity.
            </summary>
            <param name="entity">
            The ZeldaEntity to initialize.
            </param>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="T:Zelda.Entities.PlayerEntity">
            <summary>
            Defines the ZeldaEntity the player is controlling; Link.
            This class can't be inherited.
            </summary>
        </member>
        <member name="E:Zelda.Entities.PlayerEntity.Respawned">
            <summary>
            Fired when this PlayerEntity has respawned after dieing.
            </summary>
        </member>
        <member name="E:Zelda.Entities.PlayerEntity.EntityKilled">
            <summary>
            Fired when this PlayerEntity has killed an <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
        </member>
        <member name="E:Zelda.Entities.PlayerEntity.ItemCollected">
            <summary>
            Fired when this PlayerEntity has collected an <see cref="T:Zelda.Items.Item"/>.
            </summary>
        </member>
        <member name="P:Zelda.Entities.PlayerEntity.Inventory">
            <summary>
            Gets the <see cref="P:Zelda.Entities.PlayerEntity.Inventory"/> of this <see cref="T:Zelda.Entities.PlayerEntity"/>.
            </summary>
        </member>
        <member name="P:Zelda.Entities.PlayerEntity.CraftingBottle">
            <summary>
            Gets the magic <see cref="T:Zelda.Crafting.CraftingBottle"/> of this PlayerEntity.
            </summary>
        </member>
        <member name="P:Zelda.Entities.PlayerEntity.Equipment">
            <summary>
            Gets the <see cref="T:Zelda.Items.EquipmentStatus"/> of this <see cref="T:Zelda.Entities.PlayerEntity"/>.
            </summary>
        </member>
        <member name="P:Zelda.Entities.PlayerEntity.TalentTree">
            <summary>
            Gets the <see cref="T:Zelda.Talents.TalentTree"/> of this <see cref="T:Zelda.Entities.PlayerEntity"/>.
            </summary>
        </member>
        <member name="P:Zelda.Entities.PlayerEntity.OcarinaBox">
            <summary>
            Gets the <see cref="T:Zelda.Ocarina.OcarinaBox"/> of this <see cref="T:Zelda.Entities.PlayerEntity"/>.
            </summary>
        </member>
        <member name="P:Zelda.Entities.PlayerEntity.Skills">
            <summary>
            Gets a component that manages the <see cref="P:Zelda.Entities.PlayerEntity.Skills"/> this <see cref="T:Zelda.Entities.PlayerEntity"/> has aquired.
            </summary>
        </member>
        <member name="P:Zelda.Entities.PlayerEntity.QuickActionSlots">
            <summary>
            Gets the list of QuickActionSlots of this PlayerEntity.
            </summary>
        </member>
        <member name="P:Zelda.Entities.PlayerEntity.QuestLog">
            <summary>
            Gets the <see cref="T:Zelda.Quests.QuestLog"/> of this <see cref="T:Zelda.Entities.PlayerEntity"/>.
            </summary>
        </member>
        <member name="P:Zelda.Entities.PlayerEntity.FactionStates">
            <summary>
            Gets the <see cref="T:Zelda.Factions.FactionStates"/> of this <see cref="T:Zelda.Entities.PlayerEntity"/>.
            </summary>
        </member>
        <member name="P:Zelda.Entities.PlayerEntity.DrawDataAndStrategy">
            <summary>
            Gets the IDrawDataAndStrategy that is responsible for drawing this PlayerEntity.
            </summary>
        </member>
        <member name="P:Zelda.Entities.PlayerEntity.Control">
            <summary>
            Gets or sets the object that controls how the Player interacts with the PlayerEntity.
            </summary>
        </member>
        <member name="P:Zelda.Entities.PlayerEntity.PickedupItemContainer">
            <summary>
            Gets the container object which stores what <see cref="T:Zelda.Items.Item"/>
            this <see cref="T:Zelda.Entities.PlayerEntity"/> currently has picked up.
            </summary>
        </member>
        <member name="P:Zelda.Entities.PlayerEntity.Class">
            <summary>
            Gets the localized class name of this PlayerEntity.
            </summary>
        </member>
        <member name="P:Zelda.Entities.PlayerEntity.Latern">
            <summary>
            Gets the <see cref="P:Zelda.Entities.PlayerEntity.Latern"/> of this PlayerEntity.
            </summary>
        </member>
        <member name="P:Zelda.Entities.PlayerEntity.Profile">
            <summary>
            Gets the <see cref="T:Zelda.Profiles.GameProfile"/> that stores information about the PlayerEntity and his adventure.
            </summary>
        </member>
        <member name="P:Zelda.Entities.PlayerEntity.WorldStatus">
            <summary>
            Gets the status of this PlayerEntity's world.
            </summary>
        </member>
        <member name="P:Zelda.Entities.PlayerEntity.IngameState">
            <summary>
            Gets or sets the <see cref="T:Zelda.IIngameState"/> object
            that provides access to ingame-related functionality.
            </summary>
        </member>
        <member name="P:Zelda.Entities.PlayerEntity.SharedChest">
            <summary>
            Gets the <see cref="T:Zelda.Items.SharedChest"/> of this PlayerEntity.
            </summary>
        </member>
        <member name="P:Zelda.Entities.PlayerEntity.IsCasting">
            <summary>
            Gets a value indicating whether this PlayerEntity 
            is currently casting a Spell.
            </summary>
        </member>
        <member name="P:Zelda.Entities.PlayerEntity.Moveable">
            <summary>
            Gets the <see cref="P:Zelda.Entities.PlayerEntity.Moveable"/> component of this <see cref="T:Zelda.Entities.PlayerEntity"/>.
            </summary>
        </member>
        <member name="P:Zelda.Entities.PlayerEntity.Statable">
            <summary>
            Gets the <see cref="P:Zelda.Entities.PlayerEntity.Statable"/> component of this <see cref="T:Zelda.Entities.PlayerEntity"/>.
            </summary>
        </member>
        <member name="P:Zelda.Entities.PlayerEntity.Attackable">
            <summary>
            Gets the <see cref="P:Zelda.Entities.PlayerEntity.Attackable"/> component of this <see cref="T:Zelda.Entities.PlayerEntity"/>.
            </summary>
        </member>
        <member name="P:Zelda.Entities.PlayerEntity.Castable">
            <summary>
            Gets the <see cref="T:Zelda.Casting.Castable"/> component of this <see cref="T:Zelda.Entities.PlayerEntity"/>.
            </summary>
        </member>
        <member name="M:Zelda.Entities.PlayerEntity.#ctor(System.String,Zelda.Profiles.GameProfile,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Entities.PlayerEntity"/> class.
            </summary>
            <param name="name">
            The name of the new PlayerEntity.
            </param>
            <param name="profile">
            The profile that stores information about the PlayerEntity and his adventure.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Entities.PlayerEntity.SetupComponents(Zelda.IZeldaServiceProvider)">
            <summary>
            Setups the components of this PlayerEntity.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Entities.PlayerEntity.HookEvents">
            <summary>
            Hooks up this PlayerEntity with the events of various components.
            </summary>
        </member>
        <member name="M:Zelda.Entities.PlayerEntity.LoadContent(Zelda.IZeldaServiceProvider)">
            <summary>
            Loads the content used by this PlayerEntity.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Entities.PlayerEntity.StartNewAdventure(System.String,Zelda.Profiles.GameProfile,Zelda.IZeldaServiceProvider)">
            <summary>
            Creates a new <see cref="T:Zelda.Entities.PlayerEntity"/> which is set-up to start a new adventure.
            </summary>
            <param name="playerName">
            The name of the new PlayerEntity.
            </param>
            <param name="profile">
            The profile that owns the new PlayerEntity.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
            <returns>
            The newly created PlayerEntity.
            </returns>
        </member>
        <member name="M:Zelda.Entities.PlayerEntity.CreateExisting(System.String,Zelda.Profiles.GameProfile,Zelda.IZeldaServiceProvider)">
            <summary>
            Creates a new PlayerEntity that already has started an adventure.
            </summary>
            <param name="playerName">
            The name of the player.
            </param>
            <param name="profile">
            The profile that owns the new PlayerEntity.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
            <returns>
            The newly loaden PlayerEntity.
            </returns>
        </member>
        <member name="M:Zelda.Entities.PlayerEntity.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this <see cref="T:Zelda.Entities.PlayerEntity"/>.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.PlayerEntity.OnDied(Zelda.Status.Statable)">
            <summary>
            Gets called when this PlayerEntity has 'died'.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
        </member>
        <member name="M:Zelda.Entities.PlayerEntity.OnLifeRestored(System.Object,Zelda.Attacks.AttackDamageResult)">
            <summary>
            Gets called when this PlayerEntity has restored some of its life.
            </summary>
            <param name="sender">The sender of the event </param>
            <param name="e">The Zelda.Attacks.AttackDamageResult that contains the event data.</param>
        </member>
        <member name="M:Zelda.Entities.PlayerEntity.OnManaRestored(System.Object,Zelda.Attacks.AttackDamageResult)">
            <summary>
            Gets called when this PlayerEntity has restored some of its mana.
            </summary>
            <param name="sender">The sender of the event </param>
            <param name="e">The Zelda.Attacks.AttackDamageResult that contains the event data.</param>
        </member>
        <member name="M:Zelda.Entities.PlayerEntity.OnLevelUp(System.Object,System.EventArgs)">
            <summary>
            Gets called when this PlayerEntity has got a level-up.
            </summary>
            <param name="sender">The sender of the event </param>
            <param name="e">The EventArgs that contains the event data.</param>
        </member>
        <member name="M:Zelda.Entities.PlayerEntity.Zelda#Entities#INotifyKilledEntity#NotifyKilled(Zelda.Entities.Components.Killable)">
            <summary>
            Gets called when this <see cref="T:Zelda.Entities.PlayerEntity"/> managed to kill a <see cref="T:Zelda.Entities.Components.Killable"/> ZeldaEntity.
            </summary>
            <param name="killable">
            The component that indentifies the ZeldaEntity that has been killed.
            </param>
        </member>
        <member name="M:Zelda.Entities.PlayerEntity.OnExperienceGained(System.Object,System.Int64)">
            <summary>
            Called when the player has gained experience.
            </summary>
            <param name="sender">The sender of the event </param>
            <param name="experience">The amount of experience gained by the player.</param>
        </member>
        <member name="M:Zelda.Entities.PlayerEntity.OnDamaged(System.Object,Zelda.Attacks.AttackDamageResult)">
            <summary>
            Called when the player has been damaged.
            </summary>
            <param name="sender">The sender of the event </param>
            <param name="e">The Zelda.Attacks.AttackDamageResult that contains the event data.</param>
        </member>
        <member name="M:Zelda.Entities.PlayerEntity.OnQuestAccepted(System.Object,Zelda.Quests.Quest)">
            <summary>
            Called when the player has accepted a new Quest.
            </summary>
            <param name="sender">The sender of the event </param>
            <param name="quest">The related Quest.</param>
        </member>
        <member name="M:Zelda.Entities.PlayerEntity.OnQuestAccomplished(System.Object,Zelda.Quests.Quest)">
            <summary>
            Called when the player has accomplished all quals of a Quest.
            </summary>
            <param name="sender">The sender of the event </param>
            <param name="quest">The related Quest.</param>
        </member>
        <member name="M:Zelda.Entities.PlayerEntity.OnPositionChanged(System.Object,Atom.ChangedValue{Atom.Math.Vector2})">
            <summary>
            Called when the player has changed position.
            </summary>
            <param name="sender">The sender of the event </param>
            <param name="e">The Atom.ChangedValue{Vector2} that contains the event data.</param>
        </member>
        <member name="M:Zelda.Entities.PlayerEntity.OnReputationLevelChanged(System.Object,Zelda.Factions.ReputationLevelChangedEventArgs)">
            <summary>
            Called when the player has gained in reputation level. 
            </summary>
            <param name="sender">The sender of the event </param>
            <param name="e">The Zelda.Factions.ReputationLevelChangedEventArgs that contains the event data.</param>
        </member>
        <member name="M:Zelda.Entities.PlayerEntity.Collect(Zelda.Items.ItemInstance)">
            <summary>
            Collects the give ItemInstance, adding it to the Inventory of the player.
            </summary>
            <remarks>
            The <see cref="E:Zelda.Entities.PlayerEntity.ItemCollected"/> event is fired upon collection.
            </remarks>
            <param name="itemInstance">
            The ItemInstance to collect.
            </param>
            <returns>
            True if the ItemInstance could successfully collected;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Entities.PlayerEntity.RespawnWhenDead">
            <summary>
            Respawns this PlayerEntity after the player has died.
            </summary>
            <exception cref="T:Atom.NotFoundException">
            If the spawn point of the last save point couldn't be found and 
            no alternative <see cref="T:Zelda.Entities.Spawning.PlayerSpawnPoint"/> could be found either.
            </exception>
        </member>
        <member name="M:Zelda.Entities.PlayerEntity.RespawnAtLastSavePoint">
            <summary>
            Respawns the player at the last used save point.
            </summary>
        </member>
        <member name="M:Zelda.Entities.PlayerEntity.GetRespawnSpawnPoint(Zelda.ZeldaScene,Zelda.Saving.SavePoint)">
            <summary>
            Gets the spawn point at which the player should respawn.
            </summary>
            <param name="scene">
            The scene that is supposed to contain the ISpawnPoint.
            </param>
            <param name="savePoint">
            The last used save point.
            </param>
            <returns>
            The spawnpoint to use.
            </returns>
        </member>
        <member name="M:Zelda.Entities.PlayerEntity.CanSwimStateFunction">
            <summary>
            Defines the function that is used by the Moveable component to determine
            whether this PlayerEntity can currently swim.
            </summary>
            <returns>
            Whether the PlayerEntity can currently swim.
            </returns>
        </member>
        <member name="M:Zelda.Entities.PlayerEntity.Clone">
            <summary>
            This operation is not supported.
            </summary>
            <exception cref="T:System.NotSupportedException">
            This operation is not supported.
            </exception>
            <returns>
            This operation doesn't return, but always throws NotSupportedException.
            </returns>
        </member>
        <member name="M:Zelda.Entities.PlayerEntity.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes/Writes the current state of this IStateSaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.PlayerEntity.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes/Reads the current state of this IStateSaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.PlayerEntity.LoadSharedChest(Zelda.IZeldaServiceProvider)">
            <summary>
            Loads the content of the SharedChest from the HD and assigns it
            it the SharedChest of this PlayerEntity.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="F:Zelda.Entities.PlayerEntity.sharedChest">
            <summary>
            The SharedChest represents a storage place for items that are shared over -all- characters.
            </summary>
        </member>
        <member name="F:Zelda.Entities.PlayerEntity.fairy">
            <summary>
            The companion of the player.
            </summary>
        </member>
        <member name="F:Zelda.Entities.PlayerEntity.inventory">
            <summary>
            The inventory of the PlayerEntity.
            </summary>
        </member>
        <member name="F:Zelda.Entities.PlayerEntity.craftingBottle">
            <summary>
            The magic crafting bottle of the PlayerEntity.
            </summary>
        </member>
        <member name="F:Zelda.Entities.PlayerEntity.talentTree">
            <summary>
            The TalentTree of the PlayerEntity.
            </summary>
        </member>
        <member name="F:Zelda.Entities.PlayerEntity.questLog">
            <summary>
            The QuestLog of the PlayerEntity.
            </summary>
        </member>
        <member name="F:Zelda.Entities.PlayerEntity.ocarinaBox">
            <summary>
            The OcarinaBox of the PlayerEntity.
            </summary>
        </member>
        <member name="F:Zelda.Entities.PlayerEntity.lantern">
            <summary>
            The latern that emits light for this PlayerEntity.
            </summary>
        </member>
        <member name="F:Zelda.Entities.PlayerEntity.quickActionSlots">
            <summary>
            The lists that contains the QuickActionSlots of this PlayerEntity.
            </summary>
        </member>
        <member name="F:Zelda.Entities.PlayerEntity.factionStates">
            <summary>
            Stores the state of the player towards the <see cref="T:Zelda.Factions.Faction"/>s in the game.
            </summary>
        </member>
        <member name="F:Zelda.Entities.PlayerEntity.playerDrawDaS">
            <summary>
            Stores to the <see cref="T:Zelda.Entities.Drawing.PlayerDrawDataAndStrategy"/> object.
            </summary>
        </member>
        <member name="F:Zelda.Entities.PlayerEntity.pickedupItemContainer">
            <summary>
            Stores the Item which the player currently has picked up.
            </summary>
        </member>
        <member name="F:Zelda.Entities.PlayerEntity.profile">
            <summary>
            The profile that stores information about the PlayerEntity and his adventure.
            </summary>
        </member>
        <member name="F:Zelda.Entities.PlayerEntity.statistics">
            <summary>
            Encapsulates various playing statistics.
            </summary>
        </member>
        <member name="F:Zelda.Entities.PlayerEntity.moveable">
            <summary>
            Identifies the <see cref="P:Zelda.Entities.PlayerEntity.Moveable"/> component of this PlayerEntity.
            </summary>
        </member>
        <member name="F:Zelda.Entities.PlayerEntity.statable">
            <summary>
            Identifies the <see cref="T:Zelda.Status.ExtendedStatable"/> component of this PlayerEntity.
            </summary>
        </member>
        <member name="F:Zelda.Entities.PlayerEntity.skillable">
            <summary>
            Identifies the <see cref="T:Zelda.Skills.Skillable"/> component of this PlayerEntity.
            </summary>
        </member>
        <member name="F:Zelda.Entities.PlayerEntity.attackable">
            <summary>
            Identifies the <see cref="P:Zelda.Entities.PlayerEntity.Attackable"/> component of this PlayerEntity.
            </summary>
        </member>
        <member name="F:Zelda.Entities.PlayerEntity.castable">
            <summary>
            Identifies the <see cref="T:Zelda.Casting.Castable"/> component of this PlayerEntity.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Projectiles.Drawing.AnimatedProjectileSprites">
            <summary>
            Provides access to the Sprites used to visualize a Projectile.
            This is a sealed class.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Projectiles.Drawing.AnimatedProjectileSprites.#ctor(Atom.Xna.AnimatedSprite,Atom.Xna.AnimatedSprite,Atom.Xna.AnimatedSprite,Atom.Xna.AnimatedSprite)">
            <summary>
            Initializes a new instance of the AnimatedProjectileSprites class.
            </summary>
            <param name="spriteTemplateLeft">
            The AnimatedSprite used as a template for the SpriteAnimations visualizing a Projectile heading left.
            </param>
            <param name="spriteTemplateRight">
            The AnimatedSprite used as a template for the SpriteAnimations visualizing a Projectile heading right.
            </param>
            <param name="spriteTemplateDown">
            The AnimatedSprite used as a template for the SpriteAnimations visualizing a Projectile heading Down.
            </param>
            <param name="spriteTemplateUp">
            The AnimatedSprite used as a template for the SpriteAnimations visualizing a Projectile heading up.
            </param>
        </member>
        <member name="M:Zelda.Entities.Projectiles.Drawing.AnimatedProjectileSprites.Get(Atom.Math.Direction4)">
            <summary>
            Gets the Projectile Sprite associated with the given <paramref name="direction"/>.
            </summary>
            <param name="direction">
            The direction the projectile is heading.
            </param>
            <returns>
            The Sprite associated with the given direction.
            </returns>
        </member>
        <member name="M:Zelda.Entities.Projectiles.Drawing.AnimatedProjectileSprites.Return(Atom.Xna.ISprite)">
            <summary>
            Returns the given ISprite to this IProjectileSprites instance.
            </summary>
            <param name="sprite">
            The sprite to return. Must have been requested with <see cref="M:Zelda.Entities.Projectiles.Drawing.AnimatedProjectileSprites.Get(Atom.Math.Direction4)"/>.
            </param>
        </member>
        <member name="M:Zelda.Entities.Projectiles.Drawing.AnimatedProjectileSprites.GetSize(Atom.Math.Direction4)">
            <summary>
            Gets the size of the ISprite for the given Direction.
            </summary>
            <param name="direction">
            The direction of the projectile.
            </param>
            <returns>
            The size in pixels.
            </returns>
        </member>
        <member name="F:Zelda.Entities.Projectiles.Drawing.AnimatedProjectileSprites.spriteTemplateLeft">
            <summary>
            The AnimatedSprite used as a template for the Projectiles.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Projectiles.Drawing.AnimatedProjectileSprites.spriteTemplateRight">
            <summary>
            The AnimatedSprite used as a template for the Projectiles.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Projectiles.Drawing.AnimatedProjectileSprites.spriteTemplateUp">
            <summary>
            The AnimatedSprite used as a template for the Projectiles.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Projectiles.Drawing.AnimatedProjectileSprites.spriteTemplateDown">
            <summary>
            The AnimatedSprite used as a template for the Projectiles.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Projectiles.Drawing.IProjectileSprites">
            <summary>
            Provides access to the sprites used to visualize a Projectile.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Projectiles.Drawing.IProjectileSprites.Get(Atom.Math.Direction4)">
            <summary>
            Gets the ISprite associated with the given <paramref name="direction"/>.
            </summary>
            <param name="direction">
            The direction the projectile is heading.
            </param>
            <returns>
            The Sprite associated with the given direction.
            </returns>
        </member>
        <member name="M:Zelda.Entities.Projectiles.Drawing.IProjectileSprites.Return(Atom.Xna.ISprite)">
            <summary>
            Returns the given ISprite to this IProjectileSprites instance.
            </summary>
            <param name="sprite">
            The sprite to return. Must have been requested with <see cref="M:Zelda.Entities.Projectiles.Drawing.IProjectileSprites.Get(Atom.Math.Direction4)"/>.
            </param>
        </member>
        <member name="M:Zelda.Entities.Projectiles.Drawing.IProjectileSprites.GetSize(Atom.Math.Direction4)">
            <summary>
            Gets the size of the ISprite for the given Direction.
            </summary>
            <param name="direction">
            The direction of the projectile.
            </param>
            <returns>
            The size in pixels.
            </returns>
        </member>
        <member name="T:Zelda.Entities.Projectiles.Drawing.ProjectileDrawDataAndStrategy">
            <summary>
            Defines an <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/> is used
            to draw a <see cref="T:Zelda.Entities.Projectiles.Projectile"/>.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Projectiles.Drawing.ProjectileDrawDataAndStrategy.Sprite">
            <summary>
            Gets or sets the <see cref="T:Atom.Xna.ISprite"/> used to draw the Projectile.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Projectiles.Drawing.ProjectileDrawDataAndStrategy.#ctor(Zelda.Entities.Projectiles.Projectile)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Entities.Projectiles.Drawing.ProjectileDrawDataAndStrategy"/> class.
            </summary>
            <param name="projectile">
            The Projectile to visualize with the new <see cref="T:Zelda.Entities.Projectiles.Drawing.ProjectileDrawDataAndStrategy"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="projectile"/> is null.
            </exception>
        </member>
        <member name="M:Zelda.Entities.Projectiles.Drawing.ProjectileDrawDataAndStrategy.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Projectiles.Drawing.ProjectileDrawDataAndStrategy.Draw(Zelda.ZeldaDrawContext)">
            <summary>
            Draws this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
            <param name="drawContext">
            The current ZeldaDrawContext.
            </param>
        </member>
        <member name="P:Zelda.Entities.Projectiles.Drawing.ProjectileDrawDataAndStrategy.Zelda#Entities#Drawing#IDrawDataAndStrategy#SpriteGroup">
            <summary>
            This operation is not supported.
            </summary>
            <exception cref="T:System.NotSupportedException">
            This operation is not supported.
            </exception>
        </member>
        <member name="M:Zelda.Entities.Projectiles.Drawing.ProjectileDrawDataAndStrategy.Zelda#Entities#Drawing#IDrawDataAndStrategy#Load(Zelda.IZeldaServiceProvider)">
            <summary>
            Loads the assets needed by this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Entities.Projectiles.Drawing.ProjectileDrawDataAndStrategy.Zelda#Entities#Drawing#IDrawDataAndStrategy#Clone(Zelda.Entities.ZeldaEntity)">
            <summary>
            Clones this <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/> for use by the specified object.
            </summary>
            <param name="newOwner">
            The new owner of the cloned <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </param>
            <returns>
            The cloned <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If the <paramref name="newOwner"/> is null.
            </exception>
        </member>
        <member name="M:Zelda.Entities.Projectiles.Drawing.ProjectileDrawDataAndStrategy.Zelda#Saving#ISaveable#Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.Projectiles.Drawing.ProjectileDrawDataAndStrategy.Zelda#Saving#ISaveable#Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Entities.Projectiles.Drawing.ProjectileDrawDataAndStrategy.transform">
            <summary>
            Identifies the ZeldaTransform component of the Projectile.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Projectiles.Drawing.ProjectileSprites">
            <summary>
            Provides access to the Sprites used to visualize a Projectile.
            This is a sealed class.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Projectiles.Drawing.ProjectileSprites.#ctor(Atom.Xna.Sprite,Atom.Xna.Sprite,Atom.Xna.Sprite,Atom.Xna.Sprite)">
            <summary>
            Initializes a new instance of the ProjectileSprites class.
            </summary>
            <param name="spriteLeft">
            The Sprite used to visualize a Projectile heading left.
            </param>
            <param name="spriteRight">
            The Sprite used to visualize a Projectile heading right.
            </param>
            <param name="spriteDown">
            The Sprite used to visualize a Projectile heading Down.
            </param>
            <param name="spriteUp">
            The Sprite used to visualize a Projectile heading up.
            </param>
        </member>
        <member name="M:Zelda.Entities.Projectiles.Drawing.ProjectileSprites.Get(Atom.Math.Direction4)">
            <summary>
            Gets the Projectile Sprite associated with the given <paramref name="direction"/>.
            </summary>
            <param name="direction">
            The direction the projectile is heading.
            </param>
            <returns>
            The Sprite associated with the given direction.
            </returns>
        </member>
        <member name="M:Zelda.Entities.Projectiles.Drawing.ProjectileSprites.GetSize(Atom.Math.Direction4)">
            <summary>
            Gets the size of the ISprite for the given Direction.
            </summary>
            <param name="direction">
            The direction of the projectile.
            </param>
            <returns>
            The size in pixels.
            </returns>
        </member>
        <member name="M:Zelda.Entities.Projectiles.Drawing.ProjectileSprites.Return(Atom.Xna.ISprite)">
            <summary>
            Returns the given ISprite to this IProjectileSprites instance.
            </summary>
            <param name="sprite">
            The sprite to return. Must have been requested with <see cref="M:Zelda.Entities.Projectiles.Drawing.ProjectileSprites.Get(Atom.Math.Direction4)"/>.
            </param>
        </member>
        <member name="F:Zelda.Entities.Projectiles.Drawing.ProjectileSprites.spriteLeft">
            <summary>
            The Sprite used to visualize the Projectiles.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Projectiles.Drawing.ProjectileSprites.spriteRight">
            <summary>
            The Sprite used to visualize the Projectiles.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Projectiles.Drawing.ProjectileSprites.spriteUp">
            <summary>
            The Sprite used to visualize the Projectiles.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Projectiles.Drawing.ProjectileSprites.spriteDown">
            <summary>
            The Sprite used to visualize the Projectiles.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Projectiles.Drawing.ProjectileSpritesHelper">
            <summary>
            Static helper class that provides a mechanism to load an appropriate <see cref="T:Zelda.Entities.Projectiles.Drawing.IProjectileSprites"/>.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Projectiles.Drawing.ProjectileSpritesHelper.Load(System.String,Atom.Xna.ISpriteLoader)">
            <summary>
            Tries to load the appropriate <see cref="T:Zelda.Entities.Projectiles.Drawing.IProjectileSprites"/> for the given <paramref name="spriteGroup"/>.
            </summary>
            <param name="spriteGroup">
            The sprite group to load.
            </param>
            <param name="spriteLoader">
            Provides a mechanism to load ISprites.
            </param>
            <returns>
            The loaded IProjectileSprites.
            </returns>
        </member>
        <member name="M:Zelda.Entities.Projectiles.Drawing.ProjectileSpritesHelper.TryLoadAsSingleAnimatedProjectileSprites(System.String,Atom.Xna.ISpriteLoader)">
            <summary>
            Tries to load the <see cref="T:Zelda.Entities.Projectiles.Drawing.ProjectileSprites"/> as <see cref="T:Zelda.Entities.Projectiles.Drawing.SingleAnimatedProjectileSprites"/>
            using the given <paramref name="spriteGroup"/>.
            </summary>
            <param name="spriteGroup">
            The sprite group to load.
            </param>
            <param name="spriteLoader">
            Provides a mechanism to load ISprites.
            </param>
            <returns>
            The loaded IProjectileSprites.
            </returns>
        </member>
        <member name="M:Zelda.Entities.Projectiles.Drawing.ProjectileSpritesHelper.TryLoadAsAnimatedProjectileSprites(System.String,Atom.Xna.ISpriteLoader)">
            <summary>
            Tries to load the <see cref="T:Zelda.Entities.Projectiles.Drawing.ProjectileSprites"/> as <see cref="T:Zelda.Entities.Projectiles.Drawing.AnimatedProjectileSprites"/>
            using the given <paramref name="spriteGroup"/>.
            </summary>
            <param name="spriteGroup">
            The sprite group to load.
            </param>
            <param name="spriteLoader">
            Provides a mechanism to load ISprites.
            </param>
            <returns>
            The loaded IProjectileSprites.
            </returns>
        </member>
        <member name="M:Zelda.Entities.Projectiles.Drawing.ProjectileSpritesHelper.TryLoadAsProjectilesSprites(System.String,Atom.Xna.ISpriteLoader)">
            <summary>
            Tries to load the <see cref="T:Zelda.Entities.Projectiles.Drawing.ProjectileSprites"/> as <see cref="T:Zelda.Entities.Projectiles.Drawing.ProjectileSprites"/>
            using the given <paramref name="spriteGroup"/>.
            </summary>
            <param name="spriteGroup">
            The sprite group to load.
            </param>
            <param name="spriteLoader">
            Provides a mechanism to load ISprites.
            </param>
            <returns>
            The loaded IProjectileSprites.
            </returns>
        </member>
        <member name="T:Zelda.Entities.Projectiles.Drawing.SingleAnimatedProjectileSprites">
            <summary>
            Provides access to the Sprites used to visualize a Projectile
            by using a single AnimatedSprite for all Projectile directions.
            This is a sealed class.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Projectiles.Drawing.SingleAnimatedProjectileSprites.#ctor(Atom.Xna.AnimatedSprite)">
            <summary>
            Initializes a new instance of the SingleAnimatedProjectileSprites class.
            </summary>
            <param name="spriteTemplate">
            The AnimatedSprite used as a template for the SpriteAnimations.
            </param>
        </member>
        <member name="M:Zelda.Entities.Projectiles.Drawing.SingleAnimatedProjectileSprites.Get(Atom.Math.Direction4)">
            <summary>
            Gets the Projectile Sprite associated with the given <paramref name="direction"/>.
            </summary>
            <param name="direction">
            The direction the projectile is heading.
            </param>
            <returns>
            The Sprite associated with the given direction.
            </returns>
        </member>
        <member name="M:Zelda.Entities.Projectiles.Drawing.SingleAnimatedProjectileSprites.GetSize(Atom.Math.Direction4)">
            <summary>
            Gets the size of the ISprite for the given Direction.
            </summary>
            <param name="direction">
            The direction of the projectile.
            </param>
            <returns>
            The size in pixels.
            </returns>
        </member>
        <member name="M:Zelda.Entities.Projectiles.Drawing.SingleAnimatedProjectileSprites.Return(Atom.Xna.ISprite)">
            <summary>
            Returns the given ISprite to this IProjectileSprites instance.
            </summary>
            <param name="sprite">
            The sprite to return. Must have been requested with <see cref="M:Zelda.Entities.Projectiles.Drawing.SingleAnimatedProjectileSprites.Get(Atom.Math.Direction4)"/>.
            </param>
        </member>
        <member name="F:Zelda.Entities.Projectiles.Drawing.SingleAnimatedProjectileSprites.spriteTemplate">
            <summary>
            The AnimatedSprite used as a template for the Projectiles.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Projectiles.Drawing.SingleAnimatedProjectileSprites.size">
            <summary>
            The cached size of the spriteTemplate.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Projectiles.Drawing.SingleAnimatedProjectileSprites.pool">
            <summary>
            The pool from which sprites are taken.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Projectiles.IProjectileUpdateLogic">
            <summary>
            Provides a mechanism that updates a <see cref="T:Zelda.Entities.Projectiles.Projectile"/>.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Projectiles.IStatefulProjectileUpdateLogic">
            <summary>
            Provides a mechanism that updates a <see cref="T:Zelda.Entities.Projectiles.Projectile"/>;
            each entity requires its own instance of the update logic.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Projectiles.Projectile">
            <summary>
            Represents a projectile, such as an arrow.
            This class can't be inherited.
            </summary>
        </member>
        <member name="E:Zelda.Entities.Projectiles.Projectile.Destroyed">
            <summary>
            Fired when this ProjectileObject got destroyed.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Projectiles.Projectile.OptionalData">
            <summary>
            Gets or sets the optional data of this Projectile.
            </summary>
            <value>The default value is zero.</value>
        </member>
        <member name="P:Zelda.Entities.Projectiles.Projectile.DistanceTravelledSquared">
            <summary>
            Gets the distance this Projectile has travelled; squared.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Projectiles.Projectile.StatefulUpdateLogic">
            <summary>
            Gets the <see cref="T:Zelda.Entities.Projectiles.IStatefulProjectileUpdateLogic"/> instance
            that has been assigned to this Projectile.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Projectiles.Projectile.DrawDataAndStrategy">
            <summary>
            Gets the ProjectileDrawDataAndStrategy used to draw this Projectile.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Projectiles.Projectile.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Entities.Projectiles.Projectile"/> class.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Projectiles.Projectile.Spawn(Zelda.Status.Statable,Atom.Math.Vector2,System.Int32,Atom.Math.Direction4,Atom.Math.Vector2,Zelda.Entities.Projectiles.ProjectileSettings,Zelda.Entities.Projectiles.ProjectileHitSettings,Zelda.Attacks.AttackDamageMethod)">
            <summary>
            Creates a new projectile object with the given settings
            and spawns it in the scene.
            </summary>
            <param name="statable">
            The object that fires the projectile.
            </param>
            <param name="position">
            The starting position of the projectile.
            </param>
            <param name="floorNumber">
            The number of the floor the projectile should spawn at.
            </param>
            <param name="direction">
            The direction the projectile is travelling in.
            </param>
            <param name="speed">
            The movement speed of the projectile.
            </param>
            <param name="settings">
            The settings used for the Projectile.
            </param>
            <param name="hitSettings">
            The ProjectileHitSettings used for the Projectile.
            </param>
            <param name="damageMethod">
            The damage method to use when the projectile hits an enemy.
            </param>
            <returns>
            The ProjectileObject; taken from a pool of inactive projectiles.
            </returns>
        </member>
        <member name="M:Zelda.Entities.Projectiles.Projectile.CreateProjectilePool">
            <summary>
            Creates the dynamic pool that stores Projectile objects.
            </summary>
            <returns>
            The newly created Pool{Projectile}.
            </returns>
        </member>
        <member name="M:Zelda.Entities.Projectiles.Projectile.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this Projectile.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Projectiles.Projectile.UpdateMovement(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates the movement of this Projectile.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Projectiles.Projectile.ExecuteCustomUpdateLogic(Zelda.ZeldaUpdateContext)">
            <summary>
            Executes the custom update logic attached to this Projectile.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Projectiles.Projectile.UpdateAttack(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates the attack logic of this Projectile.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Projectiles.Projectile.TestCollision">
            <summary>
            Tests for collesion against enemy objects.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Projectiles.Projectile.OnProjectileHitTarget(Zelda.Entities.ZeldaEntity,Zelda.Status.Statable)">
            <summary>
            Called when this Projectile hit an enemy target.
            </summary>
            <param name="target">
            The target that got hit.
            </param>
            <param name="statable">
            The Statable component of the ZeldaEntity that got hit.
            </param>
        </member>
        <member name="M:Zelda.Entities.Projectiles.Projectile.TryPierceTarget(Zelda.Entities.ZeldaEntity,Zelda.Status.Statable)">
            <summary>
            Tries to pierce the hit enemy Entity;
            the Projectile gets destroyed if the target wasn't pierced.
            </summary>
            <param name="target">
            The target that got hit.
            </param>
            <param name="statable">
            The Statable component of the ZeldaEntity that got hit.
            </param>
        </member>
        <member name="M:Zelda.Entities.Projectiles.Projectile.ShouldPierce">
            <summary>
            Gets a value indicating whether the Projectile should
            pierce its next target.
            </summary>
            <returns>
            Returns true if the Projectile should pierce;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Entities.Projectiles.Projectile.Destroy">
            <summary>
            Destroys this Projectile, removing it from the scene.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Projectiles.Projectile.ReturnProjectileToPool">
            <summary>
            Returns this Projectile to the projectile pool.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Projectiles.Projectile.ReturnSprite">
            <summary>
            Returns the ISprite used by this Projectile to the IProjectileSprites.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Projectiles.Projectile.OnDestroyed">
            <summary>
            Called when this Projectile has been destroyed.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Projectiles.Projectile.NotifySceneChange(Zelda.ChangeType)">
            <summary>
            Notifies this Projectile that a scene change has occured.
            </summary>
            <param name="changeType">
            States whether the current scene has changed away or to its current scene.
            </param>
        </member>
        <member name="M:Zelda.Entities.Projectiles.Projectile.StartTravellingSound">
            <summary>
            Starts to play the travelling sound.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Projectiles.Projectile.UpdateTravellingSound">
            <summary>
            Updates the travelling sound.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Projectiles.Projectile.StopPlayingTravellingSound">
            <summary>
            Stops to play the travelling sound.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Projectiles.Projectile.PlayHitSoundSample">
            <summary>
            Plays the 'Projectile Hit' sound sample.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Projectiles.Projectile.OnMapCollisionOccurred(Zelda.Entities.Components.Moveable)">
            <summary>
            Gets called when this Projectile has collided with the TileMap.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
        </member>
        <member name="M:Zelda.Entities.Projectiles.Projectile.OnRemoved(System.Object,Zelda.ZeldaScene)">
            <summary>
            Gets called when this Projectile has been removed from a ZeldaScene.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="scene">The scene from which the Projectile got removed.</param>
        </member>
        <member name="M:Zelda.Entities.Projectiles.Projectile.Clone">
            <summary>
            This operation is not supported.
            </summary>
            <exception cref="T:System.NotSupportedException">This operation is not supported.</exception>
            <returns>Nothing is returned.</returns>
        </member>
        <member name="F:Zelda.Entities.Projectiles.Projectile.settings">
            <summary>
            The settings applied to this Projectile.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Projectiles.Projectile.hitSettings">
            <summary>
            The ProjectileHitSettings applied to this Projectile.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Projectiles.Projectile.creator">
            <summary>
            The Statable component of the Entity that has fired this Projectile.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Projectiles.Projectile.movementSpeed">
            <summary>
            The movement speed of this Projectile.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Projectiles.Projectile.travelledDistanceSquared">
            <summary>
            The distance the projectile has travelled.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Projectiles.Projectile.statefulUpdateLogic">
            <summary>
            The additional update logic executed for this Projectile.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Projectiles.Projectile.travellingSoundChannel">
            <summary>
            The channel in which the sound is played for this Projectile.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Projectiles.Projectile.meleeAttack">
            <summary>
            The melee attack that happens when the arrow hits an enemy.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Projectiles.Projectile.moveable">
            <summary>
            Indentifies the Moveable component of this Projectile Entity.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Projectiles.Projectile.poolNode">
            <summary>
            The current pool-node of the this Projectile.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Projectiles.Projectile.pool">
            <summary>
            The dynamic pool in which unused Projectiles are cached.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Projectiles.ProjectileHitSettings">
            <summary>
            Encapsulates the Projectile settings that relate to
            the projectile hitting a target or getting destroyed.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Projectiles.ProjectileHitSettings.AttackHitEffect">
            <summary>
            Gets or sets the <see cref="T:Zelda.Attacks.IAttackHitEffect"/> applied
            when the Projectile hits a target.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Projectiles.ProjectileHitSettings.SoundSample">
            <summary>
            Gets the SoundSampleSettings that encapsulates what sound 
            is played when the Projectile gets destroyed.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Projectiles.ProjectileHitSettings.Setup(Zelda.IZeldaServiceProvider)">
            <summary>
            Setups this ProjectileHitSettings.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-reladed services.
            </param>
        </member>
        <member name="M:Zelda.Entities.Projectiles.ProjectileHitSettings.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.Projectiles.ProjectileHitSettings.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Entities.Projectiles.ProjectileHitSettings.soundSample">
            <summary>
            Encapsulates what sound is played when the Projectile gets destroyed.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Projectiles.ProjectilePiercingChanceMode">
            <summary>
            Enumerates the different modes that define how the
            final piercing chance of a Projectile is calculated.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Projectiles.ProjectilePiercingChanceMode.None">
            <summary>
            The projectile can't pierce its target.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Projectiles.ProjectilePiercingChanceMode.OnlyEntity">
            <summary>
            The projectile can pierce its target based on the
            piercing chance of the entity.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Projectiles.ProjectilePiercingChanceMode.OnlyAdditional">
            <summary>
            The projectile can pierce its target based on the
            additional piercing chance.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Projectiles.ProjectilePiercingChanceMode.Combined">
            <summary>
            The projectile can pierce its target based on the
            piercing chance of the entity combined with the
            additional piercing chance.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Projectiles.ProjectileSettings">
            <summary>
            Encapsulates settings related to a Projectile.
            </summary>
            <remarks>
            Projectiles can pierce their target and continue traveling.
            </remarks>
        </member>
        <member name="F:Zelda.Entities.Projectiles.ProjectileSettings.DefaultSpeed">
            <summary>
            The default movement speed of Projectiles.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Projectiles.ProjectileSettings.Sprites">
            <summary>
            Gets or sets the <see cref="T:Zelda.Entities.Projectiles.Drawing.IProjectileSprites"/> used to visualize the Projectiles.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Projectiles.ProjectileSettings.Speed">
            <summary>
            Gets or sets the movement speed of the Projectiles releases by this RangedAttack.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Projectiles.ProjectileSettings.TravelRange">
            <summary>
            Gets or sets the range the Projectiles can travel before they get destroyed; squared.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Projectiles.ProjectileSettings.TravelRangeSquared">
            <summary>
            Gets the range the Projectiles can travel before they get destroyed.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Projectiles.ProjectileSettings.PiercingMode">
            <summary>
            Gets or sets the <see cref="T:Zelda.Entities.Projectiles.ProjectilePiercingChanceMode"/> that states
            how the chance a Projectile can pierce its target is.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Projectiles.ProjectileSettings.AdditionalPiercingChance">
            <summary>
            Gets or sets the additional chance of the Projectiles 
            to pierce through its target.
            </summary>
            <value>
            The default value is 0.
            </value>
        </member>
        <member name="P:Zelda.Entities.Projectiles.ProjectileSettings.CanPierce">
            <summary>
            Gets a value indicating whether the Projectiles
            have a chance to pierce its target.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Projectiles.ProjectileSettings.TravellingSound">
            <summary>
            Gets or sets the SoundSampleSettings that encapsulates what sound 
            is played when the Projectile is travelling.
            </summary>
            <value>The default value is null.</value>
        </member>
        <member name="P:Zelda.Entities.Projectiles.ProjectileSettings.StatefulUpdateLogicTemplate">
            <summary>
            Gets or sets the <see cref="T:Zelda.Entities.Projectiles.IStatefulProjectileUpdateLogic"/> that
            is used as a template for the custom update logic of the Projectiles.
            </summary>
            <value>
            The default value is null.
            </value>
        </member>
        <member name="M:Zelda.Entities.Projectiles.ProjectileSettings.Setup(Zelda.IZeldaServiceProvider)">
            <summary>
            Setups this ProjectileSettings.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Entities.Projectiles.ProjectileSettings.GetStatefulUpdateLogicInstance">
            <summary>
            Gets the IStatefulProjectileUpdateLogic used for a new Projectile.
            </summary>
            <returns>
            A new IStatefulProjectileUpdateLogic instance;
            or null.
            </returns>
        </member>
        <member name="M:Zelda.Entities.Projectiles.ProjectileSettings.GetChanceToPierce(Zelda.Status.Statable)">
            <summary>
            Gets the chance a Projectile can pierce its targets.
            </summary>
            <param name="creator">
            The statable component of the entity that has fired the Projectile.
            </param>
            <returns>
            The chance to pierce in %.
            </returns>
        </member>
        <member name="M:Zelda.Entities.Projectiles.ProjectileSettings.SetSprites(Atom.Xna.AnimatedSprite)">
            <summary>
            Sets the sprites that should be used to visualize the Projectile.
            </summary>
            <param name="sprite">
            The AnimatedSprite that should be used as a template for all Projectiles.
            </param>
        </member>
        <member name="M:Zelda.Entities.Projectiles.ProjectileSettings.SetSprites(Atom.Xna.Sprite,Atom.Xna.Sprite,Atom.Xna.Sprite,Atom.Xna.Sprite)">
            <summary>
            Sets the sprites that should be used to visualize the Projectile.
            </summary>
            <param name="spriteProjectileUp">
            The sprite that represents a projectile that is traveling up.
            </param>
            <param name="spriteProjectileDown">
            The sprite that represents a projectile that is traveling down.
            </param>
            <param name="spriteProjectileLeft">
            The sprite that represents a projectile that is traveling left.
            </param>
            <param name="spriteProjectileRight">
            The sprite that represents a projectile that is traveling right.
            </param>
        </member>
        <member name="F:Zelda.Entities.Projectiles.ProjectileSettings.piercingMode">
            <summary>
            The backend storage field of the PiercingMode property.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Projectiles.ProjectileSettings.speed">
            <summary>
            The movement speed of the Projectiles.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Projectiles.ProjectileSettings.travelRangeSquared">
            <summary>
            The range the Projectiles can travel before they get destroyed; squared.
            </summary>
        </member>
        <member name="T:Zelda.Entities.RedBlueBlockTrigger">
            <summary>
            Represents a trigger that can be in two different states.
            The player can trigger the trigger by attacking it.
            </summary>
        </member>
        <member name="P:Zelda.Entities.RedBlueBlockTrigger.IsEnabled">
            <summary>
            Gets or sets a value indicating whether this RedBlueBlockTrigger is currently enabled.
            </summary>
        </member>
        <member name="P:Zelda.Entities.RedBlueBlockTrigger.SwitchEvent">
            <summary>
            Gets or sets the <see cref="T:Atom.Events.DualSwitchEvent"/> that controls the
            actions when this RedBlueBlockTrigger gets triggered.
            </summary>
        </member>
        <member name="P:Zelda.Entities.RedBlueBlockTrigger.SpriteOn">
            <summary>
            Gets or sets the Sprite that is shown when this RedBlueBlockTrigger is switched on.
            </summary>
        </member>
        <member name="P:Zelda.Entities.RedBlueBlockTrigger.SpriteOff">
            <summary>
            Gets or sets the Sprite that is shown when this RedBlueBlockTrigger is switched off.
            </summary>
        </member>
        <member name="P:Zelda.Entities.RedBlueBlockTrigger.IsSwitched">
            <summary>
            Gets or sets a value indicating whether the trigger is switch on or off.
            </summary>
        </member>
        <member name="M:Zelda.Entities.RedBlueBlockTrigger.#ctor">
            <summary>
            Initializes a new instance of the RedBlueBlockTrigger class.
            </summary>
        </member>
        <member name="M:Zelda.Entities.RedBlueBlockTrigger.Setup(Zelda.IZeldaServiceProvider)">
            <summary>
            Setups this RedBlueBlockTrigger.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services. </param>
        </member>
        <member name="M:Zelda.Entities.RedBlueBlockTrigger.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this RedBlueBlockTrigger.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.RedBlueBlockTrigger.Draw(Zelda.ZeldaDrawContext)">
            <summary>
            Draws this RedBlueBlockTrigger.
            </summary>
            <param name="drawContext">
            The current ZeldaDrawContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.RedBlueBlockTrigger.Use(Zelda.Entities.PlayerEntity)">
            <summary>
            Uses this RedBlueBlockTrigger, and as such triggering it.
            </summary>
            <param name="user">
            The PlayerEntity that wants to use this RedBlueBlockTrigger.
            </param>
            <returns>
            True if the RedBlueBlockTrigger has been triggered;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Entities.RedBlueBlockTrigger.Trigger(System.Object)">
            <summary>
            Triggers this RedBlueBlockTrigger.
            </summary>
            <param name="obj">
            The object that has triggered this RedBlueBlockTrigger.
            </param>
            <returns>
            True if the RedBlueBlockTrigger has been triggered;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Entities.RedBlueBlockTrigger.PlaySoundEffect">
            <summary>
            Plays 
            </summary>
        </member>
        <member name="M:Zelda.Entities.RedBlueBlockTrigger.OnAttacked(System.Object,Zelda.Entities.Components.AttackEventArgs)">
            <summary>
            Gets called when this RedBlueBlockTrigger has been attacked.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
            <param name="e">
            The <see cref="T:Zelda.Entities.Components.AttackEventArgs"/> that contains
            the event data.
            </param>
        </member>
        <member name="M:Zelda.Entities.RedBlueBlockTrigger.Clone">
            <summary>
            Returns a clone of this RedBlueBlockTrigger.
            </summary>
            <returns>The cloned ZeldaEntity.</returns>
        </member>
        <member name="F:Zelda.Entities.RedBlueBlockTrigger.audio">
            <summary>
            The audio sample that is played when triggered.
            </summary>
        </member>
        <member name="F:Zelda.Entities.RedBlueBlockTrigger.attackable">
            <summary>
            Identifies the Components.Attackable component of this RedBlueBlockTrigger.
            </summary>
        </member>
        <member name="F:Zelda.Entities.RedBlueBlockTrigger.timeLeftUntriggerable">
            <summary>
            The time left until this RedBlueBlockTrigger becomes triggerable again.
            </summary>
        </member>
        <member name="F:Zelda.Entities.RedBlueBlockTrigger.TimeNotTriggerable">
            <summary>
            The minimum time in seconds between triggering a RedBlueBlockTrigger again.
            </summary>
        </member>
        <member name="T:Zelda.Entities.RedBlueBlockTrigger.ReaderWriter">
            <summary>
            Defines the <see cref="T:Zelda.Entities.IEntityReaderWriter"/> for <see cref="T:Zelda.Entities.RedBlueBlockTrigger"/> entities.
            </summary>
        </member>
        <member name="M:Zelda.Entities.RedBlueBlockTrigger.ReaderWriter.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the ReaderWriter class.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Entities.RedBlueBlockTrigger.ReaderWriter.Serialize(Zelda.Entities.RedBlueBlockTrigger,Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the given object using the given <see cref="!:System.IO.BinaryWriter"/>.
            </summary>
            <param name="entity">
            The entity to serialize.
            </param>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.RedBlueBlockTrigger.ReaderWriter.Deserialize(Zelda.Entities.RedBlueBlockTrigger,Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data in the given <see cref="!:System.IO.BinaryWriter"/> to initialize
            the given ZeldaEntity.
            </summary>
            <param name="entity">
            The ZeldaEntity to initialize.
            </param>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="T:Zelda.Entities.SignPost">
            <summary>
            Represents a simple sign post that shows some <see cref="T:Zelda.LocalizableText"/> when the player reads it.
            </summary>
        </member>
        <member name="P:Zelda.Entities.SignPost.Text">
            <summary>
            Gets the object that stores the text strings shown when the Player reads this SignPost.
            </summary>
        </member>
        <member name="P:Zelda.Entities.SignPost.DrawDataAndStrategy">
            <summary>
            Gets the <see cref="T:Zelda.Entities.Drawing.OneDirDrawDataAndStrategy"/> of this SignPost.
            </summary>
        </member>
        <member name="M:Zelda.Entities.SignPost.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Entities.SignPost"/> class.
            </summary>
        </member>
        <member name="M:Zelda.Entities.SignPost.Use(Zelda.Entities.PlayerEntity)">
            <summary>
            Uses this SignPost, trying to unlock it.
            </summary>
            <param name="user">
            The PlayerEntity that tried to unlock this UnlockableDoorTileBlock.
            </param>
            <returns>
            Whether the UnlockableDoorTileBlock has been unlocked;
            and as such removed from the Scene.
            </returns>
        </member>
        <member name="M:Zelda.Entities.SignPost.OnRead(Zelda.Entities.PlayerEntity)">
            <summary>
            Called when this SignPost has been read.
            </summary>
            <param name="user">
            The PlayerEntity that has been read.
            </param>
        </member>
        <member name="M:Zelda.Entities.SignPost.ShowText">
            <summary>
            Shows the <see cref="P:Zelda.Entities.SignPost.Text"/> of this SignPost.
            </summary>
        </member>
        <member name="M:Zelda.Entities.SignPost.Clone">
            <summary>
            Creates a clone of this SignPost.
            </summary>
            <returns>The cloned ZeldaEntity.</returns>
        </member>
        <member name="M:Zelda.Entities.SignPost.SetupClone(Zelda.Entities.SignPost)">
            <summary>
            Setups the given SignPost to be a clone of this SignPost.
            </summary>
            <param name="clone">
            The SignPost to setup as a clone of this SignPost.
            </param>
        </member>
        <member name="F:Zelda.Entities.SignPost.text">
            <summary>
            Stores the text strings shown when the Player reads this SignPost.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Spawning.EnemySpawnPoint">
            <summary>
            Defines a <see cref="T:Zelda.Entities.Spawning.SpawnPoint"/> that spawns <see cref="T:Zelda.Entities.Enemy"/> entities.
            </summary>
            <remarks>
            Enemies that got killed will respawn after a set time frame.
            </remarks>
        </member>
        <member name="P:Zelda.Entities.Spawning.EnemySpawnPoint.RespawnGroups">
            <summary>
            Gets the list of <see cref="T:Zelda.Entities.Spawning.EnemyRespawnGroup"/>s this EnemySpawnPoint consists of.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Spawning.EnemySpawnPoint.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this <see cref="T:Zelda.Entities.Spawning.EnemySpawnPoint"/>.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Spawning.EnemySpawnPoint.DrawEditMode(Zelda.ZeldaDrawContext)">
            <summary>
            Draws this <see cref="T:Zelda.Entities.Spawning.EnemySpawnPoint"/> in edit-mode.
            </summary>
            <param name="drawContext">
            The current ZeldaDrawContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Spawning.EnemySpawnPoint.Clone">
            <summary>
            Returns a clone of this <see cref="T:Zelda.Entities.Spawning.EnemySpawnPoint"/>
            </summary>
            <returns>The cloned ZeldaEntity.</returns>
        </member>
        <member name="F:Zelda.Entities.Spawning.EnemySpawnPoint.respawnGroups">
            <summary>
            Stroes the <see cref="T:Zelda.Entities.Spawning.EnemyRespawnGroup"/>s spawning in this EnemySpawnPoint.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Spawning.EnemySpawnPoint.ReaderWriter">
            <summary>
            Defines the <see cref="T:Zelda.Entities.IEntityReaderWriter"/> for <see cref="T:Zelda.Entities.Spawning.EnemySpawnPoint"/> entities.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Spawning.EnemySpawnPoint.ReaderWriter.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the ReaderWriter class.
            </summary>   
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="serviceProvider"/> is null.
            </exception>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Entities.Spawning.EnemySpawnPoint.ReaderWriter.Serialize(Zelda.Entities.Spawning.EnemySpawnPoint,Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the given object using the given <see cref="T:System.IO.BinaryWriter"/>.
            </summary>
            <param name="entity">
            The entity to serialize.
            </param>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.Spawning.EnemySpawnPoint.ReaderWriter.Deserialize(Zelda.Entities.Spawning.EnemySpawnPoint,Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data in the given <see cref="T:System.IO.BinaryWriter"/> to initialize
            the given ZeldaEntity.
            </summary>
            <param name="entity">
            The ZeldaEntity to initialize.
            </param>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="T:Zelda.Entities.Spawning.EntitySpawn">
            <summary>
            Defines a ZeldaEntity that spawn a single other <see cref="T:Zelda.Entities.ZeldaEntity"/>
            based on an entity template loaden from the <see cref="T:Zelda.Entities.EntityTemplateManager"/>.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Spawning.EntitySpawn.IsActive">
            <summary>
            Gets or sets a value indicating whether this EntitySpawn
            is currently active, and should spawn the entity.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Spawning.EntitySpawn.UseTemplate">
            <summary>
            Gets or sets a value indicating whether the EntitySpawn should
            clone an template entity to create the entity;
            or directly load it from the hard-disc.
            </summary>
            <value>
            The default value is false.
            </value>
        </member>
        <member name="P:Zelda.Entities.Spawning.EntitySpawn.TemplateName">
            <summary>
            Gets or sets the name of the ZeldaEntity template
            whose instance gets spawned by this EntitySpawn.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Spawning.EntitySpawn.Entity">
            <summary>
            Gets or sets the ZeldaEntity that gets spawned by this EntitySpawn.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Spawning.EntitySpawn.EntityModifier">
            <summary>
            Gets or sets the <see cref="T:Zelda.Entities.Modifiers.IEntityModifier"/> that is applied to the entity
            spawned by this EntitySpawn.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Spawning.EntitySpawn.#ctor">
            <summary>
            Initializes a new instance of the EntitySpawn class.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Spawning.EntitySpawn.Setup(Zelda.IZeldaServiceProvider)">
            <summary>
            Setups this EntitySpawn.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Entities.Spawning.EntitySpawn.CreateEntity">
            <summary>
            Creates the <see cref="P:Zelda.Entities.Spawning.EntitySpawn.Entity"/> by using the <see cref="P:Zelda.Entities.Spawning.EntitySpawn.TemplateName"/>.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Spawning.EntitySpawn.AddToScene(Zelda.ZeldaScene)">
            <summary>
            Gets called when this EntitySpawn
            gets added to the given scene.
            </summary>
            <param name="scene">
            The related scene.
            </param>
        </member>
        <member name="M:Zelda.Entities.Spawning.EntitySpawn.RemoveFromScene">
            <summary>
            Gets called when this EntitySpawn
            gets removed from the scene.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Spawning.EntitySpawn.SpawnEntity">
            <summary>
            Spawns the entity - if required and allowed.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Spawning.EntitySpawn.DespawnEntity">
            <summary>
            Despawns the entity - if required and allowed.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Spawning.EntitySpawn.RegisterEntity(Zelda.Entities.ZeldaEntity)">
            <summary>
            Setups the given ZeldaEntity for usage in this EntitySpawn.
            </summary>
            <param name="entity">
            The related ZeldaEntity.
            </param>
        </member>
        <member name="M:Zelda.Entities.Spawning.EntitySpawn.UnregisterEntity(Zelda.Entities.ZeldaEntity)">
            <summary>
            Unregisters the given ZeldaEntity from usage in this EntitySpawn.
            </summary>
            <param name="entity">
            The related ZeldaEntity.
            </param>
        </member>
        <member name="M:Zelda.Entities.Spawning.EntitySpawn.DrawEditMode(Zelda.ZeldaDrawContext)">
            <summary>
            Draws this <see cref="T:Zelda.Entities.Spawning.EntitySpawn"/> in edit-mode.
            </summary>
            <param name="drawContext">
            The current ZeldaDrawContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Spawning.EntitySpawn.This_PositionChanged(System.Object,Atom.ChangedValue{Atom.Math.Vector2})">
            <summary>
            Fired when the position of this EntitySpawn has changed.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
            <param name="e">
            The Atom.ChangedValue{Atom.Math.Vector2} that contains the event data.
            </param>
        </member>
        <member name="M:Zelda.Entities.Spawning.EntitySpawn.This_DirectionChanged(System.Object,Atom.ChangedValue{Atom.Math.Direction4})">
            <summary>
            Fired when the direction of this EntitySpawn has changed.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
            <param name="e">
            The Atom.ChangedValue{Atom.Math.Direction4} that contains the event data.
            </param>
        </member>
        <member name="M:Zelda.Entities.Spawning.EntitySpawn.This_FloorNumberChanged(System.Object,Atom.ChangedValue{System.Int32})">
            <summary>
            Fired when the Floor Number of this EntitySpawn has changed.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
            <param name="e">
            The Atom.ChangedValue{Int32} that contains the event data.
            </param>
        </member>
        <member name="M:Zelda.Entities.Spawning.EntitySpawn.Entity_PositionChanged(System.Object,Atom.ChangedValue{Atom.Math.Vector2})">
            <summary>
            Fired when the position property of the ZeldaEntity has changed.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
            <param name="e">
            The Atom.ChangedValue{Vector2} that contains the event data.
            </param>
        </member>
        <member name="M:Zelda.Entities.Spawning.EntitySpawn.Entity_DirectionChanged(System.Object,Atom.ChangedValue{Atom.Math.Direction4})">
            <summary>
            Fired when the direction property of the ZeldaEntity has changed.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
            <param name="e">
            The Atom.ChangedValue{Vector2} that contains the event data.
            </param>
        </member>
        <member name="M:Zelda.Entities.Spawning.EntitySpawn.Entity_FloorNumberChanged(System.Object,Atom.ChangedValue{System.Int32})">
            <summary>
            Fired when the FloorNumber property of the ZeldaEntity has changed.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
            <param name="e">
            The Atom.ChangedValue{Vector2} that contains the event data.
            </param>
        </member>
        <member name="M:Zelda.Entities.Spawning.EntitySpawn.Clone">
            <summary>
            Returns a clone of this EntitySpawn.
            </summary>
            <returns>
            The cloned ZeldaEntity.
            </returns>
        </member>
        <member name="M:Zelda.Entities.Spawning.EntitySpawn.SetupClone(Zelda.Entities.Spawning.EntitySpawn)">
            <summary>
            Setups the given EntitySpawn to be a clone
            of this EntitySpawn.
            </summary>
            <param name="clone">
            The EntitySpawn to setup as a clone
            of this EntitySpawn.
            </param>
        </member>
        <member name="F:Zelda.Entities.Spawning.EntitySpawn.isActive">
            <summary>
            Represents the storage field of the IsActive property.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Spawning.EntitySpawn.templateName">
            <summary>
            The name of the ZeldaEntity-template 
            whose instance gets spawned by this EntitySpawn.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Spawning.EntitySpawn.entity">
            <summary>
            Identifies the ZeldaEntity that was/is spawned by this EntitySpawn.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Spawning.EntitySpawn.serviceProvider">
            <summary>
            Provides fast access to game-related services.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Spawning.EntitySpawn.ReaderWriter">
            <summary>
            Defines the <see cref="T:Zelda.Entities.IEntityReaderWriter"/> for <see cref="T:Zelda.Entities.Spawning.EntitySpawn"/> entities.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Spawning.EntitySpawn.ReaderWriter.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the ReaderWriter class.
            </summary>   
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="serviceProvider"/> is null.
            </exception>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Entities.Spawning.EntitySpawn.ReaderWriter.Serialize(Zelda.Entities.Spawning.EntitySpawn,Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the given object using the given <see cref="T:System.IO.BinaryWriter"/>.
            </summary>
            <param name="entity">
            The entity to serialize.
            </param>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.Spawning.EntitySpawn.ReaderWriter.Deserialize(Zelda.Entities.Spawning.EntitySpawn,Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data in the given <see cref="T:System.IO.BinaryWriter"/> to initialize
            the given ZeldaEntity.
            </summary>
            <param name="entity">
            The ZeldaEntity to initialize.
            </param>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="T:Zelda.Entities.Spawning.DayNightSpecificEnemyRespawnGroup">
            <summary>
            Represents an <see cref="T:Zelda.Entities.Spawning.EnemyRespawnGroup"/> that spawns
            a group of enemies at a specified time of the day.
            </summary>
            <seealso cref="T:Zelda.DayNightState"/>
        </member>
        <member name="P:Zelda.Entities.Spawning.DayNightSpecificEnemyRespawnGroup.SpawnOnlyAt">
            <summary>
            Gets or sets the <see cref="T:Zelda.DayNightState"/> in which Enemies of this
            DayNightSpecificEnemyRespawnGroup are active.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Spawning.DayNightSpecificEnemyRespawnGroup.OnDayNightCycleEvent(System.Object,Zelda.DayNightEvent)">
            <summary>
            Gets called when Day has changed to Evening; or Evening to Night
            or Night to Day.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
            <param name="e">
            The DayNightEvent that has occurred.
            </param>
        </member>
        <member name="M:Zelda.Entities.Spawning.DayNightSpecificEnemyRespawnGroup.ShouldSpawn(Zelda.Entities.Spawning.EnemyRespawnGroup.EnemyContainer)">
            <summary>
            Gets a value indicating whether the enemy stored in the given EnemyContainer
            should be respawned now.
            </summary>
            <param name="container">
            The EnemyContainer that should be spawned.
            </param>
            <returns>
            Returns true if the enemy should respawned;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Entities.Spawning.DayNightSpecificEnemyRespawnGroup.ShouldSpawnEnemies(Zelda.DayNightEvent)">
            <summary>
            Gets a value indicating whether the enemies of this IEnemyRespawnGroup
            should be spawned when the given DayNightEvent occurs.
            </summary>
            <param name="e">
            The DayNightEvent that has occurred.
            </param>
            <returns>
            true if enemies should be spawned;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Entities.Spawning.DayNightSpecificEnemyRespawnGroup.ShouldDespawnEnemies(Zelda.DayNightEvent)">
            <summary>
            Gets a value indicating whether the enemies of this IEnemyRespawnGroup
            should be de-spawned when the given DayNightEvent occurs.
            </summary>
            <param name="e">
            The DayNightEvent that has occurred.
            </param>
            <returns>
            true if enemies should be de-spawned;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Entities.Spawning.DayNightSpecificEnemyRespawnGroup.OnSpawnPointChanged(Zelda.Entities.Spawning.ISpawnPoint,Zelda.Entities.Spawning.ISpawnPoint)">
            <summary>
            Called when the <see cref="T:Zelda.Entities.Spawning.SpawnPoint"/> property has changed.
            </summary>
            <param name="oldSpawnPoint">
            The old value of the SpawnPoint property.
            </param>
            <param name="newSpawnPoint">
            The new value of the SpawnPoint property.
            </param>
        </member>
        <member name="M:Zelda.Entities.Spawning.DayNightSpecificEnemyRespawnGroup.HookEvents(Zelda.Entities.Spawning.ISpawnPoint)">
            <summary>
            Hooks up events with the given ISpawnPoint.
            </summary>
            <param name="spawnPoint">
            The related ISpawnPoint.
            </param>
        </member>
        <member name="M:Zelda.Entities.Spawning.DayNightSpecificEnemyRespawnGroup.UnhookEvents(Zelda.Entities.Spawning.ISpawnPoint)">
            <summary>
            Unhooks up events from the given ISpawnPoint.
            </summary>
            <param name="spawnPoint">
            The related ISpawnPoint.
            </param>
        </member>
        <member name="M:Zelda.Entities.Spawning.DayNightSpecificEnemyRespawnGroup.OnSpawnPointAddedToScene(System.Object,Zelda.ZeldaScene)">
            <summary>
            Gets called when the ISpawnPoint this DayNightSpecificEnemyRespawnGroup is
            using has been added to a ZeldaScene.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
            <param name="scene">
            The related ZeldaScene.
            </param>
        </member>
        <member name="M:Zelda.Entities.Spawning.DayNightSpecificEnemyRespawnGroup.OnSpawnPointRemovedFromScene(System.Object,Zelda.ZeldaScene)">
            <summary>
            Gets called when the ISpawnPoint this DayNightSpecificEnemyRespawnGroup is
            using has been removed from a ZeldaScene.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
            <param name="scene">
            The related ZeldaScene.
            </param>
        </member>
        <member name="M:Zelda.Entities.Spawning.DayNightSpecificEnemyRespawnGroup.HookSceneEvents(Zelda.ZeldaScene)">
            <summary>
            Hooks up the EventsHandlers with the given ZeldaScene.
            </summary>
            <param name="scene">
            The related ZeldaScene.
            </param>
        </member>
        <member name="M:Zelda.Entities.Spawning.DayNightSpecificEnemyRespawnGroup.UnhookSceneEvents(Zelda.ZeldaScene)">
            <summary>
            Unhooks up the EventsHandlers with the given ZeldaScene.
            </summary>
            <param name="scene">
            The related ZeldaScene.
            </param>
        </member>
        <member name="M:Zelda.Entities.Spawning.DayNightSpecificEnemyRespawnGroup.SetupEnemyContainer(Zelda.Entities.Spawning.EnemyRespawnGroup.EnemyContainer)">
            <summary>
            Includes additional setup logic for a new EnemyContainer.
            </summary>
            <param name="container">
            The new EnemyContainer that should be setup.
            </param>
        </member>
        <member name="M:Zelda.Entities.Spawning.DayNightSpecificEnemyRespawnGroup.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.Spawning.DayNightSpecificEnemyRespawnGroup.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Entities.Spawning.DayNightSpecificEnemyRespawnGroup.spawnOnlyAtState">
            <summary>
            The storage field of the <see cref="P:Zelda.Entities.Spawning.DayNightSpecificEnemyRespawnGroup.SpawnOnlyAt"/> property.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Spawning.EnemyRespawnGroup">
            <summary>
            Represents a group of enemies (of the same template) that can respawn.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Spawning.EnemyRespawnGroup.EnemyTemplateName">
            <summary>
            Gets or sets the name of the enemy-template that is
            spawned in the <see cref="T:Zelda.Entities.Spawning.EnemyRespawnGroup"/>.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Spawning.EnemyRespawnGroup.Size">
            <summary>
            Gets or sets the number of enemies that are spawned 
            in the <see cref="T:Zelda.Entities.Spawning.EnemyRespawnGroup"/>.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Spawning.EnemyRespawnGroup.RespawnCooldown">
            <summary>
            Gets or sets the <see cref="T:Zelda.Cooldown"/> it takes for a died enemy
            of the <see cref="T:Zelda.Entities.Spawning.EnemyRespawnGroup"/> to respawn.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Spawning.EnemyRespawnGroup.SpawnPoint">
            <summary>
            Gets the <see cref="T:Zelda.Entities.Spawning.ISpawnPoint"/> this EnemyRespawnGroup is spawning enemies at.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Spawning.EnemyRespawnGroup.OnSpawnPointChanged(Zelda.Entities.Spawning.ISpawnPoint,Zelda.Entities.Spawning.ISpawnPoint)">
            <summary>
            Called when the <see cref="P:Zelda.Entities.Spawning.EnemyRespawnGroup.SpawnPoint"/> property has changed.
            </summary>
            <param name="oldSpawnPoint">
            The old value of the SpawnPoint property.
            </param>
            <param name="newSpawnPoint">
            The new value of the SpawnPoint property.
            </param>
        </member>
        <member name="M:Zelda.Entities.Spawning.EnemyRespawnGroup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Entities.Spawning.EnemyRespawnGroup"/> class.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Spawning.EnemyRespawnGroup.Create(Zelda.Entities.Spawning.ISpawnPoint,Zelda.Entities.EntityTemplateManager)">
            <summary>
            Creates all enemies in the <see cref="T:Zelda.Entities.Spawning.EnemyRespawnGroup"/>.
            </summary>
            <param name="spawnPoint">
            The ISpawnPoint in which enemies are spawned.
            </param>
            <param name="templateManager">
            The <see cref="T:Zelda.Entities.EntityTemplateManager"/> object.
            </param>
        </member>
        <member name="M:Zelda.Entities.Spawning.EnemyRespawnGroup.CreateEnemyContainer(Zelda.Entities.IEntityTemplate)">
            <summary>
            Creates and returns a new EnemyContainer.
            </summary>
            <param name="enemyTemplate">
            The IEntityTemplate that should be used to create instances of the enemy.
            </param>
            <returns>
            The new EnemyContainer.
            </returns>
        </member>
        <member name="M:Zelda.Entities.Spawning.EnemyRespawnGroup.SetupEnemyContainer(Zelda.Entities.Spawning.EnemyRespawnGroup.EnemyContainer)">
            <summary>
            Includes additional setup logic for a new EnemyContainer.
            </summary>
            <param name="container">
            The new EnemyContainer that should be setup.
            </param>
        </member>
        <member name="M:Zelda.Entities.Spawning.EnemyRespawnGroup.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this <see cref="T:Zelda.Entities.Spawning.EnemyRespawnGroup"/>.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Spawning.EnemyRespawnGroup.UpdateContainer(Zelda.Entities.Spawning.EnemyRespawnGroup.EnemyContainer,Zelda.ZeldaUpdateContext)">
            <summary>
            Updates the given EnemyContainer.
            </summary>
            <param name="container">
            The EnemyContainer to update.
            </param>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Spawning.EnemyRespawnGroup.TrySpawn(Zelda.Entities.Spawning.EnemyRespawnGroup.EnemyContainer)">
            <summary>
            Tries to spawn the Enemy in the given EnemyContainer.
            </summary>
            <param name="container">
            The EnemyContainer whose .
            </param>
        </member>
        <member name="M:Zelda.Entities.Spawning.EnemyRespawnGroup.ShouldSpawn(Zelda.Entities.Spawning.EnemyRespawnGroup.EnemyContainer)">
            <summary>
            Gets a value indicating whether the enemy stored in the given EnemyContainer
            should be respawned now.
            </summary>
            <param name="container">
            The EnemyContainer that should be spawned.
            </param>
            <returns>
            Returns true if the enemy should respawned;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Entities.Spawning.EnemyRespawnGroup.Spawn">
            <summary>
            Spawns the <see cref="T:Zelda.Entities.Enemy"/> entities of this IEnemyRespawnGroup.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Spawning.EnemyRespawnGroup.Despawn">
            <summary>
            Despawns the <see cref="T:Zelda.Entities.Enemy"/> entities of this IEnemyRespawnGroup.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Spawning.EnemyRespawnGroup.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.Spawning.EnemyRespawnGroup.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Entities.Spawning.EnemyRespawnGroup.enemyTemplateName">
            <summary>
            The name of the enemy-template that is spawned in the <see cref="T:Zelda.Entities.Spawning.EnemyRespawnGroup"/>.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Spawning.EnemyRespawnGroup.count">
            <summary>
            The number of enemies that are spawned in the <see cref="T:Zelda.Entities.Spawning.EnemyRespawnGroup"/>.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Spawning.EnemyRespawnGroup.respawnCooldown">
            <summary>
            The <see cref="T:Zelda.Cooldown"/> it takes for a died enemy of the <see cref="T:Zelda.Entities.Spawning.EnemyRespawnGroup"/> to respawn.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Spawning.EnemyRespawnGroup.enemyContainers">
            <summary>
            The list of enemies.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Spawning.EnemyRespawnGroup._spawnPoint">
            <summary>
            The storage field of the <see cref="P:Zelda.Entities.Spawning.EnemyRespawnGroup.SpawnPoint"/> property.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Spawning.EnemyRespawnGroup.EnemyContainer">
            <summary>
            Stores the data about an Enemy.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Spawning.EnemyRespawnGroup.EnemyContainer.Enemy">
            <summary>
            The <see cref="F:Zelda.Entities.Spawning.EnemyRespawnGroup.EnemyContainer.Enemy"/> stored in the <see cref="T:Zelda.Entities.Spawning.EnemyRespawnGroup.EnemyContainer"/>. 
            </summary>
        </member>
        <member name="F:Zelda.Entities.Spawning.EnemyRespawnGroup.EnemyContainer.RespawnCooldown">
            <summary>
            Stores the cooldown
            </summary>
        </member>
        <member name="F:Zelda.Entities.Spawning.EnemyRespawnGroup.EnemyContainer.IsRespawning">
            <summary>
            States whether the Enemy is currently respawning.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Spawning.EnemyRespawnGroup.EnemyContainer.IsInitialSpawn">
            <summary>
            Specifies whether the next respawn
            is the initial spawn of the enemy.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Spawning.EnemyRespawnGroup.EnemyContainer.#ctor(Zelda.Entities.Enemy,Zelda.Cooldown)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Entities.Spawning.EnemyRespawnGroup.EnemyContainer"/> class.
            </summary>
            <param name="enemy">
            The Enemy that is stored by the new EnemyContainer.
            </param>
            <param name="respawnCooldown">
            Stores the time the enemy takes to respawn once he has been killed.
            </param>
        </member>
        <member name="M:Zelda.Entities.Spawning.EnemyRespawnGroup.EnemyContainer.Spawn(Zelda.Entities.Spawning.ISpawnPoint)">
            <summary>
            Spawns the Enemy.
            </summary>
            <param name="spawnPoint">
            The ISpawnPoint to spawn the enemy at.
            </param>
        </member>
        <member name="M:Zelda.Entities.Spawning.EnemyRespawnGroup.EnemyContainer.ResetStateForSpawn">
            <summary>
            Resets the state of this Enemy to make it spawnable.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Spawning.EnemyRespawnGroup.EnemyContainer.Despawn">
            <summary>
            Despawn the Enemy of this EnemyRespawnGroup.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Spawning.EnemyRespawnGroup.EnemyContainer.OnEnemyKilled(Zelda.Entities.Components.Killable)">
            <summary>
            Gets called when the Enemy has been killed.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
        </member>
        <member name="T:Zelda.Entities.Spawning.IEnemyRespawnGroup">
            <summary>
            Represents a group of enemies that implements respawning
            them when required.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Spawning.IEnemyRespawnGroup.Create(Zelda.Entities.Spawning.ISpawnPoint,Zelda.Entities.EntityTemplateManager)">
            <summary>
            Creates and setups this IEnemyRespawnGroup.
            </summary>
            <param name="spawnPoint">
            The <see cref="T:Zelda.Entities.Spawning.ISpawnPoint"/> in which the Enemies of this IEnemyRespawnGroup should be spawned in.
            </param>
            <param name="templateManager">
            The <see cref="T:Zelda.Entities.EntityTemplateManager"/> that should be used to load the Enemy template.
            </param>
        </member>
        <member name="T:Zelda.Entities.Spawning.ISpawnPoint">
            <summary>
            A spawn point is a location in the Scene where Entities can spawn.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Spawning.ISpawnPoint.Spawn(Zelda.Entities.ZeldaEntity)">
            <summary>
            Spawns the given <see cref="T:Zelda.Entities.ZeldaEntity"/> at this <see cref="T:Zelda.Entities.Spawning.ISpawnPoint"/>.
            </summary>
            <param name="entity">
            The entity to spawn.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="entity"/> is null.
            </exception>
        </member>
        <member name="T:Zelda.Entities.Spawning.PlayerSpawnPoint">
            <summary>
            Represents a <see cref="T:Zelda.Entities.Spawning.SpawnPoint"/> that only
            allows the <see cref="T:Zelda.Entities.PlayerEntity"/> to respawn.
            This class can't be inherited.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Spawning.PlayerSpawnPoint.SpawnDirection">
            <summary>
            Gets or sets the direction the PlayerEntity is turned into after spawning. 
            </summary>
            <remarks>
            If set to <see cref="F:Atom.Math.Direction4.None"/> the PlayerEntity will maintain his old direction.
            </remarks>
            <value>The default value is <see cref="F:Atom.Math.Direction4.None"/>.</value>
        </member>
        <member name="P:Zelda.Entities.Spawning.PlayerSpawnPoint.SaveLocationAtSpawn">
            <summary>
            Gets or sets a value indicating whether this PlayerSpawnPoint
            will be set as the spawn location when the player saves
            his game.
            </summary>
            <value>The default value is true.</value>
        </member>
        <member name="M:Zelda.Entities.Spawning.PlayerSpawnPoint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Entities.Spawning.PlayerSpawnPoint"/> class.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Spawning.PlayerSpawnPoint.Spawn(Zelda.Entities.ZeldaEntity)">
            <summary>
            Spawns the given <see cref="T:Zelda.Entities.PlayerEntity"/> at this <see cref="T:Zelda.Entities.Spawning.PlayerSpawnPoint"/>.
            </summary>
            <exception cref="T:System.ArgumentException">
            If <paramref name="entity"/> is not of type <see cref="T:Zelda.Entities.PlayerEntity"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="entity"/> is null.
            </exception>
            <param name="entity">
            The entity to spawn.
            </param>
        </member>
        <member name="M:Zelda.Entities.Spawning.PlayerSpawnPoint.Clone">
            <summary>
            Returns a clone of this <see cref="T:Zelda.Entities.Spawning.PlayerSpawnPoint"/>
            </summary>
            <returns>The cloned ZeldaEntity.</returns>
        </member>
        <member name="M:Zelda.Entities.Spawning.PlayerSpawnPoint.SetupClone(Zelda.Entities.Spawning.PlayerSpawnPoint)">
            <summary>
            Setups the given <see cref="T:Zelda.Entities.Spawning.PlayerSpawnPoint"/> to be a clone of this PlayerSpawnPoint.
            </summary>
            <param name="clone">
            The PlayerSpawnPoint to setup.
            </param>
        </member>
        <member name="T:Zelda.Entities.Spawning.PlayerSpawnPoint.ReaderWriter">
            <summary>
            Defines the <see cref="T:Zelda.Entities.IEntityReaderWriter"/> for <see cref="T:Zelda.Entities.Spawning.PlayerSpawnPoint"/> entities.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Spawning.PlayerSpawnPoint.ReaderWriter.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the ReaderWriter class.
            </summary>   
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Entities.Spawning.PlayerSpawnPoint.ReaderWriter.Serialize(Zelda.Entities.Spawning.PlayerSpawnPoint,Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the given object using the given <see cref="T:System.IO.BinaryWriter"/>.
            </summary>
            <param name="entity">
            The entity to serialize.
            </param>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.Spawning.PlayerSpawnPoint.ReaderWriter.Deserialize(Zelda.Entities.Spawning.PlayerSpawnPoint,Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data in the given <see cref="T:System.IO.BinaryWriter"/> to initialize
            the given ZeldaEntity.
            </summary>
            <param name="entity">
            The ZeldaEntity to initialize.
            </param>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="T:Zelda.Entities.Spawning.RazorEntitySpawn">
            <summary>
            Represents an <see cref="T:Zelda.Entities.Spawning.EntitySpawn"/> that manages the spawning
            of a <see cref="T:Zelda.Entities.Components.Behaveable"/> <see cref="T:Zelda.Entities.ZeldaEntity"/> that uses the
            <see cref="T:Zelda.Entities.Behaviours.RazorMovementBehaviour"/>.
            This class can't be inherited.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Spawning.RazorEntitySpawn.MaximumBounceCount">
            <summary>
            Gets or sets the maximum number of bounces
            that may occur before the razor entity stops to bounce.
            </summary>
            <exception cref="T:System.ArgumentException">
            Set: If the given value is negative.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            If no entity template has been set.
            </exception>
        </member>
        <member name="P:Zelda.Entities.Spawning.RazorEntitySpawn.RazorBehaviourType">
            <summary>
            Gets or sets the <see cref="P:Zelda.Entities.Spawning.RazorEntitySpawn.RazorBehaviourType"/> of this RazorMovementBehaviour,
            which controls how the razor entity moves or gets triggered.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            If no entity template has been set.
            </exception>
        </member>
        <member name="P:Zelda.Entities.Spawning.RazorEntitySpawn.Entity">
            <summary>
            Gets the ZeldaEntity that gets spawned by this <see cref="T:Zelda.Entities.Spawning.RazorEntitySpawn"/>.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Spawning.RazorEntitySpawn.#ctor">
            <summary>
            Initializes a new instance of the RazorEntitySpawn class.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Spawning.RazorEntitySpawn.razorBehaviour">
            <summary>
            Identifies the RazorMovementBehaviour of the razor <see cref="P:Zelda.Entities.Spawning.RazorEntitySpawn.Entity"/>.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Spawning.RazorEntitySpawn.ReaderWriter">
            <summary>
            Defines the <see cref="T:Zelda.Entities.IEntityReaderWriter"/> for <see cref="T:Zelda.Entities.Spawning.RazorEntitySpawn"/> entities.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Spawning.RazorEntitySpawn.ReaderWriter.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the ReaderWriter class.
            </summary>   
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Entities.Spawning.RazorEntitySpawn.ReaderWriter.Serialize(Zelda.Entities.Spawning.RazorEntitySpawn,Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the given object using the given <see cref="T:System.IO.BinaryWriter"/>.
            </summary>
            <param name="entity">
            The entity to serialize.
            </param>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.Spawning.RazorEntitySpawn.ReaderWriter.Deserialize(Zelda.Entities.Spawning.RazorEntitySpawn,Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data in the given <see cref="T:System.IO.BinaryWriter"/> to initialize
            the given ZeldaEntity.
            </summary>
            <param name="entity">
            The ZeldaEntity to initialize.
            </param>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="T:Zelda.Entities.Spawning.RespawnableEntitySpawn">
            <summary>
            Defines an <see cref="T:Zelda.Entities.Spawning.EntitySpawn"/> that allows the spawning and respawning 
            of a single <see cref="T:Zelda.Entities.Components.Respawnable"/> <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
        </member>
        <member name="P:Zelda.Entities.Spawning.RespawnableEntitySpawn.Entity">
            <summary>
            Gets the ZeldaEntity that gets spawned by this RespawnableEntitySpawn.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Spawning.RespawnableEntitySpawn.StartRespawn">
            <summary>
            Fires up the respawning process.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Spawning.RespawnableEntitySpawn.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this RespawnableEntitySpawn.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Spawning.RespawnableEntitySpawn.Respawn">
            <summary>
            Tries to respawn the ZeldaEntity.
            </summary>
            <returns>
            true if the entity has been respawned;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Entities.Spawning.RespawnableEntitySpawn.RegisterEntity(Zelda.Entities.ZeldaEntity)">
            <summary>
            Setups the given ZeldaEntity for usage in this EntitySpawn.
            </summary>
            <param name="entity">
            The related ZeldaEntity.
            </param>
        </member>
        <member name="M:Zelda.Entities.Spawning.RespawnableEntitySpawn.UnregisterEntity(Zelda.Entities.ZeldaEntity)">
            <summary>
            Unregisters the given ZeldaEntity from usage in this EntitySpawn.
            </summary>
            <param name="entity">
            The related ZeldaEntity.
            </param>
        </member>
        <member name="M:Zelda.Entities.Spawning.RespawnableEntitySpawn.OnEntityRespawnNeeded(Zelda.Entities.Components.Respawnable)">
            <summary>
            Gets called when the entity wants to be respawned.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
        </member>
        <member name="M:Zelda.Entities.Spawning.RespawnableEntitySpawn.Clone">
            <summary>
            Returns a clone of this RespawnableEntitySpawn.
            </summary>
            <returns>
            The cloned ZeldaEntity.
            </returns>
        </member>
        <member name="F:Zelda.Entities.Spawning.RespawnableEntitySpawn.isRespawning">
            <summary>
            Specifies whether the ZeldaEntity is currently respawning.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Spawning.RespawnableEntitySpawn.respawnTimeLeft">
            <summary>
            States the time (in seconds) left until the ZeldaEntity respawns.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Spawning.RespawnableEntitySpawn.isInitialSpawn">
            <summary>
            States whether the current respawn is the very first spawn.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Spawning.RespawnableEntitySpawn.respawnable">
            <summary>
            Identifies the <see cref="T:Zelda.Entities.Components.Respawnable"/> component of the ZeldaEntity.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Spawning.RespawnableEntitySpawn.ReaderWriter">
            <summary>
            Defines the <see cref="T:Zelda.Entities.IEntityReaderWriter"/> for <see cref="T:Zelda.Entities.Spawning.RespawnableEntitySpawn"/> entities.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Spawning.RespawnableEntitySpawn.ReaderWriter.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the ReaderWriter class.
            </summary>   
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="serviceProvider"/> is null.
            </exception>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Entities.Spawning.RespawnableEntitySpawn.ReaderWriter.Serialize(Zelda.Entities.Spawning.RespawnableEntitySpawn,Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the given object using the given <see cref="T:System.IO.BinaryWriter"/>.
            </summary>
            <param name="entity">
            The entity to serialize.
            </param>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.Spawning.RespawnableEntitySpawn.ReaderWriter.Deserialize(Zelda.Entities.Spawning.RespawnableEntitySpawn,Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data in the given <see cref="T:System.IO.BinaryWriter"/> to initialize
            the given ZeldaEntity.
            </summary>
            <param name="entity">
            The ZeldaEntity to initialize.
            </param>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="T:Zelda.Entities.Spawning.SpawnConstants">
            <summary>
            Contains tweakable spawning constants.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Spawning.SpawnConstants.SpawnFadeInTime">
            <summary>
            The time (in seconds) it takes for a respawning entity to fully fade-in.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Spawning.SpawnConstants.DespawnFadeOutTime">
            <summary>
            The time (in seconds) it takes for a despawning entity to fully fade-out.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Spawning.SpawnHelper">
            <summary>
            Contains static spawning-related utility methods.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Spawning.SpawnHelper.AddBlendInColorTint(Zelda.Entities.ZeldaEntity)">
            <summary>
            Adds an <see cref="T:Zelda.Graphics.Tinting.BlendInColorTint"/> to the specified entity
            if it uses a <see cref="T:Zelda.Entities.Drawing.ITintedDrawDataAndStrategy"/>.
            </summary>
            <param name="entity">
            The entity that should be blended-in.
            </param>
        </member>
        <member name="M:Zelda.Entities.Spawning.SpawnHelper.Despawn(Zelda.Entities.ZeldaEntity,System.Single)">
            <summary>
            Despawns the given ZeldaEntity.
            </summary>
            <param name="entity">
            The entity to despawn.
            </param>
            <param name="fadeOutTime">
            The time it takes for the entity to fade-out before it completly gets despawned.
            </param>
        </member>
        <member name="M:Zelda.Entities.Spawning.SpawnHelper.Spawn(System.String,System.Int32,Zelda.Entities.Spawning.ISpawnPoint,Zelda.Entities.EntityTemplateManager)">
            <summary>
            Spawns entities of type [templateName] at the spawn point [spawnPointName] [count]-times in the given [scene].
            </summary>
            <param name="templateName">
            The name of the entity template.
            </param>
            <param name="count">
            The number of times the entity should be spawned.
            </param>
            <param name="spawnPoint">
            The spawn point at which the entities will be spawned.
            </param>
            <param name="entityTemplateManager">
            Creates the template entity for which the spawned entities will be based on.
            </param>
        </member>
        <member name="T:Zelda.Entities.Spawning.SpawnPoint">
            <summary>
            Defines a basic implementation of the <see cref="T:Zelda.Entities.Spawning.ISpawnPoint"/> interface.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Spawning.SpawnPoint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Entities.Spawning.SpawnPoint"/> class.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Spawning.SpawnPoint.Setup(Zelda.IZeldaServiceProvider)">
            <summary>
            Setups this <see cref="T:Zelda.Entities.Spawning.EnemySpawnPoint"/>.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Entities.Spawning.SpawnPoint.Spawn(Zelda.Entities.ZeldaEntity)">
            <summary>
            Spawns the given <see cref="T:Zelda.Entities.ZeldaEntity"/> at this <see cref="T:Zelda.Entities.Spawning.SpawnPoint"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">If <paramref name="entity"/> is null.</exception>
            <param name="entity">
            The entity to spawn.
            </param>
        </member>
        <member name="M:Zelda.Entities.Spawning.SpawnPoint.GetSpawnPosition">
            <summary>
            Receives a position within the spawn area of this SpawnPoint.
            </summary>
            <returns>The new spawn position.</returns>
        </member>
        <member name="M:Zelda.Entities.Spawning.SpawnPoint.DrawEditMode(Zelda.ZeldaDrawContext)">
            <summary>
            Draws this <see cref="T:Zelda.Entities.Spawning.SpawnPoint"/> in edit-mode.
            </summary>
            <param name="drawContext">
            The current ZeldaDrawContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Spawning.SpawnPoint.Clone">
            <summary>
            Returns a clone of this <see cref="T:Zelda.Entities.Spawning.SpawnPoint"/>
            </summary>
            <returns>The cloned ZeldaEntity.</returns>
        </member>
        <member name="M:Zelda.Entities.Spawning.SpawnPoint.SetupClone(Zelda.Entities.Spawning.SpawnPoint)">
            <summary>
            Setups the given <see cref="T:Zelda.Entities.Spawning.SpawnPoint"/> to be a clone of this SpawnPoint.
            </summary>
            <param name="clone">
            The SpawnPoint to setup.
            </param>
        </member>
        <member name="F:Zelda.Entities.Spawning.SpawnPoint.rand">
            <summary>
            A random number generator.
            </summary>
        </member>
        <member name="T:Zelda.Entities.Spawning.SpawnPoint.ReaderWriter">
            <summary>
            Defines the <see cref="T:Zelda.Entities.IEntityReaderWriter"/> for <see cref="T:Zelda.Entities.Spawning.SpawnPoint"/> entities.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Spawning.SpawnPoint.ReaderWriter.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Entities.Spawning.SpawnPoint.ReaderWriter"/> class.
            </summary>   
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="serviceProvider"/> is null.
            </exception>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Entities.Spawning.SpawnPoint.ReaderWriter.Serialize(Zelda.Entities.Spawning.SpawnPoint,Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the given object using the given <see cref="T:System.IO.BinaryWriter"/>.
            </summary>
            <param name="entity">
            The entity to serialize.
            </param>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.Spawning.SpawnPoint.ReaderWriter.Deserialize(Zelda.Entities.Spawning.SpawnPoint,Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data in the given <see cref="T:System.IO.BinaryWriter"/> to initialize
            the given ZeldaEntity.
            </summary>
            <param name="entity">
            The ZeldaEntity to initialize.
            </param>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="T:Zelda.Entities.EntityTemplate">
            <summary>
            Represents a template that can be used to create new instances of a specific <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
        </member>
        <member name="P:Zelda.Entities.EntityTemplate.Name">
            <summary>
            Gets the name that uniquely identifies this EntityTemplate.
            </summary>
        </member>
        <member name="P:Zelda.Entities.EntityTemplate.LocalizedName">
            <summary>
            Gets the localized name of the templated entity.
            </summary>
        </member>
        <member name="M:Zelda.Entities.EntityTemplate.#ctor(Zelda.Entities.ZeldaEntity,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the EntityTemplate class.
            </summary>
            <param name="template">
            The actual entity on which instances of the new EntityTemplate are based on.
            </param>
            <param name="serviceProvider">
            Allows access to various game-related services.
            </param>
        </member>
        <member name="M:Zelda.Entities.EntityTemplate.CreateInstance">
            <summary>
            Creates an instance of this <see cref="T:Zelda.Entities.EntityTemplate"/>.
            </summary>
            <returns>
            The newly created ZeldaEntity.
            </returns>
        </member>
        <member name="F:Zelda.Entities.EntityTemplate.template">
            <summary>
            The actual entity on which instances of this EntityTemplate are based on.
            </summary>
        </member>
        <member name="F:Zelda.Entities.EntityTemplate.serviceProvider">
            <summary>
            Allows access to various game-related services.
            </summary>
        </member>
        <member name="T:Zelda.Entities.EntityTemplateManager">
            <summary>
            The EntityTemplateManager is responsible for loading and caching of Entity Templates.
            This class can't be inherited.
            </summary>
        </member>
        <member name="M:Zelda.Entities.EntityTemplateManager.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Entities.EntityTemplateManager"/> class.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="serviceProvider"/> is null.
            </exception>
        </member>
        <member name="M:Zelda.Entities.EntityTemplateManager.GetEntity(System.String)">
            <summary>
            Gets an instance of the EntityTemplate that has the given <paramref name="templateName"/>.
            </summary>
            <param name="templateName">
            The name of the template.
            </param>
            <returns>
            An instance of the template.
            </returns>
        </member>
        <member name="M:Zelda.Entities.EntityTemplateManager.GetTemplate(System.String)">
            <summary>
            Gets the template with the given <paramref name="name"/>.
            </summary>
            <param name="name">
            The name of the template.
            </param>
            <returns>
            The template.
            </returns>
        </member>
        <member name="M:Zelda.Entities.EntityTemplateManager.LoadEntity(System.String)">
            <summary>
            Loads the ZeldaEntity with the given <paramref name="name"/> directly from the hard-disc.
            </summary>
            <param name="name">
            The name of the entity.
            </param>
            <returns>
            The directly loaded entity. Should not be used as a template.
            </returns>
        </member>
        <member name="M:Zelda.Entities.EntityTemplateManager.LoadBareboneEntity(System.String)">
            <summary>
            Loads the template with the given <paramref name="name"/> from the hard-disc.
            </summary>
            <remarks>
            This method doesn't add the template to the dictionary.
            </remarks>
            <param name="name">
            The name of the template.
            </param>
            <returns>
            The entity that serves as a template.
            </returns>
        </member>
        <member name="M:Zelda.Entities.EntityTemplateManager.GetDeserializationContext(System.IO.BinaryReader)">
            <summary>
            Gets the deserialization context that should be used for the given BinaryReader.
            </summary>
            <param name="reader">
            The BinaryReader used to deserialize an entity template.
            </param>
            <returns>
            The IZeldaDeserializationContext to use.
            </returns>
        </member>
        <member name="F:Zelda.Entities.EntityTemplateManager.templates">
            <summary>
            The dictionary of templates, sorted by entity name.
            </summary>
        </member>
        <member name="F:Zelda.Entities.EntityTemplateManager.entityReaderWriterManager">
            <summary>
            Identifies the <see cref="T:Zelda.Entities.EntityReaderWriterManager"/> object.
            </summary>
        </member>
        <member name="F:Zelda.Entities.EntityTemplateManager.serviceProvider">
            <summary>
            Provides fast access to game-related services.
            </summary>
        </member>
        <member name="T:Zelda.Entities.IEntityTemplate">
            <summary>
            Provides a mechanism for creating instances of ZeldaEntities based on a template ZeldaEntity.
            </summary>
        </member>
        <member name="M:Zelda.Entities.IEntityTemplate.CreateInstance">
            <summary>
            Creates an instance of this <see cref="T:Zelda.Entities.EntityTemplate"/>.
            </summary>
            <returns>
            The newly created ZeldaEntity.
            </returns>
        </member>
        <member name="T:Zelda.Entities.TileBlock">
            <summary>
            Represents a simple tile-sized entity that can be used
            to make a tile solid.
            </summary>
        </member>
        <member name="P:Zelda.Entities.TileBlock.IsSolid">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Zelda.Entities.TileBlock"/> is solid,
            and as such unpassable by moving entities.
            </summary>
            <value>The default value is false.</value>
        </member>
        <member name="P:Zelda.Entities.TileBlock.DrawDataAndStrategy">
            <summary>
            Gets the <see cref="T:Zelda.Entities.Drawing.OneDirDrawDataAndStrategy"/> of this <see cref="T:Zelda.Entities.TileBlock"/>.
            </summary>
        </member>
        <member name="M:Zelda.Entities.TileBlock.#ctor">
            <summary>
            Initializes a new instance of the TileBlock class.
            </summary>
        </member>
        <member name="M:Zelda.Entities.TileBlock.RefreshActionTile">
            <summary>
            Refreshes the action tile that is related to this TileBlock.
            </summary>
        </member>
        <member name="M:Zelda.Entities.TileBlock.OnAdded(System.Object,Zelda.ZeldaScene)">
            <summary>
            Called when this TileBlock gets added to the specified ZeldaScene.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="scene">The related ZeldaScene.</param>
        </member>
        <member name="M:Zelda.Entities.TileBlock.OnRemoved(System.Object,Zelda.ZeldaScene)">
            <summary>
            Called when this TileBlock gets removed from the specified ZeldaScene.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="scene">The related ZeldaScene.</param>
        </member>
        <member name="T:Zelda.Entities.TileBlock.ReaderWriter">
            <summary>
            Defines the <see cref="T:Zelda.Entities.IEntityReaderWriter"/> for <see cref="T:Zelda.Entities.TileBlock"/> entities.
            </summary>
        </member>
        <member name="M:Zelda.Entities.TileBlock.ReaderWriter.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the ReaderWriter class.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Entities.TileBlock.ReaderWriter.Serialize(Zelda.Entities.TileBlock,Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the given object using the given <see cref="T:System.IO.BinaryWriter"/>.
            </summary>
            <param name="entity">
            The entity to serialize.
            </param>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.TileBlock.ReaderWriter.Deserialize(Zelda.Entities.TileBlock,Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data in the given <see cref="T:System.IO.BinaryWriter"/> to initialize
            the given ZeldaEntity.
            </summary>
            <param name="entity">
            The ZeldaEntity to initialize.
            </param>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="T:Zelda.Entities.Bomb">
            <summary>
            Represents a bomb that deals area damage on explosion.
            This class can't be inherited.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Bomb.Spawn(Zelda.Status.Statable,Atom.Math.Vector2,System.Int32,Zelda.Attacks.AttackDamageMethod,Zelda.Attacks.IAttackHitEffect,System.Single,System.Single,Atom.Xna.SpriteAnimation,Atom.Xna.SpriteAnimation,Atom.Math.Vector2,Atom.Fmod.Sound)">
            <summary>
            Returns a ready-to-be-used <see cref="T:Zelda.Entities.Bomb"/>.
            </summary>
            <param name="statable">
            The <see cref="T:Zelda.Status.Statable"/> component of the Entity that wants to spawn a new Bomb.
            </param>
            <param name="position">
            The position to spawn the Bomb.
            </param>
            <param name="floorNumber">
            The number of the floor to spawn the bomb on.
            </param>
            <param name="damageMethod">
            The <see cref="T:Zelda.Attacks.AttackDamageMethod"/> that is used to calculate the damage
            done by the Bomb.
            </param>
            <param name="hitEffect">
            The <see cref="T:Zelda.Attacks.IAttackHitEffect"/> to apply when the Bomb hits. Can be null.
            </param>
            <param name="explosionRadius">
            The radius of the explosion.
            </param>
            <param name="pushingPower">
            The pushing power at the center of the explosion.
            </param>
            <param name="animation">
            The sprite animation that is used to visualize the ticking bomb.
            </param>
            <param name="animationExplosion">
            The sprite animation that is used to visualize the bomb explosion.
            </param>
            <param name="drawOffsetExplosion">
            The offset that is applied while drawing the bomb explosion.
            </param>
            <param name="explosionSound">
            The (loaded) sound to play when the bomb explodes.
            </param>
            <returns>
            A ready-to-be-used <see cref="T:Zelda.Entities.Bomb"/>.
            </returns>
        </member>
        <member name="M:Zelda.Entities.Bomb.#ctor">
            <summary>
            Prevents a default instance of the Bomb class from being created.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Bomb.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this Bomb.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.Bomb.Explode">
            <summary>
            Explodes this Bomb.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Bomb.Explode(Zelda.ZeldaScene)">
            <summary>
            Explodes this Bomb in the given scene.
            </summary>
            <param name="scene">
            The scene that is queried for bombed enemies.
            </param>
        </member>
        <member name="M:Zelda.Entities.Bomb.PlayExplosionSound(Atom.Math.Vector2)">
            <summary>
            Plays the Explosion Sound at the given position.
            </summary>
            <param name="explosionCenter">
            The center of the explosion.
            </param>
        </member>
        <member name="M:Zelda.Entities.Bomb.BombTarget(Zelda.Entities.ZeldaEntity,Atom.Math.Vector2@)">
            <summary>
            Bombs the given <paramref name="target"/>
            </summary>
            <param name="target">
            The target to explode.
            </param>
            <param name="explosionCenter">
            The center of the explosion.
            </param>
        </member>
        <member name="M:Zelda.Entities.Bomb.OnExplosionEnded">
            <summary>
            Called when the Bomb Explosion has ended.
            </summary>
        </member>
        <member name="M:Zelda.Entities.Bomb.Draw(Zelda.ZeldaDrawContext)">
            <summary>
            Draws this Bomb.
            </summary>
            <param name="drawContext">
            The current ZeldaDrawContext.
            </param>
        </member>
        <member name="T:Zelda.Entities.Bomb.State">
            <summary>
            Enumerates the different states a Bomb can be in.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Bomb.State.None">
            <summary>
            No specific state.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Bomb.State.Ticking">
            <summary>
            The bomb is currently ticking.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Bomb.State.Exploding">
            <summary>
            The bomb is currently exploding.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Bomb.state">
            <summary>
            The current state this Bomb is in.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Bomb.statable">
            <summary>
            The Statable that controls the power of the bomb explosion.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Bomb.damageMethod">
            <summary>
            The AttackDamageMethod that is used to calculate the damage of the bomb explosion.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Bomb.hitEffect">
            <summary>
            The effect that gets applied when the bomb explosion hits an enemy.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Bomb.pushingPower">
            <summary>
            The pushing power at the center of the explosion.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Bomb.animation">
            <summary>
            The SpriteAnimation showing the ticking bomb.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Bomb.animationExplosion">
            <summary>
            The SpriteAnimation showing the explosion effect.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Bomb.drawOffsetExplosion">
            <summary>
            The draw offset to apply when drawing the explosion.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Bomb.poolNode">
            <summary>
            The PoolNode{Bomb} that connects this Bomb with the bombPool.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Bomb.explosionRadius">
            <summary>
            The radius of the explosion.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Bomb.explosionSound">
            <summary>
            The Sound to play when the bomb explodes.
            </summary>
        </member>
        <member name="F:Zelda.Entities.Bomb.bombPool">
            <summary>
            The pool in which Bomb instances are cached.
            </summary>
        </member>
        <member name="T:Zelda.Entities.BombAudio">
            <summary>
            Implements the selection of the bomb explosion sound.
            </summary>
        </member>
        <member name="M:Zelda.Entities.BombAudio.#ctor(Atom.Fmod.AudioSystem,Atom.Math.IRand)">
            <summary>
            Initializes a new instance of the BombAudio class.
            </summary>
            <param name="audioSystem">
            The AudioSystem that plays and receives the sound samples.
            </param>
            <param name="rand">
            A random number generator.
            </param>
        </member>
        <member name="M:Zelda.Entities.BombAudio.GetRandomSound">
            <summary>
            Gets a random bomb explosion Sound.
            </summary>
        </member>
        <member name="T:Zelda.Entities.UnlockableDoorTileBlock">
            <summary>
            Represents a <see cref="T:Zelda.Entities.TileBlock"/> that can be 'removed' from the Scene
            by the player by unlocking it using a key <see cref="T:Zelda.Items.Item"/>.
            This class can't be inherited.
            </summary>
        </member>
        <member name="P:Zelda.Entities.UnlockableDoorTileBlock.RequiredKeyName">
            <summary>
            Gets or sets the name that uniquely identifies the key <see cref="T:Zelda.Items.Item"/>
            that is required to unlock this UnlockableDoorTileBlock. 
            </summary>
        </member>
        <member name="P:Zelda.Entities.UnlockableDoorTileBlock.IsRemovingPersistanceOnUnlock">
            <summary>
            Gets or sets a value indicating whether
            the persistance of this UnlockableDoorTileBlock is
            removed when the player unlocks it.
            </summary>
            <value>The default value is true.</value>
        </member>
        <member name="P:Zelda.Entities.UnlockableDoorTileBlock.UnlockedEvent">
            <summary>
            Gets or sets the <see cref="T:Atom.Events.Event"/> that is
            triggered when the player unlocks this UnlockableDoorTileBlock.
            </summary>
            <value>The default value is null.</value>
        </member>
        <member name="P:Zelda.Entities.UnlockableDoorTileBlock.NotUnlockedEvent">
            <summary>
            Gets or sets the <see cref="T:Atom.Events.Event"/> that is
            triggered when the player didn't manage to unlock this UnlockableDoorTileBlock
            (because he was missing the key).
            </summary>
            <value>The default value is null.</value>
        </member>
        <member name="M:Zelda.Entities.UnlockableDoorTileBlock.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Entities.UnlockableDoorTileBlock"/> class.
            </summary>
        </member>
        <member name="M:Zelda.Entities.UnlockableDoorTileBlock.Use(Zelda.Entities.PlayerEntity)">
            <summary>
            Uses this UnlockableDoorTileBlock, trying to unlock it.
            </summary>
            <param name="user">
            The PlayerEntity that tried to unlock this UnlockableDoorTileBlock.
            </param>
            <returns>
            Whether the UnlockableDoorTileBlock has been unlocked;
            and as such removed from the Scene.
            </returns>
        </member>
        <member name="M:Zelda.Entities.UnlockableDoorTileBlock.OnUnlocked(Zelda.Entities.PlayerEntity)">
            <summary>
            Called when this UnlockableDoorTileBlock has been unlocked
            by the player.
            </summary>
            <param name="user">
            The PlayerEntity that has unlocked this UnlockableDoorTileBlock.
            </param>
        </member>
        <member name="M:Zelda.Entities.UnlockableDoorTileBlock.OnNotUnlocked(Zelda.Entities.PlayerEntity)">
            <summary>
            Called when the player tried to unlock this UnlockableDoorTileBlock,
            but failed.
            </summary>
            <param name="user">
            The PlayerEntity that tried to unlock this UnlockableDoorTileBlock.
            </param>
        </member>
        <member name="T:Zelda.Entities.UnlockableDoorTileBlock.ReaderWriter">
            <summary>
            Defines the <see cref="T:Zelda.Entities.IEntityReaderWriter"/> for <see cref="T:Zelda.Entities.UnlockableDoorTileBlock"/> entities.
            </summary>
        </member>
        <member name="M:Zelda.Entities.UnlockableDoorTileBlock.ReaderWriter.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the ReaderWriter class.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Entities.UnlockableDoorTileBlock.ReaderWriter.Serialize(Zelda.Entities.UnlockableDoorTileBlock,Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the given object using the given <see cref="T:System.IO.BinaryWriter"/>.
            </summary>
            <param name="entity">
            The entity to serialize.
            </param>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.UnlockableDoorTileBlock.ReaderWriter.Deserialize(Zelda.Entities.UnlockableDoorTileBlock,Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data in the given <see cref="T:System.IO.BinaryWriter"/> to initialize
            the given ZeldaEntity.
            </summary>
            <param name="entity">
            The ZeldaEntity to initialize.
            </param>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="T:Zelda.Entities.UseableActionEntity">
            <summary>
            Represents a generic entity that has a visual and when used by the player
            executes a specific <see cref="T:Atom.IAction"/>.
            </summary>
        </member>
        <member name="P:Zelda.Entities.UseableActionEntity.HasToFace">
            <summary>
            Gets or sets a value indicating whether the player has to face the entity
            to use it.
            </summary>
            <value>
            The default value is true.
            </value>
        </member>
        <member name="P:Zelda.Entities.UseableActionEntity.Action">
            <summary>
            Gets or sets the <see cref="T:Atom.IAction"/> to execute when this entity is used.
            </summary>
        </member>
        <member name="M:Zelda.Entities.UseableActionEntity.#ctor">
            <summary>
            Initializes a new instance of the UseableActionEntity class.
            </summary>
        </member>
        <member name="M:Zelda.Entities.UseableActionEntity.Use(Zelda.Entities.PlayerEntity)">
            <summary>
            Tries to use this <see cref="T:Zelda.IUseable"/> object.
            </summary>
            <param name="user">
            The object which tries to use this <see cref="T:Zelda.IUseable"/>.
            </param>
            <returns>
            true if this IUseable object has been used;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Entities.UseableActionEntity.ReaderWriter">
            <summary>
            Defines the <see cref="T:Zelda.Entities.IEntityReaderWriter"/> for <see cref="T:Zelda.Entities.UseableActionEntity"/> entities.
            </summary>
        </member>
        <member name="M:Zelda.Entities.UseableActionEntity.ReaderWriter.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the ReaderWriter class.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services. 
            </param>
        </member>
        <member name="M:Zelda.Entities.UseableActionEntity.ReaderWriter.Serialize(Zelda.Entities.UseableActionEntity,Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the given object using the given <see cref="T:System.IO.BinaryWriter"/>.
            </summary>
            <param name="entity">
            The entity to serialize.
            </param>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.UseableActionEntity.ReaderWriter.Deserialize(Zelda.Entities.UseableActionEntity,Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data in the given <see cref="T:System.IO.BinaryWriter"/> to initialize
            the given ZeldaEntity.
            </summary>
            <param name="entity">
            The ZeldaEntity to initialize.
            </param>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="T:Zelda.Entities.WantedSignPost">
            <summary>
            Represents a <see cref="T:Zelda.Entities.SignPost"/> that gives the Player a
            (most of the times, repeatable) Quest.
            </summary>
        </member>
        <member name="P:Zelda.Entities.WantedSignPost.QuestName">
            <summary>
            Gets or sets the name that uniquely identifies the Quest given by this WantedSignPost.
            </summary>
        </member>
        <member name="M:Zelda.Entities.WantedSignPost.Setup(Zelda.IZeldaServiceProvider)">
            <summary>
            Setups this WantedSignPost.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Entities.WantedSignPost.OnRead(Zelda.Entities.PlayerEntity)">
            <summary>
            Called when the Player has read this WantedSignPost.
            </summary>
            <param name="user">
            The related PlayerEntity.
            </param>
        </member>
        <member name="M:Zelda.Entities.WantedSignPost.AcceptQuest(Zelda.Entities.PlayerEntity)">
            <summary>
            Tries to accept the quest given by this WantedSignPost.
            </summary>
            <param name="user">
            The related PlayerEntity.
            </param>
        </member>
        <member name="M:Zelda.Entities.WantedSignPost.ShowQuestText(Zelda.Quests.Quest)">
            <summary>
            Shows the text of this WantedSignPost that is related to the Quest.
            </summary>
            <param name="quest">
            The related Quest.
            </param>
        </member>
        <member name="M:Zelda.Entities.WantedSignPost.Clone">
            <summary>
            Creates a clone of this WantedSignPost.
            </summary>
            <returns>The cloned ZeldaEntity.</returns>
        </member>
        <member name="M:Zelda.Entities.WantedSignPost.SetupClone(Zelda.Entities.WantedSignPost)">
            <summary>
            Setups the given WantedSignPost to be a clone of this WantedSignPost.
            </summary>
            <param name="clone">
            The WantedSignPost to setup as a clone of this WantedSignPost.
            </param>
        </member>
        <member name="F:Zelda.Entities.WantedSignPost.serviceProvider">
            <summary>
            Provides fast access to game-related services.
            </summary>
        </member>
        <member name="T:Zelda.Entities.WantedSignPost.ReaderWriter">
            <summary>
            Defines the <see cref="T:Zelda.Entities.IEntityReaderWriter"/> for <see cref="T:Zelda.Entities.WantedSignPost"/> entities.
            </summary>
        </member>
        <member name="M:Zelda.Entities.WantedSignPost.ReaderWriter.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the ReaderWriter class.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Entities.WantedSignPost.ReaderWriter.Serialize(Zelda.Entities.WantedSignPost,Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the given object using the given <see cref="T:System.IO.BinaryWriter"/>.
            </summary>
            <param name="entity">
            The entity to serialize.
            </param>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Entities.WantedSignPost.ReaderWriter.Deserialize(Zelda.Entities.WantedSignPost,Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data in the given <see cref="T:System.IO.BinaryWriter"/> to initialize
            the given ZeldaEntity.
            </summary>
            <param name="entity">
            The ZeldaEntity to initialize.
            </param>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="T:Zelda.Entities.ZeldaCamera">
            <summary>
            A camera controls what the player sees in the <see cref="T:Zelda.ZeldaScene"/>. 
            </summary>
            <remarks>
            The camera in TLoZ - BC supports beside translating also zooming and rotating
            for special StatusEffects.
            </remarks>
        </member>
        <member name="E:Zelda.Entities.ZeldaCamera.TransformChanged">
            <summary>
            Fired when the <see cref="P:Zelda.Entities.ZeldaCamera.Transform"/> of this ZeldaCamera has changed.
            </summary>
        </member>
        <member name="E:Zelda.Entities.ZeldaCamera.ScrollChanged">
            <summary>
            Fired when the <see cref="P:Zelda.Entities.ZeldaCamera.Scroll"/> value of this ZeldaCamera has changed.
            </summary>
        </member>
        <member name="M:Zelda.Entities.ZeldaCamera.#ctor(Zelda.ZeldaScene)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Entities.ZeldaCamera"/> class.
            </summary>
            <param name="scene">
            The Scene that owns the new <see cref="T:Zelda.Entities.ZeldaCamera"/>.
            </param>
        </member>
        <member name="P:Zelda.Entities.ZeldaCamera.EntityToFollow">
            <summary>
            Gets or sets the entity this Camera follows.
            </summary>
        </member>
        <member name="P:Zelda.Entities.ZeldaCamera.Scroll">
            <summary>
            Gets or sets the value which represents the translation of the scene
            archived by the Camera.
            </summary>
        </member>
        <member name="P:Zelda.Entities.ZeldaCamera.ViewSize">
            <summary>
            Gets or sets the size of the viewable area.
            </summary>
        </member>
        <member name="P:Zelda.Entities.ZeldaCamera.ViewArea">
            <summary>
            Gets the area that is currently visible to the player.
            </summary>
        </member>
        <member name="P:Zelda.Entities.ZeldaCamera.Transform">
            <summary>
            Gets the transformation matrix the camera applies to the Scene.
            </summary>
            <remarks>
            This is a <see cref="T:Microsoft.Xna.Framework.Matrix"/> rather than an <see cref="T:Atom.Math.Matrix4"/>
            because the Matrix is immiedietly used by Xna. 
            Using an Atom matrix would add a small overhead in converting the matrix.
            </remarks>
        </member>
        <member name="M:Zelda.Entities.ZeldaCamera.Update">
            <summary>
            Updates this <see cref="T:Zelda.Entities.ZeldaCamera"/>.
            </summary>
        </member>
        <member name="M:Zelda.Entities.ZeldaCamera.IsInVision(Zelda.Entities.ZeldaEntity)">
            <summary>
            Receives a value that indicates whether the given <see cref="T:Zelda.Entities.ZeldaEntity"/>
            intersects with the view area of this <see cref="T:Zelda.Entities.ZeldaCamera"/>.
            </summary>
            <param name="entity">
            The entity to test against. Can be null.
            </param>
            <returns>
            true if the given entity is within vision of the camera;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Entities.ZeldaCamera.UpdateCachedTransform">
            <summary>
            Updates the cached transform matrix
            the Camera applies to the Scene.
            </summary>
        </member>
        <member name="F:Zelda.Entities.ZeldaCamera.scroll">
            <summary>
            Represents the translation of the scene.
            </summary>
        </member>
        <member name="F:Zelda.Entities.ZeldaCamera.viewSize">
            <summary>
            Stores the size of the area the player is able to see.
            </summary>
        </member>
        <member name="F:Zelda.Entities.ZeldaCamera.halfViewSize">
            <summary>
            Stores the size of the area the player is able to see.
            </summary>
        </member>
        <member name="F:Zelda.Entities.ZeldaCamera.transform">
            <summary>
            The cached transform matrix.
            </summary>
        </member>
        <member name="F:Zelda.Entities.ZeldaCamera.entityToFollow">
            <summary>
            The entity this <see cref="T:Zelda.Entities.ZeldaCamera"/> automatically follows.
            </summary>
        </member>
        <member name="F:Zelda.Entities.ZeldaCamera.map">
            <summary>
            Reference of the TileMap object of the Scene
            that owns this <see cref="T:Zelda.Entities.ZeldaCamera"/>.
            </summary>
        </member>
        <member name="T:Zelda.Entities.ZeldaEntity">
            <summary>
            Represents an <see cref="T:Atom.Components.Entity"/> that is composed of different <see cref="T:Atom.Components.Component"/>s,
            including the following Components by default:
            <see cref="T:Zelda.Entities.Components.ZeldaTransform"/>, <see cref="T:Zelda.Entities.Components.ZeldaCollision"/> and <see cref="T:Atom.Scene.QuadTreeItem2"/>.
            </summary>
        </member>
        <member name="E:Zelda.Entities.ZeldaEntity.FloorNumberChanged">
            <summary>
            Fired when the <see cref="P:Zelda.Entities.ZeldaEntity.FloorNumber"/> of this <see cref="T:Zelda.Entities.ZeldaEntity"/> has changed.
            </summary>
        </member>
        <member name="E:Zelda.Entities.ZeldaEntity.IsVisibleChanged">
            <summary>
            Fired when the <see cref="P:Zelda.Entities.ZeldaEntity.IsVisible"/> property of this <see cref="T:Zelda.Entities.ZeldaEntity"/> has changed.
            </summary>
        </member>
        <member name="E:Zelda.Entities.ZeldaEntity.Added">
            <summary>
            Fired when this ZeldaEntity has been added to a <see cref="T:Zelda.ZeldaScene"/>.
            </summary>
        </member>
        <member name="E:Zelda.Entities.ZeldaEntity.Removed">
            <summary>
            Fired when this ZeldaEntity has been removed from a <see cref="T:Zelda.ZeldaScene"/>.
            </summary>
        </member>
        <member name="P:Zelda.Entities.ZeldaEntity.Scene">
            <summary>
            Gets or sets the <see cref="T:Zelda.ZeldaScene"/> this <see cref="T:Zelda.Entities.ZeldaEntity"/> is part of.
            </summary>
        </member>
        <member name="P:Zelda.Entities.ZeldaEntity.ActionLayer">
            <summary>
            Gets the action layer this <see cref="T:Zelda.Entities.ZeldaEntity"/> currently operates on.
            </summary>
            <value>
            The ActionLayer or null.
            </value>
        </member>
        <member name="P:Zelda.Entities.ZeldaEntity.FloorNumber">
            <summary>
            Gets or sets the floor this <see cref="T:Zelda.Entities.ZeldaEntity"/> is part of.
            </summary>
        </member>
        <member name="P:Zelda.Entities.ZeldaEntity.FloorRelativity">
            <summary>
            Gets or sets a value that indicates whether this <see cref="T:Zelda.Entities.ZeldaEntity"/>
            is below or above other ZeldaEntities.
            </summary>
        </member>
        <member name="P:Zelda.Entities.ZeldaEntity.IsSaved">
            <summary>
            Gets or sets a value indicating whether
            this <see cref="T:Zelda.Entities.ZeldaEntity"/> is saved into the SceneFile.
            </summary>
            <remarks>
            The default value is true.
            </remarks>
        </member>
        <member name="P:Zelda.Entities.ZeldaEntity.IsEditable">
            <summary>
            Gets or sets a value indicating whether
            this <see cref="T:Zelda.Entities.ZeldaEntity"/> is manually editable by the user (in the editor).
            </summary>
            <remarks>
            The default value is true.
            </remarks>
        </member>
        <member name="P:Zelda.Entities.ZeldaEntity.IsRemoveable">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Zelda.Entities.ZeldaEntity"/>
            is manually removeable by the user (in the editor).
            </summary>
            <remarks>
            The default value is true.
            </remarks>
        </member>
        <member name="P:Zelda.Entities.ZeldaEntity.Transform">
            <summary>
            Gets the <see cref="T:Zelda.Entities.Components.ZeldaTransform"/> component of this <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
        </member>
        <member name="P:Zelda.Entities.ZeldaEntity.Collision">
            <summary>
            Gets the <see cref="T:Zelda.Entities.Components.ZeldaCollision"/> component of this <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
        </member>
        <member name="P:Zelda.Entities.ZeldaEntity.QuadTreeItem">
            <summary>
            Gets the <see cref="T:Atom.Scene.QuadTreeItem2"/> component of this <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
        </member>
        <member name="P:Zelda.Entities.ZeldaEntity.RelativeDrawOrder">
            <summary>
            Gets the draw order of this <see cref="T:Zelda.Entities.ZeldaEntity"/>
            relative to all other Entities on the same <see cref="P:Zelda.Entities.ZeldaEntity.FloorNumber"/>.
            </summary>
        </member>
        <member name="P:Zelda.Entities.ZeldaEntity.SecondaryDrawOrder">
            <summary>
            Gets the secondary draw order value of this IZeldaFloorDrawable.
            </summary>
            <value>
            This value is used as a secondary sorting-value that is
            used when the RelativeDrawOrder of two IZeldaFloorDrawable is equal.
            </value>
        </member>
        <member name="P:Zelda.Entities.ZeldaEntity.IsVisible">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Zelda.Entities.ZeldaEntity"/> is visible.
            </summary>
        </member>
        <member name="P:Zelda.Entities.ZeldaEntity.DrawDataAndStrategy">
            <summary>
            Gets or sets the <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/> of this <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
        </member>
        <member name="M:Zelda.Entities.ZeldaEntity.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Entities.ZeldaEntity"/> class.
            </summary>
            <param name="componentCapacity">
            The number of components this entity can hold without reallocating memory.
            </param>
        </member>
        <member name="M:Zelda.Entities.ZeldaEntity.PreDraw(Zelda.ZeldaDrawContext)">
            <summary>
            Called before drawing anything is drawn.
            </summary>
            <param name="drawContext">
            The current ZeldaDrawContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.ZeldaEntity.Draw(Zelda.ZeldaDrawContext)">
            <summary>
            Draws this <see cref="T:Zelda.Entities.ZeldaEntity"/> using its <see cref="P:Zelda.Entities.ZeldaEntity.DrawDataAndStrategy"/>.
            </summary>
            <param name="drawContext">
            The current ZeldaDrawContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.ZeldaEntity.Draw(Atom.IDrawContext)">
            <summary>
            Draws this <see cref="T:Zelda.Entities.ZeldaEntity"/> using its <see cref="P:Zelda.Entities.ZeldaEntity.DrawDataAndStrategy"/>.
            </summary>
            <param name="drawContext">
            The current IDrawContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.ZeldaEntity.PreUpdate(Zelda.ZeldaUpdateContext)">
            <summary>
            Gets called before <see cref="M:Zelda.Entities.ZeldaEntity.Update(Zelda.ZeldaUpdateContext)"/> is called.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.ZeldaEntity.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this <see cref="T:Zelda.Entities.ZeldaEntity"/>, including all of its components.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Entities.ZeldaEntity.UpdateCachedDrawOrders">
            <summary>
            Updates the cached relative draw order values.
            </summary>
        </member>
        <member name="M:Zelda.Entities.ZeldaEntity.OnCollisionChanged(Atom.Components.Collision.ICollision2)">
            <summary>
            Gets called when the collision shapes
            (and as such the collision center) of this ZeldaEntity has changed.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
        </member>
        <member name="M:Zelda.Entities.ZeldaEntity.AddToScene(Zelda.ZeldaScene)">
            <summary>
            Tries to add this <see cref="T:Zelda.Entities.ZeldaEntity"/> to the specified <see cref="T:Atom.Scene.IScene"/>.
            </summary>
            <param name="scene">
            The <see cref="T:Atom.Scene.IScene"/> to add this <see cref="T:Atom.Components.Entity"/> to.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="scene"/> is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            If this <see cref="T:Atom.Components.Entity"/> already is part of a <see cref="T:Atom.Scene.IScene"/>.
            </exception>
        </member>
        <member name="M:Zelda.Entities.ZeldaEntity.RemoveFromScene">
            <summary>
            Tries to remove this <see cref="T:Zelda.Entities.ZeldaEntity"/> from its <see cref="T:Atom.Scene.IScene"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            If this <see cref="T:Atom.Components.Entity"/> is not part of a <see cref="T:Atom.Scene.IScene"/>.
            </exception>
        </member>
        <member name="M:Zelda.Entities.ZeldaEntity.Clone">
            <summary>
            Creates a clone of this <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
            <returns>The cloned ZeldaEntity.</returns>
        </member>
        <member name="M:Zelda.Entities.ZeldaEntity.SetupClone(Zelda.Entities.ZeldaEntity)">
            <summary>
            Setups the given <see cref="T:Zelda.Entities.ZeldaEntity"/> object
            to be a clone of this <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
            <param name="clone">
            The entity to clone.
            </param>
        </member>
        <member name="M:Zelda.Entities.ZeldaEntity.Atom#Scene#ISceneObject#AddToScene(Atom.Scene.IScene)">
            <summary>
            Adds this ZeldaEntity to the given ZeldaScene.
            </summary>
            <param name="scene">
            The scene to add this ZeldaEntity to.
            </param>
        </member>
        <member name="P:Zelda.Entities.ZeldaEntity.Atom#Scene#ISceneObject#Scene">
            <summary>
            Gets or sets the ZeldaScene this ZeldaEntity is part of.
            </summary>
        </member>
        <member name="P:Zelda.Entities.ZeldaEntity.Atom#Scene#ISceneProvider#Scene">
            <summary>
            Gets the ZeldaScene this ZeldaEntity is part of.
            </summary>
        </member>
        <member name="F:Zelda.Entities.ZeldaEntity._floorNumber">
            <summary>
            The number of the TileMapFloor the entity is part of.
            </summary>
        </member>
        <member name="F:Zelda.Entities.ZeldaEntity._floorRelativity">
            <summary>
            Stores the current EntityFloorRelativity setting of the entity.
            </summary>
        </member>
        <member name="F:Zelda.Entities.ZeldaEntity._isVisible">
            <summary>
            Stores the current visability setting of the entity.
            </summary>
        </member>
        <member name="F:Zelda.Entities.ZeldaEntity._relativeDrawOrder">
            <summary>
            Caches the relative draw order of this ZeldaEntity.
            This value is updated once per frame.
            </summary>
        </member>
        <member name="F:Zelda.Entities.ZeldaEntity._secondaryDrawOrder">
            <summary>
            Caches the relative draw order of this ZeldaEntity.
            This value is updated once per frame.
            </summary>
        </member>
        <member name="F:Zelda.Entities.ZeldaEntity._isSaved">
            <summary>
            Represents the storage fields of the <see cref="P:Zelda.Entities.ZeldaEntity.IsSaved"/>, <see cref="P:Zelda.Entities.ZeldaEntity.IsRemoveable"/> 
            and <see cref="P:Zelda.Entities.ZeldaEntity.IsEditable"/> properties.
            </summary>
        </member>
        <member name="F:Zelda.Entities.ZeldaEntity._isRemoveable">
            <summary>
            Represents the storage fields of the <see cref="P:Zelda.Entities.ZeldaEntity.IsSaved"/>, <see cref="P:Zelda.Entities.ZeldaEntity.IsRemoveable"/> 
            and <see cref="P:Zelda.Entities.ZeldaEntity.IsEditable"/> properties.
            </summary>
        </member>
        <member name="F:Zelda.Entities.ZeldaEntity._isEditable">
            <summary>
            Represents the storage fields of the <see cref="P:Zelda.Entities.ZeldaEntity.IsSaved"/>, <see cref="P:Zelda.Entities.ZeldaEntity.IsRemoveable"/> 
            and <see cref="P:Zelda.Entities.ZeldaEntity.IsEditable"/> properties.
            </summary>
        </member>
        <member name="F:Zelda.Entities.ZeldaEntity.scene">
            <summary>
            The scene this ZeldaEntity is currently attached to.
            </summary>
        </member>
        <member name="F:Zelda.Entities.ZeldaEntity.transform">
            <summary>
            Specifies the transform component of the entity.
            </summary>
        </member>
        <member name="F:Zelda.Entities.ZeldaEntity.collision">
            <summary>
            Specifies the collision component of the entity.
            </summary>
        </member>
        <member name="F:Zelda.Entities.ZeldaEntity.quadTreeItem">
            <summary>
            Specifies the quad tree item component of the entity.
            </summary>
        </member>
        <member name="T:Zelda.LogHelper">
            <summary>
            Defines helper methods that allow to easily log information
            about a specific subsystem.
            </summary>
        </member>
        <member name="M:Zelda.LogHelper.GetFileLogPath(System.String)">
            <summary>
            Gets the full path of the file log used by the application
            with the specified name.
            </summary>
            <param name="applicationName">
            The name of the application.
            </param>
            <returns>
            The full file path.
            </returns>
        </member>
        <member name="M:Zelda.LogHelper.Create(System.String)">
            <summary>
            Creates a new ILog that might be used be the application.
            </summary>
            <param name="applicationName">
            The name of the application.
            </param>
            <returns>
            The newly created ILog.
            </returns>
        </member>
        <member name="M:Zelda.LogHelper.CreateAndInitialize(System.String)">
            <summary>
            Creates a new ILog and initializes it for use in the application.
            </summary>
            <param name="applicationName">
            The name of the application.
            </param>
            <returns>
            The newly created ILog.
            </returns>
        </member>
        <member name="M:Zelda.LogHelper.LogInfo(Atom.Fmod.AudioSystem,Atom.Diagnostics.ILog)">
            <summary>
            Writes information about the fmod audio sub-system
            into the game's log. This information may be of nice use if the game crashes for an user.
            </summary>
            <param name="audioSystem">The  Atom.Fmod.AudioSystem object.</param>
            <param name="log">The log to write the information into.</param>
        </member>
        <member name="M:Zelda.LogHelper.LogInfo(Microsoft.Xna.Framework.GraphicsDeviceInformation,Atom.Diagnostics.ILog)">
            <summary>
            Writes information about the graphics device
            into the game's log. This information may be of nice use if the game crashes for an user.
            </summary>
            <param name="deviceInformation">The GraphicsDeviceInformation object.</param>
            <param name="log">The log to write the information into.</param>
        </member>
        <member name="T:Zelda.Errors.ZeldaErrorReporter">
            <summary>
            Implements the IErrorReporter for the Zelda application.
            </summary>
        </member>
        <member name="M:Zelda.Errors.ZeldaErrorReporter.#ctor(Atom.Diagnostics.ILog,Atom.ErrorReporting.IShutdownLogic,Atom.ErrorReporting.Dialogs.IErrorReportDialogFactory)">
            <summary>
            Initializes a new instance of the ZeldaErrorReporter class.
            </summary>
            <param name="log">
            The ILog to which errors are written.
            </param>
            <param name="shutdownLogic">
            The logic to execute when a fatal error has occurred.
            </param>
            <param name="errorReportDialogFactory">
            The factory that is used to create the dialog used to visualize the error to the user.
            </param>
        </member>
        <member name="M:Zelda.Errors.ZeldaErrorReporter.Report(Atom.ErrorReporting.IError)">
            <summary>
            Reports the specified IError.
            </summary>
            <param name="error">
            The IError that has occurred.
            </param>
        </member>
        <member name="M:Zelda.Errors.ZeldaErrorReporter.Log(Atom.ErrorReporting.IError)">
            <summary>
            Logs the specified IError.
            </summary>
            <param name="error">
            The error that has occurred.
            </param>
        </member>
        <member name="F:Zelda.Errors.ZeldaErrorReporter.log">
            <summary>
            The ILog to which errors are written.
            </summary>
        </member>
        <member name="F:Zelda.Errors.ZeldaErrorReporter.shutdownLogic">
            <summary>
            The logic to execute when a fatal error has occurred.
            </summary>
        </member>
        <member name="F:Zelda.Errors.ZeldaErrorReporter.errorReportDialogFactory">
            <summary>
            The factory that is used to create the dialog used to visualize the error to the user.
            </summary>
        </member>
        <member name="T:Zelda.Errors.ZeldaMailErrorReporter">
            <summary>
            Implement an <see cref="T:Atom.ErrorReporting.IErrorReporter"/> that sends an error report per e-mail.
            </summary>
        </member>
        <member name="M:Zelda.Errors.ZeldaMailErrorReporter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ZeldaMailErrorReporter class.
            </summary>
            <param name="applicationName">
            The name of the application.
            </param>
        </member>
        <member name="T:Zelda.Events.ChangeBackgroundMusicEvent">
            <summary>
            Represents an Event that when triggered changes
            the currently playing background music.
            This class can't be inherited.
            </summary>
        </member>
        <member name="P:Zelda.Events.ChangeBackgroundMusicEvent.IsLooping">
            <summary>
            Gets or sets a value indicating whether the background music
            to change to should continue looping.
            </summary>
            <value>The default value is false.</value>
        </member>
        <member name="P:Zelda.Events.ChangeBackgroundMusicEvent.MusicName">
            <summary>
            Gets or sets the name that uniquely identifies the music resource
            this ChangeBackgroundMusicEvent should change to.
            </summary>
            <value>The default value is null.</value>
        </member>
        <member name="M:Zelda.Events.ChangeBackgroundMusicEvent.Trigger(System.Object)">
            <summary>
            Triggers this ChangeBackgroundMusicEvent.
            </summary>
            <param name="obj">
            The object that has triggered this ChangeBackgroundMusicEvent.
            </param>
        </member>
        <member name="M:Zelda.Events.ChangeBackgroundMusicEvent.Serialize(Atom.Events.IEventSerializationContext)">
            <summary>
            Serializes this ChangeBackgroundMusicEvent event.
            </summary>
            <param name="context">
            The context under which the serialization process occurs.
            </param>
        </member>
        <member name="M:Zelda.Events.ChangeBackgroundMusicEvent.Deserialize(Atom.Events.IEventDeserializationContext)">
            <summary>
            Deserializes this ChangeBackgroundMusicEvent event.
            </summary>
            <param name="context">
            The context under which the deserialization process occurs.
            </param>
        </member>
        <member name="T:Zelda.Events.ChangeToRandomBackgroundMusicEvent">
            <summary>
            Represents an Event that when triggered tells
            the game to play random background music.
            This class can't be inherited.
            </summary>
        </member>
        <member name="M:Zelda.Events.ChangeToRandomBackgroundMusicEvent.Trigger(System.Object)">
            <summary>
            Triggers this ChangeToRandomBackgroundMusicEvent.
            </summary>
            <param name="obj">
            The object that has triggered this ChangeToRandomBackgroundMusicEvent.
            </param>
        </member>
        <member name="T:Zelda.Events.PlayAudioSampleEvent">
            <summary>
            Represents an <see cref="T:Atom.Events.Event"/> that when
            triggered plays a <see cref="T:Atom.Fmod.Sound"/> sample.
            This class can't be inherited.
            </summary>
        </member>
        <member name="P:Zelda.Events.PlayAudioSampleEvent.SampleName">
            <summary>
            Gets or sets the name of the <see cref="T:Atom.Fmod.Sound"/> sample to play.
            </summary>
            <remarks>Samples must be in the Content/Samples/ folder.</remarks>
            <value>The default value is null.</value>
        </member>
        <member name="P:Zelda.Events.PlayAudioSampleEvent.Volumne">
            <summary>
            Gets or sets the volumne the sample should play at,
            0 = silence and 1 = full volumne.
            </summary>
            <value>The default value is 1.</value>
        </member>
        <member name="M:Zelda.Events.PlayAudioSampleEvent.Trigger(System.Object)">
            <summary>
            Triggers this PlayAudioSampleEvent, playing the <see cref="T:Atom.Fmod.Sound"/> sample.
            </summary>
            <param name="obj">
            The object that has triggered this Event.
            </param>
        </member>
        <member name="M:Zelda.Events.PlayAudioSampleEvent.Setup(Zelda.IZeldaServiceProvider)">
            <summary>
            Setups this PlayAudioSampleEvent.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Events.PlayAudioSampleEvent.Serialize(Atom.Events.IEventSerializationContext)">
            <summary>
            Serializes this PlayAudioSampleEvent event.
            </summary>
            <param name="context">
            The context under which the serialization process occurs.
            </param>
        </member>
        <member name="M:Zelda.Events.PlayAudioSampleEvent.Deserialize(Atom.Events.IEventDeserializationContext)">
            <summary>
            Deserializes this PlayAudioSampleEvent event.
            </summary>
            <param name="context">
            The context under which the deserialization process occurs.
            </param>
        </member>
        <member name="F:Zelda.Events.PlayAudioSampleEvent.volumne">
            <summary>
            Represents the storage field of the <see cref="P:Zelda.Events.PlayAudioSampleEvent.Volumne"/> property.
            </summary>
        </member>
        <member name="F:Zelda.Events.PlayAudioSampleEvent.audioSystem">
            <summary>
            The <see cref="T:Atom.Fmod.AudioSystem"/> object.
            </summary>
        </member>
        <member name="T:Zelda.Events.ExternalEvent">
            <summary>
            Represents an <see cref="T:Atom.Events.Event"/> that is not saved and
            also not removeable from the <see cref="T:Atom.Events.EventManager"/> by the user.
            </summary>
        </member>
        <member name="P:Zelda.Events.ExternalEvent.IsRemoveAllowed">
            <summary>
            Gets a value indicating whether 
            this Event is allowed be removed manually by the user.
            </summary>
            <value>Always returns <see langword="false"/>.</value>
        </member>
        <member name="P:Zelda.Events.ExternalEvent.IsSaved">
            <summary>
            Gets a value indicating whether 
            this Event should be saved.
            </summary>
            <value>Always returns <see langword="false"/>.</value>
        </member>
        <member name="T:Zelda.Events.ExternalEventTrigger">
            <summary>
            Represents an <see cref="T:Atom.Events.EventTrigger"/> that is not saved and also not removeable
            from the <see cref="T:Atom.Events.EventManager"/> by the user.
            This class can't be inherited.
            </summary>
        </member>
        <member name="P:Zelda.Events.ExternalEventTrigger.IsRemoveAllowed">
            <summary>
            Gets a value indicating whether 
            this EventTrigger is allowed be removed manually by the user.
            </summary>
            <value>Always returns <see langword="false"/>.</value>
        </member>
        <member name="P:Zelda.Events.ExternalEventTrigger.IsSaved">
            <summary>
            Gets a value indicating whether 
            this EventTrigger should be saved.
            </summary>
            <value>Always returns <see langword="false"/>.</value>
        </member>
        <member name="T:Zelda.Events.ExternalTileAreaEventTrigger">
            <summary>
            Represents an <see cref="T:Atom.Events.TileAreaEventTrigger"/> that is not saved and
            also not removeable from the <see cref="T:Atom.Events.EventManager"/> by the user.
            This class can't be inherited.
            </summary>
        </member>
        <member name="P:Zelda.Events.ExternalTileAreaEventTrigger.IsRemoveAllowed">
            <summary>
            Gets a value indicating whether 
            this TileAreaEventTrigger is allowed be removed manually by the user.
            </summary>
            <value>Always returns <see langword="false"/>.</value>
        </member>
        <member name="P:Zelda.Events.ExternalTileAreaEventTrigger.IsSaved">
            <summary>
            Gets a value indicating whether 
            this TileAreaEventTrigger should be saved.
            </summary>
            <value>Always returns <see langword="false"/>.</value>
        </member>
        <member name="T:Zelda.Events.GameLogicEvent">
            <summary>
            Represents the base class of all pluginable, turn on/off-able
            and long term active game logic that gets updated every frame.
            </summary>
            <remarks>
            Not all game logic-like events must inherit from this class.
            Only those that wish to get updated each frame.
            </remarks>
        </member>
        <member name="M:Zelda.Events.GameLogicEvent.#ctor">
            <summary>
            Initializes a new instance of the GameLogicEvent class.
            </summary>
        </member>
        <member name="M:Zelda.Events.GameLogicEvent.Update(Atom.IUpdateContext)">
            <summary>
            Updates this GameLogicEvent.
            </summary>
            <param name="updateContext">
            The current IUpdateContext.
            </param>
        </member>
        <member name="T:Zelda.Events.InterpolateSceneAmbientEvent">
            <summary>
            Defines an <see cref="T:Atom.Events.Event"/> that when triggered
            changes the AmbientColor of the current <see cref="T:Zelda.ZeldaScene"/>.
            This class can't be inherited.
            </summary>
        </member>
        <member name="P:Zelda.Events.InterpolateSceneAmbientEvent.AmbientColor">
            <summary>
            Gets or sets the Ambient Color the scene will interpolate towards
            after this InterpolateSceneAmbientEvent got triggered.
            </summary>
        </member>
        <member name="P:Zelda.Events.InterpolateSceneAmbientEvent.Time">
            <summary>
            Gets or sets the time it takes for the color to interpolate.
            </summary>
        </member>
        <member name="M:Zelda.Events.InterpolateSceneAmbientEvent.CanBeTriggeredBy(System.Object)">
            <summary>
            Gets a value indicating whether this InterpolateSceneAmbientEvent
            can be triggered by the specified <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">
            The object that wishes to trigger this InterpolateSceneAmbientEvent.
            </param>
            <returns>
            true if the specified Object can trigger this InterpolateSceneAmbientEvent;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Events.InterpolateSceneAmbientEvent.Triggering(System.Object)">
            <summary>
            Called when this InterpolateSceneAmbientEvent is about to trigger.
            </summary>
            <param name="obj">
            The object that has triggered it.
            </param>
            <returns>
            true if it was triggered; or otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Events.InterpolateSceneAmbientEvent.Update(Atom.IUpdateContext)">
            <summary>
            Updates this InterpolateSceneAmbientEvent.
            </summary>
            <param name="updateContext">
            The current IUpdateContext
            </param>
        </member>
        <member name="M:Zelda.Events.InterpolateSceneAmbientEvent.Serialize(Atom.Events.IEventSerializationContext)">
            <summary>
            Serializes this SceneAmbientChangeEvent event.
            </summary>
            <param name="context">
            The context under which the serialization process occurs.
            </param>
        </member>
        <member name="M:Zelda.Events.InterpolateSceneAmbientEvent.Deserialize(Atom.Events.IEventDeserializationContext)">
            <summary>
            Deserializes this SceneAmbientChangeEvent event.
            </summary>
            <param name="context">
            The context under which the deserialization process occurs.
            </param>
        </member>
        <member name="F:Zelda.Events.InterpolateSceneAmbientEvent.oldAmbient">
            <summary>
            The ambient color of the scene before this event kicked in.
            </summary>
        </member>
        <member name="F:Zelda.Events.InterpolateSceneAmbientEvent.scene">
            <summary>
            Captures the scene that is beeing manipulated.
            </summary>
        </member>
        <member name="F:Zelda.Events.InterpolateSceneAmbientEvent.interpolationTimer">
            <summary>
            The timer that is used interpolate.
            </summary>
        </member>
        <member name="T:Zelda.Events.SceneAmbientChangeEvent">
            <summary>
            Defines an <see cref="T:Atom.Events.Event"/> that when triggered
            changes the AmbientColor of the current <see cref="T:Zelda.ZeldaScene"/>.
            This class can't be inherited.
            </summary>
        </member>
        <member name="P:Zelda.Events.SceneAmbientChangeEvent.AmbientColor">
            <summary>
            Gets or sets the Ambient Color the scene will have
            after this SceneAmbientChangeEvent got triggered.
            </summary>
        </member>
        <member name="M:Zelda.Events.SceneAmbientChangeEvent.CanBeTriggeredBy(System.Object)">
            <summary>
            Gets a value indicating whether this SceneAmbientChangeEvent
            can be triggered by the specified <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">
            The object that wishes to trigger this SceneAmbientChangeEvent.
            </param>
            <returns>
            true if the specified Object can trigger this SceneAmbientChangeEvent;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Events.SceneAmbientChangeEvent.Trigger(System.Object)">
            <summary>
            Triggers this SceneAmbientChangeEvent.
            </summary>
            <param name="obj">
            The Object that has triggered this Event.
            </param>
        </member>
        <member name="M:Zelda.Events.SceneAmbientChangeEvent.Serialize(Atom.Events.IEventSerializationContext)">
            <summary>
            Serializes this SceneAmbientChangeEvent event.
            </summary>
            <param name="context">
            The context under which the serialization process occurs.
            </param>
        </member>
        <member name="M:Zelda.Events.SceneAmbientChangeEvent.Deserialize(Atom.Events.IEventDeserializationContext)">
            <summary>
            Deserializes this SceneAmbientChangeEvent event.
            </summary>
            <param name="context">
            The context under which the deserialization process occurs.
            </param>
        </member>
        <member name="T:Zelda.Events.InputTileAreaEventTrigger">
            <summary>
            Represents an <see cref="T:Zelda.Events.ZeldaTileAreaEventTrigger"/> that also requires keyboard input to trigger.
            </summary>
        </member>
        <member name="P:Zelda.Events.InputTileAreaEventTrigger.UserInterface">
            <summary>
            Gets the <see cref="P:Zelda.Events.InputTileAreaEventTrigger.UserInterface"/> of the <see cref="T:Zelda.ZeldaScene"/> that owns this InputTileAreaEventTrigger.
            </summary>
        </member>
        <member name="M:Zelda.Events.InputTileAreaEventTrigger.IsKeyDown(Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            Gets a value indicating whether the specified Key is currently being pressed.
            </summary>
            <param name="key">
            The key to query.
            </param>
            <returns>
            true if they key is currently being pressed;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Events.InputTileAreaEventTrigger.IsKeyUp(Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            Gets a value indicating whether the specified Key is currently not being pressed.
            </summary>
            <param name="key">
            The key to query.
            </param>
            <returns>
            true if they key is currently not being pressed;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Events.SwitchPatternGameLogic">
            <summary>
            Represents a N-way boolean logic circuit that matches
            N-input objects of type <see cref="T:Atom.ISwitchable"/> with
            an expected state.
            This class can't be inherited.
            </summary>
            <remarks>
            <para>
            The SwitchPatternGameLogic matches when all entries match against their respective expected states.
            </para>
            <para>
            An example usage for the SwitchPatternGameLogic class would be
            an ingame puzzle that requires the player to enable FirePlaces
            in a correct pattern.
            </para>
            </remarks>
        </member>
        <member name="E:Zelda.Events.SwitchPatternGameLogic.IsMatchChanged">
            <summary>
            Fired when the IsMatch property has changed.
            </summary>
        </member>
        <member name="P:Zelda.Events.SwitchPatternGameLogic.OnMatchEvent">
            <summary>
            Gets or sets the <see cref="T:Atom.Events.Event"/> that gets triggered
            when the SwitchPatternLogic matches.
            </summary>
        </member>
        <member name="P:Zelda.Events.SwitchPatternGameLogic.Entries">
            <summary>
            Gets the list of entiries of this SwitchPatternLogic.
            </summary>
        </member>
        <member name="P:Zelda.Events.SwitchPatternGameLogic.DisableSwitchablesOnMatch">
            <summary>
            Gets or sets a value indicating whether the switchables
            connectected to this SwitchPatternLogic are 'disabled'
            (made unswitchable) when the pattern matches.
            </summary>
            <value>The default value is false.</value>
        </member>
        <member name="P:Zelda.Events.SwitchPatternGameLogic.IsMatch">
            <summary>
            Gets a value indicating whether the SwitchPatternLogic matches.
            </summary>
        </member>
        <member name="M:Zelda.Events.SwitchPatternGameLogic.#ctor">
            <summary>
            Initializes a new instance of the SwitchPatternGameLogic class.
            </summary>
        </member>
        <member name="M:Zelda.Events.SwitchPatternGameLogic.Refresh">
            <summary>
            Refreshes this SwitchPatternGameLogic, 
            checking the current match state.
            </summary>
        </member>
        <member name="M:Zelda.Events.SwitchPatternGameLogic.DisableSwitchables">
            <summary>
            Disables the entries of this SwitchPatternGameLogic so
            that they can't be switched on or off again.
            </summary>
        </member>
        <member name="M:Zelda.Events.SwitchPatternGameLogic.OnSwitchableStateChanged(System.Object,System.EventArgs)">
            <summary>
            Called when the switch state of one of the switchables has changed.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The EventArgs that contain the event data.</param>
        </member>
        <member name="M:Zelda.Events.SwitchPatternGameLogic.HookEvents">
            <summary>
            Hooks the OnSwitchableStateChanged delegate to listen
            to the switch state of all entries.
            </summary>
        </member>
        <member name="M:Zelda.Events.SwitchPatternGameLogic.UnhookEvents">
            <summary>
            Unhooks the OnSwitchableStateChanged delegate that was listening
            to the switch state of all entries.
            </summary>
        </member>
        <member name="M:Zelda.Events.SwitchPatternGameLogic.Serialize(Atom.Events.IEventSerializationContext)">
            <summary>
            Serializes this SwitchPatternGameLogic event.
            </summary>
            <param name="context">
            The context under which the serialization process occurs.
            </param>
        </member>
        <member name="M:Zelda.Events.SwitchPatternGameLogic.Deserialize(Atom.Events.IEventDeserializationContext)">
            <summary>
            Deserializes this SwitchPatternGameLogic event.
            </summary>
            <param name="context">
            The context under which the deserialization process occurs.
            </param>
        </member>
        <member name="F:Zelda.Events.SwitchPatternGameLogic._isMatch">
            <summary>
            Represents the storage field of the <see cref="P:Zelda.Events.SwitchPatternGameLogic.IsMatch"/> property.
            </summary>
        </member>
        <member name="F:Zelda.Events.SwitchPatternGameLogic.entries">
            <summary>
            The list of SwitchPatternLogic entries.
            </summary>
        </member>
        <member name="T:Zelda.Events.SwitchPatternGameLogic.Entry">
            <summary>
            Represents a single entry in the SwitchPatternLogic.
            This class can't be inherited.
            </summary>
        </member>
        <member name="P:Zelda.Events.SwitchPatternGameLogic.Entry.SwitchableEntity">
            <summary>
            Gets or sets the <see cref="T:Atom.ISwitchable"/> ZeldaEntity that is hooked into this <see cref="T:Zelda.Events.SwitchPatternGameLogic.Entry"/>.
            </summary>
        </member>
        <member name="P:Zelda.Events.SwitchPatternGameLogic.Entry.Switchable">
            <summary>
            Gets the <see cref="T:Atom.ISwitchable"/> that is hooked into this <see cref="T:Zelda.Events.SwitchPatternGameLogic.Entry"/>.
            </summary>
        </member>
        <member name="P:Zelda.Events.SwitchPatternGameLogic.Entry.ExpectedSwitchState">
            <summary>
            Gets or sets a value indicating the state the <see cref="P:Atom.ISwitchable.IsSwitched"/>
            property of the set <see cref="P:Zelda.Events.SwitchPatternGameLogic.Entry.Switchable"/> must evulate to.
            </summary>
        </member>
        <member name="P:Zelda.Events.SwitchPatternGameLogic.Entry.IsMatch">
            <summary>
            Gets a value indicating whether the boolean switch state of the <see cref="P:Zelda.Events.SwitchPatternGameLogic.Entry.Switchable"/>
            is equal to the <see cref="P:Zelda.Events.SwitchPatternGameLogic.Entry.ExpectedSwitchState"/>.
            </summary>
        </member>
        <member name="M:Zelda.Events.SwitchPatternGameLogic.Entry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Events.SwitchPatternGameLogic.Entry"/> class.
            </summary>
        </member>
        <member name="F:Zelda.Events.SwitchPatternGameLogic.Entry.switchableEntity">
            <summary>
            The <see cref="T:Atom.ISwitchable"/> ZeldaEntity that is hooked into this <see cref="T:Zelda.Events.SwitchPatternGameLogic.Entry"/>.
            </summary>
        </member>
        <member name="T:Zelda.Events.ActionEvent">
            <summary>
            Represents an event that when triggered executes an IAction{T}.
            </summary>
        </member>
        <member name="P:Zelda.Events.ActionEvent.Action">
            <summary>
            Gets or sets the action this is executed when this ActionEvent is triggered.
            </summary>
        </member>
        <member name="M:Zelda.Events.ActionEvent.Trigger(System.Object)">
            <summary>
            Triggers this ActionEvent.
            </summary>
            <param name="obj">
            The object that has triggered this ActionEvent.
            </param>
        </member>
        <member name="M:Zelda.Events.ActionEvent.Serialize(Atom.Events.IEventSerializationContext)">
            <summary>
            Serializes this ActionEditor event.
            </summary>
            <param name="context">
            The context under which the serialization process occurs.
            </param>
        </member>
        <member name="M:Zelda.Events.ActionEvent.Deserialize(Atom.Events.IEventDeserializationContext)">
            <summary>
            Deserializes this ActionEditor event.
            </summary>
            <param name="context">
            The context under which the deserialization process occurs.
            </param>
        </member>
        <member name="T:Zelda.Events.DoubleFullTileChangeEvent">
            <summary>
            Represents an <see cref="T:Atom.Events.Event"/> that when triggered
            changes two kind of tiles on a specific TileMapLayer 
            into a different kind of tiles. 
            The tile of the ActionLayer may also be changed.
            This class can't be inherited.
            </summary>
        </member>
        <member name="P:Zelda.Events.DoubleFullTileChangeEvent.FloorNumber">
            <summary>
            Gets or sets the depth layer edited by the event.
            </summary>
        </member>
        <member name="P:Zelda.Events.DoubleFullTileChangeEvent.LayerIndex">
            <summary>
            Gets or sets the index of the TileMapLayer to edit.
            </summary>
        </member>
        <member name="P:Zelda.Events.DoubleFullTileChangeEvent.SourceTileA">
            <summary>
            Gets or sets the id that uniquely identifies the first tile to change.
            </summary>
        </member>
        <member name="P:Zelda.Events.DoubleFullTileChangeEvent.SourceTileB">
            <summary>
            Gets or sets the id that uniquely identifies the second tile to change.
            </summary>
        </member>
        <member name="P:Zelda.Events.DoubleFullTileChangeEvent.TargetTileA">
            <summary>
            Gets or sets the tile id any tile with the <see cref="P:Zelda.Events.DoubleFullTileChangeEvent.SourceTileA"/> changes to.
            </summary>
        </member>
        <member name="P:Zelda.Events.DoubleFullTileChangeEvent.TargetTileB">
            <summary>
            Gets or sets the tile id any tile with the <see cref="P:Zelda.Events.DoubleFullTileChangeEvent.SourceTileB"/> changes to.
            </summary>
        </member>
        <member name="P:Zelda.Events.DoubleFullTileChangeEvent.TargetActionTileA">
            <summary>
            Gets or sets the action id that will be set for all changed tiles 
            that had the <see cref="P:Zelda.Events.DoubleFullTileChangeEvent.SourceTileA"/>.
            </summary>
            <value>
            The action layer will not be edited if this value is -1. 
            </value>
        </member>
        <member name="P:Zelda.Events.DoubleFullTileChangeEvent.TargetActionTileB">
            <summary>
            Gets or sets the action id that will be set for all changed tiles 
            that had the <see cref="P:Zelda.Events.DoubleFullTileChangeEvent.SourceTileB"/>.
            </summary>
            <value>
            The action layer will not be edited if this value is -1. 
            </value>
        </member>
        <member name="M:Zelda.Events.DoubleFullTileChangeEvent.#ctor">
            <summary>
            Initializes a new instance of the DoubleFullTileChangeEvent class.
            </summary>
        </member>
        <member name="M:Zelda.Events.DoubleFullTileChangeEvent.Trigger(System.Object)">
            <summary>
            Triggers this DoubleFullTileChangeEvent.
            </summary>
            <param name="obj">
            The object that has triggered this DoubleFullTileChangeEvent.
            </param>
        </member>
        <member name="M:Zelda.Events.DoubleFullTileChangeEvent.Serialize(Atom.Events.IEventSerializationContext)">
            <summary>
            Serializes this DoubleFullTileChangeEvent event.
            </summary>
            <param name="context">
            The context under which the serialization process occurs.
            </param>
        </member>
        <member name="M:Zelda.Events.DoubleFullTileChangeEvent.Deserialize(Atom.Events.IEventDeserializationContext)">
            <summary>
            Deserializes this DoubleFullTileChangeEvent event.
            </summary>
            <param name="context">
            The context under which the deserialization process occurs.
            </param>
        </member>
        <member name="T:Zelda.Events.RemoveEntityEvent">
            <summary>
            Represents an Event that when triggered removes
            a specific <see cref="T:Zelda.Entities.ZeldaEntity"/> from the Scene.
            </summary>
        </member>
        <member name="P:Zelda.Events.RemoveEntityEvent.Entity">
            <summary>
            Gets or sets the <see cref="T:Zelda.Entities.ZeldaEntity"/> this RemoveEntityEvent
            removes from the scene when triggered.
            </summary>
        </member>
        <member name="P:Zelda.Events.RemoveEntityEvent.IsRemovingPersistance">
            <summary>
            Gets or sets a value indicating whether the persistance of
            the <see cref="T:Zelda.Entities.ZeldaEntity"/> should be removed.
            See <see cref="T:Zelda.Entities.IPersistentEntity"/> for more information.
            </summary>
        </member>
        <member name="M:Zelda.Events.RemoveEntityEvent.Trigger(System.Object)">
            <summary>
            Triggers this RemoveEntityEvent.
            </summary>
            <param name="obj">
            The object that has triggered this RemoveEntityEvent.
            </param>
        </member>
        <member name="M:Zelda.Events.RemoveEntityEvent.HandlePersistanceChange">
            <summary>
            Helper method that removes the persistance of the Entity if <see cref="P:Zelda.Events.RemoveEntityEvent.IsRemovingPersistance"/> is true.
            </summary>
        </member>
        <member name="M:Zelda.Events.RemoveEntityEvent.Serialize(Atom.Events.IEventSerializationContext)">
            <summary>
            Serializes this RemoveEntityEvent event.
            </summary>
            <param name="context">
            The context under which the serialization process occurs.
            </param>
        </member>
        <member name="M:Zelda.Events.RemoveEntityEvent.Deserialize(Atom.Events.IEventDeserializationContext)">
            <summary>
            Deserializes this RemoveEntityEvent event.
            </summary>
            <param name="context">
            The context under which the deserialization process occurs.
            </param>
        </member>
        <member name="T:Zelda.Events.SceneChangeEvent">
            <summary>
            Defines an <see cref="T:Atom.Events.Event"/> that when triggered
            changes the current <see cref="T:Zelda.ZeldaScene"/> shown in-game and
            spawns the PlayerEntity at a specified SpawnPoint.
            </summary>
        </member>
        <member name="P:Zelda.Events.SceneChangeEvent.CachePreviousScene">
            <summary>
            Gets or sets a value indicating whether 
            the previous scene is cached, or completly destroyed.
            </summary>
            <value>
            The default value is true.
            </value>
        </member>
        <member name="P:Zelda.Events.SceneChangeEvent.SceneName">
            <summary>
            Gets or sets the name of the <see cref="T:Zelda.ZeldaScene"/> to change to.
            </summary>
        </member>
        <member name="P:Zelda.Events.SceneChangeEvent.SpawnPointName">
            <summary>
            Gets or sets the name of the spawn point to spawn the player at.
            </summary>
        </member>
        <member name="M:Zelda.Events.SceneChangeEvent.CanBeTriggeredBy(System.Object)">
            <summary>
            Gets a value indicating whether this SceneChangeEvent
            can be triggered by the specified <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">
            The object that wishes to trigger this SceneChangeEvent.
            </param>
            <returns>
            true if the specified Object can trigger this SceneChangeEvent;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Events.SceneChangeEvent.Trigger(System.Object)">
            <summary>
            Triggers this SceneChangeEvent.
            </summary>
            <param name="obj">
            The object that has triggered this SceneChangeEvent.
            </param>
        </member>
        <member name="M:Zelda.Events.SceneChangeEvent.ChangeScene(Zelda.Entities.PlayerEntity)">
            <summary>
            Changes to the ZeldaScene specified by this SceneChangeEvent.
            </summary>
            <param name="player">
            The PlayerEntity that wants to change his current scene.
            </param>
        </member>
        <member name="M:Zelda.Events.SceneChangeEvent.Serialize(Atom.Events.IEventSerializationContext)">
            <summary>
            Serializes this SceneChangeEvent event.
            </summary>
            <param name="context">
            The context under which the serialization process occurs.
            </param>
        </member>
        <member name="M:Zelda.Events.SceneChangeEvent.Deserialize(Atom.Events.IEventDeserializationContext)">
            <summary>
            Deserializes this SceneChangeEvent event.
            </summary>
            <param name="context">
            The context under which the deserialization process occurs.
            </param>
        </member>
        <member name="F:Zelda.Events.SceneChangeEvent.cachePreviousScene">
            <summary>
            The storage field of the <see cref="P:Zelda.Events.SceneChangeEvent.CachePreviousScene"/> property.
            </summary>
        </member>
        <member name="T:Zelda.Events.ShowDialogTextEvent">
            <summary>
            Represents an Event that when triggered shows
            a <see cref="T:Zelda.LocalizableText"/> to the player by displaying
            the text using a <see cref="T:Zelda.UI.Dialog"/> box.
            </summary>
        </member>
        <member name="P:Zelda.Events.ShowDialogTextEvent.Text">
            <summary>
            Gets the <see cref="T:Zelda.LocalizableText"/> that is shown to the
            player using a <see cref="T:Zelda.UI.Dialog"/> when this ShowDialogTextEvent gets triggered.
            </summary>
        </member>
        <member name="M:Zelda.Events.ShowDialogTextEvent.Trigger(System.Object)">
            <summary>
            Triggers this ShowDialogTextEvent.
            </summary>
            <param name="obj">
            The object that has triggered this ShowDialogTextEvent.
            </param>
        </member>
        <member name="M:Zelda.Events.ShowDialogTextEvent.CanBeTriggeredBy(System.Object)">
            <summary>
            Gets a value indicating whether the given Object can
            currently trigger this ShowDialogTextEvent.
            </summary>
            <param name="obj">
            The object that wants to trigger this ShowDialogTextEvent.
            </param>
            <returns>
            True if the event can be triggered;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Events.ShowDialogTextEvent.Serialize(Atom.Events.IEventSerializationContext)">
            <summary>
            Serializes this ShowDialogTextEvent event.
            </summary>
            <param name="context">
            The context under which the serialization process occurs.
            </param>
        </member>
        <member name="M:Zelda.Events.ShowDialogTextEvent.Deserialize(Atom.Events.IEventDeserializationContext)">
            <summary>
            Deserializes this ShowDialogTextEvent event.
            </summary>
            <param name="context">
            The context under which the deserialization process occurs.
            </param>
        </member>
        <member name="F:Zelda.Events.ShowDialogTextEvent.localizeableText">
            <summary>
            Stores the text shown by this DialogEvent.
            </summary>
        </member>
        <member name="T:Zelda.Events.SpawnEntityEvent">
            <summary>
            Defines an event that when triggered spawns a <see cref="T:Zelda.Entities.ZeldaEntity"/>
            defined with a specified entity template at a specified <see cref="T:Zelda.Entities.Spawning.ISpawnPoint"/>.
            </summary>
        </member>
        <member name="P:Zelda.Events.SpawnEntityEvent.EntityTemplateName">
            <summary>
            Gets or sets the name that uniquely identifies
            the entity template that is uses to create the
            entity that gets spawned by this SpawnEntityEvent.
            </summary>
        </member>
        <member name="P:Zelda.Events.SpawnEntityEvent.SpawnPointName">
            <summary>
            Gets or sets the name that uniquely identifies
            the spawn point at which the entity should spawn.
            </summary>
        </member>
        <member name="M:Zelda.Events.SpawnEntityEvent.Trigger(System.Object)">
            <summary>
            Triggers this SpawnEntityEvent.
            </summary>
            <param name="obj">
            The object that has triggered this SpawnEntityEvent.
            </param>
        </member>
        <member name="M:Zelda.Events.SpawnEntityEvent.Setup(Zelda.IZeldaServiceProvider)">
            <summary>
            Setups this SpawnEntityEvent.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Events.SpawnEntityEvent.Serialize(Atom.Events.IEventSerializationContext)">
            <summary>
            Serializes this SpawnEntityEvent event.
            </summary>
            <param name="context">
            The context under which the serialization process occurs.
            </param>
        </member>
        <member name="M:Zelda.Events.SpawnEntityEvent.Deserialize(Atom.Events.IEventDeserializationContext)">
            <summary>
            Deserializes this SpawnEntityEvent event.
            </summary>
            <param name="context">
            The context under which the deserialization process occurs.
            </param>
        </member>
        <member name="F:Zelda.Events.SpawnEntityEvent.entityTemplateManager">
            <summary>
            The <see cref="T:Zelda.Entities.EntityTemplateManager"/> object. 
            </summary>
        </member>
        <member name="T:Zelda.Events.SwitchEntityEvent">
            <summary>
            Represents an Event that when triggered changes the switch state of an <see cref="T:Atom.ISwitchable"/>
            <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
        </member>
        <member name="T:Zelda.Events.SwitchEntityEvent.SwitchMode">
            <summary>
            Enumerates the different moves the SwitchEntityEvent class supports.
            </summary>
        </member>
        <member name="F:Zelda.Events.SwitchEntityEvent.SwitchMode.Toggle">
            <summary>
            Toggles the ISwitchable entity from on to off, or from off to on.
            </summary>
        </member>
        <member name="F:Zelda.Events.SwitchEntityEvent.SwitchMode.On">
            <summary>
            Toggles the ISwitchable entity from on.
            </summary>
        </member>
        <member name="F:Zelda.Events.SwitchEntityEvent.SwitchMode.Off">
            <summary>
            Toggles the ISwitchable entity off.
            </summary>
        </member>
        <member name="P:Zelda.Events.SwitchEntityEvent.Entity">
            <summary>
            Gets or sets the <see cref="T:Zelda.Entities.ZeldaEntity"/> this RemoveEntityEvent
            removes from the scene when triggered.
            </summary>
        </member>
        <member name="P:Zelda.Events.SwitchEntityEvent.Mode">
            <summary>
            Gets or sets the SwitchMode that is executed when this SwitchEntityEvent has been triggered. 
            </summary>
        </member>
        <member name="M:Zelda.Events.SwitchEntityEvent.Trigger(System.Object)">
            <summary>
            Triggers this SwitchEntityEvent.
            </summary>
            <param name="obj">
            The object that has triggered this SwitchEntityEvent.
            </param>
        </member>
        <member name="M:Zelda.Events.SwitchEntityEvent.Serialize(Atom.Events.IEventSerializationContext)">
            <summary>
            Serializes this SwitchEntityEvent event.
            </summary>
            <param name="context">
            The context under which the serialization process occurs.
            </param>
        </member>
        <member name="M:Zelda.Events.SwitchEntityEvent.Deserialize(Atom.Events.IEventDeserializationContext)">
            <summary>
            Deserializes this SwitchEntityEvent event.
            </summary>
            <param name="context">
            The context under which the deserialization process occurs.
            </param>
        </member>
        <member name="T:Zelda.Events.TileAreaClearEvent">
            <summary>
            Defines an event that when triggered sets all tiles in a specific
            area to 0.
            </summary>
        </member>
        <member name="P:Zelda.Events.TileAreaClearEvent.Area">
            <summary>
            Gets or sets the area that should be deleted.
            </summary>
        </member>
        <member name="P:Zelda.Events.TileAreaClearEvent.IgnoreGroundLayer">
            <summary>
            Gets or sets a value indicating whether the ground layer should be ignored.
            </summary>
        </member>
        <member name="M:Zelda.Events.TileAreaClearEvent.Trigger(System.Object)">
            <summary>
            Triggers this AreaTileDeletionEvent.
            </summary>
            <param name="obj">
            The object that wants to trigger this AreaTileDeletionEvent.
            </param>
        </member>
        <member name="M:Zelda.Events.TileAreaClearEvent.GetLayersToClean(Zelda.ZeldaScene)">
            <summary>
            Gets the TileMapDataLayers that should be cleaned when
            this AreaTileDeletionEvent is triggered.
            </summary>
            <param name="scene">
            The ZeldaScene that should be cleaned.
            </param>
            <returns>
            The layers to clean.
            </returns>
        </member>
        <member name="M:Zelda.Events.TileAreaClearEvent.ShouldCleanLayer(System.Int32,Atom.Scene.Tiles.TileMapDataLayer)">
            <summary>
            Gets a value indicating whether the specified layer should be cleaned.
            </summary>
            <param name="layerIndex">
            The index of the layer.
            </param>
            <param name="layer">
            The actual layer.
            </param>
            <returns>
            true if the layer should be cleaned;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Events.TileAreaClearEvent.ShouldCleanActionLayerOf(Atom.Scene.Tiles.TileMapFloor)">
            <summary>
            Returns a value indicating whether the action layer of the specified TileMapFloor
            should be cleaned.
            </summary>
            <param name="floor">
            The floor whose action layer might be cleaned.
            </param>
            <returns>
            true if the action layer should also be cleaned;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Events.TileAreaClearEvent.ClearTile(System.Int32,System.Int32,System.Collections.Generic.List{Atom.Scene.Tiles.TileMapDataLayer})">
            <summary>
            Sets the tile of all specified layers at the specified position to 0.
            </summary>
            <param name="x">
            The position of the tile to cleanse on the x-axis. (tile-space)
            </param>
            <param name="y">
            The position of the tile to cleanse on the y-axis. (tile-space)
            </param>
            <param name="layers">
            The layers to cleanse.
            </param>
        </member>
        <member name="M:Zelda.Events.TileAreaClearEvent.Serialize(Atom.Events.IEventSerializationContext)">
            <summary>
            Serializes this AreaTileClearEvent.
            </summary>
            <param name="context">
            The context under which the serialization process occurs.
            </param>
        </member>
        <member name="M:Zelda.Events.TileAreaClearEvent.Deserialize(Atom.Events.IEventDeserializationContext)">
            <summary>
            Deserializes this AreaTileClearEvent.
            </summary>
            <param name="context">
            The context under which the deserialization process occurs.
            </param>
        </member>
        <member name="T:Zelda.Events.ToggleTileMapLayerVisabilityEvent">
            <summary>
            Represents an Event that when triggered
            tiggles the visability state of an <see cref="T:Atom.Scene.Tiles.TileMapDataLayer"/>.
            </summary>
        </member>
        <member name="P:Zelda.Events.ToggleTileMapLayerVisabilityEvent.Mode">
            <summary>
            Gets or sets the <see cref="T:Zelda.Core.ToggleMode"/> that determines how
            the TileMapLayer's Visability should be toggled.
            </summary>
        </member>
        <member name="P:Zelda.Events.ToggleTileMapLayerVisabilityEvent.FloorNumber">
            <summary>
            Gets or sets the number that uniquely identifies the TileMapFloor
            to manipulate.
            </summary>
        </member>
        <member name="P:Zelda.Events.ToggleTileMapLayerVisabilityEvent.LayerIndex">
            <summary>
            Gets or sets the index of the <see cref="T:Atom.Scene.Tiles.TileMapDataLayer"/> to manipulate.
            </summary>
        </member>
        <member name="M:Zelda.Events.ToggleTileMapLayerVisabilityEvent.Trigger(System.Object)">
            <summary>
            Triggers this ToggleTileMapLayerVisabilityEvent.
            </summary>
            <param name="obj">
            The object that has triggered this ToggleTileMapLayerVisabilityEvent.
            </param>
        </member>
        <member name="M:Zelda.Events.ToggleTileMapLayerVisabilityEvent.Toggle(Atom.Scene.Tiles.TileMapDataLayer)">
            <summary>
            Toggles the visablity of the given TileMapDataLayer
            based on the <see cref="P:Zelda.Events.ToggleTileMapLayerVisabilityEvent.Mode"/> that has been set.
            </summary>
            <param name="layer">
            The TileMapDataLayer to manipulate.
            </param>
        </member>
        <member name="M:Zelda.Events.ToggleTileMapLayerVisabilityEvent.Serialize(Atom.Events.IEventSerializationContext)">
            <summary>
            Serializes this ToggleTileMapLayerVisabilityEvent event.
            </summary>
            <param name="context">
            The context under which the serialization process occurs.
            </param>
        </member>
        <member name="M:Zelda.Events.ToggleTileMapLayerVisabilityEvent.Deserialize(Atom.Events.IEventDeserializationContext)">
            <summary>
            Deserializes this ToggleTileMapLayerVisabilityEvent event.
            </summary>
            <param name="context">
            The context under which the deserialization process occurs.
            </param>
        </member>
        <member name="T:Zelda.Events.TurnEntityEvent">
            <summary>
            Represents a LongTermEvent that when executed
            turns a ZeldaEntity N-times into a specific direction by
            changing its Transform.Direction.
            This class can't be inherited.
            </summary>
        </member>
        <member name="E:Zelda.Events.TurnEntityEvent.TurnCompleted">
            <summary>
            Called when this TurnEntityEvent has completed a 360° turn of the Entity.
            </summary>
        </member>
        <member name="P:Zelda.Events.TurnEntityEvent.Entity">
            <summary>
            Gets or sets the ZeldaEntity turned by this TurnEntityEvent.
            </summary>
        </member>
        <member name="P:Zelda.Events.TurnEntityEvent.TurnCount">
            <summary>
            Gets or sets the number of complete turns that should be executed.
            </summary>
        </member>
        <member name="P:Zelda.Events.TurnEntityEvent.TimeBetweenDirectionChanges">
            <summary>
            Gets or sets the time between individual direction changes.
            </summary>
        </member>
        <member name="P:Zelda.Events.TurnEntityEvent.TurnSpeedIncreasePerTurn">
            <summary>
            Gets or sets the reduction of the time between two direction changes
            applied after a turn has completed in %.
            </summary>
        </member>
        <member name="P:Zelda.Events.TurnEntityEvent.TurnDirection">
            <summary>
            Gets or sets the direction the Entity is turned.
            </summary>
        </member>
        <member name="P:Zelda.Events.TurnEntityEvent.TurnsCompleted">
            <summary>
            Gets a value indicating how many 360° turns this TurnEntityEvent has completed.
            </summary>
        </member>
        <member name="M:Zelda.Events.TurnEntityEvent.#ctor">
            <summary>
            Initializes a new instance of the TurnEntityEvent class.
            </summary>
        </member>
        <member name="M:Zelda.Events.TurnEntityEvent.Triggering(System.Object)">
            <summary>
            Called when this TurnEntityEvent is triggered.
            </summary>
            <param name="obj">
            The object that wants to trigger this TurnEntityEvent.
            </param>
            <returns>
            Whether this TurnEntityEvent should be triggering.
            </returns>
        </member>
        <member name="M:Zelda.Events.TurnEntityEvent.Reset">
            <summary>
            Resets this TurnEntityEvent.
            </summary>
        </member>
        <member name="M:Zelda.Events.TurnEntityEvent.Update(Atom.IUpdateContext)">
            <summary>
            Updates this TurnEntityEvent.
            </summary>
            <param name="updateContext">
            The current IUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Events.TurnEntityEvent.ChangeDirection">
            <summary>
            Changes the direction of the <see cref="P:Zelda.Events.TurnEntityEvent.Entity"/>.
            </summary>
        </member>
        <member name="M:Zelda.Events.TurnEntityEvent.OnTurnCompleted">
            <summary>
            Called when this TurnEntityEvent has completed one 360° turn of the Entity.
            </summary>
        </member>
        <member name="F:Zelda.Events.TurnEntityEvent.timeLeft">
            <summary>
            The time left (in seconds) until the Entity changes direction again.
            </summary>
        </member>
        <member name="F:Zelda.Events.TurnEntityEvent.time">
            <summary>
            The time between two direction changes.
            </summary>
        </member>
        <member name="F:Zelda.Events.TurnEntityEvent.directionChangeCount">
            <summary>
            The number of direction changes applied to the Entity.
            </summary>
        </member>
        <member name="F:Zelda.Events.TurnEntityEvent.turnsCompleted">
            <summary>
            The number of total turns applied to the Entity.
            </summary>
        </member>
        <member name="T:Zelda.Events.SetPlayerDirectionEvent">
            <summary>
            Defines an Event that changes the direction the player is turned.
            This class can't be inherited.
            </summary>
        </member>
        <member name="P:Zelda.Events.SetPlayerDirectionEvent.Direction">
            <summary>
            Gets or sets the direction to change the player to.
            </summary>
        </member>
        <member name="M:Zelda.Events.SetPlayerDirectionEvent.Trigger(System.Object)">
            <summary>
            Triggers this SetPlayerDirectionEvent.
            </summary>
            <param name="obj">
            The object that has triggered this SetPlayerDirectionEvent.
            </param>
        </member>
        <member name="T:Zelda.Events.TeleportPlayerEvent">
            <summary>
            Represents a <see cref="T:Zelda.Events.SceneChangeEvent"/> that instantly teleports
            the player after blending out the scene.
            </summary>
        </member>
        <member name="M:Zelda.Events.TeleportPlayerEvent.Trigger(System.Object)">
            <summary>
            Triggers this TeleportPlayerEvent.
            </summary>
            <param name="obj">
            The object that wants to trigger this TeleportPlayerEvent.
            </param>
        </member>
        <member name="M:Zelda.Events.TeleportPlayerEvent.CanBeTriggeredBy(System.Object)">
            <summary>
            Gets a value indicating whether this TeleportPlayerEvent
            can be triggered by the specified <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">
            The object that wishes to trigger this SceneChangeEvent.
            </param>
            <returns>
            true if the specified Object can trigger this SceneChangeEvent;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Events.TeleportPlayerEvent.OnBlendOutEndedOrReplaced(System.Object,System.EventArgs)">
            <summary>
            Called when the blending operation has completed or has been replaced.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
            <param name="e">
            The EventArgs that contain the event data.
            </param>
        </member>
        <member name="M:Zelda.Events.TeleportPlayerEvent.Serialize(Atom.Events.IEventSerializationContext)">
            <summary>
            Serializes this TeleportPlayerEvent event.
            </summary>
            <param name="context">
            The context under which the serialization process occurs.
            </param>
        </member>
        <member name="M:Zelda.Events.TeleportPlayerEvent.Deserialize(Atom.Events.IEventDeserializationContext)">
            <summary>
            Deserializes this TeleportPlayerEvent event.
            </summary>
            <param name="context">
            The context under which the deserialization process occurs.
            </param>
        </member>
        <member name="F:Zelda.Events.TeleportPlayerEvent.player">
            <summary>
            The PlayerEntity that has triggered this WarpPlayerEvent.
            </summary>
        </member>
        <member name="T:Zelda.Events.WarpPlayerEvent">
            <summary>
            Represents a <see cref="T:Zelda.Events.SceneChangeEvent"/> that applies additional StatusEffects
            before actually changing the scene.
            </summary>
        </member>
        <member name="M:Zelda.Events.WarpPlayerEvent.Trigger(System.Object)">
            <summary>
            Triggers this WarpPlayerEvent.
            </summary>
            <param name="obj">
            The object that wants to trigger this WarpPlayerEvent.
            </param>
        </member>
        <member name="M:Zelda.Events.WarpPlayerEvent.CanBeTriggeredBy(System.Object)">
            <summary>
            Gets a value indicating whether this WarpPlayerEvent
            can be triggered by the specified <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">
            The object that wishes to trigger this SceneChangeEvent.
            </param>
            <returns>
            true if the specified Object can trigger this SceneChangeEvent;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Events.WarpPlayerEvent.CreateTurnEvent(Zelda.Events.ZeldaEventManager)">
            <summary>
            Creates the TurnEntityEvent used by this WarpPlayerEvent.
            </summary>
            <param name="eventManager">
            The ZeldaEventManager to use.
            </param>
        </member>
        <member name="M:Zelda.Events.WarpPlayerEvent.OnTurnPlayerEventTurnCompleted(Zelda.Events.TurnEntityEvent)">
            <summary>
            Called when the TurnEntityEvent has completed a 360° turn of the player.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
        </member>
        <member name="M:Zelda.Events.WarpPlayerEvent.OnTurnPlayerEventStopped(Atom.Events.LongTermEvent)">
            <summary>
            Called when the TurnEntityEvent has stopped.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
        </member>
        <member name="M:Zelda.Events.WarpPlayerEvent.DestroyTurnEvent">
            <summary>
            Destroys the TurnEntityEvent.
            </summary>
        </member>
        <member name="M:Zelda.Events.WarpPlayerEvent.Setup(Zelda.IZeldaServiceProvider)">
            <summary>
            Setups this WarpPlayerEvent.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game services.
            </param>
        </member>
        <member name="M:Zelda.Events.WarpPlayerEvent.Serialize(Atom.Events.IEventSerializationContext)">
            <summary>
            Serializes this WarpPlayerEvent event.
            </summary>
            <param name="context">
            The context under which the serialization process occurs.
            </param>
        </member>
        <member name="M:Zelda.Events.WarpPlayerEvent.Deserialize(Atom.Events.IEventDeserializationContext)">
            <summary>
            Deserializes this WarpPlayerEvent event.
            </summary>
            <param name="context">
            The context under which the deserialization process occurs.
            </param>
        </member>
        <member name="F:Zelda.Events.WarpPlayerEvent.blendingStarted">
            <summary>
            States whether the blending-out of the scene has started.
            </summary>
        </member>
        <member name="F:Zelda.Events.WarpPlayerEvent.turnPlayerEvent">
            <summary>
            The TurnEntityEvent used to turn the player just before teleporting him.
            </summary>
        </member>
        <member name="F:Zelda.Events.WarpPlayerEvent.player">
            <summary>
            The PlayerEntity that has triggered this WarpPlayerEvent.
            </summary>
        </member>
        <member name="F:Zelda.Events.WarpPlayerEvent.audioSystem">
            <summary>
            Allows playing of the warp sound sample.
            </summary>
        </member>
        <member name="T:Zelda.Events.OnKeyDownTileAreaEventTrigger">
            <summary>
            Represents an EventTrigger that triggers when the player presses a specific Key in a specific area.
            </summary>
        </member>
        <member name="P:Zelda.Events.OnKeyDownTileAreaEventTrigger.Key">
            <summary>
            Gets or sets the Key that must be pressed while beeing in the required
            area for this InputTileAreaEventTrigger to trigger.
            </summary>
        </member>
        <member name="M:Zelda.Events.OnKeyDownTileAreaEventTrigger.CanBeTriggeredBy(Atom.Events.TriggerContext)">
            <summary>
            Gets whether the specified Object can trigger the <see cref="T:Atom.Events.EventTrigger"/>.
            </summary>
            <param name="context">
            The object to test.
            </param>
            <returns>
            true if the object can trigger it;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Events.OnKeyDownTileAreaEventTrigger.Serialize(Atom.Events.IEventSerializationContext)">
            <summary>
            Serializes this TileAreaEventTrigger using the specified IEventSerializationContext.
            </summary>
            <param name="context">
            The context under which the serialization process occurs.
            </param>
        </member>
        <member name="M:Zelda.Events.OnKeyDownTileAreaEventTrigger.Deserialize(Atom.Events.IEventDeserializationContext)">
            <summary>
            Deserializes this TileAreaEventTrigger using the specified IEventDeserializationContext.
            </summary>
            <param name="context">
            The context under which the deserialization process occurs.
            </param>
        </member>
        <member name="T:Zelda.Events.OnUseTileAreaEventTrigger">
            <summary>
            Represents an EventTrigger that gets triggered when the player has pressed the Use key
            while standing in the trigger area. The player must also face the area.
            </summary>
        </member>
        <member name="M:Zelda.Events.OnUseTileAreaEventTrigger.CanBeTriggeredBy(Atom.Events.TriggerContext)">
            <summary>
            Gets whether the specified Object can trigger the EventTrigger.
            </summary>
            <param name="context">
            The context under test.
            </param>
            <returns>
            true if the object can trigger it;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Events.OnUseTileAreaEventTrigger.WasUsePressed(Zelda.KeySettings)">
            <summary>
            Gets a value indicating whether the player has pressed the "Use" key.
            </summary>
            <param name="keySettings">
            The keyboard settings.
            </param>
            <returns>
            true if it was prassed;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Events.SongTileAreaEventTrigger">
            <summary>
            Represents an EventTrigger that gets triggered when the player
            plays a specific song.
            </summary>
        </member>
        <member name="T:Zelda.Events.ZeldaEvent">
            <summary>
            Defines an abstract base class that extends the <see cref="T:Atom.Events.Event"/> class
            with Zelda-related useability features.
            </summary>
            <remarks>
            It is absolutely not required to extend the ZeldaEvent class
            over the <see cref="T:Atom.Events.Event"/> class.
            This class is only there to reduce the amount of duplicate code.
            </remarks>
        </member>
        <member name="P:Zelda.Events.ZeldaEvent.EventManager">
            <summary>
            Gets the <see cref="T:Zelda.Events.ZeldaEventManager"/> that manages this ZeldaEvent.
            </summary>
        </member>
        <member name="P:Zelda.Events.ZeldaEvent.Scene">
            <summary>
            Gets the <see cref="T:Zelda.ZeldaScene"/> that owns this ZeldaEvent.
            </summary>
        </member>
        <member name="T:Zelda.Events.ZeldaEventManager">
            <summary>
            Defines the <see cref="T:Atom.Events.EventManager"/> used by the Zelda game.
            </summary>
        </member>
        <member name="F:Zelda.Events.ZeldaEventManager.TickTime">
            <summary>
            The time in seconds between event checks.
            </summary>
        </member>
        <member name="P:Zelda.Events.ZeldaEventManager.Scene">
            <summary>
            Gets the <see cref="T:Zelda.ZeldaScene"/> this ZeldaEventManager is part of.
            </summary>
        </member>
        <member name="M:Zelda.Events.ZeldaEventManager.#ctor(Zelda.ZeldaScene)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Events.ZeldaEventManager"/> class.
            </summary>
            <param name="scene">
            The ZeldaScene the new ZeldaEventManager is part of.
            </param>
        </member>
        <member name="M:Zelda.Events.ZeldaEventManager.RegisterEvents">
            <summary>
            Registers the Events and EventTriggers of the game at the <see cref="T:Atom.Events.EventTypeRegister"/>.
            </summary>
        </member>
        <member name="M:Zelda.Events.ZeldaEventManager.Update(Zelda.ZeldaUpdateContext,Zelda.Entities.PlayerEntity)">
            <summary>
            Triggers all related TileAreaEventTriggers for the given Zelda.Entities.PlayerEntity.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
            <param name="player">
            The related Zelda.Entities.PlayerEntity.
            </param>
        </member>
        <member name="M:Zelda.Events.ZeldaEventManager.GetEventNameExtension">
            <summary>
            Helper-method that gets an unique string that can be used
            to extend an <see cref="T:Atom.Events.Event"/>'s name.
            </summary>
            <returns>
            A new unique string.
            </returns>
        </member>
        <member name="M:Zelda.Events.ZeldaEventManager.GetTriggerNameExtension">
            <summary>
            Helper-method that gets an unique string that can be used
            to extend an <see cref="T:Atom.Events.EventTrigger"/>'s name.
            </summary>
            <returns>
            A new unique string.
            </returns>
        </member>
        <member name="M:Zelda.Events.ZeldaEventManager.GetTriggers``1(Zelda.Entities.PlayerEntity,System.Object)">
            <summary>
            Gets all related TileAreaEventTriggers of type <typeparamref name="T"/> for the given Object.
            </summary>
            <typeparam name="T">The type of triggers to query.</typeparam>
            <param name="player">
            The related object.
            </param>
            <param name="source">
            The source of execution.
            </param>
            <returns>
            The triggers that would trigger.
            </returns>
        </member>
        <member name="M:Zelda.Events.ZeldaEventManager.Setup(Zelda.IZeldaServiceProvider)">
            <summary>
            Setups this ZeldaEventManager and all events/triggers it contains.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Events.ZeldaEventManager.ShouldSaveEvent(Atom.Events.Event)">
            <summary>
            Receives a value that indicates whether the given Event should be saved.
            </summary>
            <param name="e">The Event to save.</param>
            <returns>true if the Event should be saved; otherwise false.</returns>
        </member>
        <member name="M:Zelda.Events.ZeldaEventManager.ShouldSaveTrigger(Atom.Events.EventTrigger)">
            <summary>
            Receives a value that indicates whether the given EventTrigger should be saved.
            </summary>
            <param name="trigger">The EventTrigger to save.</param>
            <returns>true if the EventTrigger should be saved; otherwise false.</returns>
        </member>
        <member name="F:Zelda.Events.ZeldaEventManager.scene">
            <summary>
            The scene this ZeldaEventManager is part of.
            </summary>
        </member>
        <member name="F:Zelda.Events.ZeldaEventManager.eventIdCreator">
            <summary>
            This field is used to create unique Event name extensions.
            </summary>
        </member>
        <member name="F:Zelda.Events.ZeldaEventManager.triggerIdCreator">
            <summary>
            This field is used to create unique EventTrigger name extensions.
            </summary>
        </member>
        <member name="T:Zelda.Events.ZeldaTileAreaEventTrigger">
            <summary>
             Represents a <see cref="T:Atom.Events.TileAreaEventTrigger"/> that provides additional support for use in the Zelda game.
            </summary>
        </member>
        <member name="P:Zelda.Events.ZeldaTileAreaEventTrigger.EventManager">
            <summary>
            Gets the <see cref="T:Zelda.Events.ZeldaEventManager"/> that manages this ZeldaTileAreaEventTrigger.
            </summary>
        </member>
        <member name="P:Zelda.Events.ZeldaTileAreaEventTrigger.Scene">
            <summary>
            Gets the <see cref="T:Zelda.ZeldaScene"/> that owns the <see cref="T:Zelda.Events.ZeldaEventManager"/>
            that manages this ZeldaTileAreaEventTrigger.
            </summary>
        </member>
        <member name="T:Zelda.Factions.Design.FactionEditor">
            <summary>
            Implements an ObjectSelectionEditor that provides a mechanism
            that allows the user to select a Faction.
            </summary>
        </member>
        <member name="M:Zelda.Factions.Design.FactionEditor.GetSelectableItems">
            <summary>
            Gets the types of the objects that can be created by this FactionEditor.
            </summary>
            <returns>
            The list of types.
            </returns>
        </member>
        <member name="T:Zelda.Factions.Faction">
            <summary>
            Represents an ingame faction, similiar to the ones in World of Warcraft.
            This class can't be inherited.
            </summary>
            <remarks>
            <para>
            The player has a specified reputation towards each Faction.
            This reputation is represented by a simple integer, called the reputation value.
            </para>
            <para>
            The following list shows what reputation value represents
            what <see cref="T:Zelda.Factions.ReputationLevel"/>.
            <code>
               Exalted      42000 to     ~
               Revered      21000 to 42000
               Honored       9000 to 21000
               Friendly      3000 to  9000
               Neutral          0 to  3000
               Unfriendly   -3000 to     0
               Hostile      -6000 to -3000
               Hated           -~ to -6000
            </code>
            </para>
            <para>
            The player may gain reputation by completing quests,
            using/turning-in specific items or killing monsters.
            </para>
            </remarks>
        </member>
        <member name="P:Zelda.Factions.Faction.Name">
            <summary>
            Gets the name that uniquely identifies this Faction.
            </summary>
        </member>
        <member name="P:Zelda.Factions.Faction.LocalizedName">
            <summary>
            Gets the localized name of this Faction.
            </summary>
        </member>
        <member name="P:Zelda.Factions.Faction.LocalizedDescription">
            <summary>
            Gets the localized description of this Faction.
            </summary>
        </member>
        <member name="P:Zelda.Factions.Faction.InitialReputation">
            <summary>
            Gets the initial reputation the player gets towards
            this Faction when he first discovers it.
            </summary>
        </member>
        <member name="M:Zelda.Factions.Faction.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the Faction class.
            </summary>
            <param name="name">
            The name that uniquely identifies the new Faction.
            </param>
            <param name="localizedDescription">
            The localized description of the new Faction.
            </param>
            <param name="initialReputation">
            The initial reputation the player gets towards the new Faction
            when he first discovers it.
            </param>
        </member>
        <member name="M:Zelda.Factions.Faction.GetReputationLevel(System.Int32)">
            <summary>
            Gets the <see cref="T:Zelda.Factions.ReputationLevel"/> towards a Faction
            given a <paramref name="reputation"/> value.
            </summary>
            <param name="reputation">
            The reputation value.
            </param>
            <returns>
            The <see cref="T:Zelda.Factions.ReputationLevel"/> that corresponds to
            the given <paramref name="reputation"/> value.
            </returns>
        </member>
        <member name="M:Zelda.Factions.Faction.GetReputationValues(Zelda.Factions.ReputationLevel,System.Int32@,System.Int32@)">
            <summary>
            Gets the reputation start and end values of the given <see cref="T:Zelda.Factions.ReputationLevel"/>.
            </summary>
            <param name="level">The input ReputationLevel.</param>
            <param name="startValue">
            Will contain the reputation value at which the given ReputationLevel starts.
            </param>
            <param name="endValue">
            Will contain the reputation value at which the given ReputationLevel ends.
            </param>
        </member>
        <member name="M:Zelda.Factions.Faction.ToString">
            <summary>
            Returns a human-readable string representation
            of this <see cref="T:Zelda.Factions.Faction"/>.
            </summary>
            <returns>
            A human-readable string representation of this <see cref="T:Zelda.Factions.Faction"/>.
            </returns>
        </member>
        <member name="F:Zelda.Factions.Faction._name">
            <summary>
            The storage field of the <see cref="P:Zelda.Factions.Faction.Name"/> property.
            </summary>
        </member>
        <member name="F:Zelda.Factions.Faction._localizedName">
            <summary>
            The storage field of the <see cref="P:Zelda.Factions.Faction.LocalizedName"/> property.
            </summary>
        </member>
        <member name="F:Zelda.Factions.Faction._localizedDescription">
            <summary>
            The storage field of the <see cref="P:Zelda.Factions.Faction.LocalizedDescription"/> property.
            </summary>
        </member>
        <member name="F:Zelda.Factions.Faction._initialReputation">
            <summary>
            The initial reputation the player gets towards this Faction
            when he first discovers it.
            </summary>
        </member>
        <member name="T:Zelda.Factions.FactionList">
            <summary>
            Provides static access to all <see cref="T:Zelda.Factions.Faction"/>s
            in the game.
            </summary>
        </member>
        <member name="P:Zelda.Factions.FactionList.Known">
            <summary>
            Gets an enumeration that contains all known <see cref="T:Zelda.Factions.Faction"/>s.
            </summary>
        </member>
        <member name="M:Zelda.Factions.FactionList.Get(System.String)">
            <summary>
            Tries to get the <see cref="T:Zelda.Factions.Faction"/> with the given <paramref name="name"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="name"/> is null.
            </exception>
            <param name="name">
            The name that uniquely identifies the Faction to get.
            </param>
            <returns>
            The requested Faction;
            or null if there exists no such Faction.
            </returns>
        </member>
        <member name="F:Zelda.Factions.FactionList.factions">
            <summary>
            Stores all <see cref="T:Zelda.Factions.Faction"/>s of the Zelda game.
            </summary>
        </member>
        <member name="T:Zelda.Factions.FactionState">
            <summary>
            Descripes the state of the player towards a specific <see cref="P:Zelda.Factions.FactionState.Faction"/>.
            This class can't be inherited.
            </summary>
        </member>
        <member name="E:Zelda.Factions.FactionState.ReputationLevelChanged">
            <summary>
            Fired when the <see cref="P:Zelda.Factions.FactionState.ReputationLevel"/> encapsulated by
            this FactionState changes.
            </summary>
            <remarks>
            Only fired when it has changed while adding reputation using <see cref="M:Zelda.Factions.FactionState.AddReputation(System.Int32)"/>.
            </remarks>
        </member>
        <member name="P:Zelda.Factions.FactionState.Faction">
            <summary>
            Gets the <see cref="P:Zelda.Factions.FactionState.Faction"/> this FactionState is related to.
            </summary>
        </member>
        <member name="P:Zelda.Factions.FactionState.Reputation">
            <summary>
            Gets the reputation towards the <see cref="P:Zelda.Factions.FactionState.Faction"/>.
            </summary>
        </member>
        <member name="P:Zelda.Factions.FactionState.ReputationLevel">
            <summary>
            Gets the current <see cref="P:Zelda.Factions.FactionState.ReputationLevel"/> towards the <see cref="P:Zelda.Factions.FactionState.Faction"/>.
            </summary>
        </member>
        <member name="M:Zelda.Factions.FactionState.#ctor(Zelda.Factions.Faction)">
            <summary>
            Initializes a new instance of the FactionState class.
            </summary>
            <param name="faction">
            The Faction the new FactionState is related to.
            </param>
        </member>
        <member name="M:Zelda.Factions.FactionState.AddReputation(System.Int32)">
            <summary>
            Adds the given value to the reputation value
            encapsulated by this FactionState.
            </summary>
            <param name="reputationValue">
            The reputation value to add.
            </param>
        </member>
        <member name="M:Zelda.Factions.FactionState.SerializeState(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the current state of this FactionState.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Factions.FactionState.DeserializeState(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the current state of this FactionState.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Factions.FactionState.faction">
            <summary>
            The related Faction.
            </summary>
        </member>
        <member name="F:Zelda.Factions.FactionState.reputation">
            <summary>
            The reputation towards the <see cref="P:Zelda.Factions.FactionState.Faction"/>.
            </summary>
        </member>
        <member name="T:Zelda.Factions.FactionStates">
            <summary>
            Enumerates the <see cref="T:Zelda.Factions.FactionState"/>s of the PlayerEntity.
            This class can't be inherited.
            </summary>
        </member>
        <member name="E:Zelda.Factions.FactionStates.ReputationLevelChanged">
            <summary>
            Invoked when the <see cref="T:Zelda.Factions.ReputationLevel"/> of one of the <see cref="T:Zelda.Factions.FactionState"/>s has changed.
            </summary>
        </member>
        <member name="P:Zelda.Factions.FactionStates.KnownStates">
            <summary>
            Gets the states of the factions that are known by the player.
            </summary>
        </member>
        <member name="M:Zelda.Factions.FactionStates.#ctor">
            <summary>
            Initializes a new instance of the FactionStates class.
            </summary>
        </member>
        <member name="M:Zelda.Factions.FactionStates.GetState(System.String)">
            <summary>
            Gets the <see cref="T:Zelda.Factions.FactionState"/> of the <see cref="T:Zelda.Factions.Faction"/> that has the given <paramref name="factionName"/>.
            </summary>
            <param name="factionName">
            The name that uniquely identifies the Faction whose FactionState to get.
            </param>
            <returns>
            The requested FactionState;
            or null if there exists no such <see cref="T:Zelda.Factions.Faction"/>.
            </returns>
        </member>
        <member name="M:Zelda.Factions.FactionStates.GetState(Zelda.Factions.Faction)">
            <summary>
            Gets the <see cref="T:Zelda.Factions.FactionState"/> of the given <see cref="T:Zelda.Factions.Faction"/>.
            </summary>
            <param name="faction">
            The Faction whose FactionState to get.
            </param>
            <returns>
            The requested FactionState;
            or null if there exists no such <see cref="T:Zelda.Factions.Faction"/>.
            </returns>
        </member>
        <member name="M:Zelda.Factions.FactionStates.GetReputationLevelTowards(Zelda.Factions.Faction)">
            <summary>
            Gets the ReputationLevel towards the given Faction.
            </summary>
            <param name="faction">
            The Faction whose ReputationLevel to get.
            </param>
            <returns>
            The ReputationLevel towards the given Faction.
            </returns>
        </member>
        <member name="M:Zelda.Factions.FactionStates.SerializeState(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the current state of this IStateSaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Factions.FactionStates.DeserializeState(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the current state of this IStateSaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Factions.FactionStates.AddState(Zelda.Factions.FactionState)">
            <summary>
            Helper method that adds the given <see cref="T:Zelda.Factions.FactionState"/>
            to this FactionStates instance.
            </summary>
            <param name="state">
            The FactionState to add.
            </param>
        </member>
        <member name="M:Zelda.Factions.FactionStates.OnReputationLevelChanged(System.Object,Zelda.Factions.ReputationLevelChangedEventArgs)">
            <summary>
            Gets invoked when the <see cref="T:Zelda.Factions.ReputationLevel"/> of one of the <see cref="T:Zelda.Factions.FactionState"/>s has changed.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The <see cref="T:Zelda.Factions.ReputationLevelChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="F:Zelda.Factions.FactionStates.onReputationLevelChanged">
            <summary>
            The EventHandler that gets invoked when the <see cref="T:Zelda.Factions.ReputationLevel"/> of one of the <see cref="T:Zelda.Factions.FactionState"/>s has changed.
            </summary>
        </member>
        <member name="F:Zelda.Factions.FactionStates.states">
            <summary>
            Dictionary that maps the name of a <see cref="T:Zelda.Factions.Faction"/> onto its <see cref="T:Zelda.Factions.FactionState"/>.
            </summary>
        </member>
        <member name="T:Zelda.Factions.ReputationLevel">
            <summary>
            Enumerates the different levels on the reputation table of a faction.
            </summary>
            <remarks>
            This enumeration may not be changed as the exact intager values of it are used.
            The possible reputation levels are set into stone for now. (more than enough anyway)
            </remarks>
        </member>
        <member name="F:Zelda.Factions.ReputationLevel.None">
            <summary>
            Represents no specific reputation level.
            </summary>
        </member>
        <member name="F:Zelda.Factions.ReputationLevel.Hated">
            <summary>
            The lowest possible reputation level.
            </summary>
            <remarks>
            The player won't get any quests from a hated Faction.
            He must build up his reputation somewhere else.
            </remarks>
        </member>
        <member name="F:Zelda.Factions.ReputationLevel.Hostile">
            <summary>
            The second lowest possible reputation level.
            </summary>
            <remarks>
            The player will only get a few quests from a hostile Faction.
            He must build up his reputation mainly somewhere else.
            </remarks>
        </member>
        <member name="F:Zelda.Factions.ReputationLevel.Unfriendly">
            <summary>
            The level below Neutral.
            </summary>
        </member>
        <member name="F:Zelda.Factions.ReputationLevel.Neutral">
            <summary>
            The default reputation level of most factions.
            </summary>
        </member>
        <member name="F:Zelda.Factions.ReputationLevel.Friendly">
            <summary>
            The level above Neutral. Provides additional quests.
            </summary>
        </member>
        <member name="F:Zelda.Factions.ReputationLevel.Honored">
            <summary>
            The level above Friendly. Provides additional quests.
            </summary>
        </member>
        <member name="F:Zelda.Factions.ReputationLevel.Revered">
            <summary>
            The second highest reputation level.
            </summary>
        </member>
        <member name="F:Zelda.Factions.ReputationLevel.Exalted">
            <summary>
            The highest reputation level.
            </summary>
            <remarks>
            The exalted level is pretty hard to archive,
            but gives the ultimate rewards of the faction.
            </remarks>
        </member>
        <member name="T:Zelda.Factions.ReputationLevelChangedEventArgs">
            <summary>
            Defines the EventArgs used by the <see cref="E:Zelda.Factions.FactionState.ReputationLevelChanged"/> event.
            This class can't be inherited.
            </summary>
        </member>
        <member name="P:Zelda.Factions.ReputationLevelChangedEventArgs.Faction">
            <summary>
            Gets the <see cref="P:Zelda.Factions.ReputationLevelChangedEventArgs.Faction"/> related to this ReputationLevelChangedEventArgs.
            </summary>
        </member>
        <member name="P:Zelda.Factions.ReputationLevelChangedEventArgs.NewLevel">
            <summary>
            Gets the old <see cref="T:Zelda.Factions.ReputationLevel"/> -before- the event has occured.
            </summary>
        </member>
        <member name="P:Zelda.Factions.ReputationLevelChangedEventArgs.OldLevel">
            <summary>
            Gets the new <see cref="T:Zelda.Factions.ReputationLevel"/> -after- the event has occured.
            </summary>
        </member>
        <member name="M:Zelda.Factions.ReputationLevelChangedEventArgs.#ctor(Zelda.Factions.Faction,Zelda.Factions.ReputationLevel,Zelda.Factions.ReputationLevel)">
            <summary>
            Initializes a new instance of the ReputationLevelChangedEventArgs class.
            </summary>
            <param name="faction">
            The <see cref="P:Zelda.Factions.ReputationLevelChangedEventArgs.Faction"/> related to the new ReputationLevelChangedEventArgs.
            </param>
            <param name="oldLevel">
            The old <see cref="T:Zelda.Factions.ReputationLevel"/> -before- the event has occured.
            </param>
            <param name="newLevel">
            The new <see cref="T:Zelda.Factions.ReputationLevel"/> -after- the event has occured.
            </param>
        </member>
        <member name="T:Zelda.FlyingText">
            <summary>
            A 'FlyingText' is a text that is displayed ingame, 
            above all other game objects, but below the the User Interface.
            This class can't be inherited.
            </summary>
            <remarks>
            This includes things like Damage Done, Damage Taken 
            and Information Texts (such as the 'Level Up' text).
            </remarks>
        </member>
        <member name="F:Zelda.FlyingText.Color">
            <summary>
            The color of the FlyingText.
            </summary>
        </member>
        <member name="F:Zelda.FlyingText.Font">
            <summary>
            The font to use for rendering.
            </summary>
        </member>
        <member name="F:Zelda.FlyingText.Text">
            <summary>
            The text that is displayed by the FlyingText.
            </summary>
        </member>
        <member name="F:Zelda.FlyingText.Time">
            <summary>
            The initial time the <see cref="T:Zelda.FlyingText"/> last.
            </summary>
        </member>
        <member name="F:Zelda.FlyingText.Velocity">
            <summary>
            The movement direction of the FlyingText. This should be a normalized vector.
            </summary>
        </member>
        <member name="F:Zelda.FlyingText.Position">
            <summary>
            The position of the <see cref="T:Zelda.FlyingText"/>.
            </summary>
        </member>
        <member name="F:Zelda.FlyingText.Scale">
            <summary>
            The scaling factor of the text.
            </summary>
        </member>
        <member name="P:Zelda.FlyingText.TimeLeft">
            <summary>
            Gets the time the <see cref="T:Zelda.FlyingText"/> will last.
            </summary>
        </member>
        <member name="M:Zelda.FlyingText.ResetTime">
            <summary>
            Resets the time left value to the initial time value.
            </summary>
        </member>
        <member name="M:Zelda.FlyingText.Update(System.Single)">
            <summary>
            Updates this <see cref="T:Zelda.FlyingText"/>.
            </summary>
            <param name="frameTime">
            The time the last frame took (in seconds).
            </param>
        </member>
        <member name="M:Zelda.FlyingText.Draw(Zelda.ZeldaDrawContext)">
            <summary>
            Draws the <see cref="T:Zelda.FlyingText"/> object.
            </summary>
            <param name="drawContext">
            The current ZeldaDrawContext.
            </param>
        </member>
        <member name="F:Zelda.FlyingText.Manager">
            <summary>
            Reference to the <see cref="T:Zelda.FlyingTextManager"/> that manages the <see cref="T:Zelda.FlyingText"/>.
            </summary>
        </member>
        <member name="F:Zelda.FlyingText.PoolNode">
            <summary>
            The pool node of the FlyingText.
            </summary>
        </member>
        <member name="F:Zelda.FlyingText.timeLeft">
            <summary> 
            Specifies the time (in seconds) this <see cref="T:Zelda.FlyingText"/> will last.
            </summary>
        </member>
        <member name="T:Zelda.FlyingTextManager">
            <summary>
            Manages the creation, drawing and updating of <see cref="T:Zelda.FlyingText"/> instances.
            This class can't be inherited.
            </summary>
        </member>
        <member name="P:Zelda.FlyingTextManager.IsVisible">
            <summary>
            Gets or sets a value indicating whether this FlyingTextManager is actually
            drawing anything.
            </summary>
            <value>The default value is true.</value>
        </member>
        <member name="M:Zelda.FlyingTextManager.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.FlyingTextManager"/> class.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.FlyingTextManager.LoadContent">
            <summary>
            Loads the content required by this FlyingTextManager.
            </summary>
        </member>
        <member name="M:Zelda.FlyingTextManager.UnloadContent">
            <summary>
            Unloads all used content.
            </summary>
        </member>
        <member name="M:Zelda.FlyingTextManager.Create">
            <summary>
            Returns an uninitialized <see cref="T:Zelda.FlyingText"/> object that is ready to be used.
            </summary>
            <returns>
            The FlyingText.
            </returns>
        </member>
        <member name="M:Zelda.FlyingTextManager.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates the <see cref="T:Zelda.FlyingTextManager"/> and all active <see cref="T:Zelda.FlyingText"/> instances.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.FlyingTextManager.Draw(Zelda.ZeldaDrawContext)">
            <summary>
            Draws all active <see cref="T:Zelda.FlyingText"/> instances.
            </summary>
            <param name="drawContext">
            The current ZeldaDrawContext.
            </param>
        </member>
        <member name="M:Zelda.FlyingTextManager.Return(Zelda.FlyingText)">
            <summary>
            Returns the given <see cref="T:Zelda.FlyingText"/> to the pool,
            marking it non-active.
            </summary>
            <param name="text">
            The FlyingText instance to return.
            </param>
        </member>
        <member name="M:Zelda.FlyingTextManager.Clear">
            <summary>
            Removes all FlyingText instances from this FlyingTextManager.
            </summary>
        </member>
        <member name="M:Zelda.FlyingTextManager.FireDefault(Atom.Math.Vector2,Microsoft.Xna.Framework.Color,System.String)">
            <summary>
            Fires a FlyingText with default settings.
            </summary>
            <param name="position">The position to spawn the FlyingText at.</param>
            <param name="color">The color of the FlyingText.</param>
            <param name="text">The text string of the FlyingText.</param>
        </member>
        <member name="M:Zelda.FlyingTextManager.FireDefault(Atom.Math.Vector2,Microsoft.Xna.Framework.Color,System.String,Atom.Xna.Fonts.IFont,System.Single)">
            <summary>
            Fires a FlyingText with default settings.
            </summary>
            <param name="position">The position to spawn the FlyingText at.</param>
            <param name="color">The color of the FlyingText.</param>
            <param name="text">The text string of the FlyingText.</param>
            <param name="font">The font of the FlyingText.</param>
            <param name="scale">The scaling factor of the FlyingText.</param>
        </member>
        <member name="M:Zelda.FlyingTextManager.FireHorizontal(Atom.Math.Vector2,Microsoft.Xna.Framework.Color,System.String,Atom.Xna.Fonts.IFont)">
            <summary>
            Fires a FlyingText with default settings.
            </summary>
            <param name="position">The position to spawn the FlyingText at.</param>
            <param name="color">The color of the FlyingText.</param>
            <param name="text">The text string of the FlyingText.</param>
            <param name="font">The font to use.</param>
        </member>
        <member name="M:Zelda.FlyingTextManager.FireVertical(Atom.Math.Vector2,Microsoft.Xna.Framework.Color,System.String,Atom.Xna.Fonts.IFont,System.Single,Atom.Math.Vector2)">
            <summary>
            Fires a FlyingText with default settings.
            </summary>
            <param name="position">The position to spawn the FlyingText at.</param>
            <param name="color">The color of the FlyingText.</param>
            <param name="text">The text string of the FlyingText.</param>
            <param name="font">The font of the FlyingText.</param>
            <param name="scale">The scaling factor.</param>
            <param name="speed">The traveling speed.</param>
            <returns>The FlyingText that has been fired.</returns>
        </member>
        <member name="M:Zelda.FlyingTextManager.FireGainedExperience(Atom.Math.Vector2,System.Int64)">
            <summary>
            Fires a <see cref="T:Zelda.FlyingText"/>.
            </summary>
            <param name="position">The position to spawn the FlyingText at.</param>
            <param name="amount">The input value.</param>
        </member>
        <member name="M:Zelda.FlyingTextManager.FireGameSaved(Atom.Math.Vector2)">
            <summary>
            Fires a <see cref="T:Zelda.FlyingText"/>.
            </summary>
            <param name="position">The position to spawn the FlyingText at.</param>
        </member>
        <member name="M:Zelda.FlyingTextManager.FireScreenshotTaken(Atom.Math.Vector2,System.String)">
            <summary>
            Fires a <see cref="T:Zelda.FlyingText"/>.
            </summary>
            <param name="position">The position to spawn the FlyingText at.</param>
            <param name="text">The text to show.</param>
        </member>
        <member name="M:Zelda.FlyingTextManager.FireLevelUp(Atom.Math.Vector2)">
            <summary>
            Fires a <see cref="T:Zelda.FlyingText"/>.
            </summary>
            <param name="position">The position to spawn the FlyingText at.</param>
        </member>
        <member name="M:Zelda.FlyingTextManager.FireRestoredLife(Atom.Math.Vector2,System.Int32)">
            <summary>
            Fires a <see cref="T:Zelda.FlyingText"/>.  
            </summary>
            <param name="position">The position to spawn the FlyingText at.</param>
            <param name="amount">The input value.</param>
        </member>
        <member name="M:Zelda.FlyingTextManager.FireRestoredLifeCrit(Atom.Math.Vector2,System.Int32)">
            <summary>
            Fires a <see cref="T:Zelda.FlyingText"/>.  
            </summary>
            <param name="position">The position to spawn the FlyingText at.</param>
            <param name="amount">The input value.</param>
        </member>
        <member name="M:Zelda.FlyingTextManager.FireRestoredMana(Atom.Math.Vector2,System.Int32)">
            <summary>
            Fires a <see cref="T:Zelda.FlyingText"/>.  
            </summary>
            <param name="position">The position to spawn the FlyingText at.</param>
            <param name="amount">The input value.</param>
        </member>
        <member name="M:Zelda.FlyingTextManager.FireAttackOnPlayerMissed(Atom.Math.Vector2)">
            <summary>
            Fires a <see cref="T:Zelda.FlyingText"/>.  
            </summary>
            <param name="position">The position to spawn the FlyingText at.</param>
        </member>
        <member name="M:Zelda.FlyingTextManager.FireAttackOnPlayerHit(Atom.Math.Vector2,System.Int32,System.Boolean)">
            <summary>
            Fires a <see cref="T:Zelda.FlyingText"/>.  
            </summary>
            <param name="position">The position to spawn the FlyingText at.</param>
            <param name="amount">The input value.</param>
            <param name="wasBlocked">States whether the attack was mitigated.</param>
        </member>
        <member name="M:Zelda.FlyingTextManager.FireAttackOnPlayerDodged(Atom.Math.Vector2)">
            <summary>
            Fires a <see cref="T:Zelda.FlyingText"/>.  
            </summary>
            <param name="position">The position to spawn the FlyingText at.</param>
        </member>
        <member name="M:Zelda.FlyingTextManager.FireAttackOnPlayerParried(Atom.Math.Vector2)">
            <summary>
            Fires a <see cref="T:Zelda.FlyingText"/>.  
            </summary>
            <param name="position">The position to spawn the FlyingText at.</param>
        </member>
        <member name="M:Zelda.FlyingTextManager.FireAttackOnPlayerResisted(Atom.Math.Vector2)">
            <summary>
            Fires a <see cref="T:Zelda.FlyingText"/>.  
            </summary>
            <param name="position">The position to spawn the FlyingText at.</param>
        </member>
        <member name="M:Zelda.FlyingTextManager.FireAttackOnPlayerPartiallyResisted(Atom.Math.Vector2,System.Int32)">
            <summary>
            Fires a <see cref="T:Zelda.FlyingText"/>.  
            </summary>
            <param name="position">The position to spawn the FlyingText at.</param>
            <param name="amount">The input value.</param>
        </member>
        <member name="M:Zelda.FlyingTextManager.FireAttackOnPlayerCrit(Atom.Math.Vector2,System.Int32,System.Boolean)">
            <summary>
            Fires a <see cref="T:Zelda.FlyingText"/>.  
            </summary>
            <param name="position">The position to spawn the FlyingText at.</param>
            <param name="amount">The input value.</param>
            <param name="wasBlocked">States whether the attack was mitigated.</param>
        </member>
        <member name="M:Zelda.FlyingTextManager.FireAttackOnEnemyMissed(Atom.Math.Vector2)">
            <summary>
            Fires a <see cref="T:Zelda.FlyingText"/>.  
            </summary>
            <param name="position">The position to spawn the FlyingText at.</param>
        </member>
        <member name="M:Zelda.FlyingTextManager.FireAttackOnEnemyHit(Atom.Math.Vector2,System.Int32)">
            <summary>
            Fires a <see cref="T:Zelda.FlyingText"/>.  
            </summary>
            <param name="position">The position to spawn the FlyingText at.</param>
            <param name="amount">The input value.</param>
        </member>
        <member name="M:Zelda.FlyingTextManager.FireAttackOnEnemyDodged(Atom.Math.Vector2)">
            <summary>
            Fires a <see cref="T:Zelda.FlyingText"/>.  
            </summary>
            <param name="position">The position to spawn the FlyingText at.</param>
        </member>
        <member name="M:Zelda.FlyingTextManager.FireAttackOnEnemyParried(Atom.Math.Vector2)">
            <summary>
            Fires a <see cref="T:Zelda.FlyingText"/>.  
            </summary>
            <param name="position">The position to spawn the FlyingText at.</param>
        </member>
        <member name="M:Zelda.FlyingTextManager.FireAttackOnEnemyResisted(Atom.Math.Vector2)">
            <summary>
            Fires a <see cref="T:Zelda.FlyingText"/>.  
            </summary>
            <param name="position">The position to spawn the FlyingText at.</param>
        </member>
        <member name="M:Zelda.FlyingTextManager.FireAttackOnEnemyPartiallyResisted(Atom.Math.Vector2,System.Int32)">
            <summary>
            Fires a <see cref="T:Zelda.FlyingText"/>.  
            </summary>
            <param name="position">The position to spawn the FlyingText at.</param>
            <param name="amount">The input value.</param>
        </member>
        <member name="M:Zelda.FlyingTextManager.FireAttackOnEnemyCrit(Atom.Math.Vector2,System.Int32)">
            <summary>
            Fires a <see cref="T:Zelda.FlyingText"/>.  
            </summary>
            <param name="position">The position to spawn the FlyingText at.</param>
            <param name="amount">The input value.</param>
        </member>
        <member name="M:Zelda.FlyingTextManager.FireQuestAccepted(System.String,Atom.Math.Vector2)">
            <summary>
            Fires a <see cref="T:Zelda.FlyingText"/>.  
            </summary>
            <param name="questName">The name of the quest.</param>
            <param name="position">The position to spawn the FlyingText at.</param>
        </member>
        <member name="M:Zelda.FlyingTextManager.FireQuestAccomplished(System.String,Atom.Math.Vector2)">
            <summary>
            Fires a <see cref="T:Zelda.FlyingText"/>.  
            </summary>
            <param name="questName">The name of the quest.</param>
            <param name="position">The position to spawn the FlyingText at.</param>
        </member>
        <member name="M:Zelda.FlyingTextManager.FireReputationLevelChanged(System.String,Zelda.Factions.ReputationLevel,Atom.Math.Vector2)">
            <summary>
            Fires a <see cref="T:Zelda.FlyingText"/>.  
            </summary>
            <param name="factionName">The name of the faction.</param>
            <param name="reputationLevel">The new level of reputation.</param>
            <param name="position">The position to spawn the FlyingText at.</param>
        </member>
        <member name="F:Zelda.FlyingTextManager.pool">
            <summary>
            A pool of FlyingText instances.
            </summary>
        </member>
        <member name="F:Zelda.FlyingTextManager.rand">
            <summary>
            A Random Number Generator.
            </summary>
        </member>
        <member name="F:Zelda.FlyingTextManager.defaultFont">
            <summary>
            The font resources.
            </summary>
        </member>
        <member name="F:Zelda.FlyingTextManager.fontCrit">
            <summary>
            The font resources.
            </summary>
        </member>
        <member name="F:Zelda.FlyingTextManager.smallFont">
            <summary>
            The font resources.
            </summary>
        </member>
        <member name="F:Zelda.FlyingTextManager.Culture">
            <summary>
            Identifies the culture used to convert values to strings.
            </summary>
        </member>
        <member name="F:Zelda.FlyingTextManager.VerticalDirection">
            <summary>
            Direction flying text are heading to.
            </summary>
        </member>
        <member name="F:Zelda.FlyingTextManager.StringMiss">
            <summary>
            The 'Miss' string cached for fast lockup.
            </summary>
        </member>
        <member name="F:Zelda.FlyingTextManager.StringLevelUp">
            <summary>
            The 'Level Up' string cached for fast lockup.
            </summary>
        </member>
        <member name="F:Zelda.FlyingTextManager.StringDodge">
            <summary>
            The 'Dodge' string cached for fast lockup.
            </summary>
        </member>
        <member name="F:Zelda.FlyingTextManager.StringParry">
            <summary>
            The 'Parry' string cached for fast lockup.
            </summary>
        </member>
        <member name="F:Zelda.FlyingTextManager.StringResisted">
            <summary>
            The 'Resisted' string cached for fast lockup.
            </summary>
        </member>
        <member name="F:Zelda.FlyingTextManager.StringExperience">
            <summary>
            The 'Experience' string cached for fast lockup.
            </summary>
        </member>
        <member name="T:Zelda.FogOfWarStatus">
            <summary>
            Stores the visability state of the Fog of War for a single ZeldaScene.
            This class can't be inherited.
            </summary>
            <remarks>
            The Fog of War is used to hide undiscovered places on the Mini Map.
            This is done by splitting the scene into a grid of size 32x32.
            Each cell in this boolean grid states whether the specific position
            has been uncovered by the player.
            </remarks>
        </member>
        <member name="P:Zelda.FogOfWarStatus.Item(System.Int32,System.Int32)">
            <summary>
            Gets the visability state at the given position (in FoW-space).
            </summary>
            <param name="x">
            The position on the x-axis (in FoW-space).
            </param>
            <param name="y">
            The position on the y-axis (in FoW-space).
            </param>
            <returns>
            true if the player has uncovered the area at the given position;
            otherwise false.
            </returns>
        </member>
        <member name="P:Zelda.FogOfWarStatus.Size">
            <summary>
            Gets the size of the visability storage used by this FogOfWarStatus.
            </summary>
        </member>
        <member name="M:Zelda.FogOfWarStatus.Uncover(Atom.Math.Vector2,Zelda.ZeldaScene)">
            <summary>
            Uncovers the fog of war at the given <paramref name="position"/>.
            </summary>
            <param name="position">
            The position in world-space.
            </param>
            <param name="scene">
            The related ZeldaScene.
            </param>
        </member>
        <member name="M:Zelda.FogOfWarStatus.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.FogOfWarStatus.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.FogOfWarStatus.state">
            <summary>
            The array of visability flags.
            </summary>
        </member>
        <member name="T:Zelda.Graphics.AspectRatio">
            <summary>
            Enumerates the various aspect ratios that the game supports.
            </summary>
        </member>
        <member name="F:Zelda.Graphics.AspectRatio.Normal">
            <summary>
            The default aspect ratio of the game; best suited for window-play.
            </summary>
            <value>
            1.5
            </value>
        </member>
        <member name="F:Zelda.Graphics.AspectRatio.Wide16to9">
            <summary>
            16:9 aspect ratio; best used for fullscreen play on a 16:9 monitor.
            </summary>
            <value>
            1.7*
            </value>
        </member>
        <member name="F:Zelda.Graphics.AspectRatio.Wide16to10">
            <summary>
            16:9 aspect ratio; best used for fullscreen play on a 16:9 monitor.
            </summary>
            <value>
            1.6*
            </value>
        </member>
        <member name="T:Zelda.Graphics.BloomDrawingPipeline">
            <summary>
            Implements the default <see cref="T:Zelda.Graphics.IDrawingPipeline"/> that uses a bloom post-process effect.
            </summary>
        </member>
        <member name="P:Zelda.Graphics.BloomDrawingPipeline.Settings">
            <summary>
            Gets or sets the BloomSettings used by the BloomDrawingPipeline.
            </summary>
        </member>
        <member name="P:Zelda.Graphics.BloomDrawingPipeline.IsSupported">
            <summary>
            Gets a value indicating whether this BloomDrawingPipeline is supported
            on the current hardware.
            </summary>
        </member>
        <member name="P:Zelda.Graphics.BloomDrawingPipeline.IsLoaded">
            <summary>
            Gets a value indicating whether the bloom effect has been loaden.
            </summary>
        </member>
        <member name="M:Zelda.Graphics.BloomDrawingPipeline.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the BloomDrawingPipeline class.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Graphics.BloomDrawingPipeline.InitializeFrame(Zelda.ZeldaScene,Zelda.UI.ZeldaUserInterface,Zelda.ZeldaDrawContext)">
            <summary>
            Initializes this IDrawingPipeline for drawing the next frame.
            </summary>
            <param name="scene">
            The scene to draw.
            </param>
            <param name="userInterface">
            The user interface to draw ontop of the scene.
            Allowed to be null.
            </param>
            <param name="drawContext">
            The current IDrawContext.
            </param>
        </member>
        <member name="M:Zelda.Graphics.BloomDrawingPipeline.BeginScene">
            <summary>
            Begins drawing the scene.
            </summary>
            <remarks>
            Insert drawing of custom scene object between BeginScene and EndScene.
            </remarks>
        </member>
        <member name="M:Zelda.Graphics.BloomDrawingPipeline.EndScene">
            <summary>
            Ends drawing the scene.
            </summary>
            <remarks>
            Should be followed by BeginUserInterface.
            </remarks>
        </member>
        <member name="M:Zelda.Graphics.BloomDrawingPipeline.EnsureResolveTexture">
            <summary>
            Creates the Resolve Texture if it hasn't been created yet.
            </summary>
        </member>
        <member name="M:Zelda.Graphics.BloomDrawingPipeline.BeginUserInterface">
            <summary>
            Begins drawing the user interface.
            </summary>
            <remarks>
            Insert drawing of custom UI bjects between BeginUserInterface and EndDrawUserInterface.
            </remarks>
        </member>
        <member name="M:Zelda.Graphics.BloomDrawingPipeline.EndUserInterface">
            <summary>
            Ends drawing the user interface.
            </summary>
        </member>
        <member name="M:Zelda.Graphics.BloomDrawingPipeline.Load">
            <summary>
            Loads the data required by this IDrawingPipeline.
            </summary>
        </member>
        <member name="M:Zelda.Graphics.BloomDrawingPipeline.Unload">
            <summary>
            Unloads the data required by this IDrawingPipeline.
            </summary>
        </member>
        <member name="F:Zelda.Graphics.BloomDrawingPipeline.scene">
            <summary>
            The scene that is currently drawn.
            </summary>
        </member>
        <member name="F:Zelda.Graphics.BloomDrawingPipeline.userInterface">
            <summary>
            The UI that is currently drawn.
            </summary>
        </member>
        <member name="F:Zelda.Graphics.BloomDrawingPipeline.drawContext">
            <summary>
            The current drawing context.
            </summary>
        </member>
        <member name="F:Zelda.Graphics.BloomDrawingPipeline.rescaler">
            <summary>
            Is responsible for scaling the game that has been drawn at a native resolution
            to fit the full game window.
            </summary>
        </member>
        <member name="F:Zelda.Graphics.BloomDrawingPipeline.sceneDrawer">
            <summary>
            Is responsible for drawing ZeldaScenes.
            </summary>
        </member>
        <member name="F:Zelda.Graphics.BloomDrawingPipeline.serviceProvider">
            <summary>
            Provides fast access to game-related services.
            </summary>
        </member>
        <member name="F:Zelda.Graphics.BloomDrawingPipeline.deviceService">
            <summary>
            Provides access to the xna GraphicsDevice that is required for drawing.
            </summary>
        </member>
        <member name="F:Zelda.Graphics.BloomDrawingPipeline.graphicsDevice">
            <summary>
            The xna GraphicsDevice that is required for drawing.
            </summary>
        </member>
        <member name="F:Zelda.Graphics.BloomDrawingPipeline.bloom">
            <summary>
            The bloom effect that is applied to the drawn scene.
            </summary>
        </member>
        <member name="T:Zelda.Graphics.Design.SpriteAssetEditor">
            <summary>
            Defines an <see cref="T:System.Drawing.Design.UITypeEditor"/> that loads <see cref="T:Atom.Xna.ISpriteAsset"/>s.
            </summary>
        </member>
        <member name="M:Zelda.Graphics.Design.SpriteAssetEditor.CreateActual(Atom.Xna.ISpriteAsset)">
            <summary>
            Tries to load the sprite with the given fileName.
            </summary>
            <param name="asset">
            The asset to load.
            </param>
            <returns>
            The loaded ISprite.
            </returns>
        </member>
        <member name="T:Zelda.Graphics.Design.SpriteEditor">
            <summary>
            Defines an <see cref="T:System.Drawing.Design.UITypeEditor"/> that loads <see cref="T:Atom.Xna.ISprite"/>
            assets.
            </summary>
        </member>
        <member name="M:Zelda.Graphics.Design.SpriteEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the value of the specified object using the editor style indicated
            by the System.Drawing.Design.UITypeEditor.GetEditStyle() method.
            </summary>
            <param name="context">
            An System.ComponentModel.ITypeDescriptorContext that can be used to gain
            additional context information.
            </param>
            <param name="provider">
             An System.IServiceProvider that this editor can use to obtain services.
             </param>
            <param name="value">  
            The object to edit.
            </param>
            <returns>
            The new value of the object.
            </returns>
        </member>
        <member name="M:Zelda.Graphics.Design.SpriteEditor.BuildDialog(System.Object)">
            <summary>
            Builds the dialog that allows the user to select an ISpriteAsset.
            </summary>
            <param name="value">
            The value of the property beeing edited.
            </param>
            <returns>
            A newly created IItemSelectionDialog{ISpriteAsset}.
            </returns>
        </member>
        <member name="M:Zelda.Graphics.Design.SpriteEditor.GetSelectedAsset(System.Object,System.Collections.Generic.IEnumerable{Atom.Xna.ISpriteAsset})">
            <summary>
            Gets the ISpriteAsset the user had previously selected.
            </summary>
            <param name="value">
            The value the user had selected.
            </param>
            <param name="assets">
            The assets the user is allowed to select.
            </param>
            <returns>
            The ISpriteAsset that should be pre-selected.
            </returns>
        </member>
        <member name="M:Zelda.Graphics.Design.SpriteEditor.CreateActual(Atom.Xna.ISpriteAsset)">
            <summary>
            Tries to load the sprite with the given fileName.
            </summary>
            <param name="asset">
            The asset to load.
            </param>
            <returns>
            The loaded ISprite.
            </returns>
        </member>
        <member name="M:Zelda.Graphics.Design.SpriteEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the editor style used by the 
            System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)
            method.
            </summary>
            <param name="context">
            An System.ComponentModel.ITypeDescriptorContext that can be used to gain
            additional context information.
            </param>
            <returns>
            Returns UITypeEditorEditStyle.Modal.
            </returns>
        </member>
        <member name="T:Zelda.Graphics.Design.SpriteNameEditor">
            <summary>
            Defines an <see cref="T:System.Drawing.Design.UITypeEditor"/> that loads <see cref="T:Atom.Xna.ISprite"/>
            assets.
            </summary>
        </member>
        <member name="M:Zelda.Graphics.Design.SpriteNameEditor.CreateActual(Atom.Xna.ISpriteAsset)">
            <summary>
            Overriden to return the name of the <see cref="T:Atom.Xna.ISpriteAsset"/>.
            </summary>
            <param name="asset">
            The ISpriteAsset that has been selected by the user.
            </param>
            <returns>
            The name of the specified ISpriteAsset.
            </returns>
        </member>
        <member name="T:Zelda.Graphics.Design.TextureEditor">
            <summary>
            Defines an <see cref="T:System.Drawing.Design.UITypeEditor"/> that loads <see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D"/>s.
            This class can't be inherited.
            </summary>
        </member>
        <member name="M:Zelda.Graphics.Design.TextureEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the value of the specified object using the editor style indicated
            by the System.Drawing.Design.UITypeEditor.GetEditStyle() method.
            </summary>
            <param name="context">
            An System.ComponentModel.ITypeDescriptorContext that can be used to gain
            additional context information.
            </param>
            <param name="provider">
             An System.IServiceProvider that this editor can use to obtain services.
             </param>
            <param name="value">  
            The object to edit.
            </param>
            <returns>
            The new value of the object.
            </returns>
        </member>
        <member name="M:Zelda.Graphics.Design.TextureEditor.LoadTexture(System.String)">
            <summary>
            Tries to load the sprite with the given fileName.
            </summary>
            <param name="fileName">
            The filename that has been selected by the user.
            </param>
            <returns>
            The loaded Texture2D.
            </returns>
        </member>
        <member name="M:Zelda.Graphics.Design.TextureEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the editor style used by the 
            System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)
            method.
            </summary>
            <param name="context">
            An System.ComponentModel.ITypeDescriptorContext that can be used to gain
            additional context information.
            </param>
            <returns>
            Returns UITypeEditorEditStyle.Modal.
            </returns>
        </member>
        <member name="F:Zelda.Graphics.Design.TextureEditor.BasePath">
            <summary>
            The initial relative directory path in which texture files are assumed to be localed.
            </summary>
        </member>
        <member name="T:Zelda.Graphics.DrawingPipeline">
            <summary>
            Enumerates the <see cref="T:Zelda.Graphics.IDrawingPipeline"/>s that have been implemented.
            </summary>
        </member>
        <member name="F:Zelda.Graphics.DrawingPipeline.Normal">
            <summary>
            Represents the NormalDrawingPipeline.
            </summary>
        </member>
        <member name="F:Zelda.Graphics.DrawingPipeline.Bloom">
            <summary>
            Represents the BloomDrawingPipeline.
            </summary>
        </member>
        <member name="F:Zelda.Graphics.DrawingPipeline.HighDynamicRange">
            <summary>
            Represents the HighDynamicRangeDrawingPipeline.
            </summary>
        </member>
        <member name="T:Zelda.Graphics.IDrawingPipeline">
            <summary>
            Provides a mechanism that draws a Scene and UserInterface
            onto the screen.
            </summary>
        </member>
        <member name="P:Zelda.Graphics.IDrawingPipeline.IsSupported">
            <summary>
            Gets a value indicating whether this IDrawingPipeline on
            the current hardware.
            </summary>
        </member>
        <member name="M:Zelda.Graphics.IDrawingPipeline.InitializeFrame(Zelda.ZeldaScene,Zelda.UI.ZeldaUserInterface,Zelda.ZeldaDrawContext)">
            <summary>
            Initializes this IDrawingPipeline for drawing the next frame.
            </summary>
            <param name="scene">
            The scene to draw.
            </param>
            <param name="userInterface">
            The user interface to draw ontop of the scene.
            Allowed to be null.
            </param>
            <param name="drawContext">
            The current IDrawContext.
            </param>
        </member>
        <member name="M:Zelda.Graphics.IDrawingPipeline.BeginScene">
            <summary>
            Begins drawing the scene.
            </summary>
            <remarks>
            Insert drawing of custom scene object between BeginScene and EndScene.
            </remarks>
        </member>
        <member name="M:Zelda.Graphics.IDrawingPipeline.EndScene">
            <summary>
            Ends drawing the scene.
            </summary>
            <remarks>
            Should be followed by BeginUserInterface.
            </remarks>
        </member>
        <member name="M:Zelda.Graphics.IDrawingPipeline.BeginUserInterface">
            <summary>
            Begins drawing the user interface.
            </summary>
            <remarks>
            Insert drawing of custom UI bjects between BeginUserInterface and EndDrawUserInterface.
            </remarks>
        </member>
        <member name="M:Zelda.Graphics.IDrawingPipeline.EndUserInterface">
            <summary>
            Ends drawing the user interface.
            </summary>
        </member>
        <member name="M:Zelda.Graphics.IDrawingPipeline.Load">
            <summary>
            Loads the data required by this IDrawingPipeline.
            </summary>
        </member>
        <member name="M:Zelda.Graphics.IDrawingPipeline.Unload">
            <summary>
            Unloads the data required by this IDrawingPipeline.
            </summary>
        </member>
        <member name="T:Zelda.Graphics.IResolutionService">
            <summary>
            Provices access to the current Render and View resolutions.
            </summary>
        </member>
        <member name="P:Zelda.Graphics.IResolutionService.IsFullscreen">
            <summary>
            Gets a value indicating whether the game is currently
            running in fullscreen-mode.
            </summary>
        </member>
        <member name="P:Zelda.Graphics.IResolutionService.OutputSize">
            <summary>
            Gets the size (in pixels) in which the game
            is output at.
            </summary>
        </member>
        <member name="P:Zelda.Graphics.IResolutionService.ViewSize">
            <summary>
            Gets the size (in pixels) in which the game
            is originally rendered at.
            </summary>
            <value>
            This value is constant and
            won't change during the game.
            </value>
        </member>
        <member name="P:Zelda.Graphics.IResolutionService.IsWideAspectRatio">
            <summary>
            Gets a value indicating whether the current AspectRatio is a wide-screen ratio.
            </summary>
        </member>
        <member name="P:Zelda.Graphics.IResolutionService.AspectRatio">
            <summary>
            Gets the aspect ratio that the game uses.
            </summary>
            <value>
            This value is constant and
            won't change during the game.
            </value>
        </member>
        <member name="M:Zelda.Graphics.IResolutionService.GetAdjustedBackBufferSize(Atom.Math.Point2)">
            <summary>
            Gets the size that the backbuffer should have.
            </summary>
            <param name="originalSize">
            The original size of the backbuffer.
            </param>
            <returns>
            The adjusted backbuffer size.
            </returns>
        </member>
        <member name="M:Zelda.Graphics.IResolutionService.EnsureAspectRatioSupport(Microsoft.Xna.Framework.Graphics.GraphicsAdapter)">
            <summary>
            Ensures that the current aspect ratio is supported.
            </summary>
            <param name="adapter">
            The graphics adapter that will be used.
            </param>
        </member>
        <member name="T:Zelda.Graphics.IViewToWindowRescaler">
            <summary>
            Provides a mechanism that allows the game to draw everything at the native
            resolution; but then when presenting the result to the user it up-scaled to
            the fit the game window.
            </summary>
        </member>
        <member name="E:Zelda.Graphics.IViewToWindowRescaler.ScaleChanged">
            <summary>
            Raised when the scaling factor of this IViewToWindowRescaler has changed.
            </summary>
        </member>
        <member name="P:Zelda.Graphics.IViewToWindowRescaler.Target">
            <summary>
            Gets the target to which this IViewToWindowRescaler draws to.
            </summary>
        </member>
        <member name="M:Zelda.Graphics.IViewToWindowRescaler.Begin">
            <summary>
            Tells this IViewToWindowRescaler that the drawing operations that are 
            supposed to be scaled up to fill up full window.
            </summary>
        </member>
        <member name="M:Zelda.Graphics.IViewToWindowRescaler.End(Zelda.ZeldaDrawContext)">
            <summary>
            Tells this IViewToWindowRescaler that all drawing operations have
            been executed and that the final (possibly up-scaled) image should be drawn on the screen.
            </summary>
            <param name="drawContext">
            The current ZeldaDrawContext.
            </param>
        </member>
        <member name="T:Zelda.Graphics.NormalDrawingPipeline">
            <summary>
            Implements the default <see cref="T:Zelda.Graphics.IDrawingPipeline"/> that doens't add
            any special StatusEffects.
            </summary>
        </member>
        <member name="P:Zelda.Graphics.NormalDrawingPipeline.IsSupported">
            <summary>
            Gets a value indicating whether this DefaultDrawingPipeline on
            the current hardware.
            </summary>
        </member>
        <member name="M:Zelda.Graphics.NormalDrawingPipeline.#ctor(Zelda.Graphics.IViewToWindowRescaler,Zelda.ZeldaSceneDrawer)">
            <summary>
            Initializes a new instance of the DefaultDrawingPipeline class.
            </summary>
            <param name="rescaler">
            Is responsible for scaling the game that has been drawn at a native resolution
            to fit the full game window.
            </param>
            <param name="sceneDrawer">
            The ZeldaSceneDrawer that responsible for drawing ZeldaScenes.
            </param>
        </member>
        <member name="M:Zelda.Graphics.NormalDrawingPipeline.InitializeFrame(Zelda.ZeldaScene,Zelda.UI.ZeldaUserInterface,Zelda.ZeldaDrawContext)">
            <summary>
            Initializes this IDrawingPipeline for drawing the next frame.
            </summary>
            <param name="scene">
            The scene to draw.
            </param>
            <param name="userInterface">
            The user interface to draw ontop of the scene.
            Allowed to be null.
            </param>
            <param name="drawContext">
            The current IDrawContext.
            </param>
        </member>
        <member name="M:Zelda.Graphics.NormalDrawingPipeline.BeginScene">
            <summary>
            Begins drawing the scene.
            </summary>
            <remarks>
            Insert drawing of custom scene object between BeginScene and EndScene.
            </remarks>
        </member>
        <member name="M:Zelda.Graphics.NormalDrawingPipeline.EndScene">
            <summary>
            Ends drawing the scene.
            </summary>
            <remarks>
            Should be followed by BeginUserInterface.
            </remarks>
        </member>
        <member name="M:Zelda.Graphics.NormalDrawingPipeline.BeginUserInterface">
            <summary>
            Begins drawing the user interface.
            </summary>
            <remarks>
            Insert drawing of custom UI bjects between BeginUserInterface and EndDrawUserInterface.
            </remarks>
        </member>
        <member name="M:Zelda.Graphics.NormalDrawingPipeline.EndUserInterface">
            <summary>
            Ends drawing the user interface.
            </summary>
        </member>
        <member name="M:Zelda.Graphics.NormalDrawingPipeline.Load">
            <summary>
            Loads the data required by this IDrawingPipeline.
            </summary>
        </member>
        <member name="M:Zelda.Graphics.NormalDrawingPipeline.Unload">
            <summary>
            Unloads the data required by this IDrawingPipeline.
            </summary>
        </member>
        <member name="F:Zelda.Graphics.NormalDrawingPipeline.scene">
            <summary>
            The scene that is currently drawn.
            </summary>
        </member>
        <member name="F:Zelda.Graphics.NormalDrawingPipeline.userInterface">
            <summary>
            The UI that is currently drawn.
            </summary>
        </member>
        <member name="F:Zelda.Graphics.NormalDrawingPipeline.drawContext">
            <summary>
            The current drawing context.
            </summary>
        </member>
        <member name="F:Zelda.Graphics.NormalDrawingPipeline.rescaler">
            <summary>
            Is responsible for scaling the game that has been drawn at a native resolution
            to fit the full game window.
            </summary>
        </member>
        <member name="F:Zelda.Graphics.NormalDrawingPipeline.sceneDrawer">
            <summary>
            Is responsible for drawing ZeldaScenes.
            </summary>
        </member>
        <member name="T:Zelda.Graphics.Particles.RainEmitter">
            <summary>
            Represents a Particle Emitter that tries to visualize rain
            by spawning Particles.
            </summary>
        </member>
        <member name="M:Zelda.Graphics.Particles.RainEmitter.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the RainEmitter class.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="T:Zelda.Graphics.Particles.RainSnowParticleEffect">
            <summary>
            Represents a ParticleEffect that tries to visualize rain or snow.
            </summary>
        </member>
        <member name="P:Zelda.Graphics.Particles.RainSnowParticleEffect.MaximumReleaseQuantity">
            <summary>
            Gets or sets the maximum snow/rain Particle release quanitity of this RainSnowParticleEffect.
            </summary>
        </member>
        <member name="M:Zelda.Graphics.Particles.RainSnowParticleEffect.#ctor(Atom.Xna.Particles.ParticleRenderer)">
            <summary>
            Initializes a new instance of the RainSnowParticleEffect class.
            </summary>
            <param name="renderer">
            The <see cref="T:Atom.Xna.Particles.ParticleRenderer"/> that should be used to render the new RainSnowParticleEffect.
            </param>
        </member>
        <member name="M:Zelda.Graphics.Particles.RainSnowParticleEffect.CreateRain(Zelda.Graphics.Particles.Settings.IEmitterSettings,Zelda.IZeldaServiceProvider)">
            <summary>
            Creates a new instance of this RainSnowParticleEffect that tries
            to visualize rain.
            </summary>
            <param name="settings">
            The IEmitterSettings that are applied to the rain emitter.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
            <returns>
            The newly created RainSnowParticleEffect.
            </returns>
        </member>
        <member name="M:Zelda.Graphics.Particles.RainSnowParticleEffect.CreateSnow(Zelda.Graphics.Particles.Settings.IEmitterSettings,Zelda.IZeldaServiceProvider)">
            <summary>
            Creates a new instance of this RainSnowParticleEffect that tries
            to visualize snow.
            </summary>
            <param name="settings">
            The IEmitterSettings that are applied to the rain emitter.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
            <returns>
            The newly created RainSnowParticleEffect.
            </returns>
        </member>
        <member name="M:Zelda.Graphics.Particles.RainSnowParticleEffect.SetDensity(System.Single)">
            <summary>
            Sets the density of the Rain/Snow spawned by this RainShowParticleEffect.
            </summary>
            <param name="factor">
            The density factor to set; where 0=no particles and 1=MaximumParticles.
            </param>
        </member>
        <member name="M:Zelda.Graphics.Particles.RainSnowParticleEffect.CreateSharedEffect(Zelda.IZeldaServiceProvider)">
            <summary>
            Creates a new RainSnowParticleEffect and setups the properties that are shared
            between rain and snow.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
            <returns>
            The newly created RainSnowParticleEffect
            </returns>
        </member>
        <member name="M:Zelda.Graphics.Particles.RainSnowParticleEffect.CreateController(Zelda.Graphics.Particles.RainSnowParticleEffect,Zelda.IZeldaServiceProvider)">
            <summary>
            Creates and hooks the Controller responsible for triggering the given RainSnowParticleEffect.
            </summary>
            <param name="effect">
            The RainSnowParticleEffect that is supposed to be controlled.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
            <returns>
            The newly created Controller.
            </returns>
        </member>
        <member name="F:Zelda.Graphics.Particles.RainSnowParticleEffect.mainEmitter">
            <summary>
            The Emitter that spawns the rain/snow particles for this RainSnowParticleEffect.
            </summary>
        </member>
        <member name="T:Zelda.Graphics.Particles.Settings.DefaultRainEmitterSettings">
            <summary>
            Defines the default settings for the RainEmitter.
            </summary>
        </member>
        <member name="F:Zelda.Graphics.Particles.Settings.DefaultRainEmitterSettings.ParticleTextureName">
            <summary>
            Indenitfies the texture used for rain by default.
            </summary>
        </member>
        <member name="P:Zelda.Graphics.Particles.Settings.DefaultRainEmitterSettings.ParticleTexture">
            <summary>
            Gets the texture that is used to represents
            the particles.
            </summary>
        </member>
        <member name="M:Zelda.Graphics.Particles.Settings.DefaultRainEmitterSettings.ApplyTo(Atom.Xna.Particles.Emitter)">
            <summary>
            Applies these IEmitterSettings to the specified Emitter.
            </summary>
            <param name="emitter">
            The emitter to 'initialize' with the settings.
            </param>
        </member>
        <member name="M:Zelda.Graphics.Particles.Settings.DefaultRainEmitterSettings.#ctor">
            <summary>
            Initializes a new instance of the DefaultRainEmitterSettings class.
            </summary>
        </member>
        <member name="M:Zelda.Graphics.Particles.Settings.DefaultRainEmitterSettings.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the DefaultRainEmitterSettings class.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Graphics.Particles.Settings.DefaultRainEmitterSettings.Setup(Zelda.IZeldaServiceProvider)">
            <summary>
            Setups this DefaultRainEmitterSettings instance.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Graphics.Particles.Settings.DefaultRainEmitterSettings.Zelda#Saving#ISaveable#Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Graphics.Particles.Settings.DefaultRainEmitterSettings.Zelda#Saving#ISaveable#Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="T:Zelda.Graphics.Particles.Settings.DefaultSnowEmitterSettings">
            <summary>
            Defines the default settings for the SnowEmitter.
            </summary>
        </member>
        <member name="F:Zelda.Graphics.Particles.Settings.DefaultSnowEmitterSettings.ParticleTextureName">
            <summary>
            Indenitfies the texture used for snow by default.
            </summary>
        </member>
        <member name="P:Zelda.Graphics.Particles.Settings.DefaultSnowEmitterSettings.ParticleTexture">
            <summary>
            Gets the texture that is used to represents
            the particles.
            </summary>
        </member>
        <member name="M:Zelda.Graphics.Particles.Settings.DefaultSnowEmitterSettings.ApplyTo(Atom.Xna.Particles.Emitter)">
            <summary>
            Applies these IEmitterSettings to the specified Emitter.
            </summary>
            <param name="emitter">
            The emitter to 'initialize' with the settings.
            </param>
        </member>
        <member name="M:Zelda.Graphics.Particles.Settings.DefaultSnowEmitterSettings.#ctor">
            <summary>
            Initializes a new instance of the DefaultSnowEmitterSettings class.
            </summary>
        </member>
        <member name="M:Zelda.Graphics.Particles.Settings.DefaultSnowEmitterSettings.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the DefaultSnowEmitterSettings class.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Graphics.Particles.Settings.DefaultSnowEmitterSettings.Setup(Zelda.IZeldaServiceProvider)">
            <summary>
            Setups this DefaultSnowEmitterSettings instance.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Graphics.Particles.Settings.DefaultSnowEmitterSettings.Zelda#Saving#ISaveable#Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Graphics.Particles.Settings.DefaultSnowEmitterSettings.Zelda#Saving#ISaveable#Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="T:Zelda.Graphics.Particles.Settings.Design.EmitterSettingsEditor">
            <summary>
            Implements an <see cref="T:Zelda.Design.BaseZeldaObjectCreationEditor"/> that provides a mechanism
            that allows the user to create <see cref="T:Zelda.Graphics.Particles.Settings.IEmitterSettings"/> instances.
            </summary>
        </member>
        <member name="M:Zelda.Graphics.Particles.Settings.Design.EmitterSettingsEditor.GetTypes">
            <summary>
            Gets the types of the objects that can be created by this EmitterSettingsEditor.
            </summary>
            <returns>
            The list of types.
            </returns>
        </member>
        <member name="T:Zelda.Graphics.Particles.Settings.Design.KnownEmitterSetting">
            <summary>
            Provides access to all known IEmitterSettings.
            </summary>
        </member>
        <member name="P:Zelda.Graphics.Particles.Settings.Design.KnownEmitterSetting.Types">
            <summary>
            Gets the types of all known IEmitterSettings.
            </summary>
            <remarks>
            The returned array should not be modified.
            </remarks>
        </member>
        <member name="F:Zelda.Graphics.Particles.Settings.Design.KnownEmitterSetting.types">
            <summary>
            The IEmitterSettings that are known to the design-time system.
            </summary>
        </member>
        <member name="T:Zelda.Graphics.Particles.Settings.EmitterSettings">
            <summary>
            Implements the IEmitterSettings interface.
            </summary>
        </member>
        <member name="P:Zelda.Graphics.Particles.Settings.EmitterSettings.ReleaseColor">
            <summary>
            Gets or sets the initial color of the particles.
            </summary>
        </member>
        <member name="P:Zelda.Graphics.Particles.Settings.EmitterSettings.ParticleTexture">
            <summary>
            Gets or sets the texture that is used to represents
            the particles.
            </summary>
        </member>
        <member name="M:Zelda.Graphics.Particles.Settings.EmitterSettings.ApplyTo(Atom.Xna.Particles.Emitter)">
            <summary>
            Applies these IEmitterSettings to the specified Emitter.
            </summary>
            <param name="emitter">
            The emitter to 'initialize' with the settings.
            </param>
        </member>
        <member name="M:Zelda.Graphics.Particles.Settings.EmitterSettings.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Graphics.Particles.Settings.EmitterSettings.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="T:Zelda.Graphics.Particles.Settings.IEmitterSettings">
            <summary>
            Encapsulates the settings that are used to create a new ParticleEmitter.
            </summary>
        </member>
        <member name="M:Zelda.Graphics.Particles.Settings.IEmitterSettings.ApplyTo(Atom.Xna.Particles.Emitter)">
            <summary>
            Applies these IEmitterSettings to the specified Emitter.
            </summary>
            <param name="emitter">
            The emitter to 'initialize' with the settings.
            </param>
        </member>
        <member name="T:Zelda.Graphics.Particles.Settings.RandomFromListEmitterSettings">
            <summary>
            Implements an IEmitterSettings instance that randomly
            selects from a list of other IEmitterSettings.
            </summary>
        </member>
        <member name="P:Zelda.Graphics.Particles.Settings.RandomFromListEmitterSettings.Settings">
            <summary>
            Gets the list of IEmitterSettings from which this RandomFromListEmitterSettings
            randomly selects one IEmitterSetting.
            </summary>
        </member>
        <member name="M:Zelda.Graphics.Particles.Settings.RandomFromListEmitterSettings.Setup(Zelda.IZeldaServiceProvider)">
            <summary>
            Setups this RandomFromListEmitterSettings instance.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Graphics.Particles.Settings.RandomFromListEmitterSettings.ApplyTo(Atom.Xna.Particles.Emitter)">
            <summary>
            Applies these IEmitterSettings to the specified Emitter.
            </summary>
            <param name="emitter">
            The emitter to 'initialize' with the settings.
            </param>
        </member>
        <member name="M:Zelda.Graphics.Particles.Settings.RandomFromListEmitterSettings.GetRandomSetting">
            <summary>
            Randomly selects an IEmitterSettings instance from
            the list.
            </summary>
            <returns>
            An IEmitterSettings instance; or null.
            </returns>
        </member>
        <member name="M:Zelda.Graphics.Particles.Settings.RandomFromListEmitterSettings.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Graphics.Particles.Settings.RandomFromListEmitterSettings.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Graphics.Particles.Settings.RandomFromListEmitterSettings.rand">
            <summary>
            A random number generator.
            </summary>
        </member>
        <member name="F:Zelda.Graphics.Particles.Settings.RandomFromListEmitterSettings.settings">
            <summary>
            The list of IEmitterSettings from which one IEmitterSetting is randomly picked.
            </summary>
        </member>
        <member name="T:Zelda.Graphics.Particles.SnowEmitter">
            <summary>
            Represents a Particle Emitter that tries to visualize snow
            by spawning Particles.
            </summary>
        </member>
        <member name="M:Zelda.Graphics.Particles.SnowEmitter.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the SnowEmitter class.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="T:Zelda.Graphics.Particles.ZeldaParticleRenderer">
            <summary>
            Defines the ParticleRenderer used by the Zelda game.
            </summary>
        </member>
        <member name="M:Zelda.Graphics.Particles.ZeldaParticleRenderer.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the ZeldaParticleRenderer class.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="T:Zelda.Graphics.TilePathDrawer">
            <summary>
            Implements a mechanism that visualizes <see cref="T:Atom.Scene.Tiles.TilePath"/>s.
            </summary>
        </member>
        <member name="M:Zelda.Graphics.TilePathDrawer.Draw(Atom.Scene.Tiles.TilePath,Microsoft.Xna.Framework.Color,Zelda.ZeldaDrawContext)">
            <summary>
            Draws the specified TilePath in the specified Color.
            </summary>
            <param name="path">
            The TilePath to visualize.
            </param>
            <param name="color">
            The color the path should be tinted in.
            </param>
            <param name="drawContext">
            The current ZeldaDrawContext.
            </param>
        </member>
        <member name="T:Zelda.Graphics.Tinting.BlendInColorTint">
            <summary>
            Defines a <see cref="T:Zelda.Graphics.Tinting.TimedColorTint"/> that blends
            the alpha channel of the color in.
            </summary>
        </member>
        <member name="M:Zelda.Graphics.Tinting.BlendInColorTint.Apply(Atom.Math.Vector4)">
            <summary>
            Applies this IColorTint to the given color.
            </summary>
            <param name="color">
            The input color.
            </param>
            <returns>
            The output color.
            </returns>
        </member>
        <member name="T:Zelda.Graphics.Tinting.BlendOutColorTint">
            <summary>
            Defines a <see cref="T:Zelda.Graphics.Tinting.TimedColorTint"/> that blends
            the alpha channel of the color out.
            </summary>
        </member>
        <member name="M:Zelda.Graphics.Tinting.BlendOutColorTint.Apply(Atom.Math.Vector4)">
            <summary>
            Applies this IColorTint to the given color.
            </summary>
            <param name="color">
            The input color.
            </param>
            <returns>
            The output color.
            </returns>
        </member>
        <member name="T:Zelda.Graphics.Tinting.ColorTintList">
            <summary>
            Represents a list of <see cref="T:Zelda.Graphics.Tinting.IColorTint"/> instances that
            are combined to tint a Xna.Color.
            This class can't be inherited.
            </summary>
        </member>
        <member name="M:Zelda.Graphics.Tinting.ColorTintList.ApplyTinting(Microsoft.Xna.Framework.Color)">
            <summary>
            Applies the combined color tinting of this ColorTintList to
            the given <paramref name="baseColor"/>.
            </summary>
            <param name="baseColor">
            The Xna.Color the tinting should be based on.
            </param>
            <returns>
            The tinted Xna.Color.
            </returns>
        </member>
        <member name="M:Zelda.Graphics.Tinting.ColorTintList.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this ColorTintList.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Graphics.Tinting.ColorTintList.Add(Zelda.Graphics.Tinting.IColorTint)">
            <summary>
            Adds the given <see cref="T:Zelda.Graphics.Tinting.IColorTint"/> instance to this ColorTintList.
            </summary>
            <param name="colorTint">
            The IColorTint instance to add.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="colorTint"/> is null.
            </exception>
        </member>
        <member name="M:Zelda.Graphics.Tinting.ColorTintList.Remove(Zelda.Graphics.Tinting.IColorTint)">
            <summary>
            Tries to remove the given <see cref="T:Zelda.Graphics.Tinting.IColorTint"/> instance from this ColorTintList.
            </summary>
            <param name="colorTint">
            The IColorTint instance to remove.
            </param>
            <returns>
            Whether the given <see cref="T:Zelda.Graphics.Tinting.IColorTint"/> instance has been removed.
            </returns>
        </member>
        <member name="M:Zelda.Graphics.Tinting.ColorTintList.Clear">
            <summary>
            Removes all IColorTints from this ColorTintList.
            </summary>
        </member>
        <member name="F:Zelda.Graphics.Tinting.ColorTintList.list">
            <summary>
            The internal list that keeps track of the IColorTint instances
            this ColorTintList consists of.
            </summary>
        </member>
        <member name="T:Zelda.Graphics.Tinting.CombineColorTint">
            <summary>
            Defines an <see cref="T:Zelda.Graphics.Tinting.IColorTint"/> that combines the existing
            color with a specified color.
            </summary>
        </member>
        <member name="P:Zelda.Graphics.Tinting.CombineColorTint.Color">
            <summary>
            Gets or sets the <see cref="P:Zelda.Graphics.Tinting.CombineColorTint.Color"/> associated with this ColorTint instance.
            </summary>
        </member>
        <member name="M:Zelda.Graphics.Tinting.CombineColorTint.Apply(Atom.Math.Vector4)">
            <summary>
            Applies this IColorTint to the given color.
            </summary>
            <param name="color">
            The input color.
            </param>
            <returns>
            The output color.
            </returns>
        </member>
        <member name="M:Zelda.Graphics.Tinting.CombineColorTint.Zelda#IZeldaUpdateable#Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this IZeldaUpdateable.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Graphics.Tinting.CombineColorTint.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Graphics.Tinting.CombineColorTint.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="T:Zelda.Graphics.Tinting.Design.ColorTintEditor">
            <summary>
            Implements an <see cref="T:Zelda.Design.BaseZeldaObjectCreationEditor"/> that provides a mechanism
            that allows the user to create <see cref="T:Zelda.Graphics.Tinting.IColorTint"/> instances.
            </summary>
        </member>
        <member name="M:Zelda.Graphics.Tinting.Design.ColorTintEditor.GetTypes">
            <summary>
            Gets the types of the objects that can be created by this ColorTintEditor.
            </summary>
            <returns>
            The list of types.
            </returns>
        </member>
        <member name="T:Zelda.Graphics.Tinting.Design.KnownColorTint">
            <summary>
            Provides access to all known IColorTints.
            </summary>
        </member>
        <member name="P:Zelda.Graphics.Tinting.Design.KnownColorTint.Types">
            <summary>
            Gets the types of all known IColorTints..
            </summary>
            <remarks>
            The returned array should not be modified.
            </remarks>
        </member>
        <member name="F:Zelda.Graphics.Tinting.Design.KnownColorTint.types">
            <summary>
            The color tints that are known to the design-time system.
            </summary>
        </member>
        <member name="T:Zelda.Graphics.Tinting.IColorTint">
            <summary>
            Provides a mechanism that allows one to apply a tinting
            effect to a color.
            </summary>
        </member>
        <member name="M:Zelda.Graphics.Tinting.IColorTint.Apply(Atom.Math.Vector4)">
            <summary>
            Applies this IColorTint to the given color.
            </summary>
            <param name="color">
            The input color.
            </param>
            <returns>
            The output color.
            </returns>
        </member>
        <member name="T:Zelda.Graphics.Tinting.LinearColorReplacementTint">
            <summary>
            Defines a TimedColorTint that linearly interpolates between a specified InitialColor
            and a specified FinalColor.
            </summary>
            <remarks>
            The input color is completly discarded.
            </remarks>
        </member>
        <member name="P:Zelda.Graphics.Tinting.LinearColorReplacementTint.InitialColor">
            <summary>
            Gets or sets the initial color this LinearColorReplacementTint interpolates from.
            </summary>
        </member>
        <member name="P:Zelda.Graphics.Tinting.LinearColorReplacementTint.FinalColor">
            <summary>
            Gets or sets the final color this LinearColorReplacementTint interpolates to.
            </summary>
        </member>
        <member name="M:Zelda.Graphics.Tinting.LinearColorReplacementTint.Apply(Atom.Math.Vector4)">
            <summary>
            Applies this IColorTint to the given color.
            </summary>
            <param name="color">
            The input color. Unused.
            </param>
            <returns>
            The output color.
            </returns>
        </member>
        <member name="T:Zelda.Graphics.Tinting.LinearColorTint">
            <summary>
            Defines a TimedColorTint that linearly interpolates between the input color
            and a specified FinalColor.
            </summary>
        </member>
        <member name="P:Zelda.Graphics.Tinting.LinearColorTint.FinalColor">
            <summary>
            Gets or sets the final color this LinearColorTint interpolates to.
            </summary>
        </member>
        <member name="M:Zelda.Graphics.Tinting.LinearColorTint.Apply(Atom.Math.Vector4)">
            <summary>
            Applies this IColorTint to the given color.
            </summary>
            <param name="color">
            The input color.
            </param>
            <returns>
            The output color.
            </returns>
        </member>
        <member name="T:Zelda.Graphics.Tinting.RandomFromListColorTint">
            <summary>
            Implements an IColorTint that completly replaces the input color
            by randomly picking from a list of colors.
            </summary>
        </member>
        <member name="P:Zelda.Graphics.Tinting.RandomFromListColorTint.Colors">
            <summary>
            Gets the list of colors from which randomly a color is selected.
            </summary>
        </member>
        <member name="M:Zelda.Graphics.Tinting.RandomFromListColorTint.Setup(Zelda.IZeldaServiceProvider)">
            <summary>
            Setups this RandomFromListColorReplacementTint.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Graphics.Tinting.RandomFromListColorTint.Apply(Atom.Math.Vector4)">
            <summary>
            Applies this IColorTint to the given color.
            </summary>
            <param name="color">
            The input color.
            </param>
            <returns>
            The output color.
            </returns>
        </member>
        <member name="M:Zelda.Graphics.Tinting.RandomFromListColorTint.Zelda#IZeldaUpdateable#Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this IZeldaUpdateable.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Graphics.Tinting.RandomFromListColorTint.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Graphics.Tinting.RandomFromListColorTint.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Graphics.Tinting.RandomFromListColorTint.colorTints">
            <summary>
            The list of colors.
            </summary>
        </member>
        <member name="F:Zelda.Graphics.Tinting.RandomFromListColorTint.rand">
            <summary>
            A random number generator.
            </summary>
        </member>
        <member name="T:Zelda.Graphics.Tinting.ReplacementTint">
            <summary>
            Implements an IColorTint that replaces the input color with another color.
            </summary>
        </member>
        <member name="P:Zelda.Graphics.Tinting.ReplacementTint.Color">
            <summary>
            Gets or sets the <see cref="P:Zelda.Graphics.Tinting.ReplacementTint.Color"/> associated with this ColorTint instance.
            </summary>
        </member>
        <member name="M:Zelda.Graphics.Tinting.ReplacementTint.Apply(Atom.Math.Vector4)">
            <summary>
            Applies this IColorTint to the given color.
            </summary>
            <param name="color">
            The input color.
            </param>
            <returns>
            The output color.
            </returns>
        </member>
        <member name="M:Zelda.Graphics.Tinting.ReplacementTint.Zelda#IZeldaUpdateable#Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this IZeldaUpdateable.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Graphics.Tinting.ReplacementTint.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Graphics.Tinting.ReplacementTint.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="T:Zelda.Graphics.Tinting.TimedColorTint">
            <summary>
            Represents an <see cref="T:Zelda.Graphics.Tinting.IColorTint"/> that has its effect
            controlled by a single time value.
            </summary>
        </member>
        <member name="E:Zelda.Graphics.Tinting.TimedColorTint.ReachedFullEffect">
            <summary>
            Raised when this TimedColorTint has reached its full effect.
            </summary>
        </member>
        <member name="P:Zelda.Graphics.Tinting.TimedColorTint.TotalTime">
            <summary>
            Gets or sets the total time (in seconds) for this TimedColorTint
            to reach its full effect.
            </summary>
        </member>
        <member name="P:Zelda.Graphics.Tinting.TimedColorTint.TimeLeft">
            <summary>
            Gets the time left until this TimedColorTint has reached its full effect.
            </summary>
        </member>
        <member name="P:Zelda.Graphics.Tinting.TimedColorTint.Factor">
            <summary>
            Gets the ratio between timeLeft and totalTime.
            </summary>
            <value>
            This TimedColorTint reaches its full effect when this value is 0.
            </value>
        </member>
        <member name="M:Zelda.Graphics.Tinting.TimedColorTint.Apply(Atom.Math.Vector4)">
            <summary>
            Applies this IColorTint to the given color.
            </summary>
            <param name="color">
            The input color.
            </param>
            <returns>
            The output color.
            </returns>
        </member>
        <member name="M:Zelda.Graphics.Tinting.TimedColorTint.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this IZeldaUpdateable.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Graphics.Tinting.TimedColorTint.Reset">
            <summary>
            Resets the time until this BlendOutColorTint has reached its full effect.
            </summary>
        </member>
        <member name="M:Zelda.Graphics.Tinting.TimedColorTint.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Graphics.Tinting.TimedColorTint.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Graphics.Tinting.TimedColorTint.totalTime">
            <summary>
            The storage fields of the TotalTime property.
            </summary>
        </member>
        <member name="F:Zelda.Graphics.Tinting.TimedColorTint.timeLeft">
            <summary>
            The time left until this TimedColorTint has reached its full effect.
            </summary>
        </member>
        <member name="F:Zelda.Graphics.Tinting.TimedColorTint.hasReachedFullEffect">
            <summary>
            States whether this TimedColorTint has reached its full effect.
            </summary>
        </member>
        <member name="T:Zelda.IngameDateTime">
            <summary>
            Encapsulates the flow of date and time within the game.
            This is a sealed class.
            </summary>
        </member>
        <member name="P:Zelda.IngameDateTime.Current">
            <summary>
            Gets or sets the current <see cref="T:System.DateTime"/>.
            </summary>
        </member>
        <member name="P:Zelda.IngameDateTime.TickSpeed">
            <summary>
            Gets or sets the number ingame-seconds that are added in one second.
            </summary>
        </member>
        <member name="P:Zelda.IngameDateTime.InverseTickSpeed">
            <summary>
            Gets the number ingame-seconds that are added in one second; inversed.
            </summary>
            <remarks>
            This value is cached for improved perfomance.
            </remarks>
        </member>
        <member name="M:Zelda.IngameDateTime.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.IngameDateTime"/> class,
            initialized with default settings.
            </summary>
        </member>
        <member name="M:Zelda.IngameDateTime.#ctor(System.DateTime,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.IngameDateTime"/> class.
            </summary>
            <param name="startDateTime"> The start date/time. </param>
            <param name="tickSpeed"> The number ingame-seconds that are added in one second. </param>
        </member>
        <member name="M:Zelda.IngameDateTime.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates the current time of the <see cref="T:Zelda.IngameDateTime"/> object.
            Usually called once per frame.
            </summary>
            <param name="updateContext"> 
            The current IUpdateContext. 
            </param>
        </member>
        <member name="M:Zelda.IngameDateTime.AddHours(System.Int32)">
            <summary>
            Adds the given number of hours to the current IngameDateTime.
            </summary>
            <param name="hours">
            The number of hours to add.
            </param>
        </member>
        <member name="M:Zelda.IngameDateTime.ToShortTimeString">
            <summary>
            Converts the current ingame time into a short string.
            </summary>
            <returns>
            A string that contains the short time string representation of the current System.DateTime object.
            </returns>
        </member>
        <member name="F:Zelda.IngameDateTime.current">
            <summary>
            The current date/time.
            </summary>
        </member>
        <member name="F:Zelda.IngameDateTime.tickSpeed">
            <summary>
            The number of ingame-seconds that shall be added in one second.
            </summary>
        </member>
        <member name="F:Zelda.IngameDateTime.invTickSpeed">
            <summary>
            Inversed tick speed value. Cached to reduce overhead.
            </summary>
        </member>
        <member name="T:Zelda.IoC">
            <summary>
            Provides global access to the Inversion of Control container.
            </summary>
        </member>
        <member name="P:Zelda.IoC.Provider">
            <summary>
            Gets or sets the <see cref="T:Zelda.IZeldaServiceProvider"/> that is used
            to resolve dependencies.
            </summary>
        </member>
        <member name="M:Zelda.IoC.Resolve``1">
            <summary>
            Attempts to resolve the object of the specified type.
            </summary>
            <typeparam name="TService">
            The type of the service.
            </typeparam>
            <returns>
            The requested service; or null.
            </returns>
        </member>
        <member name="T:Zelda.IPostLoad">
            <summary>
            Allows setup logic to be executed after all normal setup logic (even from other modules)
            has been executed.
            </summary>
        </member>
        <member name="T:Zelda.Items.Affixes.AffixDatabase">
            <summary>
            Allows access to all known <see cref="T:Zelda.Items.Affixes.IPrefix"/>es and <see cref="T:Zelda.Items.Affixes.ISuffix"/>es.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.AffixDatabase.Instance">
            <summary>
            Gets the singleton instance of the AffixDatabase class.
            </summary>
        </member>
        <member name="F:Zelda.Items.Affixes.AffixDatabase.instance">
            <summary>
            The singleton instance of the AffixDatabase class.
            </summary>
        </member>
        <member name="M:Zelda.Items.Affixes.AffixDatabase.Initialize(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes this AffixDatabase by adding all known IPrefixes and IAffixes.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Items.Affixes.AffixDatabase.Add(Zelda.Items.Affixes.IPrefix)">
            <summary>
            Adds the given IPrefix to this AffixDatabase.
            </summary>
            <param name="prefix">
            The IPrefix to add.
            </param>
        </member>
        <member name="M:Zelda.Items.Affixes.AffixDatabase.Add(Zelda.Items.Affixes.ISuffix)">
            <summary>
            Adds the given ISuffix to this AffixDatabase.
            </summary>
            <param name="suffix">
            The ISuffix to add.
            </param>
        </member>
        <member name="M:Zelda.Items.Affixes.AffixDatabase.GetPrefix(System.String)">
            <summary>
            Tries to get the IPrefix with the given name.
            </summary>
            <seealso cref="M:Zelda.Items.Affixes.AffixDatabase.GetAffixName(Zelda.Items.Affixes.IAffix)"/>
            <param name="prefixName">
            The name of the prefix to get.
            </param>
            <returns>
            The requested IPrefix.
            </returns>
        </member>
        <member name="M:Zelda.Items.Affixes.AffixDatabase.GetSuffix(System.String)">
            <summary>
            Tries to get the ISuffix with the given name.
            </summary>
            <seealso cref="M:Zelda.Items.Affixes.AffixDatabase.GetAffixName(Zelda.Items.Affixes.IAffix)"/>
            <param name="suffixName">
            The name of the suffix to get.
            </param>
            <returns>
            The requested ISuffix.
            </returns>
        </member>
        <member name="M:Zelda.Items.Affixes.AffixDatabase.GetRandomPrefix(Atom.Math.RandMT)">
            <summary>
            Randomly gets one of the <see cref="T:Zelda.Items.Affixes.IPrefix"/>es in this AffixDatabase. 
            </summary>
            <param name="rand">
            A random number generator.
            </param>
            <returns>
            A random IPrefix.
            </returns>
        </member>
        <member name="M:Zelda.Items.Affixes.AffixDatabase.GetRandomSuffix(Atom.Math.RandMT)">
            <summary>
            Randomly gets one of the <see cref="T:Zelda.Items.Affixes.ISuffix"/>es in this AffixDatabase. 
            </summary>
            <param name="rand">
            A random number generator.
            </param>
            <returns>
            A random ISuffix.
            </returns>
        </member>
        <member name="M:Zelda.Items.Affixes.AffixDatabase.GetRandomFittingPrefix(Zelda.Items.Item,Atom.Math.RandMT)">
            <summary>
            Tries to randomly get an <see cref="T:Zelda.Items.Affixes.IPrefix"/> that can be applied to the given base <see cref="T:Zelda.Items.Item"/>.
            </summary>
            <param name="baseItem">
            The base item the affix is supposed to be applied to.
            </param>
            <param name="rand">
            A random number generator.
            </param>
            <returns>
            A fitting randomly-selected affix; or null if none could be found in time.
            </returns>
        </member>
        <member name="M:Zelda.Items.Affixes.AffixDatabase.GetRandomFittingSuffix(Zelda.Items.Item,Atom.Math.RandMT)">
            <summary>
            Tries to randomly get an <see cref="T:Zelda.Items.Affixes.ISuffix"/> that can be applied to the given base <see cref="T:Zelda.Items.Item"/>.
            </summary>
            <param name="baseItem">
            The base item the affix is supposed to be applied to.
            </param>
            <param name="rand">
            A random number generator.
            </param>
            <returns>
            A fitting randomly-selected affix; or null if none could be found in time.
            </returns>
        </member>
        <member name="M:Zelda.Items.Affixes.AffixDatabase.GetAffixName(Zelda.Items.Affixes.IAffix)">
            <summary>
            Helper method that returns the name that uniquely idenfities the given Affix.
            </summary>
            <param name="affix">
            The affix. Can be null.
            </param>
            <returns>
            The name of the affix; or <see cref="F:System.String.Empty"/>.
            </returns>
        </member>
        <member name="F:Zelda.Items.Affixes.AffixDatabase.prefixes">
            <summary>
            Stores all known <see cref="T:Zelda.Items.Affixes.IPrefix"/>es, sorted by their type-name.
            </summary>
        </member>
        <member name="F:Zelda.Items.Affixes.AffixDatabase.suffixes">
            <summary>
            Stores all known <see cref="T:Zelda.Items.Affixes.ISuffix"/>es, sorted by their type-name.
            </summary>
        </member>
        <member name="T:Zelda.Items.Affixes.AffixedEquipmentInstance">
            <summary>
            Represents an instance of an Equipment that has been 'enhanced' using affixes.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.AffixedEquipmentInstance.AffixedItem">
            <summary>
            Gets the <see cref="P:Zelda.Items.Affixes.AffixedEquipmentInstance.AffixedItem"/> this AffixedEquipmentInstance is based on.
            </summary>
        </member>
        <member name="M:Zelda.Items.Affixes.AffixedEquipmentInstance.#ctor(Zelda.Items.Affixes.AffixedItem,System.Single)">
            <summary>
            Initializes a new instance of the AffixedEquipmentInstance class.
            </summary>
            <param name="affixedItem">
            The underlying AffixedItem.
            </param>
            <param name="powerFactor">
            The factor by which the power of this AffixedEquipmentInstance varies compared to the base Item.
            </param>
        </member>
        <member name="M:Zelda.Items.Affixes.AffixedEquipmentInstance.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes/Writes the data descriping this AffixedEquipmentInstance using the given BinaryWriter.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Items.Affixes.AffixedEquipmentInstance.ReadAffixedEquipment(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to create an <see cref="T:Zelda.Items.EquipmentInstance"/>.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
            <returns>
            A new EquipmentInstance object.
            </returns>
        </member>
        <member name="F:Zelda.Items.Affixes.AffixedEquipmentInstance.affixedItem">
            <summary>
            The underlying AffixedItem.
            </summary>
        </member>
        <member name="T:Zelda.Items.Affixes.AffixedItem">
            <summary>
            An <see cref="T:Zelda.Items.Affixes.AffixedItem"/> is an item that is composed 
            by compining a base <see cref="T:Zelda.Items.Item"/>, an <see cref="T:Zelda.Items.Affixes.IPrefix"/> and an <see cref="T:Zelda.Items.Affixes.ISuffix"/>.
            </summary>
            <remarks>
            Affixed items allows the game to generate many-different 'randomized' items.
            <example>
            <para>
            'Brutal Demonsword of the Kings'
            </para>
            <para>
            'Brutal' is the prefix, adding +Strength (based on item-level).
            'Demonsword' is the base item.
            'of the Kings' is the suffix, adding +All Stats%.
            </para>
            </example>
            </remarks>
        </member>
        <member name="P:Zelda.Items.Affixes.AffixedItem.ComposedItem">
            <summary>
            Gets the Item that resulted by combining 
            the <see cref="P:Zelda.Items.Affixes.AffixedItem.Prefix"/>, <see cref="P:Zelda.Items.Affixes.AffixedItem.BaseItem"/> and <see cref="P:Zelda.Items.Affixes.AffixedItem.Suffix"/>.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.AffixedItem.Prefix">
            <summary>
            Gets the <see cref="T:Zelda.Items.Affixes.IAffix"/> the pre-fixes the <see cref="P:Zelda.Items.Affixes.AffixedItem.BaseItem"/>, if any.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.AffixedItem.BaseItem">
            <summary>
            Gets the Item this AffixedItem is based on.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.AffixedItem.Suffix">
            <summary>
            Gets the <see cref="T:Zelda.Items.Affixes.IAffix"/> the post-fixes the <see cref="P:Zelda.Items.Affixes.AffixedItem.BaseItem"/>, if any.
            </summary>
        </member>
        <member name="M:Zelda.Items.Affixes.AffixedItem.#ctor(Zelda.Items.Item,Zelda.Items.Affixes.IPrefix,Zelda.Items.Affixes.ISuffix)">
            <summary>
            Initializes a new instance of the AffixedItem class.
            </summary>
            <param name="baseItem">
            The item the new AffixedItem is based on.
            </param>
            <param name="prefix">
            The IPrefix to apply to the given <paramref name="baseItem"/>.
            </param>
            <param name="suffix">
            The ISuffix to apply to the given <paramref name="baseItem"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="baseItem"/> is null.
            </exception>
        </member>
        <member name="M:Zelda.Items.Affixes.AffixedItem.CreateInstance(Atom.Math.RandMT)">
            <summary>
            Creates an instance of this AffixedItem.
            </summary>
            <param name="rand">
            The random number generator used to decide the power factor of the new instance.
            </param>
            <returns>
            A newly created instance of this AffixedItem.
            </returns>
        </member>
        <member name="M:Zelda.Items.Affixes.AffixedItem.CreateInstance(System.Single)">
            <summary>
            Creates an instance of this AffixedItem.
            </summary>
            <param name="powerFactor">
            The power facto of the new instance.
            </param>
            <returns>
            A newly created instance of this AffixedItem.
            </returns>
        </member>
        <member name="M:Zelda.Items.Affixes.AffixedItem.Compose">
            <summary>
            Composes the <see cref="P:Zelda.Items.Affixes.AffixedItem.Prefix"/>, <see cref="P:Zelda.Items.Affixes.AffixedItem.BaseItem"/> and <see cref="P:Zelda.Items.Affixes.AffixedItem.Suffix"/>
            to create the actual affixed <see cref="P:Zelda.Items.Affixes.AffixedItem.ComposedItem"/>.
            </summary>
        </member>
        <member name="M:Zelda.Items.Affixes.AffixedItem.PrepareCompose">
            <summary>
            Prepares the <see cref="F:Zelda.Items.Affixes.AffixedItem.item"/> before composing it with the <see cref="F:Zelda.Items.Affixes.AffixedItem.prefix"/> and <see cref="F:Zelda.Items.Affixes.AffixedItem.suffix"/>.
            </summary>
        </member>
        <member name="M:Zelda.Items.Affixes.AffixedItem.CompleteCompose">
            <summary>
            Completes the <see cref="F:Zelda.Items.Affixes.AffixedItem.item"/> after composing it with the <see cref="F:Zelda.Items.Affixes.AffixedItem.prefix"/> and <see cref="F:Zelda.Items.Affixes.AffixedItem.suffix"/>.
            </summary>
        </member>
        <member name="M:Zelda.Items.Affixes.AffixedItem.Serialize(Zelda.Items.Affixes.AffixedItem,Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the given AffixedItem for storage in binary format.
            </summary>
            <param name="affixedItem">
            The AffixedItem to serialize.
            </param>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Items.Affixes.AffixedItem.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Creates a new AffixedItem by deserializing the required informating.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
            <returns>
            The newly deserialized AffixedItem.
            </returns>
        </member>
        <member name="F:Zelda.Items.Affixes.AffixedItem.prefix">
            <summary>
            The <see cref="T:Zelda.Items.Affixes.IPrefix"/> that is attached to the BaseItem.
            </summary>
        </member>
        <member name="F:Zelda.Items.Affixes.AffixedItem.baseItem">
            <summary>
            The item this AffixedItem adds to.
            </summary>
        </member>
        <member name="F:Zelda.Items.Affixes.AffixedItem.suffix">
            <summary>
            The <see cref="T:Zelda.Items.Affixes.ISuffix"/> that is attached to the BaseItem.
            </summary>
        </member>
        <member name="F:Zelda.Items.Affixes.AffixedItem.item">
            <summary>
            The final Item that is created by this AffixedItem,
            by adding the prefix and the suffix to the baseItem.
            </summary>
        </member>
        <member name="T:Zelda.Items.Affixes.AffixedWeaponInstance">
            <summary>
            Represents an instance of an Weapon that has been 'enhanced' using affixes.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.AffixedWeaponInstance.AffixedItem">
            <summary>
            Gets the <see cref="P:Zelda.Items.Affixes.AffixedWeaponInstance.AffixedItem"/> this AffixedWeaponInstance is based on.
            </summary>
        </member>
        <member name="M:Zelda.Items.Affixes.AffixedWeaponInstance.#ctor(Zelda.Items.Affixes.AffixedItem,System.Single)">
            <summary>
            Initializes a new instance of the AffixedWeaponInstance class.
            </summary>
            <param name="affixedItem">
            The underlying AffixedItem.
            </param>
            <param name="powerFactor">
            The factor by which the power of this AffixedWeaponInstance varies compared to the base Item.
            </param>
        </member>
        <member name="M:Zelda.Items.Affixes.AffixedWeaponInstance.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes/Writes the data descriping this AffixedWeaponInstance using the given BinaryWriter.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Items.Affixes.AffixedWeaponInstance.ReadAffixedWeapon(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to create an affixed <see cref="T:Zelda.Items.WeaponInstance"/>.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
            <returns>
            A new WeaponInstance object.
            </returns>
        </member>
        <member name="F:Zelda.Items.Affixes.AffixedWeaponInstance.affixedItem">
            <summary>
            The underlying AffixedItem.
            </summary>
        </member>
        <member name="T:Zelda.Items.Affixes.AffixResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.AffixResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.AffixResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.AffixResources.Acute">
            <summary>
              Looks up a localized string similar to Acute.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.AffixResources.Blackened">
            <summary>
              Looks up a localized string similar to Blackened.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.AffixResources.Cemetery">
            <summary>
              Looks up a localized string similar to Cemetery.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.AffixResources.Deadly">
            <summary>
              Looks up a localized string similar to Deadly.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.AffixResources.Edged">
            <summary>
              Looks up a localized string similar to Edged.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.AffixResources.Emerald">
            <summary>
              Looks up a localized string similar to Emerald.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.AffixResources.Enraging">
            <summary>
              Looks up a localized string similar to Enraging.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.AffixResources.Enriched">
            <summary>
              Looks up a localized string similar to Enriched.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.AffixResources.Flexible">
            <summary>
              Looks up a localized string similar to Flexible.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.AffixResources.Forceful">
            <summary>
              Looks up a localized string similar to Forceful.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.AffixResources.Golden">
            <summary>
              Looks up a localized string similar to Golden.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.AffixResources.Haunting">
            <summary>
              Looks up a localized string similar to Haunting.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.AffixResources.Heavy">
            <summary>
              Looks up a localized string similar to Heavy.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.AffixResources.Impetuous">
            <summary>
              Looks up a localized string similar to Impetuous.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.AffixResources.Inflamed">
            <summary>
              Looks up a localized string similar to Inflamed.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.AffixResources.OfAssassination">
            <summary>
              Looks up a localized string similar to of Assassination.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.AffixResources.OfBerserkerRage">
            <summary>
              Looks up a localized string similar to of Berserker Rage.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.AffixResources.OfCorruption">
            <summary>
              Looks up a localized string similar to of Corruption.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.AffixResources.OfCourage">
            <summary>
              Looks up a localized string similar to of Courage.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.AffixResources.OfDefensiveness">
            <summary>
              Looks up a localized string similar to of Defensiveness.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.AffixResources.OfDoom">
            <summary>
              Looks up a localized string similar to of Doom.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.AffixResources.OfEase">
            <summary>
              Looks up a localized string similar to of Ease.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.AffixResources.OfEquilibrium">
            <summary>
              Looks up a localized string similar to of Equilibrium.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.AffixResources.OfFeathers">
            <summary>
              Looks up a localized string similar to of Feathers.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.AffixResources.OfFluency">
            <summary>
              Looks up a localized string similar to of Fluency.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.AffixResources.OfFortune">
            <summary>
              Looks up a localized string similar to of Fortune.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.AffixResources.OfHaste">
            <summary>
              Looks up a localized string similar to of Haste.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.AffixResources.OfImmediacy">
            <summary>
              Looks up a localized string similar to of Immediacy.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.AffixResources.OfKings">
            <summary>
              Looks up a localized string similar to of Kings.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.AffixResources.OfLight">
            <summary>
              Looks up a localized string similar to of Light.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.AffixResources.OfPower">
            <summary>
              Looks up a localized string similar to of Power.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.AffixResources.OfProtection">
            <summary>
              Looks up a localized string similar to of Protection.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.AffixResources.OfRage">
            <summary>
              Looks up a localized string similar to of Rage.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.AffixResources.OfRecklessness">
            <summary>
              Looks up a localized string similar to of Recklessness.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.AffixResources.OfRecovery">
            <summary>
              Looks up a localized string similar to of Recovery.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.AffixResources.OfRupture">
            <summary>
              Looks up a localized string similar to of Rupture.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.AffixResources.OfSorcery">
            <summary>
              Looks up a localized string similar to of Sorcery.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.AffixResources.OfTheBlockade">
            <summary>
              Looks up a localized string similar to of the Blockade.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.AffixResources.OfTheeHastyAvatar">
            <summary>
              Looks up a localized string similar to of thee Hasty Avatar.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.AffixResources.OfTheHawk">
            <summary>
              Looks up a localized string similar to of the Hawk.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.AffixResources.OfTheHolySpirit">
            <summary>
              Looks up a localized string similar to of the Holy Spirit.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.AffixResources.OfTheSages">
            <summary>
              Looks up a localized string similar to of the Sages.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.AffixResources.OfTheSeasons">
            <summary>
              Looks up a localized string similar to of the Seasons.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.AffixResources.OfTheTitans">
            <summary>
              Looks up a localized string similar to of the Titans.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.AffixResources.OfWitchCraft">
            <summary>
              Looks up a localized string similar to of Witch Craft.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.AffixResources.Oiled">
            <summary>
              Looks up a localized string similar to Oiled.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.AffixResources.Ornate">
            <summary>
              Looks up a localized string similar to Ornate.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.AffixResources.Penetrating">
            <summary>
              Looks up a localized string similar to Penetrating.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.AffixResources.Perforated">
            <summary>
              Looks up a localized string similar to Perforated.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.AffixResources.Piercing">
            <summary>
              Looks up a localized string similar to Piercing.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.AffixResources.Poisoned">
            <summary>
              Looks up a localized string similar to Poisoned.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.AffixResources.Precise">
            <summary>
              Looks up a localized string similar to Precise.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.AffixResources.Pulsating">
            <summary>
              Looks up a localized string similar to Pulsating.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.AffixResources.Rainbow">
            <summary>
              Looks up a localized string similar to Rainbow -.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.AffixResources.Retarding">
            <summary>
              Looks up a localized string similar to Retarding.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.AffixResources.Risky">
            <summary>
              Looks up a localized string similar to Risky.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.AffixResources.Ruby">
            <summary>
              Looks up a localized string similar to Ruby.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.AffixResources.Rugged">
            <summary>
              Looks up a localized string similar to Rugged.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.AffixResources.Rusty">
            <summary>
              Looks up a localized string similar to Rusty.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.AffixResources.Scintillant">
            <summary>
              Looks up a localized string similar to Scintillant.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.AffixResources.Slippery">
            <summary>
              Looks up a localized string similar to Slippery.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.AffixResources.Strond">
            <summary>
              Looks up a localized string similar to Strond.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.AffixResources.Sturdy">
            <summary>
              Looks up a localized string similar to Sturdy.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.AffixResources.Useless">
            <summary>
              Looks up a localized string similar to Useless.
            </summary>
        </member>
        <member name="T:Zelda.Items.Affixes.AffixType">
            <summary>
            Enumerates the different types of IAffixes configurations an item might have.
            </summary>
        </member>
        <member name="F:Zelda.Items.Affixes.AffixType.None">
            <summary>
            The item doesn't have any affix.
            </summary>
        </member>
        <member name="F:Zelda.Items.Affixes.AffixType.Prefix">
            <summary>
            An <see cref="T:Zelda.Items.Affixes.IPrefix"/> stands before the base item.
            </summary>
        </member>
        <member name="F:Zelda.Items.Affixes.AffixType.Suffix">
            <summary>
            An <see cref="T:Zelda.Items.Affixes.ISuffix"/> stands behind the base item.
            </summary>
        </member>
        <member name="F:Zelda.Items.Affixes.AffixType.Both">
            <summary>
            Both affixes are allowed: An <see cref="T:Zelda.Items.Affixes.IPrefix"/> and an <see cref="T:Zelda.Items.Affixes.ISuffix"/>.
            </summary>
        </member>
        <member name="F:Zelda.Items.Affixes.AffixType.AlwaysBoth">
            <summary>
            The item must have both affixes: An <see cref="T:Zelda.Items.Affixes.IPrefix"/> and an <see cref="T:Zelda.Items.Affixes.ISuffix"/>.
            </summary>
        </member>
        <member name="F:Zelda.Items.Affixes.AffixType.AlwaysOneOrBoth">
            <summary>
            The item must have one or both affixes: An <see cref="T:Zelda.Items.Affixes.IPrefix"/> and/or an <see cref="T:Zelda.Items.Affixes.ISuffix"/>.
            </summary>
        </member>
        <member name="T:Zelda.Items.Affixes.IAffix">
            <summary>
            Item affixes are used to randomly 'customize' items.
            </summary>
            <seealso cref="T:Zelda.Items.Affixes.AffixedItem"/>
            <seealso cref="T:Zelda.Items.Affixes.IPrefix"/>
            <seealso cref="T:Zelda.Items.Affixes.ISuffix"/>
            <remarks>
            Most affixes scale with the level of the item they are applied to.
            Affixes are supposed to be immutable objects, that always behave the same.
            IAffixes can be pulled from the <see cref="T:Zelda.Items.Affixes.AffixDatabase"/>.
            </remarks>
        </member>
        <member name="P:Zelda.Items.Affixes.IAffix.LocalizedName">
            <summary>
            Gets the localized name of this IAffix.
            </summary>
        </member>
        <member name="M:Zelda.Items.Affixes.IAffix.Apply(Zelda.Items.Item,Zelda.Items.Item)">
            <summary>
            Applies this IAffix to an Item.
            </summary>
            <param name="item">
            The Item that gets directly modified by this IAffix.
            </param>
            <param name="baseItem">
            The base non-modified Item.
            </param>
        </member>
        <member name="M:Zelda.Items.Affixes.IAffix.IsApplyable(Zelda.Items.Item)">
            <summary>
            Gets a value indicating whether this IAffix could
            possibly applied to the given base <see cref="T:Zelda.Items.Item"/>.
            </summary>
            <param name="baseItem">
            The item this IAffix is supposed to be applied to.
            </param>
            <returns>
            True if this IAffix could possible applied to the given <paramref name="baseItem"/>;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Items.Affixes.IAffixedItemInstance">
            <summary>
            The public shared interface of the ItemInstances that
            are pased on <see cref="P:Zelda.Items.Affixes.IAffixedItemInstance.AffixedItem"/>s.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.IAffixedItemInstance.AffixedItem">
            <summary>
            Gets the <see cref="P:Zelda.Items.Affixes.IAffixedItemInstance.AffixedItem"/> the AffixedItemInstance is based on.
            </summary>
        </member>
        <member name="T:Zelda.Items.Affixes.IPrefix">
            <summary>
            An <see cref="T:Zelda.Items.Affixes.ISuffix"/> is an <see cref="T:Zelda.Items.Affixes.IAffix"/>, 
            whose name is added before the BaseItem's name.
            </summary>
            <remarks>
            The prefix of the <see cref="T:Zelda.Items.Affixes.AffixedItem"/> 'Rugged Bone Shield of Sorcery' is 'Rugged'. 
            </remarks>
        </member>
        <member name="T:Zelda.Items.Affixes.ISuffix">
            <summary>
            An <see cref="T:Zelda.Items.Affixes.ISuffix"/> is an <see cref="T:Zelda.Items.Affixes.IAffix"/>, 
            whose name is added behind the BaseItem's name.
            </summary>
            <remarks>
            The suffix of the <see cref="T:Zelda.Items.Affixes.AffixedItem"/> 'Rugged Bone Shield of Sorcery' is 'of Sorcery'. 
            </remarks>
        </member>
        <member name="T:Zelda.Items.Affixes.Prefixes.AcutePrefix">
            <summary>
            The Acute prefix adds '+damage done with damage over time effects' to an Item.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.Prefixes.AcutePrefix.LocalizedName">
            <summary>
            Gets the localized name of this IAffix.
            </summary>
        </member>
        <member name="M:Zelda.Items.Affixes.Prefixes.AcutePrefix.Apply(Zelda.Items.Item,Zelda.Items.Item)">
            <summary>
            Applies this IAffix to an Item.
            </summary>
            <param name="item">
            The Item that gets directly modified by this IAffix.
            </param>
            <param name="baseItem">
            The base non-modified Item.
            </param>
        </member>
        <member name="M:Zelda.Items.Affixes.Prefixes.AcutePrefix.IsApplyable(Zelda.Items.Item)">
            <summary>
            Gets a value indicating whether this IAffix could
            possibly applied to the given base <see cref="T:Zelda.Items.Item"/>.
            </summary>
            <param name="baseItem">
            The item this IAffix is supposed to be applied to.
            </param>
            <returns>
            True if this IAffix could possible applied to the given <paramref name="baseItem"/>;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Items.Affixes.Prefixes.RetardingPrefix">
            <summary>
            The Retarding prefix reduces movement speed by 2% 
            and increases armor of the item by (1 + 5%).
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.Prefixes.RetardingPrefix.LocalizedName">
            <summary>
            Gets the localized name of this IAffix.
            </summary>
        </member>
        <member name="M:Zelda.Items.Affixes.Prefixes.RetardingPrefix.Apply(Zelda.Items.Item,Zelda.Items.Item)">
            <summary>
            Applies this IAffix to an Item.
            </summary>
            <param name="item">
            The Item that gets directly modified by this IAffix.
            </param>
            <param name="baseItem">
            The base non-modified Item.
            </param>
        </member>
        <member name="M:Zelda.Items.Affixes.Prefixes.RetardingPrefix.IsApplyable(Zelda.Items.Item)">
            <summary>
            Gets a value indicating whether this IAffix could
            possibly applied to the given base <see cref="T:Zelda.Items.Item"/>.
            </summary>
            <param name="baseItem">
            The item this IAffix is supposed to be applied to.
            </param>
            <returns>
            True if this IAffix could possible applied to the given <paramref name="baseItem"/>;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Items.Affixes.Prefixes.RustyPrefix">
            <summary>
            The Rusty prefix removes 25% armor of an equipment, or 10% min/max damage of a weapon.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.Prefixes.RustyPrefix.LocalizedName">
            <summary>
            Gets the localized name of this IAffix.
            </summary>
        </member>
        <member name="M:Zelda.Items.Affixes.Prefixes.RustyPrefix.Apply(Zelda.Items.Item,Zelda.Items.Item)">
            <summary>
            Applies this IAffix to an Item.
            </summary>
            <param name="item">
            The Item that gets directly modified by this IAffix.
            </param>
            <param name="baseItem">
            The base non-modified Item.
            </param>
        </member>
        <member name="M:Zelda.Items.Affixes.Prefixes.RustyPrefix.IsApplyable(Zelda.Items.Item)">
            <summary>
            Gets a value indicating whether this IAffix could
            possibly applied to the given base <see cref="T:Zelda.Items.Item"/>.
            </summary>
            <param name="baseItem">
            The item this IAffix is supposed to be applied to.
            </param>
            <returns>
            True if this IAffix could possible applied to the given <paramref name="baseItem"/>;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Items.Affixes.Prefixes.StrondPrefix">
            <summary>
            The Strond prefix removes 25% of all basic stats from an equipment.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.Prefixes.StrondPrefix.LocalizedName">
            <summary>
            Gets the localized name of this IAffix.
            </summary>
        </member>
        <member name="M:Zelda.Items.Affixes.Prefixes.StrondPrefix.Apply(Zelda.Items.Item,Zelda.Items.Item)">
            <summary>
            Applies this IAffix to an Item.
            </summary>
            <param name="item">
            The Item that gets directly modified by this IAffix.
            </param>
            <param name="baseItem">
            The base non-modified Item.
            </param>
        </member>
        <member name="M:Zelda.Items.Affixes.Prefixes.StrondPrefix.IsApplyable(Zelda.Items.Item)">
            <summary>
            Gets a value indicating whether this IAffix could
            possibly applied to the given base <see cref="T:Zelda.Items.Item"/>.
            </summary>
            <param name="baseItem">
            The item this IAffix is supposed to be applied to.
            </param>
            <returns>
            True if this IAffix could possible applied to the given <paramref name="baseItem"/>;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Items.Affixes.Prefixes.UselessPrefix">
            <summary>
            The Useless prefix reduces the possible power difference by 80%.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.Prefixes.UselessPrefix.LocalizedName">
            <summary>
            Gets the localized name of this IAffix.
            </summary>
        </member>
        <member name="M:Zelda.Items.Affixes.Prefixes.UselessPrefix.Apply(Zelda.Items.Item,Zelda.Items.Item)">
            <summary>
            Applies this IAffix to an Item.
            </summary>
            <param name="item">
            The Item that gets directly modified by this IAffix.
            </param>
            <param name="baseItem">
            The base non-modified Item.
            </param>
        </member>
        <member name="M:Zelda.Items.Affixes.Prefixes.UselessPrefix.IsApplyable(Zelda.Items.Item)">
            <summary>
            Gets a value indicating whether this IAffix could
            possibly applied to the given base <see cref="T:Zelda.Items.Item"/>.
            </summary>
            <param name="baseItem">
            The item this IAffix is supposed to be applied to.
            </param>
            <returns>
            True if this IAffix could possible applied to the given <paramref name="baseItem"/>;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Items.Affixes.Prefixes.CemeteryPrefix">
            <summary>
            The Cemetery prefix adds '+damage done to undeads' to an Item.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.Prefixes.CemeteryPrefix.LocalizedName">
            <summary>
            Gets the localized name of this IAffix.
            </summary>
        </member>
        <member name="M:Zelda.Items.Affixes.Prefixes.CemeteryPrefix.Apply(Zelda.Items.Item,Zelda.Items.Item)">
            <summary>
            Applies this IAffix to an Item.
            </summary>
            <param name="item">
            The Item that gets directly modified by this IAffix.
            </param>
            <param name="baseItem">
            The base non-modified Item.
            </param>
        </member>
        <member name="M:Zelda.Items.Affixes.Prefixes.CemeteryPrefix.IsApplyable(Zelda.Items.Item)">
            <summary>
            Gets a value indicating whether this IAffix could
            possibly applied to the given base <see cref="T:Zelda.Items.Item"/>.
            </summary>
            <param name="baseItem">
            The item this IAffix is supposed to be applied to.
            </param>
            <returns>
            True if this IAffix could possible applied to the given <paramref name="baseItem"/>;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Items.Affixes.Prefixes.DeadlyPrefix">
            <summary>
            The Deadly prefix adds 9% to the maximum damage of a weapon.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.Prefixes.DeadlyPrefix.LocalizedName">
            <summary>
            Gets the localized name of this IAffix.
            </summary>
        </member>
        <member name="M:Zelda.Items.Affixes.Prefixes.DeadlyPrefix.Apply(Zelda.Items.Item,Zelda.Items.Item)">
            <summary>
            Applies this IAffix to an Item.
            </summary>
            <param name="item">
            The Item that gets directly modified by this IAffix.
            </param>
            <param name="baseItem">
            The base non-modified Item.
            </param>
        </member>
        <member name="M:Zelda.Items.Affixes.Prefixes.DeadlyPrefix.IsApplyable(Zelda.Items.Item)">
            <summary>
            Gets a value indicating whether this IAffix could
            possibly applied to the given base <see cref="T:Zelda.Items.Item"/>.
            </summary>
            <param name="baseItem">
            The item this IAffix is supposed to be applied to.
            </param>
            <returns>
            True if this IAffix could possible applied to the given <paramref name="baseItem"/>;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Items.Affixes.Prefixes.EdgedPrefix">
            <summary>
            The Edged prefix adds 10% to the minumum damage of a weapon.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.Prefixes.EdgedPrefix.LocalizedName">
            <summary>
            Gets the localized name of this IAffix.
            </summary>
        </member>
        <member name="M:Zelda.Items.Affixes.Prefixes.EdgedPrefix.Apply(Zelda.Items.Item,Zelda.Items.Item)">
            <summary>
            Applies this IAffix to an Item.
            </summary>
            <param name="item">
            The Item that gets directly modified by this IAffix.
            </param>
            <param name="baseItem">
            The base non-modified Item.
            </param>
        </member>
        <member name="M:Zelda.Items.Affixes.Prefixes.EdgedPrefix.IsApplyable(Zelda.Items.Item)">
            <summary>
            Gets a value indicating whether this IAffix could
            possibly applied to the given base <see cref="T:Zelda.Items.Item"/>.
            </summary>
            <param name="baseItem">
            The item this IAffix is supposed to be applied to.
            </param>
            <returns>
            True if this IAffix could possible applied to the given <paramref name="baseItem"/>;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Items.Affixes.Prefixes.EnragingPrefix">
            <summary>
            The Enraging prefix adds '+Melee Damage' to an item.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.Prefixes.EnragingPrefix.LocalizedName">
            <summary>
            Gets the localized name of this IAffix.
            </summary>
        </member>
        <member name="M:Zelda.Items.Affixes.Prefixes.EnragingPrefix.Apply(Zelda.Items.Item,Zelda.Items.Item)">
            <summary>
            Applies this IAffix to an Item.
            </summary>
            <param name="item">
            The Item that gets directly modified by this IAffix.
            </param>
            <param name="baseItem">
            The base non-modified Item.
            </param>
        </member>
        <member name="M:Zelda.Items.Affixes.Prefixes.EnragingPrefix.IsApplyable(Zelda.Items.Item)">
            <summary>
            Gets a value indicating whether this IAffix could
            possibly applied to the given base <see cref="T:Zelda.Items.Item"/>.
            </summary>
            <param name="baseItem">
            The item this IAffix is supposed to be applied to.
            </param>
            <returns>
            True if this IAffix could possible applied to the given <paramref name="baseItem"/>;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Items.Affixes.Prefixes.EnrichedPrefix">
            <summary>
            The 'Enriched' prefix adds LUCK and SPELL PENETRATION RATING to
            an item.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.Prefixes.EnrichedPrefix.LocalizedName">
            <summary>
            Gets the localized name of this IAffix.
            </summary>
        </member>
        <member name="M:Zelda.Items.Affixes.Prefixes.EnrichedPrefix.Apply(Zelda.Items.Item,Zelda.Items.Item)">
            <summary>
            Applies this IAffix to an Item.
            </summary>
            <param name="item">
            The Item that gets directly modified by this IAffix.
            </param>
            <param name="baseItem">
            The base non-modified Item.
            </param>
        </member>
        <member name="M:Zelda.Items.Affixes.Prefixes.EnrichedPrefix.IsApplyable(Zelda.Items.Item)">
            <summary>
            Gets a value indicating whether this IAffix could
            possibly applied to the given base <see cref="T:Zelda.Items.Item"/>.
            </summary>
            <param name="baseItem">
            The item this IAffix is supposed to be applied to.
            </param>
            <returns>
            True if this IAffix could possible applied to the given <paramref name="baseItem"/>;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Items.Affixes.Prefixes.FlexiblePrefix">
            <summary>
            The Flexible prefix increases the attack speed of a weapon by 10%.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.Prefixes.FlexiblePrefix.LocalizedName">
            <summary>
            Gets the localized name of this IAffix.
            </summary>
        </member>
        <member name="M:Zelda.Items.Affixes.Prefixes.FlexiblePrefix.Apply(Zelda.Items.Item,Zelda.Items.Item)">
            <summary>
            Applies this IAffix to an Item.
            </summary>
            <param name="item">
            The Item that gets directly modified by this IAffix.
            </param>
            <param name="baseItem">
            The base non-modified Item.
            </param>
        </member>
        <member name="M:Zelda.Items.Affixes.Prefixes.FlexiblePrefix.IsApplyable(Zelda.Items.Item)">
            <summary>
            Gets a value indicating whether this IAffix could
            possibly applied to the given base <see cref="T:Zelda.Items.Item"/>.
            </summary>
            <param name="baseItem">
            The item this IAffix is supposed to be applied to.
            </param>
            <returns>
            True if this IAffix could possible applied to the given <paramref name="baseItem"/>;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Items.Affixes.Prefixes.ForcefulPrefix">
            <summary>
            The Forceful prefix adds 1 + 12.5% of item-level Strength to a Weapon.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.Prefixes.ForcefulPrefix.LocalizedName">
            <summary>
            Gets the localized name of this IAffix.
            </summary>
        </member>
        <member name="M:Zelda.Items.Affixes.Prefixes.ForcefulPrefix.Apply(Zelda.Items.Item,Zelda.Items.Item)">
            <summary>
            Applies this IAffix to an Item.
            </summary>
            <param name="item">
            The Item that gets directly modified by this IAffix.
            </param>
            <param name="baseItem">
            The base non-modified Item.
            </param>
        </member>
        <member name="M:Zelda.Items.Affixes.Prefixes.ForcefulPrefix.IsApplyable(Zelda.Items.Item)">
            <summary>
            Gets a value indicating whether this IAffix could
            possibly applied to the given base <see cref="T:Zelda.Items.Item"/>.
            </summary>
            <param name="baseItem">
            The item this IAffix is supposed to be applied to.
            </param>
            <returns>
            True if this IAffix could possible applied to the given <paramref name="baseItem"/>;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Items.Affixes.Prefixes.GoldenPrefix">
            <summary>
            The Golden prefix increasing the possible power difference by 20%.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.Prefixes.GoldenPrefix.LocalizedName">
            <summary>
            Gets the localized name of this IAffix.
            </summary>
        </member>
        <member name="M:Zelda.Items.Affixes.Prefixes.GoldenPrefix.Apply(Zelda.Items.Item,Zelda.Items.Item)">
            <summary>
            Applies this IAffix to an Item.
            </summary>
            <param name="item">
            The Item that gets directly modified by this IAffix.
            </param>
            <param name="baseItem">
            The base non-modified Item.
            </param>
        </member>
        <member name="M:Zelda.Items.Affixes.Prefixes.GoldenPrefix.IsApplyable(Zelda.Items.Item)">
            <summary>
            Gets a value indicating whether this IAffix could
            possibly applied to the given base <see cref="T:Zelda.Items.Item"/>.
            </summary>
            <param name="baseItem">
            The item this IAffix is supposed to be applied to.
            </param>
            <returns>
            True if this IAffix could possible applied to the given <paramref name="baseItem"/>;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Items.Affixes.Prefixes.HauntingPrefix">
            <summary>
            The Enraging prefix adds '+X Chance To Be Missed Rating' to an item.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.Prefixes.HauntingPrefix.LocalizedName">
            <summary>
            Gets the localized name of this IAffix.
            </summary>
        </member>
        <member name="M:Zelda.Items.Affixes.Prefixes.HauntingPrefix.Apply(Zelda.Items.Item,Zelda.Items.Item)">
            <summary>
            Applies this IAffix to an Item.
            </summary>
            <param name="item">
            The Item that gets directly modified by this IAffix.
            </param>
            <param name="baseItem">
            The base non-modified Item.
            </param>
        </member>
        <member name="M:Zelda.Items.Affixes.Prefixes.HauntingPrefix.IsApplyable(Zelda.Items.Item)">
            <summary>
            Gets a value indicating whether this IAffix could
            possibly applied to the given base <see cref="T:Zelda.Items.Item"/>.
            </summary>
            <param name="baseItem">
            The item this IAffix is supposed to be applied to.
            </param>
            <returns>
            True if this IAffix could possible applied to the given <paramref name="baseItem"/>;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Items.Affixes.Prefixes.HeavyPrefix">
            <summary>
            The Rusty prefix adds 35% armor of an equipment, but also makes it 25% harder to wear.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.Prefixes.HeavyPrefix.LocalizedName">
            <summary>
            Gets the localized name of this IAffix.
            </summary>
        </member>
        <member name="M:Zelda.Items.Affixes.Prefixes.HeavyPrefix.Apply(Zelda.Items.Item,Zelda.Items.Item)">
            <summary>
            Applies this IAffix to an Item.
            </summary>
            <param name="item">
            The Item that gets directly modified by this IAffix.
            </param>
            <param name="baseItem">
            The base non-modified Item.
            </param>
        </member>
        <member name="M:Zelda.Items.Affixes.Prefixes.HeavyPrefix.IsApplyable(Zelda.Items.Item)">
            <summary>
            Gets a value indicating whether this IAffix could
            possibly applied to the given base <see cref="T:Zelda.Items.Item"/>.
            </summary>
            <param name="baseItem">
            The item this IAffix is supposed to be applied to.
            </param>
            <returns>
            True if this IAffix could possible applied to the given <paramref name="baseItem"/>;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Items.Affixes.Prefixes.ImpetuousPrefix">
            <summary>
            The 'Impetuous' prefix adds '3 + 55% item-level' attack speed and cast haste rating to an Item.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.Prefixes.ImpetuousPrefix.LocalizedName">
            <summary>
            Gets the localized name of this IAffix.
            </summary>
        </member>
        <member name="M:Zelda.Items.Affixes.Prefixes.ImpetuousPrefix.Apply(Zelda.Items.Item,Zelda.Items.Item)">
            <summary>
            Applies this IAffix to an Item.
            </summary>
            <param name="item">
            The Item that gets directly modified by this IAffix.
            </param>
            <param name="baseItem">
            The base non-modified Item.
            </param>
        </member>
        <member name="M:Zelda.Items.Affixes.Prefixes.ImpetuousPrefix.IsApplyable(Zelda.Items.Item)">
            <summary>
            Gets a value indicating whether this IAffix could
            possibly applied to the given base <see cref="T:Zelda.Items.Item"/>.
            </summary>
            <param name="baseItem">
            The item this IAffix is supposed to be applied to.
            </param>
            <returns>
            True if this IAffix could possible applied to the given <paramref name="baseItem"/>;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Items.Affixes.Prefixes.InflamedPrefix">
            <summary>
            The Inflamed prefix adds '+120% of item-level Fire Spell Power' to a weapon.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.Prefixes.InflamedPrefix.LocalizedName">
            <summary>
            Gets the localized name of this IAffix.
            </summary>
        </member>
        <member name="M:Zelda.Items.Affixes.Prefixes.InflamedPrefix.Apply(Zelda.Items.Item,Zelda.Items.Item)">
            <summary>
            Applies this IAffix to an Item.
            </summary>
            <param name="item">
            The Item that gets directly modified by this IAffix.
            </param>
            <param name="baseItem">
            The base non-modified Item.
            </param>
        </member>
        <member name="M:Zelda.Items.Affixes.Prefixes.InflamedPrefix.IsApplyable(Zelda.Items.Item)">
            <summary>
            Gets a value indicating whether this IAffix could
            possibly applied to the given base <see cref="T:Zelda.Items.Item"/>.
            </summary>
            <param name="baseItem">
            The item this IAffix is supposed to be applied to.
            </param>
            <returns>
            True if this IAffix could possible applied to the given <paramref name="baseItem"/>;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Items.Affixes.Prefixes.OiledPrefix">
            <summary>
            The 'of Feathers' suffix adds 1 + 8% of item-level Movement Speed, Attack Speed and Attack Haste Rating to an Item.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.Prefixes.OiledPrefix.LocalizedName">
            <summary>
            Gets the localized name of this IAffix.
            </summary>
        </member>
        <member name="M:Zelda.Items.Affixes.Prefixes.OiledPrefix.Apply(Zelda.Items.Item,Zelda.Items.Item)">
            <summary>
            Applies this IAffix to an Item.
            </summary>
            <param name="item">
            The Item that gets directly modified by this IAffix.
            </param>
            <param name="baseItem">
            The base non-modified Item.
            </param>
        </member>
        <member name="M:Zelda.Items.Affixes.Prefixes.OiledPrefix.IsApplyable(Zelda.Items.Item)">
            <summary>
            Gets a value indicating whether this IAffix could
            possibly applied to the given base <see cref="T:Zelda.Items.Item"/>.
            </summary>
            <param name="baseItem">
            The item this IAffix is supposed to be applied to.
            </param>
            <returns>
            True if this IAffix could possible applied to the given <paramref name="baseItem"/>;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Items.Affixes.Prefixes.OrnatePrefix">
            <summary>
            The Ornate prefix adds 50% to the sell price of an item.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.Prefixes.OrnatePrefix.LocalizedName">
            <summary>
            Gets the localized name of this IAffix.
            </summary>
        </member>
        <member name="M:Zelda.Items.Affixes.Prefixes.OrnatePrefix.Apply(Zelda.Items.Item,Zelda.Items.Item)">
            <summary>
            Applies this IAffix to an Item.
            </summary>
            <param name="item">
            The Item that gets directly modified by this IAffix.
            </param>
            <param name="baseItem">
            The base non-modified Item.
            </param>
        </member>
        <member name="M:Zelda.Items.Affixes.Prefixes.OrnatePrefix.IsApplyable(Zelda.Items.Item)">
            <summary>
            Gets a value indicating whether this IAffix could
            possibly applied to the given base <see cref="T:Zelda.Items.Item"/>.
            </summary>
            <param name="baseItem">
            The item this IAffix is supposed to be applied to.
            </param>
            <returns>
            True if this IAffix could possible applied to the given <paramref name="baseItem"/>;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Items.Affixes.Prefixes.PenetratingPrefix">
            <summary>
            The Penetrating prefix adds '+chance to pierce with ranged attacks' to a melee or ranged weapon.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.Prefixes.PenetratingPrefix.LocalizedName">
            <summary>
            Gets the localized name of this IAffix.
            </summary>
        </member>
        <member name="M:Zelda.Items.Affixes.Prefixes.PenetratingPrefix.Apply(Zelda.Items.Item,Zelda.Items.Item)">
            <summary>
            Applies this IAffix to an Item.
            </summary>
            <param name="item">
            The Item that gets directly modified by this IAffix.
            </param>
            <param name="baseItem">
            The base non-modified Item.
            </param>
        </member>
        <member name="M:Zelda.Items.Affixes.Prefixes.PenetratingPrefix.IsApplyable(Zelda.Items.Item)">
            <summary>
            Gets a value indicating whether this IAffix could
            possibly applied to the given base <see cref="T:Zelda.Items.Item"/>.
            </summary>
            <param name="baseItem">
            The item this IAffix is supposed to be applied to.
            </param>
            <returns>
            True if this IAffix could possible applied to the given <paramref name="baseItem"/>;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Items.Affixes.Prefixes.PerforatedPrefix">
            <summary>
            The Perforated prefix adds an additional Socket to a juwel or an item that already has sockets.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.Prefixes.PerforatedPrefix.LocalizedName">
            <summary>
            Gets the localized name of this IAffix.
            </summary>
        </member>
        <member name="M:Zelda.Items.Affixes.Prefixes.PerforatedPrefix.Apply(Zelda.Items.Item,Zelda.Items.Item)">
            <summary>
            Applies this IAffix to an Item.
            </summary>
            <param name="item">
            The Item that gets directly modified by this IAffix.
            </param>
            <param name="baseItem">
            The base non-modified Item.
            </param>
        </member>
        <member name="M:Zelda.Items.Affixes.Prefixes.PerforatedPrefix.IsApplyable(Zelda.Items.Item)">
            <summary>
            Gets a value indicating whether this IAffix could
            possibly applied to the given base <see cref="T:Zelda.Items.Item"/>.
            </summary>
            <param name="baseItem">
            The item this IAffix is supposed to be applied to.
            </param>
            <returns>
            True if this IAffix could possible applied to the given <paramref name="baseItem"/>;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Items.Affixes.Prefixes.PiercingPrefix">
            <summary>
            The Piercing prefix adds ',1 + ItemLevel, Piercing Chance Rating' to an bow.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.Prefixes.PiercingPrefix.LocalizedName">
            <summary>
            Gets the localized name of this IAffix.
            </summary>
        </member>
        <member name="M:Zelda.Items.Affixes.Prefixes.PiercingPrefix.Apply(Zelda.Items.Item,Zelda.Items.Item)">
            <summary>
            Applies this IAffix to an Item.
            </summary>
            <param name="item">
            The Item that gets directly modified by this IAffix.
            </param>
            <param name="baseItem">
            The base non-modified Item.
            </param>
        </member>
        <member name="M:Zelda.Items.Affixes.Prefixes.PiercingPrefix.IsApplyable(Zelda.Items.Item)">
            <summary>
            Gets a value indicating whether this IAffix could
            possibly applied to the given base <see cref="T:Zelda.Items.Item"/>.
            </summary>
            <param name="baseItem">
            The item this IAffix is supposed to be applied to.
            </param>
            <returns>
            True if this IAffix could possible applied to the given <paramref name="baseItem"/>;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Items.Affixes.Prefixes.PoisonedPrefix">
            <summary>
            The Poisoned prefix adds '+108% of item-level poison damage' to a weapon.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.Prefixes.PoisonedPrefix.LocalizedName">
            <summary>
            Gets the localized name of this IAffix.
            </summary>
        </member>
        <member name="M:Zelda.Items.Affixes.Prefixes.PoisonedPrefix.Apply(Zelda.Items.Item,Zelda.Items.Item)">
            <summary>
            Applies this IAffix to an Item.
            </summary>
            <param name="item">
            The Item that gets directly modified by this IAffix.
            </param>
            <param name="baseItem">
            The base non-modified Item.
            </param>
        </member>
        <member name="M:Zelda.Items.Affixes.Prefixes.PoisonedPrefix.IsApplyable(Zelda.Items.Item)">
            <summary>
            Gets a value indicating whether this IAffix could
            possibly applied to the given base <see cref="T:Zelda.Items.Item"/>.
            </summary>
            <param name="baseItem">
            The item this IAffix is supposed to be applied to.
            </param>
            <returns>
            True if this IAffix could possible applied to the given <paramref name="baseItem"/>;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Items.Affixes.Prefixes.PrecisePrefix">
            <summary>
            The Precise prefix adds '+% chance to hit' to a weapon.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.Prefixes.PrecisePrefix.LocalizedName">
            <summary>
            Gets the localized name of this IAffix.
            </summary>
        </member>
        <member name="M:Zelda.Items.Affixes.Prefixes.PrecisePrefix.Apply(Zelda.Items.Item,Zelda.Items.Item)">
            <summary>
            Applies this IAffix to an Item.
            </summary>
            <param name="item">
            The Item that gets directly modified by this IAffix.
            </param>
            <param name="baseItem">
            The base non-modified Item.
            </param>
        </member>
        <member name="M:Zelda.Items.Affixes.Prefixes.PrecisePrefix.IsApplyable(Zelda.Items.Item)">
            <summary>
            Gets a value indicating whether this IAffix could
            possibly applied to the given base <see cref="T:Zelda.Items.Item"/>.
            </summary>
            <param name="baseItem">
            The item this IAffix is supposed to be applied to.
            </param>
            <returns>
            True if this IAffix could possible applied to the given <paramref name="baseItem"/>;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Items.Affixes.Prefixes.PulsatingPrefix">
            <summary>
            The 'Pulsating' prefix randomly chooses another IPrefix
            every time the IPrefix is applied.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.Prefixes.PulsatingPrefix.LocalizedName">
            <summary>
            Gets the localized name of this IAffix.
            </summary>
        </member>
        <member name="M:Zelda.Items.Affixes.Prefixes.PulsatingPrefix.#ctor(Atom.Math.RandMT)">
            <summary>
            Initializes a new instance of the PulsatingPrefix class.
            </summary>
            <param name="rand">
            A random number generator.
            </param>
        </member>
        <member name="M:Zelda.Items.Affixes.Prefixes.PulsatingPrefix.Apply(Zelda.Items.Item,Zelda.Items.Item)">
            <summary>
            Applies this IAffix to an Item.
            </summary>
            <param name="item">
            The Item that gets directly modified by this IAffix.
            </param>
            <param name="baseItem">
            The base non-modified Item.
            </param>
        </member>
        <member name="M:Zelda.Items.Affixes.Prefixes.PulsatingPrefix.GetAffix(Zelda.Items.Item)">
            <summary>
            Gets the IAffix that should be used for the specified Item.
            </summary>
            <param name="baseItem">
            The base non-modified Item.
            </param>
            <returns>
            An IAffix; or null.
            </returns>
        </member>
        <member name="M:Zelda.Items.Affixes.Prefixes.PulsatingPrefix.IsPrefixAllowed(Zelda.Items.Affixes.IPrefix)">
            <summary>
            Gets a value indicating whether the specified IPrefix is allowed to be used by the PulsatingPrefix.
            </summary>
            <param name="prefix">
            The IPrefix to investigate.
            </param>
            <returns>
            true if the IPrefix can be used;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Items.Affixes.Prefixes.PulsatingPrefix.IsSuffixAllowed(Zelda.Items.Affixes.ISuffix)">
            <summary>
            Gets a value indicating whether the specified ISuffix is allowed to be used by the PulsatingPrefix.
            </summary>
            <param name="suffix">
            The ISuffix to investigate.
            </param>
            <returns>
            true if the ISuffix can be used;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Items.Affixes.Prefixes.PulsatingPrefix.IsApplyable(Zelda.Items.Item)">
            <summary>
            Gets a value indicating whether this IAffix could
            possibly applied to the given base <see cref="T:Zelda.Items.Item"/>.
            </summary>
            <param name="baseItem">
            The item this IAffix is supposed to be applied to.
            </param>
            <returns>
            True if this IAffix could possible applied to the given <paramref name="baseItem"/>;
            otherwise false.
            </returns>
        </member>
        <member name="F:Zelda.Items.Affixes.Prefixes.PulsatingPrefix.rand">
            <summary>
            A random number generator.
            </summary>
        </member>
        <member name="T:Zelda.Items.Affixes.Prefixes.BlackenedPrefix">
            <summary>
            The Blackened prefix adds shadow resistance to an Item.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.Prefixes.BlackenedPrefix.LocalizedName">
            <summary>
            Gets the localized name of this IAffix.
            </summary>
        </member>
        <member name="M:Zelda.Items.Affixes.Prefixes.BlackenedPrefix.Apply(Zelda.Items.Item,Zelda.Items.Item)">
            <summary>
            Applies this IAffix to an Item.
            </summary>
            <param name="item">
            The Item that gets directly modified by this IAffix.
            </param>
            <param name="baseItem">
            The base non-modified Item.
            </param>
        </member>
        <member name="M:Zelda.Items.Affixes.Prefixes.BlackenedPrefix.IsApplyable(Zelda.Items.Item)">
            <summary>
            Gets a value indicating whether this IAffix could
            possibly applied to the given base <see cref="T:Zelda.Items.Item"/>.
            </summary>
            <param name="baseItem">
            The item this IAffix is supposed to be applied to.
            </param>
            <returns>
            True if this IAffix could possible applied to the given <paramref name="baseItem"/>;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Items.Affixes.Prefixes.EmeraldPrefix">
            <summary>
            The Emerald prefix adds nature resistance to an Item.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.Prefixes.EmeraldPrefix.LocalizedName">
            <summary>
            Gets the localized name of this IAffix.
            </summary>
        </member>
        <member name="M:Zelda.Items.Affixes.Prefixes.EmeraldPrefix.Apply(Zelda.Items.Item,Zelda.Items.Item)">
            <summary>
            Applies this IAffix to an Item.
            </summary>
            <param name="item">
            The Item that gets directly modified by this IAffix.
            </param>
            <param name="baseItem">
            The base non-modified Item.
            </param>
        </member>
        <member name="M:Zelda.Items.Affixes.Prefixes.EmeraldPrefix.IsApplyable(Zelda.Items.Item)">
            <summary>
            Gets a value indicating whether this IAffix could
            possibly applied to the given base <see cref="T:Zelda.Items.Item"/>.
            </summary>
            <param name="baseItem">
            The item this IAffix is supposed to be applied to.
            </param>
            <returns>
            True if this IAffix could possible applied to the given <paramref name="baseItem"/>;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Items.Affixes.Prefixes.RainbowPrefix">
            <summary>
            The Rainbow prefix adds +All resistance to an Item.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.Prefixes.RainbowPrefix.LocalizedName">
            <summary>
            Gets the localized name of this IAffix.
            </summary>
        </member>
        <member name="M:Zelda.Items.Affixes.Prefixes.RainbowPrefix.Apply(Zelda.Items.Item,Zelda.Items.Item)">
            <summary>
            Applies this IAffix to an Item.
            </summary>
            <param name="item">
            The Item that gets directly modified by this IAffix.
            </param>
            <param name="baseItem">
            The base non-modified Item.
            </param>
        </member>
        <member name="M:Zelda.Items.Affixes.Prefixes.RainbowPrefix.IsApplyable(Zelda.Items.Item)">
            <summary>
            Gets a value indicating whether this IAffix could
            possibly applied to the given base <see cref="T:Zelda.Items.Item"/>.
            </summary>
            <param name="baseItem">
            The item this IAffix is supposed to be applied to.
            </param>
            <returns>
            True if this IAffix could possible applied to the given <paramref name="baseItem"/>;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Items.Affixes.Prefixes.RubyPrefix">
            <summary>
            The Ruby prefix adds fire resistance to an Item.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.Prefixes.RubyPrefix.LocalizedName">
            <summary>
            Gets the localized name of this IAffix.
            </summary>
        </member>
        <member name="M:Zelda.Items.Affixes.Prefixes.RubyPrefix.Apply(Zelda.Items.Item,Zelda.Items.Item)">
            <summary>
            Applies this IAffix to an Item.
            </summary>
            <param name="item">
            The Item that gets directly modified by this IAffix.
            </param>
            <param name="baseItem">
            The base non-modified Item.
            </param>
        </member>
        <member name="M:Zelda.Items.Affixes.Prefixes.RubyPrefix.IsApplyable(Zelda.Items.Item)">
            <summary>
            Gets a value indicating whether this IAffix could
            possibly applied to the given base <see cref="T:Zelda.Items.Item"/>.
            </summary>
            <param name="baseItem">
            The item this IAffix is supposed to be applied to.
            </param>
            <returns>
            True if this IAffix could possible applied to the given <paramref name="baseItem"/>;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Items.Affixes.Prefixes.RiskyPrefix">
            <summary>
            The Risky prefix decreases the minimum damage and increases the maximum damage of a weapon. 
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.Prefixes.RiskyPrefix.LocalizedName">
            <summary>
            Gets the localized name of this IAffix.
            </summary>
        </member>
        <member name="M:Zelda.Items.Affixes.Prefixes.RiskyPrefix.Apply(Zelda.Items.Item,Zelda.Items.Item)">
            <summary>
            Applies this IAffix to an Item.
            </summary>
            <param name="item">
            The Item that gets directly modified by this IAffix.
            </param>
            <param name="baseItem">
            The base non-modified Item.
            </param>
        </member>
        <member name="M:Zelda.Items.Affixes.Prefixes.RiskyPrefix.IsApplyable(Zelda.Items.Item)">
            <summary>
            Gets a value indicating whether this IAffix could
            possibly applied to the given base <see cref="T:Zelda.Items.Item"/>.
            </summary>
            <param name="baseItem">
            The item this IAffix is supposed to be applied to.
            </param>
            <returns>
            True if this IAffix could possible applied to the given <paramref name="baseItem"/>;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Items.Affixes.Prefixes.RuggedPrefix">
            <summary>
            The Rugged prefix adds 1 + 10% of item-level Vitality to an Item.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.Prefixes.RuggedPrefix.LocalizedName">
            <summary>
            Gets the localized name of this IAffix.
            </summary>
        </member>
        <member name="M:Zelda.Items.Affixes.Prefixes.RuggedPrefix.Apply(Zelda.Items.Item,Zelda.Items.Item)">
            <summary>
            Applies this IAffix to an Item.
            </summary>
            <param name="item">
            The Item that gets directly modified by this IAffix.
            </param>
            <param name="baseItem">
            The base non-modified Item.
            </param>
        </member>
        <member name="M:Zelda.Items.Affixes.Prefixes.RuggedPrefix.IsApplyable(Zelda.Items.Item)">
            <summary>
            Gets a value indicating whether this IAffix could
            possibly applied to the given base <see cref="T:Zelda.Items.Item"/>.
            </summary>
            <param name="baseItem">
            The item this IAffix is supposed to be applied to.
            </param>
            <returns>
            True if this IAffix could possible applied to the given <paramref name="baseItem"/>;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Items.Affixes.Prefixes.ScintillantPrefix">
            <summary>
            The Scintillant prefix adds Spell Power to an item.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.Prefixes.ScintillantPrefix.LocalizedName">
            <summary>
            Gets the localized name of this IAffix.
            </summary>
        </member>
        <member name="M:Zelda.Items.Affixes.Prefixes.ScintillantPrefix.Apply(Zelda.Items.Item,Zelda.Items.Item)">
            <summary>
            Applies this IAffix to an Item.
            </summary>
            <param name="item">
            The Item that gets directly modified by this IAffix.
            </param>
            <param name="baseItem">
            The base non-modified Item.
            </param>
        </member>
        <member name="M:Zelda.Items.Affixes.Prefixes.ScintillantPrefix.IsApplyable(Zelda.Items.Item)">
            <summary>
            Gets a value indicating whether this IAffix could
            possibly applied to the given base <see cref="T:Zelda.Items.Item"/>.
            </summary>
            <param name="baseItem">
            The item this IAffix is supposed to be applied to.
            </param>
            <returns>
            True if this IAffix could possible applied to the given <paramref name="baseItem"/>;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Items.Affixes.Prefixes.SlipperyPrefix">
            <summary>
            The Slippery prefix adds '+X Dodge Rating' to an item.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.Prefixes.SlipperyPrefix.LocalizedName">
            <summary>
            Gets the localized name of this IAffix.
            </summary>
        </member>
        <member name="M:Zelda.Items.Affixes.Prefixes.SlipperyPrefix.Apply(Zelda.Items.Item,Zelda.Items.Item)">
            <summary>
            Applies this IAffix to an Item.
            </summary>
            <param name="item">
            The Item that gets directly modified by this IAffix.
            </param>
            <param name="baseItem">
            The base non-modified Item.
            </param>
        </member>
        <member name="M:Zelda.Items.Affixes.Prefixes.SlipperyPrefix.IsApplyable(Zelda.Items.Item)">
            <summary>
            Gets a value indicating whether this IAffix could
            possibly applied to the given base <see cref="T:Zelda.Items.Item"/>.
            </summary>
            <param name="baseItem">
            The item this IAffix is supposed to be applied to.
            </param>
            <returns>
            True if this IAffix could possible applied to the given <paramref name="baseItem"/>;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Items.Affixes.Prefixes.SturdyPrefix">
            <summary>
            The Sturdy prefix adds '2 + 10% + 10% of item-level' armor to an Item.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.Prefixes.SturdyPrefix.LocalizedName">
            <summary>
            Gets the localized name of this IAffix.
            </summary>
        </member>
        <member name="M:Zelda.Items.Affixes.Prefixes.SturdyPrefix.Apply(Zelda.Items.Item,Zelda.Items.Item)">
            <summary>
            Applies this IAffix to an Item.
            </summary>
            <param name="item">
            The Item that gets directly modified by this IAffix.
            </param>
            <param name="baseItem">
            The base non-modified Item.
            </param>
        </member>
        <member name="M:Zelda.Items.Affixes.Prefixes.SturdyPrefix.IsApplyable(Zelda.Items.Item)">
            <summary>
            Gets a value indicating whether this IAffix could
            possibly applied to the given base <see cref="T:Zelda.Items.Item"/>.
            </summary>
            <param name="baseItem">
            The item this IAffix is supposed to be applied to.
            </param>
            <returns>
            True if this IAffix could possible applied to the given <paramref name="baseItem"/>;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Items.Affixes.Suffixes.OfAssassinationSuffix">
            <summary>
            The 'of Assassination' suffix adds '1 + 75% item-level' dodge rating
            and '1 + 15% item-level' dagger damage to an item.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.Suffixes.OfAssassinationSuffix.LocalizedName">
            <summary>
            Gets the localized name of this IAffix.
            </summary>
        </member>
        <member name="M:Zelda.Items.Affixes.Suffixes.OfAssassinationSuffix.Apply(Zelda.Items.Item,Zelda.Items.Item)">
            <summary>
            Applies this IAffix to an Item.
            </summary>
            <param name="item">
            The Item that gets directly modified by this IAffix.
            </param>
            <param name="baseItem">
            The base non-modified Item.
            </param>
        </member>
        <member name="M:Zelda.Items.Affixes.Suffixes.OfAssassinationSuffix.IsApplyable(Zelda.Items.Item)">
            <summary>
            Gets a value indicating whether this IAffix could
            possibly applied to the given base <see cref="T:Zelda.Items.Item"/>.
            </summary>
            <param name="baseItem">
            The item this IAffix is supposed to be applied to.
            </param>
            <returns>
            True if this IAffix could possible applied to the given <paramref name="baseItem"/>;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Items.Affixes.Suffixes.OfBerserkerRageSuffix">
            <summary>
            The 'of Berserker Rage' suffix adds '1 + 15% of item-level' damage done with Two-handed Swords.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.Suffixes.OfBerserkerRageSuffix.LocalizedName">
            <summary>
            Gets the localized name of this IAffix.
            </summary>
        </member>
        <member name="M:Zelda.Items.Affixes.Suffixes.OfBerserkerRageSuffix.Apply(Zelda.Items.Item,Zelda.Items.Item)">
            <summary>
            Applies this IAffix to an Item.
            </summary>
            <param name="item">
            The Item that gets directly modified by this IAffix.
            </param>
            <param name="baseItem">
            The base non-modified Item.
            </param>
        </member>
        <member name="M:Zelda.Items.Affixes.Suffixes.OfBerserkerRageSuffix.IsApplyable(Zelda.Items.Item)">
            <summary>
            Gets a value indicating whether this IAffix could
            possibly applied to the given base <see cref="T:Zelda.Items.Item"/>.
            </summary>
            <param name="baseItem">
            The item this IAffix is supposed to be applied to.
            </param>
            <returns>
            True if this IAffix could possible applied to the given <paramref name="baseItem"/>;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Items.Affixes.Suffixes.OfCorruptionSuffix">
            <summary>
            The 'of Corruption' suffix removes X life/mana and adds Y magic damage to an item.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.Suffixes.OfCorruptionSuffix.LocalizedName">
            <summary>
            Gets the localized name of this IAffix.
            </summary>
        </member>
        <member name="M:Zelda.Items.Affixes.Suffixes.OfCorruptionSuffix.Apply(Zelda.Items.Item,Zelda.Items.Item)">
            <summary>
            Applies this IAffix to an Item.
            </summary>
            <param name="item">
            The Item that gets directly modified by this IAffix.
            </param>
            <param name="baseItem">
            The base non-modified Item.
            </param>
        </member>
        <member name="M:Zelda.Items.Affixes.Suffixes.OfCorruptionSuffix.IsApplyable(Zelda.Items.Item)">
            <summary>
            Gets a value indicating whether this IAffix could
            possibly applied to the given base <see cref="T:Zelda.Items.Item"/>.
            </summary>
            <param name="baseItem">
            The item this IAffix is supposed to be applied to.
            </param>
            <returns>
            True if this IAffix could possible applied to the given <paramref name="baseItem"/>;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Items.Affixes.Suffixes.OfCourageSuffix">
            <summary>
            The 'of Courage' suffix adds Life and Life Regeneration to an Item.
            </summary>
            <remarks>
            This suffix is based on the idea that the goddess of Courage, Farore,
            is the source of all life that exists within the world of Hyrule.
            </remarks>
        </member>
        <member name="P:Zelda.Items.Affixes.Suffixes.OfCourageSuffix.LocalizedName">
            <summary>
            Gets the localized name of this IAffix.
            </summary>
        </member>
        <member name="M:Zelda.Items.Affixes.Suffixes.OfCourageSuffix.Apply(Zelda.Items.Item,Zelda.Items.Item)">
            <summary>
            Applies this IAffix to an Item.
            </summary>
            <param name="item">
            The Item that gets directly modified by this IAffix.
            </param>
            <param name="baseItem">
            The base non-modified Item.
            </param>
        </member>
        <member name="M:Zelda.Items.Affixes.Suffixes.OfCourageSuffix.IsApplyable(Zelda.Items.Item)">
            <summary>
            Gets a value indicating whether this IAffix could
            possibly applied to the given base <see cref="T:Zelda.Items.Item"/>.
            </summary>
            <param name="baseItem">
            The item this IAffix is supposed to be applied to.
            </param>
            <returns>
            True if this IAffix could possible applied to the given <paramref name="baseItem"/>;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Items.Affixes.Suffixes.OfDefensivenesSuffix">
            <summary>
            The 'of Defensivenes' suffix adds '-2.0% damage done and -2.0% damage taken' to an item.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.Suffixes.OfDefensivenesSuffix.LocalizedName">
            <summary>
            Gets the localized name of this IAffix.
            </summary>
        </member>
        <member name="M:Zelda.Items.Affixes.Suffixes.OfDefensivenesSuffix.Apply(Zelda.Items.Item,Zelda.Items.Item)">
            <summary>
            Applies this IAffix to an Item.
            </summary>
            <param name="item">
            The Item that gets directly modified by this IAffix.
            </param>
            <param name="baseItem">
            The base non-modified Item.
            </param>
        </member>
        <member name="M:Zelda.Items.Affixes.Suffixes.OfDefensivenesSuffix.IsApplyable(Zelda.Items.Item)">
            <summary>
            Gets a value indicating whether this IAffix could
            possibly applied to the given base <see cref="T:Zelda.Items.Item"/>.
            </summary>
            <param name="baseItem">
            The item this IAffix is supposed to be applied to.
            </param>
            <returns>
            True if this IAffix could possible applied to the given <paramref name="baseItem"/>;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Items.Affixes.Suffixes.OfDoomSuffix">
            <summary>
            The 'of Doom' suffix adds '0.1 + 2.0% of item-level' Crit Chance to an Item.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.Suffixes.OfDoomSuffix.LocalizedName">
            <summary>
            Gets the localized name of this IAffix.
            </summary>
        </member>
        <member name="M:Zelda.Items.Affixes.Suffixes.OfDoomSuffix.Apply(Zelda.Items.Item,Zelda.Items.Item)">
            <summary>
            Applies this IAffix to an Item.
            </summary>
            <param name="item">
            The Item that gets directly modified by this IAffix.
            </param>
            <param name="baseItem">
            The base non-modified Item.
            </param>
        </member>
        <member name="M:Zelda.Items.Affixes.Suffixes.OfDoomSuffix.IsApplyable(Zelda.Items.Item)">
            <summary>
            Gets a value indicating whether this IAffix could
            possibly applied to the given base <see cref="T:Zelda.Items.Item"/>.
            </summary>
            <param name="baseItem">
            The item this IAffix is supposed to be applied to.
            </param>
            <returns>
            True if this IAffix could possible applied to the given <paramref name="baseItem"/>;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Items.Affixes.Suffixes.OfEaseSuffix">
            <summary>
            The 'of Ease' suffix makes an item 35% easier to wear.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.Suffixes.OfEaseSuffix.LocalizedName">
            <summary>
            Gets the localized name of this IAffix.
            </summary>
        </member>
        <member name="M:Zelda.Items.Affixes.Suffixes.OfEaseSuffix.Apply(Zelda.Items.Item,Zelda.Items.Item)">
            <summary>
            Applies this IAffix to an Item.
            </summary>
            <param name="item">
            The Item that gets directly modified by this IAffix.
            </param>
            <param name="baseItem">
            The base non-modified Item.
            </param>
        </member>
        <member name="M:Zelda.Items.Affixes.Suffixes.OfEaseSuffix.IsApplyable(Zelda.Items.Item)">
            <summary>
            Gets a value indicating whether this IAffix could
            possibly applied to the given base <see cref="T:Zelda.Items.Item"/>.
            </summary>
            <param name="baseItem">
            The item this IAffix is supposed to be applied to.
            </param>
            <returns>
            True if this IAffix could possible applied to the given <paramref name="baseItem"/>;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Items.Affixes.Suffixes.OfEquilibriumSuffix">
            <summary>
            The 'of Equilibrium' suffix equally distributes the base stats of an item, 
            adding 15% additonal item budget to the item.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.Suffixes.OfEquilibriumSuffix.LocalizedName">
            <summary>
            Gets the localized name of this IAffix.
            </summary>
        </member>
        <member name="M:Zelda.Items.Affixes.Suffixes.OfEquilibriumSuffix.Apply(Zelda.Items.Item,Zelda.Items.Item)">
            <summary>
            Applies this IAffix to an Item.
            </summary>
            <param name="item">
            The Item that gets directly modified by this IAffix.
            </param>
            <param name="baseItem">
            The base non-modified Item.
            </param>
        </member>
        <member name="M:Zelda.Items.Affixes.Suffixes.OfEquilibriumSuffix.GetBudget(Zelda.Items.Equipment)">
            <summary>
            Gets the item budget used by the given Equipment.
            </summary>
            <param name="equipment">
            The Equipment instance.
            </param>
            <returns>
            The stat budget used by the given Equipment.
            </returns>
        </member>
        <member name="M:Zelda.Items.Affixes.Suffixes.OfEquilibriumSuffix.IsApplyable(Zelda.Items.Item)">
            <summary>
            Gets a value indicating whether this IAffix could
            possibly applied to the given base <see cref="T:Zelda.Items.Item"/>.
            </summary>
            <param name="baseItem">
            The item this IAffix is supposed to be applied to.
            </param>
            <returns>
            True if this IAffix could possible applied to the given <paramref name="baseItem"/>;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Items.Affixes.Suffixes.OfFeathersSuffix">
            <summary>
            The 'of Feathers' suffix adds 1 + 20% of item-level Movement Speed Rating to an Item.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.Suffixes.OfFeathersSuffix.LocalizedName">
            <summary>
            Gets the localized name of this IAffix.
            </summary>
        </member>
        <member name="M:Zelda.Items.Affixes.Suffixes.OfFeathersSuffix.Apply(Zelda.Items.Item,Zelda.Items.Item)">
            <summary>
            Applies this IAffix to an Item.
            </summary>
            <param name="item">
            The Item that gets directly modified by this IAffix.
            </param>
            <param name="baseItem">
            The base non-modified Item.
            </param>
        </member>
        <member name="M:Zelda.Items.Affixes.Suffixes.OfFeathersSuffix.IsApplyable(Zelda.Items.Item)">
            <summary>
            Gets a value indicating whether this IAffix could
            possibly applied to the given base <see cref="T:Zelda.Items.Item"/>.
            </summary>
            <param name="baseItem">
            The item this IAffix is supposed to be applied to.
            </param>
            <returns>
            True if this IAffix could possible applied to the given <paramref name="baseItem"/>;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Items.Affixes.Suffixes.OfFluencySuffix">
            <summary>
            The 'of Fluency' suffix adds '2 + 70% item-level' Spell Haste rating to an Item.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.Suffixes.OfFluencySuffix.LocalizedName">
            <summary>
            Gets the localized name of this IAffix.
            </summary>
        </member>
        <member name="M:Zelda.Items.Affixes.Suffixes.OfFluencySuffix.Apply(Zelda.Items.Item,Zelda.Items.Item)">
            <summary>
            Applies this IAffix to an Item.
            </summary>
            <param name="item">
            The Item that gets directly modified by this IAffix.
            </param>
            <param name="baseItem">
            The base non-modified Item.
            </param>
        </member>
        <member name="M:Zelda.Items.Affixes.Suffixes.OfFluencySuffix.IsApplyable(Zelda.Items.Item)">
            <summary>
            Gets a value indicating whether this IAffix could
            possibly applied to the given base <see cref="T:Zelda.Items.Item"/>.
            </summary>
            <param name="baseItem">
            The item this IAffix is supposed to be applied to.
            </param>
            <returns>
            True if this IAffix could possible applied to the given <paramref name="baseItem"/>;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Items.Affixes.Suffixes.OfFortuneSuffix">
            <summary>
            The 'of Fortune' suffix adds 1 + 12.5% of item-level Magic Find to an Item.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.Suffixes.OfFortuneSuffix.LocalizedName">
            <summary>
            Gets the localized name of this IAffix.
            </summary>
        </member>
        <member name="M:Zelda.Items.Affixes.Suffixes.OfFortuneSuffix.Apply(Zelda.Items.Item,Zelda.Items.Item)">
            <summary>
            Applies this IAffix to an Item.
            </summary>
            <param name="item">
            The Item that gets directly modified by this IAffix.
            </param>
            <param name="baseItem">
            The base non-modified Item.
            </param>
        </member>
        <member name="M:Zelda.Items.Affixes.Suffixes.OfFortuneSuffix.IsApplyable(Zelda.Items.Item)">
            <summary>
            Gets a value indicating whether this IAffix could
            possibly applied to the given base <see cref="T:Zelda.Items.Item"/>.
            </summary>
            <param name="baseItem">
            The item this IAffix is supposed to be applied to.
            </param>
            <returns>
            True if this IAffix could possible applied to the given <paramref name="baseItem"/>;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Items.Affixes.Suffixes.OfHasteSuffix">
            <summary>
            The 'of Haste' suffix adds '2 + 70% item-level' attack speed rating to an Item.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.Suffixes.OfHasteSuffix.LocalizedName">
            <summary>
            Gets the localized name of this IAffix.
            </summary>
        </member>
        <member name="M:Zelda.Items.Affixes.Suffixes.OfHasteSuffix.Apply(Zelda.Items.Item,Zelda.Items.Item)">
            <summary>
            Applies this IAffix to an Item.
            </summary>
            <param name="item">
            The Item that gets directly modified by this IAffix.
            </param>
            <param name="baseItem">
            The base non-modified Item.
            </param>
        </member>
        <member name="M:Zelda.Items.Affixes.Suffixes.OfHasteSuffix.IsApplyable(Zelda.Items.Item)">
            <summary>
            Gets a value indicating whether this IAffix could
            possibly applied to the given base <see cref="T:Zelda.Items.Item"/>.
            </summary>
            <param name="baseItem">
            The item this IAffix is supposed to be applied to.
            </param>
            <returns>
            True if this IAffix could possible applied to the given <paramref name="baseItem"/>;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Items.Affixes.Suffixes.OfImmediacySuffix">
            <summary>
            The 'of Immediacy' suffix adds '+X Armor Ignore and +Y Hit Rating' to an item.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.Suffixes.OfImmediacySuffix.LocalizedName">
            <summary>
            Gets the localized name of this IAffix.
            </summary>
        </member>
        <member name="M:Zelda.Items.Affixes.Suffixes.OfImmediacySuffix.Apply(Zelda.Items.Item,Zelda.Items.Item)">
            <summary>
            Applies this IAffix to an Item.
            </summary>
            <param name="item">
            The Item that gets directly modified by this IAffix.
            </param>
            <param name="baseItem">
            The base non-modified Item.
            </param>
        </member>
        <member name="M:Zelda.Items.Affixes.Suffixes.OfImmediacySuffix.ApplyArmorIgnore(System.Int32,Zelda.Items.Item)">
            <summary>
            Applies the armor ignore effect to the given Item.
            </summary>
            <param name="armorIgnore">
            The amount of armor ignore to apply.
            </param>
            <param name="item">
            The item to modify.
            </param>
        </member>
        <member name="M:Zelda.Items.Affixes.Suffixes.OfImmediacySuffix.ApplyHitRating(System.Int32,Zelda.Items.Item)">
            <summary>
            Applies the hit rating effect to the given Item.
            </summary>
            <param name="hitRating">
            The amount of hit rating to apply.
            </param>
            <param name="item">The item to modify.</param>
        </member>
        <member name="M:Zelda.Items.Affixes.Suffixes.OfImmediacySuffix.IsApplyable(Zelda.Items.Item)">
            <summary>
            Gets a value indicating whether this IAffix could
            possibly applied to the given base <see cref="T:Zelda.Items.Item"/>.
            </summary>
            <param name="baseItem">
            The item this IAffix is supposed to be applied to.
            </param>
            <returns>
            True if this IAffix could possible applied to the given <paramref name="baseItem"/>;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Items.Affixes.Suffixes.OfKingsSuffix">
            <summary>
            The 'of Kinds' suffix increases every stat by 10%, and adds 1 to the highest stat.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.Suffixes.OfKingsSuffix.LocalizedName">
            <summary>
            Gets the localized name of this IAffix.
            </summary>
        </member>
        <member name="M:Zelda.Items.Affixes.Suffixes.OfKingsSuffix.Apply(Zelda.Items.Item,Zelda.Items.Item)">
            <summary>
            Applies this IAffix to an Item.
            </summary>
            <param name="item">
            The Item that gets directly modified by this IAffix.
            </param>
            <param name="baseItem">
            The base non-modified Item.
            </param>
        </member>
        <member name="M:Zelda.Items.Affixes.Suffixes.OfKingsSuffix.GetGreatestStat(Zelda.Items.Equipment)">
            <summary>
            Gets the greatest Stat of the given Equipment.
            </summary>
            <param name="equipment">
            The Equipment.
            </param>
            <returns>
            The greatest Stat.
            </returns>
        </member>
        <member name="M:Zelda.Items.Affixes.Suffixes.OfKingsSuffix.IsApplyable(Zelda.Items.Item)">
            <summary>
            Gets a value indicating whether this IAffix could
            possibly applied to the given base <see cref="T:Zelda.Items.Item"/>.
            </summary>
            <param name="baseItem">
            The item this IAffix is supposed to be applied to.
            </param>
            <returns>
            True if this IAffix could possible applied to the given <paramref name="baseItem"/>;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Items.Affixes.Suffixes.OfLightSuffix">
            <summary>
            The 'of Light' suffix adds '+2 Light Radius" to an Item.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.Suffixes.OfLightSuffix.LocalizedName">
            <summary>
            Gets the localized name of this IAffix.
            </summary>
        </member>
        <member name="M:Zelda.Items.Affixes.Suffixes.OfLightSuffix.Apply(Zelda.Items.Item,Zelda.Items.Item)">
            <summary>
            Applies this IAffix to an Item.
            </summary>
            <param name="item">
            The Item that gets directly modified by this IAffix.
            </param>
            <param name="baseItem">
            The base non-modified Item.
            </param>
        </member>
        <member name="M:Zelda.Items.Affixes.Suffixes.OfLightSuffix.IsApplyable(Zelda.Items.Item)">
            <summary>
            Gets a value indicating whether this IAffix could
            possibly applied to the given base <see cref="T:Zelda.Items.Item"/>.
            </summary>
            <param name="baseItem">
            The item this IAffix is supposed to be applied to.
            </param>
            <returns>
            True if this IAffix could possible applied to the given <paramref name="baseItem"/>;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Items.Affixes.Suffixes.OfPowerSuffix">
            <summary>
            The 'of Power' suffix adds 1 + 15% of item-level strength to an Item.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.Suffixes.OfPowerSuffix.LocalizedName">
            <summary>
            Gets the localized name of this IAffix.
            </summary>
        </member>
        <member name="M:Zelda.Items.Affixes.Suffixes.OfPowerSuffix.Apply(Zelda.Items.Item,Zelda.Items.Item)">
            <summary>
            Applies this IAffix to an Item.
            </summary>
            <param name="item">
            The Item that gets directly modified by this IAffix.
            </param>
            <param name="baseItem">
            The base non-modified Item.
            </param>
        </member>
        <member name="M:Zelda.Items.Affixes.Suffixes.OfPowerSuffix.IsApplyable(Zelda.Items.Item)">
            <summary>
            Gets a value indicating whether this IAffix could
            possibly applied to the given base <see cref="T:Zelda.Items.Item"/>.
            </summary>
            <param name="baseItem">
            The item this IAffix is supposed to be applied to.
            </param>
            <returns>
            True if this IAffix could possible applied to the given <paramref name="baseItem"/>;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Items.Affixes.Suffixes.OfProtectionSuffix">
            <summary>
            The 'of Protection' suffix adds '80% of item-level' block value and (1 + 7.5%) armor to an Item.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.Suffixes.OfProtectionSuffix.LocalizedName">
            <summary>
            Gets the localized name of this IAffix.
            </summary>
        </member>
        <member name="M:Zelda.Items.Affixes.Suffixes.OfProtectionSuffix.Apply(Zelda.Items.Item,Zelda.Items.Item)">
            <summary>
            Applies this IAffix to an Item.
            </summary>
            <param name="item">
            The Item that gets directly modified by this IAffix.
            </param>
            <param name="baseItem">
            The base non-modified Item.
            </param>
        </member>
        <member name="M:Zelda.Items.Affixes.Suffixes.OfProtectionSuffix.IsApplyable(Zelda.Items.Item)">
            <summary>
            Gets a value indicating whether this IAffix could
            possibly applied to the given base <see cref="T:Zelda.Items.Item"/>.
            </summary>
            <param name="baseItem">
            The item this IAffix is supposed to be applied to.
            </param>
            <returns>
            True if this IAffix could possible applied to the given <paramref name="baseItem"/>;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Items.Affixes.Suffixes.OfRageSuffix">
            <summary>
            The 'of Rage' suffix adds '1 + 20% of item-level strength' and
            removes '1 + item-level / 3' hit rating.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.Suffixes.OfRageSuffix.LocalizedName">
            <summary>
            Gets the localized name of this IAffix.
            </summary>
        </member>
        <member name="M:Zelda.Items.Affixes.Suffixes.OfRageSuffix.Apply(Zelda.Items.Item,Zelda.Items.Item)">
            <summary>
            Applies this IAffix to an Item.
            </summary>
            <param name="item">
            The Item that gets directly modified by this IAffix.
            </param>
            <param name="baseItem">
            The base non-modified Item.
            </param>
        </member>
        <member name="M:Zelda.Items.Affixes.Suffixes.OfRageSuffix.ApplyMissRating(System.Int32,Zelda.Items.Equipment)">
            <summary>
            Applies the miss rating effect to the given Item.
            </summary>
            <param name="missRating">The rating to apply.</param>
            <param name="equipment">The item to modify.</param>
        </member>
        <member name="M:Zelda.Items.Affixes.Suffixes.OfRageSuffix.IsApplyable(Zelda.Items.Item)">
            <summary>
            Gets a value indicating whether this IAffix could
            possibly applied to the given base <see cref="T:Zelda.Items.Item"/>.
            </summary>
            <param name="baseItem">
            The item this IAffix is supposed to be applied to.
            </param>
            <returns>
            True if this IAffix could possible applied to the given <paramref name="baseItem"/>;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Items.Affixes.Suffixes.OfRecklesnessSuffix">
            <summary>
            The 'of Recklesness' suffix adds '2.0% damage done and 2.0% damage taken' to an item.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.Suffixes.OfRecklesnessSuffix.LocalizedName">
            <summary>
            Gets the localized name of this IAffix.
            </summary>
        </member>
        <member name="M:Zelda.Items.Affixes.Suffixes.OfRecklesnessSuffix.Apply(Zelda.Items.Item,Zelda.Items.Item)">
            <summary>
            Applies this IAffix to an Item.
            </summary>
            <param name="item">
            The Item that gets directly modified by this IAffix.
            </param>
            <param name="baseItem">
            The base non-modified Item.
            </param>
        </member>
        <member name="M:Zelda.Items.Affixes.Suffixes.OfRecklesnessSuffix.IsApplyable(Zelda.Items.Item)">
            <summary>
            Gets a value indicating whether this IAffix could
            possibly applied to the given base <see cref="T:Zelda.Items.Item"/>.
            </summary>
            <param name="baseItem">
            The item this IAffix is supposed to be applied to.
            </param>
            <returns>
            True if this IAffix could possible applied to the given <paramref name="baseItem"/>;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Items.Affixes.Suffixes.OfRecoverySuffix">
            <summary>
            The 'of Recovery' suffix adds '1 + 10% of item-level life/mana regeneration' to an Item.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.Suffixes.OfRecoverySuffix.LocalizedName">
            <summary>
            Gets the localized name of this IAffix.
            </summary>
        </member>
        <member name="M:Zelda.Items.Affixes.Suffixes.OfRecoverySuffix.Apply(Zelda.Items.Item,Zelda.Items.Item)">
            <summary>
            Applies this IAffix to an Item.
            </summary>
            <param name="item">
            The Item that gets directly modified by this IAffix.
            </param>
            <param name="baseItem">
            The base non-modified Item.
            </param>
        </member>
        <member name="M:Zelda.Items.Affixes.Suffixes.OfRecoverySuffix.IsApplyable(Zelda.Items.Item)">
            <summary>
            Gets a value indicating whether this IAffix could
            possibly applied to the given base <see cref="T:Zelda.Items.Item"/>.
            </summary>
            <param name="baseItem">
            The item this IAffix is supposed to be applied to.
            </param>
            <returns>
            True if this IAffix could possible applied to the given <paramref name="baseItem"/>;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Items.Affixes.Suffixes.OfRuptureSuffix">
            <summary>
            The 'of Rupture' suffix adds '+X Armor Ignore' to an item.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.Suffixes.OfRuptureSuffix.LocalizedName">
            <summary>
            Gets the localized name of this IAffix.
            </summary>
        </member>
        <member name="M:Zelda.Items.Affixes.Suffixes.OfRuptureSuffix.Apply(Zelda.Items.Item,Zelda.Items.Item)">
            <summary>
            Applies this IAffix to an Item.
            </summary>
            <param name="item">
            The Item that gets directly modified by this IAffix.
            </param>
            <param name="baseItem">
            The base non-modified Item.
            </param>
        </member>
        <member name="M:Zelda.Items.Affixes.Suffixes.OfRuptureSuffix.ApplyArmorIgnore(System.Int32,Zelda.Items.Item)">
            <summary>
            Applies the armor ignore effect to the given Item.
            </summary>
            <param name="armorIgnore">
            The amount of armor ignore to apply.
            </param>
            <param name="item">
            The item to modify.
            </param>
        </member>
        <member name="M:Zelda.Items.Affixes.Suffixes.OfRuptureSuffix.IsApplyable(Zelda.Items.Item)">
            <summary>
            Gets a value indicating whether this IAffix could
            possibly applied to the given base <see cref="T:Zelda.Items.Item"/>.
            </summary>
            <param name="baseItem">
            The item this IAffix is supposed to be applied to.
            </param>
            <returns>
            True if this IAffix could possible applied to the given <paramref name="baseItem"/>;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Items.Affixes.Suffixes.OfSorcerySuffix">
            <summary>
            The 'of Sorcery' suffix adds '10 + 4 x item-level' mana to an Item.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.Suffixes.OfSorcerySuffix.LocalizedName">
            <summary>
            Gets the localized name of this IAffix.
            </summary>
        </member>
        <member name="M:Zelda.Items.Affixes.Suffixes.OfSorcerySuffix.Apply(Zelda.Items.Item,Zelda.Items.Item)">
            <summary>
            Applies this IAffix to an Item.
            </summary>
            <param name="item">
            The Item that gets directly modified by this IAffix.
            </param>
            <param name="baseItem">
            The base non-modified Item.
            </param>
        </member>
        <member name="M:Zelda.Items.Affixes.Suffixes.OfSorcerySuffix.IsApplyable(Zelda.Items.Item)">
            <summary>
            Gets a value indicating whether this IAffix could
            possibly applied to the given base <see cref="T:Zelda.Items.Item"/>.
            </summary>
            <param name="baseItem">
            The item this IAffix is supposed to be applied to.
            </param>
            <returns>
            True if this IAffix could possible applied to the given <paramref name="baseItem"/>;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Items.Affixes.Suffixes.OfTheBlockadeSuffix">
            <summary>
            The 'of the Blockade' suffix adds '2 + 75% item-level Block Value' to a shield.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.Suffixes.OfTheBlockadeSuffix.LocalizedName">
            <summary>
            Gets the localized name of this IAffix.
            </summary>
        </member>
        <member name="M:Zelda.Items.Affixes.Suffixes.OfTheBlockadeSuffix.Apply(Zelda.Items.Item,Zelda.Items.Item)">
            <summary>
            Applies this IAffix to an Item.
            </summary>
            <param name="item">
            The Item that gets directly modified by this IAffix.
            </param>
            <param name="baseItem">
            The base non-modified Item.
            </param>
        </member>
        <member name="M:Zelda.Items.Affixes.Suffixes.OfTheBlockadeSuffix.IsApplyable(Zelda.Items.Item)">
            <summary>
            Gets a value indicating whether this IAffix could
            possibly applied to the given base <see cref="T:Zelda.Items.Item"/>.
            </summary>
            <param name="baseItem">
            The item this IAffix is supposed to be applied to.
            </param>
            <returns>
            True if this IAffix could possible applied to the given <paramref name="baseItem"/>;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Items.Affixes.Suffixes.OfTheeHastyAvatarSuffix">
            <summary>
            The 'of Haste' suffix adds a chance of 2% to increase attack speed by '4 * item-level' for 10 seconds to an item.
            </summary>
        </member>
        <member name="F:Zelda.Items.Affixes.Suffixes.OfTheeHastyAvatarSuffix.ProcSymbolName">
            <summary>
            The name of the sprite that is used for the proc smybol.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.Suffixes.OfTheeHastyAvatarSuffix.LocalizedName">
            <summary>
            Gets the localized name of this IAffix.
            </summary>
        </member>
        <member name="M:Zelda.Items.Affixes.Suffixes.OfTheeHastyAvatarSuffix.#ctor(Atom.Xna.ISpriteLoader)">
            <summary>
            Initializes a new instance of the OfTheeHastyAvatarSuffix class.
            </summary>
            <param name="spriteLoader">
            Provides a mechanism for loading sprite resources.
            </param>
        </member>
        <member name="M:Zelda.Items.Affixes.Suffixes.OfTheeHastyAvatarSuffix.Apply(Zelda.Items.Item,Zelda.Items.Item)">
            <summary>
            Applies this IAffix to an Item.
            </summary>
            <param name="item">
            The Item that gets directly modified by this IAffix.
            </param>
            <param name="baseItem">
            The base non-modified Item.
            </param>
        </member>
        <member name="M:Zelda.Items.Affixes.Suffixes.OfTheeHastyAvatarSuffix.IsApplyable(Zelda.Items.Item)">
            <summary>
            Gets a value indicating whether this IAffix could
            possibly applied to the given base <see cref="T:Zelda.Items.Item"/>.
            </summary>
            <param name="baseItem">
            The item this IAffix is supposed to be applied to.
            </param>
            <returns>
            True if this IAffix could possible applied to the given <paramref name="baseItem"/>;
            otherwise false.
            </returns>
        </member>
        <member name="F:Zelda.Items.Affixes.Suffixes.OfTheeHastyAvatarSuffix.sprite">
            <summary>
            The lazy loaded sprite shown when the effect procs.
            </summary>
        </member>
        <member name="F:Zelda.Items.Affixes.Suffixes.OfTheeHastyAvatarSuffix.spriteLoader">
            <summary>
            Provides a mechanism for loading sprite resources.
            </summary>
        </member>
        <member name="T:Zelda.Items.Affixes.Suffixes.OfTheHawkSuffix">
            <summary>
            The 'of the Hawk' suffix adds 1 + 9% of item-level dexterity and agility.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.Suffixes.OfTheHawkSuffix.LocalizedName">
            <summary>
            Gets the localized name of this IAffix.
            </summary>
        </member>
        <member name="M:Zelda.Items.Affixes.Suffixes.OfTheHawkSuffix.Apply(Zelda.Items.Item,Zelda.Items.Item)">
            <summary>
            Applies this IAffix to an Item.
            </summary>
            <param name="item">
            The Item that gets directly modified by this IAffix.
            </param>
            <param name="baseItem">
            The base non-modified Item.
            </param>
        </member>
        <member name="M:Zelda.Items.Affixes.Suffixes.OfTheHawkSuffix.IsApplyable(Zelda.Items.Item)">
            <summary>
            Gets a value indicating whether this IAffix could
            possibly applied to the given base <see cref="T:Zelda.Items.Item"/>.
            </summary>
            <param name="baseItem">
            The item this IAffix is supposed to be applied to.
            </param>
            <returns>
            True if this IAffix could possible applied to the given <paramref name="baseItem"/>;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Items.Affixes.Suffixes.OfTheHolySpiritSuffix">
            <summary>
            The 'of the Holy Spirit' suffix adds 
            '1 + 15% of item-level Damage done against Undead' and 
            '1 + 10% of item-level Mana Regeneration' to an item.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.Suffixes.OfTheHolySpiritSuffix.LocalizedName">
            <summary>
            Gets the localized name of this IAffix.
            </summary>
        </member>
        <member name="M:Zelda.Items.Affixes.Suffixes.OfTheHolySpiritSuffix.Apply(Zelda.Items.Item,Zelda.Items.Item)">
            <summary>
            Applies this IAffix to an Item.
            </summary>
            <param name="item">
            The Item that gets directly modified by this IAffix.
            </param>
            <param name="baseItem">
            The base non-modified Item.
            </param>
        </member>
        <member name="M:Zelda.Items.Affixes.Suffixes.OfTheHolySpiritSuffix.IsApplyable(Zelda.Items.Item)">
            <summary>
            Gets a value indicating whether this IAffix could
            possibly applied to the given base <see cref="T:Zelda.Items.Item"/>.
            </summary>
            <param name="baseItem">
            The item this IAffix is supposed to be applied to.
            </param>
            <returns>
            True if this IAffix could possible applied to the given <paramref name="baseItem"/>;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Items.Affixes.Suffixes.OfTheSagesSuffix">
            <summary>
            The 'of the Sages' suffix adds 1 + 10% of item-level Intelligence to an Item.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.Suffixes.OfTheSagesSuffix.LocalizedName">
            <summary>
            Gets the localized name of this IAffix.
            </summary>
        </member>
        <member name="M:Zelda.Items.Affixes.Suffixes.OfTheSagesSuffix.Apply(Zelda.Items.Item,Zelda.Items.Item)">
            <summary>
            Applies this IAffix to an Item.
            </summary>
            <param name="item">
            The Item that gets directly modified by this IAffix.
            </param>
            <param name="baseItem">
            The base non-modified Item.
            </param>
        </member>
        <member name="M:Zelda.Items.Affixes.Suffixes.OfTheSagesSuffix.IsApplyable(Zelda.Items.Item)">
            <summary>
            Gets a value indicating whether this IAffix could
            possibly applied to the given base <see cref="T:Zelda.Items.Item"/>.
            </summary>
            <param name="baseItem">
            The item this IAffix is supposed to be applied to.
            </param>
            <returns>
            True if this IAffix could possible applied to the given <paramref name="baseItem"/>;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Items.Affixes.Suffixes.OfTheSeasonsSuffix">
            <summary>
            The 'of the Seasons' suffix adds '2.5% life and mana potion effectiviness' to an item.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.Suffixes.OfTheSeasonsSuffix.LocalizedName">
            <summary>
            Gets the localized name of this IAffix.
            </summary>
        </member>
        <member name="M:Zelda.Items.Affixes.Suffixes.OfTheSeasonsSuffix.Apply(Zelda.Items.Item,Zelda.Items.Item)">
            <summary>
            Applies this IAffix to an Item.
            </summary>
            <param name="item">
            The Item that gets directly modified by this IAffix.
            </param>
            <param name="baseItem">
            The base non-modified Item.
            </param>
        </member>
        <member name="M:Zelda.Items.Affixes.Suffixes.OfTheSeasonsSuffix.IsApplyable(Zelda.Items.Item)">
            <summary>
            Gets a value indicating whether this IAffix could
            possibly applied to the given base <see cref="T:Zelda.Items.Item"/>.
            </summary>
            <param name="baseItem">
            The item this IAffix is supposed to be applied to.
            </param>
            <returns>
            True if this IAffix could possible applied to the given <paramref name="baseItem"/>;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Items.Affixes.Suffixes.OfTheTitansSuffix">
            <summary>
            The 'of the Titans' suffix adds '2 + 20% of item-level' pushing power to an Item.
            </summary>
            <remarks>
            This suffix is capped at level 40.
            </remarks>
        </member>
        <member name="P:Zelda.Items.Affixes.Suffixes.OfTheTitansSuffix.LocalizedName">
            <summary>
            Gets the localized name of this IAffix.
            </summary>
        </member>
        <member name="M:Zelda.Items.Affixes.Suffixes.OfTheTitansSuffix.Apply(Zelda.Items.Item,Zelda.Items.Item)">
            <summary>
            Applies this IAffix to an Item.
            </summary>
            <param name="item">
            The Item that gets directly modified by this IAffix.
            </param>
            <param name="baseItem">
            The base non-modified Item.
            </param>
        </member>
        <member name="M:Zelda.Items.Affixes.Suffixes.OfTheTitansSuffix.IsApplyable(Zelda.Items.Item)">
            <summary>
            Gets a value indicating whether this IAffix could
            possibly applied to the given base <see cref="T:Zelda.Items.Item"/>.
            </summary>
            <param name="baseItem">
            The item this IAffix is supposed to be applied to.
            </param>
            <returns>
            True if this IAffix could possible applied to the given <paramref name="baseItem"/>;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Items.Affixes.Suffixes.OfWitchCraftSuffix">
            <summary>
            The 'of Witch Craft' suffix adds 
            '1 + 10% of item-level Intelligence' and 
            '1 + 85% of item-level poison damage' to an item.
            </summary>
        </member>
        <member name="P:Zelda.Items.Affixes.Suffixes.OfWitchCraftSuffix.LocalizedName">
            <summary>
            Gets the localized name of this IAffix.
            </summary>
        </member>
        <member name="M:Zelda.Items.Affixes.Suffixes.OfWitchCraftSuffix.Apply(Zelda.Items.Item,Zelda.Items.Item)">
            <summary>
            Applies this IAffix to an Item.
            </summary>
            <param name="item">
            The Item that gets directly modified by this IAffix.
            </param>
            <param name="baseItem">
            The base non-modified Item.
            </param>
        </member>
        <member name="M:Zelda.Items.Affixes.Suffixes.OfWitchCraftSuffix.IsApplyable(Zelda.Items.Item)">
            <summary>
            Gets a value indicating whether this IAffix could
            possibly applied to the given base <see cref="T:Zelda.Items.Item"/>.
            </summary>
            <param name="baseItem">
            The item this IAffix is supposed to be applied to.
            </param>
            <returns>
            True if this IAffix could possible applied to the given <paramref name="baseItem"/>;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Items.Design.ItemEditor">
            <summary>
            Defines an <see cref="T:System.Drawing.Design.UITypeEditor"/> that loads <see cref="T:Zelda.Items.Item"/>s.
            This class can't be inherited.
            </summary>
        </member>
        <member name="M:Zelda.Items.Design.ItemEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the value of the specified object using the editor style indicated
            by the System.Drawing.Design.UITypeEditor.GetEditStyle() method.
            </summary>
            <param name="context">
            An System.ComponentModel.ITypeDescriptorContext that can be used to gain
            additional context information.
            </param>
            <param name="provider">
             An System.IServiceProvider that this editor can use to obtain services.
             </param>
            <param name="value">  
            The object to edit.
            </param>
            <returns>
            The new value of the object.
            </returns>
        </member>
        <member name="M:Zelda.Items.Design.ItemEditor.LoadItem(System.String)">
            <summary>
            Tries to load the Item with the given fileName.
            </summary>
            <param name="fileName">
            The filename that has been selected by the user.
            </param>
            <returns>
            The loaded Item.
            </returns>
        </member>
        <member name="M:Zelda.Items.Design.ItemEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the editor style used by the 
            System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)
            method.
            </summary>
            <param name="context">
            An System.ComponentModel.ITypeDescriptorContext that can be used to gain
            additional context information.
            </param>
            <returns>
            Returns UITypeEditorEditStyle.Modal.
            </returns>
        </member>
        <member name="T:Zelda.Items.Design.ItemNameEditor">
            <summary>
            Defines an <see cref="T:System.Drawing.Design.UITypeEditor"/> that
            allows the user to select an item.
            This class can't be inherited.
            </summary>
        </member>
        <member name="M:Zelda.Items.Design.ItemNameEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the value of the specified object using the editor style indicated
            by the System.Drawing.Design.UITypeEditor.GetEditStyle() method.
            </summary>
            <param name="context">
            An System.ComponentModel.ITypeDescriptorContext that can be used to gain
            additional context information.
            </param>
            <param name="provider">
             An System.IServiceProvider that this editor can use to obtain services.
             </param>
            <param name="value">  
            The object to edit.
            </param>
            <returns>
            The new value of the object.
            </returns>
        </member>
        <member name="M:Zelda.Items.Design.ItemNameEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the editor style used by the 
            System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)
            method.
            </summary>
            <param name="context">
            An System.ComponentModel.ITypeDescriptorContext that can be used to gain
            additional context information.
            </param>
            <returns>
            Returns UITypeEditorEditStyle.Modal.
            </returns>
        </member>
        <member name="T:Zelda.Items.Equipment">
            <summary>
            An <see cref="T:Zelda.Items.Equipment"/> is an <see cref="T:Zelda.Items.Item"/> that can be equipped.
            </summary>
        </member>
        <member name="P:Zelda.Items.Equipment.ItemType">
            <summary>
            Gets the <see cref="P:Zelda.Items.Equipment.ItemType"/> this <see cref="T:Zelda.Items.Equipment"/> represents.
            </summary>
        </member>
        <member name="P:Zelda.Items.Equipment.Slot">
            <summary>
            Gets or sets the slot this <see cref="T:Zelda.Items.Equipment"/> fits in.
            </summary>
        </member>
        <member name="P:Zelda.Items.Equipment.Armor">
            <summary>
            Gets or sets a value that represents the amount of armor this <see cref="T:Zelda.Items.Equipment"/>
            provides when equipped.
            </summary>
        </member>
        <member name="P:Zelda.Items.Equipment.AdditionalEffectsAura">
            <summary>
            Gets or sets the PermanentAura that holds the additional StatusEffects
            applied when an instance of this <see cref="T:Zelda.Items.Equipment"/> gets equipped.
            </summary>
            <value>Is null by default.</value>
        </member>
        <member name="P:Zelda.Items.Equipment.AdditionalEffects">
            <summary>
            Gets the additional StatusEffects applied when an instance of <see cref="T:Zelda.Items.Equipment"/> gets equipped.
            </summary>
            <value>Is null by default.</value>
        </member>
        <member name="P:Zelda.Items.Equipment.SocketProperties">
            <summary>
            Gets the <see cref="T:Zelda.Items.ItemSocketProperties"/> associated with this Equipment.
            </summary>
        </member>
        <member name="P:Zelda.Items.Equipment.Set">
            <summary>
            Gets or sets the <see cref="T:Zelda.Items.Sets.ISet"/> this <see cref="T:Zelda.Items.Equipment"/> is part of.
            </summary>
            <value>
            The default value is null.
            </value>
        </member>
        <member name="P:Zelda.Items.Equipment.Strength">
            <summary>
            Gets or sets the strength this <see cref="T:Zelda.Items.Equipment"/>
            provides when equipped.
            </summary>
        </member>
        <member name="P:Zelda.Items.Equipment.Dexterity">
            <summary>
            Gets or sets the dexterity this <see cref="T:Zelda.Items.Equipment"/>
            provides when equipped.
            </summary>
        </member>
        <member name="P:Zelda.Items.Equipment.Agility">
            <summary>
            Gets or sets the agility this <see cref="T:Zelda.Items.Equipment"/>
            provides when equipped.
            </summary>
        </member>
        <member name="P:Zelda.Items.Equipment.Vitality">
            <summary>
            Gets or sets the vitality this <see cref="T:Zelda.Items.Equipment"/>
            provides when equipped.
            </summary>
        </member>
        <member name="P:Zelda.Items.Equipment.Intelligence">
            <summary>
            Gets or sets the intelligence this <see cref="T:Zelda.Items.Equipment"/>
            provides when equipped.
            </summary>
        </member>
        <member name="P:Zelda.Items.Equipment.Luck">
            <summary>
            Gets or sets the luck this <see cref="T:Zelda.Items.Equipment"/>
            provides when equipped.
            </summary>
        </member>
        <member name="P:Zelda.Items.Equipment.RequiredLevel">
            <summary>
            Gets or sets the level required by this <see cref="T:Zelda.Items.Equipment"/>.
            </summary>
            <exception cref="T:System.ArgumentException">
            Set: If the given value is negative.
            </exception>
        </member>
        <member name="P:Zelda.Items.Equipment.RequiredStrength">
            <summary>
            Gets or sets the strength required by this <see cref="T:Zelda.Items.Equipment"/>.
            </summary>
            <exception cref="T:System.ArgumentException">
            Set: If the given value is negative.
            </exception>
        </member>
        <member name="P:Zelda.Items.Equipment.RequiredDexterity">
            <summary>
            Gets or sets the dexterity required by this <see cref="T:Zelda.Items.Equipment"/>.
            </summary>
            <exception cref="T:System.ArgumentException">
            Set: If the given value is negative.
            </exception>
        </member>
        <member name="P:Zelda.Items.Equipment.RequiredAgility">
            <summary>
            Gets or sets the agility required by this <see cref="T:Zelda.Items.Equipment"/>.
            </summary>
            <exception cref="T:System.ArgumentException">
            Set: If the given value is negative.
            </exception>
        </member>
        <member name="P:Zelda.Items.Equipment.RequiredVitality">
            <summary>
            Gets or sets the vitality required by this <see cref="T:Zelda.Items.Equipment"/>.
            </summary>
        </member>
        <member name="P:Zelda.Items.Equipment.RequiredIntelligence">
            <summary>
            Gets or sets the intelligence required by this <see cref="T:Zelda.Items.Equipment"/>.
            </summary>
            <exception cref="T:System.ArgumentException">
            Set: If the given value is negative.
            </exception>
        </member>
        <member name="P:Zelda.Items.Equipment.RequiredLuck">
            <summary>
            Gets or sets the luck required by this <see cref="T:Zelda.Items.Equipment"/>.
            </summary>
            <exception cref="T:System.ArgumentException">
            Set: If the given value is negative.
            </exception>
        </member>
        <member name="P:Zelda.Items.Equipment.IngameColor">
            <summary>
            Gets or sets the color the weapon is tinted in ingame - on the character.
            </summary>
            <value>The default color is White.</value>
        </member>
        <member name="P:Zelda.Items.Equipment.AnimationSpriteGroup">
            <summary>
            Gets or sets the sprite group used to display the <see cref="T:Zelda.Items.Equipment"/>
            in game on the character.
            </summary>
            <value> Is null by default.</value>
        </member>
        <member name="P:Zelda.Items.Equipment.HasIngameAnimations">
            <summary>
            Gets a value indicating whether this <see cref="T:Zelda.Items.Equipment"/> 
            has any animations displayed ingame on the PlayerEntity.
            </summary>
        </member>
        <member name="P:Zelda.Items.Equipment.AnimationDown">
            <summary>
            Gets the animation that gets shown ingame on the character.
            </summary>
            <value>The default value is null.</value>
        </member>
        <member name="P:Zelda.Items.Equipment.AnimationUp">
            <summary>
            Gets the animation that gets shown ingame on the character.
            </summary>
            <value>The default value is null.</value>
        </member>
        <member name="P:Zelda.Items.Equipment.AnimationLeft">
            <summary>
            Gets the animation that gets shown ingame on the character.
            </summary>
            <value>The default value is null.</value>
        </member>
        <member name="P:Zelda.Items.Equipment.AnimationRight">
            <summary>
            Gets the animation that gets shown ingame on the character.
            </summary>
            <value>The default value is null.</value>
        </member>
        <member name="P:Zelda.Items.Equipment.UsedItemBudget">
            <summary>
            Gets a value that represents how many 'Item Points' this <see cref="T:Zelda.Items.Equipment"/> uses.
            </summary>
        </member>
        <member name="M:Zelda.Items.Equipment.#ctor">
            <summary>
            Initializes a new instance of the Equipment class.
            </summary>
        </member>
        <member name="M:Zelda.Items.Equipment.CreateInstance(System.Single)">
            <summary>
            Creates a new instance of this <see cref="T:Zelda.Items.Equipment"/>.
            </summary>
            <param name="powerFactor">
            The factor by which the power of the new ItemInstance varies compared to this base Item.
            </param>
            <returns>A new <see cref="T:Zelda.Items.EquipmentInstance"/>.</returns>
        </member>
        <member name="M:Zelda.Items.Equipment.ModifyPowerBy(System.Single)">
            <summary>
            Modifies the power of this Equipment by the given factor.
            </summary>
            <param name="factor">
            The factor to modify the item by.
            </param>
            <returns>
            true if modifications were allowed; -or- otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Items.Equipment.MultiplyColor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Multiplies the <see cref="P:Zelda.Items.Item.SpriteColor"/> and <see cref="P:Zelda.Items.Equipment.IngameColor"/>
            of this Equipment by the specified multipliers.
            </summary>
            <param name="redMultiplier">The multiplier value for the red color component.</param>
            <param name="greenMultiplier">The multiplier value for the green color component.</param>
            <param name="blueMultiplier">The multiplier value for the blue color component.</param>
            <param name="alphaMultiplier">The multiplier value for the alpha color component.</param>
        </member>
        <member name="M:Zelda.Items.Equipment.GetStat(Zelda.Status.Stat)">
            <summary>
            Gets how much of the specified <see cref="T:Zelda.Status.Stat"/> this Equipment gives.
            </summary>
            <param name="stat">
            The Stat to get.
            </param>
            <returns>
            The Stat's value.
            </returns>
        </member>
        <member name="M:Zelda.Items.Equipment.SetStat(System.Int32,Zelda.Status.Stat)">
            <summary>
            Sets how much of the specified <see cref="T:Zelda.Status.Stat"/> this Equipment gives.
            </summary>
            <param name="value">
            The value to set the Stat to.
            </param>
            <param name="stat">
            The Stat to set.
            </param>
        </member>
        <member name="M:Zelda.Items.Equipment.FulfillsRequirements(Zelda.Status.ExtendedStatable)">
            <summary>
            Gets whether the given <see cref="T:Zelda.Status.ExtendedStatable"/> fulfills all requirements 
            to wear this <see cref="T:Zelda.Items.Equipment"/>.
            </summary>
            <param name="statable">
            The <see cref="T:Zelda.Status.ExtendedStatable"/> component of the ZeldaEntity
            that wishes to wear an instance of this <see cref="T:Zelda.Items.Equipment"/>.
            </param>
            <returns>
            true if the ExtendedStatable would be able to wear an instance of this <see cref="T:Zelda.Items.Equipment"/>;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Items.Equipment.GetIngameAnimation(Atom.Math.Direction4)">
            <summary>
            Receives the ingame animation for the given <see cref="T:Atom.Math.Direction4"/>.
            </summary>
            <param name="direction">The direction to get the ingame animation for.</param>
            <returns>The AnimatedSprite object, or null if no such animation exists. </returns>
        </member>
        <member name="M:Zelda.Items.Equipment.Clone">
            <summary>
            Creates a clone of this <see cref="T:Zelda.Items.Equipment"/>.
            </summary>
            <returns>
            The cloned item.
            </returns>
        </member>
        <member name="M:Zelda.Items.Equipment.SetupClone(Zelda.Items.Equipment)">
            <summary>
            Setups the given Equipment to be a clone of this Equipment.
            </summary>
            <param name="clone">
            The Equipment to setup as a clone of this Equipment.
            </param>
        </member>
        <member name="M:Zelda.Items.Equipment.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Items.Equipment.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Items.Equipment.sockets">
            <summary>
            Encapsulates the sockets properties of this <see cref="T:Zelda.Items.Equipment"/> instance.
            </summary>
        </member>
        <member name="F:Zelda.Items.Equipment.requiredLevel">
            <summary>
            The storage field for the <see cref="P:Zelda.Items.Equipment.RequiredLevel"/> field.
            </summary>
        </member>
        <member name="F:Zelda.Items.Equipment.requiredStrength">
            <summary>
            The storage field for the <see cref="P:Zelda.Items.Equipment.RequiredStrength"/> field.
            </summary>
        </member>
        <member name="F:Zelda.Items.Equipment.requiredDexterity">
            <summary>
            The storage field for the <see cref="P:Zelda.Items.Equipment.RequiredDexterity"/> field.
            </summary>
        </member>
        <member name="F:Zelda.Items.Equipment.requiredVitality">
            <summary>
            The storage field for the <see cref="P:Zelda.Items.Equipment.RequiredVitality"/> field.
            </summary>
        </member>
        <member name="F:Zelda.Items.Equipment.requiredAgility">
            <summary>
            The storage field for the <see cref="P:Zelda.Items.Equipment.RequiredAgility"/> field.
            </summary>
        </member>
        <member name="F:Zelda.Items.Equipment.requiredIntelligence">
            <summary>
            The storage field for the <see cref="P:Zelda.Items.Equipment.RequiredIntelligence"/> field.
            </summary>
        </member>
        <member name="F:Zelda.Items.Equipment.requiredLuck">
            <summary>
            The storage field for the <see cref="P:Zelda.Items.Equipment.RequiredLuck"/> field.
            </summary>
        </member>
        <member name="F:Zelda.Items.Equipment.animDown">
            <summary>
            The animations shown ingame on the character.
            </summary>
        </member>
        <member name="F:Zelda.Items.Equipment.animUp">
            <summary>
            The animations shown ingame on the character.
            </summary>
        </member>
        <member name="F:Zelda.Items.Equipment.animLeft">
            <summary>
            The animations shown ingame on the character.
            </summary>
        </member>
        <member name="F:Zelda.Items.Equipment.animRight">
            <summary>
            The animations shown ingame on the character.
            </summary>
        </member>
        <member name="F:Zelda.Items.Equipment.ingameColor">
            <summary>
            The storage field for the <see cref="P:Zelda.Items.Equipment.IngameColor"/> field.
            </summary>
        </member>
        <member name="T:Zelda.Items.EquipmentInstance">
            <summary>
            Represents an ItemInstance that uses a <see cref="P:Zelda.Items.EquipmentInstance.Equipment"/> as its template.
            </summary>
        </member>
        <member name="E:Zelda.Items.EquipmentInstance.Equipped">
            <summary>
            Raised when this EquipmentInstance has been equipped.
            </summary>
        </member>
        <member name="E:Zelda.Items.EquipmentInstance.Unequipped">
            <summary>
            Raised when this EquipmentInstance has been unequipped.
            </summary>
        </member>
        <member name="P:Zelda.Items.EquipmentInstance.Equipment">
            <summary>
            Gets the <see cref="P:Zelda.Items.EquipmentInstance.Equipment"/> that is encapsulated by this <see cref="T:Zelda.Items.EquipmentInstance"/>.
            </summary>
        </member>
        <member name="P:Zelda.Items.EquipmentInstance.BaseEquipment">
            <summary>
            Gets the <see cref="P:Zelda.Items.EquipmentInstance.Equipment"/> template that is encapsulated by this <see cref="T:Zelda.Items.EquipmentInstance"/>.
            </summary>
        </member>
        <member name="P:Zelda.Items.EquipmentInstance.SocketProperties">
            <summary>
            Gets the ItemSocketProperties of this EquipmentInstance.
            </summary>
        </member>
        <member name="P:Zelda.Items.EquipmentInstance.SetProperties">
            <summary>
            Gets the EquipmentSetProperties of this EquipmentInstance.
            </summary>
        </member>
        <member name="P:Zelda.Items.EquipmentInstance.IsGemmed">
            <summary>
            Gets a value indicating whether this <see cref="T:Zelda.Items.EquipmentInstance"/>
            has any gems in its sockets.
            </summary>
        </member>
        <member name="P:Zelda.Items.EquipmentInstance.IsEnchanted">
            <summary>
            Gets a value indicating whether this <see cref="T:Zelda.Items.EquipmentInstance"/>
            has any enchants applied to it.
            </summary>
        </member>
        <member name="P:Zelda.Items.EquipmentInstance.IsEquipped">
            <summary>
            Gets a value indicating whether this <see cref="T:Zelda.Items.EquipmentInstance"/> is currently equipped.
            </summary>
        </member>
        <member name="P:Zelda.Items.EquipmentInstance.Wearer">
            <summary>
            Gets the object that wears this <see cref="T:Zelda.Items.EquipmentInstance"/>, if any.
            </summary>
        </member>
        <member name="M:Zelda.Items.EquipmentInstance.#ctor(Zelda.Items.Equipment,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Items.EquipmentInstance"/> class.
            </summary>
            <param name="baseEquipment">
            The underlying <see cref="P:Zelda.Items.EquipmentInstance.Equipment"/>.
            </param>
            <param name="powerFactor">
            The factor by which the power of this EquipmentInstance varies compared to the base Item.
            </param>
        </member>
        <member name="M:Zelda.Items.EquipmentInstance.OnEquip(Zelda.Status.ExtendedStatable)">
            <summary>
            Called when this EquipmentInstance gets equiped.
            </summary>
            <param name="statable">
            The ExtendedStatable that is about to equip this <see cref="T:Zelda.Items.EquipmentInstance"/>.
            </param>
            <exception cref="T:System.InvalidOperationException">
            If this <see cref="T:Zelda.Items.EquipmentInstance"/> has already been equipped.
            </exception>
        </member>
        <member name="M:Zelda.Items.EquipmentInstance.OnEquipNoCheck(Zelda.Status.ExtendedStatable)">
            <summary>
            Called when this EquipmentInstance gets equiped.
            </summary>
            <param name="statable">
            The ExtendedStatable that is about to equip this <see cref="T:Zelda.Items.EquipmentInstance"/>.
            </param>
            <exception cref="T:System.InvalidOperationException">
            If this <see cref="T:Zelda.Items.EquipmentInstance"/> has already been equipped.
            </exception>
        </member>
        <member name="M:Zelda.Items.EquipmentInstance.OnUnequip">
            <summary>
            Called when this <see cref="T:Zelda.Items.EquipmentInstance"/> gets dequiped.
            </summary>
        </member>
        <member name="M:Zelda.Items.EquipmentInstance.OnUnequipNoCheck">
            <summary>
            Called when this EquipmentInstance gets unequipped.
            </summary>
        </member>
        <member name="M:Zelda.Items.EquipmentInstance.FulfillsRequirements(Zelda.Status.ExtendedStatable)">
            <summary>
            Gets whether the given <see cref="T:Zelda.Status.ExtendedStatable"/> fulfills all requirements 
            to wear this <see cref="T:Zelda.Items.EquipmentInstance"/>.
            </summary>
            <param name="statable">
            The <see cref="T:Zelda.Status.ExtendedStatable"/> component of the ZeldaEntity
            that wishes to wear an instance of this <see cref="P:Zelda.Items.EquipmentInstance.Equipment"/>.
            </param>
            <returns>
            true if the ExtendedStatable would be able to wear an instance of this <see cref="P:Zelda.Items.EquipmentInstance.Equipment"/>;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Items.EquipmentInstance.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Items.EquipmentInstance.SerializeGemInfo(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes/Writes the gem data of this <see cref="T:Zelda.Items.EquipmentInstance"/>
            using the given <see cref="T:System.IO.BinaryWriter"/>.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Items.EquipmentInstance.ReadEquipment(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to create a <see cref="T:Zelda.Items.EquipmentInstance"/>.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
            <returns>
            A new EquipmentInstance object.
            </returns>
        </member>
        <member name="M:Zelda.Items.EquipmentInstance.ReadGemInfo(Zelda.Items.EquipmentInstance,Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Reads the gem data of the given <see cref="T:Zelda.Items.EquipmentInstance"/>.
            </summary>
            <param name="instance">
            The related EquipmentInstance object.
            </param>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Items.EquipmentInstance.wearer">
            <summary>
            The object that has this <see cref="T:Zelda.Items.EquipmentInstance"/> equipped, if any yet.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentInstance.modifiedEquipment">
            <summary>
            The modified Equipment that is encapsulated by the <see cref="T:Zelda.Items.EquipmentInstance"/>.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentInstance.baseEquipment">
            <summary>
            The Equipment template that is encapsulated by the <see cref="T:Zelda.Items.EquipmentInstance"/>.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentInstance.socketProperties">
            <summary>
            A clone of the socket propertiess of the <see cref="P:Zelda.Items.EquipmentInstance.Equipment"/>.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentInstance.setProperties">
            <summary>
            The set properties of this EquipmentInstance.
            </summary>
        </member>
        <member name="T:Zelda.Items.EquipmentSlot">
            <summary>
            Enumerates the various slots an Equipment may occupy.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentSlot.None">
            <summary>
            Indicates that no specific slot has been set.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentSlot.WeaponHand">
            <summary>
            The Weapon slot.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentSlot.ShieldHand">
            <summary>
            The Shield slot.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentSlot.Ranged">
            <summary>
            The Ranged Weapon slot.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentSlot.Chest">
            <summary>
            The Chest slot.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentSlot.Boots">
            <summary>
            The Boots slot.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentSlot.Head">
            <summary>
            The Head slot.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentSlot.Necklace">
            <summary> 
            The Necklace slot; the player has two of these.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentSlot.Ring">
            <summary>
            The Ring slot; the player has two of these.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentSlot.Trinket">
            <summary>
            The Trinket slot; the player has two of these.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentSlot.Belt">
            <summary>
            The Belt slot.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentSlot.Staff">
            <summary>
            The Staff/Wand slot.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentSlot.Relic">
            <summary>
            The relic slot.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentSlot.Gloves">
            <summary>
            The gloves slot.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentSlot.Cloak">
            <summary>
            The cloak slot.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentSlot.Bag">
            <summary>
            The bag slot.
            </summary>
        </member>
        <member name="T:Zelda.Items.EquipmentStatus">
            <summary>
            Stores the <see cref="T:Zelda.Items.Equipment"/> that an extended-statable ZeldaEntity
            is currenly wearing.
            This class can't be inherited.
            </summary>
            <seealso cref="T:Zelda.Items.EquipmentStatusSlot"/>
        </member>
        <member name="E:Zelda.Items.EquipmentStatus.WeaponHandChanged">
            <summary>
            Called when the currently equipped <see cref="T:Zelda.Items.Weapon"/> in the <see cref="P:Zelda.Items.EquipmentStatus.WeaponHand"/> has changed;
            or if the requirement state of the currently equipped Weapon has changed.
            </summary>
        </member>
        <member name="E:Zelda.Items.EquipmentStatus.SlotChanged">
            <summary>
            Called when the state of a slot has changed.
            </summary>
        </member>
        <member name="P:Zelda.Items.EquipmentStatus.Armor">
            <summary>
            Gets the total armor the equiped items provide together.
            </summary>
        </member>
        <member name="P:Zelda.Items.EquipmentStatus.Strength">
            <summary>
            Gets the total strength the equiped items provide together.
            </summary>
        </member>
        <member name="P:Zelda.Items.EquipmentStatus.Dexterity">
            <summary>
            Gets the total dexterity the equiped items provide together.
            </summary>
        </member>
        <member name="P:Zelda.Items.EquipmentStatus.Agility">
            <summary>
            Gets the total agility the equiped items provide together.
            </summary>
        </member>
        <member name="P:Zelda.Items.EquipmentStatus.Vitality">
            <summary>
            Gets the total vitality the equiped items provide together.
            </summary>
        </member>
        <member name="P:Zelda.Items.EquipmentStatus.Intelligence">
            <summary>
            Gets the total intelligence the equiped items provide together.
            </summary>
        </member>
        <member name="P:Zelda.Items.EquipmentStatus.Luck">
            <summary>
            Gets the total luck the equiped items provide together.
            </summary>
        </member>
        <member name="P:Zelda.Items.EquipmentStatus.WeaponHand">
            <summary>
            Gets the item in the melee-hand slot, if any.
            </summary>
        </member>
        <member name="P:Zelda.Items.EquipmentStatus.ShieldHand">
            <summary>
            Gets the item in the shield-hand slot, if any.
            </summary>
        </member>
        <member name="P:Zelda.Items.EquipmentStatus.Ranged">
            <summary>
            Gets the item in the ranged-weapon slot, if any.
            </summary>
        </member>
        <member name="P:Zelda.Items.EquipmentStatus.Staff">
            <summary>
            Gets the item in the staff slot, if any.
            </summary>
        </member>
        <member name="P:Zelda.Items.EquipmentStatus.CanUseRanged">
            <summary>
            Gets a value indicating whether the extended-statable ZeldaEntity
            has a ranged weapon equipped and fulfills the required requirements.
            </summary>
        </member>
        <member name="P:Zelda.Items.EquipmentStatus.CanCast">
            <summary>
            Gets a value indicating whether the extended-statable ZeldaEntity
            has a staff equipped and fulfills the required requirements.
            </summary>
        </member>
        <member name="P:Zelda.Items.EquipmentStatus.IsWearingDagger">
            <summary>
            Gets a value indicating whether the extended-statable ZeldaEntity is
            currently wearing a Dagger in his WeaponHand.
            </summary>
        </member>
        <member name="P:Zelda.Items.EquipmentStatus.AnySlotUnfulfilled">
            <summary>
            Gets a value indicating whether any item slot has currently
            an disabled item.
            </summary>
        </member>
        <member name="M:Zelda.Items.EquipmentStatus.#ctor(Zelda.Status.ExtendedStatable)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Items.EquipmentStatus"/> class.
            </summary>
            <param name="statable">
            The <see cref="T:Zelda.Status.ExtendedStatable"/> component of the ZeldaEntity whos 
            equipment status the new <see cref="T:Zelda.Items.EquipmentStatus"/> represents.
            </param>
        </member>
        <member name="M:Zelda.Items.EquipmentStatus.Update">
            <summary>
            Updates this EquipmentStatus.
            </summary>
        </member>
        <member name="M:Zelda.Items.EquipmentStatus.Equip(Zelda.Items.EquipmentInstance,Zelda.Items.EquipmentStatusSlot,Zelda.Items.EquipmentInstance@)">
            <summary>
            Tries to enquip the specified <see cref="T:Zelda.Items.Equipment"/> in the specified <see cref="T:Zelda.Items.EquipmentStatusSlot"/>.
            </summary>
            <param name="equipment">
            The equipment to enquip. Can be null.
            </param>
            <param name="slot">
            The slot to enquip the item in.
            </param>
            <param name="oldExchangedEquipment">
            Will contain the old item in the slot; if any.
            </param>
            <returns> true if it could be enquiped, otherwise false. </returns>
        </member>
        <member name="M:Zelda.Items.EquipmentStatus.SetNull(Zelda.Items.EquipmentStatusSlot,Zelda.Items.EquipmentInstance@)">
            <summary>
            Sets the item in the given EquipmentStatusSlot to null.
            </summary>
            <param name="slot">
            The slot to set for.
            </param>
            <param name="oldExchangedEquipment">
            Will contain the old item in the slot; if any.
            </param>
        </member>
        <member name="M:Zelda.Items.EquipmentStatus.Unequip(Zelda.Items.EquipmentStatusSlot)">
            <summary>
            Unequips the item in the specified <see cref="T:Zelda.Items.EquipmentStatusSlot"/>.
            </summary>
            <param name="slot">
            The related EquipmentStatusSlot.
            </param>
            <returns>
            The item that has been unequipped; if any.
            </returns>
        </member>
        <member name="M:Zelda.Items.EquipmentStatus.FitsSlot(Zelda.Items.EquipmentSlot,Zelda.Items.EquipmentStatusSlot)">
            <summary>
            Gets whether the specified slots work with eachother.
            </summary>
            <param name="slot">
            The related EquipmentSlot.
            </param>
            <param name="statusSlot">
            The related EquipmentStatusSlot.
            </param>
            <returns>
            Returns true if the given EquipmentSlot fits into the given EquipmentStatusSlot;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Items.EquipmentStatus.TryToEnquip(System.Collections.Generic.List{Zelda.Items.EquipmentStatus.EquipmentData})">
            <summary>
            Tries to enquip the items in the specified list.
            </summary>
            <param name="equipmentList">
            The list that contains the items that should be equiped.
            </param>
            <returns>
            Returns true if atleast one item has been enquiped;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Items.EquipmentStatus.HasEquipped(Zelda.Items.EquipmentInstance)">
            <summary>
            Gets a value indicating whether the given EquipmentInstance is equipped in any slot.
            </summary>
            <param name="equipmentInstance">
            The equipmentInstance to check.
            </param>
            <returns>
            true if there is indeed equipped the given EquipmentInstance.
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Items.EquipmentStatus.HasTwoSlots(Zelda.Items.EquipmentSlot)">
            <summary>
            Gets a value indicating whether the given EquipmentSlot has two slots.
            </summary>
            <param name="equipmentSlot">
            The slots to check.
            </param>
            <returns>
            true if there are two slots; -or- otherwise false. 
            </returns>
        </member>
        <member name="M:Zelda.Items.EquipmentStatus.HasEquipped(System.String)">
            <summary>
            Gets a value indicating whether there is an item equipped in any EquipmentStatusSlot
            that has the specified itemName.
            </summary>
            <param name="itemName">
            The name of the item.
            </param>
            <returns>
            true if there is indeed an item with the specified itemName;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Items.EquipmentStatus.HasEquipped(System.String,Zelda.Items.EquipmentStatusSlot)">
            <summary>
            Gets a value indicating whether there is an item equipped in
            the specified EquipmentStatusSlot that has the specified itemName.
            </summary>
            <param name="itemName">
            The name of the item.
            </param>
            <param name="slot">
            The slot to check.
            </param>
            <returns>
            true if there is indeed an item with the specified itemName;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Items.EquipmentStatus.GetBaseName(Zelda.Items.EquipmentInstance)">
            <summary>
            Gets the base name of the specified EquipmentInstance.
            </summary>
            <param name="equipmentInstance">
            The input EquipmentInstance.
            </param>
            <returns>
            The base name of the specified EquipmentInstance.
            </returns>
        </member>
        <member name="M:Zelda.Items.EquipmentStatus.HasItemInSlot(Zelda.Items.EquipmentStatusSlot)">
            <summary>
            Gets a value indicating whether there is an item in the specified EquipmentStatusSlot.
            </summary>
            <param name="slot">
            The related EquipmentStatusSlot.
            </param>
            <returns>
            Returns true if there is an item in the given EquipmentStatusSlot;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Items.EquipmentStatus.RaiseChangedEvent(Zelda.Items.EquipmentStatusSlot)">
            <summary>
            Fires the Changed event for the given EquipmentStatusSlot. 
            </summary>
            <param name="slot">
            The slot that has changed.
            </param>
        </member>
        <member name="M:Zelda.Items.EquipmentStatus.RefreshStatsFromItems">
            <summary>
            Recalculates how many stats the items give in the <see cref="T:Zelda.Items.EquipmentStatus"/>.
            </summary>
        </member>
        <member name="M:Zelda.Items.EquipmentStatus.RefreshCanBlock">
            <summary>
            Refreshes whether the ExtendedStatable whose equipment status is descriped by this
            EquipmentStatus instance can block.
            </summary>
            <remarks>
            Blocking only works when an actual shield (armor > 0) is equipped, 
            and no two-handed weapon.
            </remarks>
        </member>
        <member name="M:Zelda.Items.EquipmentStatus.GetEmptySlotForItem(Zelda.Items.EquipmentSlot,System.Boolean)">
            <summary>
            Gets the <see cref="T:Zelda.Items.EquipmentStatusSlot"/> that should be filled
            by an item that uses the specified <see cref="T:Zelda.Items.EquipmentSlot"/>.
            </summary>
            <param name="slot">
            The related EquipmentSlot.
            </param>
            <param name="preferSecondSlot">
            States whether the second slot should be prefered for items
            that have two slots.
            </param>
            <returns>
            The EquipmentStatusSlot for this EquipmentSlot.
            </returns>
        </member>
        <member name="M:Zelda.Items.EquipmentStatus.GetSlotForItem(Zelda.Items.EquipmentSlot,System.Boolean)">
            <summary>
            Gets the <see cref="T:Zelda.Items.EquipmentStatusSlot"/> that corresponds with the specified <see cref="T:Zelda.Items.EquipmentSlot"/>.
            </summary>
            <param name="slot">
            The related EquipmentSlot.
            </param>
            <param name="getSecondSlotIfAvailable">
            States whether the second slot (if available for that slot) should be received.
            </param>
            <returns>
            The EquipmentStatusSlot for this EquipmentSlot.
            </returns>
        </member>
        <member name="M:Zelda.Items.EquipmentStatus.Get(Zelda.Items.EquipmentStatusSlot)">
            <summary>
            Gets the <see cref="T:Zelda.Items.Equipment"/> at the specified slot.
            </summary>
            <param name="slot"> The slot to get. </param>
            <returns> The <see cref="T:Zelda.Items.Equipment"/> or null. </returns>
        </member>
        <member name="M:Zelda.Items.EquipmentStatus.Set(Zelda.Items.EquipmentStatusSlot,Zelda.Items.EquipmentInstance)">
            <summary>
            Helper method that sets the <see cref="T:Zelda.Items.Equipment"/> at the specified slot.
            </summary>
            <param name="slot">
            The related EquipmentStatusSlot to set.
            </param>
            <param name="value">
            The EquipmentInstance to set for the given EquipmentStatusSlot.
            </param>
        </member>
        <member name="M:Zelda.Items.EquipmentStatus.NotifyRequirementsRecheckNeeded">
            <summary>
            Notifies this EquipmentStatus that the item requirements
            should be re-checked next frame.
            </summary>
        </member>
        <member name="M:Zelda.Items.EquipmentStatus.CheckItemRequirements">
            <summary>
            Checks whether items fulfill their requirements and adjusts the
            inventory on new situations.
            </summary>
        </member>
        <member name="M:Zelda.Items.EquipmentStatus.DisableAllItems">
            <summary>
            Disables -all- equipped items by setting the requirement fulfillment to false.
            </summary>
        </member>
        <member name="M:Zelda.Items.EquipmentStatus.CheckAllSlots">
            <summary>
            Checks whether items fulfill their requirements and adjusts the
            inventory on new situations.
            </summary>
        </member>
        <member name="M:Zelda.Items.EquipmentStatus.CheckSlotFulfillsReqs(Zelda.Items.EquipmentStatusSlot)">
            <summary>
            Checks whether the specified slot fulfills all requirements.
            </summary>
            <param name="slot">
            The related EquipmentStatusSlot.
            </param>
            <returns>
            Whether a recheck of all slots is needed.
            </returns>
        </member>
        <member name="M:Zelda.Items.EquipmentStatus.IsRequirementFulfilled(Zelda.Items.EquipmentStatusSlot)">
            <summary>
            Gets whether the requirements are fulfilled for the specified slot.
            </summary>
            <param name="slot">
            The related EquipmentStatusSlot.
            </param>
            <returns>
            Returns true if the player fulfills the requirements
            for the item in the specified EquipmentStatusSlot;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Items.EquipmentStatus.SetRequirementFulfilled(Zelda.Items.EquipmentStatusSlot,System.Boolean)">
            <summary>
            Sets whether the requirements are fulfilled for the specified slot.
            </summary>
            <param name="slot">The related EquipmentStatusSlot.</param>
            <param name="value">The new value.</param>
        </member>
        <member name="M:Zelda.Items.EquipmentStatus.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes/Writes the data to descripe this EquipmentStatus.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Items.EquipmentStatus.WriteSlot(Zelda.Items.EquipmentStatusSlot,Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Writes the state of the given EquipmentStatusSlot using the given BinaryWriter. 
            </summary>
            <param name="slot">
            The EquipmentStatusSlot to write.
            </param>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Items.EquipmentStatus.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes/Reads the data to descripe this EquipmentStatus.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Items.EquipmentStatus.ReadSlot(Zelda.Items.EquipmentStatusSlot,Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Reads the specified <see cref="T:Zelda.Items.EquipmentStatusSlot"/>.
            </summary>
            <param name="slot">
            The EquipmentStatusSlot to read.
            </param>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Items.EquipmentStatus.armor">
            <summary>
            The total armor the equiped items provide.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentStatus.strength">
            <summary>
            The stats the equiped items provide.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentStatus.dexterity">
            <summary>
            The stats the equiped items provide.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentStatus.agility">
            <summary>
            The stats the equiped items provide.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentStatus.vitality">
            <summary>
            The stats the equiped items provide.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentStatus.intelligence">
            <summary>
            The stats the equiped items provide.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentStatus.luck">
            <summary>
            The stats the equiped items provide.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentStatus.requirementsRecheckIsNeeded">
            <summary>
            States whether <see cref="M:Zelda.Items.EquipmentStatus.CheckItemRequirements"/> should
            be called in the next Update.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentStatus.reqsFulfilledWeaponHand">
            <summary>
            Stores whether the equiped items fulfill their requirements.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentStatus.reqsFulfilledShieldHand">
            <summary>
            Stores whether the equiped items fulfill their requirements.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentStatus.reqsFulfilledRanged">
            <summary>
            Stores whether the equiped items fulfill their requirements.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentStatus.reqsFulfilledStaff">
            <summary>
            Stores whether the equiped items fulfill their requirements.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentStatus.reqsFulfilledChest">
            <summary>
            Stores whether the equiped items fulfill their requirements.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentStatus.reqsFulfilledBoots">
            <summary>
            Stores whether the equiped items fulfill their requirements.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentStatus.reqsFulfilledBelt">
            <summary>
            Stores whether the equiped items fulfill their requirements.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentStatus.reqsFulfilledHead">
            <summary>
            Stores whether the equiped items fulfill their requirements.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentStatus.reqsFulfilledGloves">
            <summary>
            Stores whether the equiped items fulfill their requirements.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentStatus.reqsFulfilledCloak">
            <summary>
            Stores whether the equiped items fulfill their requirements.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentStatus.reqsFulfilledNecklace1">
            <summary>
            Stores whether the equiped items fulfill their requirements.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentStatus.reqsFulfilledNecklace2">
            <summary>
            Stores whether the equiped items fulfill their requirements.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentStatus.reqsFulfilledRing1">
            <summary>
            Stores whether the equiped items fulfill their requirements.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentStatus.reqsFulfilledRing2">
            <summary>
            Stores whether the equiped items fulfill their requirements.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentStatus.reqsFulfilledTrinket1">
            <summary>
            Stores whether the equiped items fulfill their requirements.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentStatus.reqsFulfilledTrinket2">
            <summary>
            Stores whether the equiped items fulfill their requirements.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentStatus.reqsFulfilledRelic1">
            <summary>
            Stores whether the equiped items fulfill their requirements.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentStatus.reqsFulfilledRelic2">
            <summary>
            Stores whether the equiped items fulfill their requirements.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentStatus.reqsFulfilledBag1">
            <summary>
            Stores whether the equiped items fulfill their requirements.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentStatus.reqsFulfilledBag2">
            <summary>
            Stores whether the equiped items fulfill their requirements.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentStatus.weaponHand">
            <summary>
            The main hand slot.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentStatus.ranged">
            <summary>
            The ranged weapon slot.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentStatus.shieldHand">
            <summary>
            The shield hand slot.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentStatus.staff">
            <summary>
            The staff slot.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentStatus.head">
            <summary>
            The head slot.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentStatus.chest">
            <summary>
            The chest slot.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentStatus.gloves">
            <summary>
            The gloves slot.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentStatus.boots">
            <summary>
            The boots slot.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentStatus.belt">
            <summary>
            The belt slot.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentStatus.cloak">
            <summary>
            The cloak slot.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentStatus.necklace1">
            <summary>
            The necklace slots.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentStatus.necklace2">
            <summary>
            The necklace slots.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentStatus.ring1">
            <summary>
            The ring slots.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentStatus.ring2">
            <summary>
            The ring slots.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentStatus.trinket1">
            <summary>
            The trinket slots.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentStatus.trinket2">
            <summary>
            The trinket slots.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentStatus.relic1">
            <summary>
            The relic slots.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentStatus.relic2">
            <summary>
            The relic slots.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentStatus.bag1">
            <summary>
            The bag slots.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentStatus.bag2">
            <summary>
            The bag slots.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentStatus.statable">
            <summary>
            Identifies the <see cref="T:Zelda.Status.ExtendedStatable"/> component of the ZeldaEntity whos 
            equipment status the <see cref="T:Zelda.Items.EquipmentStatus"/> represents.
            </summary>
        </member>
        <member name="T:Zelda.Items.EquipmentStatus.EquipmentData">
            <summary>
            Stores the data of an loaded item.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentStatus.EquipmentData.Equipment">
            <summary>
            The EquipmentInstance object.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentStatus.EquipmentData.Slot">
            <summary>
            The EquipmentStatusSlot the EquipmentInstance should have gone in.
            </summary>
        </member>
        <member name="M:Zelda.Items.EquipmentStatus.EquipmentData.#ctor(Zelda.Items.EquipmentInstance,Zelda.Items.EquipmentStatusSlot)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Items.EquipmentStatus.EquipmentData"/> structure.
            </summary>
            <param name="equip">The EquipmentInstance object.</param>
            <param name="slot">The EquipmentStatusSlot the EquipmentInstance should have gone in.</param>
        </member>
        <member name="T:Zelda.Items.EquipmentStatusSlot">
            <summary>
            Enumerates the equipment slots that are available in the <see cref="T:Zelda.Items.EquipmentStatus"/>.
            </summary>
            <seealso cref="T:Zelda.Items.EquipmentSlot"/>
            <seealso cref="T:Zelda.Items.EquipmentStatus"/>
        </member>
        <member name="F:Zelda.Items.EquipmentStatusSlot.None">
            <summary>
            Indicates that no specific slot has been set.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentStatusSlot.WeaponHand">
            <summary>
            The WeaponHand slot.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentStatusSlot.ShieldHand">
            <summary>
            The ShieldHand slot.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentStatusSlot.Ranged">
            <summary>
            The RangedWeapon slot.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentStatusSlot.Chest">
            <summary>
            The Chest slot.
            </summary>,
        </member>
        <member name="F:Zelda.Items.EquipmentStatusSlot.Head">
            <summary>
            The Head slot.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentStatusSlot.Boots">
            <summary>
            The Boots slot.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentStatusSlot.Ring1">
            <summary>
            The first Ring slot.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentStatusSlot.Ring2">
            <summary>
            The second Ring slot.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentStatusSlot.Necklace1">
            <summary>
            The first Necklace slot.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentStatusSlot.Necklace2">
            <summary>
            The second Necklace slot.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentStatusSlot.Trinket1">
            <summary>
            The first Trinket slot.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentStatusSlot.Trinket2">
            <summary>
            The second Trinket slot.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentStatusSlot.Belt">
            <summary>
            The Belt slot.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentStatusSlot.Staff">
            <summary>
            The Staff/Wand slot.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentStatusSlot.Relic1">
            <summary>
            The first relic slot.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentStatusSlot.Relic2">
            <summary>
            The second relic slot.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentStatusSlot.Gloves">
            <summary>
            The gloves slot.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentStatusSlot.Cloak">
            <summary>
            The cloak slot.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentStatusSlot.Bag1">
            <summary>
            The first bag slot.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentStatusSlot.Bag2">
            <summary>
            The second bag slot.
            </summary>
        </member>
        <member name="F:Zelda.Items.EquipmentStatusSlot._EnumCount">
            <summary>
            Represents the number of EquipmentStatusSlot enum value.
            </summary>
        </member>
        <member name="T:Zelda.Items.Gem">
            <summary>
            A Gem is an <see cref="T:Zelda.Items.Item"/> that can be placed into a <see cref="T:Zelda.Items.Socket"/>.
            This class can't be inherited.
            </summary>
        </member>
        <member name="P:Zelda.Items.Gem.ItemType">
            <summary>
            Gets the <see cref="P:Zelda.Items.Gem.ItemType"/> this <see cref="T:Zelda.Items.Gem"/> represents.
            </summary>
        </member>
        <member name="P:Zelda.Items.Gem.EffectAura">
            <summary>
            Gets the status effects this <see cref="T:Zelda.Items.Gem"/> provides to the one that sockets it, if any.
            </summary>
        </member>
        <member name="P:Zelda.Items.Gem.GemColor">
            <summary>
            Gets or sets the 'color' of this <see cref="T:Zelda.Items.Gem"/>.
            </summary>
            <remarks>
            Remember the (gem-socket color relation!)
            </remarks>
        </member>
        <member name="P:Zelda.Items.Gem.RequiredLevel">
            <summary>
            Gets or sets the level required to use this <see cref="T:Zelda.Items.Gem"/>.
            </summary>
            <exception cref="T:System.ArgumentException">
            Set: If the given value is negative.
            </exception>
        </member>
        <member name="M:Zelda.Items.Gem.ModifyPowerBy(System.Single)">
            <summary>
            Modifies the power of this Gem by the given factor.
            </summary>
            <param name="factor">
            The factor to modify the item by.
            </param>
            <returns>
            true if modifications were allowed; -or- otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Items.Gem.CreateInstance(System.Single)">
            <summary>
            Creates a new instance of this <see cref="T:Zelda.Items.Gem"/>.
            </summary>
            <param name="powerFactor">
            The factor by which the power of the new ItemInstance varies compared to this base Item.
            </param>
            <returns>A new <see cref="T:Zelda.Items.GemInstance"/>.</returns>
        </member>
        <member name="M:Zelda.Items.Gem.FulfillsRequirements(Zelda.Status.Statable)">
            <summary>
            Gets a value indicating whether the given Statable component
            fulfills the requirements to socket this Gem.
            </summary>      
            <param name="statable">
            The <see cref="T:Zelda.Status.Statable"/> component of the ZeldaEntity
            that wishes to socket an instance of this <see cref="T:Zelda.Items.Gem"/>.
            </param>
            <returns>
            true if the Statable would be able to socket an instance of this <see cref="T:Zelda.Items.Gem"/>;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Items.Gem.Clone">
            <summary>
            Creates a clone of this <see cref="T:Zelda.Items.Gem"/>.
            </summary>
            <returns>
            The cloned item.
            </returns>
        </member>
        <member name="M:Zelda.Items.Gem.SetupClone(Zelda.Items.Gem)">
            <summary>
            Setups the given Gem to be a clone of this Gem.
            </summary>
            <param name="clone">
            The Gem to setup as a clone of this Gem.
            </param>
        </member>
        <member name="M:Zelda.Items.Gem.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Items.Gem.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Items.Gem.effects">
            <summary>
            The StatusEffects this <see cref="T:Zelda.Items.Gem"/> provides to the one that sockets it, if any.
            </summary>
        </member>
        <member name="F:Zelda.Items.Gem.requiredLevel">
            <summary>
            The storage field for the <see cref="P:Zelda.Items.Gem.RequiredLevel"/> property.
            </summary>
        </member>
        <member name="T:Zelda.Items.GemInstance">
            <summary>
            Represents an <see cref="T:Zelda.Items.ItemInstance"/> that stores <see cref="P:Zelda.Items.GemInstance.Gem"/>s.
            </summary>
        </member>
        <member name="P:Zelda.Items.GemInstance.Gem">
            <summary>
            Gets the <see cref="P:Zelda.Items.GemInstance.Gem"/> that is encapsulated by this <see cref="T:Zelda.Items.GemInstance"/>.
            </summary>
        </member>
        <member name="P:Zelda.Items.GemInstance.BaseGem">
            <summary>
            Gets the <see cref="P:Zelda.Items.GemInstance.Gem"/> template that is encapsulated by this <see cref="T:Zelda.Items.GemInstance"/>.
            </summary>
        </member>
        <member name="P:Zelda.Items.GemInstance.Color">
            <summary>
            Gets the 'color' of this Gem.
            </summary>
        </member>
        <member name="P:Zelda.Items.GemInstance.Effects">
            <summary>
            Gets the list of StatusEffects this GemInstance applies when socketed into an Item.
            </summary>
        </member>
        <member name="M:Zelda.Items.GemInstance.#ctor(Zelda.Items.Gem,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Items.GemInstance"/> class.
            </summary>
            <param name="gem">
            The underlying <see cref="P:Zelda.Items.GemInstance.Gem"/>.
            </param>
            <param name="powerFactor">
            The factor by which the power of the new ItemInstance varies compared to this base Item.
            </param>
        </member>
        <member name="M:Zelda.Items.GemInstance.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Items.GemInstance.ReadGem(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to create a <see cref="T:Zelda.Items.GemInstance"/>.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
            <returns>
            A new GemInstance object.
            </returns>
        </member>
        <member name="T:Zelda.Items.Inventory">
            <summary>
            Represents the backpack of the player that stores 
            all items the player owns but doesn't have equipped.
            </summary>
        </member>
        <member name="F:Zelda.Items.Inventory.DefaultGridWidth">
            <summary>
            The default size of the grid (in cell space) of the <see cref="T:Zelda.Items.Inventory"/>.
            </summary>
        </member>
        <member name="F:Zelda.Items.Inventory.DefaultGridHeight">
            <summary>
            The default size of the grid (in cell space) of the <see cref="T:Zelda.Items.Inventory"/>.
            </summary>
        </member>
        <member name="F:Zelda.Items.Inventory.InvalidCell">
            <summary>
            Represents an invalid Inventory Cell position.
            </summary>
        </member>
        <member name="E:Zelda.Items.Inventory.Added">
            <summary>
            Fired when an <see cref="T:Zelda.Items.Item"/> has been added to this Inventory.
            </summary>
        </member>
        <member name="E:Zelda.Items.Inventory.Removed">
            <summary>
            Fired when an <see cref="T:Zelda.Items.Item"/> has been removed from this Inventory.
            </summary>
        </member>
        <member name="P:Zelda.Items.Inventory.GridWidth">
            <summary>
            Gets the width of the grid (in cell space).
            </summary>
        </member>
        <member name="P:Zelda.Items.Inventory.GridHeight">
            <summary>
            Gets the height of the grid (in cell space).
            </summary>
        </member>
        <member name="P:Zelda.Items.Inventory.GridSize">
            <summary>
            Gets the size of the grid (in cell space).
            </summary>
        </member>
        <member name="P:Zelda.Items.Inventory.ItemCount">
            <summary>
            Gets a value that represents how many Item (stacks) are in the Inventory.
            </summary>
        </member>
        <member name="P:Zelda.Items.Inventory.Items">
            <summary>
            Gets the list of InventoryItems in this Inventory.
            </summary>
        </member>
        <member name="P:Zelda.Items.Inventory.ContainedItems">
            <summary>
            Gets an enumeration over all Items of this Inventory.
            </summary>
        </member>
        <member name="P:Zelda.Items.Inventory.ContainedItemInstances">
            <summary>
            Gets an enumeration over all ItemInstances of this Inventory.
            </summary>
        </member>
        <member name="M:Zelda.Items.Inventory.#ctor(Zelda.Entities.PlayerEntity)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Items.Inventory"/> class.
            </summary>
            <param name="player">The PlayerEntity that owns the Inventory.</param>
        </member>
        <member name="M:Zelda.Items.Inventory.#ctor(Zelda.Entities.PlayerEntity,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Items.Inventory"/> class.
            </summary>
            <param name="player">
            The PlayerEntity that owns the new Inventory.
            </param>
            <param name="gridWidth">
            The number of cells on the x-axis.
            </param>
            <param name="gridHeight">
            The number of cells on the y-axis.
            </param>
        </member>
        <member name="M:Zelda.Items.Inventory.Insert(Zelda.Items.ItemInstance)">
            <summary>
            Tries to insert the given ItemInstance into the <see cref="T:Zelda.Items.Inventory"/>.
            </summary>
            <param name="itemInstance">
            The ItemInstance to insert into the Inventory.
            </param>
            <returns>
            Returns true if the ItemInstance has been inserted;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Items.Inventory.TryAddToStack(Zelda.Items.ItemInstance)">
            <summary>
            Tries to add the given ItemInstance to an existing Item Stack.
            </summary>
            <param name="itemInstance">
            The ItemInstance to try to add to an existing Item Stack.
            </param>
            <returns>
            Returns whether the given ItemInstance was completely added to an ItemStack.
            </returns>
        </member>
        <member name="M:Zelda.Items.Inventory.InsertAt(Zelda.Items.ItemInstance,Atom.Math.Point2)">
            <summary>
            Tries to insert the specified <see cref="T:Zelda.Items.ItemInstance"/> at the given cell.
            </summary>
            <param name="itemInstance">The ItemInstance to insert.</param>
            <param name="cellPosition">The position of the starting cell (in cell space).</param>
            <returns>
            true if it has been inserted; otherwise false.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="itemInstance"/> is null.</exception>
        </member>
        <member name="M:Zelda.Items.Inventory.InsertAt(Zelda.Items.ItemInstance,System.Int32,System.Int32)">
            <summary>
            Tries to insert the specified <see cref="T:Zelda.Items.ItemInstance"/> at the given cell.
            </summary>
            <param name="itemInstance">The ItemInstance to insert.</param>
            <param name="cellX">The position of the cell on the x-axis (in cell space).</param>
            <param name="cellY">The position of the cell on the y-axis (in cell space).</param>
            <returns>true if it has been inserted; otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="itemInstance"/> is null.</exception>
        </member>
        <member name="M:Zelda.Items.Inventory.InsertAt(Zelda.Items.ItemInstance,System.Int32,System.Int32,Zelda.Items.ItemInstance@)">
            <summary>
            Tries to insert the specified <see cref="T:Zelda.Items.ItemInstance"/> at the given cell.
            </summary>
            <param name="itemInstance">The ItemInstance to insert.</param>
            <param name="cellX">
            The position of the cell on the x-axis (in cell space).
            </param>
            <param name="cellY">
            The position of the cell on the y-axis (in cell space).
            </param>
            <param name="oldItemInstance">
            Will contain the ItemInstance that has been replaced with the given <paramref name="itemInstance"/>.
            </param>
            <returns>true if it has been inserted; otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="itemInstance"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
            If <paramref name="cellX"/> or <paramref name="cellY"/> is invalid.
            </exception>
        </member>
        <member name="M:Zelda.Items.Inventory.FailSafeInsertAt(Zelda.Items.ItemInstance,Atom.Math.Point2)">
            <summary>
            Tries to insert the given ItemInstance into this Inventory at the given cell position.
            If this fails other mechanism are used to rescue the item.
            </summary>
            <param name="itemInstance">
            The ItemInstance to insert into this Inventory.
            </param>
            <param name="cellPosition">
            The position of the cell.
            </param>
        </member>
        <member name="M:Zelda.Items.Inventory.FailSafeInsertAt(Zelda.Items.ItemInstance,System.Int32,System.Int32)">
            <summary>
            Tries to insert the given ItemInstance into this Inventory at the given cell position.
            If this fails other mechanism are used to rescue the item.
            </summary>
            <param name="itemInstance">
            The ItemInstance to insert into this Inventory.
            </param>
            <param name="cellX">The position of the cell on the x-axis.</param>
            <param name="cellY">The position of the cell on the y-axis.</param>
        </member>
        <member name="M:Zelda.Items.Inventory.FailSafeInsert(Zelda.Items.ItemInstance)">
            <summary>
            Tries to insert the given ItemInstance into this Inventory.
            If this fails other mechanism are used to rescue the item.
            </summary>
            <param name="itemInstance">
            The ItemInstance to insert into this Inventory.
            </param>
        </member>
        <member name="M:Zelda.Items.Inventory.FindSpaceForItem(Zelda.Items.Item)">
            <summary>
            Tries to find a place the specified item fits in.
            </summary>
            <param name="item">
            The Item to find space for.
            </param>
            <returns>
            The parent cell or null if no space found.
            </returns>
        </member>
        <member name="M:Zelda.Items.Inventory.FindItemStack(System.String,System.Int32)">
            <summary>
            Tries to find an <see cref="T:Zelda.Items.Inventory.InventoryItem"/> whos Item
            has the given name and that isn't full.
            </summary>
            <param name="name"> The name of the item that should be stacked.</param>
            <param name="amount"> The amount of items that should be placeable on the stack. </param>
            <returns> The <see cref="T:Zelda.Items.Inventory.InventoryItem"/> object or null if no stack could be found. </returns>
        </member>
        <member name="M:Zelda.Items.Inventory.HasSpace(Zelda.Items.Item,System.Int32)">
            <summary>
            Gets whether there is space enough space in the <see cref="T:Zelda.Items.Inventory"/>
            for the specified <see cref="T:Zelda.Items.Item"/>.
            </summary>
            <param name="item">
            The related Item.
            </param>
            <param name="amount">
            The number of items of the given Item.
            </param>
            <returns>
            Returns true if there exists enough space in the Inventory for the specified Item;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Items.Inventory.HasSpaceAt(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets whether an item of the given size fits into the inventory
            at the given position
            </summary>
            <param name="cellX">
            The position of the starting cell on the x-axis.
            </param>
            <param name="cellY">
            The position of the starting cell on the y-axis.
            </param>
            <param name="itemWidth">
            The width of the item (in cell space).
            </param>
            <param name="itemHeight">
            The height of the item (in cell space).
            </param>
            <returns>
            True if no other item is in the way of the item;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Items.Inventory.HasFreeSpace(Zelda.Items.ItemInstance,System.Int32,System.Int32)">
            <summary>
            Helper method that checks whether the there is free space
            for the given item at the given cell. The paramters are supposed to be valid.
            </summary>
            <param name="itemInstance">
            The ItemInstance to test.
            </param>
            <param name="cellX">The position of the cell on the x-axis (in cell space). Must be a valid value.</param>
            <param name="cellY">The position of the cell on the y-axis (in cell space). Must be a valid value.</param>
            <returns>
            Returns true if there exists enough space in the Inventory to insert the given ItemInstance;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Items.Inventory.Contains(Zelda.Items.Item)">
            <summary>
            Gets a value indicating whether this Inventory contains the given Item.
            </summary>
            <param name="item">
            The Item to check for.
            </param>
            <returns>
            True if this Inventory contains the Item;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Items.Inventory.Contains(System.String)">
            <summary>
            Gets a value indicating whether the <see cref="T:Zelda.Items.Inventory"/> contains the specified item.
            </summary>
            <param name="itemName">
            The name that uniquely identifies the item to look for.
            </param>
            <returns>
            True if the Inventory contains atleast one Item that has the specified <paramref name="itemName"/>;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Items.Inventory.Contains(System.String,System.Int32)">
            <summary>
            Gets a value indicating whether the <see cref="T:Zelda.Items.Inventory"/> contains
            the specific amount of a specific item.
            </summary>
            <param name="itemName">
            The name that uniquely identifies the item to look for.
            </param>
            <param name="amount">
            The number of items the Inventory should contain atleast.
            </param>
            <returns>
            True if the Inventory contains atleast the specified <paramref name="amount"/>
            of Items that have the specified <paramref name="itemName"/>.
            </returns>
        </member>
        <member name="M:Zelda.Items.Inventory.Contains(System.String,System.Int32,System.Int32@)">
            <summary>
            Gets a value indicating whether the <see cref="T:Zelda.Items.Inventory"/> contains
            the specific amount of a specific item.
            </summary>
            <param name="itemName">
            The name that uniquely identifies the item to look for.
            </param>
            <param name="amount">
            The number of items the Inventory should contain atleast.
            </param>
            <param name="amountFound">Will store the number of found items.</param>
            <returns>
            True if the Inventory contains atleast the specified <paramref name="amount"/>
            of Items that have the specified <paramref name="itemName"/>.
            </returns>
        </member>
        <member name="M:Zelda.Items.Inventory.Contains(System.String,System.Int32,System.Boolean)">
            <summary>
            Gets a value indicating whether the <see cref="T:Zelda.Items.Inventory"/> contains
            the specific amount of a specific item.
            </summary>
            <param name="itemName">
            The name that uniquely identifies the item to look for.
            </param>
            <param name="amount">
            The number of items the Inventory should contain atleast.
            </param>
            <param name="ignoreAffixes">
            States whether the affixes of affixed item should be ignored;
            or not.
            </param>
            <returns>
            True if the Inventory contains atleast the specified <paramref name="amount"/>
            of Items that have the specified <paramref name="itemName"/>.
            </returns>
        </member>
        <member name="M:Zelda.Items.Inventory.Contains(System.String,System.Int32,System.Boolean,System.Int32@)">
            <summary>
            Gets a value indicating whether the <see cref="T:Zelda.Items.Inventory"/> contains
            the specific amount of a specific item.
            </summary>
            <param name="itemName">
            The name that uniquely identifies the item to look for.
            </param>
            <param name="amount">
            The number of items the Inventory should contain atleast.
            </param>
            <param name="ignoreAffixes">
            States whether the affixes of affixed item should be ignored;
            or not.
            </param>
            <param name="amountFound">
            Will store the number of found items.
            </param>
            <returns>
            True if the Inventory contains atleast the specified <paramref name="amount"/>
            of Items that have the specified <paramref name="itemName"/>.
            </returns>
        </member>
        <member name="M:Zelda.Items.Inventory.GetItemAt(Atom.Math.Point2)">
            <summary>
            Gets the ItemInstance at the given position of the Inventory-Grid.
            </summary>
            <param name="cellX">The position of the cell in cell space.</param>
            <returns>
            The <see cref="T:Zelda.Items.ItemInstance"/> in the cell, or null if the cell contains no Item.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If the given cell indices are invalid.</exception>
        </member>
        <member name="M:Zelda.Items.Inventory.GetItemAt(System.Int32,System.Int32)">
            <summary>
            Gets the ItemInstance at the given position of the Inventory-Grid.
            </summary>
            <param name="cellX">The position of the cell on the x-axis (in cell space).</param>
            <param name="cellY">The position of the cell on the y-axis (in cell space).</param>
            <returns>
            The <see cref="T:Zelda.Items.ItemInstance"/> in the cell, or null if the cell contains no Item.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If the given cell indices are invalid.</exception>
        </member>
        <member name="M:Zelda.Items.Inventory.GetInventoryItemAt(System.Int32,System.Int32)">
            <summary>
            Gets the InventoryItem at the given position of the Inventory-Grid.
            </summary>
            <param name="cellX">The position of the cell on the x-axis (in cell space).</param>
            <param name="cellY">The position of the cell on the y-axis (in cell space).</param>
            <returns>
            The <see cref="T:Zelda.Items.ItemInstance"/> in the cell, or null if the cell contains no Item.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If the given cell indices are invalid.</exception>
        </member>
        <member name="M:Zelda.Items.Inventory.GetItem(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Gets the ItemInstance at the specified index.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">If the given index is invalid.</exception>
            <param name="index">The zero-based index of the item to get.</param>
            <param name="cellX">Will contain the position of the cell on the x-axis (in cell space).</param>
            <param name="cellY">Will contain the position of the cell on the y-axis (in cell space).</param>
            <returns>The <see cref="T:Zelda.Items.ItemInstance"/> in the cell.</returns>
        </member>
        <member name="M:Zelda.Items.Inventory.GetInventoryItemIn(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the first item in the given cell area.
            </summary>
            <param name="cellX">The position of the cell on the x-axis (in cell space).</param>
            <param name="cellY">The position of the cell on the y-axis (in cell space).</param>
            <param name="cellWidth">The width of the area to search (in cell space).</param>
            <param name="cellHeight">The height of the area to search (in cell space).</param>
            <returns>The <see cref="T:Zelda.Items.ItemInstance"/> in the cell.</returns>
        </member>
        <member name="M:Zelda.Items.Inventory.GetInventoryItem(Zelda.Items.Item)">
            <summary>
            Gets the first InventoryItem that consists of the given Item.
            </summary>
            <param name="item">
            The template item.
            </param>
            <returns>
            The requested InventoryItem; or null if no such item exists in the Inventory.
            </returns>
        </member>
        <member name="M:Zelda.Items.Inventory.UseItem(Zelda.Items.Item)">
            <summary>
            Tries to use an ItemInstance of the given Item that is placed in this Inventory. 
            </summary>
            <param name="item">
            The Item to use.
            </param>
            <returns>
            Returns whether the item was actually used.
            </returns>
        </member>
        <member name="M:Zelda.Items.Inventory.UseItem(Zelda.Items.Inventory.InventoryItem)">
            <summary>
            Helper method that uses the ItemUseEffect of the specified <see cref="T:Zelda.Items.Inventory.InventoryItem"/>.
            </summary>
            <param name="inventoryItem">
            The InventoryItem whose ItemUseEffect should be used.
            </param>
            <returns>
            Returns whether the item was actually used.
            </returns>
        </member>
        <member name="M:Zelda.Items.Inventory.UseLifeRestoringItem">
            <summary>
            Uses the best fitting life restoring item
            that is currently in the inventory.
            </summary>
        </member>
        <member name="M:Zelda.Items.Inventory.UseManaRestoringItem">
            <summary>
            Uses the best fitting mana restoring item
            that is currently in the inventory.
            </summary>
        </member>
        <member name="M:Zelda.Items.Inventory.UsePowerRestoringItem(Zelda.Status.LifeMana)">
            <summary>
            Uses the best fitting power restoring item
            that is currently in the inventory.
            </summary>
            <param name="powerType">
            The power type to restore.
            </param>
        </member>
        <member name="M:Zelda.Items.Inventory.FindBestFittingRestoringItem(System.Int32,Zelda.Status.LifeMana,System.Collections.Generic.List{Zelda.Items.Inventory.InventoryItem})">
            <summary>
            Finds the best fitting life or mana restoring item from the given list of items.
            </summary>
            <param name="healingNeeded">
            The amount of healing needed to fully restore the entity.
            </param>
            <param name="powerType">
            The power type to restore.
            </param>
            <param name="healingItems">
            The list of items that can restore the entity.
            </param>
            <returns>
            The best suited restoring item.
            </returns>
        </member>
        <member name="M:Zelda.Items.Inventory.GetRestoringItems(Zelda.Status.LifeMana)">
            <summary>
            Gets all items that restore the given power type.
            </summary>
            <param name="powerType">
            The power type to restore.
            </param>
            <returns>
            The list of matching items.
            </returns>
        </member>
        <member name="M:Zelda.Items.Inventory.SetNull(Zelda.Items.Inventory.InventoryItem)">
            <summary>
            Helper method that sets the items in the area the specified InventoryItem covers to null.
            </summary>
            <param name="inventoryItem">
            The InventoryItem to 'erase' from the grid.
            </param>
        </member>
        <member name="M:Zelda.Items.Inventory.SetNull(Atom.Math.Point2,Atom.Math.Point2)">
            <summary>
            Helper method that sets the items of the grid in the specified area to null.
            </summary>
            <param name="start">The start position in grid-space.</param>
            <param name="size">The size of the area to set to null.</param>
        </member>
        <member name="M:Zelda.Items.Inventory.SetNull(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Helper method that sets the items of the grid in the specified area to null.
            </summary>
            <param name="startX">The start index on the x-axis in grid-space.</param>
            <param name="startY">The start index on the y-axis in grid-space.</param>
            <param name="width">The width of the area.</param>
            <param name="height">The height of the area.</param>
        </member>
        <member name="M:Zelda.Items.Inventory.SetAndAdd(Zelda.Items.ItemInstance,System.Int32,System.Int32)">
            <summary>
            Helper method that sets the item at the specified cell, also adding the item
            to the inventory's item-list.
            </summary>
            <param name="itemInstance">The item to set. May not be null.</param>
            <param name="cellX">The position of the cell on the x-axis (in cell space). Must be a valid value.</param>
            <param name="cellY">The position of the cell on the y-axis (in cell space). Must be a valid value.</param>
        </member>
        <member name="M:Zelda.Items.Inventory.SetAndAdd(Zelda.Items.ItemInstance,Zelda.Items.Inventory.Cell)">
            <summary>
            Helper method that sets the item at the specified cell, also adding the item
            to the inventory's item-list.
            </summary>
            <param name="itemInstance">The item to set. May not be null.</param>
            <param name="cell">The starting cell to set the item at.</param>
        </member>
        <member name="M:Zelda.Items.Inventory.SetAndAdd(Zelda.Items.Inventory.InventoryItem,Zelda.Items.Inventory.Cell)">
            <summary>
            Helper method that sets the item at the specified cell, 
            also adding the item to the inventory's item-list.
            </summary>
            <param name="inventoryItem">The item to set.</param>
            <param name="cell">The starting cell.</param>
        </member>
        <member name="M:Zelda.Items.Inventory.SetCells(Zelda.Items.Inventory.InventoryItem,Zelda.Items.Inventory.Cell)">
            <summary>
            Sets the cells starting at the given Cell to the given InventoryItem.
            </summary>
            <param name="inventoryItem">The item to set.</param>
            <param name="cell">The starting cell.</param>
        </member>
        <member name="M:Zelda.Items.Inventory.Remove(System.String)">
            <summary>
            Tries to remove one item with the given <paramref name="itemName"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="itemName"/> is null.
            </exception>
            <param name="itemName">
            The name of the item to remove.
            </param>
            <returns>
            Returns true if the items have been removed;
            or otherwise false if there don't exist
            enough items with the given <paramref name="itemName"/>.
            </returns>
        </member>
        <member name="M:Zelda.Items.Inventory.Remove(System.String,System.Int32)">
            <summary>
            Tries to remove x <paramref name="amount"/> of the items
            with the given <paramref name="itemName"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="itemName"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            If <paramref name="amount"/> is less than zero.
            </exception>
            <param name="itemName">The name of the item to remove.</param>
            <param name="amount">The number of items to remove.</param>
            <returns>
            Returns true if the items have been removed;
            or otherwise false if there don't exist
            enough items with the given <paramref name="itemName"/>.
            </returns>
        </member>
        <member name="M:Zelda.Items.Inventory.Remove(System.String,System.Int32,System.Collections.Generic.IList{Zelda.Items.ItemInstance})">
            <summary>
            Tries to remove x <paramref name="amount"/> of the items
            with the given <paramref name="itemName"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="itemName"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            If <paramref name="amount"/> is less than zero.
            </exception>
            <param name="itemName">The name of the item to remove.</param>
            <param name="amount">The number of items to remove.</param>
            <param name="modifiedItems">
            Will contain the ItemInstances that have been modified.
            </param>
            <returns>
            Returns true if the items have been removed;
            or otherwise false if there don't exist
            enough items with the given <paramref name="itemName"/>.
            </returns>
        </member>
        <member name="M:Zelda.Items.Inventory.Remove(System.String,System.Int32,System.Boolean)">
            <summary>
            Tries to remove x <paramref name="amount"/> of the items
            with the given <paramref name="itemName"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="itemName"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            If <paramref name="amount"/> is less than zero.
            </exception>
            <param name="itemName">
            The name of the item to remove.
            </param>
            <param name="amount">
            The number of items to remove.
            </param>
            <param name="ignoreAffixed">
            States whether affixed items should be ignored, 
            and instead their base item should be checked.
            </param>
            <returns>
            Returns true if the items have been removed;
            or otherwise false if there don't exist
            enough items with the given <paramref name="itemName"/>.
            </returns>
        </member>
        <member name="M:Zelda.Items.Inventory.Remove(System.String,System.Int32,System.Boolean,System.Collections.Generic.IList{Zelda.Items.ItemInstance})">
            <summary>
            Tries to remove x <paramref name="amount"/> of the items
            with the given <paramref name="itemName"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="itemName"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            If <paramref name="amount"/> is less than zero.
            </exception>
            <param name="itemName">
            The name of the item to remove.
            </param>
            <param name="amount">
            The number of items to remove.
            </param>
            <param name="ignoreAffixed">
            States whether affixed items should be ignored, 
            and instead their base item should be checked.
            </param>
            <param name="modifiedItems">
            Will contain the ItemInstances that have been modified.
            </param>
            <returns>
            Returns true if the items have been removed;
            or otherwise false if there don't exist
            enough items with the given <paramref name="itemName"/>.
            </returns>
        </member>
        <member name="M:Zelda.Items.Inventory.RemoveAt(System.Int32,System.Int32,Zelda.Items.ItemInstance@)">
            <summary>
            Tries to remove the item at the given cell.
            </summary>
            <param name="cellX">The position on the x-axis of the cell. (in cell-space)</param>
            <param name="cellY">The position on the y-axis of the cell. (in cell-space)</param>
            <param name="removedItemInstance">Will contain the removed item.</param>
            <returns>
            true if the Item at the given Cell has been removed;
            false if not.
            </returns>
            <exception cref="T:System.ArgumentException">If the given cell indices are invalid.</exception>
        </member>
        <member name="M:Zelda.Items.Inventory.RemoveItem(Zelda.Items.Inventory.InventoryItem)">
            <summary>
            Helper method that removes the specified <see cref="T:Zelda.Items.Inventory.InventoryItem"/> from the Inventory.
            </summary>
            <param name="inventoryItem">
            The InventoryItem to remove from this Inventory.
            </param>
            <returns>
            Returns true if the specified InventoryItem has been removed;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Items.Inventory.Exchange(Zelda.Items.ItemInstance,System.Int32,System.Int32,Zelda.Items.ItemInstance@)">
            <summary>
            Tries to exchange the item at the given cell with the given <paramref name="itemInstance"/>.
            </summary>
            <param name="itemInstance">
            The ItemInstance to exchange with the ItemInstance at the given cell.
            </param>
            <param name="cellX">The position of the cell on the x-axis (in cell space).</param>
            <param name="cellY">The position of the cell on the y-axis (in cell space).</param>
            <param name="exchangedItemInstance">
            Will contain the <see cref="T:Zelda.Items.ItemInstance"/> that has been
            exchanged by the given <paramref name="itemInstance"/>.
            </param>
            <returns>
            Returns true if the ItemInstances have been successfully exchanged;
            otherwise false.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="itemInstance"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the given cell indices are invalid.</exception>
            <exception cref="T:Atom.NotFoundException">If no item is in the given cell.</exception>
        </member>
        <member name="M:Zelda.Items.Inventory.Exchange(Zelda.Items.ItemInstance,System.Int32,System.Int32,Zelda.Items.Inventory.InventoryItem@)">
            <summary>
            Tries to exchange the item at the given cell with the given <paramref name="itemInstance"/>.
            </summary>
            <param name="itemInstance">
            The ItemInstance to exchange with the ItemInstance at the given cell.
            </param>
            <param name="cellX">The position of the cell on the x-axis (in cell space).</param>
            <param name="cellY">The position of the cell on the y-axis (in cell space).</param>
            <param name="exchangedInventoryItem">
            Will contain the <see cref="T:Zelda.Items.Inventory.InventoryItem"/> that has been
            exchanged by the given <paramref name="itemInstance"/>.
            </param>
            <returns>
            Returns true if the ItemInstances have been successfully exchanged;
            otherwise false.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="itemInstance"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the given cell indices are invalid.</exception>
            <exception cref="T:Atom.NotFoundException">If no item is in the given cell.</exception>
        </member>
        <member name="M:Zelda.Items.Inventory.Clear">
            <summary>
            Removes all items from the <see cref="T:Zelda.Items.Inventory"/>.
            </summary>
        </member>
        <member name="M:Zelda.Items.Inventory.AddToList(Zelda.Items.Inventory.InventoryItem)">
            <summary>
            Adds the given InventoryItem to the list of items.
            </summary>
            <param name="inventoryItem">
            The InventoryItem to add.
            </param>
        </member>
        <member name="M:Zelda.Items.Inventory.RemoveFromList(Zelda.Items.Inventory.InventoryItem)">
            <summary>
            Tries to remove the given InventoryItem from the list of items.
            </summary>
            <param name="inventoryItem">
            The InventoryItem to remove.
            </param>
            <returns>
            true if the specified item has been removed from the internal
            list of items; otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Items.Inventory.GetOtherInventory">
            <summary>
            Helper method that returns the 'other' Inventory.
            </summary>
            <returns>
            If the current inventory is the CraftingBottle then 
            the main Inventory is returned;
            otherwise if the current inventory is the main Inventory then 
            the CraftingBottle is returned.
            </returns>
        </member>
        <member name="M:Zelda.Items.Inventory.IsValidCell(System.Int32,System.Int32)">
            <summary>
            Gets whether the given cell position is valid.
            </summary>
            <param name="cellX">The position of the cell on the x-axis (in cell space).</param>
            <param name="cellY">The position of the cell on the y-axis (in cell space).</param>
            <returns>
            true if the cell indices are valid;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Items.Inventory.IsValidCell(Atom.Math.Point2)">
            <summary>
            Gets whether the given cell position is valid.
            </summary>
            <param name="cell">
            The position of the cell (in cell space).
            </param>
            <returns>
            true if the cell indices are valid;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Items.Inventory.IsValidCellArea(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets whether the given cell position is valid.
            </summary>
            <param name="cellX">The position of the cell on the x-axis (in cell space).</param>
            <param name="cellY">The position of the cell on the y-axis (in cell space).</param>
            <param name="cellWidth">The width of the cell area (in cell space).</param>
            <param name="cellHeight">The height of the cell area (in cell space).</param>
            <returns>
            true if the cell indices are valid;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Items.Inventory.ThrowOnInvalidCell(System.Int32,System.Int32)">
            <summary>
            Helper method that throws <see cref="T:System.ArgumentOutOfRangeException"/>
            if any of the given cell indices is invalid.
            </summary>
            <param name="cellX">The position of the cell on the x-axis (in cell space).</param>
            <param name="cellY">The position of the cell on the y-axis (in cell space).</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Zelda.Items.Inventory.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes/Writes the data of this <see cref="T:Zelda.Items.Inventory"/>
            using the given System.IO.BinaryWriter.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Items.Inventory.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes/Reads the data of this <see cref="T:Zelda.Items.Inventory"/>
            using the given System.IO.BinaryReader.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Items.Inventory.HandleLeftClick(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Handles the left click on the given Inventory Cell.
            </summary>
            <param name="cellX">The position of the cell on the x-axis (in cell space).</param>
            <param name="cellY">The position of the cell on the y-axis (in cell space).</param>
            <param name="isShiftDown">States whether the player is pressing the Shift key.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If the given cell indices are invalid.</exception>
        </member>
        <member name="M:Zelda.Items.Inventory.GetRelativeSocketPositionAt(System.Int32,System.Int32)">
            <summary>
            Tries to get the relative Socket position in the cell with the given position.
            </summary>
            <param name="cellX">The position of the cell on the x-axis.</param>
            <param name="cellY">The position of the cell on the y-axis.</param>
            <returns>
            The requested Socket position; or (-1; -1).
            </returns>
        </member>
        <member name="M:Zelda.Items.Inventory.SwapItemsOnShiftLeftClick(Zelda.Items.ItemInstance,Atom.Math.Point2)">
            <summary>
            Handles the case of the user left-clicking on an item in the Inventory
            while the Shift key is down.
            </summary>
            <remarks>
            The default behaviour is to move the item into the magic crafting bottle.
            </remarks>
            <param name="item">The related item.</param>
            <param name="cell">The original position of the <paramref name="item"/> (in cell-space).</param>
        </member>
        <member name="M:Zelda.Items.Inventory.HandleRightClick(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Handles the right click on given Inventory Cell.
            </summary>
            <param name="cellX">The position of the cell on the x-axis (in cell space).</param>
            <param name="cellY">The position of the cell on the y-axis (in cell space).</param>
            <param name="isCtrlDown">States whether the control modifier key is pressed.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If the given cell indices are invalid.</exception>
        </member>
        <member name="M:Zelda.Items.Inventory.TryEquip(Zelda.Items.EquipmentInstance,Zelda.Items.Inventory.Cell,System.Boolean)">
            <summary>
            Tries to equip the given EquipmentInstance that is part of this Inventory.
            </summary>
            <param name="equipInstance">The EquipmentInstance to equip.</param>
            <param name="cell">The cell that contains the EquipmentInstance.</param>
            <param name="preferSecondSlot">
            States whether the equipment should be equiped into the secondary slot if possible.
            </param>
        </member>
        <member name="F:Zelda.Items.Inventory.gridWidth">
            <summary>
            The dimensions of the cells (in cell space).
            </summary>
        </member>
        <member name="F:Zelda.Items.Inventory.gridHeight">
            <summary>
            The dimensions of the cells (in cell space).
            </summary>
        </member>
        <member name="F:Zelda.Items.Inventory.cells">
            <summary>
            The inventory cells.
            </summary>
        </member>
        <member name="F:Zelda.Items.Inventory.owner">
            <summary>
            Reference to the <see cref="T:Zelda.Entities.PlayerEntity"/> that owns 
            the <see cref="T:Zelda.Items.Inventory"/>.
            </summary>
        </member>
        <member name="F:Zelda.Items.Inventory.items">
            <summary>
            Contains the items currently in the inventory.
            </summary>
        </member>
        <member name="F:Zelda.Items.Inventory.itemBackup">
            <summary>
            Holds the items that couldn't be inserted into the ivnentory; even when they should have.
            It's a backup so that the player doesn't lose items. E.g. when changing the inventory size of an item.
            </summary>
        </member>
        <member name="T:Zelda.Items.Inventory.Cell">
            <summary>
            Defines a single cell in the <see cref="T:Zelda.Items.Inventory"/>'s grid.
            </summary>
        </member>
        <member name="F:Zelda.Items.Inventory.Cell.Position">
            <summary>
            The position of the <see cref="T:Zelda.Items.Inventory.Cell"/> in the <see cref="T:Zelda.Items.Inventory"/>'s grid.
            This is a read-only field.
            </summary>
        </member>
        <member name="P:Zelda.Items.Inventory.Cell.Item">
            <summary>
            Gets or sets the item this <see cref="T:Zelda.Items.Inventory.Cell"/> contains, if any.
            </summary>
        </member>
        <member name="P:Zelda.Items.Inventory.Cell.ItemCount">
            <summary>
            Gets or sets the number of items on the item stack in this cell. 
            </summary>
        </member>
        <member name="M:Zelda.Items.Inventory.Cell.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Items.Inventory.Cell"/> class. 
            </summary>
            <param name="x">
            The position of the <see cref="T:Zelda.Items.Inventory.Cell"/> in
            the <see cref="T:Zelda.Items.Inventory"/>'s grid on the x-axis.
            </param>
            <param name="y">
            The position of the <see cref="T:Zelda.Items.Inventory.Cell"/> in
            the <see cref="T:Zelda.Items.Inventory"/>'s grid on the y-axis.
            </param>
        </member>
        <member name="T:Zelda.Items.Inventory.InventoryItem">
            <summary>
            Defines the container object that stores
            an <see cref="F:Zelda.Items.Inventory.InventoryItem.ItemInstance"/> that is
            inside of the <see cref="T:Zelda.Items.Inventory"/>.
            </summary>
        </member>
        <member name="F:Zelda.Items.Inventory.InventoryItem.ItemInstance">
            <summary>
            The underlying <see cref="F:Zelda.Items.Inventory.InventoryItem.ItemInstance"/> object.
            </summary>
        </member>
        <member name="F:Zelda.Items.Inventory.InventoryItem.ParentCell">
            <summary>
            The parent cell this item is in. (upper left corner)
            </summary>
        </member>
        <member name="P:Zelda.Items.Inventory.InventoryItem.BaseItem">
            <summary>
            Gets the definition Item of the <see cref="F:Zelda.Items.Inventory.InventoryItem.ItemInstance"/>.
            </summary>
        </member>
        <member name="P:Zelda.Items.Inventory.InventoryItem.Item">
            <summary>
            Gets the Item of the <see cref="F:Zelda.Items.Inventory.InventoryItem.ItemInstance"/>.
            </summary>
        </member>
        <member name="M:Zelda.Items.Inventory.InventoryItem.#ctor(Zelda.Items.ItemInstance,Zelda.Items.Inventory.Cell)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Items.Inventory.InventoryItem"/> class.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="itemInstance"/> or <paramref name="parentCell"/> is null.
            </exception>
            <param name="itemInstance">
            The ItemInstance that is part of the new InventoryItem.
            </param>
            <param name="parentCell">
            The Cell the new InventoryItem is placed in.
            </param>
        </member>
        <member name="T:Zelda.Items.ItemCreationHelper">
            <summary>
            Provides a mechanism to create instances of an <see cref="T:Zelda.Items.Item"/>,
            that based on a random number generator and the Item's properties 
            may be affixed or not.
            </summary>
        </member>
        <member name="M:Zelda.Items.ItemCreationHelper.Create(Zelda.Items.Item,Atom.Math.RandMT)">
            <summary>
            Creates an instance of the given Item.
            </summary>
            <param name="item">
            The item for which an instance should be created from.
            </param>
            <param name="rand">
            A random number generator.
            </param>
            <returns>The newly created ItemInstance.</returns>
        </member>
        <member name="M:Zelda.Items.ItemCreationHelper.ShouldCreateAffixedItemInstance(Zelda.Items.Item,Atom.Math.RandMT)">
            <summary>
            Gets a value indicating whether an AffixedItemInstance should be created for the given Item.
            </summary>
            <param name="item">
            The item for which an instance should be created from.
            </param>
            <param name="rand">
            A random number generator.
            </param>
            <returns>
            True if an AffixedItemInstance should be created;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Items.ItemCreationHelper.GetChanceToBeAffixed(Zelda.Items.ItemQuality)">
            <summary>
            Gets the chance an item of the given ItemQuality has atleast one affix.
            </summary>
            <param name="itemQuality">
            The quality of the item.
            </param>
            <returns>
            A value between 0 and 100, representing the chance for the item to have atleast one affix.
            </returns>
        </member>
        <member name="M:Zelda.Items.ItemCreationHelper.CreateAffixedItemInstance(Zelda.Items.Item,Atom.Math.RandMT,Zelda.Items.Affixes.AffixDatabase)">
            <summary>
            Creates an instance of the given Item, that has been extended with atleast one affix.
            </summary>
            <param name="item">
            The base item.
            </param>
            <param name="rand">
            A random number generator.
            </param>
            <param name="affixDatabase">
            Provices access to all known ISuffixes and IPrefixes.
            </param>
            <returns>
            The newly created ItemInstance.
            </returns>
        </member>
        <member name="M:Zelda.Items.ItemCreationHelper.GetAffixesToCreate(Zelda.Items.Item,Atom.Math.RandMT)">
            <summary>
            Gets the Affixes that should be created for the given Item.
            </summary>
            <param name="item">The base item.</param>
            <param name="rand">A random number generator.</param>
            <returns>
            The affixes to create.</returns>
        </member>
        <member name="T:Zelda.Items.ItemExtensions">
            <summary>
            Provides extension methods for <see cref="T:Zelda.Items.Item"/> related enumerations.
            </summary>
        </member>
        <member name="M:Zelda.Items.ItemExtensions.IsRanged(Zelda.Items.WeaponType)">
            <summary>
            Gets a value indicating whether the WeaponType represents a ranged weapon.
            </summary>
            <param name="weaponType">
            The input WeaponType.
            </param>
            <returns>
            True if the <paramref name="weaponType"/> represents a ranged weapon; 
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Items.ItemExtensions.IsJewelry(Zelda.Items.EquipmentSlot)">
            <summary>
            Gets a value indicating whether the EquipmentSlot may contain a Trinket, Relic, Ring or Necklace.
            </summary>
            <param name="slot">
            The input EquipmentSlot.
            </param>
            <returns>
            True if the <paramref name="slot"/> may contain any jewelry; 
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Items.ItemExtensions.IsWeaponOrShield(Zelda.Items.EquipmentSlot)">
            <summary>
            Gets a value indicating whether the EquipmentSlot may contain a Melee Weapon, Ranged Weapon, Shield or Staff.
            </summary>
            <param name="slot">
            The input EquipmentSlot.
            </param>
            <returns>
            True if the <paramref name="slot"/> may contain any weapon or shield; 
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Items.ItemExtensions.IsOneHanded(Zelda.Items.WeaponType)">
            <summary>
            Gets a value indicating whether this WeaponType descripes a weapon
            that can wield with one weapon; and as such allows blocking.
            </summary>
            <param name="weaponType">
            The input WeaponType.
            </param>
            <returns>
            True if the <paramref name="weaponType"/> descripes an one-handed weapon; 
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Items.ItemExtensions.AllowsPrefix(Zelda.Items.Affixes.AffixType)">
            <summary>
            Gets a value indicating whether this <see cref="T:Zelda.Items.Affixes.AffixType"/> allows
            the item to have an <see cref="T:Zelda.Items.Affixes.IPrefix"/>.
            </summary>
            <param name="affixType">
            The AffixType to check.
            </param>
            <returns>
            True if the given <paramref name="affixType"/> is 
            <see cref="F:Zelda.Items.Affixes.AffixType.Prefix"/>, <see cref="F:Zelda.Items.Affixes.AffixType.Both"/> or <see cref="F:Zelda.Items.Affixes.AffixType.AlwaysBoth"/>;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Items.ItemExtensions.AllowsSuffix(Zelda.Items.Affixes.AffixType)">
            <summary>
            Gets a value indicating whether this <see cref="T:Zelda.Items.Affixes.AffixType"/> allows
            the item to have an <see cref="T:Zelda.Items.Affixes.ISuffix"/>.
            </summary>
            <param name="affixType">
            The AffixType to check.
            </param>
            <returns>
            True if the given <paramref name="affixType"/> is 
            <see cref="F:Zelda.Items.Affixes.AffixType.Suffix"/>, <see cref="F:Zelda.Items.Affixes.AffixType.Both"/> or <see cref="F:Zelda.Items.Affixes.AffixType.AlwaysBoth"/>;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Items.ItemExtensions.IsOffensiveShieldHand(Zelda.Items.Equipment)">
            <summary>
            Gets a value indicating whether the given Equipment is an offensive offhand item
            that goes into the Shield slot.
            </summary>
            <param name="equipment">
            The Equipment to check.
            </param>
            <returns>
            True if the given Equipment is an offensive offhand item;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Items.ItemExtensions.IsProtectiveShield(Zelda.Items.Equipment)">
            <summary>
            Gets a value indicating whether the given Equipment is a protective shield.
            </summary>
            <param name="equipment">
            The Equipment to check.
            </param>
            <returns>
            True if the given Equipment is an protective shield;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Items.ItemExtensions.IsMetalOrChain(Zelda.Items.SpecialItemType)">
            <summary>
            Gets a value indicating whether the given SpecialItemType represents
            and item made of Metal or Chains.
            </summary>
            <param name="itemType">
            The Equipment to check.
            </param>
            <returns>
            True if the given SpecialItemType represents an item made of Metal or Chains;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Items.ItemManager">
            <summary>
            Manages the loading of <see cref="T:Zelda.Items.Item"/>s.
            This class can't be inherited.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemManager.Statable">
            <summary>
            Gets or sets the <see cref="T:Zelda.Status.ExtendedStatable"/> for which
            Items should be loaded.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemManager.Path">
            <summary>
            Gets or sets the relative path to the folder that contains the item data.
            </summary>
            <value>
            The default value is "Content/Items/".
            </value>
        </member>
        <member name="M:Zelda.Items.ItemManager.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Items.ItemManager"/> class.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Items.ItemManager.Get(System.String)">
            <summary>
            Receives the <see cref="T:Zelda.Items.Item"/> with the given <paramref name="name"/>.
            </summary>
            <remarks>
            The Item gets loaden from the HD if it's
            not cached by this <see cref="T:Zelda.Items.ItemManager"/>.
            </remarks>
            <param name="name">The name of the <see cref="T:Zelda.Items.Item"/> to get.</param>
            <returns>The requested <see cref="T:Zelda.Items.Item"/>.</returns>
        </member>
        <member name="M:Zelda.Items.ItemManager.Load(System.String)">
            <summary>
            Receives the <see cref="T:Zelda.Items.Item"/> with the given <paramref name="name"/>
            by loading it directly from the HD.
            </summary>
            <remarks>
            This won't add the Item to the cache, nor use the cache to load the Item.
            </remarks>
            <param name="name">The name of the <see cref="T:Zelda.Items.Item"/> to get.</param>
            <returns>The requested <see cref="T:Zelda.Items.Item"/>.</returns>
        </member>
        <member name="M:Zelda.Items.ItemManager.GetDeserializationContext(System.IO.BinaryReader)">
            <summary>
            Gets an IItemDeserializationContext to be used when deserializing an Itme.
            </summary>
            <param name="reader">
            The BinaryReader from which should be read.
            </param>
            <returns>
            The IItemDeserializationContext to use.
            </returns>
        </member>
        <member name="M:Zelda.Items.ItemManager.HasCached(System.String)">
            <summary>
            Receives a value that indicates whether this <see cref="T:Zelda.Items.ItemManager"/> has the <see cref="T:Zelda.Items.Item"/>
            with the given <paramref name="name"/> cached. 
            </summary>
            <remarks>
            Items get cached when they are loaden from the disc when using the <see cref="M:Zelda.Items.ItemManager.Get(System.String)"/> method.
            </remarks>
            <param name="name">The name of the Item.</param>
            <returns>true if the item is cached; otherwise false.</returns>
        </member>
        <member name="M:Zelda.Items.ItemManager.GetGems">
            <summary>
            Gets all <see cref="T:Zelda.Items.Gem"/> definitions that are available.
            </summary>
        </member>
        <member name="M:Zelda.Items.ItemManager.Unload">
            <summary>
            Clears the cached items.
            </summary>
        </member>
        <member name="F:Zelda.Items.ItemManager.path">
            <summary>
            The relative path to the folder that contains the item data.
            </summary>
        </member>
        <member name="F:Zelda.Items.ItemManager.dict">
            <summary>
            The dictory that contains the <see cref="T:Zelda.Items.Item"/>s which have been loaden and cached, sorted by their name.
            </summary>
        </member>
        <member name="F:Zelda.Items.ItemManager.serviceProvider">
            <summary>
            Provides fast access to game-related services.
            </summary>
        </member>
        <member name="T:Zelda.Items.ItemResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Armor_FullPlate_Scale">
            <summary>
              Looks up a localized string similar to Full body armor made from scale-iron. Heavy..
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Armor_Ghost_Black">
             <summary>
               Looks up a localized string similar to &apos;The spooky feel won&apos;t go away
            even after washing it over ten times.&apos;
             .
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Armor_KokirianNovice">
            <summary>
              Looks up a localized string similar to &apos;Clothes moths&apos; favorite meal.&apos;
            .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Armor_Mantle_Ninja">
            <summary>
              Looks up a localized string similar to &apos;Are you going to be a NINJA WARRIOR ?!!&apos;
            .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Armor_Robe_GoronWizard">
            <summary>
              Looks up a localized string similar to &apos;The vacuum is actually a highly dense structure.&apos;
            .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Armor_Robe_Scale">
             <summary>
               Looks up a localized string similar to &apos;The perfectly woven scales in this garment
            appear to collect natural light, providing a
            boost in magical ability to the wearer.&apos;.
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Armor_Robe_Silk">
             <summary>
               Looks up a localized string similar to &apos;You don&apos;t have to feel strange
            for wearing a pink robe.. !&apos;.
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Armor_StoneSpirit">
            <summary>
              Looks up a localized string similar to &apos;A life-force tries to emerge from the stone.&apos;
            .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Bag_Deku">
            <summary>
              Looks up a localized string similar to A small slightly-slimy belt bag..
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Belt_BadLeather">
            <summary>
              Looks up a localized string similar to &apos;The worst quality, but cheap.&apos;.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Belt_GirdleOfArnold">
             <summary>
               Looks up a localized string similar to His second last words were:
            &apos;Don&apos;t let them get da girdle!&apos;
             .
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Belt_HeroesRage">
             <summary>
               Looks up a localized string similar to &apos;To be able to restrain your rage 
            in battle is an important step to
            become a master fighter.&apos;.
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Belt_Mana">
            <summary>
              Looks up a localized string similar to &apos;Mana is leaking out of it. How sticky!&apos;
            .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Belt_SlowMotion">
            <summary>
              Looks up a localized string similar to &apos;From the makers of Matrix (tm).&apos;.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Belt_Wizard">
             <summary>
               Looks up a localized string similar to &apos;I&apos;d say that us manipulating nature
            as we wish is fully justified.&apos;.
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Boots_Fairy">
            <summary>
              Looks up a localized string similar to &apos;Are those boots for girls ... ?&apos;
            .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Boots_Fairy_Cursed">
            <summary>
              Looks up a localized string similar to &apos;The darkness lies on these boots.&apos;
            .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Boots_HyruleLeather">
            <summary>
              Looks up a localized string similar to It says: &apos;Made in Hyrule.&apos;
            .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Boots_Iron_Skeleton">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Boots_IronCoatedLeather">
            <summary>
              Looks up a localized string similar to &apos;A kick with those boots shall hurt.&apos;
            .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Boots_Shackles_Blood">
             <summary>
               Looks up a localized string similar to &apos;You&apos;ll leave a trace of blood on the
            ground if you wear those shackles.&apos;
             .
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Boots_Shackles_Prototype">
            <summary>
              Looks up a localized string similar to &apos;Still requires additional refinement...&apos;
            .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Boots_UndeadHunter">
             <summary>
               Looks up a localized string similar to How stinky!
            They really should get cleaned ....
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Bow_Ballista_Strong">
            <summary>
              Looks up a localized string similar to &apos;Just the perfect ranged weapon for a warrior.&apos;
            .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Bow_KokiriNovice">
            <summary>
              Looks up a localized string similar to A simple bow..
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Bow_RudrasEnhancedDemon">
            <summary>
              Looks up a localized string similar to &apos;The sinew of the bow has been
            replaced by the hair of demons. Deadly!&apos;.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Buff_LuckyCandy">
            <summary>
              Looks up a localized string similar to &apos;Don&apos;t ruin your teeth!&apos;
            .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Cloak_Battle">
            <summary>
              Looks up a localized string similar to &apos;This one has been used in many battles.&apos;
            .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Cloak_Cape_DemonMarquess">
             <summary>
               Looks up a localized string similar to &apos;A tale tells that in the old times parts
            of Hyrule&apos;s royal family were abducted
            and transformed into true demons.&apos;
             .
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Cloak_ChickenManteau">
             <summary>
               Looks up a localized string similar to &apos;When I see a bird that walks like a duck and
            swims like a duck and quacks like a duck, 
            then I call that bird a duck. Oh wait.. damn!&apos;
             .
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Cloak_Coat_Skeleton">
            <summary>
              Looks up a localized string similar to &apos;U-aakh, it&apos;s smelling like a rotten skeleton!&apos;
            .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Cloak_Coat_SlimyGhost">
             <summary>
               Looks up a localized string similar to &apos;Green slime keeps coming out.
            One day it will fill all earth!&apos;.
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Cloak_Muffler_Demon">
            <summary>
              Looks up a localized string similar to &apos;Watch out! It may turn your mind evil~&apos;
            .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Cloak_Pauldrons_Avenger">
            <summary>
              Looks up a localized string similar to &apos;Vengeance is bitter sweet.&apos;
            .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Food_Burrito_Ghost">
            <summary>
              Looks up a localized string similar to &apos;Yummy! Too bad that it&apos;s hard to eat.&apos;
            .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Food_Carrot">
            <summary>
              Looks up a localized string similar to &apos;Om nom nom nom.. !&apos;
            .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Food_MilkPack_Demon">
             <summary>
               Looks up a localized string similar to &apos;Milk is for babies. When you grow up you have to
            drink beer. But I admit that this one here is different.&apos;.
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Food_WholeRoast">
            <summary>
              Looks up a localized string similar to Crunchy!.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_GemFire">
             <summary>
               Looks up a localized string similar to &apos;Fire gems empower an item with
            the greatness of the goddess Din.&apos;
             .
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_GemLight">
             <summary>
               Looks up a localized string similar to &apos;Light gems imbue an item with
            the sacred essence of the goddesses.&apos;
             .
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_GemLight_Skeleton">
            <summary>
              Looks up a localized string similar to &apos;Light gems attract and capture the souls of the fallen.&apos;
            .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_GemNature">
             <summary>
               Looks up a localized string similar to &apos;Nature gems inherit the magic
            of life itself to an item.&apos;
             .
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_GemPrismatic">
             <summary>
               Looks up a localized string similar to &apos;Fire, Water, Shadow, Light and Nature
            I call you forth to aid me in my deeds.&apos;
             .
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_GemShadow">
             <summary>
               Looks up a localized string similar to &apos;Shadow gems envelop an item with
            the mystical powers of the underworld.&apos;
             .
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_GemWater">
             <summary>
               Looks up a localized string similar to &apos;Water gems impart divine wisdom
            upon an item and its holder.&apos;
             .
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Gloves_BloodyGhostMittens">
            <summary>
              Looks up a localized string similar to &apos;The blood seems to be fresh~&apos;
            .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Gloves_DeathChicken">
             <summary>
               Looks up a localized string similar to &apos;Every time a chicken dies ...
            .. worms! Waaaaaah.&apos;
             .
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Gloves_Gauntlets_StrongPush">
            <summary>
              Looks up a localized string similar to &apos;It allows the wearer to easily break any wall.&apos;
            .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Gloves_GoronMage">
             <summary>
               Looks up a localized string similar to &apos;Even the most untalented individual can
            learn to be a master with enough training.&apos;
             .
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Gloves_NinjaExtraction">
             <summary>
               Looks up a localized string similar to &apos;Extracting all useful information before
            finishing the job is preferred.&apos;
             .
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Gloves_StrongBow">
            <summary>
              Looks up a localized string similar to &apos;Steady aim + these gloves = profit!&apos;
            .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Head_Blinkers_Demon">
            <summary>
              Looks up a localized string similar to &apos;Let the force be your guide.&apos;
            .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Head_Chains_DarkGhostSkeleton">
             <summary>
               Looks up a localized string similar to Silent moonlight, in fades of grey,
            Spoken memories, that always stay,
            Whisper sweetly, in words so clear,
            But only of sorrow, pain and fear...
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Head_CowboyHat">
            <summary>
              Looks up a localized string similar to &apos;Where&apos;s my horse?&apos;
            .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Head_DemonStrawHat">
            <summary>
              Looks up a localized string similar to &apos;Oh dear! It&apos;s surrounded  by an evil aura.&apos;
            .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Head_FakeHeavenRing">
             <summary>
               Looks up a localized string similar to &apos;Ghost, zombies, demons and so on are
            all bullshit. When do you finally get that
            they don&apos;t exist? Trust me on that one.&apos;
             .
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Head_PooPoo">
             <summary>
               Looks up a localized string similar to &apos;The horrible smell makes &apos;em
            hesitate to attack you.&apos;.
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Head_ScaleHat">
            <summary>
              Looks up a localized string similar to &apos;Something is moving inside it... ugh!&apos;.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Head_SimpleHat">
            <summary>
              Looks up a localized string similar to A cheap hat.
            .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Head_WizardDark">
            <summary>
              Looks up a localized string similar to &apos;All what I say is wrong. Is it?&apos;
            .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Key_Crystal_Shimmering">
            <summary>
              Looks up a localized string similar to &apos;It&apos;s a key... which doesn&apos;t look like a a key.&apos;
            .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Key_Locket_Triforce">
            <summary>
              Looks up a localized string similar to Whisper-whisper: &apos;Use me to unlock a secret..&apos;.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Key_RouteOfDin_Goron">
            <summary>
              Looks up a localized string similar to &apos;It just might open one of those black blocks.&apos;.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Key_RouteOfDin_SShaped">
            <summary>
              Looks up a localized string similar to &apos;The S-shape of this key seems to remind you of something ..&apos;.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Key_TiaWoods_StoneIsland">
            <summary>
              Looks up a localized string similar to &apos;Opens the path leading to the
            Stone Tombs in the Tia Woods.&apos;.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Misc_Apple_Big_Green">
            <summary>
              Looks up a localized string similar to &apos;From a tree in the Hyrule Gardens.&apos;
            .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Misc_Apple_Small_Red">
            <summary>
              Looks up a localized string similar to &apos;One bite will make you smile all day. :)&apos;
            .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Misc_BloodiedGoronShackleBall">
            <summary>
              Looks up a localized string similar to &apos;These Gorons seem to have changed
            ... or how can you explain this ..?&apos;
            .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Misc_Bottle_SmallEmpty">
            <summary>
              Looks up a localized string similar to &quot;Of great use for every alchemist.&quot;
            .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Misc_BrokenWindSword_Part_1">
             <summary>
               Looks up a localized string similar to An old story tells that there once existed a sword,
            which captured the forces of the great winds.
            ....
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Misc_BrokenWindSword_Part_2">
             <summary>
               Looks up a localized string similar to ... A sword that allowed its wielder to master the powers
            that helped to form the very lands of Hyrule. It&apos;s name
            was ....
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Misc_BrokenWindSword_Part_3">
             <summary>
               Looks up a localized string similar to ... the Wind Sword of Hyrule. The protectors of time and
            space were entrusted to keep the sword hidden of the evils
            that have been foreseen to come. ....
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Misc_BrokenWindSword_Part_4">
             <summary>
               Looks up a localized string similar to ... And those times came, the great evil in form of
            Ganon emerged to destroy all we loved.
            His avaricious mind wanted almost nothing else
            than to get his hands on the mighty sword. ....
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Misc_BrokenWindSword_Part_5">
             <summary>
               Looks up a localized string similar to ... Using the powers of the sword he could shape Hyrule
            as he wishes. And it almost came that way ....
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Misc_BrokenWindSword_Part_6">
             <summary>
               Looks up a localized string similar to ... Today we call it the Legend of the Winds, but I tell you
            it is far from a legend. Thunder and rain were moaning for
            weeks after Ganondorf has found the Temple of Time. ....
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Misc_BrokenWindSword_Part_7">
             <summary>
               Looks up a localized string similar to ... But as Ganondorf reached for the sword, a great light,
            brighter than anything you&apos;ve seen before, filled the temple.
            Din herself, the goddess of power, broke the sword into seven
            pieces and spread them all over Hyrule. The story ends by
            presaging that one day a young boy will come and reforge 
            the mighty Wind Sword of Hyrule to fight the evils. One day..
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Misc_Buff_ManaDeliciousGem">
             <summary>
               Looks up a localized string similar to &apos;Not only are they terribly addicting,
            but they also have additional uses.&apos;.
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Misc_Card_LuckyGoron">
            <summary>
              Looks up a localized string similar to &apos;Combine an Ace, a Two and a Three
            to create a card set.&apos;.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Misc_Chains_Loose">
             <summary>
               Looks up a localized string similar to These tools have worn loose as a result from their countless uses.
            The surface is rugged, and... a little oily?.
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Misc_ChickenFeed">
            <summary>
              Looks up a localized string similar to A chickens favourite meal..
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Misc_Clam_MysteriousBlue">
            <summary>
              Looks up a localized string similar to &apos;It&apos;s apparent use stays hidden.&apos;
            .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Misc_Clover_FourLeaf">
             <summary>
               Looks up a localized string similar to &apos;It is said that Four Leaf Clovers can 
            be used to create lucky charms!&apos;
             .
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Misc_Crystal_DarkMatter">
             <summary>
               Looks up a localized string similar to &apos;It consists of a strange material that
            usually can&apos;t be found in Hyrule.&apos;
             .
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Misc_Crystal_Fragment_Skeletal">
             <summary>
               Looks up a localized string similar to &apos;An old story tells that the Skeleton Crystals were
            each shattered into three crystal fragments. Could it be?&apos;
             .
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Misc_DeadFish">
            <summary>
              Looks up a localized string similar to &apos;This fish has been thrown around a lot.&apos;.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Misc_Doll_Yoyo">
            <summary>
              Looks up a localized string similar to &apos;Lovely toy for any child. Made in Hyrule.&apos;
            .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Misc_Dye_Black">
             <summary>
               Looks up a localized string similar to &apos;Some people like to wear black clothes.
            This dye is just perfect for them.&apos;
             .
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Misc_Dye_Blue">
            <summary>
              Looks up a localized string similar to &apos;An expensive magical-enchanted blue dye.&apos;
            .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Misc_Dye_Green">
            <summary>
              Looks up a localized string similar to &apos;Pretty cheap green dye.&apos;.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Misc_Dye_Red">
            <summary>
              Looks up a localized string similar to &apos;An effective red dye.&apos;.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Misc_Fabric">
            <summary>
              Looks up a localized string similar to &apos;It has a spooky feel to it.&apos;.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Misc_Feather_Chicken_White">
            <summary>
              Looks up a localized string similar to &apos;It&apos;s unusually soft for a chicken feather.&apos;
            .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Misc_GemPouch">
             <summary>
               Looks up a localized string similar to &apos;Be aware that the other gems inside the pouch will
            disappear once you&apos;ve chosen to take out a gem.&apos;
             .
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Misc_Gold_Goron">
             <summary>
               Looks up a localized string similar to &apos;This gold ore has been mined in
            the Death Mountains near Goronia.&apos;
             .
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Misc_Herb_Sticky">
            <summary>
              Looks up a localized string similar to A smell-resistant crafter can use it as glue by grinding it down..
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Misc_Iron">
            <summary>
              Looks up a localized string similar to &apos;Of great use for any blacksmith.&apos;.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Misc_Keese_Tooth">
            <summary>
              Looks up a localized string similar to &apos;A bat&apos;s sharp tooth.&apos;.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Misc_Keese_Wing">
            <summary>
              Looks up a localized string similar to &apos;It&apos;s STILL moving...&apos;.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Misc_Key_SmallUniversalWind">
            <summary>
              Looks up a localized string similar to &apos;By the powers of the winds, be open!.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Misc_Leaf_Great">
             <summary>
               Looks up a localized string similar to &apos;The essence of these leaves
            can easily be extracted.&apos;.
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Misc_Leaf_Sharp">
            <summary>
              Looks up a localized string similar to A very sharp leaf. Don&apos;t cut yourself..
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Misc_Leaf_Small_Black">
            <summary>
              Looks up a localized string similar to &apos;Can be used to create Black Dye.&apos;.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Misc_Leaf_Small_Fire">
            <summary>
              Looks up a localized string similar to &apos;Autsch! It&apos;s really hot!&apos;.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Misc_Leaf_Small_Fresh">
            <summary>
              Looks up a localized string similar to Its fresh smell is yummy~!.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Misc_Mucus_Octorok">
            <summary>
              Looks up a localized string similar to &apos;Those are sticky! Please clean your hands ...&apos;
            .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Misc_MusicCross">
            <summary>
              Looks up a localized string similar to Play the Song of the Cross to teleport..
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Misc_Ore_Iron">
             <summary>
               Looks up a localized string similar to &apos;To create Iron combine
            three units of Iron Ore.&apos;
             .
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Misc_Potion_VirginBlood">
             <summary>
               Looks up a localized string similar to &apos;You know what? I respect women! I love women!
            I respect them so much that I completely stay away
            from them and instead ..!&apos;.
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Misc_RudrasSoulStone">
             <summary>
               Looks up a localized string similar to &apos;A part of Rudra&apos;s soul has been
            captured in this crystal stone.&apos;.
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Misc_Scale_Snake_Green">
            <summary>
              Looks up a localized string similar to &apos;Watch out! It&apos;s still poisoned~&apos;.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Misc_Silk_Expensive">
             <summary>
               Looks up a localized string similar to &apos;A rumour says that this silk
            comes from the golden realm .&apos;
             .
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Misc_SkeletonBone">
            <summary>
              Looks up a localized string similar to A leg bone of a skeleton..
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Misc_SkeletonBonePowder">
             <summary>
               Looks up a localized string similar to &apos;This fine powder is of
            great use for any alchemist.&apos;.
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Misc_Skull_Goron">
            <summary>
              Looks up a localized string similar to &apos;These Gorons are using skulls of
            their own kind in bloody rituals.&apos;
            .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Misc_SmallFreshLeaf">
            <summary>
              Looks up a localized string similar to Its fresh smell is yummy..
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Misc_Steel_BrokenGoronPiece">
            <summary>
              Looks up a localized string similar to &apos;Why did they break the precious steel ..?&apos;
            .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Misc_Steel_Goron">
            <summary>
              Looks up a localized string similar to &apos;Additional refinement is required for
            it to have any magical properties.&apos;
            .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Misc_Tablet_OfWisdom">
            <summary>
              Looks up a localized string similar to &apos;Studying the ancient words may uncover many secrets.&apos;
            .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Misc_Triforce_Small">
             <summary>
               Looks up a localized string similar to The three great goddesses, their labors completed,
            departed for the heavens.
            And golden sacred triangles remained at the point
            where the goddesses left the world..
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Necklace_DemonRogue">
             <summary>
               Looks up a localized string similar to &apos;If you wear that necklace for too long then I assure
            you that it will corrupt you. And then not even your 
            best friends will be safe from you. Do you want that?&apos;
             .
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Necklace_FlareDancer">
            <summary>
              Looks up a localized string similar to &apos;Furea Dansaa ... as they are called.&apos;
            .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Necklace_LostFamily">
             <summary>
               Looks up a localized string similar to &apos;This necklace has been doomed
            lost by the Tia Woods family.&apos;
             .
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Necklace_River">
            <summary>
              Looks up a localized string similar to o_o!!!.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Necklace_SmallLucky">
             <summary>
               Looks up a localized string similar to &apos;Buy it and the luck of the
            world shall all be yours.&apos;.
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Necklace_TrueBloodCore">
            <summary>
              Looks up a localized string similar to &apos;Stores the blood of a fallen warrior.&apos;
            .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Necklace_UndeadHunter">
             <summary>
               Looks up a localized string similar to &apos;If you trust the legends then most of these skeletons
            here actually have been undead hunters before..&apos;
             .
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_OffhandDagger">
             <summary>
               Looks up a localized string similar to &apos;Some fighters prefer to give up
            defense for pure brutal power.&apos;
             .
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_OldShirt">
            <summary>
              Looks up a localized string similar to It really needs a wash up!.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_PhaseShifting">
             <summary>
               Looks up a localized string similar to &apos;It seems to be partially shifted out from
            our realm of existence. How can this be.. ?&apos;
             .
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Potion_BoneHardening">
            <summary>
              Looks up a localized string similar to &apos;Don&apos;t forget that even hardened bones can break.&apos;
            .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Potion_Buff_BloodCourage">
             <summary>
               Looks up a localized string similar to &apos;I didn&apos;t expect the kinda Spanish inquisition.&apos;
            ...
            .
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Potion_Buff_OctorokMucus">
            <summary>
              Looks up a localized string similar to &apos;Risk: Might clog the blood flow in your body.&apos;
            .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Potion_Buff_SchottlanderFish">
             <summary>
               Looks up a localized string similar to &apos;This drink is like a rush on a horse
            and then a really loooooooong fall.&apos;
             .
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Potion_GhostlyShroom">
            <summary>
              Looks up a localized string similar to &apos;You may feel strange after drinking it!&apos;
            .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Potion_Goron_Blue">
            <summary>
              Looks up a localized string similar to You feel refreshed...
            .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Potion_Goron_Red">
            <summary>
              Looks up a localized string similar to You feel reborn ...
            .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Potion_ResetStatsGoron">
            <summary>
              Looks up a localized string similar to &apos;Nom nom nom&apos; x3.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Potion_ResetTalentsSmall">
            <summary>
              Looks up a localized string similar to &quot;Your Sins Are Forgiven&quot;.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Potion_ShadowProt_Small">
            <summary>
              Looks up a localized string similar to &apos;The essence of evil, captured in a simple bottle.&apos;.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Potion_Small_Strength">
            <summary>
              Looks up a localized string similar to &quot;Be careful to not overdose.&quot;
            .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Quest_Goron_Croissant">
            <summary>
              Looks up a localized string similar to Not something humans should eat..
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Quest_StoneTempleSecretMap">
             <summary>
               Looks up a localized string similar to Shows every single secret of
            the family tombs of the local rulers.
            Sadly it&apos;s encoded..
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Quest_TeleportStone_RouteOfDin_Boss">
             <summary>
               Looks up a localized string similar to As you touch the stone a voice speaks to you:
            &quot;I am awaiting you. You are nothing.&quot;.
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Quest_TiaWoods_BrokenYoyoDoll">
             <summary>
               Looks up a localized string similar to &apos;This doll needs to be repaired or it could
            actually hurt the children that play with it.&apos;
             .
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Quest_TiaWoods_MurderLetter">
             <summary>
               Looks up a localized string similar to &apos;The letter has been sealed carefully.
            Do you really want to open it?&apos;.
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Quest_TiaWoodsFamilyPortrait">
            <summary>
              Looks up a localized string similar to &apos;This painting has only got a sentimental value.&apos;.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Relic_Bloody_Heirloom">
            <summary>
              Looks up a localized string similar to &apos;It&apos;s the hand of Billy&apos;s grandfather.&apos;
            .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Relic_BombBag_Tinted">
             <summary>
               Looks up a localized string similar to &apos;I&apos;d rather not use it to store bombs.
            Or do you want to explode?&apos;.
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Relic_CardSet_LuckyGoron">
             <summary>
               Looks up a localized string similar to &apos;Don&apos;t waste all your rubies even when you
            think that you have all the luck of the world.&apos;
             .
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Relic_Crest_BloodRuby">
            <summary>
              Looks up a localized string similar to &apos;That ruby could be your ticket out of this God forsaken continent.&apos;.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Relic_Crystal_Skeletal">
             <summary>
               Looks up a localized string similar to &apos;Once upon a time there was a force that kept the balance
            in place. It created the Skeletal Crystals to protect the citizen
            of Hyrule from the dangers of the Skeleton Realm.
            ... Until the crystals were scattered over the lands.
            Since then skeletons started again to appear in all parts of Hyrule.
             .
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Relic_FireBone">
            <summary>
              Looks up a localized string similar to &apos;Sockets and gems are the best friends&apos; - Guild Alchemist.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Relic_FreyasChant">
             <summary>
               Looks up a localized string similar to &apos;Watch out! The agglomerated magic stored 
            in this relic might discharge at any time.&apos;
             .
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Relic_Hammer_BloodSmith">
            <summary>
              Looks up a localized string similar to *smash smash smash*
            .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Relic_MysticalShell">
            <summary>
              Looks up a localized string similar to &apos;This is not an ordinary shell, but something more..&apos;
            .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Relic_NanoHamster">
             <summary>
               Looks up a localized string similar to The girl lost this kernel in a furious attack by an illogical zen.
            Also adds: +100 Cuteness Rating.
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Relic_OctorokStone">
             <summary>
               Looks up a localized string similar to &apos;This stone has something unusual to it.
            Could it be the mucus that is covering it ..?&apos;
             .
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Relic_Paper_Skeleton_Special">
            <summary>
              Looks up a localized string similar to &apos;Skeletons can read and write?!&apos;.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Ring_ArrowInfusingBracelets">
            <summary>
              Looks up a localized string similar to &apos;The power of the bracelets infuses your arrows.&apos;
            .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Ring_BloodMyth">
             <summary>
               Looks up a localized string similar to &apos;A myth tells that each year a young virgin
            is taken from Hyrule Town to be sacrificed
            in order to appease the blood gods.&apos;.
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Ring_ConcentratedEnergy">
            <summary>
              Looks up a localized string similar to &apos;The energy may unload at any time.&apos;
            .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Ring_Copper">
            <summary>
              Looks up a localized string similar to &apos;Its simple look can easily fool one.&apos;
            .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Ring_Critical">
            <summary>
              Looks up a localized string similar to &apos;It&apos;s magical properties are enormous.&apos;
            .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Ring_CriticalMass">
             <summary>
               Looks up a localized string similar to &apos;We don&apos;t know why those rings have such a
            broad amount of different magical properties.&apos;
              .
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Ring_GoronPower">
            <summary>
              Looks up a localized string similar to &apos;It proves that the wearer has amazing powers.&apos;
            .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Ring_KanesLooter">
             <summary>
               Looks up a localized string similar to &apos;Has been stolen and abused by demons.
            Poor Kane!&apos;.
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Ring_PowerBracelets">
            <summary>
              Looks up a localized string similar to &apos;You feel the power flow through your veins.&apos;
            .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Ring_SilverRuby">
            <summary>
              Looks up a localized string similar to &apos;The power of the demon world.. intriguing.&apos;.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Ring_SilverSapphire">
             <summary>
               Looks up a localized string similar to &apos;To aquire the true power Light and Darkness
            must be in equilibrium.&apos;.
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Ring_TheOne">
            <summary>
              Looks up a localized string similar to &apos;The one and only ...&apos;
            .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Ring_TheTwo">
            <summary>
              Looks up a localized string similar to &apos;The two and only ...&apos;
                          .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Ring_WeakMind">
             <summary>
               Looks up a localized string similar to &apos;You should know that it is not the mind
            that is weak; but the ring itself.&apos;.
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Scroll_Teleport_FST_Boss">
            <summary>
              Looks up a localized string similar to &apos;The treasure awaits you&apos;.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Shield_DarkMatter">
            <summary>
              Looks up a localized string similar to &apos;It would guard you even against rock monsters!&apos;.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Shield_MagicBuffer">
            <summary>
              Looks up a localized string similar to &apos;This shield can partially absorb spells.&apos;
            .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Shield_Nut">
            <summary>
              Looks up a localized string similar to &apos;It burns like hell, beware!&apos;
            .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Shield_Prototype_Dark">
            <summary>
              Looks up a localized string similar to &apos;It&apos;s still missing some finishing touches.&apos;.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Shield_Quiver_Chicken">
            <summary>
              Looks up a localized string similar to &apos;Hurting those poor chickens is just cruel.&apos;
            .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Shield_Quiver_Goron">
            <summary>
              Looks up a localized string similar to &apos;Yes, Gorons use bows&apos;n arrows too!&apos;
            .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_ShieldNut">
            <summary>
              Looks up a localized string similar to A simple shield.
            .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_SongScroll_ExecuteTrigger">
            <summary>
              Looks up a localized string similar to Left.. Left.. Right.. Down...
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_SongScroll_FamilyTombsTeleportation">
            <summary>
              Looks up a localized string similar to Left.. Right.. Left.. Right...
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_SongScroll_HomeTeleportation">
            <summary>
              Looks up a localized string similar to Up.. Down.. Up.. Up.. Left.. Right...
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_SongScroll_TimeWarp">
            <summary>
              Looks up a localized string similar to Up.. Down.. Left.. Right.. Up.. Down...
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_SongScroll_ZoneReset">
            <summary>
              Looks up a localized string similar to Up.. Down.. Down.. Up...
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Staff_Cursed_Executer">
            <summary>
              Looks up a localized string similar to &apos;Execute your enemies without mercy.&apos;
            .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Staff_DemonSkull">
            <summary>
              Looks up a localized string similar to &apos;The demonic power still flows through the staff.&apos;
            .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Staff_DirectedEnergy">
            <summary>
              Looks up a localized string similar to &apos;The energy is in proportion to the resistance it meets.&apos;
            .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Staff_Iron">
            <summary>
              Looks up a localized string similar to &apos;Warriors may find it useful. Good to crush bones.&apos;
            .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Staff_Ruby">
            <summary>
              Looks up a localized string similar to &apos;I wonder why it is so cheap ... ?!&apos;
            .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Staff_Shroom_Demon">
            <summary>
              Looks up a localized string similar to &apos;Watch out! It&apos;s easily inflammable.&apos;
            .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Staff_VerySimple">
            <summary>
              Looks up a localized string similar to PS.: &apos;It&apos;s really very very simple.&apos; 
            .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Staff_Ward_KokirianNovice">
             <summary>
               Looks up a localized string similar to &apos;You won&apos;t do many wonders with this one.
            But it&apos;ll get you started.&apos;.
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Staff_WarriorMage">
            <summary>
              Looks up a localized string similar to &apos;Bszzzzzz ..&apos; - &apos;Wha! Who is that?&apos;
            .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Sword_Claymore">
            <summary>
              Looks up a localized string similar to Made from solid goron steel..
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Sword_Demonic">
             <summary>
               Looks up a localized string similar to &apos;Only a demon can unleash the
            true power of this weapon.&apos;.
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Sword_Demonic_Enhanced">
             <summary>
               Looks up a localized string similar to &apos;Only a demon can unleash the true
            power of this weapon. But it has been
            enhanced to make it easier to wield.&apos;.
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Sword_FuryOfTheWarrior">
             <summary>
               Looks up a localized string similar to &quot;Actually, only exalted guardians of the
            Hyrule Temple are allowed to use it.&quot;.
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Sword_HyruleBroad">
             <summary>
               Looks up a localized string similar to &apos;The finest metal in all of Hyrule. Trust me.&apos;
            - Tingle .
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Sword_HyruleLight">
            <summary>
              Looks up a localized string similar to Stick them with the pointy end..
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Sword_KokiriIron">
            <summary>
              Looks up a localized string similar to A simple iron sword..
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Sword_KokiriNovice">
            <summary>
              Looks up a localized string similar to A simple wooden sword..
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Sword_Mage_Stardust">
            <summary>
              Looks up a localized string similar to &apos;The glittering dust vanishes instantly when it lands.&apos;
            .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Sword_Protector">
             <summary>
               Looks up a localized string similar to &apos;If you find the right balance between offense
            and defense, then you will come out victorious
            even in the most uneven battle.&apos;.
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Sword_Protector_Hyrule">
            <summary>
              Looks up a localized string similar to Honor is the courage to stand for the truth, against any odds..
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_SwordKokirianTrainings">
            <summary>
              Looks up a localized string similar to A simple wooden sword..
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Tainted_ByRudra">
            <summary>
              Looks up a localized string similar to &apos;The touch of Rudra has tainted this item.&apos;
            .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Trinket_CursedLuck">
             <summary>
               Looks up a localized string similar to &apos;The curse may be lifted with the
            power of a Four Leaf Clover.&apos;
             .
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Trinket_CursedLuck_Cleansed">
             <summary>
               Looks up a localized string similar to &apos;The power of a four leaf clove
            has cleansed the charm.&apos;
             .
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Trinket_FlurryCompass">
            <summary>
              Looks up a localized string similar to &apos;It&apos;s spinning like crazy!&apos;
            .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Trinket_Flute_Snake">
            <summary>
              Looks up a localized string similar to &apos;Aua! Way too sharp!&apos;
            .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Trinket_FuryCompass">
            <summary>
              Looks up a localized string similar to &apos;This one is spinning like crazy too!&apos;
            .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Trinket_Lantern_Iron">
             <summary>
               Looks up a localized string similar to &apos;The demon hunters of Hyrule used to identify
            themself by having such an iron lantern.&apos;
             .
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Trinket_LittleRareManaBroche">
            <summary>
              Looks up a localized string similar to &apos;Infuses the wearer with pure mana.&apos;
            .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Trinket_OfExploitivePower">
            <summary>
              Looks up a localized string similar to &apos;Boom Boom Boom ..! Or wait.. nooooooooo.&apos;
            .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Trinket_OfLight">
             <summary>
               Looks up a localized string similar to &apos;The Light shall be with you.&apos;
            - The Brotherhood.
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Trinket_RudrasHeart">
             <summary>
               Looks up a localized string similar to &apos;It&apos;s just one of many. He&apos;ll simply extract 
            a new one from one of his followers.&apos;
             .
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Trinket_StrangeIronDevice">
            <summary>
              Looks up a localized string similar to &apos;Its function is still a mystery.&apos;
            .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Weapon_Dagger_Crystal">
            <summary>
              Looks up a localized string similar to &apos;No, it is really not meant for stabbing.&apos;
            .
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Weapon_Dagger_FishKnife">
            <summary>
              Looks up a localized string similar to &apos;It&apos;s still dropping in blood ...&apos;.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Weapon_Dagger_GoronAssassination">
             <summary>
               Looks up a localized string similar to &apos;Nowhere, absolutely nowhere, has there ever been a hint,
            not even a whisper, that a Goron was involved in the
            assassination of our beloved king.&apos;.
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Weapon_Dagger_Kokiri">
            <summary>
              Looks up a localized string similar to &apos;Don&apos;t cut yourself!&apos;.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_Weapon_Dagger_QuickStrikeCombat">
             <summary>
               Looks up a localized string similar to &apos;As an assassin you&apos;ll have to
            adjust your fight-style.&apos;.
             </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.ID_WindOfHyrule">
            <summary>
              Looks up a localized string similar to The legend became true.. it changes shape in the bottle..
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Armor_FullPlate_Scale">
            <summary>
              Looks up a localized string similar to Full Scale Plate.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Armor_Ghost_Black">
            <summary>
              Looks up a localized string similar to Black Ghost Armor.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Armor_Kokirian">
            <summary>
              Looks up a localized string similar to Kokirian Armor.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Armor_KokirianFire">
            <summary>
              Looks up a localized string similar to Kokirian Fire Armor.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Armor_KokirianNovice">
            <summary>
              Looks up a localized string similar to Kokirian Novice Armor.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Armor_Mail_Wooden">
            <summary>
              Looks up a localized string similar to Wooden Mail Armor.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Armor_Mantle_Ninja">
            <summary>
              Looks up a localized string similar to Extraordinary Ninja Mantle.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Armor_Robe_GoronWizard">
            <summary>
              Looks up a localized string similar to Goron Wizard Robe.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Armor_Robe_Rudras">
            <summary>
              Looks up a localized string similar to Rudra&apos;s Magical Robe.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Armor_Robe_Scale">
            <summary>
              Looks up a localized string similar to Scale Robe.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Armor_Robe_Silk">
            <summary>
              Looks up a localized string similar to Silk Robe.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Armor_RudrasProtectionArmor">
            <summary>
              Looks up a localized string similar to Rudra&apos;s Protection Armor.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Armor_RudrasThievesClothes">
            <summary>
              Looks up a localized string similar to Rudra&apos;s Thieves Clothes.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Armor_StoneSpirit">
            <summary>
              Looks up a localized string similar to Stone Spirit Armor.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Bag_Deku">
            <summary>
              Looks up a localized string similar to Deku Bag.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Belt_BadLeather">
            <summary>
              Looks up a localized string similar to Bad Leather Belt.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Belt_GirdleOfArnold">
            <summary>
              Looks up a localized string similar to Girdle of Arnold.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Belt_HeroesRage">
            <summary>
              Looks up a localized string similar to The Hero&apos;s Rage.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Belt_Leather_Shady">
            <summary>
              Looks up a localized string similar to Shady Leather Belt.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Belt_Mana">
            <summary>
              Looks up a localized string similar to Mana Belt.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Belt_RudrasCheapLeather">
            <summary>
              Looks up a localized string similar to Cheap Leather Belt.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Belt_RudrasQuickStrikeBelt">
            <summary>
              Looks up a localized string similar to Rudra&apos;s Quick-Strike Belt.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Belt_SlowMotion">
            <summary>
              Looks up a localized string similar to Slow-Motion Belt.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Belt_Wizard">
            <summary>
              Looks up a localized string similar to Wizard Belt.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Boots_BadLeather">
            <summary>
              Looks up a localized string similar to Bad Leather Boots.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Boots_Fairy">
            <summary>
              Looks up a localized string similar to Fairy Boots.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Boots_Fairy_Cursed">
            <summary>
              Looks up a localized string similar to Cursed Fairy Boots.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Boots_HyruleLeather">
            <summary>
              Looks up a localized string similar to Hyrule Leather Boots.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Boots_Iron_Skeleton">
            <summary>
              Looks up a localized string similar to Iron Skeleton Boots.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Boots_IronCoatedLeather">
            <summary>
              Looks up a localized string similar to Iron-Coated Leather Boots.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Boots_Shackles_Blood">
            <summary>
              Looks up a localized string similar to Goron Blood Shackles.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Boots_Shackles_Prototype">
            <summary>
              Looks up a localized string similar to Goron Shackles Prototype.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Boots_UndeadHunter">
            <summary>
              Looks up a localized string similar to Boots of the Undead Hunter.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Bow_Ballista_Strong">
            <summary>
              Looks up a localized string similar to Strong Ballista.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Bow_HurricaneOfTheSniper">
            <summary>
              Looks up a localized string similar to Hurricane of the Sniper.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Bow_HyruleIron">
            <summary>
              Looks up a localized string similar to Hyrule Iron Bow.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Bow_Kokiri">
            <summary>
              Looks up a localized string similar to Kokirian Bow.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Bow_KokiriNovice">
            <summary>
              Looks up a localized string similar to Kokirian Novice Bow.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Bow_RudrasDemon">
            <summary>
              Looks up a localized string similar to Rudra&apos;s Demon Bow.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Bow_RudrasEnhancedDemon">
            <summary>
              Looks up a localized string similar to Enhanced Rudra&apos;s Demon Bow.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Bow_ShadyHyrule">
            <summary>
              Looks up a localized string similar to Shady Hyrule Bow.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Bow_SimpleHyrule">
            <summary>
              Looks up a localized string similar to Simple Hyrule Bow.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Bow_TaintedHurricaneOfTheSniper">
            <summary>
              Looks up a localized string similar to Tainted Hurricane Of The Sniper.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Bow_WindOfHyrule">
            <summary>
              Looks up a localized string similar to Wind Bow of Hyrule.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_BowKokirianTrainings">
            <summary>
              Looks up a localized string similar to Kokirian Trainings Bow.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Buff_LuckyCandy">
            <summary>
              Looks up a localized string similar to Lucky Candy.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Cloak_Battle">
            <summary>
              Looks up a localized string similar to Battle Cloak.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Cloak_Cape_DemonMarquess">
            <summary>
              Looks up a localized string similar to Demon Marquess Cape.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Cloak_ChickenManteau">
            <summary>
              Looks up a localized string similar to Chicken Manteau.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Cloak_Coat_Skeleton">
            <summary>
              Looks up a localized string similar to Skeleton Coat.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Cloak_Coat_SlimyGhost">
            <summary>
              Looks up a localized string similar to Slimy Ghost Coat.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Cloak_Muffler_Bad">
            <summary>
              Looks up a localized string similar to Bad Muffler.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Cloak_Muffler_Demon">
            <summary>
              Looks up a localized string similar to Demon Muffler.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Cloak_Pauldrons_Avenger">
            <summary>
              Looks up a localized string similar to Avenger&apos;s Pauldrons.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Food_Burrito_Ghost">
            <summary>
              Looks up a localized string similar to Ghost Burrito.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Food_Carrot_Small_Exp">
            <summary>
              Looks up a localized string similar to Small Carrot of Experience.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Food_Egg_Small_Exp">
            <summary>
              Looks up a localized string similar to Egg of Small Experience.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Food_Exp_WholeRoast">
            <summary>
              Looks up a localized string similar to Whole Roast.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Food_MilkPack_Demon">
            <summary>
              Looks up a localized string similar to Demon Milk Pack.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Gem_Fake_Fire">
            <summary>
              Looks up a localized string similar to Fire Gem.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Gem_Fake_Light">
            <summary>
              Looks up a localized string similar to Light Gem.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Gem_Fake_Nature">
            <summary>
              Looks up a localized string similar to Nature Gem.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Gem_Fake_Prismatic">
            <summary>
              Looks up a localized string similar to Prismatic Gem.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Gem_Fake_Shadow">
            <summary>
              Looks up a localized string similar to Shadow Gem.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Gem_Fake_Water">
            <summary>
              Looks up a localized string similar to Water Gem.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Gem_Fire_DinsBlazing">
            <summary>
              Looks up a localized string similar to Din&apos;s Blazing Fire.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Gem_Fire_DinsBlisteringWeak">
            <summary>
              Looks up a localized string similar to Din&apos;s Weak-Blistering Gem.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Gem_Fire_DinsFieryArmor">
            <summary>
              Looks up a localized string similar to Din&apos;s Fiery Armor.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Gem_Fire_DinsMagicPokey">
            <summary>
              Looks up a localized string similar to Din&apos;s Magic Pokey.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Gem_Fire_DinsPassingFancy">
            <summary>
              Looks up a localized string similar to Din&apos;s Passing Fancy.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Gem_Fire_DinsSmallMagicPokey">
            <summary>
              Looks up a localized string similar to Din&apos;s Small Magic Pokey.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Gem_Fire_DinsVengeance">
            <summary>
              Looks up a localized string similar to Din&apos;s Vengeance.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Gem_Fire_DinsWrath">
            <summary>
              Looks up a localized string similar to Din&apos;s Wrath.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Gem_Fire_SmallCritical">
            <summary>
              Looks up a localized string similar to Din&apos;s Small Critical Gem.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Gem_Light_Aureate">
            <summary>
              Looks up a localized string similar to Aureate Gem.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Gem_Light_Heavy">
            <summary>
              Looks up a localized string similar to Heavy Light Gem.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Gem_Light_Lucky">
            <summary>
              Looks up a localized string similar to Lucky Gem.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Gem_Light_PurifyingWill">
            <summary>
              Looks up a localized string similar to Purifying Will.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Gem_Light_SkeletonImbued">
            <summary>
              Looks up a localized string similar to Imbued Skeleton Gem.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Gem_Nature_Acute">
            <summary>
              Looks up a localized string similar to Acute Gem of Nature.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Gem_Nature_Beast">
            <summary>
              Looks up a localized string similar to Nature&apos;s Beast.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Gem_Nature_Care">
            <summary>
              Looks up a localized string similar to Nature&apos;s Care.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Gem_Nature_Celerity">
            <summary>
              Looks up a localized string similar to Celerity of Nature.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Gem_Nature_Diligence">
            <summary>
              Looks up a localized string similar to Nature&apos;s Diligence.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Gem_Nature_Grasp">
            <summary>
              Looks up a localized string similar to Nature&apos;s Grasp.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Gem_Nature_SeedOfRampantGrowth">
            <summary>
              Looks up a localized string similar to Seed of Rampant Growth.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Gem_Nature_Squeeze">
            <summary>
              Looks up a localized string similar to Nature&apos;s Squeeze.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Gem_Nature_Swiftness">
            <summary>
              Looks up a localized string similar to Nature&apos;s Swiftness.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Gem_Prismatic_Bloody">
            <summary>
              Looks up a localized string similar to Bloody Prisma.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Gem_Prismatic_Critical">
            <summary>
              Looks up a localized string similar to Critical Prisma.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Gem_Prismatic_EnrichedWorldGem">
            <summary>
              Looks up a localized string similar to Enriched Worldgem.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Gem_Prismatic_Flickering">
            <summary>
              Looks up a localized string similar to Flickering Prisma.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Gem_Prismatic_Ocean">
            <summary>
              Looks up a localized string similar to Ocean Gem.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Gem_Shadow_BlackIron">
            <summary>
              Looks up a localized string similar to Black Iron Gem.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Gem_Shadow_DarkGhostSkeleton">
            <summary>
              Looks up a localized string similar to Dark Ghost Skeleton Gem.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Gem_Shadow_DoomStone">
            <summary>
              Looks up a localized string similar to Doom Stone.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Gem_Shadow_Eburnated">
            <summary>
              Looks up a localized string similar to Eburnated Shadow Gem.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Gem_Shadow_LifeSuckingStone">
            <summary>
              Looks up a localized string similar to Life-Sucking Stone.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Gem_Shadow_ManaSuckingStone">
            <summary>
              Looks up a localized string similar to Mana Sucking Stone.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Gem_Water_NayrusBalance">
            <summary>
              Looks up a localized string similar to Nayru&apos;s Balance.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Gem_Water_NayrusBalanceTrue">
            <summary>
              Looks up a localized string similar to Nayru&apos;s True Balance.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Gem_Water_NayrusExperience">
            <summary>
              Looks up a localized string similar to Nayru&apos;s Experience.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Gem_Water_NayrusExudation">
            <summary>
              Looks up a localized string similar to Nayru&apos;s Exudation.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Gem_Water_NayrusJustice">
            <summary>
              Looks up a localized string similar to Nayru&apos;s Justice.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Gem_Water_NayrusSorrow">
            <summary>
              Looks up a localized string similar to Nayru&apos;s Sorrow.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Gem_Water_NayrusTear">
            <summary>
              Looks up a localized string similar to Nayru&apos;s Tear.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Gem_Water_SmallExperience">
            <summary>
              Looks up a localized string similar to Gem of Small Experience.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Gloves_BloodyGhostMittens">
            <summary>
              Looks up a localized string similar to Bloody Ghost Mittens.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Gloves_BoneCrusher">
            <summary>
              Looks up a localized string similar to Bone Crusher.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Gloves_DeathChicken">
            <summary>
              Looks up a localized string similar to Death-Chicken Gloves.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Gloves_Gauntlets_StrongPush">
            <summary>
              Looks up a localized string similar to Strong-Push Gauntlets.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Gloves_GoronMage">
            <summary>
              Looks up a localized string similar to Goron-Mage Gloves.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Gloves_NinjaExtraction">
            <summary>
              Looks up a localized string similar to Ninja Extraction Gloves.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Gloves_StrongBow">
            <summary>
              Looks up a localized string similar to Strong-Bow Gloves.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Head_Blinkers_Demon">
            <summary>
              Looks up a localized string similar to Demon Blinkers.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Head_Chains_DarkGhostSkeleton">
            <summary>
              Looks up a localized string similar to Dark-Ghost Skeleton Chains.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Head_CowboyHat">
            <summary>
              Looks up a localized string similar to Cowboy Hat.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Head_DemonStrawHat">
            <summary>
              Looks up a localized string similar to Demon Straw Hat.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Head_FakeHeavenRing">
            <summary>
              Looks up a localized string similar to Fake Heaven Ring.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Head_PooPoo">
            <summary>
              Looks up a localized string similar to Poo Poo Hat.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Head_RudrasSlaveMask">
            <summary>
              Looks up a localized string similar to Slave Mask.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Head_ScaleHat">
            <summary>
              Looks up a localized string similar to Scale Hat.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Head_SimpleHat">
            <summary>
              Looks up a localized string similar to Simple Hat.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Head_WizardDark">
            <summary>
              Looks up a localized string similar to Dark Wizard Hat.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Key_Crystal_Shimmering">
            <summary>
              Looks up a localized string similar to Shimmering Crystal Key.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Key_Locket_Triforce">
            <summary>
              Looks up a localized string similar to Triforce Locket.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Key_RouteOfDin_Goron">
            <summary>
              Looks up a localized string similar to Black Goron Key.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Key_RouteOfDin_SShaped">
            <summary>
              Looks up a localized string similar to Bloody S-Shaped Key.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Key_TiaWoods_StoneIsland">
            <summary>
              Looks up a localized string similar to Stone Island Key.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Misc_Apple_Big_Green">
            <summary>
              Looks up a localized string similar to Green Hyrule Garden Apple.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Misc_Apple_Small_Red">
            <summary>
              Looks up a localized string similar to Delicious Small Red Apple.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Misc_BloodiedGoronShackleBall">
            <summary>
              Looks up a localized string similar to Bloodied Shackle Ball.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Misc_Bottle_GoronEmpty">
            <summary>
              Looks up a localized string similar to Empty Goron Bottle.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Misc_Bottle_GoronWater">
            <summary>
              Looks up a localized string similar to Goron Water Bottle.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Misc_Bottle_LongEmpty">
            <summary>
              Looks up a localized string similar to Long Empty Bottle.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Misc_Bottle_SmallEmpty">
            <summary>
              Looks up a localized string similar to Small Empty Bottle.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Misc_Bottle_SmallWater">
            <summary>
              Looks up a localized string similar to Small Water Bottle.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Misc_BrokenWindSword_Part_1">
            <summary>
              Looks up a localized string similar to First Sword Piece.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Misc_BrokenWindSword_Part_2">
            <summary>
              Looks up a localized string similar to Second Sword Piece.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Misc_BrokenWindSword_Part_3">
            <summary>
              Looks up a localized string similar to Third Sword Piece.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Misc_BrokenWindSword_Part_4">
            <summary>
              Looks up a localized string similar to Fourth Sword Piece.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Misc_BrokenWindSword_Part_5">
            <summary>
              Looks up a localized string similar to Fifth Sword Piece.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Misc_BrokenWindSword_Part_6">
            <summary>
              Looks up a localized string similar to Sixth Sword Piece.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Misc_BrokenWindSword_Part_7">
            <summary>
              Looks up a localized string similar to Seventh Sword Piece.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Misc_Buff_ManaDeliciousGem">
            <summary>
              Looks up a localized string similar to Delicious Mana Gem.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Misc_Card_LuckyGoron_Ace">
            <summary>
              Looks up a localized string similar to Lucky Goron Card - Ace.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Misc_Card_LuckyGoron_Three">
            <summary>
              Looks up a localized string similar to Lucky Goron Card - Three.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Misc_Card_LuckyGoron_Two">
            <summary>
              Looks up a localized string similar to Lucky Goron Card - Two.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Misc_Chains_Loose">
            <summary>
              Looks up a localized string similar to Loose Iron Chains.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Misc_ChickenFeed">
            <summary>
              Looks up a localized string similar to Chicken Feed.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Misc_Clam_MysteriousBlue">
            <summary>
              Looks up a localized string similar to Mysterious Blue Clam.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Misc_Clover_FourLeaf">
            <summary>
              Looks up a localized string similar to Four Leaf Clover.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Misc_Crystal_DarkMatter">
            <summary>
              Looks up a localized string similar to Blackrock Crystal.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Misc_Crystal_Fragment_Skeletal_Green">
            <summary>
              Looks up a localized string similar to Green Skeletal Crystal Fragment.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Misc_Crystal_Fragment_Skeletal_Red">
            <summary>
              Looks up a localized string similar to Red Skeletal Crystal Fragment.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Misc_Crystal_Fragment_Skeletal_Yellow">
            <summary>
              Looks up a localized string similar to Yellow Skeletal Crystal Fragment.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Misc_DeadFish">
            <summary>
              Looks up a localized string similar to Dead Fish.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Misc_DemonHair">
            <summary>
              Looks up a localized string similar to Demon Hair.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Misc_Doll_Yoyo">
            <summary>
              Looks up a localized string similar to Yoyo Doll.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Misc_Dye_Black">
            <summary>
              Looks up a localized string similar to Black Dye.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Misc_Dye_Blue">
            <summary>
              Looks up a localized string similar to Blue Dye.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Misc_Dye_Green">
            <summary>
              Looks up a localized string similar to Green Dye.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Misc_Dye_Red">
            <summary>
              Looks up a localized string similar to Red Dye.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Misc_Fabric">
            <summary>
              Looks up a localized string similar to Fabric.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Misc_Feather_Chicken_Red">
            <summary>
              Looks up a localized string similar to Blood-Chicken Feather.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Misc_Feather_Chicken_White">
            <summary>
              Looks up a localized string similar to White Chicken Feather.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Misc_GemPouch_10">
            <summary>
              Looks up a localized string similar to Cheap Gem Pouch.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Misc_GemPouch_35">
            <summary>
              Looks up a localized string similar to Gem Pouch.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Misc_GemPouch_55">
            <summary>
              Looks up a localized string similar to Exquisite Gem Pouch.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Misc_Gold_Goron">
            <summary>
              Looks up a localized string similar to Goron Gold.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Misc_Herb_Sticky">
            <summary>
              Looks up a localized string similar to Sticky Herb.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Misc_Iron">
            <summary>
              Looks up a localized string similar to Iron.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Misc_Keese_Tooth">
            <summary>
              Looks up a localized string similar to Keese Tooth.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Misc_Keese_Wing">
            <summary>
              Looks up a localized string similar to Keese Wing.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Misc_Key_SmallUniversalWind">
            <summary>
              Looks up a localized string similar to Small Universal Wind Key.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Misc_Leaf_Great">
            <summary>
              Looks up a localized string similar to Great Leaf.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Misc_Leaf_Sharp">
            <summary>
              Looks up a localized string similar to Sharp Leaf.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Misc_Leaf_Small_Black">
            <summary>
              Looks up a localized string similar to Small Black Leaf.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Misc_Leaf_Small_Fire">
            <summary>
              Looks up a localized string similar to Small Fire Leaf.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Misc_Leaf_Small_Fresh">
            <summary>
              Looks up a localized string similar to Small Fresh Leaf.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Misc_Mucus_Octorok">
            <summary>
              Looks up a localized string similar to Octorok Mucus.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Misc_Mushroom_Ghost">
            <summary>
              Looks up a localized string similar to Ghost Mushroom.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Misc_MusicCross">
            <summary>
              Looks up a localized string similar to Cross of Teleport.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Misc_Ore_Iron">
            <summary>
              Looks up a localized string similar to Iron Ore.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Misc_Potion_VirginBlood">
            <summary>
              Looks up a localized string similar to Blood of a Virgin.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Misc_RudrasChest">
            <summary>
              Looks up a localized string similar to Rudra&apos;s Treasure Chest.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Misc_RudrasSoulStone">
            <summary>
              Looks up a localized string similar to Rudra&apos;s Soul Stone.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Misc_Scale_Snake_Green">
            <summary>
              Looks up a localized string similar to Green Snake Scale.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Misc_Silk_Expensive">
            <summary>
              Looks up a localized string similar to Expensive Silk.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Misc_SkeletonBone">
            <summary>
              Looks up a localized string similar to Skeleton Bone.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Misc_SkeletonBonePowder">
            <summary>
              Looks up a localized string similar to Skeleton Bone Powder.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Misc_Skull_Goron">
            <summary>
              Looks up a localized string similar to Goron Skull.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Misc_SmallFreshLeaf">
            <summary>
              Looks up a localized string similar to Small Fresh Leaf.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Misc_Steel_BrokenGoronPiece">
            <summary>
              Looks up a localized string similar to Broken Goron Steel Piece.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Misc_Steel_Goron">
            <summary>
              Looks up a localized string similar to Goron Steel.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Misc_Tablet_OfWisdom">
            <summary>
              Looks up a localized string similar to Stone Tablet of Wisdom.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Misc_Thread_Ghost">
            <summary>
              Looks up a localized string similar to Ghost Thread.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Misc_TreasureChest">
            <summary>
              Looks up a localized string similar to Treasure Chest.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Misc_TreasureChest_55">
            <summary>
              Looks up a localized string similar to Hellish Treasure Chest.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Misc_Triforce_Small">
            <summary>
              Looks up a localized string similar to Small Triforce Piece.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Necklace_Crystal_Demon">
            <summary>
              Looks up a localized string similar to Demon Crystal Necklace.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Necklace_DemonRogue">
            <summary>
              Looks up a localized string similar to Demon-Rogue Necklace.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Necklace_FlareDancer">
            <summary>
              Looks up a localized string similar to Flare Dancer Necklace.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Necklace_Ghost">
            <summary>
              Looks up a localized string similar to Ghost Necklace.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Necklace_LostFamily">
            <summary>
              Looks up a localized string similar to Lost Family Necklace.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Necklace_MothersPearl">
            <summary>
              Looks up a localized string similar to Mothers Pearl.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Necklace_River">
            <summary>
              Looks up a localized string similar to River Necklace.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Necklace_SimpleBloodCore">
            <summary>
              Looks up a localized string similar to Simple Blood Core.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Necklace_Skeleton">
            <summary>
              Looks up a localized string similar to Skeleton Necklace.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Necklace_SmallLucky">
            <summary>
              Looks up a localized string similar to Small Lucky Necklace.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Necklace_TrueBloodCore">
            <summary>
              Looks up a localized string similar to True Blood Core Necklace.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Necklace_UndeadHunter">
            <summary>
              Looks up a localized string similar to Necklace of the Undead Hunter.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Potion_Blue">
            <summary>
              Looks up a localized string similar to Blue Potion.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Potion_Blue_Strong">
            <summary>
              Looks up a localized string similar to Strong Blue Potion.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Potion_BoneHardening">
            <summary>
              Looks up a localized string similar to Bone Hardening Potion.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Potion_Buff_BloodCourage">
            <summary>
              Looks up a localized string similar to Blood Courage Potion.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Potion_Buff_OctorokMucus">
            <summary>
              Looks up a localized string similar to Octorok Mucus Potion.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Potion_Buff_SchottlanderFish">
            <summary>
              Looks up a localized string similar to Schottlander Fish Potion.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Potion_Dexterity">
            <summary>
              Looks up a localized string similar to Goron Potion of Perfect Aim.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Potion_GhostlyShroom">
            <summary>
              Looks up a localized string similar to Ghostly Shroom Potion.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Potion_Goron_Blue">
            <summary>
              Looks up a localized string similar to Blue Goron Potion.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Potion_Goron_Red">
            <summary>
              Looks up a localized string similar to Red Goron Potion.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Potion_Goron_Violet">
            <summary>
              Looks up a localized string similar to Violet Goron Potion.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Potion_Red">
            <summary>
              Looks up a localized string similar to Red Potion.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Potion_Red_Strong">
            <summary>
              Looks up a localized string similar to Strong Red Potion.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Potion_ResetStatsGoron">
            <summary>
              Looks up a localized string similar to Potion of Oblivion.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Potion_ResetTalentsSmall">
            <summary>
              Looks up a localized string similar to Small Potion of Respec.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Potion_ShadowProt_Small">
            <summary>
              Looks up a localized string similar to Small Potion of Shadow Protection.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Potion_Small_Blue">
            <summary>
              Looks up a localized string similar to Small Blue Potion.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Potion_Small_Dexterity">
            <summary>
              Looks up a localized string similar to Small Potion of Perfect Aim.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Potion_Small_Red">
            <summary>
              Looks up a localized string similar to Small Red Potion.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Potion_Small_Strength">
            <summary>
              Looks up a localized string similar to Small Potion of Muscles.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Potion_Small_Violet">
            <summary>
              Looks up a localized string similar to Small Violet Potion.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Potion_Strong_Blue">
            <summary>
              Looks up a localized string similar to Strong Blue Potion.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Potion_Strong_Red">
            <summary>
              Looks up a localized string similar to Strong Red Potion.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Potion_Strong_Violet">
            <summary>
              Looks up a localized string similar to Strong Violet Potion.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Potion_Violet">
            <summary>
              Looks up a localized string similar to Violet Potion.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Quest_Goron_Croissant">
            <summary>
              Looks up a localized string similar to Goron Stone Crossaint.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Quest_StoneTempleSecretMap">
            <summary>
              Looks up a localized string similar to Secret-Map of the Stone Temple.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Quest_TeleportStone_RouteOfDin_Boss">
            <summary>
              Looks up a localized string similar to The Will of Darkness.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Quest_TiaWoods_BrokenYoyoDoll">
            <summary>
              Looks up a localized string similar to Broken Yoyo Doll.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Quest_TiaWoods_MurderLetter">
            <summary>
              Looks up a localized string similar to Sealed Letter.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Quest_TiaWoodsFamilyPortrait">
            <summary>
              Looks up a localized string similar to Tia Woods Family Portrait.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Relic_Bloody_Heirloom">
            <summary>
              Looks up a localized string similar to Bloody Heirloom.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Relic_BombBag_Tinted">
            <summary>
              Looks up a localized string similar to Tainted Bomb Bag.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Relic_CardSet_LuckyGoron">
            <summary>
              Looks up a localized string similar to Lucky Goron Card Set.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Relic_Crest_BloodRuby">
            <summary>
              Looks up a localized string similar to Blood-Ruby Crest.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Relic_Crystal_Skeletal">
            <summary>
              Looks up a localized string similar to Skeletal Crystal.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Relic_FireBone">
            <summary>
              Looks up a localized string similar to Fire Bone.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Relic_FreyasChant">
            <summary>
              Looks up a localized string similar to Freya&apos;s Chant.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Relic_Hammer_BloodSmith">
            <summary>
              Looks up a localized string similar to Blood-Smith Hammer.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Relic_Leaf_Magic">
            <summary>
              Looks up a localized string similar to Magic Leaf.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Relic_MysticalShell">
            <summary>
              Looks up a localized string similar to Mystical Shell.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Relic_NanoHamster">
            <summary>
              Looks up a localized string similar to Nano&apos;s Hamster Kernel.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Relic_OctorokStone">
            <summary>
              Looks up a localized string similar to Octorok Stone.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Relic_Paper_Skeleton_Special">
            <summary>
              Looks up a localized string similar to Special Skeleton Paper.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Ring_ArrowInfusingBracelets">
            <summary>
              Looks up a localized string similar to Arrow-Infusing Bracelets.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Ring_BloodMyth">
            <summary>
              Looks up a localized string similar to Blood-Myth Ring.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Ring_ConcentratedEnergy">
            <summary>
              Looks up a localized string similar to Concentrated Energy Ring.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Ring_Copper">
            <summary>
              Looks up a localized string similar to Copper Ring.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Ring_Critical">
            <summary>
              Looks up a localized string similar to Critical Ring.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Ring_CriticalMass">
            <summary>
              Looks up a localized string similar to Critical-Mass Ring.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Ring_GoronPower">
            <summary>
              Looks up a localized string similar to Goron Power Ring.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Ring_KanesLooter">
            <summary>
              Looks up a localized string similar to Kane&apos;s Looter Ring.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Ring_Novice">
            <summary>
              Looks up a localized string similar to Novice Ring.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Ring_PowerBracelets">
            <summary>
              Looks up a localized string similar to Power Bracelets.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Ring_RudrasProtection">
            <summary>
              Looks up a localized string similar to Protection Ring.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Ring_RustyCopper">
            <summary>
              Looks up a localized string similar to Rusty Copper Ring.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Ring_ShadyArcher">
            <summary>
              Looks up a localized string similar to Shady Ring of the Archer.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Ring_ShadyWarrior">
            <summary>
              Looks up a localized string similar to Shady Ring of the Warrior.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Ring_SilverRuby">
            <summary>
              Looks up a localized string similar to Silver Ruby Ring.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Ring_SilverSapphire">
            <summary>
              Looks up a localized string similar to Silver Sapphire Ring.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Ring_SmallDex">
            <summary>
              Looks up a localized string similar to Ring of Small Dexterity.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Ring_SmallStrength">
            <summary>
              Looks up a localized string similar to Ring of Small Strength.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Ring_TheOne">
            <summary>
              Looks up a localized string similar to The One Ring.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Ring_TheTwo">
            <summary>
              Looks up a localized string similar to The Two Ring.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Ring_WeakMind">
            <summary>
              Looks up a localized string similar to Weak Mind Ring.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Scroll_Teleport_FST_Boss">
            <summary>
              Looks up a localized string similar to Scroll of the Stone Tombs.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Shield_DarkMatter">
            <summary>
              Looks up a localized string similar to Blackrock Shield.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Shield_DarkNut">
            <summary>
              Looks up a localized string similar to Dark Nut Shield.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Shield_HyruleMaster">
            <summary>
              Looks up a localized string similar to Hyrule Master Shield.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Shield_MagicBuffer">
            <summary>
              Looks up a localized string similar to Magic Buffer Shield.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Shield_Nut">
            <summary>
              Looks up a localized string similar to Nut Shield.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Shield_Prototype_Dark">
            <summary>
              Looks up a localized string similar to Prototype Shield.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Shield_Quiver_Chicken">
            <summary>
              Looks up a localized string similar to Chicken Quiver.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Shield_Quiver_Goron">
            <summary>
              Looks up a localized string similar to Goron Quiver.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Shield_RudrasHyrule">
            <summary>
              Looks up a localized string similar to Rudra&apos;s Hyrule Shield.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Shield_SimpleWoodDefender">
            <summary>
              Looks up a localized string similar to Simple Wood Defender.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Shield_TaintedHyrule">
            <summary>
              Looks up a localized string similar to Tainted Hyrule Shield.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Shield_TaintedQuiver">
            <summary>
              Looks up a localized string similar to Tainted Quiver.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Shield_Wpn_ShieldBreaker">
            <summary>
              Looks up a localized string similar to Shield Breaker.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Shield_Wpn_Teaser">
            <summary>
              Looks up a localized string similar to The Teaser.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_SongScroll_ExecuteTrigger">
            <summary>
              Looks up a localized string similar to Carillon of Secrets.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_SongScroll_FamilyTombsTeleportation">
            <summary>
              Looks up a localized string similar to Song Scroll of the Stones.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_SongScroll_HomeTeleportation">
            <summary>
              Looks up a localized string similar to Song Scroll of the Lament of Hyrule.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_SongScroll_TimeWarp">
            <summary>
              Looks up a localized string similar to Futile Song Scroll of Time.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_SongScroll_ZoneReset">
            <summary>
              Looks up a localized string similar to Song Scroll of the Past.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Staff_Cursed_Executer">
            <summary>
              Looks up a localized string similar to Cursed Executer Staff.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Staff_DemonSkull">
            <summary>
              Looks up a localized string similar to Demon Skull Staff.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Staff_DirectedEnergy">
            <summary>
              Looks up a localized string similar to Staff of Directed Energy.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Staff_HellIron">
            <summary>
              Looks up a localized string similar to Hell Iron Staff.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Staff_Iron">
            <summary>
              Looks up a localized string similar to Iron Staff.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Staff_Ruby">
            <summary>
              Looks up a localized string similar to Ruby Staff.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Staff_Shroom_Demon">
            <summary>
              Looks up a localized string similar to Demon Shroom.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Staff_VerySimple">
            <summary>
              Looks up a localized string similar to Very Simple Staff.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Staff_Ward_KokirianNovice">
            <summary>
              Looks up a localized string similar to Kokirian Novice Ward.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Staff_WarriorMage">
            <summary>
              Looks up a localized string similar to Warrior-Mage Staff.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Staff_WindOfHyrule">
            <summary>
              Looks up a localized string similar to Wind Staff of Hyrule.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Sword_Claymore">
            <summary>
              Looks up a localized string similar to Claymore.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Sword_Demonic">
            <summary>
              Looks up a localized string similar to Demonic Sword.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Sword_Demonic_Enhanced">
            <summary>
              Looks up a localized string similar to Enhanced Demonic Sword.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Sword_FuryOfTheWarrior">
            <summary>
              Looks up a localized string similar to Fury of the Warrior.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Sword_HyruleBroad">
            <summary>
              Looks up a localized string similar to Hyrule Broad Sword.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Sword_HyruleLight">
            <summary>
              Looks up a localized string similar to Light Hyrule Sword.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Sword_Kokiri">
            <summary>
              Looks up a localized string similar to Kokirian Sword.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Sword_KokirianSlayer">
            <summary>
              Looks up a localized string similar to Kokirian Slayer Sword.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Sword_KokiriIron">
            <summary>
              Looks up a localized string similar to Kokirian Iron Sword.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Sword_KokiriNovice">
            <summary>
              Looks up a localized string similar to Kokirian Novice Sword.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Sword_LongLong">
            <summary>
              Looks up a localized string similar to Long Longsword.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Sword_Mage_Stardust">
            <summary>
              Looks up a localized string similar to Stardust Sword.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Sword_Protector">
            <summary>
              Looks up a localized string similar to Protector Sword.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Sword_Protector_Hyrule">
            <summary>
              Looks up a localized string similar to Hyrule Protector Sword.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Sword_WindOfHyrule">
            <summary>
              Looks up a localized string similar to Wind Sword of Hyrule.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_SwordGuardLong">
            <summary>
              Looks up a localized string similar to Long Guard Sword.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_SwordHardenedKokirian">
            <summary>
              Looks up a localized string similar to Hardened Kokirian Sword.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_SwordKokirianTrainings">
            <summary>
              Looks up a localized string similar to Kokirian Trainings Sword.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Teach_SecondSharedChestTier">
            <summary>
              Looks up a localized string similar to Chest Enlarger.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Trinket_CursedLuck">
            <summary>
              Looks up a localized string similar to Cursed Lucky Charm.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Trinket_CursedLuck_Cleansed">
            <summary>
              Looks up a localized string similar to Purified Lucky Charm.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Trinket_FlurryCompass">
            <summary>
              Looks up a localized string similar to Flurry Compass.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Trinket_Flute_Snake">
            <summary>
              Looks up a localized string similar to Snake Flute.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Trinket_FuryCompass">
            <summary>
              Looks up a localized string similar to Fury Compass.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Trinket_Lantern_Iron">
            <summary>
              Looks up a localized string similar to Iron Lantern.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Trinket_LittleRareManaBroche">
            <summary>
              Looks up a localized string similar to Little Rare Mana Broche.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Trinket_LittleTalisman">
            <summary>
              Looks up a localized string similar to Little Talisman.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Trinket_OfExploitivePower">
            <summary>
              Looks up a localized string similar to Talisman of Exploitive Power.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Trinket_OfLight">
            <summary>
              Looks up a localized string similar to Trinket of Light.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Trinket_RudrasHeart">
            <summary>
              Looks up a localized string similar to Rudra&apos;s Heart.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Trinket_StrangeIronDevice">
            <summary>
              Looks up a localized string similar to Strange Iron Device.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Weapon_Dagger_Crystal">
            <summary>
              Looks up a localized string similar to Crystal Dagger.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Weapon_Dagger_FishKnife">
            <summary>
              Looks up a localized string similar to Bloody Fish Knife.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Weapon_Dagger_GoronAssassination">
            <summary>
              Looks up a localized string similar to Goron Assassination Dagger.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Weapon_Dagger_Kokiri">
            <summary>
              Looks up a localized string similar to Rusty Kokirian Dagger.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Weapon_Dagger_KokiriNovice">
            <summary>
              Looks up a localized string similar to Kokirian Novice Dagger.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Weapon_Dagger_QuickStrikeCombat">
            <summary>
              Looks up a localized string similar to Quick-Strike Combat Dagger.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Weapon_Dagger_WindOfHyrule">
            <summary>
              Looks up a localized string similar to Wind Dagger of Hyrule.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IN_Weapon_SkinningKnife">
            <summary>
              Looks up a localized string similar to Skinning Knife.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IUE_AwardsOneStatusPoint">
            <summary>
              Looks up a localized string similar to On Use: Awards &apos;1&apos; status point..
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IUE_AwardsXExperience">
            <summary>
              Looks up a localized string similar to On Use: Awards {0} experience points..
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IUE_AwardsXStatusPoints">
            <summary>
              Looks up a localized string similar to On Use: Awards &apos;{0}&apos; status point(s)..
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IUE_LearnSong">
            <summary>
              Looks up a localized string similar to On Use: Learns the &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IUE_SaveTeleportPosition">
            <summary>
              Looks up a localized string similar to On Use: Stores the current location. Won&apos;t work everywhere..
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IUE_Schottlander">
            <summary>
              Looks up a localized string similar to On Use: 
             {0} for {1} seconds and then
             {2} for {3} seconds..
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IUE_SpawnRandomGemMinLevelXMaxLevelY">
            <summary>
              Looks up a localized string similar to On Use: Randomly spawns a gem. (level {0} to {1})..
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IUE_SpawnRandomItem">
            <summary>
              Looks up a localized string similar to On Use: Randomly spawns an item..
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IUE_SpawnRandomItemMinLevelXMaxLevelY">
            <summary>
              Looks up a localized string similar to On Use: Randomly spawns an item. (level {0} to {1})..
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IUE_TeleportToX">
            <summary>
              Looks up a localized string similar to On Use: Teleports to &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.IUE_UseBottle">
            <summary>
              Looks up a localized string similar to On Use: Fill with water..
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.SN_RingHell">
            <summary>
              Looks up a localized string similar to Hell Ring Set.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.SN_SkeletonWarrior">
            <summary>
              Looks up a localized string similar to Skeleton Warrior Set.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.SN_UndeadHunter">
            <summary>
              Looks up a localized string similar to Undead Hunter Set.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemResources.SN_Wizard">
            <summary>
              Looks up a localized string similar to Wizard Set.
            </summary>
        </member>
        <member name="T:Zelda.Items.ItemSounds">
            <summary>
            Provides access to various item specific sounds.
            </summary>
        </member>
        <member name="M:Zelda.Items.ItemSounds.PlaySound(Atom.Fmod.Sound,System.Single)">
            <summary>
            Plays the given Sound at the given volumne.
            </summary>
            <param name="sound">
            The Sound to play. Can be null.
            </param>
            <param name="volumne">
            The volumne of the sound; a value between 0 and 1.
            </param>
        </member>
        <member name="M:Zelda.Items.ItemSounds.PlayRandomPickUpOrDown(Zelda.Items.Item,Atom.Math.FloatRange)">
            <summary>
            Randomly plays either pick-up or put-down sound of the given item.
            </summary>
            <param name="item">
            The item that is about to be picked-up/dropped down.
            </param>
            <param name="volumneMultiplicatorRange">
            The value the sound volume is multiplied with.
            </param>
        </member>
        <member name="M:Zelda.Items.ItemSounds.PlayPickUp(Zelda.Items.Item,System.Single)">
            <summary>
            Plays the sound associated with picking up
            the given Item.
            </summary>
            <param name="item">
            The item that is about to be picked-up.
            </param>
            <param name="volumneMultiplicator">
            The value the sound volume is multiplied with.
            </param>
        </member>
        <member name="M:Zelda.Items.ItemSounds.GetPickUp(Zelda.Items.Item,System.Single@)">
            <summary>
            Gets the sound associated with picking up
            the given Item.
            </summary>
            <param name="item">
            The item that is about to be picked-up.
            </param>
            <param name="volumne">
            Will contain the volumne setting associated
            with the sound.
            </param>
            <returns>
            The associated Sound; might be null.
            </returns>
        </member>
        <member name="M:Zelda.Items.ItemSounds.GetPickUp(Zelda.Items.Equipment,System.Single@)">
            <summary>
            Gets the sound associated with picking up
            the given Equipment.
            </summary>
            <param name="equipment">
            The Equipment that is about to be picked-up.
            </param>
            <param name="volumne">
            Will contain the volumne setting associated
            with the sound.
            </param>
            <returns>
            The associated Sound; might be null.
            </returns>
        </member>
        <member name="M:Zelda.Items.ItemSounds.GetPickUp(Zelda.Items.SpecialItemType,Zelda.Items.Item,System.Single@)">
            <summary>
            Gets the sound associated with picking up
            the given Item; taking into account the given SpecialItemType.
            </summary>
            <param name="specialType">
            The special type to take into account.
            </param>
            <param name="item">
            The Item that is about to be picked-up.
            </param>
            <param name="volumne">
            Will contain the volumne setting associated
            with the sound.
            </param>
            <returns>
            The associated Sound; might be null.
            </returns>
        </member>
        <member name="M:Zelda.Items.ItemSounds.PlayPutDown(Zelda.Items.Item,System.Single)">
            <summary>
            Plays the sound associated with putting down
            the given Item.
            </summary>
            <param name="item">
            The item that is about to be put-down.
            </param>
            <param name="volumneMultiplicator">
            The value the sound volume is multiplied with.
            </param>
        </member>
        <member name="M:Zelda.Items.ItemSounds.GetPutDown(Zelda.Items.Item,System.Single@)">
            <summary>
            Gets the sound associated with putting down
            the given Item.
            </summary>
            <param name="item">
            The item that is about to be put down.
            </param>
            <param name="volumne">
            Will contain the volumne setting associated
            with the sound.
            </param>
            <returns>
            The associated Sound; might be null.
            </returns>
        </member>
        <member name="M:Zelda.Items.ItemSounds.GetPutDown(Zelda.Items.Equipment,System.Single@)">
            <summary>
            Gets the sound associated with putting down
            the given Equipment.
            </summary>
            <param name="equipment">
            The Equipment that is about to be put down.
            </param>
            <param name="volumne">
            Will contain the volumne setting associated
            with the sound.
            </param>
            <returns>
            The associated Sound; might be null.
            </returns>
        </member>
        <member name="M:Zelda.Items.ItemSounds.GetPutDown(Zelda.Items.SpecialItemType,Zelda.Items.Item,System.Single@)">
            <summary>
            Gets the sound associated with putting down
            the given Item; taking into account the given SpecialItemType.
            </summary>
            <param name="specialType">
            The special type to take into account.
            </param>
            <param name="item">
            The Item that is about to be put down.
            </param>
            <param name="volumne">
            Will contain the volumne setting associated
            with the sound.
            </param>
            <returns>
            The associated Sound; might be null.
            </returns>
        </member>
        <member name="M:Zelda.Items.ItemSounds.Load(Atom.Fmod.AudioSystem,Atom.Math.RandMT)">
            <summary>
            Loads the ItemSounds. 
            </summary>
            <param name="audioSystem">
            The AudioSystem to use.
            </param>
            <param name="rand">
            A random number generator.
            </param>
        </member>
        <member name="M:Zelda.Items.ItemSounds.LoadPickUp(System.String,Atom.Fmod.AudioSystem)">
            <summary>
            Loads the sound for picking up an item.
            </summary>
            <param name="name">
            The base name of the sound to load.
            </param>
            <param name="audioSystem">
            The AudioSystem to use.
            </param>
            <returns>
            The loaded sound.
            </returns>
        </member>
        <member name="M:Zelda.Items.ItemSounds.LoadPutDown(System.String,Atom.Fmod.AudioSystem)">
            <summary>
            Loads the sound for putting down an item.
            </summary>
            <param name="name">
            The base name of the sound to load.
            </param>
            <param name="audioSystem">
            The AudioSystem to use.
            </param>
            <returns>
            The loaded sound.
            </returns>
        </member>
        <member name="M:Zelda.Items.ItemSounds.LoadSample(System.String,Atom.Fmod.AudioSystem)">
            <summary>
            Loads the sound sample with the given name.
            </summary>
            <param name="fullName">
            The full name of the sound to load.
            </param>
            <param name="audioSystem">
            The AudioSystem to use.
            </param>
            <returns>
            The loaded sound.
            </returns>
        </member>
        <member name="F:Zelda.Items.ItemSounds.pickUpRing">
            <summary>
            The sounds for picking-up or putting-down a RING.
            </summary>
        </member>
        <member name="F:Zelda.Items.ItemSounds.putDownRing">
            <summary>
            The sounds for picking-up or putting-down a RING.
            </summary>
        </member>
        <member name="F:Zelda.Items.ItemSounds.pickUpGem">
            <summary>
            The sounds for picking-up or putting-down a GEM.
            </summary>
        </member>
        <member name="F:Zelda.Items.ItemSounds.putDownGem">
            <summary>
            The sounds for picking-up or putting-down a GEM.
            </summary>
        </member>
        <member name="F:Zelda.Items.ItemSounds.pickUpLiquid">
            <summary>
            The sounds for picking-up or putting-down a LIQUID.
            </summary>
        </member>
        <member name="F:Zelda.Items.ItemSounds.putDownLiquid">
            <summary>
            The sounds for picking-up or putting-down a LIQUID.
            </summary>
        </member>
        <member name="F:Zelda.Items.ItemSounds.pickUpOre">
            <summary>
            The sounds for picking-up or putting-down a ORE or ROCK.
            </summary>
        </member>
        <member name="F:Zelda.Items.ItemSounds.putDownOre">
            <summary>
            The sounds for picking-up or putting-down a ORE or ROCK.
            </summary>
        </member>
        <member name="F:Zelda.Items.ItemSounds.pickUpParchment">
            <summary>
            The sounds for picking-up or putting-down an item made of PAPER.
            </summary>
        </member>
        <member name="F:Zelda.Items.ItemSounds.putDownParchment">
            <summary>
            The sounds for picking-up or putting-down an item made of PAPER.
            </summary>
        </member>
        <member name="F:Zelda.Items.ItemSounds.pickUpHerb">
            <summary>
            The sounds for picking-up or putting-down a HERB.
            </summary>
        </member>
        <member name="F:Zelda.Items.ItemSounds.putDownHerb">
            <summary>
            The sounds for picking-up or putting-down a HERB.
            </summary>
        </member>
        <member name="F:Zelda.Items.ItemSounds.pickUpMetal">
            <summary>
            The sounds for picking-up or putting-down a METAL item.
            </summary>
        </member>
        <member name="F:Zelda.Items.ItemSounds.putDownMetal">
            <summary>
            The sounds for picking-up or putting-down a METAL item.
            </summary>
        </member>
        <member name="F:Zelda.Items.ItemSounds.pickUpMetalLight">
            <summary>
            The sounds for picking-up or putting-down a LIGHT-WEIGHT METAL item.
            </summary>
        </member>
        <member name="F:Zelda.Items.ItemSounds.putDownMetalLight">
            <summary>
            The sounds for picking-up or putting-down a LIGHT-WEIGHT METAL item.
            </summary>
        </member>
        <member name="F:Zelda.Items.ItemSounds.pickUpWood">
            <summary>
            The sounds for picking-up or putting-down a WOOD item.
            </summary>
        </member>
        <member name="F:Zelda.Items.ItemSounds.putDownWood">
            <summary>
            The sounds for picking-up or putting-down a WOOD item.
            </summary>
        </member>
        <member name="F:Zelda.Items.ItemSounds.pickUpMetalHeavy">
            <summary>
            The sounds for picking-up or putting-down a HEAVY METAL item.
            </summary>
        </member>
        <member name="F:Zelda.Items.ItemSounds.putDownMetalHeavy">
            <summary>
            The sounds for picking-up or putting-down a HEAVY METAL item.
            </summary>
        </member>
        <member name="F:Zelda.Items.ItemSounds.pickUpChainsHeavy">
            <summary>
            The sounds for picking-up or putting-down a HEAVY CHAINS item.
            </summary>
        </member>
        <member name="F:Zelda.Items.ItemSounds.putDownChainsHeavy">
            <summary>
            The sounds for picking-up or putting-down a HEAVY CHAINS item.
            </summary>
        </member>
        <member name="F:Zelda.Items.ItemSounds.pickUpChains">
            <summary>
            The sounds for picking-up or putting-down a CHAINS item.
            </summary>
        </member>
        <member name="F:Zelda.Items.ItemSounds.putDownChains">
            <summary>
            The sounds for picking-up or putting-down a CHAINS item.
            </summary>
        </member>
        <member name="F:Zelda.Items.ItemSounds.pickUpClothLeather">
            <summary>
            The sounds for picking-up or putting-down a CLOTH or LEATHER.
            </summary>
        </member>
        <member name="F:Zelda.Items.ItemSounds.putDownClothLeather">
            <summary>
            The sounds for picking-up or putting-down a CLOTH or LEATHER.
            </summary>
        </member>
        <member name="F:Zelda.Items.ItemSounds.pickUpMagical">
            <summary>
            The sounds for picking-up or putting-down a MAGICAL item.
            </summary>
        </member>
        <member name="F:Zelda.Items.ItemSounds.putDownMagical">
            <summary>
            The sounds for picking-up or putting-down a MAGICAL item.
            </summary>
        </member>
        <member name="F:Zelda.Items.ItemSounds.pickUpSkull">
            <summary>
            The sounds for picking-up or putting-down a SKULL.
            </summary>
        </member>
        <member name="F:Zelda.Items.ItemSounds.putDownSkull">
            <summary>
            The sounds for picking-up or putting-down a SKULL.
            </summary>
        </member>
        <member name="F:Zelda.Items.ItemSounds.pickUpBone">
            <summary>
            The sounds for picking-up or putting-down a BONE.
            </summary>
        </member>
        <member name="F:Zelda.Items.ItemSounds.putDownBone">
            <summary>
            The sounds for picking-up or putting-down a BONE.
            </summary>
        </member>
        <member name="F:Zelda.Items.ItemSounds.pickUpQuiver">
            <summary>
            The sounds for picking-up or putting-down a QUIVER.
            </summary>
        </member>
        <member name="F:Zelda.Items.ItemSounds.putDownQuiver">
            <summary>
            The sounds for picking-up or putting-down a QUIVER.
            </summary>
        </member>
        <member name="F:Zelda.Items.ItemSounds.pickUpKey">
            <summary>
            The sounds for picking-up or putting-down a KEY.
            </summary>
        </member>
        <member name="F:Zelda.Items.ItemSounds.putDownKey">
            <summary>
            The sounds for picking-up or putting-down a KEY.
            </summary>
        </member>
        <member name="F:Zelda.Items.ItemSounds.pickUpFood">
            <summary>
            The sounds for picking-up or putting-down FOOD.
            </summary>
        </member>
        <member name="F:Zelda.Items.ItemSounds.putDownFood">
            <summary>
            The sounds for picking-up or putting-down FOOD.
            </summary>
        </member>
        <member name="F:Zelda.Items.ItemSounds.rand">
            <summary>
            A random number generator.
            </summary>
        </member>
        <member name="T:Zelda.Items.ItemUseEffect">
            <summary>
            An <see cref="T:Zelda.Items.ItemUseEffect"/> is an effect that gets triggered
            when the <see cref="T:Zelda.Items.Item"/> that owns the StatusEffects gets used.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemUseEffect.DestroyItemOnUse">
            <summary>
            Gets or sets a value indicating whether
            the underlying item gets destroyed once this <see cref="T:Zelda.Items.ItemUseEffect"/> has been used.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemUseEffect.Cooldown">
            <summary>
            Gets or sets the <see cref="P:Zelda.Items.ItemUseEffect.Cooldown"/> of this <see cref="T:Zelda.Items.ItemUseEffect"/>.
            </summary>
            <remarks>
            Cooldowns of ItemUseEffects are often -shared- cooldowns.
            </remarks>
        </member>
        <member name="P:Zelda.Items.ItemUseEffect.ItemBudgetUsed">
            <summary>
            Gets a value that represents how much "Item Points" this <see cref="T:Zelda.Items.ItemUseEffect"/> uses.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemUseEffect.IsReady">
            <summary>
            Gets a value indicating whether this ItemUseEffect is ready to be used
            based on its <see cref="P:Zelda.Items.ItemUseEffect.Cooldown"/>.
            </summary>
        </member>
        <member name="M:Zelda.Items.ItemUseEffect.Setup(Zelda.IZeldaServiceProvider)">
            <summary>
            Setups this <see cref="T:Zelda.Items.ItemUseEffect"/>.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Items.ItemUseEffect.GetDescription(Zelda.Status.Statable)">
            <summary>
            Gets a short localised description of this <see cref="T:Zelda.Items.ItemUseEffect"/>.
            </summary>
            <param name="statable">
            The statable component of the entity that wants to receive the description about this ItemUseEffect.
            </param>
            <returns>
            The localized description string.
            </returns>
        </member>
        <member name="M:Zelda.Items.ItemUseEffect.Use(Zelda.Entities.PlayerEntity)">
            <summary>
            Uses this <see cref="T:Zelda.Items.ItemUseEffect"/>.
            </summary>
            <param name="user">
            The PlayerEntity that wishes to use this ItemUseEffect.
            </param>
            <returns>
            true if this ItemUseEffect has been used;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Items.ItemUseEffect.IsFulfilledBy(Zelda.Entities.PlayerEntity)">
            <summary>
            Returns a value that indicates whether the given PlayerEntity
            can use this <see cref="T:Zelda.Items.ItemUseEffect"/> at this moment.
            </summary>
            <param name="user">The PlayerEntity that wishes to use this ItemUseEffect.</param>
            <returns>
            true if this ItemUseEffect can been used;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Items.ItemUseEffect.ResetCooldown">
            <summary>
            Helper method that resets the <see cref="P:Zelda.Items.ItemUseEffect.Cooldown"/> on this ItemUseEffect.
            </summary>
        </member>
        <member name="M:Zelda.Items.ItemUseEffect.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Items.ItemUseEffect.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Items.ItemUseEffect.GetSharedCooldowns(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Gets the <see cref="T:Zelda.SharedCooldownMap"/> associated with the given IItemDeserializationContext.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
            <returns>
            The SharedCooldownMap to use.
            </returns>
        </member>
        <member name="T:Zelda.Items.DropRequirements.DoesntHaveItemsRequirement">
            <summary>
            Represents an <see cref="T:Zelda.Core.Requirements.IRequirement"/> that requires the player
            to not have the specified <see cref="T:Zelda.Items.Item"/>s in his inventory or crafting bottle.
            </summary>
        </member>
        <member name="P:Zelda.Items.DropRequirements.DoesntHaveItemsRequirement.ItemNames">
            <summary>
            Gets or sets the names that uniquely idenfifies the <see cref="T:Zelda.Items.Item"/>s
            that the player is not allowed to have.
            </summary>
        </member>
        <member name="M:Zelda.Items.DropRequirements.DoesntHaveItemsRequirement.IsFulfilledBy(Zelda.Entities.PlayerEntity)">
            <summary>
            Gets a value indicating whether the given PlayerEntity
            fulfills the requirements as specified by this IItemDropRequirement.
            </summary>
            <param name="player">
            The PlayerEntity that wishes an Item to be dropped.
            </param>
            <returns>
            Returns true if the given PlayerEntity fulfills the specified requirement;
            or otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Items.DropRequirements.DoesntHaveItemsRequirement.HasItem(System.String,Zelda.Entities.PlayerEntity)">
            <summary>
            Gets whether the given PlayerEntity has the Item with the given name.
            </summary>
            <param name="itemName">
            The name of the item to check.
            </param>
            <param name="player">
            The PlayerEntity that wishes an Item to be dropped.
            </param>
            <returns>
            Returns true if the given PlayerEntity has the item with the given name;
            or otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Items.DropRequirements.DoesntHaveItemsRequirement.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Items.DropRequirements.DoesntHaveItemsRequirement.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="T:Zelda.Items.DropRequirements.DoesntKnowSongRequirement">
            <summary>
            Represents an <see cref="T:Zelda.Core.Requirements.IRequirement"/> that requires the player
            to not have learned a specified <see cref="T:Zelda.Ocarina.Song"/>.
            </summary>
        </member>
        <member name="P:Zelda.Items.DropRequirements.DoesntKnowSongRequirement.SongTypeName">
            <summary>
            Gets or sets the name of the song the player isn't allowed
            to have learned for the item to drop.
            </summary>
        </member>
        <member name="M:Zelda.Items.DropRequirements.DoesntKnowSongRequirement.IsFulfilledBy(Zelda.Entities.PlayerEntity)">
            <summary>
            Gets a value indicating whether the given PlayerEntity
            fulfills the requirements as specified by this IItemDropRequirement.
            </summary>
            <param name="player">
            The realted PlayerEntity.
            </param>
            <returns>
            Returns true if the given PlayerEntity fulfills the specified requirement;
            or otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Items.DropRequirements.DoesntKnowSongRequirement.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Items.DropRequirements.DoesntKnowSongRequirement.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Items.DropRequirements.DoesntKnowSongRequirement.songType">
            <summary>
            The type of the song.
            </summary>
        </member>
        <member name="T:Zelda.Items.DropRequirements.QuestNotActiveNorCompletedRequirement">
            <summary>
            Represents an <see cref="T:Zelda.Core.Requirements.IRequirement"/> that requires the player
            to not have completed a specified <see cref="T:Zelda.Quests.Quest"/> nor currently have it active.
            </summary>
        </member>
        <member name="P:Zelda.Items.DropRequirements.QuestNotActiveNorCompletedRequirement.QuestName">
            <summary>
            Gets or sets the name that uniquely idenfifies the <see cref="T:Zelda.Quests.Quest"/>
            that is not allowed to be active nor completed.
            </summary>
        </member>
        <member name="M:Zelda.Items.DropRequirements.QuestNotActiveNorCompletedRequirement.IsFulfilledBy(Zelda.Entities.PlayerEntity)">
            <summary>
            Gets a value indicating whether the given PlayerEntity
            fulfills the requirements as specified by this IItemDropRequirement.
            </summary>
            <param name="player">
            The realted PlayerEntity.
            </param>
            <returns>
            Returns true if the given PlayerEntity fulfills the specified requirement;
            or otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Items.DropRequirements.QuestNotActiveNorCompletedRequirement.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Items.DropRequirements.QuestNotActiveNorCompletedRequirement.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="T:Zelda.Items.IItemDestructionSettings">
            <summary>
            Provides a mechanism for deciding whether an ItemInstance
            is allowed to be possibly destructed.
            </summary>
            <remarks>
            Some items are required to progress in the game. As such it shouldn't
            be possible to destroy them using the Crafting Bottle or
            by dropping them onto the floor.
            </remarks>
        </member>
        <member name="M:Zelda.Items.IItemDestructionSettings.IsPossibleDeletionAllowed(Zelda.Items.ItemInstance,Zelda.Entities.PlayerEntity)">
            <summary>
            Gets a value indicating whether the specified ItemInstance is allowed to
            be possibly deleted.
            </summary>
            <param name="itemInstance">
            The item that might be deleted/destroyed.
            </param>
            <param name="owner">
            The entity that owns the given ItemInstance.
            </param>
            <returns>
            true if possible deletion is allowed;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Items.Item">
            <summary>
            The <see cref="T:Zelda.Items.Item"/> class describes the properties of a simple item. 
            </summary>
            <remarks>
            To create an actual instance of an Item one must use the <see cref="T:Zelda.Items.ItemInstance"/> class.
            </remarks>
        </member>
        <member name="F:Zelda.Items.Item.Extension">
            <summary>
            The extension any Item definition file uses. ".zitm"
            </summary>
        </member>
        <member name="P:Zelda.Items.Item.Name">
            <summary>
            Gets or sets the (unique) name of this <see cref="T:Zelda.Items.Item"/>.
            </summary>
        </member>
        <member name="M:Zelda.Items.Item.GetLocalizedName(System.String)">
            <summary>
            Gets the localized name of the Item with the specified itemName.
            </summary>
            <param name="itemName">
            The name of the Item.
            </param>
            <returns>
            The localized name; or the original input name.
            </returns>
        </member>
        <member name="P:Zelda.Items.Item.LocalizedName">
            <summary>
            Gets the localized name of this <see cref="T:Zelda.Items.Item"/>.
            </summary>
            <remarks>
            The Localized Name is aquired by looking
            up the string "IN_X", where X is the <see cref="P:Zelda.Items.Item.Name"/>,
            in the <see cref="T:Zelda.Items.ItemResources"/>.
            </remarks>
        </member>
        <member name="P:Zelda.Items.Item.Description">
            <summary>
            Gets or sets the description of this <see cref="T:Zelda.Items.Item"/>.
            </summary>
        </member>
        <member name="P:Zelda.Items.Item.LocalizedDescription">
            <summary>
            Gets the localized description of this <see cref="T:Zelda.Items.Item"/>.
            </summary>
            <remarks>
            The Localized Description is aquired by looking
            up the string "ID_X", where X is the <see cref="P:Zelda.Items.Item.Description"/>,
            in the <see cref="T:Zelda.Resources"/>.
            </remarks>
        </member>
        <member name="P:Zelda.Items.Item.LocalizedDescriptionSplit">
            <summary>
            Gets the localized description of this <see cref="T:Zelda.Items.Item"/>,
            splitting between new lines.
            </summary>
            <value>
            This value is only used if there actually is a NewLine string in the <see cref="P:Zelda.Items.Item.LocalizedDescription"/>.
            </value>
        </member>
        <member name="P:Zelda.Items.Item.Sprite">
            <summary>
            Gets or sets the <see cref="T:Atom.Xna.ISpriteAsset"/> that is used to display this Item.
            </summary>
            <value>
            This property may be null
            </value>
        </member>
        <member name="P:Zelda.Items.Item.SpriteColor">
            <summary>
            Gets or sets the color the <see cref="P:Zelda.Items.Item.Sprite"/> is tinted in.
            </summary>
        </member>
        <member name="P:Zelda.Items.Item.Level">
            <summary>
            Gets or sets the level of this <see cref="T:Zelda.Items.Item"/>.
            </summary>
        </member>
        <member name="P:Zelda.Items.Item.SpecialType">
            <summary>
            Gets or sets the <see cref="T:Zelda.Items.SpecialItemType"/> of this Item.
            </summary>
        </member>
        <member name="P:Zelda.Items.Item.ItemType">
            <summary>
            Gets the <see cref="P:Zelda.Items.Item.ItemType"/> this <see cref="T:Zelda.Items.Item"/> represents.
            </summary>
        </member>
        <member name="P:Zelda.Items.Item.RubiesWorth">
            <summary>
            Gets or sets a value that represents how many rupies <see cref="T:Zelda.Items.Item"/>s of this type are worth.
            </summary>
        </member>
        <member name="P:Zelda.Items.Item.Quality">
            <summary>
            Gets or sets the <see cref="T:Zelda.Items.ItemQuality"/> of this <see cref="T:Zelda.Items.Item"/>.
            </summary>
            <value>The default value is <see cref="F:Zelda.Items.ItemQuality.Common"/>.</value>
        </member>
        <member name="P:Zelda.Items.Item.StackSize">
            <summary>
            Gets or sets the number of <see cref="T:Zelda.Items.Item"/>s of this type
            that can be placed ontop of each-other on a stack.
            </summary>
            <value>The default value is 1.</value>
        </member>
        <member name="P:Zelda.Items.Item.PossiblePowerDifference">
            <summary>
            Gets or sets the power difference allowed by this Item.
            </summary>
            <remarks>
            Only works with non-stackable items. 
            Formula:
            [Base Item] -> Apply suffixes -> Apply Power Difference -> Apply Gems (which each have their own power difference) -> [Final Item]
            </remarks>
            <value>The default value is -0.15f to +0.15f.</value>
        </member>
        <member name="P:Zelda.Items.Item.IsStackable">
            <summary>
            Gets a value indicating whether <see cref="T:Zelda.Items.Item"/>s of this type can be stacked.
            </summary>
        </member>
        <member name="P:Zelda.Items.Item.AllowedAffixes">
            <summary>
            Gets or sets a value indicating what affixes this Item
            is allowed to have.
            </summary>
        </member>
        <member name="P:Zelda.Items.Item.Recipes">
            <summary>
            Gets or sets the names of the recipes that contain
            this <see cref="T:Zelda.Items.Item"/> as a reagent. May be null.
            </summary>
        </member>
        <member name="P:Zelda.Items.Item.UseEffect">
            <summary>
            Gets or sets the effect that happens when this <see cref="T:Zelda.Items.Item"/> gets used.
            </summary>
            <value>The default value is null.</value>
        </member>
        <member name="P:Zelda.Items.Item.DropRequirement">
            <summary>
            Gets or sets an <see cref="T:Zelda.Core.Requirements.IRequirement"/> that states
            whether this Item can currently drop.
            </summary>
        </member>
        <member name="P:Zelda.Items.Item.SoundOnPickupName">
            <summary>
            Gets or sets the name of the Sound File that 
            is played when the Item has been picked up.
            </summary>
            <value>
            The default value is null.
            </value>
        </member>
        <member name="P:Zelda.Items.Item.SoundOnPickup">
            <summary>
            Gets the (ready to be played) <see cref="T:Atom.Fmod.Sound"/> that 
            is played when the Item has been picked up.
            </summary>
            <remarks>
            This field is initialized when this <see cref="T:Zelda.Items.Item"/> gets loaden.
            </remarks>
        </member>
        <member name="P:Zelda.Items.Item.SoundOnPickupVolume">
            <summary>
            Gets or sets the volume of the <see cref="P:Zelda.Items.Item.SoundOnPickup"/>.
            </summary>
            <value>The default value is [1..1].</value>
        </member>
        <member name="P:Zelda.Items.Item.InventoryWidth">
            <summary>
            Gets or sets a value that represents the width of 
            this <see cref="T:Zelda.Items.Item"/> in the Inventory. (in tile-space)
            </summary>
            <value>
            The default value is 1.
            </value>
        </member>
        <member name="P:Zelda.Items.Item.InventoryHeight">
            <summary>
            Gets or sets a value that represents the height of 
            this <see cref="T:Zelda.Items.Item"/> in the Inventory. (in tile-space)
            </summary>
            <value>
            The default value is 1.
            </value>
        </member>
        <member name="P:Zelda.Items.Item.InventorySize">
            <summary>
            Gets a value that represents the size of this Item in the Inventory. (in tile-space)
            </summary>
        </member>
        <member name="M:Zelda.Items.Item.GetPowerFactor(Atom.Math.IRand)">
            <summary>
            Gets a random multiplicative power factor for new instances of this Item.
            </summary>
            <param name="rand">
            A random number generator.
            </param>
            <returns>
            A new random multiplative power factor.
            </returns>
        </member>
        <member name="M:Zelda.Items.Item.ModifyPowerBy(System.Single)">
            <summary>
            Modifies the power of this Item by the given factor.
            </summary>
            <param name="factor">
            The factor to modify the item by.
            </param>
            <returns>
            true if modifications were allowed; -or- otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Items.Item.CreateInstance(Atom.Math.IRand)">
            <summary>
            Creates a new instance of this <see cref="T:Zelda.Items.Item"/> with a random power factor.
            </summary>
            <param name="rand">
            The random number generator used to generate the power factor.
            </param>
            <returns>A new <see cref="T:Zelda.Items.ItemInstance"/>.</returns>
        </member>
        <member name="M:Zelda.Items.Item.CreateInstance(System.Single)">
            <summary>
            Creates a new instance of this <see cref="T:Zelda.Items.Item"/>.
            </summary>
            <param name="powerFactor">
            The factor by which the power of the new ItemInstance varies compared to this base Item.
            </param>
            <returns>A new <see cref="T:Zelda.Items.ItemInstance"/>.</returns>
        </member>
        <member name="M:Zelda.Items.Item.MultiplyColor(System.Single,System.Single,System.Single)">
            <summary>
            Multiplies the <see cref="P:Zelda.Items.Item.SpriteColor"/> of this Item by the specified multipliers.
            </summary>
            <param name="redMultiplier">The multiplier value for the red color component.</param>
            <param name="greenMultiplier">The multiplier value for the green color component.</param>
            <param name="blueMultiplier">The multiplier value for the blue color component.</param>
        </member>
        <member name="M:Zelda.Items.Item.MultiplyColor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Multiplies the <see cref="P:Zelda.Items.Item.SpriteColor"/> of this Item by the specified multipliers.
            </summary>
            <param name="redMultiplier">The multiplier value for the red color component.</param>
            <param name="greenMultiplier">The multiplier value for the green color component.</param>
            <param name="blueMultiplier">The multiplier value for the blue color component.</param>
            <param name="alphaMultiplier">The multiplier value for the alpha color component.</param>
        </member>
        <member name="M:Zelda.Items.Item.ToString">
            <summary>
            Overriden to return the name of this Item.
            </summary>
            <returns>
            A System.String that represents the current Item.
            </returns>
        </member>
        <member name="M:Zelda.Items.Item.Clone">
            <summary>
            Creates a clone of this <see cref="T:Zelda.Items.Item"/>.
            </summary>
            <returns>
            The cloned item.
            </returns>
        </member>
        <member name="M:Zelda.Items.Item.SetupClone(Zelda.Items.Item)">
            <summary>
            Setups the given Item to be a clone of this Item.
            </summary>
            <param name="clone">
            The Item to setup as a clone of this Item.
            </param>
        </member>
        <member name="M:Zelda.Items.Item.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Items.Item.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Items.Item._name">
            <summary>
            Defines the storage field for the <see cref="P:Zelda.Items.Item.Name"/> property.
            </summary>
        </member>
        <member name="F:Zelda.Items.Item._description">
            <summary>
            Defines the storage field for the <see cref="P:Zelda.Items.Item.Description"/> property.
            </summary>
        </member>
        <member name="F:Zelda.Items.Item._localizedDescription">
            <summary>
            Defines the storage field for the <see cref="P:Zelda.Items.Item.LocalizedDescription"/> property.
            </summary>
        </member>
        <member name="F:Zelda.Items.Item.stackSize">
            <summary>
            Defines the storage field for the <see cref="P:Zelda.Items.Item.StackSize"/> property.
            </summary>
        </member>
        <member name="F:Zelda.Items.Item.possiblePowerDifference">
            <summary>
            [Base Item] -> Apply suffixes -> Apply Power Difference -> Apply Gems (which each have their own power difference) -> [Final Item]
            </summary>
        </member>
        <member name="F:Zelda.Items.Item._recipes">
            <summary>
            The names of the recipes that contain the <see cref="T:Zelda.Items.Item"/> as a reagent. May be null.
            </summary>
        </member>
        <member name="F:Zelda.Items.Item.quality">
            <summary>
            Defines the storage field for the <see cref="P:Zelda.Items.Item.Quality"/> property.
            </summary>
        </member>
        <member name="F:Zelda.Items.Item._widthInInventory">
            <summary>
            Defines the storage field for the <see cref="P:Zelda.Items.Item.InventoryWidth"/> property.
            </summary>
        </member>
        <member name="F:Zelda.Items.Item._heightInInventory">
            <summary>
            Defines the storage field for the <see cref="P:Zelda.Items.Item.InventoryHeight"/> property.
            </summary>
        </member>
        <member name="F:Zelda.Items.Item._spriteColor">
            <summary>
            Defines the storage field for the <see cref="P:Zelda.Items.Item.SpriteColor"/> property.
            </summary>
        </member>
        <member name="F:Zelda.Items.Item.soundOnPickupVolume">
            <summary>
            Defines the storage field for the <see cref="P:Zelda.Items.Item.SoundOnPickupVolume"/> property.
            </summary>
        </member>
        <member name="T:Zelda.Items.ItemDropMode">
            <summary>
            Enumerates the different ItemDropModes an Enemy can have.
            </summary>
        </member>
        <member name="F:Zelda.Items.ItemDropMode.Normal">
            <summary>
            In Normal mode enemies drop 0 to 3 items at once.
            </summary>
        </member>
        <member name="F:Zelda.Items.ItemDropMode.Special">
            <summary>
            In Special mode enemies drop 1 to 4 items at once.
            </summary>
        </member>
        <member name="F:Zelda.Items.ItemDropMode.Boss">
            <summary>
            In Boss mode enemies drop 3 to 6 items at once.
            </summary>
        </member>
        <member name="F:Zelda.Items.ItemDropMode.Bad">
            <summary>
            In Bad mode enemies drop 0 to 1 items at once. More often 0 than 1.
            </summary>
        </member>
        <member name="F:Zelda.Items.ItemDropMode.Better">
            <summary>
            In Better mode enemies drop 1 to 3 items at once.
            </summary>
        </member>
        <member name="T:Zelda.Items.ItemInstance">
            <summary>
            An <see cref="T:Zelda.Items.ItemInstance"/> is a single instance of an <see cref="P:Zelda.Items.ItemInstance.Item"/>.
            This is needed to allow multiple <see cref="P:Zelda.Items.ItemInstance.Item"/>s of the same type.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemInstance.Item">
            <summary>
            Gets the <see cref="P:Zelda.Items.ItemInstance.Item"/> that is encapsulated by the <see cref="T:Zelda.Items.ItemInstance"/>.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemInstance.BaseItem">
            <summary>
            Gets the <see cref="P:Zelda.Items.ItemInstance.Item"/> template that is encapsulated by the <see cref="T:Zelda.Items.ItemInstance"/>.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemInstance.Count">
            <summary>
            Gets or sets the number of <see cref="P:Zelda.Items.ItemInstance.Item"/>s on the 'Item Stack'.
            </summary>
            <value>The default value is 1.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Set: If the given value is out of valid range. 0 &lt;= value &lt; Item.StackSize
            </exception>
        </member>
        <member name="P:Zelda.Items.ItemInstance.Sprite">
            <summary>
            Gets the ISprite instance of the ISpriteAsset of the Item.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemInstance.SpriteColor">
            <summary>
            Gets the SpriteColor of the Item.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemInstance.PowerFactor">
            <summary>
            Gets or sets the factor by which the power of this ItemInstance varies compared to the base Item.
            </summary>
        </member>
        <member name="M:Zelda.Items.ItemInstance.#ctor(Zelda.Items.Item,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Items.ItemInstance"/> class.
            </summary>
            <param name="baseItem">
            The underlying <see cref="P:Zelda.Items.ItemInstance.Item"/>.
            </param>
            <param name="powerFactor">
            The factor by which the power of this ItemInstance varies compared to the base Item.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="baseItem"/> is null.
            </exception>
        </member>
        <member name="M:Zelda.Items.ItemInstance.Update(Atom.IUpdateContext)">
            <summary>
            Updates this ItemInstance; animating the sprite.
            </summary>
            <param name="updateContext">
            The current update context.
            </param>
        </member>
        <member name="M:Zelda.Items.ItemInstance.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Items.ItemInstance.ReadItem(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to create an <see cref="T:Zelda.Items.ItemInstance"/>.
            Warning! this reads *only* Items. Use ItemInstance.Read to read any item type.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
            <returns>
            A new ItemInstance object.
            </returns>
        </member>
        <member name="M:Zelda.Items.ItemInstance.Read(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Reads the next <see cref="T:Zelda.Items.ItemInstance"/>, <see cref="T:Zelda.Items.EquipmentInstance"/>, 
            <see cref="T:Zelda.Items.WeaponInstance"/> or <see cref="T:Zelda.Items.GemInstance"/> from the specified BinaryReader.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
            <returns>
            A new ItemInstance object.
            </returns>
        </member>
        <member name="F:Zelda.Items.ItemInstance.count">
            <summary>
            The number of <see cref="P:Zelda.Items.ItemInstance.Item"/>s.
            </summary>
        </member>
        <member name="F:Zelda.Items.ItemInstance.powerFactor">
            <summary>
            The factor by which the power of this ItemInstance varies compared to the base Item.
            </summary>
        </member>
        <member name="F:Zelda.Items.ItemInstance.baseItem">
            <summary>
            The item template that is encapsulated by this <see cref="T:Zelda.Items.ItemInstance"/>.
            </summary>
        </member>
        <member name="F:Zelda.Items.ItemInstance.modifiedItem">
            <summary>
            The item that is encapsulated by this <see cref="T:Zelda.Items.ItemInstance"/>.
            </summary>
        </member>
        <member name="F:Zelda.Items.ItemInstance.sprite">
            <summary>
            The ISprite instance of the ISpriteAsset of the Item.
            </summary>
        </member>
        <member name="T:Zelda.Items.ItemQuality">
            <summary>
            Enumerates the different qualities of <see cref="T:Zelda.Items.Item"/>s.
            </summary>
        </member>
        <member name="F:Zelda.Items.ItemQuality.None">
            <summary>
            No specific quality.
            </summary>
        </member>
        <member name="F:Zelda.Items.ItemQuality.Quest">
            <summary>
            A quest-only item, these can't be sold. Color=Silver 
            </summary>
        </member>
        <member name="F:Zelda.Items.ItemQuality.Rubbish">
            <summary> Their only purpose is to be selled to vendors. Color=Grey </summary>
        </member>
        <member name="F:Zelda.Items.ItemQuality.Common">
            <summary> Items that provide no stat-boni. Color=White </summary>
        </member>
        <member name="F:Zelda.Items.ItemQuality.Magic">
            <summary> Magic items that provide stat-boni. Color=Green </summary>
        </member>
        <member name="F:Zelda.Items.ItemQuality.Rare">
            <summary> Rare items. Color=Blue  Better than Magic items.</summary>
        </member>
        <member name="F:Zelda.Items.ItemQuality.Epic">
            <summary> Epic items. Better than Magic items. Color=Purple </summary>
        </member>
        <member name="F:Zelda.Items.ItemQuality.Legendary">
            <summary> Legendary items. Better than Epic items. Color=Orange </summary>
        </member>
        <member name="F:Zelda.Items.ItemQuality.Artefact">
            <summary>
            Only extremely rare items can be artefacts - these are the best items in the game.
            </summary>
            <remarks>
            Better than Legendary items. Color=Red
            </remarks>
        </member>
        <member name="T:Zelda.Items.ItemType">
            <summary>
            Enumerates the different types of items.
            </summary>
        </member>
        <member name="F:Zelda.Items.ItemType.None">
            <summary>
            No type has been specified.
            </summary>
        </member>
        <member name="F:Zelda.Items.ItemType.Item">
            <summary>
            Represents a simple item.
            </summary>
        </member>
        <member name="F:Zelda.Items.ItemType.Equipment">
            <summary>
            Represents an item that can be equipped.
            </summary>
        </member>
        <member name="F:Zelda.Items.ItemType.Weapon">
            <summary>
            Represents an item that can be equipped in a weapon slot.
            </summary>
        </member>
        <member name="F:Zelda.Items.ItemType.Gem">
            <summary>
            Represents an item that can be socketed into another item.
            </summary>
        </member>
        <member name="F:Zelda.Items.ItemType.AffixedEquipment">
            <summary>
            Represents an item that can be equipped, and has been 'enhanced' with affixes.
            </summary>
        </member>
        <member name="F:Zelda.Items.ItemType.AffixedWeapon">
            <summary>
            Represents an item that can be equipped in a weapon slot, and has been 'enhanced' with affixes.
            </summary>
        </member>
        <member name="T:Zelda.Items.SpecialItemType">
            <summary>
            Enumerates the various special item subtypes.
            </summary>
        </member>
        <member name="F:Zelda.Items.SpecialItemType.None">
            <summary>
            No specific special type.
            </summary>
        </member>
        <member name="F:Zelda.Items.SpecialItemType.Ruby">
            <summary>
            The 'money' in the world of Hyrule.
            </summary>
        </member>
        <member name="F:Zelda.Items.SpecialItemType.Herb">
            <summary>
            Herbs are usually used as potion ingridients.
            </summary>
        </member>
        <member name="F:Zelda.Items.SpecialItemType.Ore">
            <summary>
            Ores are usually used as armor or weapon ingridients.
            </summary>
        </member>
        <member name="F:Zelda.Items.SpecialItemType.Liquid">
            <summary>
            Any liquid, such as a filled potion.
            </summary>
        </member>
        <member name="F:Zelda.Items.SpecialItemType.LiquidHeavy">
            <summary>
            Any heavy liquid, such as a filled potion.
            </summary>
        </member>
        <member name="F:Zelda.Items.SpecialItemType.Gem">
            <summary>
            Any 'gem'-like item.
            </summary>
        </member>
        <member name="F:Zelda.Items.SpecialItemType.Skull">
            <summary>
            Any 'skull'-like item.
            </summary>
        </member>
        <member name="F:Zelda.Items.SpecialItemType.Quiver">
            <summary>
            Any quiver.
            </summary>
        </member>
        <member name="F:Zelda.Items.SpecialItemType.Jewelry">
            <summary>
            Any jewelery that is no gem.
            </summary>
        </member>
        <member name="F:Zelda.Items.SpecialItemType.Bone">
            <summary>
            Any bone-like item.
            </summary>
        </member>
        <member name="F:Zelda.Items.SpecialItemType.Key">
            <summary>
            Any key-like item.
            </summary>
        </member>
        <member name="F:Zelda.Items.SpecialItemType.Food">
            <summary>
            Any food; such as an apple.
            </summary>
        </member>
        <member name="F:Zelda.Items.SpecialItemType.Cloth">
            <summary>
            Any item made of cloth.
            </summary>
        </member>
        <member name="F:Zelda.Items.SpecialItemType.Leather">
            <summary>
            Any item made of leather.
            </summary>
        </member>
        <member name="F:Zelda.Items.SpecialItemType.Chains">
            <summary>
            Any item made of chains.
            </summary>
        </member>
        <member name="F:Zelda.Items.SpecialItemType.ChainsHeavy">
            <summary>
            Any item made of heavy chains.
            </summary>
        </member>
        <member name="F:Zelda.Items.SpecialItemType.Metal">
            <summary>
            Any item made of metal.
            </summary>
        </member>
        <member name="F:Zelda.Items.SpecialItemType.MetalHeavy">
            <summary>
            Any item made of heavy metal.
            </summary>
        </member>
        <member name="F:Zelda.Items.SpecialItemType.Rock">
            <summary>
            Any item made of rock.
            </summary>
        </member>
        <member name="F:Zelda.Items.SpecialItemType.Parchment">
            <summary>
            Any item made of paper.
            </summary>
        </member>
        <member name="F:Zelda.Items.SpecialItemType.Magical">
            <summary>
            Any magical item that doesn't
            fit into any of the other categories.
            </summary>
        </member>
        <member name="F:Zelda.Items.SpecialItemType.Organic">
            <summary>
            Any organic item that doesn't
            fit into any of the other categories.
            </summary>
        </member>
        <member name="F:Zelda.Items.SpecialItemType.Wood">
            <summary>
            Any item made of wood.
            </summary>
        </member>
        <member name="F:Zelda.Items.SpecialItemType.MetalLight">
            <summary>
            Any light-weight metal weapon;
            such as a dagger or knife.
            </summary>
        </member>
        <member name="T:Zelda.Items.LootTable">
            <summary>
            The LootTable is internally a Hat of item names.
            This class can't be inherited.
            </summary>
        </member>
        <member name="F:Zelda.Items.LootTable.ItemIdAffectedByMagicFind">
            <summary>
            The Id of items that are affected by Magic Find.
            </summary>
        </member>
        <member name="P:Zelda.Items.LootTable.MagicFindModifier">
            <summary>
            Gets or sets the Magic Find Modifier set on the <see cref="T:Zelda.Items.LootTable"/>.
            </summary>
        </member>
        <member name="M:Zelda.Items.LootTable.#ctor(Zelda.Items.ItemManager,Atom.Math.RandMT)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Items.LootTable"/> class.
            </summary>
            <param name="itemManager">The ItemManager object.</param>
            <param name="rand">A random number generator.</param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="itemManager"/> or <paramref name="rand"/> is null.
            </exception>
        </member>
        <member name="M:Zelda.Items.LootTable.Get">
            <summary>
            Gets a random <see cref="T:Zelda.Items.ItemInstance"/> that is in the LootList.
            </summary>
            <returns>The ItemInstance - can be null.</returns>
        </member>
        <member name="F:Zelda.Items.LootTable.magicFindModifier">
            <summary>
            The magic find value set for this <see cref="T:Zelda.Items.LootTable"/>.
            </summary>
        </member>
        <member name="F:Zelda.Items.LootTable.itemManager">
            <summary>
            Identifies the <see cref="T:Zelda.Items.ItemManager"/> object.
            </summary>
        </member>
        <member name="T:Zelda.Items.PickedupItemContainer">
            <summary>
            Stores the Item which the player currently has picked up.
            This class can't be inherited.
            </summary>
        </member>
        <member name="E:Zelda.Items.PickedupItemContainer.Dropped">
            <summary>
            Raised when a picked-up Item has been dropped.
            </summary>
        </member>
        <member name="P:Zelda.Items.PickedupItemContainer.Item">
            <summary>
            Gets the <see cref="T:Zelda.Items.ItemInstance"/> the <see cref="T:Zelda.Entities.PlayerEntity"/> has currently picked-up.
            </summary>
            <value>The default value is null.</value>
        </member>
        <member name="P:Zelda.Items.PickedupItemContainer.OriginalPosition">
            <summary>
            Gets or sets the position of the Item in the Inventory before it was picked-up.
            </summary>
        </member>
        <member name="P:Zelda.Items.PickedupItemContainer.IsEmpty">
            <summary>
            Gets a value indicating whether this PickedUpItemContainer is empty;
            and as such doesn't contain an Item.
            </summary>
        </member>
        <member name="F:Zelda.Items.PickedupItemContainer.Owner">
            <summary>
            The PlayerEntity that owns this PickedupItemContainer.
            </summary>
        </member>
        <member name="M:Zelda.Items.PickedupItemContainer.#ctor(Zelda.Entities.PlayerEntity)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Items.PickedupItemContainer"/> class.
            </summary>
            <param name="owner">The owner of the new PickedupItemContainer.</param>
        </member>
        <member name="M:Zelda.Items.PickedupItemContainer.Pick(Zelda.Items.ItemInstance)">
            <summary>
            Picks-up the speceified ItemInstance; disgarding
            the currently picked-up ItemInstance.
            </summary>
            <param name="itemInstance">
            The ItemInstance that should be picked-up.
            </param>
        </member>
        <member name="M:Zelda.Items.PickedupItemContainer.Pick(Zelda.Items.ItemInstance,Atom.Math.Point2)">
            <summary>
            Picks-up the speceified ItemInstance; disgarding
            the currently picked-up ItemInstance.
            </summary>
            <param name="itemInstance">
            The ItemInstance that should be picked-up.
            </param>
            <param name="originalPosition">
            The position of the inventory cell the ItemInstance was placed
            in before it was picked-up.
            </param>
        </member>
        <member name="M:Zelda.Items.PickedupItemContainer.Drop">
            <summary>
            Drops the currently picked-up <see cref="P:Zelda.Items.PickedupItemContainer.Item"/> onto the floor.
            </summary>
        </member>
        <member name="M:Zelda.Items.PickedupItemContainer.DropMapItem(Zelda.Items.ItemInstance)">
            <summary>
            Drops a MapItem under the feet of the player.
            </summary>
            <param name="itemInstance">
            The ItemInstance to drop on the map.
            </param>
        </member>
        <member name="M:Zelda.Items.PickedupItemContainer.Restore">
            <summary>
            Restores the currently picked-up <see cref="P:Zelda.Items.PickedupItemContainer.Item"/> back into the Inventory.
            </summary>
            <returns>
            Returns whether the Item was sucessfully restored.
            </returns>
        </member>
        <member name="M:Zelda.Items.PickedupItemContainer.DestroyIfEmpty">
            <summary>
            Removes the picked-up item if its Count is zero.
            </summary>
        </member>
        <member name="M:Zelda.Items.PickedupItemContainer.Destroy">
            <summary>
            Removes the currently picked-up item.
            </summary>
        </member>
        <member name="M:Zelda.Items.PickedupItemContainer.TryRestoreAtOriginalPosition">
            <summary>
            Tries to restore the picked-up item to its original position in the inventory.
            </summary>
            <returns>
            true if it was restored;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Items.Sets.Design.SetEditor">
            <summary>
            Defines an <see cref="T:System.Drawing.Design.UITypeEditor"/> that loads <see cref="T:Zelda.Items.Sets.ISet"/>s.
            This class can't be inherited.
            </summary>
        </member>
        <member name="M:Zelda.Items.Sets.Design.SetEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the value of the specified object using the editor style indicated
            by the System.Drawing.Design.UITypeEditor.GetEditStyle() method.
            </summary>
            <param name="context">
            An System.ComponentModel.ITypeDescriptorContext that can be used to gain
            additional context information.
            </param>
            <param name="provider">
             An System.IServiceProvider that this editor can use to obtain services.
             </param>
            <param name="value">  
            The object to edit.
            </param>
            <returns>
            The new value of the object.
            </returns>
        </member>
        <member name="M:Zelda.Items.Sets.Design.SetEditor.LoadSet(System.String)">
            <summary>
            Tries to load the ISet with the given fileName.
            </summary>
            <param name="fileName">
            The filename that has been selected by the user.
            </param>
            <returns>
            The loaded ISet.
            </returns>
        </member>
        <member name="M:Zelda.Items.Sets.Design.SetEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the editor style used by the 
            System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)
            method.
            </summary>
            <param name="context">
            An System.ComponentModel.ITypeDescriptorContext that can be used to gain
            additional context information.
            </param>
            <returns>
            Returns UITypeEditorEditStyle.Modal.
            </returns>
        </member>
        <member name="T:Zelda.Items.Sets.EquipmentSetProperties">
            <summary>
            Descripes the <see cref="T:Zelda.Items.Sets.ISet"/> properties of an <see cref="T:Zelda.Items.EquipmentInstance"/>.
            </summary>
        </member>
        <member name="M:Zelda.Items.Sets.EquipmentSetProperties.#ctor(Zelda.Items.EquipmentInstance)">
            <summary>
            Initializes a new instance of the EquipmentSetProperties class.
            </summary>
            <param name="equipmentInstance">
            The EquipmentInstance that is part of an ISet.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="equipmentInstance"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the specified EquipmentInstance is not part of an <see cref="T:Zelda.Items.Sets.ISet"/>.
            </exception>
        </member>
        <member name="M:Zelda.Items.Sets.EquipmentSetProperties.Hook">
            <summary>
            Hooks up with the event handlers.
            </summary>
        </member>
        <member name="M:Zelda.Items.Sets.EquipmentSetProperties.OnEquipped(System.Object,Zelda.Status.ExtendedStatable)">
            <summary>
            Called when the EquipmentInstance has been equipped.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
            <param name="wearer">
            The ExtendedStatable component that has equipped the EquipmentInstance.
            </param>
        </member>
        <member name="M:Zelda.Items.Sets.EquipmentSetProperties.HasEquippedAllRequiredItems(Zelda.Status.ExtendedStatable)">
            <summary>
            Gets a value indicating whether the specified ExtendedStatable
            has currently equipped all required items.
            </summary>
            <param name="wearer">
            The wearer of the ISet.
            </param>
            <returns>
            true if the wearer has equipped all item of the ISet;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Items.Sets.EquipmentSetProperties.HasItem(Zelda.Items.Sets.ISetItem,Zelda.Status.ExtendedStatable)">
            <summary>
            Gets a value indicating whether the specified <paramref name="wearer"/>
            has the specified <see cref="T:Zelda.Items.Sets.ISetItem"/> equipped.
            </summary>
            <param name="item">
            The item that is part of an ISet.
            </param>
            <param name="wearer">
            The wearer of the ISet.
            </param>
            <returns>
            true if the wearer has the item equipped;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Items.Sets.EquipmentSetProperties.ApplySetBonus(Zelda.Status.ExtendedStatable)">
            <summary>
            Applies the set bonus to the specified ExtendedStatable.
            </summary>
            <param name="wearer">
            The wearer of the ISet.
            </param>
        </member>
        <member name="M:Zelda.Items.Sets.EquipmentSetProperties.OnUnequipped(System.Object,Zelda.Status.ExtendedStatable)">
            <summary>
            Called when the EquipmentInstance has been unequipped.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
            <param name="wearer">
            The ExtendedStatable component that has unequipped the EquipmentInstance.
            </param>
        </member>
        <member name="M:Zelda.Items.Sets.EquipmentSetProperties.IsSetBonusApplied">
            <summary>
            Gets a value indicating whether the set bonus
            has been applied.
            </summary>
            <returns>
            true if it has been applied and is currently active;
            otherwise false.
            </returns>
        </member>
        <member name="F:Zelda.Items.Sets.EquipmentSetProperties.set">
            <summary>
            Identifies the ISet the EquipmentInstance is part of.
            </summary>
        </member>
        <member name="F:Zelda.Items.Sets.EquipmentSetProperties.equipmentInstance">
            <summary>
            The EquipmentInstance whose set properties are descriped
            by this EquipmentSetProperties.
            </summary>
        </member>
        <member name="T:Zelda.Items.Sets.ISet">
            <summary>
            Represents a set of <see cref="T:Zelda.Items.Sets.ISetItem"/>s that when equipped
            together provide an <see cref="T:Zelda.Items.Sets.ISetBonus"/>.
            </summary>
        </member>
        <member name="P:Zelda.Items.Sets.ISet.LocalizedName">
            <summary>
            Gets the localized name of this ISet.
            </summary>
        </member>
        <member name="P:Zelda.Items.Sets.ISet.Items">
            <summary>
            Gets the list of <see cref="T:Zelda.Items.Sets.ISetItem"/> that are part of this ISet.
            </summary>
        </member>
        <member name="P:Zelda.Items.Sets.ISet.Bonus">
            <summary>
            Gets the <see cref="T:Zelda.Items.Sets.ISetBonus"/> this ISet provides when all Items of this ISet
            are equipped.
            </summary>
        </member>
        <member name="T:Zelda.Items.Sets.ISetBonus">
            <summary>
            Represents the bonus that is given when all <see cref="T:Zelda.Items.Sets.ISetItem"/>s
            of an <see cref="T:Zelda.Items.Sets.ISet"/> are equipped together.
            </summary>
        </member>
        <member name="P:Zelda.Items.Sets.ISetBonus.IsApplied">
            <summary>
            Gets a value indicating whether this ISetBonus is currently applied.
            </summary>
        </member>
        <member name="M:Zelda.Items.Sets.ISetBonus.Enable(Zelda.Status.ExtendedStatable)">
            <summary>
            Applies this ISetBonus to the specified ExtendedStatable component.
            </summary>
            <param name="statable">
            The statable component the bonus should be enabled for.
            </param>
        </member>
        <member name="M:Zelda.Items.Sets.ISetBonus.Disable">
            <summary>
            Removes this ISetBonus from the ExtendedStatable 
            it was previously enabled for.
            </summary>
        </member>
        <member name="T:Zelda.Items.Sets.ISetDatabase">
            <summary>
            Provides a mechanism to receive <see cref="T:Zelda.Items.Sets.ISet"/>s.
            </summary>
        </member>
        <member name="M:Zelda.Items.Sets.ISetDatabase.Get(System.String)">
            <summary>
            Tries to get the <see cref="T:Zelda.Items.Sets.ISet"/> with the specified <paramref name="setName"/>.
            </summary>
            <param name="setName">
            The name of the set.
            </param>
            <returns>
            The requested ISet; or null.
            </returns>
        </member>
        <member name="T:Zelda.Items.Sets.ISetItem">
            <summary>
            Represents an item that is part of an <see cref="T:Zelda.Items.Sets.ISet"/>.
            </summary>
        </member>
        <member name="P:Zelda.Items.Sets.ISetItem.LocalizedName">
            <summary>
            Gets the localized name of this ISetItem.
            </summary>
        </member>
        <member name="T:Zelda.Items.Sets.IStatusSetBonus">
            <summary>
            Represents an <see cref="T:Zelda.Items.Sets.ISetBonus"/> that provides an arabitary list
            of <see cref="T:Zelda.Status.StatusEffect"/>s.
            </summary>
        </member>
        <member name="P:Zelda.Items.Sets.IStatusSetBonus.Effects">
            <summary>
            Gets the list of <see cref="T:Zelda.Status.StatusEffect"/> this IStatusSetBonus provides.
            </summary>
        </member>
        <member name="T:Zelda.Items.Sets.Set">
            <summary>
            Represents a set of <see cref="T:Zelda.Items.Sets.ISetItem"/>s that when equipped
            together provide an <see cref="T:Zelda.Items.Sets.ISetBonus"/>.
            This class can't be inherited.
            </summary>
        </member>
        <member name="P:Zelda.Items.Sets.Set.Name">
            <summary>
            Gets or sets the name that uniquely identifies
            this Set.
            </summary>
        </member>
        <member name="P:Zelda.Items.Sets.Set.LocalizedName">
            <summary>
            Gets the localized name of this <see cref="T:Zelda.Items.Item"/>.
            </summary>
            <remarks>
            The Localized Name is aquired by looking
            up the string "SN_X", where X is the <see cref="P:Zelda.Items.Sets.Set.Name"/>,
            in the <see cref="T:Zelda.Items.ItemResources"/>.
            </remarks>
        </member>
        <member name="P:Zelda.Items.Sets.Set.Items">
            <summary>
            Gets the list of <see cref="T:Zelda.Items.Sets.ISetItem"/> that are part of this ISet.
            </summary>
        </member>
        <member name="P:Zelda.Items.Sets.Set.Bonus">
            <summary>
            Gets the <see cref="T:Zelda.Items.Sets.ISetBonus"/> this ISet provides when all Items of this ISet
            are equipped.
            </summary>
        </member>
        <member name="M:Zelda.Items.Sets.Set.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Items.Sets.Set.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Items.Sets.Set._name">
            <summary>
            The storage field of the <see cref="P:Zelda.Items.Sets.Set.Name"/> property.
            </summary>
        </member>
        <member name="F:Zelda.Items.Sets.Set.bonus">
            <summary>
            The SetBonus provided by this Set when all ISetItems have been equipped.
            </summary>
        </member>
        <member name="F:Zelda.Items.Sets.Set.items">
            <summary>
            The list of <see cref="T:Zelda.Items.Sets.ISetItem"/>s this Set consists of.
            </summary>
        </member>
        <member name="T:Zelda.Items.Sets.SetDatabase">
            <summary>
            Provides a mechanism to receive <see cref="T:Zelda.Items.Sets.ISet"/>s.
            </summary>
        </member>
        <member name="M:Zelda.Items.Sets.SetDatabase.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the SetDatabase class.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Items.Sets.SetDatabase.Get(System.String)">
            <summary>
            Tries to get the <see cref="T:Zelda.Items.Sets.ISet"/> with the specified <paramref name="setName"/>.
            </summary>
            <param name="setName">
            The name of the set.
            </param>
            <returns>
            The requested ISet; or null.
            </returns>
        </member>
        <member name="M:Zelda.Items.Sets.SetDatabase.TryLoad(System.String)">
            <summary>
            Tries to load the ISet with the given <paramref name="setName"/>.
            </summary>
            <param name="setName">
            The name of the set.
            </param>
            <returns>
            The requested ISet; or null.
            </returns>
        </member>
        <member name="M:Zelda.Items.Sets.SetDatabase.Load(System.String)">
            <summary>
            Loads the ISet with the given <paramref name="setName"/>.
            </summary>
            <remarks>
            Throws an exception on error.
            </remarks>
            <param name="setName">
            The name of the set.
            </param>
            <returns>
            The requested ISet.
            </returns>
        </member>
        <member name="F:Zelda.Items.Sets.SetDatabase.cachedSets">
            <summary>
            Contains the ISets that have been loaden previously.
            </summary>
        </member>
        <member name="F:Zelda.Items.Sets.SetDatabase.serviceProvider">
            <summary>
            Provides fast access to game-related services.
            </summary>
        </member>
        <member name="T:Zelda.Items.Sets.SetItem">
            <summary>
            Represents an item that is part of an <see cref="T:Zelda.Items.Sets.ISet"/>.
            </summary>
        </member>
        <member name="P:Zelda.Items.Sets.SetItem.Name">
            <summary>
            Gets or sets the name of this SetItem.
            </summary>
        </member>
        <member name="P:Zelda.Items.Sets.SetItem.LocalizedName">
            <summary>
            Gets the localized name of this SetItem.
            </summary>
        </member>
        <member name="M:Zelda.Items.Sets.SetItem.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Items.Sets.SetItem.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Items.Sets.SetItem._itemName">
            <summary>
            The storage field of the <see cref="P:Zelda.Items.Sets.SetItem.Name"/> property.
            </summary>
        </member>
        <member name="T:Zelda.Items.Sets.StatusSetBonus">
            <summary>
            Represents an <see cref="T:Zelda.Items.Sets.ISetBonus"/> that provides an arabitary list
            of <see cref="T:Zelda.Status.StatusEffect"/>s.
            </summary>
        </member>
        <member name="P:Zelda.Items.Sets.StatusSetBonus.IsApplied">
            <summary>
            Gets a value indicating whether this ISetBonus is currently applied.
            </summary>
        </member>
        <member name="P:Zelda.Items.Sets.StatusSetBonus.Effects">
            <summary>
            Gets the list of <see cref="T:Zelda.Status.StatusEffect"/> this StatusSetBonus provides.
            </summary>
        </member>
        <member name="M:Zelda.Items.Sets.StatusSetBonus.Enable(Zelda.Status.ExtendedStatable)">
            <summary>
            Applies this ISetBonus to the specified ExtendedStatable component.
            </summary>
            <param name="statable">
            The statable component the bonus should be enabled for.
            </param>
        </member>
        <member name="M:Zelda.Items.Sets.StatusSetBonus.Disable">
            <summary>
            Removes this ISetBonus from the ExtendedStatable 
            it was previously enabled for.
            </summary>
        </member>
        <member name="M:Zelda.Items.Sets.StatusSetBonus.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Items.Sets.StatusSetBonus.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Items.Sets.StatusSetBonus.aura">
            <summary>
            The PermanentAura that holds the StatusEffects that are applied
            by this StatusSetBonus.
            </summary>
        </member>
        <member name="T:Zelda.Items.SharedChest">
            <summary>
            Represents the chest that is shared over -all- characters.
            The main use of the chest is that it allows transfering of items
            between characters.
            </summary>
            <remarks>
            The players is allowed to buy tier upgrades that increase the size of the chest.
            </remarks>
        </member>
        <member name="P:Zelda.Items.SharedChest.SharedChestSavePath">
            <summary>
            Gets the full path at which the SharedChest is saved.
            </summary>
        </member>
        <member name="P:Zelda.Items.SharedChest.Tier">
            <summary>
            Gets the SharedChestTier of this SharedChest.
            </summary>
        </member>
        <member name="M:Zelda.Items.SharedChest.#ctor(Zelda.Entities.PlayerEntity,Zelda.Items.SharedChestTier)">
            <summary>
            Initializes a new instance of the SharedChest class.
            </summary>
            <param name="player">
            The PlayerEntity that owns the new SharedChest.
            </param>
            <param name="tier">
            The expension level of the new SharedChest. Determines the grid size.
            </param>
        </member>
        <member name="M:Zelda.Items.SharedChest.#ctor(Zelda.Entities.PlayerEntity,Zelda.Items.SharedChestTier,Atom.Math.Point2)">
            <summary>
            Initializes a new instance of the SharedChest class.
            </summary>
            <param name="player">
            The PlayerEntity that owns the new SharedChest.
            </param>
            <param name="tier">
            The expension level of the new SharedChest.
            </param>
            <param name="gridSize">
            The number of cells on the x-axis and y-axis.
            </param>
        </member>
        <member name="M:Zelda.Items.SharedChest.Load(Zelda.Entities.PlayerEntity,Zelda.IZeldaServiceProvider)">
            <summary>
            Loads the current SharedChest.
            </summary>
            <param name="player">
            The PlayerEntity that should own the new SharedChest.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
            <returns>
            The newly loaded SharedChest.
            </returns>
        </member>
        <member name="M:Zelda.Items.SharedChest.Load(Zelda.Entities.PlayerEntity,Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Loads the SharedChest using the specified IZeldaDeserializationContext.
            </summary>
            <param name="player">
            The PlayerEntity that should own the new SharedChest.
            </param>
            <param name="context">
            The context that requires access to all objects required during the deserialization process.
            </param>
            <returns>
            The newly created SharedChest.
            </returns>
        </member>
        <member name="M:Zelda.Items.SharedChest.Save(Zelda.Items.SharedChest,Zelda.IZeldaServiceProvider)">
            <summary>
            Saves the specified SharedChest.
            </summary>
            <param name="chest">
            The SharedChest to serialize.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Items.SharedChest.Serialize(Zelda.Items.SharedChest,Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the specified SharedChest using the specified IZeldaSerializationContext.
            </summary>
            <param name="chest">
            The SharedChest to serialize.
            </param>
            <param name="context">
            The context that requires access to all objects required during the serialization process.
            </param>
        </member>
        <member name="M:Zelda.Items.SharedChest.Create(Zelda.Entities.PlayerEntity,Zelda.Items.SharedChestTier)">
            <summary>
            Creates a new SharedChest for the specified Player and tier.
            </summary>
            <param name="tier">
            The upgrade tier of the chest to create. Determines the size of the chest.
            </param>
            <param name="player">
            The PlayerEntity that should own the new SharedChest.
            </param>
            <returns>
            The newly created SharedChest.
            </returns>
        </member>
        <member name="M:Zelda.Items.SharedChest.UpgradeTier(Zelda.Items.SharedChest)">
            <summary>
            Upgrades the tier of the specified SharedChest.
            </summary>
            <param name="chest">
            The SharedChest to upgrade.
            </param>
        </member>
        <member name="M:Zelda.Items.SharedChest.GetNextTier(Zelda.Items.SharedChestTier)">
            <summary>
            Gets the SharedChestTier that follows the specified SharedChestTier.
            </summary>
            <param name="tier">
            The current SharedChestTier.
            </param>
            <returns>
            The next SharedChestTier.
            </returns>
        </member>
        <member name="M:Zelda.Items.SharedChest.GetGridSize(Zelda.Items.SharedChestTier)">
            <summary>
            Gets the size of the SharedChest at the given SharedChestTier.
            </summary>
            <param name="tier">
            The tier of the chest.
            </param>
            <returns>
            The number of grid cells on the x-axis and y-axis.
            </returns>
        </member>
        <member name="M:Zelda.Items.SharedChest.SwapItemsOnShiftLeftClick(Zelda.Items.ItemInstance,Atom.Math.Point2)">
            <summary>
            Handles the case of the user left-clicking on an item in the CraftingBottle
            while the Shift key is down.
            </summary>
            <remarks>
            The default behaviour is to move the item into the inventory.
            </remarks>
            <param name="item">The related item.</param>
            <param name="cellX">The original position of the <paramref name="item"/> (in cell-space).</param>
        </member>
        <member name="F:Zelda.Items.SharedChest.tier">
            <summary>
            Stores the SharedChestTier of this SharedChest. The chest must be re-created to upgrade the tier.
            </summary>
        </member>
        <member name="T:Zelda.Items.SharedChestTier">
            <summary>
            Enumerates the different tier levels that upgrade the size of SharedChest.
            </summary>
        </member>
        <member name="F:Zelda.Items.SharedChestTier.Tier1">
            <summary>
            The default tier. 
            </summary>
        </member>
        <member name="F:Zelda.Items.SharedChestTier.Tier2">
            <summary>
            The second tier. 
            </summary>
        </member>
        <member name="F:Zelda.Items.SharedChestTier.Tier3">
            <summary>
            The third tier. 
            </summary>
        </member>
        <member name="F:Zelda.Items.SharedChestTier.Tier4">
            <summary>
            The fourth tier. 
            </summary>
        </member>
        <member name="T:Zelda.Items.ItemSocketProperties">
            <summary>
            Encapsulates the sockets properties of an <see cref="T:Zelda.Items.Equipment"/>.
            This class can't be inherited.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemSocketProperties.Sockets">
            <summary>
            Gets or sets the list of actual <see cref="T:Zelda.Items.Socket"/>s of the Item.
            </summary>
            <value>Is null by default.</value>
        </member>
        <member name="P:Zelda.Items.ItemSocketProperties.Bonus">
            <summary>
            Gets or sets the bonus provided by the Item if 
            all Sockets of the Equipment are socketed correctly. (gems-sockets colors match)
            </summary>
            <value>Is null by default.</value>
        </member>
        <member name="P:Zelda.Items.ItemSocketProperties.SocketCount">
            <summary>
            Gets the number of <see cref="T:Zelda.Items.Socket"/>s the Item has.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemSocketProperties.EmptySocketCount">
            <summary>
            Gets the number of empty <see cref="T:Zelda.Items.Socket"/>s the Item has.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemSocketProperties.HasGems">
            <summary>
            Gets a value indicating whether any of the <see cref="T:Zelda.Items.Socket"/>s contains a <see cref="T:Zelda.Items.Gem"/>.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemSocketProperties.Gems">
            <summary>
            Gets an enumeration over the Gems the Item currently contains.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemSocketProperties.MergedEffects">
            <summary>
            Gets an enumeration over the set of StatusEffect that gets applied because of the Sockets of the Item.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemSocketProperties.MergedEffectCount">
            <summary>
            Gets the number of individual StatusEffects the MergedEffects consists of.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemSocketProperties.EmptySockets">
            <summary>
            Gets an enumeration over the empty Sockets.
            </summary>
        </member>
        <member name="P:Zelda.Items.ItemSocketProperties.MaximumSocketCount">
            <summary>
            Gets the maximum number of sockets the Item is allowed to have.
            </summary>
        </member>
        <member name="M:Zelda.Items.ItemSocketProperties.#ctor(Zelda.Items.Equipment)">
            <summary>
            Initializes a new instance of the ItemSocketProperties class.
            </summary>
            <param name="equipment">
            The Equipment whose sockets properties are descriped by the new Sockets instance.
            </param>
        </member>
        <member name="M:Zelda.Items.ItemSocketProperties.Insert(Atom.Math.Point2,Zelda.Items.GemInstance,Zelda.Status.Statable)">
            <summary>
            Tries to insert the given GemInstance into the Socket at the given relative socket position.
            </summary>
            <param name="position">
            The relative socket position.
            </param>
            <param name="gemIntance">
            The GemInstance to insert.
            </param>
            <param name="statable">
            The Statable component of the PlayerEntity that wishes to insert a Gem into a Socket.
            </param>
            <returns>
            Returns true if the insert was succesful;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Items.ItemSocketProperties.AddSocket(Zelda.Status.ElementalSchool)">
            <summary>
            Tries to add an additional Socket to the Item.
            </summary>
            <param name="socketColor">
            The color of the socket.
            </param>
            <returns>
            True if an additional Socket has been added; otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Items.ItemSocketProperties.CanHaveAdditionalSocket">
            <summary>
            Gets a value indicating whether the Item can have one additional Socket.
            </summary>
            <returns>
            Returns true if adding an additional Socket is allowed;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Items.ItemSocketProperties.OnEquip(Zelda.Status.ExtendedStatable)">
            <summary>
            Applies the socket properties to the given ExtendedStatable.
            </summary>
            <param name="statable">
            The ExtendedStatable that is about to equip the item
            with these ItemSocketProperties.
            </param>
        </member>
        <member name="M:Zelda.Items.ItemSocketProperties.OnUnequip">
            <summary>
            Disables the socket properties from the given ExtendedStatable.
            </summary>
        </member>
        <member name="M:Zelda.Items.ItemSocketProperties.GetSocket(System.Int32)">
            <summary>
            Get the <see cref="T:Zelda.Items.Socket"/> at the given zero-based index.
            </summary>
            <param name="index">
            The zero-based index of the Socket to receive.
            </param>
            <returns>
            The Socket at the given index; or null.
            </returns>
        </member>
        <member name="M:Zelda.Items.ItemSocketProperties.GetSocketAt(Atom.Math.Point2)">
            <summary>
            Gets the socket at the given two-dimensional position, relative to the Item's inventory size,
            </summary>
            <param name="position">
            The relative position.
            </param>
            <returns>
            The requested Socket; or null.
            </returns>
        </member>
        <member name="M:Zelda.Items.ItemSocketProperties.Refresh">
            <summary>
            Refreshes the socket bonus and merged effect.
            </summary>
        </member>
        <member name="M:Zelda.Items.ItemSocketProperties.RefreshBonus">
            <summary>
            Refreshes the socket <see cref="P:Zelda.Items.ItemSocketProperties.Bonus"/> given to the wearer of the item.
            </summary>
        </member>
        <member name="M:Zelda.Items.ItemSocketProperties.RefreshMergedEffect">
            <summary>
            Refreshes the mergedEffect Aura by completely rebuilding it.
            </summary>
        </member>
        <member name="M:Zelda.Items.ItemSocketProperties.Clone">
            <summary>
            Creates a clone of this ItemSocketProperties instance.
            </summary>
            <returns>
            The cloned ItemSocketProperties instance.
            </returns>
        </member>
        <member name="M:Zelda.Items.ItemSocketProperties.SetupClone(Zelda.Items.ItemSocketProperties)">
            <summary>
            Setups the given ItemSocketProperties instance to be a clone of this ItemSocketProperties instance.
            </summary>
            <param name="clone">
            The  ItemSocketProperties instance to setup as a clone of this ItemSocketProperties instance.
            </param>
        </member>
        <member name="M:Zelda.Items.ItemSocketProperties.GetSocketClone">
            <summary>
            Returns a clone of the Sockets of this ItemSocketProperties instance.
            </summary>
            <returns>
            The cloned array; can be null.
            </returns>
        </member>
        <member name="M:Zelda.Items.ItemSocketProperties.GetBonusClone">
            <summary>
            Returns a clone of the <see cref="P:Zelda.Items.ItemSocketProperties.Bonus"/> of this ItemSocketProperties instance.
            </summary>
            <returns>
            The cloned PermanentAura; can be null.
            </returns>
        </member>
        <member name="M:Zelda.Items.ItemSocketProperties.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Items.ItemSocketProperties.SerializeState(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the state of the sockets.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Items.ItemSocketProperties.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Items.ItemSocketProperties.DeserializeState(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the state of the individual sockets.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Items.ItemSocketProperties.equipment">
            <summary>
            The Equipment whose sockets properties are descriped by this Sockets instance.
            </summary>
        </member>
        <member name="F:Zelda.Items.ItemSocketProperties.sockets">
            <summary>
            The sockets of the Item.
            </summary>
        </member>
        <member name="F:Zelda.Items.ItemSocketProperties.isBonusFulfilled">
            <summary>
            States whether the socket <see cref="P:Zelda.Items.ItemSocketProperties.Bonus"/> is fulfilled.
            </summary>
        </member>
        <member name="F:Zelda.Items.ItemSocketProperties.wearer">
            <summary>
            The ExtendedStatable that is currently wearing the item that owns this ItemSocketProperties instance.
            </summary>
        </member>
        <member name="F:Zelda.Items.ItemSocketProperties.mergedEffect">
            <summary>
            The effect of the gems and the socket bonus merged into the PermanentAura.
            </summary>
        </member>
        <member name="T:Zelda.Items.Socket">
            <summary>
            A socket is a special slot on an <see cref="T:Zelda.Items.Equipment"/> into
            which <see cref="P:Zelda.Items.Socket.Gem"/>s can be inserted to provide bonuses.
            </summary>
            <remarks>
            Each socket has a special 'color'; which fit to corresponding gems.
            The player receives a bonus if all sockets of an <see cref="T:Zelda.Items.Equipment"/>
            are socketed with the correct colored Gems.
            </remarks>
        </member>
        <member name="P:Zelda.Items.Socket.Color">
            <summary>
            Gets or sets the color of this Socket.
            </summary>
        </member>
        <member name="P:Zelda.Items.Socket.Gem">
            <summary>
            Gets the GemInstance that has been inserted into this Socket, if any.
            </summary>
        </member>
        <member name="P:Zelda.Items.Socket.IsEmpty">
            <summary>
            Gets a value indicating whether this Socket is empty (and as such contains no <see cref="P:Zelda.Items.Socket.Gem"/>).
            </summary>
        </member>
        <member name="P:Zelda.Items.Socket.IsWellSocketted">
            <summary>
            Gets a value indicating whether this Socket 
            has been socketted correctly.
            </summary>
            <remarks>
            If all sockets of an item have been socketted 'well'
            then an additional Socket Bonus is added to the item.
            </remarks>
        </member>
        <member name="M:Zelda.Items.Socket.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Items.Socket"/> class.
            </summary>
        </member>
        <member name="M:Zelda.Items.Socket.#ctor(Zelda.Status.ElementalSchool)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Items.Socket"/> class.
            </summary>
            <param name="socketColor">The color of the socket.</param>
        </member>
        <member name="M:Zelda.Items.Socket.Insert(Zelda.Items.GemInstance)">
            <summary>
            Tries to socket the given Gem into this <see cref="T:Zelda.Items.Socket"/>.
            </summary>
            <param name="gem">The gem to socket.</param>
            <returns>true if the gem has been socketed, otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="gem"/> is null.</exception>
        </member>
        <member name="T:Zelda.Items.UseEffects.AwardExperienceEffect">
            <summary>
            Defines an <see cref="T:Zelda.Items.ItemUseEffect"/> that awards the user with experience.
            This class can't be inherited.
            </summary>
        </member>
        <member name="P:Zelda.Items.UseEffects.AwardExperienceEffect.ExperienceGained">
            <summary>
            Gets or sets the experience this <see cref="T:Zelda.Items.UseEffects.AwardExperienceEffect"/> awards.
            </summary>
            <exception cref="T:System.ArgumentException">
            Set: If the given value is less than or equal to zero.
            </exception>
        </member>
        <member name="M:Zelda.Items.UseEffects.AwardExperienceEffect.GetDescription(Zelda.Status.Statable)">
            <summary>
            Gets a short localised description of this <see cref="T:Zelda.Items.ItemUseEffect"/>.
            </summary>
            <param name="statable">
            The statable component of the entity that wants to receive the description about this ItemUseEffect.
            </param>
            <returns>
            The localized description string.
            </returns>
        </member>
        <member name="P:Zelda.Items.UseEffects.AwardExperienceEffect.ItemBudgetUsed">
            <summary>
            Gets a value that represents how much "Item Points" this <see cref="T:Zelda.Items.UseEffects.AwardExperienceEffect"/> uses.
            </summary>
        </member>
        <member name="M:Zelda.Items.UseEffects.AwardExperienceEffect.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Items.UseEffects.AwardExperienceEffect"/> class.
            </summary>
        </member>
        <member name="M:Zelda.Items.UseEffects.AwardExperienceEffect.Use(Zelda.Entities.PlayerEntity)">
            <summary>
            Uses this <see cref="T:Zelda.Items.UseEffects.AwardExperienceEffect"/>, increasing the number
            of Free Status Points of the given PlayerEntity.
            </summary>
            <param name="user">
            The PlayerEntity that wishes to use this ItemUseEffect.
            </param>
            <returns>
            true if this ItemUseEffect has been used;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Items.UseEffects.AwardExperienceEffect.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Items.UseEffects.AwardExperienceEffect.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Items.UseEffects.AwardExperienceEffect.experience">
            <summary>
            The amount of experience this <see cref="T:Zelda.Items.UseEffects.AwardExperienceEffect"/> awards.
            </summary>
        </member>
        <member name="T:Zelda.Items.UseEffects.AwardStatusPointEffect">
            <summary>
            Defines an <see cref="T:Zelda.Items.ItemUseEffect"/> that permanently increases 
            the number of avaiable status points of the PlayerEntity.
            This class can't be inherited
            </summary>
        </member>
        <member name="P:Zelda.Items.UseEffects.AwardStatusPointEffect.PointsGained">
            <summary>
            Gets or sets the number of points awarded by this <see cref="T:Zelda.Items.UseEffects.AwardStatusPointEffect"/>.
            </summary>
            <exception cref="T:System.ArgumentException">
            Set: If the given value is less than or equal to zero.
            </exception>
        </member>
        <member name="M:Zelda.Items.UseEffects.AwardStatusPointEffect.GetDescription(Zelda.Status.Statable)">
            <summary>
            Gets a short localised description of this <see cref="T:Zelda.Items.ItemUseEffect"/>.
            </summary>
            <param name="statable">
            The statable component of the entity that wants to receive the description about this ItemUseEffect.
            </param>
            <returns>
            The localized description string.
            </returns>
        </member>
        <member name="P:Zelda.Items.UseEffects.AwardStatusPointEffect.ItemBudgetUsed">
            <summary>
            Gets a value that represents how much "Item Points" this <see cref="T:Zelda.Items.UseEffects.AwardStatusPointEffect"/> uses.
            </summary>
        </member>
        <member name="M:Zelda.Items.UseEffects.AwardStatusPointEffect.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Items.UseEffects.AwardStatusPointEffect"/> class.
            </summary>
        </member>
        <member name="M:Zelda.Items.UseEffects.AwardStatusPointEffect.Use(Zelda.Entities.PlayerEntity)">
            <summary>
            Uses this <see cref="T:Zelda.Items.UseEffects.AwardStatusPointEffect"/>, increasing the number
            of Free Status Points of the given PlayerEntity.
            </summary>
            <param name="user">
            The PlayerEntity that wishes to use this ItemUseEffect.
            </param>
            <returns>
            true if this ItemUseEffect has been used;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Items.UseEffects.AwardStatusPointEffect.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Items.UseEffects.AwardStatusPointEffect.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Items.UseEffects.AwardStatusPointEffect.pointsGained">
            <summary>
            The number of points awarded by the <see cref="T:Zelda.Items.UseEffects.AwardStatusPointEffect"/>.
            </summary>
        </member>
        <member name="T:Zelda.Items.UseEffects.UseBottleEffect">
            <summary>
            
            </summary>
        </member>
        <member name="P:Zelda.Items.UseEffects.UseBottleEffect.Parts">
            <summary>
            Gets the list of <see cref="T:Zelda.Items.UseEffects.UseBottleEffectPart"/>s this UseBottleEffect consists of.
            </summary>
        </member>
        <member name="M:Zelda.Items.UseEffects.UseBottleEffect.#ctor">
            <summary>
            Initializes a new instance of the UseBottleEffect class.
            </summary>
        </member>
        <member name="M:Zelda.Items.UseEffects.UseBottleEffect.GetDescription(Zelda.Status.Statable)">
            <summary>
            Gets a short localised description of this UseBottleEffect.
            </summary>
            <param name="statable">
            The statable component of the entity that wants to receive the description about this ItemUseEffect.
            </param>
            <returns>
            The localized description string.
            </returns>
        </member>
        <member name="M:Zelda.Items.UseEffects.UseBottleEffect.Use(Zelda.Entities.PlayerEntity)">
            <summary>
            Uses this UseBottleEffect.
            </summary>
            <param name="user">
            The PlayerEntity that wishes to use this UseBottleEffect.
            </param>
            <returns>
            true if this UseBottleEffect has been used;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Items.UseEffects.UseBottleEffect.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Items.UseEffects.UseBottleEffect.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Items.UseEffects.UseBottleEffect.parts">
            <summary>
            
            </summary>
        </member>
        <member name="T:Zelda.Items.UseEffects.UseBottleEffectPart">
            <summary>
            Encapsulates a possibility that is checked when using the <see cref="T:Zelda.Items.UseEffects.UseBottleEffect"/>.
            </summary>
        </member>
        <member name="P:Zelda.Items.UseEffects.UseBottleEffectPart.ItemName">
            <summary>
            Gets or sets the name of the item that is spawned
            when this UseBottleEffectPart takes effect.
            </summary>
        </member>
        <member name="P:Zelda.Items.UseEffects.UseBottleEffectPart.SampleName">
            <summary>
            Gets or sets the name of the audio resource that is played
            when this UseBottleEffectPart has been triggered.
            </summary>
        </member>
        <member name="P:Zelda.Items.UseEffects.UseBottleEffectPart.Predicate">
            <summary>
            Gets or sets the IPredicate{IEntity} that must hold true
            for the UseBottleEffectPart to take effect. 
            </summary>
        </member>
        <member name="M:Zelda.Items.UseEffects.UseBottleEffectPart.Use(Zelda.Entities.PlayerEntity)">
            <summary>
            Tries to trigger this UseBottleEffectPart.
            </summary>
            <param name="user">
            The PlayerEntity that wishes to trigger this UseBottleEffectPart.
            </param>
            <returns>
            true if this UseBottleEffectPart was triggered;
            -or- otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Items.UseEffects.UseBottleEffectPart.SpawnItem(Zelda.Entities.PlayerEntity)">
            <summary>
            Spawns the item with the set ItemName.
            </summary>
            <param name="player">
            The PlayerEntity that has triggered this UseBottleEffectPart.
            </param>
        </member>
        <member name="M:Zelda.Items.UseEffects.UseBottleEffectPart.PlayAudioSample">
            <summary>
            Plays the audio sample that has been associated with this UseBottleEffectPart.
            </summary>
        </member>
        <member name="M:Zelda.Items.UseEffects.UseBottleEffectPart.Setup(Zelda.IZeldaServiceProvider)">
            <summary>
            Setups this UseBottleEffectPart.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Items.UseEffects.UseBottleEffectPart.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Items.UseEffects.UseBottleEffectPart.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Items.UseEffects.UseBottleEffectPart.serviceProvider">
            <summary>
            Provides fast access to game-related services.
            </summary>
        </member>
        <member name="T:Zelda.Items.UseEffects.ExecuteActionEffect">
            <summary>
            Represents an <see cref="T:Zelda.Items.ItemUseEffect"/> that when used executes an <see cref="T:Atom.IAction"/>.
            </summary>
        </member>
        <member name="P:Zelda.Items.UseEffects.ExecuteActionEffect.Action">
            <summary>
            Gets or sets the IAction this is executed when this ExecuteActionEffect is used.
            </summary>
        </member>
        <member name="P:Zelda.Items.UseEffects.ExecuteActionEffect.ActionToExecute">
            <summary>
            Gets or sets the IAction this is executed when this ExecuteActionEffect is used.
            </summary>
            <remarks>
            The silly M$ property grid does not work on interface properties. This is our workaround.
            </remarks>
        </member>
        <member name="P:Zelda.Items.UseEffects.ExecuteActionEffect.ItemBudgetUsed">
            <summary>
            Gets a value that represents how much "Item Points" this <see cref="T:Zelda.Items.ItemUseEffect"/> uses.
            </summary>
        </member>
        <member name="M:Zelda.Items.UseEffects.ExecuteActionEffect.GetDescription(Zelda.Status.Statable)">
            <summary>
            Gets a short localised description of this <see cref="T:Zelda.Items.ItemUseEffect"/>.
            </summary>
            <param name="statable">
            The statable component of the entity that wants to receive the description about this ItemUseEffect.
            </param>
            <returns>
            The localized description string.
            </returns>
        </member>
        <member name="M:Zelda.Items.UseEffects.ExecuteActionEffect.Use(Zelda.Entities.PlayerEntity)">
            <summary>
            Uses this ExecuteActionEffect.
            </summary>
            <param name="user">
            The PlayerEntity that wishes to use this ItemUseEffect.
            </param>
            <returns>
            true if this ItemUseEffect has been used;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Items.UseEffects.ExecuteActionEffect.IsFulfilledBy(Zelda.Entities.PlayerEntity)">
            <summary>
            Returns a value that indicates whether the given PlayerEntity
            can use this <see cref="T:Zelda.Items.ItemUseEffect"/> at this moment.
            </summary>
            <param name="user">The PlayerEntity that wishes to use this ItemUseEffect.</param>
            <returns>
            true if this ItemUseEffect can been used;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Items.UseEffects.ExecuteActionEffect.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Items.UseEffects.ExecuteActionEffect.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="T:Zelda.Items.UseEffects.IItemUseEffect">
            <summary>
            Represents an effect that is applied when an item is used.
            </summary>
        </member>
        <member name="T:Zelda.Items.UseEffects.IRestoreEffect">
            <summary>
            Represents the base interface shared by all power restoring
            IUseEffects.
            </summary>
        </member>
        <member name="M:Zelda.Items.UseEffects.IRestoreEffect.GetAverageAmountRestored(Zelda.Status.LifeMana,Zelda.Status.Statable)">
            <summary>
            Gets the average amount restored of the given power type.
            </summary>
            <param name="powerType">
            The power type.
            </param>
            <param name="user">
            The statable component of the Entity that wants to use this IRestoreEffect.
            </param>
            <returns>
            The average amount restored.
            </returns>
        </member>
        <member name="T:Zelda.Items.UseEffects.LearnSongEffect">
            <summary>
            Represents an ItemUseEffect that learns the player
            a new <see cref="P:Zelda.Items.UseEffects.LearnSongEffect.Song"/>.
            </summary>
        </member>
        <member name="P:Zelda.Items.UseEffects.LearnSongEffect.SongTypeName">
            <summary>
            Gets or sets the name of the song that is learned by this LearnSongEffect.
            </summary>
        </member>
        <member name="P:Zelda.Items.UseEffects.LearnSongEffect.Song">
            <summary>
            Gets the Song that is learnt by this LearnSongEffect.
            </summary>
        </member>
        <member name="M:Zelda.Items.UseEffects.LearnSongEffect.GetDescription(Zelda.Status.Statable)">
            <summary>
            Gets a short localised description of this <see cref="T:Zelda.Items.ItemUseEffect"/>.
            </summary>
            <param name="statable">
            The statable component of the entity that wants to receive the description about this ItemUseEffect.
            </param>
            <returns>
            The localized description string.
            </returns>
        </member>
        <member name="P:Zelda.Items.UseEffects.LearnSongEffect.ItemBudgetUsed">
            <summary>
            Gets the item budget used by this ItemUseEffect.
            </summary>
        </member>
        <member name="M:Zelda.Items.UseEffects.LearnSongEffect.#ctor">
            <summary>
            Initializes a new instance of the LearnSongEffect class.
            </summary>
        </member>
        <member name="M:Zelda.Items.UseEffects.LearnSongEffect.Setup(Zelda.IZeldaServiceProvider)">
            <summary>
            Setups this LearnSongEffect.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Items.UseEffects.LearnSongEffect.Use(Zelda.Entities.PlayerEntity)">
            <summary>
            Uses this LearnSongEffect.
            </summary>
            <param name="user">
            The player that used the item.
            </param>
            <returns>
            True if the item has been used;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Items.UseEffects.LearnSongEffect.PlaySample">
            <summary>
            Plays the sample sounds associated with learning a new song.
            </summary>
        </member>
        <member name="M:Zelda.Items.UseEffects.LearnSongEffect.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Items.UseEffects.LearnSongEffect.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Items.UseEffects.LearnSongEffect.serviceProvider">
            <summary>
            Provides fast access to game-related services.
            </summary>
        </member>
        <member name="T:Zelda.Items.UseEffects.NewQuestEffect">
            <summary>
            Represents an <see cref="T:Zelda.Items.ItemUseEffect"/> that
            gives the player a new <see cref="T:Zelda.Quests.Quest"/>.
            This class can't be inherited.
            </summary>
        </member>
        <member name="P:Zelda.Items.UseEffects.NewQuestEffect.QuestName">
            <summary>
            Gets or sets the name that uniquely
            identifies the quest the item gives to the player.
            </summary>
        </member>
        <member name="P:Zelda.Items.UseEffects.NewQuestEffect.DescriptionText">
            <summary>
            Gets the <see cref="T:Zelda.LocalizableText"/> object that stores
            the description of this NewQuestEffect.
            </summary>
        </member>
        <member name="M:Zelda.Items.UseEffects.NewQuestEffect.GetDescription(Zelda.Status.Statable)">
            <summary>
            Gets a short localised description of this <see cref="T:Zelda.Items.ItemUseEffect"/>.
            </summary>
            <param name="statable">
            The statable component of the entity that wants to receive the description about this ItemUseEffect.
            </param>
            <returns>
            The localized description string.
            </returns>
        </member>
        <member name="P:Zelda.Items.UseEffects.NewQuestEffect.ItemBudgetUsed">
            <summary>
            Gets a value that represents how much "Item Points" this NewQuestEffect uses.
            </summary>
        </member>
        <member name="M:Zelda.Items.UseEffects.NewQuestEffect.#ctor">
            <summary>
            Initializes a new instance of the NewQuestEffect class.
            </summary>
        </member>
        <member name="M:Zelda.Items.UseEffects.NewQuestEffect.Setup(Zelda.IZeldaServiceProvider)">
            <summary>
            Setups this NewQuestEffect.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Items.UseEffects.NewQuestEffect.Use(Zelda.Entities.PlayerEntity)">
            <summary>
            Uses this NewQuestEffect.
            </summary>
            <param name="user">
            The PlayerEntity that wishes to use this NewQuestEffect.
            </param>
            <returns>
            true if this NewQuestEffect has been used;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Items.UseEffects.NewQuestEffect.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Items.UseEffects.NewQuestEffect.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Items.UseEffects.NewQuestEffect.quest">
            <summary>
            The cached quest.
            </summary>
        </member>
        <member name="F:Zelda.Items.UseEffects.NewQuestEffect.serviceProvider">
            <summary>
            Provides fast access to game-related services.
            </summary>
        </member>
        <member name="F:Zelda.Items.UseEffects.NewQuestEffect.description">
            <summary>
            The text that is shown as a description for this NewQuestEffect.
            </summary>
        </member>
        <member name="T:Zelda.Items.UseEffects.RestoreEffect">
            <summary>
            Defines an <see cref="T:Zelda.Items.ItemUseEffect"/> that restores the Life, the Mana
            or both of the user.
            </summary>
        </member>
        <member name="P:Zelda.Items.UseEffects.RestoreEffect.PowerType">
            <summary>
            Gets or sets the PowerType restored by this RestoreEffect.
            </summary>
        </member>
        <member name="P:Zelda.Items.UseEffects.RestoreEffect.ManipulationType">
            <summary>
            Gets or sets a value indicating how the Amount restored should be interpreted.
            </summary>
        </member>
        <member name="P:Zelda.Items.UseEffects.RestoreEffect.MinimumAmount">
            <summary>
            Gets or sets the minimum amount restored by this RestoreEffect.
            </summary>
            <seealso cref="T:System.ValueType"/>
        </member>
        <member name="P:Zelda.Items.UseEffects.RestoreEffect.MaximumAmount">
            <summary>
            Gets or sets the maximum amount restored by this RestoreEffect.
            </summary>
            <seealso cref="T:System.ValueType"/>
        </member>
        <member name="P:Zelda.Items.UseEffects.RestoreEffect.AverageAmount">
            <summary>
            Gets the average amount restored by this RestoreEffect.
            </summary>
        </member>
        <member name="P:Zelda.Items.UseEffects.RestoreEffect.CanCrit">
            <summary>
            Gets or sets a value indicating whether the restore effect can crit,
            restoring twice the amount.
            </summary>
        </member>
        <member name="M:Zelda.Items.UseEffects.RestoreEffect.GetDescription(Zelda.Status.Statable)">
            <summary>
            Gets a short localised description of this <see cref="T:Zelda.Items.ItemUseEffect"/>.
            </summary>
            <param name="statable">
            The statable component of the entity that wants to receive the description about this ItemUseEffect.
            </param>
            <returns>
            The localized description string.
            </returns>
        </member>
        <member name="P:Zelda.Items.UseEffects.RestoreEffect.ItemBudgetUsed">
            <summary>
            Gets a value that represents how much "Item Points" this RestoreEffect uses.
            </summary>
        </member>
        <member name="M:Zelda.Items.UseEffects.RestoreEffect.Setup(Zelda.IZeldaServiceProvider)">
            <summary>
            Setups this <see cref="T:Zelda.Items.UseEffects.RestoreEffect"/>.
            </summary>
            <param name="serviceProvider">
            Provide fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Items.UseEffects.RestoreEffect.Use(Zelda.Entities.PlayerEntity)">
            <summary>
            Uses this RestoreEffect.
            </summary>
            <param name="user">
            The PlayerEntity that wishes to use this ItemUseEffect.
            </param>
            <returns>
            true if this ItemUseEffect has been used;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Items.UseEffects.RestoreEffect.GetAverageAmountRestored(Zelda.Status.LifeMana,Zelda.Status.Statable)">
            <summary>
            Gets the average amount restored of the given power type.
            </summary>
            <param name="powerType">
            The power type.
            </param>
            <param name="user">
            The statable component of the Entity that wants to use this IRestoreEffect.
            </param>
            <returns>
            The average amount restored.
            </returns>
        </member>
        <member name="M:Zelda.Items.UseEffects.RestoreEffect.Restore(Zelda.Status.LifeMana,Zelda.Status.ExtendedStatable)">
            <summary>
            Restores the life or mana of the given user.
            </summary>
            <param name="powerType">
            The power to restore; Life or Mana.
            </param>
            <param name="statable">
            The ExtendedStatable component of the ZeldaEntity to restore.
            </param>
        </member>
        <member name="M:Zelda.Items.UseEffects.RestoreEffect.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Items.UseEffects.RestoreEffect.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Items.UseEffects.RestoreEffect.valueType">
            <summary>
            Represents the storage field of the <see cref="T:System.ValueType"/> property.
            </summary>
        </member>
        <member name="F:Zelda.Items.UseEffects.RestoreEffect.rand">
            <summary>
            A random number generator.
            </summary>
        </member>
        <member name="T:Zelda.Items.UseEffects.RestoreLifeEffect">
            <summary>
            Defines an <see cref="T:Zelda.Items.ItemUseEffect"/> that heals the user.
            This class can't be inherited.
            </summary>
        </member>
        <member name="P:Zelda.Items.UseEffects.RestoreLifeEffect.LifeRestoredMinimum">
            <summary>
            Gets or sets the minimum amount of life healed by this RestoreLifeEffect.
            </summary>
        </member>
        <member name="P:Zelda.Items.UseEffects.RestoreLifeEffect.LifeRestoredMaximum">
            <summary>
            Gets or sets the maximum amount of life healed by this RestoreLifeEffect.
            </summary>
        </member>
        <member name="P:Zelda.Items.UseEffects.RestoreLifeEffect.AverageLifeRestored">
            <summary>
            Gets the amount of life healed on average.
            </summary>
        </member>
        <member name="P:Zelda.Items.UseEffects.RestoreLifeEffect.ItemBudgetUsed">
            <summary>
            Gets a value indicating how many 'Item Points' this ItemUseEffect effect uses.
            </summary>
        </member>
        <member name="M:Zelda.Items.UseEffects.RestoreLifeEffect.GetDescription(Zelda.Status.Statable)">
            <summary>
            Gets a short localised description of this <see cref="T:Zelda.Items.ItemUseEffect"/>.
            </summary>
            <param name="statable">
            The statable component of the entity that wants to receive the description about this ItemUseEffect.
            </param>
            <returns>
            The localized description string.
            </returns>
        </member>
        <member name="M:Zelda.Items.UseEffects.RestoreLifeEffect.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Items.UseEffects.RestoreLifeEffect"/> class.
            </summary>
        </member>
        <member name="M:Zelda.Items.UseEffects.RestoreLifeEffect.Setup(Zelda.IZeldaServiceProvider)">
            <summary>
            Setups this <see cref="T:Zelda.Items.UseEffects.RestoreLifeEffect"/>.
            </summary>
            <param name="serviceProvider">
            Provide fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Items.UseEffects.RestoreLifeEffect.Use(Zelda.Entities.PlayerEntity)">
            <summary>
            Uses this <see cref="T:Zelda.Items.ItemUseEffect"/>.
            </summary>
            <param name="user">
            The PlayerEntity that wishes to use this ItemUseEffect.
            </param>
            <returns>
            true if this ItemUseEffect has been used;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Items.UseEffects.RestoreLifeEffect.GetAverageAmountRestored(Zelda.Status.LifeMana,Zelda.Status.Statable)">
            <summary>
            Gets the average amount restored of the given power type.
            </summary>
            <param name="powerType">
            The power type.
            </param>
            <param name="user">
            The statable component of the Entity that wants to use this IRestoreEffect.
            </param>
            <returns>
            The average amount restored.
            </returns>
        </member>
        <member name="M:Zelda.Items.UseEffects.RestoreLifeEffect.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Items.UseEffects.RestoreLifeEffect.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Items.UseEffects.RestoreLifeEffect.rand">
            <summary>
            A random number generator.
            </summary>
        </member>
        <member name="T:Zelda.Items.UseEffects.RestoreLifeManaEffect">
            <summary>
            Defines an <see cref="T:Zelda.Items.ItemUseEffect"/> that restores the user's life and mana.
            This class can't be inherited.
            </summary>
        </member>
        <member name="P:Zelda.Items.UseEffects.RestoreLifeManaEffect.LifeRestoredMinimum">
            <summary>
            Gets or sets the minimum amount of life healed by this RestoreLifeManaEffect.
            </summary>
        </member>
        <member name="P:Zelda.Items.UseEffects.RestoreLifeManaEffect.LifeRestoredMaximum">
            <summary>
            Gets or sets the maximum amount of life healed by this RestoreLifeManaEffect.
            </summary>
        </member>
        <member name="P:Zelda.Items.UseEffects.RestoreLifeManaEffect.ManaRestoredMinimum">
            <summary>
            Gets or sets the minimum amount of Mana healed by this RestoreLifeManaEffect.
            </summary>
        </member>
        <member name="P:Zelda.Items.UseEffects.RestoreLifeManaEffect.ManaRestoredMaximum">
            <summary>
            Gets or sets the maximum amount of Mana healed by this RestoreLifeManaEffect.
            </summary>
        </member>
        <member name="P:Zelda.Items.UseEffects.RestoreLifeManaEffect.AverageManaRestored">
            <summary>
            Gets the amount of Mana healed on average.
            </summary>
        </member>
        <member name="P:Zelda.Items.UseEffects.RestoreLifeManaEffect.AverageLifeRestored">
            <summary>
            Gets the amount of life healed on average.
            </summary>
        </member>
        <member name="P:Zelda.Items.UseEffects.RestoreLifeManaEffect.ItemBudgetUsed">
            <summary>
            Gets a value indicating how many 'Item Points' this ItemUseEffect effect uses.
            </summary>
        </member>
        <member name="M:Zelda.Items.UseEffects.RestoreLifeManaEffect.GetDescription(Zelda.Status.Statable)">
            <summary>
            Gets a short localised description of this <see cref="T:Zelda.Items.ItemUseEffect"/>.
            </summary>
            <param name="statable">
            The statable component of the entity that wants to receive the description about this ItemUseEffect.
            </param>
            <returns>
            The localized description string.
            </returns>
        </member>
        <member name="M:Zelda.Items.UseEffects.RestoreLifeManaEffect.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Items.UseEffects.RestoreLifeManaEffect"/> class.
            </summary>
        </member>
        <member name="M:Zelda.Items.UseEffects.RestoreLifeManaEffect.Setup(Zelda.IZeldaServiceProvider)">
            <summary>
            Setups this <see cref="T:Zelda.Items.UseEffects.RestoreLifeManaEffect"/>.
            </summary>
            <param name="serviceProvider">
            Provide fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Items.UseEffects.RestoreLifeManaEffect.Use(Zelda.Entities.PlayerEntity)">
            <summary>
            Uses this <see cref="T:Zelda.Items.ItemUseEffect"/>.
            </summary>
            <param name="user">
            The PlayerEntity that wishes to use this ItemUseEffect.
            </param>
            <returns>
            true if this ItemUseEffect has been used;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Items.UseEffects.RestoreLifeManaEffect.GetAverageAmountRestored(Zelda.Status.LifeMana,Zelda.Status.Statable)">
            <summary>
            Gets the average amount restored of the given power type.
            </summary>
            <param name="powerType">
            The power type.
            </param>
            <param name="user">
            The statable component of the Entity that wants to use this IRestoreEffect.
            </param>
            <returns>
            The average amount restored.
            </returns>
        </member>
        <member name="M:Zelda.Items.UseEffects.RestoreLifeManaEffect.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Items.UseEffects.RestoreLifeManaEffect.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Items.UseEffects.RestoreLifeManaEffect.rand">
            <summary>
            A random number generator.
            </summary>
        </member>
        <member name="T:Zelda.Items.UseEffects.RestoreManaEffect">
            <summary>
            Defines an <see cref="T:Zelda.Items.ItemUseEffect"/> that restores some mana of the user.
            This class can't be inherited.
            </summary>
        </member>
        <member name="P:Zelda.Items.UseEffects.RestoreManaEffect.ManaRestoredMinimum">
            <summary>
            Gets or sets the minimum amount of Mana healed by this RestoreManaEffect.
            </summary>
        </member>
        <member name="P:Zelda.Items.UseEffects.RestoreManaEffect.ManaRestoredMaximum">
            <summary>
            Gets or sets the maximum amount of Mana healed by this RestoreManaEffect.
            </summary>
        </member>
        <member name="P:Zelda.Items.UseEffects.RestoreManaEffect.AverageManaRestored">
            <summary>
            Gets the amount of Mana healed by RestoreManaEffect on average.
            </summary>
        </member>
        <member name="P:Zelda.Items.UseEffects.RestoreManaEffect.ItemBudgetUsed">
            <summary>
            Gets a value indicating how many 'Item Points' this RestoreManaEffect effect uses.
            </summary>
        </member>
        <member name="M:Zelda.Items.UseEffects.RestoreManaEffect.GetDescription(Zelda.Status.Statable)">
            <summary>
            Gets a short localised description of this <see cref="T:Zelda.Items.ItemUseEffect"/>.
            </summary>
            <param name="statable">
            The statable component of the entity that wants to receive the description about this ItemUseEffect.
            </param>
            <returns>
            The localized description string.
            </returns>
        </member>
        <member name="M:Zelda.Items.UseEffects.RestoreManaEffect.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Items.UseEffects.RestoreManaEffect"/> class.
            </summary>
        </member>
        <member name="M:Zelda.Items.UseEffects.RestoreManaEffect.Setup(Zelda.IZeldaServiceProvider)">
            <summary>
            Setups this <see cref="T:Zelda.Items.UseEffects.RestoreManaEffect"/>.
            </summary>
            <param name="serviceProvider">
            Provide fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Items.UseEffects.RestoreManaEffect.Use(Zelda.Entities.PlayerEntity)">
            <summary>
            Uses this <see cref="T:Zelda.Items.ItemUseEffect"/>.
            </summary>
            <param name="user">
            The PlayerEntity that wishes to use this ItemUseEffect.
            </param>
            <returns>
            true if this ItemUseEffect has been used;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Items.UseEffects.RestoreManaEffect.GetAverageAmountRestored(Zelda.Status.LifeMana,Zelda.Status.Statable)">
            <summary>
            Gets the average amount restored of the given power type.
            </summary>
            <param name="powerType">
            The power type.
            </param>
            <param name="user">
            The statable component of the Entity that wants to use this IRestoreEffect.
            </param>
            <returns>
            The average amount restored.
            </returns>
        </member>
        <member name="M:Zelda.Items.UseEffects.RestoreManaEffect.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Items.UseEffects.RestoreManaEffect.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Items.UseEffects.RestoreManaEffect.rand">
            <summary>
            A random number generator.
            </summary>
        </member>
        <member name="T:Zelda.Items.UseEffects.SaveTeleportPositionEffect">
            <summary>
            When used, stores the current location within the world data store of the current player.
            </summary>
        </member>
        <member name="M:Zelda.Items.UseEffects.SaveTeleportPositionEffect.Setup(Zelda.IZeldaServiceProvider)">
            <summary>
            Setups this SaveTeleportPositionEffect.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Items.UseEffects.SaveTeleportPositionEffect.GetDescription(Zelda.Status.Statable)">
            <summary>
            Gets a short localised description of this <see cref="T:Zelda.Items.ItemUseEffect"/>.
            </summary>
            <param name="statable">
            The statable component of the entity that wants to receive the description about this ItemUseEffect.
            </param>
            <returns>
            The localized description string.
            </returns>
        </member>
        <member name="M:Zelda.Items.UseEffects.SaveTeleportPositionEffect.Use(Zelda.Entities.PlayerEntity)">
            <summary>
            Uses this <see cref="T:Zelda.Items.ItemUseEffect"/>.
            </summary>
            <param name="user">
            The PlayerEntity that wishes to use this ItemUseEffect.
            </param>
            <returns>
            true if this ItemUseEffect has been used;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Items.UseEffects.SaveTeleportPositionEffect.Save(Zelda.Entities.PlayerEntity)">
            <summary>
            Saves the current location of the player in the world-wide data store.
            </summary>
            <param name="user">
            The player entity that executed this ItemUseEffect.
            </param>
        </member>
        <member name="M:Zelda.Items.UseEffects.SaveTeleportPositionEffect.IsSavingAllowed(Zelda.Entities.PlayerEntity)">
            <summary>
            Gets a value indicating whether the specified player is currently
            allowed to save the current location.
            </summary>
            <param name="user">
            The player entity that executed this ItemUseEffect.
            </param>
            <returns>
            true if it is allowed -or- otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Items.UseEffects.SaveTeleportPositionEffect.LearnSong(Zelda.Entities.PlayerEntity)">
            <summary>
            Learns the player the MusicCrossSong, if required.
            </summary>
            <param name="user">
            The player entity that executed this ItemUseEffect.
            </param>
        </member>
        <member name="M:Zelda.Items.UseEffects.SaveTeleportPositionEffect.PlaySound">
            <summary>
            Plays a simple 'success' sound sample.
            </summary>
        </member>
        <member name="F:Zelda.Items.UseEffects.SaveTeleportPositionEffect.serviceProvider">
            <summary>
            Provides fast access to game-related services.
            </summary>
        </member>
        <member name="T:Zelda.Items.UseEffects.SchottlanderEffect">
            <summary>
            The Schottlander effect consists of two phases.
            When used an StatusEffect is applied; and when
            that StatusEffect ends another StatusEffect is applied.
            </summary>
        </member>
        <member name="P:Zelda.Items.UseEffects.SchottlanderEffect.InitialEffect">
            <summary>
            Gets the initial effect of this SchottlanderEffect.
            </summary>
        </member>
        <member name="P:Zelda.Items.UseEffects.SchottlanderEffect.FollowUpEffect">
            <summary>
            Gets the effect that follows the <see cref="P:Zelda.Items.UseEffects.SchottlanderEffect.InitialEffect"/> of this SchottlanderEffect.
            </summary>
        </member>
        <member name="M:Zelda.Items.UseEffects.SchottlanderEffect.GetDescription(Zelda.Status.Statable)">
            <summary>
            Gets a short localised description of this <see cref="T:Zelda.Items.ItemUseEffect"/>.
            </summary>
            <param name="statable">
            The statable component of the entity that wants to receive the description about this ItemUseEffect.
            </param>
            <returns>
            The localized description string.
            </returns>
        </member>
        <member name="P:Zelda.Items.UseEffects.SchottlanderEffect.ItemBudgetUsed">
            <summary>
            Gets a value that represents how much "Item Points" this <see cref="T:Zelda.Items.ItemUseEffect"/> uses.
            </summary>
        </member>
        <member name="M:Zelda.Items.UseEffects.SchottlanderEffect.#ctor">
            <summary>
            Initializes a new instance of the SchottlanderEffect class.
            </summary>
        </member>
        <member name="M:Zelda.Items.UseEffects.SchottlanderEffect.Use(Zelda.Entities.PlayerEntity)">
            <summary>
            Uses this <see cref="T:Zelda.Items.ItemUseEffect"/>.
            </summary>
            <param name="user">
            The PlayerEntity that wishes to use this ItemUseEffect.
            </param>
            <returns>
            true if this ItemUseEffect has been used;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Items.UseEffects.SchottlanderEffect.OnEffectEnded(System.Object,Zelda.Status.Statable)">
            <summary>
            Called when the first effect of this Schottlander has ended.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="user">the statable component that had the effect.</param>
        </member>
        <member name="M:Zelda.Items.UseEffects.SchottlanderEffect.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Items.UseEffects.SchottlanderEffect.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Items.UseEffects.SchottlanderEffect.initialEffect">
            <summary>
            The effect that gets activated when this SchottlanderEffect ItemUseEffect gets used.
            </summary>
        </member>
        <member name="F:Zelda.Items.UseEffects.SchottlanderEffect.followUpEffect">
            <summary>
            The effect that gets activated when the <see cref="F:Zelda.Items.UseEffects.SchottlanderEffect.initialEffect"/> has ended.
            </summary>
        </member>
        <member name="T:Zelda.Items.UseEffects.SpawnRandomItemEffect">
            <summary>
            Defines an <see cref="T:Zelda.Items.ItemUseEffect"/> that when triggered 
            spawns a random item.
            </summary>
            <remarks>
            Usually used by treasure chests.
            </remarks>
        </member>
        <member name="P:Zelda.Items.UseEffects.SpawnRandomItemEffect.MinimumItemLevel">
            <summary>
            Gets or sets the minimum allowed level an item spawned by this
            ItemUseEffectSpawnRandomItem can have.
            </summary>
        </member>
        <member name="P:Zelda.Items.UseEffects.SpawnRandomItemEffect.MaximumItemLevel">
            <summary>
            Gets or sets the maximum allowed level an item spawned by this
            ItemUseEffectSpawnRandomItem can have.
            </summary>
            <value>
            Any item can be spawned it the MaximumItemLevel is set to 0.
            </value>
        </member>
        <member name="P:Zelda.Items.UseEffects.SpawnRandomItemEffect.ItemType">
            <summary>
            Gets or sets the ItemType of the items spawned by this SpawnRandomItemEffect are limited to.
            </summary>
            <value>The default value is ItemType.None; this means no limitation.</value>
        </member>
        <member name="M:Zelda.Items.UseEffects.SpawnRandomItemEffect.GetDescription(Zelda.Status.Statable)">
            <summary>
            Gets a short localised description of this <see cref="T:Zelda.Items.ItemUseEffect"/>.
            </summary>
            <param name="statable">
            The statable component of the entity that wants to receive the description about this ItemUseEffect.
            </param>
            <returns>
            The localized description string.
            </returns>
        </member>
        <member name="P:Zelda.Items.UseEffects.SpawnRandomItemEffect.ItemBudgetUsed">
            <summary>
            Gets a value that represents how much "Item Points" this <see cref="T:Zelda.Items.ItemUseEffect"/> uses.
            </summary>
        </member>
        <member name="M:Zelda.Items.UseEffects.SpawnRandomItemEffect.Use(Zelda.Entities.PlayerEntity)">
            <summary>
            Uses this <see cref="T:Zelda.Items.ItemUseEffect"/>.
            </summary>
            <param name="user">
            The PlayerEntity that wishes to use this ItemUseEffect.
            </param>
            <returns>
            true if this ItemUseEffect has been used;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Items.UseEffects.SpawnRandomItemEffect.GetRandomItem(Zelda.Entities.PlayerEntity)">
            <summary>
            Randomly picks an item and returns it.
            </summary>
            <param name="user">
            The PlayerEntity that wishes to use this ItemUseEffect.
            </param>
            <returns>The Item that has been picked.</returns>
        </member>
        <member name="M:Zelda.Items.UseEffects.SpawnRandomItemEffect.GetItemFiles">
            <summary>
            Gets the item filenames from which an item should be randomly picked.
            </summary>
            <returns>
            An array of file names.
            </returns>
        </member>
        <member name="M:Zelda.Items.UseEffects.SpawnRandomItemEffect.QueryGemFiles(System.String[])">
            <summary>
            Queries the given array of item files for Gems.
            </summary>
            <param name="files">
            The array that contains all item files that exist in the game.
            </param>
            <returns>
            An array that only contains the gem description files from the given files array.
            </returns>
        </member>
        <member name="M:Zelda.Items.UseEffects.SpawnRandomItemEffect.PickItem(System.String[])">
            <summary>
            Randomply picks and loads an item from the given list items.
            </summary>
            <param name="itemFiles">
            The list of item files.
            </param>
            <returns>
            The loaded Item.
            </returns>
        </member>
        <member name="M:Zelda.Items.UseEffects.SpawnRandomItemEffect.GetRandomItemName(System.String[])">
            <summary>
            Randomly extract the name of an Item from the given list of item files.
            </summary>
            <param name="itemFiles">
            The list of item files.
            </param>
            <returns>
            A random Item name.
            </returns>
        </member>
        <member name="M:Zelda.Items.UseEffects.SpawnRandomItemEffect.Verify(Zelda.Items.Item)">
            <summary>
            Verifies whether the given Item can be randomly dropped.
            </summary>
            <param name="item">
            The item to verify.
            </param>
            <returns>
            Whether the item is allowed to be randomly dropped.
            </returns>
        </member>
        <member name="M:Zelda.Items.UseEffects.SpawnRandomItemEffect.VerifyType(Zelda.Items.Item)">
            <summary>
            Verifies the ItemType of the given Item.
            </summary>
            <param name="item">
            The item to verify.
            </param>
            <returns>
            Whether the item is allowed to be randomly dropped, based its the ItemType.
            </returns>
        </member>
        <member name="M:Zelda.Items.UseEffects.SpawnRandomItemEffect.VerifyQuality(Zelda.Items.Item)">
            <summary>
            Verifies the ItemQuality of the given Item.
            </summary>
            <param name="item">
            The item to verify.
            </param>
            <returns>
            Whether the item is allowed to be randomly dropped, based its the ItemQuality.
            </returns>
        </member>
        <member name="M:Zelda.Items.UseEffects.SpawnRandomItemEffect.VerifyLevel(Zelda.Items.Item)">
            <summary>
            Verifies the level of the given Item.
            </summary>
            <param name="item">
            The item to verify.
            </param>
            <returns>
            Whether the item is allowed to be randomly dropped, based its the level.
            </returns>
        </member>
        <member name="M:Zelda.Items.UseEffects.SpawnRandomItemEffect.CreateAndSpawnItem(Zelda.Items.Item,Zelda.Entities.PlayerEntity)">
            <summary>
            Creates and spawns the given Item.
            </summary>
            <param name="item">
            The Item to create and then spawn.
            </param>
            <param name="user">
            The PlayerEntity that used this ItemUseEffect.
            </param>
        </member>
        <member name="M:Zelda.Items.UseEffects.SpawnRandomItemEffect.SpawnItem(Zelda.Items.ItemInstance,Zelda.Entities.PlayerEntity)">
            <summary>
            Spawns the given ItemInstance.
            </summary>
            <param name="itemInstance">
            The ItemInstance to spawn.
            </param>
            <param name="user">
            The PlayerEntity that used this ItemUseEffect.
            </param>
        </member>
        <member name="M:Zelda.Items.UseEffects.SpawnRandomItemEffect.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Items.UseEffects.SpawnRandomItemEffect.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Items.UseEffects.SpawnRandomItemEffect.rand">
            <summary>
            A random number generator.
            </summary>
        </member>
        <member name="F:Zelda.Items.UseEffects.SpawnRandomItemEffect.itemManager">
            <summary>
            The Zelda ItemManager that is used to load the spawned item.
            </summary>
        </member>
        <member name="T:Zelda.Items.UseEffects.TeleportationEffect">
            <summary>
            Represents an ItemUseEffect that when used teleports
            the player to some location.
            </summary>
            <seealso cref="T:Zelda.Events.TeleportPlayerEvent"/>
        </member>
        <member name="P:Zelda.Items.UseEffects.TeleportationEffect.TeleportEvent">
            <summary>
            Gets the <see cref="T:Zelda.Events.TeleportPlayerEvent"/> that is executed
            when this TeleportationEffect is used.
            </summary>
        </member>
        <member name="P:Zelda.Items.UseEffects.TeleportationEffect.AllowedRequirement">
            <summary>
            Gets or sets the <see cref="T:Zelda.Core.Requirements.IRequirement"/> that
            is additionaly used to decide whether this TeleportationEffect
            can currently be used.
            </summary>
        </member>
        <member name="P:Zelda.Items.UseEffects.TeleportationEffect.HideTeleporationLocation">
            <summary>
            Gets or sets a value indicating whether the description of this TeleportationEffect
            should hide the location it is teleporting to.
            </summary>
        </member>
        <member name="M:Zelda.Items.UseEffects.TeleportationEffect.GetDescription(Zelda.Status.Statable)">
            <summary>
            Gets a short localised description of this <see cref="T:Zelda.Items.ItemUseEffect"/>.
            </summary>
            <param name="statable">
            The statable component of the entity that wants to receive the description about this ItemUseEffect.
            </param>
            <returns>
            The localized description string.
            </returns>
        </member>
        <member name="M:Zelda.Items.UseEffects.TeleportationEffect.GetLocalizationDescription">
            <summary>
            Gets the localized description of the location this TeleportationEffect
            is teleporting to.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Zelda.Items.UseEffects.TeleportationEffect.ItemBudgetUsed">
            <summary>
            Gets a value that represents how much "Item Points" this <see cref="T:Zelda.Items.ItemUseEffect"/> uses.
            </summary>
        </member>
        <member name="M:Zelda.Items.UseEffects.TeleportationEffect.Use(Zelda.Entities.PlayerEntity)">
            <summary>
            Uses this <see cref="T:Zelda.Items.ItemUseEffect"/>.
            </summary>
            <param name="user">
            The PlayerEntity that wishes to use this ItemUseEffect.
            </param>
            <returns>
            true if this ItemUseEffect has been used;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Items.UseEffects.TeleportationEffect.IsFulfilledBy(Zelda.Entities.PlayerEntity)">
            <summary>
            Returns a value that indicates whether the given PlayerEntity
            can use this <see cref="T:Zelda.Items.ItemUseEffect"/> at this moment.
            </summary>
            <param name="user">The PlayerEntity that wishes to use this ItemUseEffect.</param>
            <returns>
            true if this ItemUseEffect can been used;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Items.UseEffects.TeleportationEffect.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Items.UseEffects.TeleportationEffect.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Items.UseEffects.TeleportationEffect.teleportEvent">
            <summary>
            The event that is executed when this TeleportationEffect is used.
            </summary>
        </member>
        <member name="T:Zelda.Items.UseEffects.TemporaryStatusEffect">
            <summary>
            Defines an <see cref="T:Zelda.Items.ItemUseEffect"/> that temporarily enables
            one or multiple StatusEffects on the user.
            </summary>
        </member>
        <member name="P:Zelda.Items.UseEffects.TemporaryStatusEffect.Aura">
            <summary>
            Gets the <see cref="T:Zelda.Status.TimedAura"/> that gets attached to the player
            when he uses this ItemUseEffect.
            </summary>
        </member>
        <member name="P:Zelda.Items.UseEffects.TemporaryStatusEffect.ItemBudgetUsed">
            <summary>
            Gets a value that represents how much "Item Points" this <see cref="T:Zelda.Items.ItemUseEffect"/> uses.
            </summary>
        </member>
        <member name="M:Zelda.Items.UseEffects.TemporaryStatusEffect.GetDescription(Zelda.Status.Statable)">
            <summary>
            Gets a short localised description of this <see cref="T:Zelda.Items.ItemUseEffect"/>.
            </summary>
            <param name="statable">
            The statable component of the entity that wants to receive the description about this ItemUseEffect.
            </param>
            <returns>
            The localized description string.
            </returns>
        </member>
        <member name="M:Zelda.Items.UseEffects.TemporaryStatusEffect.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Items.UseEffects.TemporaryStatusEffect"/> class.
            </summary>
        </member>
        <member name="M:Zelda.Items.UseEffects.TemporaryStatusEffect.Use(Zelda.Entities.PlayerEntity)">
            <summary>
            Uses this TempStatusEffect.
            </summary>
            <param name="user">
            The PlayerEntity that wishes to use this ItemUseEffect.
            </param>
            <returns>
            true if this ItemUseEffect has been used;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Items.UseEffects.TemporaryStatusEffect.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Items.UseEffects.TemporaryStatusEffect.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Items.UseEffects.TemporaryStatusEffect.aura">
            <summary>
            The TimedAura that holds the ArmorEffect that gets applied by this TempStatusEffect.
            </summary>
        </member>
        <member name="T:Zelda.Items.Weapon">
            <summary>
            A <see cref="T:Zelda.Items.Weapon"/> is a special kind of <see cref="T:Zelda.Items.Equipment"/>
            that provides extra Damage stats.
            This class can't be inherited.
            </summary>
        </member>
        <member name="P:Zelda.Items.Weapon.ItemType">
            <summary>
            Gets the <see cref="P:Zelda.Items.Weapon.ItemType"/> this <see cref="T:Zelda.Items.Weapon"/> represents.
            </summary>
        </member>
        <member name="P:Zelda.Items.Weapon.WeaponType">
            <summary>
            Gets or sets the type of this <see cref="T:Zelda.Items.Weapon"/>.
            </summary>
        </member>
        <member name="P:Zelda.Items.Weapon.AttackType">
            <summary>
            Gets the attack type of this <see cref="T:Zelda.Items.Weapon"/>.
            </summary>
        </member>
        <member name="P:Zelda.Items.Weapon.AttackSpeed">
            <summary>
            Gets or sets the attack speed (or better said delay) of this <see cref="T:Zelda.Items.Weapon"/>.
            </summary>
            <value>The default value is 2.5f.</value>
        </member>
        <member name="P:Zelda.Items.Weapon.DamageMinimum">
            <summary>
            Gets or sets the minimum damage of this <see cref="T:Zelda.Items.Weapon"/>.
            </summary>
        </member>
        <member name="P:Zelda.Items.Weapon.DamageMaximum">
            <summary>
            Gets or sets the maximum damage of this <see cref="T:Zelda.Items.Weapon"/>.
            </summary>
        </member>
        <member name="P:Zelda.Items.Weapon.AverageDamage">
            <summary>
            Gets the average damage this <see cref="T:Zelda.Items.Weapon"/> provides.
            </summary>
        </member>
        <member name="P:Zelda.Items.Weapon.DamagePerSecond">
            <summary>
            Gets the average damage per second this <see cref="T:Zelda.Items.Weapon"/> provides.
            </summary>
        </member>
        <member name="M:Zelda.Items.Weapon.ModifyPowerBy(System.Single)">
            <summary>
            Modifies the power of this Weapon by the given factor.
            </summary>
            <param name="factor">
            The factor to modify the item by.
            </param>
            <returns>
            true if modifications were allowed; -or- otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Items.Weapon.CreateInstance(System.Single)">
            <summary>
            Creates a new instance of this <see cref="T:Zelda.Items.Weapon"/>.
            </summary>
            <param name="powerFactor">
            The factor by which the power of the new ItemInstance varies compared to this base Weapon.
            </param>
            <returns>A new <see cref="T:Zelda.Items.WeaponInstance"/>.</returns>
        </member>
        <member name="M:Zelda.Items.Weapon.Clone">
            <summary>
            Creates a clone of this <see cref="T:Zelda.Items.Weapon"/>.
            </summary>
            <returns>
            The cloned item.
            </returns>
        </member>
        <member name="M:Zelda.Items.Weapon.SetupClone(Zelda.Items.Weapon)">
            <summary>
            Setups the given Weapon to be a clone of this Weapon.
            </summary>
            <param name="clone">
            The Weapon to setup as a clone of this Weapon.
            </param>
        </member>
        <member name="M:Zelda.Items.Weapon.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Items.Weapon.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Items.Weapon.weaponType">
            <summary>
            The storage field for the <see cref="P:Zelda.Items.Weapon.WeaponType"/> field.
            </summary>
        </member>
        <member name="F:Zelda.Items.Weapon.attackSpeed">
            <summary>
            The storage field for the <see cref="P:Zelda.Items.Weapon.AttackSpeed"/> field.
            </summary>
        </member>
        <member name="T:Zelda.Items.WeaponAttackType">
            <summary>
            Enumerates the differen attack-types of <see cref="T:Zelda.Items.Weapon"/>s.
            </summary>
        </member>
        <member name="F:Zelda.Items.WeaponAttackType.None">
            <summary>
            Indicates that no type has been selected.
            </summary>
        </member>
        <member name="F:Zelda.Items.WeaponAttackType.Melee">
            <summary>
            A melee weapon.
            </summary>
        </member>
        <member name="F:Zelda.Items.WeaponAttackType.Ranged">
            <summary>
            A ranged weapon.
            </summary>
        </member>
        <member name="T:Zelda.Items.WeaponInstance">
            <summary>
            Represents an <see cref="T:Zelda.Items.ItemInstance"/> that stores <see cref="P:Zelda.Items.WeaponInstance.Weapon"/>s.
            </summary>
        </member>
        <member name="P:Zelda.Items.WeaponInstance.Weapon">
            <summary>
            Gets the <see cref="P:Zelda.Items.WeaponInstance.Weapon"/> that is encapsulated by this <see cref="T:Zelda.Items.WeaponInstance"/>.
            </summary>
        </member>
        <member name="M:Zelda.Items.WeaponInstance.#ctor(Zelda.Items.Weapon,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Items.WeaponInstance"/> class.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="baseWeapon"/> is null.
            </exception>
            <param name="baseWeapon">
            The underlying <see cref="P:Zelda.Items.WeaponInstance.Weapon"/>.
            </param>
            <param name="powerFactor">
            The factor by which the power of this EquipmentInstance varies compared to the base Item.
            </param>
        </member>
        <member name="M:Zelda.Items.WeaponInstance.OnEquip(Zelda.Status.ExtendedStatable)">
            <summary>
            Called when this WeaponInstance gets equiped.
            </summary>
            <param name="statable">
            The ExtendedStatable that is about to equip this <see cref="T:Zelda.Items.WeaponInstance"/>.
            </param>
            <exception cref="T:System.InvalidOperationException">
            If this <see cref="T:Zelda.Items.WeaponInstance"/> has already been equipped.
            </exception>
        </member>
        <member name="M:Zelda.Items.WeaponInstance.OnUnequip">
            <summary>
            Called when this <see cref="T:Zelda.Items.WeaponInstance"/> gets unquiped.
            </summary>
        </member>
        <member name="M:Zelda.Items.WeaponInstance.RefreshAttackSpeedOfWearer">
            <summary>
            Called when this WeaponInstance has been equiped or is going to be unequipped.
            </summary>
        </member>
        <member name="M:Zelda.Items.WeaponInstance.OnUnequipNoCheck">
            <summary>
            Called when this <see cref="T:Zelda.Items.WeaponInstance"/> gets unquiped.
            </summary>
        </member>
        <member name="M:Zelda.Items.WeaponInstance.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Items.WeaponInstance.ReadWeapon(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to create an <see cref="T:Zelda.Items.WeaponInstance"/>.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
            <returns>
            A new WeaponInstance object.
            </returns>
        </member>
        <member name="T:Zelda.Items.WeaponType">
            <summary>
            Enumerates the different types of weapons.
            </summary>
        </member>
        <member name="F:Zelda.Items.WeaponType.None">
            <summary>
            Indicates that no specific type has been set.
            </summary>
        </member>
        <member name="F:Zelda.Items.WeaponType.OneHandedAxe">
            <summary>
            An one-handed axe. The favourite weapon of Berserkers.
            </summary>
        </member>
        <member name="F:Zelda.Items.WeaponType.OneHandedMace">
            <summary>
            An one-handed mace. The favourite weapon of Monks.
            </summary>
        </member>
        <member name="F:Zelda.Items.WeaponType.OneHandedSword">
            <summary>
            An one-handed sword. The favourite weapon of Knights.
            </summary>
        </member>
        <member name="F:Zelda.Items.WeaponType.TwoHandedAxe">
            <summary> 
            A two-handed axe. The favourite weapon of Berserkers.
            </summary>
        </member>
        <member name="F:Zelda.Items.WeaponType.TwoHandedMace">
            <summary> 
            A two-handed mace. The favourite weapon of Paladins.
            </summary>
        </member>
        <member name="F:Zelda.Items.WeaponType.TwoHandedSword">
            <summary>
            A two-handed sword. The favourite weapon of Knights.
            </summary>
        </member>
        <member name="F:Zelda.Items.WeaponType.Dagger">
            <summary>
            A dagger. The favourite weapon of Assasins and Hunters.
            </summary>
        </member>
        <member name="F:Zelda.Items.WeaponType.Staff">
            <summary>
            A staff is hold with two hands. The favourite weapon of Mages and Wizards.
            </summary>
        </member>
        <member name="F:Zelda.Items.WeaponType.Rod">
            <summary>
            A rod is hold with one hand. The favourite weapon of Priests. 
            </summary>
        </member>
        <member name="F:Zelda.Items.WeaponType.Bow">
            <summary>
            A bow. This is a ranged weapon. The favourite weapon of Archers/Hunters.
            </summary>
        </member>
        <member name="F:Zelda.Items.WeaponType.Crossbow">
            <summary>
            A crossbow. This is a ranged weapon. The favourite ranged weapon of Knights.
            </summary>
        </member>
        <member name="T:Zelda.Items.WeaponTypeGroup">
            <summary>
            Enumerates the different groups a weapon of a specific
            <see cref="T:Zelda.Items.WeaponType"/> can be grouped into.
            </summary>
        </member>
        <member name="F:Zelda.Items.WeaponTypeGroup.OneHanded">
            <summary>
            One-Handed Weapons allow the player to block with a shield;
            includes:
            <para>
                <see cref="F:Zelda.Items.WeaponType.OneHandedAxe"/>
                <see cref="F:Zelda.Items.WeaponType.OneHandedMace"/>
                <see cref="F:Zelda.Items.WeaponType.OneHandedSword"/>
                <see cref="F:Zelda.Items.WeaponType.Dagger"/>
            </para>
            </summary>
        </member>
        <member name="F:Zelda.Items.WeaponTypeGroup.TwoHanded">
            <summary>
            Two-Handed Weapons don't allow the player to block with a shield;
            includes:
            <para>
                <see cref="F:Zelda.Items.WeaponType.TwoHandedAxe"/>
                <see cref="F:Zelda.Items.WeaponType.TwoHandedMace"/>
                <see cref="F:Zelda.Items.WeaponType.TwoHandedSword"/>
            </para>
            </summary>
        </member>
        <member name="F:Zelda.Items.WeaponTypeGroup.Ranged">
            <summary>
            Ranged Weapon allow the player to fire projectiles.
            <para>
                <see cref="F:Zelda.Items.WeaponType.Bow"/>
                <see cref="F:Zelda.Items.WeaponType.Crossbow"/>
            </para>
            </summary>
        </member>
        <member name="T:Zelda.KeySettings">
            <summary> 
            Stores the current key settings of the game.
            This class can't be inherited.
            </summary>
            <remarks>
            There exists one global KeySettings instance.
            But also KeySettings can be saved per Profile.
            </remarks>
        </member>
        <member name="P:Zelda.KeySettings.MoveLeft1">
            <summary>
            Gets or sets the first key that moves the player left.
            </summary>
        </member>
        <member name="P:Zelda.KeySettings.MoveLeft2">
            <summary>
            Gets or sets the second key that moves the player left.
            </summary>
        </member>
        <member name="P:Zelda.KeySettings.MoveRight1">
            <summary>
            Gets or sets the first key that moves the player right.
            </summary>
        </member>
        <member name="P:Zelda.KeySettings.MoveRight2">
            <summary>
            Gets or sets the second key that moves the player right.
            </summary>
        </member>
        <member name="P:Zelda.KeySettings.MoveUp1">
            <summary>
            Gets or sets the first key that moves the player up.
            </summary>
        </member>
        <member name="P:Zelda.KeySettings.MoveUp2">
            <summary>
            Gets or sets the second key that moves the player up.
            </summary>
        </member>
        <member name="P:Zelda.KeySettings.MoveDown1">
            <summary>
            Gets or sets the first key that moves the player down.
            </summary>
        </member>
        <member name="P:Zelda.KeySettings.MoveDown2">
            <summary>
            Gets or sets the second key that moves the player down.
            </summary>
        </member>
        <member name="P:Zelda.KeySettings.UsePickup">
            <summary>
            Gets or sets the key that pick ups an item, talks to a NPC or uses anything else.
            </summary>
        </member>
        <member name="P:Zelda.KeySettings.UseHealingPotion">
            <summary>
            Gets or sets the key that uses the currently 'best' available healing potion.
            </summary>
        </member>
        <member name="P:Zelda.KeySettings.UseManaPotion">
            <summary>
            Gets or sets the key that uses the currently 'best' available mana potion.
            </summary>
        </member>
        <member name="P:Zelda.KeySettings.ToggleLatern">
            <summary>
            Gets or sets Gets or sets the key with which the player can toggle Gets or sets Gets or sets the latern.
            </summary>
        </member>
        <member name="P:Zelda.KeySettings.ToggleFairy">
            <summary>
            Gets or sets Gets or sets the key with which the player can toggle Gets or sets Gets or sets the latern.
            </summary>
        </member>
        <member name="P:Zelda.KeySettings.CharacterWindow">
            <summary>
            Gets or sets the key that open the character window.
            </summary>
        </member>
        <member name="P:Zelda.KeySettings.TalentWindow">
            <summary>
            Gets or sets the key that opens the talent window.
            </summary>
        </member>
        <member name="P:Zelda.KeySettings.EquipmentWindow">
            <summary>
            Gets or sets the key that open the equipment window.
            </summary>
        </member>
        <member name="P:Zelda.KeySettings.InventoryWindow">
            <summary>
            Gets or sets the key that open the inventory window.
            </summary>
        </member>
        <member name="P:Zelda.KeySettings.CraftingWindow">
            <summary>
            Gets or sets the key that opens the crafting bottle window.
            </summary>
        </member>
        <member name="P:Zelda.KeySettings.QuestLogWindow">
            <summary>
            Gets or sets the key that open the quest-log window.
            </summary>
        </member>
        <member name="P:Zelda.KeySettings.MiniMapWindow">
            <summary>
            Gets or sets the key that open the mini map window.
            </summary>
        </member>
        <member name="P:Zelda.KeySettings.OcarinaWindow">
            <summary>
            Gets or sets the key that open ocarina window.
            </summary>
        </member>
        <member name="P:Zelda.KeySettings.Action1">
            <summary>
            Gets or sets the key that triggers the quick action in the first slot.
            </summary>
        </member>
        <member name="P:Zelda.KeySettings.Action2">
            <summary>
            Gets or sets the key that triggers the quick action in the second slot.
            </summary>
        </member>
        <member name="P:Zelda.KeySettings.Action3">
            <summary>
            Gets or sets the key that triggers the quick action in the third slot.
            </summary>
        </member>
        <member name="P:Zelda.KeySettings.Action4">
            <summary>
            Gets or sets the key that triggers the quick action in the fourth slot.
            </summary>
        </member>
        <member name="P:Zelda.KeySettings.Action5">
            <summary>
            Gets or sets the key that triggers the quick action in the fifth slot.
            </summary>
        </member>
        <member name="P:Zelda.KeySettings.Action6">
            <summary>
            Gets or sets the key that triggers the quick action in the sixth slot.
            </summary>
        </member>
        <member name="P:Zelda.KeySettings.Action7">
            <summary>
            Gets or sets the key that triggers the quick action in the seventh slot.
            </summary>
        </member>
        <member name="P:Zelda.KeySettings.Action8">
            <summary>
            Gets or sets the key that triggers the quick action in the eight slot.
            </summary>
        </member>
        <member name="P:Zelda.KeySettings.Action9">
            <summary>
            Gets or sets the key that triggers the quick action in the ninth slot.
            </summary>
        </member>
        <member name="P:Zelda.KeySettings.Action10">
            <summary>
            Gets or sets the key that triggers the quick action in the tenth slot.
            </summary>
        </member>
        <member name="P:Zelda.KeySettings.Action11">
            <summary>
            Gets or sets the key that triggers the quick action in the eleventh slot.
            </summary>
        </member>
        <member name="P:Zelda.KeySettings.Action12">
            <summary>
            Gets or sets the key that triggers the quick action in the twelfth slot.
            </summary>
        </member>
        <member name="P:Zelda.KeySettings.Action13">
            <summary>
            Gets or sets the key that triggers the quick action in the 13th slot.
            </summary>
        </member>
        <member name="P:Zelda.KeySettings.Action14">
            <summary>
            Gets or sets the key that triggers the quick action in the 14th slot.
            </summary>
        </member>
        <member name="P:Zelda.KeySettings.QuickSave">
            <summary>
            Gets or sets the key that saves the game.
            </summary>
        </member>
        <member name="P:Zelda.KeySettings.ToggleUserInterface">
            <summary>
            Gets or sets the key that toggles the user-interface visibility.
            </summary>
        </member>
        <member name="P:Zelda.KeySettings.ToggleDpsMeter">
            <summary>
            Gets or sets the key that toggles the damage-per-second meter visibility.
            </summary>
        </member>
        <member name="P:Zelda.KeySettings.TakeScreenshot">
            <summary>
            Gets or sets the key that takes a screenshot.
            </summary>
        </member>
        <member name="P:Zelda.KeySettings.ConfigFileName">
            <summary>
            Gets the full file name of the configuration file.
            </summary>
        </member>
        <member name="M:Zelda.KeySettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.KeySettings"/> class.
            </summary>
        </member>
        <member name="M:Zelda.KeySettings.CreateConfigStore">
            <summary>
            Creates a bew <see cref="T:Atom.Configuration.IConfigStore"/> in which the KeySettings are stored.
            </summary>
            <returns>
            The newly created IConfigStore.
            </returns>
        </member>
        <member name="T:Zelda.Latern">
            <summary>
            Represents a latern that emits light.
            </summary>
        </member>
        <member name="F:Zelda.Latern.DefaultLightScale">
            <summary>
            The default scaling factor of the Light emitted by this Latern.
            </summary>
        </member>
        <member name="P:Zelda.Latern.IsToggled">
            <summary>
            Gets or sets a value indicating whether this Latern
            is currently toggled on and as such visible.
            </summary>
        </member>
        <member name="M:Zelda.Latern.#ctor(Zelda.Entities.PlayerEntity)">
            <summary>
            Initializes a new instance of the Latern class.
            </summary>
            <param name="player">
            The PlayerEntity that owns the new Latern.
            </param>
        </member>
        <member name="M:Zelda.Latern.LoadContent(Zelda.IZeldaServiceProvider)">
            <summary>
            Loads the content required by this PlayerLatern.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Latern.CreateLight">
            <summary>
            Creates the Light entity shown when the 
            player has enabled the latern.
            </summary>
            <returns>
            A newly created Light instance.
            </returns>
        </member>
        <member name="M:Zelda.Latern.CreateManaDrainAura(Zelda.Entities.PlayerEntity)">
            <summary>
            Creates the Aura that is enabled when the 
            specified PlayerEntity has this PlayerLatern toggled on.
            </summary>
            <param name="player">
            The PlayerEntity whose mana is drained.
            </param>
            <returns>
            A newly created Aura.
            </returns>
        </member>
        <member name="M:Zelda.Latern.OnPlayerAddedToScene(System.Object,Zelda.ZeldaScene)">
            <summary>
            Gets called when the PlayerEntity that owns this Latern has
            been added to a ZeldaScene.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
            <param name="scene">
            The related ZeldaScene.
            </param>
        </member>
        <member name="M:Zelda.Latern.OnPlayerRemovedFromScene(System.Object,Zelda.ZeldaScene)">
            <summary>
            Gets called when the PlayerEntity that owns this Latern has
            been removed from a ZeldaScene.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
            <param name="scene">
            The related ZeldaScene.
            </param>
        </member>
        <member name="M:Zelda.Latern.Toggle">
            <summary>
            Toggles this Lantern on/off.
            </summary>
        </member>
        <member name="M:Zelda.Latern.Refresh">
            <summary>
            Refreshes the size of the Light emitted by this Latern.
            </summary>
            <seealso cref="T:Zelda.Status.LightRadiusEffect"/>
        </member>
        <member name="F:Zelda.Latern.light">
            <summary>
            The <see cref="T:Zelda.Entities.Light"/> entity that is used to visualize the light
            this Latern emits.
            </summary>
        </member>
        <member name="F:Zelda.Latern.manaDrainAura">
            <summary>
            The aura that is applied when this Latern is enabled.
            </summary>
        </member>
        <member name="F:Zelda.Latern.player">
            <summary>
            Identifies the <see cref="T:Zelda.Entities.PlayerEntity"/> that owns this latern.
            </summary>
        </member>
        <member name="T:Zelda.LocalizableText">
            <summary>
            Represents a text that is localized that gets localized
            using the <see cref="P:Zelda.LocalizableTextResources.ResourceManager"/>.
            This class can't be inherited.
            </summary>
        </member>
        <member name="P:Zelda.LocalizableText.Id">
            <summary>
            Gets or sets the resource id that is used to receive the <see cref="P:Zelda.LocalizableText.LocalizedText"/>.
            </summary>
        </member>
        <member name="P:Zelda.LocalizableText.LocalizedText">
            <summary>
            Gets the localuzed text stored by this <see cref="T:Zelda.LocalizableText"/>.
            </summary>
        </member>
        <member name="F:Zelda.LocalizableText.id">
            <summary>
            Represents the storage field of the <see cref="P:Zelda.LocalizableText.Id"/> property.
            </summary>
        </member>
        <member name="T:Zelda.LocalizableTextResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Zelda.LocalizableTextResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Zelda.LocalizableTextResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Zelda.LocalizableTextResources.ItemOnUse_NewQuest">
            <summary>
              Looks up a localized string similar to On Use: New quest!.
            </summary>
        </member>
        <member name="P:Zelda.LocalizableTextResources.ItemOnUse_NewQuest_Letter_BreakSealAndRead">
            <summary>
              Looks up a localized string similar to On Use: Break the seal and read the letter..
            </summary>
        </member>
        <member name="P:Zelda.LocalizableTextResources.KeyBlock_NotUnlocked_Home_Fireplace">
            <summary>
              Looks up a localized string similar to As you inspect your fireplace you notice a strange indentation in the form of a locket that encloses three triangles. Where does it come from? You don&apos;t have anything that fits....
            </summary>
        </member>
        <member name="P:Zelda.LocalizableTextResources.KeyBlock_NotUnlocked_MissingKey_Special">
            <summary>
              Looks up a localized string similar to Blocked... hmpf. It seems like you need a special key to unlock it. .
            </summary>
        </member>
        <member name="P:Zelda.LocalizableTextResources.KeyBlock_NotUnlocked_NoKey_ShimmeringCrystal">
            <summary>
              Looks up a localized string similar to There seems to be an indentation in the stone. What could fit into it..?.
            </summary>
        </member>
        <member name="P:Zelda.LocalizableTextResources.KeyBlock_NotUnlocked_NoKey_SmallUniversalWind">
            <summary>
              Looks up a localized string similar to The key block speaks with a dark voice: &quot;GIVE ME A SMALL WINDY KEY, AND YOU SHALL BE ALLOWED TO PASS BY.&quot;.
            </summary>
        </member>
        <member name="P:Zelda.LocalizableTextResources.MN_Tingle">
            <summary>
              Looks up a localized string similar to Merchant Tingle.
            </summary>
        </member>
        <member name="P:Zelda.LocalizableTextResources.MN_TravelingSalesman">
            <summary>
              Looks up a localized string similar to Traveling Salesman.
            </summary>
        </member>
        <member name="P:Zelda.LocalizableTextResources.NewQuest_CantEverAccept">
            <summary>
              Looks up a localized string similar to You get this feeling that you already know all that is there know about this. Meh....
            </summary>
        </member>
        <member name="P:Zelda.LocalizableTextResources.RouteOfDin_WindSwordBlock_NotUnlocked">
            <summary>
              Looks up a localized string similar to The inscription on the block says: &apos;Only a true Hero may open this lock.&apos; As you try to push it you see that the key-hole is S-shaped..
            </summary>
        </member>
        <member name="P:Zelda.LocalizableTextResources.SignPost_Empty">
            <summary>
              Looks up a localized string similar to ... You stare at the sign post and see absolutely nothing interesting. ... ... ... ... ....
            </summary>
        </member>
        <member name="P:Zelda.LocalizableTextResources.SignPost_TiaWoodsDirections">
            <summary>
              Looks up a localized string similar to &gt; &gt; Hyrule Rivers 
            ^ &gt; Minor Shrine 
            ^ &lt; Route of Din.
            </summary>
        </member>
        <member name="P:Zelda.LocalizableTextResources.Talk_Crow_Start">
            <summary>
              Looks up a localized string similar to Awk. Kra. Kraaa. Kraaaaaaa. Kraakra. [Let me. I want to watch the floating bones.] Kraaaa. Krah! [Go away!] Kra.. krah.. Kraka.. Kraa? Kra. [Hmm.. does it understand what I say? No.. never. Krah.].
            </summary>
        </member>
        <member name="P:Zelda.LocalizableTextResources.TalkFriendly_TownFolk_Milly_1">
            <summary>
              Looks up a localized string similar to You&apos;ve been nice. But my brother is still cuter!.
            </summary>
        </member>
        <member name="P:Zelda.LocalizableTextResources.TalkFriendly_TownFolk_Milly_2">
            <summary>
              Looks up a localized string similar to La la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la ... Do you like me singing?.
            </summary>
        </member>
        <member name="P:Zelda.LocalizableTextResources.TalkFriendly_TownFolk_Milly_3">
            <summary>
              Looks up a localized string similar to Aren&apos;t I the most absolutely fabulous person you have ever seen? -blinks at you-.
            </summary>
        </member>
        <member name="P:Zelda.LocalizableTextResources.TalkHonored_GhostBuster_1">
            <summary>
              Looks up a localized string similar to I&apos;m the best ghost hunter of not just Hyrule Rivers and all Hyrule, BUT also the complete world !!! And no, none will ever surpass me..
            </summary>
        </member>
        <member name="P:Zelda.LocalizableTextResources.TalkHonored_GhostBuster_2">
            <summary>
              Looks up a localized string similar to Ghosts here? Call me and I&apos;ll send you to do the work. Hehehe ....
            </summary>
        </member>
        <member name="P:Zelda.LocalizableTextResources.TalkHonored_GhostBuster_3">
            <summary>
              Looks up a localized string similar to When I hunt ghost I do it in a slick way. See? Ssssslick. Sssssliiickkk. Study my ways and you may be like me one day ~!!.
            </summary>
        </member>
        <member name="P:Zelda.LocalizableTextResources.TalkHonored_TownFolk_Milly_1">
            <summary>
              Looks up a localized string similar to I must really say that ... ... you&apos;re just as ... erm ... cute as my brother! -blinks-.
            </summary>
        </member>
        <member name="P:Zelda.LocalizableTextResources.TalkHonored_TownFolk_Milly_2">
            <summary>
              Looks up a localized string similar to Some day people will sing their own songs just about you!.
            </summary>
        </member>
        <member name="P:Zelda.LocalizableTextResources.TalkHonored_TownFolk_Milly_3">
            <summary>
              Looks up a localized string similar to Hey! How was your day? Do you want to play together with me?.
            </summary>
        </member>
        <member name="P:Zelda.LocalizableTextResources.TalkNeutral_GhostBuster_1">
            <summary>
              Looks up a localized string similar to I&apos;m the best ghost hunter of not just Hyrule Rivers and all Hyrule, BUT also the complete world !!!.
            </summary>
        </member>
        <member name="P:Zelda.LocalizableTextResources.TalkNeutral_GhostBuster_2">
            <summary>
              Looks up a localized string similar to Ghosts here? Call me and I&apos;ll fix the problem. Hehehe ....
            </summary>
        </member>
        <member name="P:Zelda.LocalizableTextResources.TalkNeutral_GhostBuster_3">
            <summary>
              Looks up a localized string similar to When I hunt ghost I do it in a slick way. See? Ssssslick. Sssssliickkk..
            </summary>
        </member>
        <member name="P:Zelda.LocalizableTextResources.TalkNeutral_Goron_Mindo_1">
            <summary>
              Looks up a localized string similar to Did you know that the mad Gorons also somtimes carry Black Goron Keys? I wonder why.. Where are all these blocks that would fit those keys?.
            </summary>
        </member>
        <member name="P:Zelda.LocalizableTextResources.TalkNeutral_Goron_Mindo_2">
            <summary>
              Looks up a localized string similar to It&apos;s terrible! Some of the Gorons have gone mad! What do we do?.
            </summary>
        </member>
        <member name="P:Zelda.LocalizableTextResources.TalkNeutral_Maja_1">
            <summary>
              Looks up a localized string similar to Seiri - Throw away all rubbish and unrelated materials in the workplace..
            </summary>
        </member>
        <member name="P:Zelda.LocalizableTextResources.TalkNeutral_Maja_2">
            <summary>
              Looks up a localized string similar to Seiton - Set everything in proper place for quick retrieval and storage..
            </summary>
        </member>
        <member name="P:Zelda.LocalizableTextResources.TalkNeutral_Maja_3">
            <summary>
              Looks up a localized string similar to Seiso - Clean the workplace; everyone should be a janitor..
            </summary>
        </member>
        <member name="P:Zelda.LocalizableTextResources.TalkNeutral_Maja_4">
            <summary>
              Looks up a localized string similar to Seiketsu - Standardize the way of maintaining cleanliness..
            </summary>
        </member>
        <member name="P:Zelda.LocalizableTextResources.TalkNeutral_Maja_5">
            <summary>
              Looks up a localized string similar to Shitsuke - Practice the 5S daily, make it a way of life; this also means &apos;commitment&apos;..
            </summary>
        </member>
        <member name="P:Zelda.LocalizableTextResources.TalkNeutral_Maja_6">
            <summary>
              Looks up a localized string similar to Seiri, Seiton, Seiso, Seiketsu and Shitsuke. These are my ways..
            </summary>
        </member>
        <member name="P:Zelda.LocalizableTextResources.TalkNeutral_TownFolk_BoyBilly_1">
            <summary>
              Looks up a localized string similar to I&apos;m Billy the Hilly, oh soooo ... erm ... Who are you again?.
            </summary>
        </member>
        <member name="P:Zelda.LocalizableTextResources.TalkNeutral_TownFolk_BoyBilly_2">
            <summary>
              Looks up a localized string similar to Billy is my name. Honor me and I shall allow you to be in my sight!.
            </summary>
        </member>
        <member name="P:Zelda.LocalizableTextResources.TalkNeutral_TownFolk_Milly_1">
            <summary>
              Looks up a localized string similar to My brother is soooo cute compared to you..
            </summary>
        </member>
        <member name="P:Zelda.LocalizableTextResources.TalkNeutral_TownFolk_Milly_2">
            <summary>
              Looks up a localized string similar to La la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la ... WHY ARE YOU STILL HERE?.
            </summary>
        </member>
        <member name="P:Zelda.LocalizableTextResources.TalkNeutral_TownFolk_Milly_3">
            <summary>
              Looks up a localized string similar to Aren&apos;t I the most absolutely fabulous person you have ever seen?.
            </summary>
        </member>
        <member name="P:Zelda.LocalizableTextResources.TalkNeutral_TownFolk_OldMan_1">
            <summary>
              Looks up a localized string similar to Isn&apos;t the weather just perfect lately?.
            </summary>
        </member>
        <member name="P:Zelda.LocalizableTextResources.TalkNeutral_TownFolk_OldWoman_1">
            <summary>
              Looks up a localized string similar to Oh oh oh! Have you seen my children lately?.
            </summary>
        </member>
        <member name="P:Zelda.LocalizableTextResources.TalkNeutral_TownFolk_OldWoman_2">
            <summary>
              Looks up a localized string similar to The sun has gone from the shining skies, Bye, baby, bye, The dandelions have closed their eyes, Bye, baby, bye. The stars are lighting their lamps to see. If babes and squirrels and birds and bees, Are sound asleep as they should be, Bye, baby, bye..
            </summary>
        </member>
        <member name="P:Zelda.LocalizableTextResources.TalkNeutral_TownFolk_OldWoman_3">
            <summary>
              Looks up a localized string similar to The squirrel keeps warm in his furs of gray, Bye, baby, bye, &apos;Neath feathers, birdies are tucked away, Bye, baby, bye. In yellow jackets, the bees sleep tight. And cuddle close through the chilly night, My baby&apos;s snug in her gown of white, Bye, baby, bye..
            </summary>
        </member>
        <member name="P:Zelda.LocalizableTextResources.TalkNeutral_TownFolk_OldWoman_4">
            <summary>
              Looks up a localized string similar to Do you know how to make Red Dye? It&apos;s quite simple with a little magic! All you&apos;ll need is a Small Empty Bottle, two piles of Skeleton Bone Powder and five Red Potions! Trust me boy, trust me. Hehehe..
            </summary>
        </member>
        <member name="P:Zelda.LocalizableTextResources.TalkNeutral_TownFolk_TiaWoodsTingle_1">
            <summary>
              Looks up a localized string similar to Nothing in stock for you? Just come back later!.
            </summary>
        </member>
        <member name="P:Zelda.LocalizableTextResources.TalkNeutral_TownFolk_TombKid_Older_1">
            <summary>
              Looks up a localized string similar to It&apos;s all my younger brother&apos;s fault. Tell him that!.
            </summary>
        </member>
        <member name="P:Zelda.LocalizableTextResources.TalkNeutral_TownFolk_TombKid_Older_2">
            <summary>
              Looks up a localized string similar to I can&apos;t remember how we got here..
            </summary>
        </member>
        <member name="P:Zelda.LocalizableTextResources.TalkNeutral_TownFolk_TombKid_Older_3">
            <summary>
              Looks up a localized string similar to Standing outside here all day and night is getting old and boring..
            </summary>
        </member>
        <member name="P:Zelda.LocalizableTextResources.TalkNeutral_TownFolk_TombKid_Younger_1">
            <summary>
              Looks up a localized string similar to It&apos;s all my older brother&apos;s fault. Tell him that!.
            </summary>
        </member>
        <member name="P:Zelda.LocalizableTextResources.TalkNeutral_TownFolk_TombKid_Younger_2">
            <summary>
              Looks up a localized string similar to Where&apos;s my mother? Aaaaaaa. Aaaaaaaaaaa.  Aaaaaaaaaaaaaaaaaaa..
            </summary>
        </member>
        <member name="P:Zelda.LocalizableTextResources.TalkNeutral_TownFolk_TombKid_Younger_3">
            <summary>
              Looks up a localized string similar to I&apos;m sooo hungry. I want fish!.
            </summary>
        </member>
        <member name="T:Zelda.LocalizedEnums">
            <summary>
            Static helper class that contains methods that localizes enums.
            </summary>
        </member>
        <member name="M:Zelda.LocalizedEnums.Get(Zelda.Factions.ReputationLevel)">
            <summary>
            Gets the localized string for the specified <see cref="T:Zelda.Factions.ReputationLevel"/>.
            </summary>
            <param name="level">
            The enumeration to localize.
            </param>
            <returns>
            The localized string.
            </returns>
        </member>
        <member name="M:Zelda.LocalizedEnums.Get(Zelda.Status.Stat)">
            <summary>
            Gets the localized string for the specified <see cref="T:Zelda.Status.Stat"/>.
            </summary>
            <param name="stat">
            The enumeration to localize.
            </param>
            <returns>
            The localized string.
            </returns>
        </member>
        <member name="M:Zelda.LocalizedEnums.Get(Zelda.Status.ChanceToStatus)">
            <summary>
            Gets the localized string for the specified <see cref="T:Zelda.Status.ChanceToStatus"/>.
            </summary>
            <param name="stat">
            The enumeration to localize.
            </param>
            <returns>
            The localized string.
            </returns>
        </member>
        <member name="M:Zelda.LocalizedEnums.GetRating(Zelda.Status.ChanceToStatus)">
            <summary>
            Gets the localized string for the specified <see cref="T:Zelda.Status.ChanceToStatus"/>.
            </summary>
            <param name="stat">
            The enumeration to localize.
            </param>
            <returns>
            The localized string.
            </returns>
        </member>
        <member name="M:Zelda.LocalizedEnums.Get(Zelda.Attacks.AttackType)">
            <summary>
            Gets the localized string for the specified <see cref="T:Zelda.Attacks.AttackType"/>.
            </summary>
            <param name="modifier">
            The enumeration to localize.
            </param>
            <returns>
            The localized string.
            </returns>
        </member>
        <member name="M:Zelda.LocalizedEnums.Get(Zelda.Status.RaceType)">
            <summary>
            Gets the localized string for the specified <see cref="T:Zelda.Status.RaceType"/>.
            </summary>
            <param name="race">
            The enumeration to localize.
            </param>
            <returns>
            The localized string.
            </returns>
        </member>
        <member name="M:Zelda.LocalizedEnums.GetPlural(Zelda.Status.RaceType)">
            <summary>
            Gets the localized plural string for the specified <see cref="T:Zelda.Status.RaceType"/>.
            </summary>
            <param name="race">
            The enumeration to localize.
            </param>
            <returns>
            The localized string.
            </returns>
        </member>
        <member name="M:Zelda.LocalizedEnums.Get(Zelda.Items.EquipmentSlot)">
            <summary>
            Gets the localized string for the specified <see cref="T:Zelda.Items.EquipmentSlot"/>.
            </summary>
            <param name="slot">
            The enumeration to localize.
            </param>
            <returns>
            The localized string.
            </returns>
        </member>
        <member name="M:Zelda.LocalizedEnums.Get(Zelda.Items.WeaponType)">
            <summary>
            Gets the localized string for the specified <see cref="T:Zelda.Items.WeaponType"/>.
            </summary>
            <param name="type">
            The enumeration to localize.
            </param>
            <returns>
            The localized string.
            </returns>
        </member>
        <member name="M:Zelda.LocalizedEnums.Get(Zelda.Status.ElementalSchool)">
            <summary>
            Gets the localized string for the specified <see cref="T:Zelda.Status.ElementalSchool"/>.
            </summary>
            <param name="element">
            The enumeration to localize.
            </param>
            <returns>
            The localized string.
            </returns>
        </member>
        <member name="M:Zelda.LocalizedEnums.GetResist(Zelda.Status.ElementalSchool)">
            <summary>
            Gets the localized string for the specified <see cref="T:Zelda.Status.ElementalSchool"/>.
            </summary>
            <param name="element">
            The enumeration to localize.
            </param>
            <returns>
            The localized string.
            </returns>
        </member>
        <member name="M:Zelda.LocalizedEnums.GetGemType(Zelda.Status.ElementalSchool)">
            <summary>
            Gets the localized name of a gem of the given ElementalSchool.
            </summary>
            <param name="gemColor">
            The color of the gem.
            </param>
            <returns>
            The localized string.
            </returns>
        </member>
        <member name="M:Zelda.LocalizedEnums.GetCriticalDamageBonus(Zelda.Status.Damage.DamageSource)">
            <summary>
            Gets the localized name of the given Critical Damage Bonus type.
            </summary>
            <param name="source">
            The source of the damage.
            </param>
            <returns>
            The localized string.
            </returns>
        </member>
        <member name="M:Zelda.LocalizedEnums.Get(Zelda.Status.Damage.DamageSchool)">
            <summary>
            Gets the localized name of the given DamageSchool enumeration.
            </summary>
            <param name="damageSchool">
            The DamageSchool to localize.
            </param>
            <returns>
            The localized string.
            </returns>
        </member>
        <member name="M:Zelda.LocalizedEnums.Get(Zelda.Status.Damage.DamageSource)">
            <summary>
            Gets the localized name of the given DamageSource enumeration.
            </summary>
            <param name="damageSource">
            The DamageSource to localize.
            </param>
            <returns>
            The localized string.
            </returns>
        </member>
        <member name="M:Zelda.LocalizedEnums.Get(Zelda.Status.Damage.SpecialDamageType)">
            <summary>
            Gets the localized name of the given SpecialDamageType enumeration.
            </summary>
            <param name="damageType">
            The SpecialDamageType to localize.
            </param>
            <returns>
            The localized string.
            </returns>
        </member>
        <member name="M:Zelda.LocalizedEnums.GetRegen(Zelda.Status.LifeMana)">
            <summary>
            Gets the localized name of the given LifeMana enumeration.
            </summary>
            <param name="lifeMana">
            The LifeMana to localize.
            </param>
            <returns>
            The localized string.
            </returns>
        </member>
        <member name="M:Zelda.LocalizedEnums.Get(Zelda.Difficulties.DifficultyId)">
            <summary>
            Gets the localized equivalent of the given DifficultyId enumeration.
            </summary>
            <param name="difficulty">
            The difficulty to localize.
            </param>
            <returns>
            The localized string.
            </returns>
        </member>
        <member name="M:Zelda.LocalizedEnums.GetShort(Atom.Xna.ColorComponent)">
            <summary>
            Gets the localized equivalent of the given ColorComponent enumeration.
            </summary>
            <param name="component">
            The component to localize.
            </param>
            <returns>
            The localized string.
            </returns>
        </member>
        <member name="T:Zelda.Ocarina.Instrument">
            <summary>
            An Instrument provides a mechanism to play <see cref="T:Zelda.Ocarina.Note"/>s.
            </summary>
        </member>
        <member name="M:Zelda.Ocarina.Instrument.LoadOcarina(Atom.Fmod.AudioSystem)">
            <summary>
            Creates a new Instrument, loading the Ocarina data.
            </summary>
            <param name="audioSystem">
            The AudioSystem object.
            </param>
            <returns>
            The newly created Instrument.
            </returns>
        </member>
        <member name="M:Zelda.Ocarina.Instrument.PlayNote(Zelda.Ocarina.Note)">
            <summary>
            Plays the given <see cref="T:Zelda.Ocarina.Note"/> on this Instrument.
            </summary>
            <param name="note">
            The <see cref="T:Zelda.Ocarina.Note"/> to play.
            </param>
        </member>
        <member name="M:Zelda.Ocarina.Instrument.GetSound(Zelda.Ocarina.Note)">
            <summary>
            Gets the <see cref="T:Atom.Fmod.Sound"/> associated with the given <see cref="T:Zelda.Ocarina.Note"/>.
            </summary>
            <param name="note">
            The input note.
            </param>
            <returns>
            The output sound.
            </returns>
        </member>
        <member name="F:Zelda.Ocarina.Instrument.soundNoteLeft">
            <summary>
            The sound that is associated with the <see cref="F:Zelda.Ocarina.Note.Left"/> of this Instrument.
            </summary>
        </member>
        <member name="F:Zelda.Ocarina.Instrument.soundNoteRight">
            <summary>
            The sound that is associated with the <see cref="F:Zelda.Ocarina.Note.Right"/> of this Instrument.
            </summary>
        </member>
        <member name="F:Zelda.Ocarina.Instrument.soundNoteUp">
            <summary>
            The sound that is associated with the <see cref="F:Zelda.Ocarina.Note.Up"/> of this Instrument.
            </summary>
        </member>
        <member name="F:Zelda.Ocarina.Instrument.soundNoteDown">
            <summary>
            The sound that is associated with the <see cref="F:Zelda.Ocarina.Note.Down"/> of this Instrument.
            </summary>
        </member>
        <member name="T:Zelda.Ocarina.Note">
            <summary>
            Enumerates the different notes the player can play on an <see cref="T:Zelda.Ocarina.Instrument"/>.
            </summary>
        </member>
        <member name="F:Zelda.Ocarina.Note.None">
            <summary>
            No specific note.
            </summary>
        </member>
        <member name="F:Zelda.Ocarina.Note.Left">
            <summary>
            The note that occurs when the player uses the Left key.
            </summary>
        </member>
        <member name="F:Zelda.Ocarina.Note.Right">
            <summary>
            The note that occurs when the player uses the Right key.
            </summary>
        </member>
        <member name="F:Zelda.Ocarina.Note.Up">
            <summary>
            The note that occurs when the player uses the Up key.
            </summary>
        </member>
        <member name="F:Zelda.Ocarina.Note.Down">
            <summary>
            The note that occurs when the player uses the Down key.
            </summary>
        </member>
        <member name="T:Zelda.Ocarina.OcarinaBox">
            <summary>
            Encapsulates all ocarina related functionality.
            </summary>
        </member>
        <member name="P:Zelda.Ocarina.OcarinaBox.IsPlaying">
            <summary>
            Gets a value indicating whether the owner of this OcarinaBox
            is currently playing a Song.
            </summary>
        </member>
        <member name="P:Zelda.Ocarina.OcarinaBox.Ocarina">
            <summary>
            Gets the ocarina Instrument this OcarinaBox contains.
            </summary>
        </member>
        <member name="P:Zelda.Ocarina.OcarinaBox.KnownSongs">
            <summary>
            Gets the <see cref="T:Zelda.Ocarina.Song"/>s the owner of this OcarinaBox has learned.
            </summary>
        </member>
        <member name="P:Zelda.Ocarina.OcarinaBox.KnownSongCount">
            <summary>
            Gets the number of <see cref="T:Zelda.Ocarina.Song"/>s the owner of this OcarinaBox has learned. 
            </summary>
        </member>
        <member name="M:Zelda.Ocarina.OcarinaBox.#ctor(Zelda.Entities.PlayerEntity,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the OcarinaBox class.
            </summary>
            <param name="owner">
            The PlayerEntity that owns the new OcarinaBox.
            </param>
            <param name="serviceProvider">
            Provides fast access to zelda-related services.
            </param>
        </member>
        <member name="M:Zelda.Ocarina.OcarinaBox.PlaySong(System.Collections.Generic.IEnumerable{Zelda.Ocarina.Note})">
            <summary>
            Tries to play the song with the given Notes.
            </summary>
            <param name="notes">
            The notes to play.
            </param>
            <returns>
            true if the song has started to play;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Ocarina.OcarinaBox.GetSong(System.Int32)">
            <summary>
            Gets the <see cref="T:Zelda.Ocarina.Song"/> at the given zero-based <paramref name="index"/>.
            </summary>
            <param name="index">
            The zero-based index of the Song to get.
            </param>
            <returns>
            The requested Song.
            </returns>
        </member>
        <member name="M:Zelda.Ocarina.OcarinaBox.IsValidIndex(System.Int32)">
            <summary>
            Gets a value indicating whether the given index is a valid index
            into the list of songs the owner of this OcarinaBox knows.
            </summary>
            <param name="songIndex">
            The index to validate.
            </param>
            <returns>
            Returns whether the given index is a valid song index.
            </returns>
        </member>
        <member name="M:Zelda.Ocarina.OcarinaBox.FindSong(System.Collections.Generic.IEnumerable{Zelda.Ocarina.Note})">
            <summary>
            Tries to find a <see cref="T:Zelda.Ocarina.Song"/> in this OcarinaBox
            </summary>
            <param name="notes">
            The notes of the song to find.
            </param>
            <returns>
            The Song; or null if there is no such Song in this OcarinaBox.
            </returns>
        </member>
        <member name="M:Zelda.Ocarina.OcarinaBox.HasSong(System.Type)">
            <summary>
            Gets a value indicating whether this OcarinaBox contains
            a Song with the given Type.
            </summary>
            <param name="type">
            The type of the Song to check for.
            </param>
            <returns>
            True if this OcarinaBox contains the Song of the given Type
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Ocarina.OcarinaBox.AddSong(Zelda.Ocarina.Song)">
            <summary>
            Adds the given Song to this OcarinaBox;
            learning the owner of the Box the Song.
            </summary>
            <param name="song">
            The song to add.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="song"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            If there already exists a Song of the same type in this OcarinaBox.
            </exception>
        </member>
        <member name="M:Zelda.Ocarina.OcarinaBox.AddSong(System.Type)">
            <summary>
            Adds the given Song to this OcarinaBox;
            learning the owner of the Box the Song.
            </summary>
            <param name="songType">
            The type of the song to add.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="songType"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            If there already exists a Song of the same type in this OcarinaBox.
            </exception>
        </member>
        <member name="M:Zelda.Ocarina.OcarinaBox.OnActiveSongEnded(Zelda.Ocarina.SongMusic)">
            <summary>
            Called when the currently active Song has ended.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
        </member>
        <member name="M:Zelda.Ocarina.OcarinaBox.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Ocarina.OcarinaBox.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Ocarina.OcarinaBox.activeSong">
            <summary>
            Identifies the Song that is currently playing; if any.
            </summary>
        </member>
        <member name="F:Zelda.Ocarina.OcarinaBox.ocarina">
            <summary>
            The ocarina Instrument.
            </summary>
        </member>
        <member name="F:Zelda.Ocarina.OcarinaBox.knownSongs">
            <summary>
            The list of <see cref="T:Zelda.Ocarina.Song"/>s known to this OcarinaBox.
            </summary>
        </member>
        <member name="F:Zelda.Ocarina.OcarinaBox.owner">
            <summary>
            The player that owns this OcarinaBox.
            </summary>
        </member>
        <member name="F:Zelda.Ocarina.OcarinaBox.serviceProvider">
            <summary>
            Provides fast access to game-related services.
            </summary>
        </member>
        <member name="T:Zelda.Ocarina.Song">
            <summary>
            Represents a song that may be played by the player on an <see cref="T:Zelda.Ocarina.Instrument"/>.
            </summary>
            <remarks>
            When a song has been successfully played the special effect of the Song is executed;
            examples would be: Teleportation, Time Change, Special Area Unlocks, ..
            </remarks>
        </member>
        <member name="P:Zelda.Ocarina.Song.Notes">
            <summary>
            Gets the list of <see cref="T:Zelda.Ocarina.Note"/>s that make-up this Song,
            in the specified order.
            </summary>
        </member>
        <member name="P:Zelda.Ocarina.Song.DescriptionData">
            <summary>
            Gets the data object descriping properties of this Song
            that are visible to the player.
            </summary>
        </member>
        <member name="P:Zelda.Ocarina.Song.Music">
            <summary>
            Gets the <see cref="T:Zelda.Ocarina.SongMusic"/> associated with this Song.
            </summary>
        </member>
        <member name="M:Zelda.Ocarina.Song.#ctor(System.Collections.Generic.IEnumerable{Zelda.Ocarina.Note},Zelda.Ocarina.SongDescriptionData,Zelda.Ocarina.SongMusic)">
            <summary>
            Initializes a new instance of the Song class.
            </summary>
            <param name="notes">
            The enumeration of Notes that make-up the new Song.
            </param>
            <param name="descriptionData">
            The data visible to the player that is descriping this Song.
            </param>
            <param name="music">
            The music played of the new Song.
            </param>
        </member>
        <member name="M:Zelda.Ocarina.Song.Setup(Zelda.IZeldaServiceProvider)">
            <summary>
            Setups this Song.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related data.
            </param>
        </member>
        <member name="M:Zelda.Ocarina.Song.Play(Zelda.Entities.PlayerEntity)">
            <summary>
            Plays this Song.
            </summary>
            <param name="player">
            The player of the Song.
            </param>
            <exception cref="T:System.InvalidOperationException">
            If this Song is already playing.
            </exception>
        </member>
        <member name="M:Zelda.Ocarina.Song.ExecuteEffect(Zelda.Entities.PlayerEntity)">
            <summary>
            Executes the special effect of this Song.
            </summary>
            <param name="player">
            The player that has played the song.
            </param>
        </member>
        <member name="M:Zelda.Ocarina.Song.OnSongStarted(Zelda.Entities.PlayerEntity)">
            <summary>
            Gets called when playing of this Song has started.
            </summary>
            <param name="player">
            The PlayerEntity that started to play this Song.
            </param>
        </member>
        <member name="M:Zelda.Ocarina.Song.HasEqualNotes(System.Collections.Generic.IEnumerable{Zelda.Ocarina.Note})">
            <summary>
            Gets whether the notes of this Song are equal to the given <paramref name="notes"/>.
            </summary>
            <param name="notes">
            The notes to compare this Song to.
            </param>
            <returns>
            True if the notes are equal;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Ocarina.Song.OnMusicStarted(Zelda.Ocarina.SongMusic)">
            <summary>
            Gets called when the music associated with this Song has started playing.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
        </member>
        <member name="M:Zelda.Ocarina.Song.OnMusicEnded(Zelda.Ocarina.SongMusic)">
            <summary>
            Gets called when the music associated with this Song has stopped playing.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
        </member>
        <member name="F:Zelda.Ocarina.Song.player">
            <summary>
            The PlayerEntity that is playing this Song.
            </summary>
        </member>
        <member name="F:Zelda.Ocarina.Song.notes">
            <summary>
            The list of notes that make-up this Song.
            </summary>
        </member>
        <member name="F:Zelda.Ocarina.Song.music">
            <summary>
            The music associated with this Song.
            </summary>
        </member>
        <member name="F:Zelda.Ocarina.Song.descriptionData">
            <summary>
            Stores descriping properties of this Song that are visible to the player.
            </summary>
        </member>
        <member name="T:Zelda.Ocarina.SongDescriptionData">
            <summary>
            Encapsulates the data of a <see cref="T:Zelda.Ocarina.Song"/>
            that is visible to the player.
            This class can't be inherited.
            </summary>
        </member>
        <member name="P:Zelda.Ocarina.SongDescriptionData.LocalizedName">
            <summary>
            Gets the localized name of the Song.
            </summary>
        </member>
        <member name="P:Zelda.Ocarina.SongDescriptionData.LocalizedDescription">
            <summary>
            Gets the localized description of the Song.
            </summary>
        </member>
        <member name="P:Zelda.Ocarina.SongDescriptionData.NoteColor">
            <summary>
            Gets the color of the note that is used to
            visualize the Song in the song list.
            </summary>
        </member>
        <member name="M:Zelda.Ocarina.SongDescriptionData.#ctor(System.String,System.String,Microsoft.Xna.Framework.Color)">
            <summary>
            Initializes a new instance of the SongDescriptionData class.
            </summary>
            <param name="localizedName">
            The localized name of the Song.
            </param>
            <param name="localizedDescription">
            The localized description of the Song.
            </param>
            <param name="noteColor">
            The color of the note that is used to visualize the Song in the song list.
            </param>
        </member>
        <member name="F:Zelda.Ocarina.SongDescriptionData.localizedName">
            <summary>
            The localized name of the Song.
            </summary>
        </member>
        <member name="F:Zelda.Ocarina.SongDescriptionData.localizedDescription">
            <summary>
            The localized description of the Song.
            </summary>
        </member>
        <member name="F:Zelda.Ocarina.SongDescriptionData.noteColor">
            <summary>
            The color of the note that is used to visualize the Song
            in the song list.
            </summary>
        </member>
        <member name="T:Zelda.Ocarina.SongMusicPlayMode">
            <summary>
            Enumerates the different ways the <see cref="T:Zelda.Ocarina.SongMusic"/> of a <see cref="T:Zelda.Ocarina.Song"/> is played.
            </summary>
        </member>
        <member name="F:Zelda.Ocarina.SongMusicPlayMode.None">
            <summary>
            No music is played.
            </summary>
        </member>
        <member name="F:Zelda.Ocarina.SongMusicPlayMode.Normal">
            <summary>
            The music is simply played.
            </summary>
        </member>
        <member name="F:Zelda.Ocarina.SongMusicPlayMode.Background">
            <summary>
            The current background music is changed.
            </summary>
        </member>
        <member name="T:Zelda.Ocarina.SongMusic">
            <summary>
            Encapsulates the music of a <see cref="T:Zelda.Ocarina.Song"/>.
            This class can't be inherited.
            </summary>
        </member>
        <member name="F:Zelda.Ocarina.SongMusic.DefaultResourceName">
            <summary>
            The full name of the music resource that gets played
            by default when a Song has been played.
            </summary>
        </member>
        <member name="E:Zelda.Ocarina.SongMusic.Started">
            <summary>
            Fired when playing of this SongMusic has started.
            </summary>
        </member>
        <member name="E:Zelda.Ocarina.SongMusic.Ended">
            <summary>
            Fired when playing of this SongMusic has ended.
            </summary>
        </member>
        <member name="P:Zelda.Ocarina.SongMusic.Duration">
            <summary>
            Gets the duration of this SongMusic in seconds.
            </summary>
        </member>
        <member name="P:Zelda.Ocarina.SongMusic.Volume">
            <summary>
            Gets or sets the volume at which the music is played;
            where 0 = silent and 1 = full volume.
            </summary>
            <value>The default value is 1.</value>
        </member>
        <member name="M:Zelda.Ocarina.SongMusic.#ctor(System.String,Zelda.Ocarina.SongMusicPlayMode)">
            <summary>
            Initializes a new instance of the SongMusic class.
            </summary>
            <param name="resourceName">
            The name that uniquely identifies the music resource.
            </param>
            <param name="playMode">
            The SongMusicPlayMode to use.
            </param>
        </member>
        <member name="M:Zelda.Ocarina.SongMusic.Setup(Zelda.IZeldaServiceProvider)">
            <summary>
            Setups this SongMusic.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Ocarina.SongMusic.CreateDefault">
            <summary>
            Creates a new SongMusic instance that uses the default settings.
            </summary>
            <returns>
            The new SongMusic instance.
            </returns>
        </member>
        <member name="M:Zelda.Ocarina.SongMusic.Play(Zelda.Entities.PlayerEntity)">
            <summary>
            Plays the Music associated with a Song.
            </summary>
            <param name="player">
            The player of the music.
            </param>
        </member>
        <member name="M:Zelda.Ocarina.SongMusic.Load">
            <summary>
            Loads this song music.
            </summary>
        </member>
        <member name="M:Zelda.Ocarina.SongMusic.OnBackgroundMusicChanged(System.Object,Atom.Fmod.Channel)">
            <summary>
            Called when the Background music has been changed to the Music of this Song.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="channel">The channel that has been changed to.</param>
        </member>
        <member name="M:Zelda.Ocarina.SongMusic.OnMusicEnded(Atom.Fmod.Channel)">
            <summary>
            Gets called when the channel has ended playing the Song's music.
            </summary>
            <param name="sender">The sender of the event.</param>
        </member>
        <member name="M:Zelda.Ocarina.SongMusic.OnStarted">
            <summary>
            Fires the Started event.
            </summary>
        </member>
        <member name="F:Zelda.Ocarina.SongMusic.music">
            <summary>
            The music resource.
            </summary>
        </member>
        <member name="F:Zelda.Ocarina.SongMusic.channel">
            <summary>
            Identifies the Channel the music is playing on.
            </summary>
        </member>
        <member name="F:Zelda.Ocarina.SongMusic.player">
            <summary>
            The PlayerEntity that is playing this Song.
            </summary>
        </member>
        <member name="F:Zelda.Ocarina.SongMusic.volume">
            <summary>
            The volume at which the music is played.
            </summary>
        </member>
        <member name="F:Zelda.Ocarina.SongMusic.resourceName">
            <summary>
            The name of the music resource that is played
            when this Song was played.
            </summary>
        </member>
        <member name="F:Zelda.Ocarina.SongMusic.playMode">
            <summary>
            States how this SongMusic should be played.
            </summary>
        </member>
        <member name="T:Zelda.Ocarina.Songs.Design.SongTypeNameEditor">
            <summary>
            Defines an UITypeEditor that lets the user select the type-name of an ocarina song.
            </summary>
        </member>
        <member name="M:Zelda.Ocarina.Songs.Design.SongTypeNameEditor.GetFinalValue(Atom.Design.NameableObjectWrapper{System.Type})">
            <summary>
            Gets the final value that is returned by this SongTypeNameEditor.
            </summary>
            <param name="selectedItem">
            The object the used has selected.
            </param>
            <returns>
            The object that is returned from the SongTypeNameEditor.
            </returns>
        </member>
        <member name="M:Zelda.Ocarina.Songs.Design.SongTypeNameEditor.GetTypes">
            <summary>
            Gets the types that the user can select in this SongTypeNameEditor.
            </summary>
            <returns>
            The types the user can select.
            </returns>
        </member>
        <member name="F:Zelda.Ocarina.Songs.Design.SongTypeNameEditor.types">
            <summary>
            The types the user can select in this SongTypeNameEditor.
            </summary>
        </member>
        <member name="T:Zelda.Ocarina.Songs.ExecuteTriggerSong">
            <summary>
            Defines a <see cref="T:Zelda.Ocarina.Song"/> that when played executes all SongTileAreaTriggers
            that are under the player.
            </summary>
        </member>
        <member name="M:Zelda.Ocarina.Songs.ExecuteTriggerSong.#ctor">
            <summary>
            Initializes a new instance of the ExecuteTriggerSong class.
            </summary>
        </member>
        <member name="F:Zelda.Ocarina.Songs.ExecuteTriggerSong.ManaCost">
            <summary>
            The mana penality in % of base mana of the TimeWarpSong.
            </summary>
        </member>
        <member name="M:Zelda.Ocarina.Songs.ExecuteTriggerSong.ExecuteEffect(Zelda.Entities.PlayerEntity)">
            <summary>
            Executes the effec this TimeWarpSong has.
            </summary>
            <param name="player">
            The PlayerEntity that has caused the effect to be executed.
            </param>
        </member>
        <member name="M:Zelda.Ocarina.Songs.ExecuteTriggerSong.ApplyManaPenality(Zelda.Entities.PlayerEntity)">
            <summary>
            Applies the mana penality of playing this ExecuteTriggerSong to the given PlayerEntity.
            </summary>
            <param name="player">
            The PlayerEntity that started to play this Song.
            </param>
        </member>
        <member name="T:Zelda.Ocarina.Songs.Teleportation.CrossTeleportLocationStorage">
            <summary>
            Stores world-presistant data relevant to the <see cref="T:Zelda.Ocarina.Songs.Teleportation.MusicCrossSong"/>.
            </summary>
        </member>
        <member name="F:Zelda.Ocarina.Songs.Teleportation.CrossTeleportLocationStorage.Identifier">
            <summary>
            The identifier string that uniquely identifies the unique CrossTeleportLocationStorage.
            </summary>
        </member>
        <member name="P:Zelda.Ocarina.Songs.Teleportation.CrossTeleportLocationStorage.SceneName">
            <summary>
            Gets or sets the name of the scene at which the cross has been used.
            </summary>
        </member>
        <member name="P:Zelda.Ocarina.Songs.Teleportation.CrossTeleportLocationStorage.Position">
            <summary>
            Gets or sets the position in the scene at which the cross has been used.
            </summary>
        </member>
        <member name="P:Zelda.Ocarina.Songs.Teleportation.CrossTeleportLocationStorage.FloorNumber">
            <summary>
            Gets or sets the number of the floor in the scene at which the cross has been used.
            </summary>
        </member>
        <member name="M:Zelda.Ocarina.Songs.Teleportation.CrossTeleportLocationStorage.SerializeStorage(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this IStorage.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Ocarina.Songs.Teleportation.CrossTeleportLocationStorage.DeserializeStorage(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this IStorage.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="T:Zelda.Ocarina.Songs.Teleportation.FamilyTombsTeleportationSong">
            <summary>
            Implements a <see cref="T:Zelda.Ocarina.Songs.Teleportation.SceneTeleportationSong"/> that ports the player
            to the Family Stone Tombs in the Tia Woods.
            </summary>
        </member>
        <member name="P:Zelda.Ocarina.Songs.Teleportation.FamilyTombsTeleportationSong.SceneName">
            <summary>
            Gets the name of the Scene this TeleportationSong ports to.
            </summary>
        </member>
        <member name="P:Zelda.Ocarina.Songs.Teleportation.FamilyTombsTeleportationSong.SpawnPointName">
            <summary>
            Gets the name of the SpawnPoint this TeleportationSong ports to.
            </summary>
        </member>
        <member name="M:Zelda.Ocarina.Songs.Teleportation.FamilyTombsTeleportationSong.#ctor">
            <summary>
            Initializes a new instance of the FamilyTombsTeleportationSong class.
            </summary>
        </member>
        <member name="T:Zelda.Ocarina.Songs.Teleportation.HomeTeleportationSong">
            <summary>
            Implements a <see cref="T:Zelda.Ocarina.Songs.Teleportation.SceneTeleportationSong"/> that ports the player
            to Maja at the Route of Din.
            </summary>
        </member>
        <member name="P:Zelda.Ocarina.Songs.Teleportation.HomeTeleportationSong.SceneName">
            <summary>
            Gets the name of the Scene this TeleportationSong ports to.
            </summary>
        </member>
        <member name="P:Zelda.Ocarina.Songs.Teleportation.HomeTeleportationSong.SpawnPointName">
            <summary>
            Gets the name of the SpawnPoint this TeleportationSong ports to.
            </summary>
        </member>
        <member name="M:Zelda.Ocarina.Songs.Teleportation.HomeTeleportationSong.#ctor">
            <summary>
            Initializes a new instance of the HomeTeleportationSong class.
            </summary>
        </member>
        <member name="T:Zelda.Ocarina.Songs.Teleportation.MusicCrossSong">
            <summary>
            Teleports the player to the location that has been
            stored in the Cross of Teleportation.
            </summary>
        </member>
        <member name="M:Zelda.Ocarina.Songs.Teleportation.MusicCrossSong.#ctor">
            <summary>
            Initializes a new instance of the MusicCrossSong class.
            </summary>
        </member>
        <member name="M:Zelda.Ocarina.Songs.Teleportation.MusicCrossSong.ExecuteEffect(Zelda.Entities.PlayerEntity)">
            <summary>
            Executes the special effect of this Song.
            </summary>
            <param name="player">
            The player that has played the song.
            </param>
        </member>
        <member name="T:Zelda.Ocarina.Songs.Teleportation.RouteOfDinTeleportationSong">
            <summary>
            Implements a <see cref="T:Zelda.Ocarina.Songs.Teleportation.SceneTeleportationSong"/> that ports the player
            to Maja at the Route of Din.
            </summary>
        </member>
        <member name="P:Zelda.Ocarina.Songs.Teleportation.RouteOfDinTeleportationSong.SceneName">
            <summary>
            Gets the name of the Scene this TeleportationSong ports to.
            </summary>
        </member>
        <member name="P:Zelda.Ocarina.Songs.Teleportation.RouteOfDinTeleportationSong.SpawnPointName">
            <summary>
            Gets the name of the SpawnPoint this TeleportationSong ports to.
            </summary>
        </member>
        <member name="M:Zelda.Ocarina.Songs.Teleportation.RouteOfDinTeleportationSong.#ctor">
            <summary>
            Initializes a new instance of the RouteOfDinTeleportationSong class.
            </summary>
        </member>
        <member name="T:Zelda.Ocarina.Songs.Teleportation.SceneTeleportationSong">
            <summary>
            Represents a <see cref="T:Zelda.Ocarina.Song"/> that when played teleports
            the player to a specific location.
            </summary>
        </member>
        <member name="P:Zelda.Ocarina.Songs.Teleportation.SceneTeleportationSong.SceneName">
            <summary>
            Gets the name of the Scene this SceneTeleportationSong ports to.
            </summary>
        </member>
        <member name="P:Zelda.Ocarina.Songs.Teleportation.SceneTeleportationSong.SpawnPointName">
            <summary>
            Gets the name of the SpawnPoint this SceneTeleportationSong ports to.
            </summary>
        </member>
        <member name="M:Zelda.Ocarina.Songs.Teleportation.SceneTeleportationSong.#ctor(System.Collections.Generic.IEnumerable{Zelda.Ocarina.Note},Zelda.Ocarina.SongDescriptionData,Zelda.Ocarina.SongMusic)">
            <summary>
            Initializes a new instance of the SceneTeleportationSong class.
            </summary>
            <param name="notes">
            The enumeration of Notes that make-up the new SceneTeleportationSong.
            </param>
            <param name="descriptionData">
            The data visible to the player that is descriping this SceneTeleportationSong.
            </param>
            <param name="music">
            The music played of the new SceneTeleportationSong.
            </param>
        </member>
        <member name="M:Zelda.Ocarina.Songs.Teleportation.SceneTeleportationSong.ExecuteEffect(Zelda.Entities.PlayerEntity)">
            <summary>
            Plays this SceneTeleportationSong, porting the player.
            </summary>
            <param name="player">
            The player that has played the song.
            </param>
        </member>
        <member name="M:Zelda.Ocarina.Songs.Teleportation.SceneTeleportationSong.OnSongStarted(Zelda.Entities.PlayerEntity)">
            <summary>
            Gets called when playing of this Song has started.
            </summary>
            <param name="player">
            The PlayerEntity that started to play this Song.
            </param>
        </member>
        <member name="M:Zelda.Ocarina.Songs.Teleportation.SceneTeleportationSong.OnTeleported(Zelda.Entities.PlayerEntity)">
            <summary>
            Gets called when the given Player has beens ucessfully teleported.
            </summary>
            <param name="player">
            The player that has been teleported.
            </param>
        </member>
        <member name="T:Zelda.Ocarina.Songs.Teleportation.TeleportationSong">
            <summary>
            Represents a <see cref="T:Zelda.Ocarina.Song"/> that when played teleports the player.
            </summary>
        </member>
        <member name="M:Zelda.Ocarina.Songs.Teleportation.TeleportationSong.#ctor(System.Collections.Generic.IEnumerable{Zelda.Ocarina.Note},Zelda.Ocarina.SongDescriptionData,Zelda.Ocarina.SongMusic)">
            <summary>
            Initializes a new instance of the TeleportationSong class.
            </summary>
            <param name="notes">
            The enumeration of Notes that make-up the new TeleportationSong.
            </param>
            <param name="descriptionData">
            The data visible to the player that is descriping this TeleportationSong.
            </param>
            <param name="music">
            The music played of the new TeleportationSong.
            </param>
        </member>
        <member name="M:Zelda.Ocarina.Songs.Teleportation.TeleportationSong.OnSongStarted(Zelda.Entities.PlayerEntity)">
            <summary>
            Gets called when playing of this Song has started.
            </summary>
            <param name="player">
            The PlayerEntity that started to play this Song.
            </param>
        </member>
        <member name="M:Zelda.Ocarina.Songs.Teleportation.TeleportationSong.OnTeleported(Zelda.Entities.PlayerEntity)">
            <summary>
            Gets called when the given Player has beens ucessfully teleported.
            </summary>
            <param name="player">
            The player that has been teleported.
            </param>
        </member>
        <member name="T:Zelda.Ocarina.Songs.TimeWarpSong">
            <summary>
            Defines a <see cref="T:Zelda.Ocarina.Song"/> that when played resets the zone/scene
            the player currently is part of.
            </summary>
            <remarks>
            This is useful to farm a boss over and over without having to close the game.
            </remarks>
        </member>
        <member name="M:Zelda.Ocarina.Songs.TimeWarpSong.#ctor">
            <summary>
            Initializes a new instance of the TimeWarpSong class.
            </summary>
        </member>
        <member name="F:Zelda.Ocarina.Songs.TimeWarpSong.HoursToWarp">
            <summary>
            States the time this Song warps into the future.
            </summary>
        </member>
        <member name="F:Zelda.Ocarina.Songs.TimeWarpSong.ManaCost">
            <summary>
            The mana penality in % of base mana of the TimeWarpSong.
            </summary>
        </member>
        <member name="M:Zelda.Ocarina.Songs.TimeWarpSong.ExecuteEffect(Zelda.Entities.PlayerEntity)">
            <summary>
            Executes the effec this TimeWarpSong has.
            </summary>
            <param name="player">
            The PlayerEntity that has caused the effect to be executed.
            </param>
        </member>
        <member name="M:Zelda.Ocarina.Songs.TimeWarpSong.WarpTime(Zelda.Entities.PlayerEntity)">
            <summary>
            Warps the current time of the given PlayerEntity.
            </summary>
            <param name="player">
            The PlayerEntity that started to play this Song.
            </param>
        </member>
        <member name="M:Zelda.Ocarina.Songs.TimeWarpSong.ApplyManaPenality(Zelda.Entities.PlayerEntity)">
            <summary>
            Applies the mana penality of playing tthis TimeWarpSong to the given PlayerEntity.
            </summary>
            <param name="player">
            The PlayerEntity that started to play this Song.
            </param>
        </member>
        <member name="M:Zelda.Ocarina.Songs.TimeWarpSong.OnSongStarted(Zelda.Entities.PlayerEntity)">
            <summary>
            Gets called when playing of this Song has started.
            </summary>
            <param name="player">
            The PlayerEntity that started to play this Song.
            </param>
        </member>
        <member name="M:Zelda.Ocarina.Songs.TimeWarpSong.StartBlendingOut(Zelda.Entities.PlayerEntity)">
            <summary>
            Gets called when the given Player has been sucessfully respawned.
            </summary>
            <param name="player">
            The player that has been respawned.
            </param>
        </member>
        <member name="T:Zelda.Ocarina.Songs.ZoneResetSong">
            <summary>
            Defines "The Song of the Past" that when played resets the zone/scene
            the player currently is part of.
            </summary>
            <remarks>
            This is useful to farm a boss over and over without having to close the game.
            </remarks>
        </member>
        <member name="M:Zelda.Ocarina.Songs.ZoneResetSong.#ctor">
            <summary>
            Initializes a new instance of the ZoneResetSong class.
            </summary>
        </member>
        <member name="M:Zelda.Ocarina.Songs.ZoneResetSong.ExecuteEffect(Zelda.Entities.PlayerEntity)">
            <summary>
            Executes the effec this ZoneResetSong has.
            </summary>
            <param name="player">
            The PlayerEntity that has caused the effect to be executed.
            </param>
        </member>
        <member name="M:Zelda.Ocarina.Songs.ZoneResetSong.AnalyzeSceneProperties(Zelda.Entities.PlayerEntity)">
            <summary>
            Analayzes the IProperties applied to the current scene.
            </summary>
            <param name="player">
            The player entity.
            </param>
            <returns>
            true if the ExecuteEffect should return after analyzing the scene properties;
            other false if ExecuteEffect should continue.
            </returns>
        </member>
        <member name="M:Zelda.Ocarina.Songs.ZoneResetSong.HandleRedirectProperty(Zelda.Core.Properties.Scene.RedirectZoneResetProperty,Zelda.Entities.PlayerEntity)">
            <summary>
            Handles the specified RedirectZoneResetProperty.
            </summary>
            <param name="redirectZoneReset">
            The property that has been detected on the scene.
            </param>
            <param name="player">
            The player that caused the effect to execute.
            </param>
        </member>
        <member name="M:Zelda.Ocarina.Songs.ZoneResetSong.HandleAlsoResetOtherZoneProperty(Zelda.Core.Properties.Scene.AlsoResetAnotherZoneOnZoneResetProperty,Zelda.Entities.PlayerEntity)">
            <summary>
            Handles the <see cref="T:Zelda.Core.Properties.Scene.AlsoResetAnotherZoneOnZoneResetProperty"/>.
            </summary>
            <param name="alsoResetOtherZone">
            The property that has been detected on the scene.
            </param>
            <param name="player">
            The player that caused the effect to execute.
            </param>
        </member>
        <member name="M:Zelda.Ocarina.Songs.ZoneResetSong.Reset(Zelda.Entities.PlayerEntity)">
            <summary>
            Resets the ZeldaScene the specified PlayerEntity is currently part of.
            </summary>
            <param name="player">
            The PlayerEntity that has caused the effect to be executed.
            </param>
        </member>
        <member name="M:Zelda.Ocarina.Songs.ZoneResetSong.ReloadAndSpawn(Zelda.Entities.PlayerEntity)">
            <summary>
            Reloads the old ZeldaScene from the Hard-Disc.
            </summary>
            <param name="player">
            The PlayerEntity that has caused the effect to be executed.
            </param>
        </member>
        <member name="M:Zelda.Ocarina.Songs.ZoneResetSong.Respawn(Zelda.Entities.PlayerEntity,Zelda.ZeldaScene)">
            <summary>
            Spawns the player at the last used spawn point.
            </summary>
            <param name="player">
            The PlayerEntity that has caused the effect to be executed.
            </param>
            <param name="newScene">
            The newly loaded Scene.
            </param>
        </member>
        <member name="M:Zelda.Ocarina.Songs.ZoneResetSong.GetSpawnPoint(Zelda.Entities.PlayerEntity,Zelda.ZeldaScene)">
            <summary>
            Gets the ISpawnPoint the player should spawn at.
            </summary>
            <param name="player">
            The PlayerEntity that has caused the effect to be executed.
            </param>
            <param name="newScene">
            The newly loaded Scene.
            </param>
            <returns>
            The ISpawnPoint the player should be spawned at.
            </returns>
        </member>
        <member name="M:Zelda.Ocarina.Songs.ZoneResetSong.OnSongStarted(Zelda.Entities.PlayerEntity)">
            <summary>
            Gets called when playing of this Song has started.
            </summary>
            <param name="player">
            The PlayerEntity that started to play this Song.
            </param>
        </member>
        <member name="M:Zelda.Ocarina.Songs.ZoneResetSong.OnRespawned(Zelda.Entities.PlayerEntity)">
            <summary>
            Gets called when the given Player has been sucessfully respawned.
            </summary>
            <param name="player">
            The player that has been respawned.
            </param>
        </member>
        <member name="T:Zelda.Overlays.ISceneOverlay">
            <summary>
            An <see cref="T:Zelda.Overlays.ISceneOverlay"/> is an overlay that is 
            rendered ontop of the scene, just before the user interface.
            </summary>
        </member>
        <member name="M:Zelda.Overlays.ISceneOverlay.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this ISceneOverlay.
            </summary>
            <param name="updateContext">
            The current <see cref="T:Zelda.ZeldaUpdateContext"/>.
            </param>
        </member>
        <member name="M:Zelda.Overlays.ISceneOverlay.Draw(Zelda.ZeldaDrawContext)">
            <summary>
            Draws this ISceneOverlay.
            </summary>
            <param name="drawContext">
            The current <see cref="T:Zelda.ZeldaDrawContext"/>.
            </param>
        </member>
        <member name="M:Zelda.Overlays.ISceneOverlay.AddedToScene(Zelda.ZeldaScene)">
            <summary>
            Gets called when this ISceneOverlay has been added to the given <see cref="T:Zelda.ZeldaScene"/>.
            </summary>
            <remarks>
            This method should not directly be called from user-code.
            </remarks>
            <param name="scene">
            The related ZeldaScene.
            </param>
        </member>
        <member name="M:Zelda.Overlays.ISceneOverlay.RemovedFromScene(Zelda.ZeldaScene)">
            <summary>
            Gets called when this ISceneOverlay has been removed from the given <see cref="T:Zelda.ZeldaScene"/>.
            </summary>
            <remarks>
            This method should not directly be called from user-code.
            </remarks>
            <param name="scene">
            The related ZeldaScene.
            </param>
        </member>
        <member name="T:Zelda.Overlays.NoiseOverlay">
            <summary>
            Represents an <see cref="T:Zelda.Overlays.ISceneOverlay"/> that
            draws a <see cref="P:Zelda.Overlays.NoiseOverlay.Noise"/> texture over the scene.
            </summary>
        </member>
        <member name="M:Zelda.Overlays.NoiseOverlay.#ctor(Atom.Xna.Effects.IEffectLoader,Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)">
            <summary>
            Initializes a new instance of the NoiseOverlay class.
            </summary>
            <param name="effectLoader">
            Provides a mechanism that allows loading of effect asserts.
            </param>
            <param name="deviceServive">
            Provides access to the Microsoft.Xna.Framework.Graphics.GraphicsDevice.
            </param>
        </member>
        <member name="M:Zelda.Overlays.NoiseOverlay.Dispose">
            <summary>
            Disposes this NoiseOverlay and its underlying <see cref="T:Atom.Xna.Effects.NoiseEffect"/>.
            </summary>
        </member>
        <member name="P:Zelda.Overlays.NoiseOverlay.Noise">
            <summary>
            Gets the <see cref="T:Atom.Xna.Effects.NoiseEffect"/> used by this NoiseOverlay.
            </summary>
        </member>
        <member name="M:Zelda.Overlays.NoiseOverlay.Zelda#Overlays#ISceneOverlay#Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this NoiseOverlay.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Overlays.NoiseOverlay.Zelda#Overlays#ISceneOverlay#Draw(Zelda.ZeldaDrawContext)">
            <summary>
            Draw this NoiseOverlay.
            </summary>
            <param name="drawContext">
            The current ZeldaDrawContext.
            </param>
        </member>
        <member name="M:Zelda.Overlays.NoiseOverlay.Zelda#Overlays#ISceneOverlay#AddedToScene(Zelda.ZeldaScene)">
            <summary>
            Gets called when this <see cref="T:Zelda.Overlays.ISceneOverlay"/> has been added to the given <see cref="T:Zelda.Overlays.ISceneOverlay"/>.
            </summary>
            <param name="scene">The scene.</param>
        </member>
        <member name="M:Zelda.Overlays.NoiseOverlay.Zelda#Overlays#ISceneOverlay#RemovedFromScene(Zelda.ZeldaScene)">
            <summary>
            Gets called when this <see cref="T:Zelda.Overlays.ISceneOverlay"/> has been removed from the given <see cref="T:Zelda.Overlays.ISceneOverlay"/>.
            </summary>
            <param name="scene">The scene.</param>
        </member>
        <member name="M:Zelda.Overlays.NoiseOverlay.OnCameraScrollChanged(System.Object,Atom.ChangedValue{Atom.Math.Vector2})">
            <summary>
            Gets called when the scroll property of the Camera has changed.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="F:Zelda.Overlays.NoiseOverlay.effect">
            <summary>
            The <see cref="P:Zelda.Overlays.NoiseOverlay.Noise"/> effect that is used by this NoiseOverlay.
            </summary>
        </member>
        <member name="T:Zelda.Overlays.ParticleEffectOverlay">
            <summary>
            Defines an <see cref="T:Zelda.Overlays.ISceneOverlay"/> that contains a ParticleEffect.
            </summary>
        </member>
        <member name="P:Zelda.Overlays.ParticleEffectOverlay.Effect">
            <summary>
            Gets the <see cref="T:Atom.Xna.Particles.ParticleEffect"/> that is associated with this ParticleEffectOverlay.
            </summary>
        </member>
        <member name="M:Zelda.Overlays.ParticleEffectOverlay.#ctor(Atom.Xna.Particles.ParticleEffect)">
            <summary>
            Initializes a new instance of the ParticleEffectOverlay class.
            </summary>
            <param name="effect">
            The ParticleEffect to overlay with the Scene.
            </param>
        </member>
        <member name="M:Zelda.Overlays.ParticleEffectOverlay.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this ScrollingParticleEffectOverlay.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Overlays.ParticleEffectOverlay.Draw(Zelda.ZeldaDrawContext)">
            <summary>
            Draws this ScrollingParticleEffectOverlay.
            </summary>
            <param name="drawContext">
            The current ZeldaDrawContext.
            </param>
        </member>
        <member name="M:Zelda.Overlays.ParticleEffectOverlay.AddedToScene(Zelda.ZeldaScene)">
            <summary>
            Gets called when this ISceneOverlay has been added to the given <see cref="T:Zelda.ZeldaScene"/>.
            </summary>
            <remarks>
            This method should not directly be called from user-code.
            </remarks>
            <param name="scene">
            The related ZeldaScene.
            </param>
        </member>
        <member name="M:Zelda.Overlays.ParticleEffectOverlay.RemovedFromScene(Zelda.ZeldaScene)">
            <summary>
            Gets called when this ISceneOverlay has been removed from the given <see cref="T:Zelda.ZeldaScene"/>.
            </summary>
            <remarks>
            This method should not directly be called from user-code.
            </remarks>
            <param name="scene">
            The related ZeldaScene.
            </param>
        </member>
        <member name="F:Zelda.Overlays.ParticleEffectOverlay.effect">
            <summary>
            The <see cref="T:Atom.Xna.Particles.ParticleEffect"/> that is associated with this ParticleEffectOverlay.
            </summary>
        </member>
        <member name="T:Zelda.Overlays.ScrollingParticleEffectOverlay">
            <summary>
            Defines an <see cref="T:Zelda.Overlays.ISceneOverlay"/> that contains a ParticleEffect.
            </summary>
        </member>
        <member name="M:Zelda.Overlays.ScrollingParticleEffectOverlay.#ctor(Atom.Xna.Particles.ParticleEffect)">
            <summary>
            Initializes a new instance of the ScrollingParticleEffectOverlay class.
            </summary>
            <param name="effect">
            The ParticleEffect to overlay with the Scene.
            </param>
        </member>
        <member name="M:Zelda.Overlays.ScrollingParticleEffectOverlay.AddedToScene(Zelda.ZeldaScene)">
            <summary>
            Gets called when this ISceneOverlay has been added to the given <see cref="T:Zelda.ZeldaScene"/>.
            </summary>
            <remarks>
            This method should not directly be called from user-code.
            </remarks>
            <param name="scene">
            The related ZeldaScene.
            </param>
        </member>
        <member name="M:Zelda.Overlays.ScrollingParticleEffectOverlay.RemovedFromScene(Zelda.ZeldaScene)">
            <summary>
            Gets called when this ISceneOverlay has been removed from the given <see cref="T:Zelda.ZeldaScene"/>.
            </summary>
            <remarks>
            This method should not directly be called from user-code.
            </remarks>
            <param name="scene">
            The related ZeldaScene.
            </param>
        </member>
        <member name="M:Zelda.Overlays.ScrollingParticleEffectOverlay.OnCameraScrollChanged(System.Object,Atom.ChangedValue{Atom.Math.Vector2})">
            <summary>
            Gets called when the scroll property of the Camera has changed.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:Zelda.Overlays.ScrollingTextureOverlay">
            <summary>
            A <see cref="T:Zelda.Overlays.ISceneOverlay"/> that is a texture
            that scrolls over the scene, repeating itself.
            This is a sealed class.
            </summary>
        </member>
        <member name="P:Zelda.Overlays.ScrollingTextureOverlay.Color">
            <summary>
            Gets or sets the Xna.Color tinting applied to this <see cref="T:Zelda.Overlays.ISceneOverlay"/>.
            </summary>
            <value>The default value is Xna.Color.White.</value>
        </member>
        <member name="P:Zelda.Overlays.ScrollingTextureOverlay.Alpha">
            <summary>
            Gets or sets the alpha value of the ScrollingTextureOverlay's <see cref="T:Microsoft.Xna.Framework.Color"/>.
            </summary>
            <exception cref="T:System.ArgumentException">
            Set: If the given value is greater than 1 or less than 0.
            </exception>
        </member>
        <member name="P:Zelda.Overlays.ScrollingTextureOverlay.ScrollSpeed">
            <summary>
            Gets or sets the scroll speed of this <see cref="T:Zelda.Overlays.ScrollingTextureOverlay"/>.
            </summary>
        </member>
        <member name="P:Zelda.Overlays.ScrollingTextureOverlay.Scroll">
            <summary>
            Gets or sets the Scroll value of the ScrollingTextureOverlay.
            </summary>
        </member>
        <member name="M:Zelda.Overlays.ScrollingTextureOverlay.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Overlays.ScrollingTextureOverlay"/> class.
            </summary>
            <param name="texture">
            The overlay's texture. Must be atleast as big as the window.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="texture"/> is null.
            </exception>
        </member>
        <member name="M:Zelda.Overlays.ScrollingTextureOverlay.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this <see cref="T:Zelda.Overlays.ISceneOverlay"/>.
            </summary>
            <param name="updateContext">The current <see cref="T:Zelda.ZeldaUpdateContext"/>.</param>
        </member>
        <member name="M:Zelda.Overlays.ScrollingTextureOverlay.Draw(Zelda.ZeldaDrawContext)">
            <summary>
            Draws this <see cref="T:Zelda.Overlays.ISceneOverlay"/>.
            </summary>
            <param name="drawContext">
            The current <see cref="T:Zelda.ZeldaDrawContext"/>.
            </param>
        </member>
        <member name="M:Zelda.Overlays.ScrollingTextureOverlay.AddedToScene(Zelda.ZeldaScene)">
            <summary>
            Gets called when this <see cref="T:Zelda.Overlays.ISceneOverlay"/> has been added to the given <see cref="T:Zelda.Overlays.ISceneOverlay"/>.
            </summary>
            <param name="scene">The scene.</param>
        </member>
        <member name="M:Zelda.Overlays.ScrollingTextureOverlay.RemovedFromScene(Zelda.ZeldaScene)">
            <summary>
            Gets called when this <see cref="T:Zelda.Overlays.ISceneOverlay"/> has been removed from the given <see cref="T:Zelda.Overlays.ISceneOverlay"/>.
            </summary>
            <param name="scene">The scene.</param>
        </member>
        <member name="M:Zelda.Overlays.ScrollingTextureOverlay.Camera_ScrollChanged(System.Object,Atom.ChangedValue{Atom.Math.Vector2})">
            <summary>
            Gets called when the scroll property of the Camera has changed.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="F:Zelda.Overlays.ScrollingTextureOverlay.color">
            <summary>
            Stores the Xna.Color tinting applied to this <see cref="T:Zelda.Overlays.ISceneOverlay"/>.
            </summary>
        </member>
        <member name="F:Zelda.Overlays.ScrollingTextureOverlay.scrollSpeed">
            <summary>
            Gets or sets the scroll speed applied each frame.
            </summary>
        </member>
        <member name="F:Zelda.Overlays.ScrollingTextureOverlay.scroll">
            <summary>
            Gets or sets the Scroll value of the ScrollingTextureOverlay.
            </summary>
        </member>
        <member name="F:Zelda.Overlays.ScrollingTextureOverlay.texture">
            <summary>
            The fog texture.
            </summary>
        </member>
        <member name="F:Zelda.Overlays.ScrollingTextureOverlay.scrollChanged">
            <summary>
            Stores the delegate that gets called when the scroll value has changed.
            </summary>
        </member>
        <member name="T:Zelda.GameFolders">
            <summary>
            Provides access to various game related folder paths.
            </summary>
        </member>
        <member name="P:Zelda.GameFolders.Profiles">
            <summary>
            Gets the full path to the folder that contains the profile data.
            </summary>
        </member>
        <member name="P:Zelda.GameFolders.Logs">
            <summary>
            Gets the full path to the folder that contains the logging data.
            </summary>
        </member>
        <member name="P:Zelda.GameFolders.Screenshots">
            <summary>
            Gets the full path to the folder that contains the screenshots that have been taken by the user.
            </summary>
        </member>
        <member name="P:Zelda.GameFolders.UserData">
            <summary>
            Gets the full path to the folder that contains the any user specific data.
            </summary>
        </member>
        <member name="T:Zelda.Quests.Events.ExecuteActionEvent">
            <summary>
            Implements an <see cref="T:Zelda.Quests.IQuestEvent"/> that when executed excutes an <see cref="T:Atom.IAction"/>.
            </summary>
        </member>
        <member name="P:Zelda.Quests.Events.ExecuteActionEvent.Action">
            <summary>
            Gets or sets the <see cref="T:Atom.IAction"/> that gets executed when this ExecuteActionEvent gets executed.
            </summary>
        </member>
        <member name="M:Zelda.Quests.Events.ExecuteActionEvent.Execute(Zelda.Quests.Quest)">
            <summary>
            Executes this ExecuteActionEvent.
            </summary>
            <param name="quest">
            The related Quest.
            </param>
        </member>
        <member name="M:Zelda.Quests.Events.ExecuteActionEvent.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Quests.Events.ExecuteActionEvent.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="T:Zelda.Quests.Events.GiveQuestItemEvent">
            <summary>
            Defines an <see cref="T:Zelda.Quests.IQuestEvent"/> that gives the PlayerEntity
            a specific item when executed. This class can't be inherited.
            </summary>
        </member>
        <member name="P:Zelda.Quests.Events.GiveQuestItemEvent.ItemName">
            <summary>
            Gets or sets the name that uniquely identifies the Item given by this GiveQuestItemEvent.
            </summary>
            <value>The default value is null.</value>
        </member>
        <member name="M:Zelda.Quests.Events.GiveQuestItemEvent.Setup(Zelda.IZeldaServiceProvider)">
            <summary>
            Setups this GiveQuestItemEvent.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Quests.Events.GiveQuestItemEvent.Execute(Zelda.Quests.Quest)">
            <summary>
            Executes this <see cref="T:Zelda.Quests.IQuestEvent"/>.
            </summary>
            <param name="quest">
            The related Quest.
            </param>
        </member>
        <member name="M:Zelda.Quests.Events.GiveQuestItemEvent.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Quests.Events.GiveQuestItemEvent.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Quests.Events.GiveQuestItemEvent.itemManager">
            <summary>
            Provides the mechanisms required to load <see cref="T:Zelda.Items.Item"/>s.
            </summary>
        </member>
        <member name="T:Zelda.Quests.Events.LearnSongEvent">
            <summary>
            Defines an IQuestEvent that learns the player an ocarina Song.
            </summary>
        </member>
        <member name="P:Zelda.Quests.Events.LearnSongEvent.SongTypeName">
            <summary>
            Gets or sets the name that uniquely identifies the ocarina Song learned by this LearnSongEvent.
            </summary>
            <value>The default value is null.</value>
        </member>
        <member name="P:Zelda.Quests.Events.LearnSongEvent.ShouldPlaySongMusic">
            <summary>
            Gets or sets a value indicating whether the song music
            should be played once the song has been learned.
            </summary>
        </member>
        <member name="M:Zelda.Quests.Events.LearnSongEvent.Execute(Zelda.Quests.Quest)">
            <summary>
            Executes this <see cref="T:Zelda.Quests.IQuestEvent"/>.
            </summary>
            <param name="quest">
            The related Quest.
            </param>
        </member>
        <member name="M:Zelda.Quests.Events.LearnSongEvent.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Quests.Events.LearnSongEvent.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Quests.Events.LearnSongEvent.serviceProvider">
            <summary>
            Provides fast access to game-related services.
            </summary>
        </member>
        <member name="T:Zelda.Quests.Events.RemovePersistentObjectEvent">
            <summary>
            Defines an <see cref="T:Zelda.Quests.IQuestEvent"/> that removes
            an <see cref="T:Zelda.Entities.IPersistentEntity"/> from the world
            when executed.
            </summary>
        </member>
        <member name="P:Zelda.Quests.Events.RemovePersistentObjectEvent.ObjectName">
            <summary>
            Gets or sets the name of the persistent
            object that gets removed by this IQuestEvent.
            </summary>
            <value>The default value is null.</value>
        </member>
        <member name="P:Zelda.Quests.Events.RemovePersistentObjectEvent.SceneName">
            <summary>
            Gets or sets the name of the Scene that contains
            the object to remove.
            </summary>
            <remarks>
            If this string property is null or empty 
            then the current scene of the player is assumed.
            </remarks>
            <value>The default value is null.</value>
        </member>
        <member name="M:Zelda.Quests.Events.RemovePersistentObjectEvent.Execute(Zelda.Quests.Quest)">
            <summary>
            Executes this <see cref="T:Zelda.Quests.IQuestEvent"/>.
            </summary>
            <param name="quest">
            The related Quest.
            </param>
        </member>
        <member name="M:Zelda.Quests.Events.RemovePersistentObjectEvent.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Quests.Events.RemovePersistentObjectEvent.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="T:Zelda.Quests.Goals.GetItemsGoal">
            <summary>
            Defines an <see cref="T:Zelda.Quests.IQuestGoal"/> that requires
            the player to get N-amount items of type X.
            This class can't be inherited.
            </summary>
            <todo>
            Tracking of the goal's state using the StateChanged
            event isn't implemented yet.
            </todo>
        </member>
        <member name="E:Zelda.Quests.Goals.GetItemsGoal.StateChanged">
            <summary>
            Invoked when the state of this IQuestGoal has changed.
            </summary>
        </member>
        <member name="P:Zelda.Quests.Goals.GetItemsGoal.ItemName">
            <summary>
            Gets or sets the name of the item required to be picked-up for this GetItemsGoal.
            </summary>
        </member>
        <member name="P:Zelda.Quests.Goals.GetItemsGoal.ItemAmount">
            <summary>
            Gets or sets the number of items (of the same type) required to be picked-up for this GetItemsGoal.
            </summary>
        </member>
        <member name="P:Zelda.Quests.Goals.GetItemsGoal.State">
            <summary>
            Gets the state of this GetItemsGoal in percentage.
            </summary>
        </member>
        <member name="P:Zelda.Quests.Goals.GetItemsGoal.StateDescription">
            <summary>
            Gets a short (localized) string that descripes
            the current of this GetItemsGoal.
            </summary>
        </member>
        <member name="M:Zelda.Quests.Goals.GetItemsGoal.Setup(Zelda.IZeldaServiceProvider)">
            <summary>
            Setups this <see cref="T:Zelda.Quests.Goals.GetItemsGoal"/>.
            </summary>
            <param name="serviceProvider">
            Provides a fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Quests.Goals.GetItemsGoal.IsAccomplished(Zelda.Entities.PlayerEntity)">
            <summary>
            Gets a value indicating whether the player accomplished this GetItemsGoal.
            </summary>
            <param name="player">
            The related PlayerEntity.
            </param>
            <returns>
            true if the given PlayerEntity has accomplished this IQuestGoal; 
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Quests.Goals.GetItemsGoal.OnAccepted(Zelda.Entities.PlayerEntity)">
            <summary>
            Fired when the player has accepeted the quest this GetItemsGoal is related to.
            </summary>
            <param name="player">
            The related PlayerEntity.
            </param>
        </member>
        <member name="M:Zelda.Quests.Goals.GetItemsGoal.OnTurnIn(Zelda.Entities.PlayerEntity)">
            <summary>
            Fired when the player has accomplished all goals (including this!) of a <see cref="T:Zelda.Quests.Quest"/>.
            </summary>
            <param name="player">
            The related PlayerEntity.
            </param>
        </member>
        <member name="M:Zelda.Quests.Goals.GetItemsGoal.OnPlayerCollectedOrDroppedItem(System.Object,Zelda.Items.Item)">
            <summary>
            Called when the player has collected an Item.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
            <param name="item">
            The Item that the player has collected.
            </param>
        </member>
        <member name="M:Zelda.Quests.Goals.GetItemsGoal.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Quests.Goals.GetItemsGoal.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Quests.Goals.GetItemsGoal.Zelda#Saving#IStateSaveable#SerializeState(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the current state of this IStateSaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Quests.Goals.GetItemsGoal.Zelda#Saving#IStateSaveable#DeserializeState(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the current state of this IStateSaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Quests.Goals.GetItemsGoal.itemName">
            <summary>
            Tue storage field of the <see cref="P:Zelda.Quests.Goals.GetItemsGoal.ItemName"/> property.
            </summary>
        </member>
        <member name="F:Zelda.Quests.Goals.GetItemsGoal.item">
            <summary>
            Identifies the Item that is required to be found for this Quest.
            </summary>
        </member>
        <member name="F:Zelda.Quests.Goals.GetItemsGoal.player">
            <summary>
            Identifies the PlayerEntity that has accepted this GetItemsGoal.
            </summary>
        </member>
        <member name="F:Zelda.Quests.Goals.GetItemsGoal.itemManager">
            <summary>
            Identifies the ItemManager that is used to load the Item.
            </summary>
        </member>
        <member name="T:Zelda.Quests.Goals.KillEnemiesGoal">
            <summary>
            Defines an <see cref="T:Zelda.Quests.IQuestGoal"/> that requires
            the player to kill N-amount enemies of type X.
            This class can't be inherited.
            </summary>
        </member>
        <member name="E:Zelda.Quests.Goals.KillEnemiesGoal.StateChanged">
            <summary>
            Invoked when the state of this KillEnemiesGoal has changed.
            </summary>
        </member>
        <member name="P:Zelda.Quests.Goals.KillEnemiesGoal.EnemyName">
            <summary>
            Gets or sets the name of the enemy that is required to be killed for this GetItemsGoal.
            </summary>
        </member>
        <member name="P:Zelda.Quests.Goals.KillEnemiesGoal.EnemyTemplate">
            <summary>
            Gets the template of the Enemy that needs to be killed for this KillEnemiesGoal.
            </summary>
        </member>
        <member name="P:Zelda.Quests.Goals.KillEnemiesGoal.KillAmount">
            <summary>
            Gets or sets the number of enemies (of the same type) are required to be killed for this GetItemsGoal.
            </summary>
        </member>
        <member name="P:Zelda.Quests.Goals.KillEnemiesGoal.State">
            <summary>
            Gets the state of this KillEnemiesGoal in percentage.
            </summary>
        </member>
        <member name="P:Zelda.Quests.Goals.KillEnemiesGoal.StateDescription">
            <summary>
            Gets a short (localized) string that descripes
            the current of this GetItemsGoal.
            </summary>
        </member>
        <member name="M:Zelda.Quests.Goals.KillEnemiesGoal.#ctor">
            <summary>
            Initializes a new instance of the KillEnemiesGoal class.
            </summary>
        </member>
        <member name="M:Zelda.Quests.Goals.KillEnemiesGoal.Setup(Zelda.IZeldaServiceProvider)">
            <summary>
            Setups this KillEnemiesGoal.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Quests.Goals.KillEnemiesGoal.IsAccomplished(Zelda.Entities.PlayerEntity)">
            <summary>
            Gets a value indicating whether the player has accomplished this KillEnemiesGoal.
            </summary>
            <param name="player">
            The related PlayerEntity.
            </param>
            <returns>
            true if the given PlayerEntity has accomplished this IQuestGoal; 
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Quests.Goals.KillEnemiesGoal.OnAccepted(Zelda.Entities.PlayerEntity)">
            <summary>
            Fired when the player has accepeted the quest this KillEnemiesGoal is related to.
            </summary>
            <param name="player">
            The related PlayerEntity.
            </param>
        </member>
        <member name="M:Zelda.Quests.Goals.KillEnemiesGoal.OnTurnIn(Zelda.Entities.PlayerEntity)">
            <summary>
            Fired when the player has accomplished all goals (including this!) of a <see cref="T:Zelda.Quests.Quest"/>.
            </summary>
            <param name="player">
            The related PlayerEntity.
            </param>
        </member>
        <member name="M:Zelda.Quests.Goals.KillEnemiesGoal.OnEntityKilled(System.Object,Zelda.Entities.ZeldaEntity)">
            <summary>
            Gets called when the player has killed an enemy.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="entity">The ZeldaEntity that was killed.</param>
        </member>
        <member name="M:Zelda.Quests.Goals.KillEnemiesGoal.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Quests.Goals.KillEnemiesGoal.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Quests.Goals.KillEnemiesGoal.Zelda#Saving#IStateSaveable#SerializeState(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the current state of this IStateSaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Quests.Goals.KillEnemiesGoal.Zelda#Saving#IStateSaveable#DeserializeState(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the current state of this IStateSaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Quests.Goals.KillEnemiesGoal.killedCount">
            <summary>
            The amount of enemies the player has killed so far.
            </summary>
        </member>
        <member name="F:Zelda.Quests.Goals.KillEnemiesGoal.enemyName">
            <summary>
            The storage field of the <see cref="P:Zelda.Quests.Goals.KillEnemiesGoal.EnemyName"/> property.
            </summary>
        </member>
        <member name="F:Zelda.Quests.Goals.KillEnemiesGoal.templateManager">
            <summary>
            Provides a mechanism for loading the <see cref="P:Zelda.Quests.Goals.KillEnemiesGoal.EnemyTemplate"/>.
            </summary>
        </member>
        <member name="F:Zelda.Quests.Goals.KillEnemiesGoal.onEntityKilled">
            <summary>
            Stores the event handler that gets invoked when the player has killed an enemy.
            </summary>
        </member>
        <member name="T:Zelda.Quests.IQuestEvent">
            <summary>
            Represents the interface an object can implement
            to allow notification when a quest has been accomplished.
            </summary>
        </member>
        <member name="M:Zelda.Quests.IQuestEvent.Execute(Zelda.Quests.Quest)">
            <summary>
            Executes this <see cref="T:Zelda.Quests.IQuestEvent"/>.
            </summary>
            <param name="quest">
            The related Quest.
            </param>
        </member>
        <member name="T:Zelda.Quests.IQuestGoal">
            <summary>
            Represents a single goal within a <see cref="T:Zelda.Quests.Quest"/>.
            </summary>
        </member>
        <member name="E:Zelda.Quests.IQuestGoal.StateChanged">
            <summary>
            Invoked when the state of this IQuestGoal has changed.
            </summary>
        </member>
        <member name="P:Zelda.Quests.IQuestGoal.State">
            <summary>
            Gets the state of this IQuestGoal in percentage.
            </summary>
        </member>
        <member name="P:Zelda.Quests.IQuestGoal.StateDescription">
            <summary>
            Gets a short (localized) string that descripes
            the current of this IQuestGoal.
            </summary>
        </member>
        <member name="M:Zelda.Quests.IQuestGoal.IsAccomplished(Zelda.Entities.PlayerEntity)">
            <summary>
            Gets a value indicating whether the player has accomplished this IQuestGoal.
            </summary>
            <param name="player">
            The related PlayerEntity.
            </param>
            <returns>
            true if the given PlayerEntity has accomplished this IQuestGoal; 
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Quests.IQuestGoal.OnAccepted(Zelda.Entities.PlayerEntity)">
            <summary>
            Fired when the player has accepeted the quest this IQuestGoal is related to.
            </summary>
            <param name="player">
            The related PlayerEntity.
            </param>
        </member>
        <member name="M:Zelda.Quests.IQuestGoal.OnTurnIn(Zelda.Entities.PlayerEntity)">
            <summary>
            Fired when the player has accomplished all goals (including this!) of a <see cref="T:Zelda.Quests.Quest"/>.
            </summary>
            <param name="player">
            The related PlayerEntity.
            </param>
        </member>
        <member name="T:Zelda.Quests.IQuestReward">
            <summary>
            Represents a single reward of a <see cref="T:Zelda.Quests.Quest"/>. 
            </summary>
            <remarks>
            The rewards of a <see cref="T:Zelda.Quests.Quest"/> are rewarded to the player
            once he has accomplished all <see cref="T:Zelda.Quests.IQuestGoal"/>s.
            </remarks>
        </member>
        <member name="M:Zelda.Quests.IQuestReward.Reward(Zelda.Entities.PlayerEntity)">
            <summary>
            Rewards this IQuestReward to the player.
            </summary>
            <param name="player">
            The related PlayerEntity.
            </param>
        </member>
        <member name="T:Zelda.Quests.Quest">
            <summary>
            Represents a quest of the player.
            This class can't be inherited.
            </summary>
            <remarks>
            Quests drive the story and npc interaction in the game.
            </remarks>
        </member>
        <member name="E:Zelda.Quests.Quest.Accomplished">
            <summary>
            Called when the player has accomplished all goals of this Quest.
            </summary>
        </member>
        <member name="F:Zelda.Quests.Quest.Extension">
            <summary>
            The extension of the quest definition file. ".zq"
            </summary>
        </member>
        <member name="P:Zelda.Quests.Quest.QuestType">
            <summary>
            Gets or sets the type of this Quest.
            </summary>
        </member>
        <member name="P:Zelda.Quests.Quest.DeliverLocation">
            <summary>
            Gets or sets the name of the object/location this Quest must be delivered at.
            </summary>
            <remarks>
            The value of this property is interpeted depending of the set <see cref="P:Zelda.Quests.Quest.DeliverType"/>.
            </remarks>
        </member>
        <member name="P:Zelda.Quests.Quest.DeliverType">
            <summary>
            Gets or sets a value indicating how or where
            the player gets this Quest.
            </summary>
        </member>
        <member name="P:Zelda.Quests.Quest.IsRepeatable">
            <summary>
            Gets or sets a value indicating whether this Quest is repeatable.
            </summary>
            <value>The default value is false.</value>
        </member>
        <member name="P:Zelda.Quests.Quest.Level">
            <summary>
            Gets or sets the level of this Quest.
            </summary>
            <remarks>
            The level of the Quest identifies the difficulty of the Quest.
            </remarks>
        </member>
        <member name="P:Zelda.Quests.Quest.IsStateHidden">
            <summary>
            Gets or sets a value indicating whether the state of the goals
            of this Quest is hidden from the user.
            </summary>
        </member>
        <member name="P:Zelda.Quests.Quest.IsTurnedIn">
            <summary>
            Gets a value indicating whether the player has turned this Quest in.
            </summary>
        </member>
        <member name="P:Zelda.Quests.Quest.IsActive">
            <summary>
            Gets a value indicating whether this quest has been accepted by the player
            and is currently ongoing.
            </summary>
        </member>
        <member name="P:Zelda.Quests.Quest.State">
            <summary>
            Gets the state of this Quest in percentage.
            </summary>
        </member>
        <member name="P:Zelda.Quests.Quest.Requirements">
            <summary>
            Gets a read-only enumeration over the <see cref="T:Zelda.Core.Requirements.IRequirement"/>s of this Quest.
            </summary>
        </member>
        <member name="P:Zelda.Quests.Quest.Goals">
            <summary>
            Gets a read-only enumeration over the <see cref="T:Zelda.Quests.IQuestGoal"/>s of this Quest.
            </summary>
        </member>
        <member name="P:Zelda.Quests.Quest.Rewards">
            <summary>
            Gets a read-only enumeration over the <see cref="T:Zelda.Quests.IQuestReward"/>s of this Quest.
            </summary>
        </member>
        <member name="P:Zelda.Quests.Quest.StartEvents">
            <summary>
            Gets a read-only enumeration over the <see cref="T:Zelda.Quests.IQuestEvent"/>s
            that are executed when the player has accepted this Quest.
            </summary>
        </member>
        <member name="P:Zelda.Quests.Quest.CompletionEvents">
            <summary>
            Gets a read-only enumeration over the <see cref="T:Zelda.Quests.IQuestEvent"/>s
            that are executed after the player has completed this Quest.
            </summary>
        </member>
        <member name="P:Zelda.Quests.Quest.Name">
            <summary>
            Gets or sets the name that uniquely identifies this Quest.
            </summary>
        </member>
        <member name="P:Zelda.Quests.Quest.LocalizedName">
            <summary>
            Gets the localized name of this Quest.
            </summary>
        </member>
        <member name="P:Zelda.Quests.Quest.TextStart">
            <summary>
            Gets or sets the Resource Id used to receive 
            the text that is shown as an introduction to this Quest.
            </summary>
        </member>
        <member name="P:Zelda.Quests.Quest.LocalizedTextStart">
            <summary>
            Gets the localized text that shown at the start of this Quest.
            </summary>
        </member>
        <member name="P:Zelda.Quests.Quest.TextDescription">
            <summary>
            Gets or sets the Resource Id used to receive 
            the localized description of this Quest.
            </summary>
        </member>
        <member name="P:Zelda.Quests.Quest.LocalizedTextDescription">
            <summary>
            Gets the localized description of this Quest.
            </summary>
        </member>
        <member name="P:Zelda.Quests.Quest.TextNotCompleted">
            <summary>
            Gets or sets the Resource Id used to receive 
            the text that is shown when this Quest 
            has not been completed yet.
            </summary>
        </member>
        <member name="P:Zelda.Quests.Quest.LocalizedTextNotCompleted">
            <summary>
            Gets the localized text that shown when this Quest
            has not been completed yet .
            </summary>
        </member>
        <member name="P:Zelda.Quests.Quest.TextCompleted">
            <summary>
            Gets or sets the Resource Id used to receive 
            the text that is shown when this Quest ends.
            </summary>
        </member>
        <member name="P:Zelda.Quests.Quest.LocalizedTextCompleted">
            <summary>
            Gets the localized text that shown when this Quest ends.
            </summary>
        </member>
        <member name="P:Zelda.Quests.Quest.GoalCount">
            <summary>
            Gets a value indicating how many different goals this Quest has.
            </summary>
        </member>
        <member name="P:Zelda.Quests.Quest.Player">
            <summary>
            Gets the PlayerEntity that currently does this Quest.
            </summary>
        </member>
        <member name="M:Zelda.Quests.Quest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Quests.Quest"/> class.
            </summary>
        </member>
        <member name="M:Zelda.Quests.Quest.Accept(Zelda.Entities.PlayerEntity)">
            <summary>
            Tries to accept this Quest for the given player.
            </summary>
            <param name="player">
            The related PlayerEntity.
            </param>
            <returns>
            true if the player has started the quest;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Quests.Quest.CanAccept(Zelda.Entities.PlayerEntity)">
            <summary>
            Gets a value indicating whether this quest can currently
            be accepted by the given player.
            </summary>
            <param name="player">
            The related PlayerEntity.
            </param>
            <returns>
            true if the player can currently start the quest; -or otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Quests.Quest.CanEverAccept(Zelda.Entities.PlayerEntity)">
            <summary>
            Gets a value indicating whether the given player is expected to ever be able accept this quest.
            </summary>
            <param name="player">
            The related PlayerEntity.
            </param>
            <returns>
            true if it will ever again be able to be accepted.
            </returns>
        </member>
        <member name="M:Zelda.Quests.Quest.SetupOnQuestAccepted(Zelda.Entities.PlayerEntity)">
            <summary>
            Called when this quest has been accepted.
            </summary>
            <param name="player">
            The related player entity.
            </param>
        </member>
        <member name="M:Zelda.Quests.Quest.OnQuestAccepted(Zelda.Entities.PlayerEntity)">
            <summary>
            Called when this quest has been accepted.
            </summary>
            <param name="player">
            The related player entity.
            </param>
        </member>
        <member name="M:Zelda.Quests.Quest.TurnIn">
            <summary>
            Tries to turn in this Quest.
            </summary>
            <returns>
            true if this Quest has been turned-in;
            otherwise false.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the player has not accepted this quest.
            </exception>
        </member>
        <member name="M:Zelda.Quests.Quest.FulfillsRequirements(Zelda.Entities.PlayerEntity)">
            <summary>
            Gets a value indicating whether the player fulfills 
            all <see cref="T:Zelda.Core.Requirements.IRequirement"/>s to start to this Quest.
            </summary>
            <param name="player">
            The related PlayerEntity.
            </param>
            <returns>
            true if the player fulfills alls requirements;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Quests.Quest.HasAccomplishedGoals">
            <summary>
            Gets a value indicating whether the player has accomplished 
            all <see cref="T:Zelda.Quests.IQuestGoal"/>s to finish to this Quest.
            </summary>
            <returns>
            true if the player has accomplished all goals;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Quests.Quest.AddRequirement(Zelda.Core.Requirements.IRequirement)">
            <summary>
            Adds the given <see cref="T:Zelda.Core.Requirements.IRequirement"/> to this Quest.
            </summary>
            <param name="requirement">
            The IQuestRequirement to add.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="requirement"/> is null.
            </exception>
        </member>
        <member name="M:Zelda.Quests.Quest.AddGoal(Zelda.Quests.IQuestGoal)">
            <summary>
            Adds the given <see cref="T:Zelda.Quests.IQuestGoal"/> to this Quest.
            </summary>
            <param name="goal">
            The IQuestGoal to add.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="goal"/> is null.
            </exception>
        </member>
        <member name="M:Zelda.Quests.Quest.AddReward(Zelda.Quests.IQuestReward)">
            <summary>
            Adds the given <see cref="T:Zelda.Quests.IQuestReward"/> to this Quest.
            </summary>
            <param name="reward">
            The IQuestReward to add.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="reward"/> is null.
            </exception>
        </member>
        <member name="M:Zelda.Quests.Quest.AddStartEvent(Zelda.Quests.IQuestEvent)">
            <summary>
            Adds the given <see cref="T:Zelda.Quests.IQuestEvent"/> to the list of events that 
            get called when this Quest has been accepted.
            </summary>
            <param name="e">
            The IQuestEvent to add.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="e"/> is null.
            </exception>
        </member>
        <member name="M:Zelda.Quests.Quest.AddCompletionEvent(Zelda.Quests.IQuestEvent)">
            <summary>
            Adds the given <see cref="T:Zelda.Quests.IQuestEvent"/> to the list of events that 
            get called when this Quest has been completed.
            </summary>
            <param name="e">
            The IQuestEvent to add.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="e"/> is null.
            </exception>
        </member>
        <member name="M:Zelda.Quests.Quest.RemoveRequirement(Zelda.Core.Requirements.IRequirement)">
            <summary> 
            Tries to remove the given <see cref="T:Zelda.Core.Requirements.IRequirement"/> from this Quest.
            </summary>
            <param name="requirement">
            The IQuestRequirement to remove.
            </param>
            <returns>
            true if the given <paramref name="requirement"/> has been removed;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Quests.Quest.RemoveGoal(Zelda.Quests.IQuestGoal)">
            <summary> 
            Tries to remove the given <see cref="T:Zelda.Quests.IQuestGoal"/> from this Quest.
            </summary>
            <param name="goal">
            The IQuestGoal to remove.
            </param>
            <returns>
            true if the given <paramref name="goal"/> has been removed;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Quests.Quest.RemoveReward(Zelda.Quests.IQuestReward)">
            <summary> 
            Tries to remove the given <see cref="T:Zelda.Quests.IQuestReward"/> from this Quest.
            </summary>
            <param name="reward">
            The IQuestReward to remove.
            </param>
            <returns>
            true if the given <paramref name="reward"/> has been removed;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Quests.Quest.RemoveStartEvent(Zelda.Quests.IQuestEvent)">
            <summary> 
            Tries to remove the given <see cref="T:Zelda.Quests.IQuestEvent"/> from this Quest.
            </summary>
            <param name="e">
            The IQuestCompletedEvent to remove.
            </param>
            <returns>
            true if the given <see cref="T:Zelda.Quests.IQuestEvent"/> has been removed;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Quests.Quest.RemoveCompletionEvent(Zelda.Quests.IQuestEvent)">
            <summary> 
            Tries to remove the given <see cref="T:Zelda.Quests.IQuestEvent"/> from this Quest.
            </summary>
            <param name="e">
            The IQuestCompletedEvent to remove.
            </param>
            <returns>
            true if the given <see cref="T:Zelda.Quests.IQuestEvent"/> has been removed;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Quests.Quest.GetQuestColor(Zelda.Quests.Quest,Zelda.Entities.PlayerEntity)">
            <summary>
            Utility method that returns the color associated
            with the difficulty of the quest.
            </summary>
            <param name="quest">
            The quest.
            </param>
            <param name="player">
            The player.
            </param>
            <returns>
            The associated Color.
            </returns>
        </member>
        <member name="M:Zelda.Quests.Quest.OnGoalStateChanged(System.Object,System.EventArgs)">
            <summary>
            Gets called when the state of one of the <see cref="T:Zelda.Quests.IQuestGoal"/>s of this Quest has changed. 
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The EventArgs that contains the event data.</param>
        </member>
        <member name="M:Zelda.Quests.Quest.OnAccomplishedGoals">
            <summary>
            Fires the Accomplished and QuestLog.QuestAccomplished events.
            </summary>
        </member>
        <member name="M:Zelda.Quests.Quest.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes/Writes the data to descripe this Quest.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Quests.Quest.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes/Reads the data to descripe this Quest.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Quests.Quest.SerializeState(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes/Writes the current state of this Quest.
            </summary>
            <param name="context">
            The context under which the derialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Quests.Quest.DeserializeState(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes/Reads the current state of this Quest.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Quests.Quest.Save(Zelda.Quests.Quest,Zelda.IZeldaServiceProvider)">
            <summary>
            Saves the given <see cref="T:Zelda.Quests.Quest"/>.
            </summary>
            <param name="quest">
            The quest to save.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="quest"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the name of the given <paramref name="quest"/> has not been set.
            </exception>
        </member>
        <member name="M:Zelda.Quests.Quest.Load(System.String,Zelda.IZeldaServiceProvider)">
            <summary>
            Loads the <see cref="T:Zelda.Quests.Quest"/> with the given name.
            </summary>
            <param name="name">
            The name that uniquely identifies the quest to load.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
            <returns>
            The loaded Quest.
            </returns>
        </member>
        <member name="M:Zelda.Quests.Quest.TryLoad(System.String,Zelda.IZeldaServiceProvider)">
            <summary>
            Tries to load the <see cref="T:Zelda.Quests.Quest"/> with the given name.
            </summary>
            <param name="name">
            The name that uniquely identifies the quest to load.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
            <returns>
            The loaded Quest or null if an error occured while loading.
            </returns>
        </member>
        <member name="F:Zelda.Quests.Quest.name">
            <summary>
            The name that uniquely identifies this Quest.
            </summary>
        </member>
        <member name="F:Zelda.Quests.Quest.textStart">
            <summary>
            Stores the Resource Ids that are used to identify the text related to this Quest.
            </summary>
        </member>
        <member name="F:Zelda.Quests.Quest.textDescription">
            <summary>
            Stores the Resource Ids that are used to identify the text related to this Quest.
            </summary>
        </member>
        <member name="F:Zelda.Quests.Quest.textNotCompleted">
            <summary>
            Stores the Resource Ids that are used to identify the text related to this Quest.
            </summary>
        </member>
        <member name="F:Zelda.Quests.Quest.textCompleted">
            <summary>
            Stores the Resource Ids that are used to identify the text related to this Quest.
            </summary>
        </member>
        <member name="F:Zelda.Quests.Quest.delivered">
            <summary>
            States whether the player has finished this Quest.
            </summary>
        </member>
        <member name="F:Zelda.Quests.Quest.oldAccomplishedGoalsState">
            <summary>
            Records the old quest accomplishment state.
            </summary>
            <remarks>
            This is used to reduce the 'Quest X Completed' spam.
            </remarks>
        </member>
        <member name="F:Zelda.Quests.Quest.player">
            <summary>
            Identifies the PlayerEntity that owns this Quest.
            </summary>
        </member>
        <member name="F:Zelda.Quests.Quest.requirements">
            <summary>
            The list of requirements that must be fulfilled before this Quest is offered to the player.
            </summary>
        </member>
        <member name="F:Zelda.Quests.Quest.goals">
            <summary>
            The list of <see cref="T:Zelda.Quests.IQuestGoal"/>s.
            </summary>
        </member>
        <member name="F:Zelda.Quests.Quest.rewards">
            <summary>
            The list of <see cref="T:Zelda.Quests.IQuestReward"/>s.
            </summary>
        </member>
        <member name="F:Zelda.Quests.Quest.startEvents">
            <summary>
            The <see cref="T:Zelda.Quests.IQuestEvent"/>s that get executed when this Quest has been accepted.
            </summary>
        </member>
        <member name="F:Zelda.Quests.Quest.completionEvents">
            <summary>
            The <see cref="T:Zelda.Quests.IQuestEvent"/>s that get executed when this Quest has been completed.
            </summary>
        </member>
        <member name="F:Zelda.Quests.Quest.onGoalStateChanged">
            <summary>
            Identifies the EventHandler that gets invoked when 
            the state of one of the <see cref="T:Zelda.Quests.IQuestGoal"/>s of this Quest has changed.
            </summary>
        </member>
        <member name="T:Zelda.Quests.QuestDeliverType">
            <summary>
            Enumerates the different possible types 
            that a quest has to be delivered.
            </summary>
        </member>
        <member name="F:Zelda.Quests.QuestDeliverType.Instant">
            <summary>
            The quest is instantly accomplished after the 
            player has fulfilled all <see cref="T:Zelda.Quests.IQuestGoal"/>s.
            </summary>
        </member>
        <member name="F:Zelda.Quests.QuestDeliverType.Npc">
            <summary>
            The quest has to be delivered at a Non Player Character
            to receive the rewards.
            </summary>
        </member>
        <member name="T:Zelda.Quests.QuestLog">
            <summary>
            The QuestLog is responsible for holding the
            list of current and finished <see cref="T:Zelda.Quests.Quest"/>s of the player.
            </summary>
        </member>
        <member name="E:Zelda.Quests.QuestLog.QuestAccepted">
            <summary>
            Fired when the player that owns this QuestLog
            has accepted a new <see cref="T:Zelda.Quests.Quest"/>.
            </summary>
        </member>
        <member name="E:Zelda.Quests.QuestLog.QuestAccomplished">
            <summary>
            Fired when the player that owns this QuestLog
            has accomplished all goal of a <see cref="T:Zelda.Quests.Quest"/>.
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestLog.ActiveQuestCount">
            <summary>
            Gets the amount of currently active <see cref="T:Zelda.Quests.Quest"/>s.
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestLog.Owner">
            <summary>
            Gets the PlayerEntity that owns this QuestLog.
            </summary>
        </member>
        <member name="M:Zelda.Quests.QuestLog.#ctor(Zelda.Entities.PlayerEntity,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the QuestLog class.
            </summary>
            <param name="player">
            The PlayerEntity that owns the new QuestLog.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Quests.QuestLog.GetActiveQuest(System.Int32)">
            <summary>
            Gets the quest at the given <paramref name="index"/>.
            </summary>
            <param name="index">
            The zero-based index of the quest to get.
            </param>
            <returns>
            The Quest at the given <paramref name="index"/>.
            </returns>
        </member>
        <member name="M:Zelda.Quests.QuestLog.HasCompletedQuest(System.String)">
            <summary>
            Gets a value indicating whether the player
            that owns this QuestLog has completed the quest
            with the given <paramref name="name"/>.
            </summary>
            <param name="name">
            The name that uniquely identifies the quest to look for.
            </param>
            <returns>
            true if the player that owns this QuestLog has completed 
            the quest with the given <paramref name="name"/>;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Quests.QuestLog.HasActiveQuest(System.String)">
            <summary>
            Gets a value indicating whether this QuestLog
            contains an active <see cref="T:Zelda.Quests.Quest"/> with the given <paramref name="name"/>.
            </summary>
            <param name="name">
            The name of the Quest.
            </param>
            <returns>
            true if this QuestLog contains an active <see cref="T:Zelda.Quests.Quest"/> with the given <paramref name="name"/>;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Quests.QuestLog.GetActiveQuest(System.String)">
            <summary>
            Tries to get the active <see cref="T:Zelda.Quests.Quest"/> with the given <paramref name="name"/>.
            </summary>
            <param name="name">
            The name of the Quest to get.
            </param>
            <returns>
            The requested Quest;
            or null if this QuestLog doesn't contain any active Quest that has the given <paramref name="name"/>.
            </returns>
        </member>
        <member name="M:Zelda.Quests.QuestLog.AddActiveQuest(Zelda.Quests.Quest)">
            <summary>
            Tries to add the given <see cref="T:Zelda.Quests.Quest"/>
            to the list of active quests to this <see cref="T:Zelda.Quests.QuestLog"/>.
            </summary>
            <param name="quest">
            The <see cref="T:Zelda.Quests.Quest"/> to add.
            </param>
        </member>
        <member name="M:Zelda.Quests.QuestLog.OnQuestAccepted(Zelda.Quests.Quest)">
            <summary>
            Fires the <see cref="E:Zelda.Quests.QuestLog.QuestAccepted"/> events.
            </summary>
            <param name="quest">
            The related Quest.
            </param>
        </member>
        <member name="M:Zelda.Quests.QuestLog.OnQuestGoalsAccomplished(Zelda.Quests.Quest)">
            <summary>
            Fires the <see cref="E:Zelda.Quests.QuestLog.QuestAccomplished"/> events.
            </summary>
            <param name="quest">
            The related Quest.
            </param>
        </member>
        <member name="M:Zelda.Quests.QuestLog.OnQuestTurnedIn(Zelda.Quests.Quest)">
            <summary>
            Called when a Quest has been turned in.
            </summary>
            <param name="quest">
            The related Quest.
            </param>
        </member>
        <member name="M:Zelda.Quests.QuestLog.RemoveActiveQuest(Zelda.Quests.Quest)">
            <summary>
            Removes the given Quest from the list of currently active Quests.
            </summary>
            <param name="quest">
            The related Quest.
            </param>
        </member>
        <member name="M:Zelda.Quests.QuestLog.AddCompletedQuest(Zelda.Quests.Quest)">
            <summary>
            Adds the given Quest to the list of completed Quests.
            </summary>
            <param name="quest">
            The related Quest.
            </param>
        </member>
        <member name="M:Zelda.Quests.QuestLog.AddCompletedQuest(System.String)">
            <summary>
            Adds the given quest-name to the list of completed Quests.
            </summary>
            <param name="questName">
            The name of the related Quest.
            </param>
        </member>
        <member name="M:Zelda.Quests.QuestLog.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Quests.QuestLog.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Quests.QuestLog.activeQuests">
            <summary>
            Stores the <see cref="T:Zelda.Quests.Quest"/>s the player is currently doing.
            </summary>
        </member>
        <member name="F:Zelda.Quests.QuestLog.completedQuests">
            <summary>
            Stores the names of the <see cref="T:Zelda.Quests.Quest"/>s the player has finished.
            </summary>
        </member>
        <member name="F:Zelda.Quests.QuestLog.player">
            <summary>
            Identifies the PlayerEntity that owns this QuestLog.
            </summary>
        </member>
        <member name="F:Zelda.Quests.QuestLog.serviceProvider">
            <summary>
            Provides fast access to game-related services.
            </summary>
        </member>
        <member name="T:Zelda.Quests.QuestResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QC_HyruleRivers_GhostHunt">
            <summary>
              Looks up a localized string similar to Nice work I must say. You shall be my pupil from now on!.
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QC_HyruleRivers_TheEvilGhost">
            <summary>
              Looks up a localized string similar to You did it! Now my old pupil can rest in peace. His necklace shall be yours..
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QC_RouteOfDin_BlackKey">
            <summary>
              Looks up a localized string similar to Mhmhm.. those are good! What? Aah.. the key.. I&apos;ve actually still had one. There you go..
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QC_RouteOfDin_ChickenFeed">
            <summary>
              Looks up a localized string similar to Thank you! You&apos;re such a cutie!.
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QC_RouteOfDin_SecureTheChickens">
            <summary>
              Looks up a localized string similar to Thank you, thank you! *cheers*.
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QC_RouteOfDin_TheCauseOfMadness">
            <summary>
              Looks up a localized string similar to You&apos;ve slain the evil that was corrupting us? Yes .. I already feel relieved. Thank you. Thaaaank you! You are our hero! I want you to remember this song, so we can see each other anytime..
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QC_RouteOfDin_TheMadBrothers">
            <summary>
              Looks up a localized string similar to It&apos;s so silent outside. Have my brothers found peace?.
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QC_TiaWoods_BottlesForTheMedicine">
            <summary>
              Looks up a localized string similar to Exactly what I needed. I hope I didn&apos;t make you too much trouble..
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QC_TiaWoods_BrokenYoyoDoll">
            <summary>
              Looks up a localized string similar to Ooohh oooo. That&apos;s so cute from you! Thank you. Thaaanks! -hugs-.
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QC_TiaWoods_CleanseTheTombs">
            <summary>
              Looks up a localized string similar to Wow. Nice. But the evil still lurks inside the tombs ....
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QC_TiaWoods_CleanseTheTombs_2">
            <summary>
              Looks up a localized string similar to Yee ha! You&apos;re just awesome..
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QC_TiaWoods_CleanseTheTombs_3">
            <summary>
              Looks up a localized string similar to You&apos;re our hero! Now me and my brother can venture inside the tombs too..
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QC_TiaWoods_ClearTheFields">
            <summary>
              Looks up a localized string similar to ... you&apos;ve survived ... impressive!.
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QC_TiaWoods_FreshLeaves">
            <summary>
              Looks up a localized string similar to Heureka! Thanks..
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QC_TiaWoods_GhostMushrooms">
            <summary>
              Looks up a localized string similar to You brought me mushrooms? What mushrooms? Why? Ohhhhh ... the Ghost Mushrooms! Great! Now I can make the potion for Milly!.
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QC_TiaWoods_HungryKid">
            <summary>
              Looks up a localized string similar to Yipiii! Thank you..
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QC_TiaWoods_MeetBilly">
            <summary>
              Looks up a localized string similar to Hello there. My dad sent you to me? ... ... grr ... Why are you doing this to me dad? ... grr ... You should know that you&apos;re the third that comes to get his reward -just this week-..
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QC_TiaWoods_MurderLetter">
            <summary>
              Looks up a localized string similar to Where did you get this letter? Did you read it? ... Boy boy. This will get complicated for you. You&apos;ll now work for us..
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QC_TiaWoods_TalkToBillyAboutMilly">
            <summary>
              Looks up a localized string similar to You are accusing me of beating my younger sister? ... WHAT THE HELL IS YOUR PROBLEM? THIS IS NOT YOUR PROBLEM. ... Feel free to bother my mother and father with this. But please just go now and do your work..
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QC_TiaWoods_TheFamilyPortrait">
            <summary>
              Looks up a localized string similar to Nicely done. Thanks for the portrait! Your reward? ... hmph ... I guess I really have to give you something now. You can have this relic of mine, as I don&apos;t need it anymore..
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QC_TiaWoods_TheFireRitual">
            <summary>
              Looks up a localized string similar to You&apos;ve done as I said? Very well. Listen boy. I warn you, don&apos;t do the ritual again..
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QC_TiaWoods_TheLostMap">
            <summary>
              Looks up a localized string similar to Thanks thanks thanks thanks! You&apos;ve saved me! Have you met my mother before? She has a small camp in the far north east..
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QC_TiaWoods_TheNiceFather">
            <summary>
              Looks up a localized string similar to Awww. That&apos;s too kind of you for helping me out..
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QC_TiaWoods_TheNotSoNiceMother">
            <summary>
              Looks up a localized string similar to ... It was moms order to let Billy beat me ... ?! :&apos;(.
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QC_TiaWoods_TheRouteOfDin">
            <summary>
              Looks up a localized string similar to Yes, yes. I&apos;m Maja! My younger brothers sent you ..? I&apos;m glad that they are are okay..
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QC_TiaWoods_TheSister">
            <summary>
              Looks up a localized string similar to Why, hello there! Waaaah... my brother sent you ..? o_o.
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QC_TiaWoods_TheSkeletonHunt">
            <summary>
              Looks up a localized string similar to Hah! It seems dad has finally sent someone who could finish our work in the woods. Your reward shall be ... I&apos;ve got more for you to do!.
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QC_TiaWoods_TheSkeletonHuntContinues">
            <summary>
              Looks up a localized string similar to Nice nice. Good work I must say..
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QC_TiaWoods_ToxicPreparations">
            <summary>
              Looks up a localized string similar to Very well. This should do it. Ehehehe ....
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QD_HyruleRivers_GhostHunt">
            <summary>
              Looks up a localized string similar to Ghost Buster Karl told me I could become a Ghost Buster if I show him what I can do..
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QD_HyruleRivers_TheEvilGhost">
            <summary>
              Looks up a localized string similar to Ghost Buster Karl wants me to avenge his old pupil by killing the redish ghost. I can have a ghost necklace if I manage kill the ghost..
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QD_RouteOfDin_BlackKey">
            <summary>
              Looks up a localized string similar to The goron inside the hut will craft me a black key if I bring him what he needs..
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QD_RouteOfDin_ChickenFeed">
            <summary>
              Looks up a localized string similar to Maja wants me to buy her some Chicken Feed from the Travelling Salesman that recently arrived in Route of Din..
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QD_RouteOfDin_SecureTheChickens">
            <summary>
              Looks up a localized string similar to Maja in the Route of Din wants me to secure her chickens by securing the area..
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QD_RouteOfDin_TheCauseOfMadness">
            <summary>
              Looks up a localized string similar to The route of din is turning into a place of madness. I must figure out the cause of this change. I should return to Maja if I have any new information..
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QD_RouteOfDin_TheMadBrothers">
            <summary>
              Looks up a localized string similar to The goron inside the hut can&apos;t take it that his brothers have gone mad. Maybe I should help him out....
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QD_TiaWoods_BottlesForTheMedicine">
            <summary>
              Looks up a localized string similar to The strange old man wants me to find him 3 empty bottles. He said that the skeletons to the south may have some..
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QD_TiaWoods_BrokenYoyoDoll">
            <summary>
              Looks up a localized string similar to The yoyo child-doll has been heavily abused. It&apos;ll be required to replace some parts of it. Maybe I should fire up my Magical Bottle! 5x Fabric + 1x Red Dye should fix it. I wrote the crafting recipes into my Recipe List..
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QD_TiaWoods_CleanseTheTombs">
            <summary>
              Looks up a localized string similar to The older kid outside the Stone Tombs wants me to make the tombs a safer place..
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QD_TiaWoods_CleanseTheTombs_2">
            <summary>
              Looks up a localized string similar to The older kid outside the Stone Tombs wants me to make the tombs a safer place again. This time I should hunt the female demons..
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QD_TiaWoods_CleanseTheTombs_3">
            <summary>
              Looks up a localized string similar to The older kid outside the Stone Tombs wants me to attack the evil at its roots. The demon master must die..
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QD_TiaWoods_ClearTheFields">
            <summary>
              Looks up a localized string similar to Boy Billy wants me to clear the fields to the west of him..
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QD_TiaWoods_FreshLeaves">
            <summary>
              Looks up a localized string similar to The strange old man wants me to bring him 5 fresh leaves for his medicine. They can be found just north of him..
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QD_TiaWoods_GhostMushrooms">
            <summary>
              Looks up a localized string similar to The old woman in the north-east of the Tia Woods wants me to bring her 4 Ghost Mushrooms. She indicated that I might want to visit the Hyrule Rivers to the east of the woods..
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QD_TiaWoods_HungryKid">
            <summary>
              Looks up a localized string similar to The younger kid outside the Stone Tombs wants me to bring him some fish. He&apos;s hungry!.
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QD_TiaWoods_MeetBilly">
            <summary>
              Looks up a localized string similar to The old man told me that I&apos;d have to meet his son Billy if I want a reward for my help. He thinks that Billy can be found somewhere to the south..
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QD_TiaWoods_MurderLetter">
            <summary>
              Looks up a localized string similar to I should deliver the unsealed letter to this so called mother. Maybe she got something to say regarding its very strange content. The skeletons are supposed to follow the orders of Billy?!.
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QD_TiaWoods_TalkToBillyAboutMilly">
            <summary>
              Looks up a localized string similar to Billy seems to beating his younger sister. I really should speak with him..
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QD_TiaWoods_TheFamilyPortrait">
            <summary>
              Looks up a localized string similar to Billy wants me to bring him the portrait of his father. It&apos;s somewhere in the Tombs of his family. I can find the tombs in the south east of the Tia Woods..
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QD_TiaWoods_TheFireRitual">
            <summary>
              Looks up a localized string similar to The old witch in the north east of the Tia Woods wants me to perform the fire ritual at the ritual place somewhere in the south west of the Tia Woods. To perform the ritual I must simply lit the fires in the right pattern..
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QD_TiaWoods_TheLostMap">
            <summary>
              Looks up a localized string similar to Milly, the sister of Billy, wants me to bring her the secret-map of the family tombs. She said that the map would be somewhere in the woods north-east of her, guarded by razor blades..
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QD_TiaWoods_TheNiceFather">
            <summary>
              Looks up a localized string similar to The father of Milly assured me that he&apos;s going to talk with Billy about Milly. I better bring Milly the good news..
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QD_TiaWoods_TheNotSoNiceMother">
            <summary>
              Looks up a localized string similar to I&apos;ve spoken with Milly&apos;s mother about Billy beating her. I should really talk with Milly about all this..
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QD_TiaWoods_TheRouteOfDin">
            <summary>
              Looks up a localized string similar to The boys at the stone tombs in the Tia Woods want me to travel to the Route of Din to meet their older sister Maja. The entrance to the Route of Din can be found in the north west of the Tia Woods..
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QD_TiaWoods_TheSister">
            <summary>
              Looks up a localized string similar to Billy wants me to speak with his sister. She can be found somewhere to the south of him..
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QD_TiaWoods_TheSkeletonHunt">
            <summary>
              Looks up a localized string similar to Billy wants me to revenge his family by hunting the Skeletons in the Tia Woods..
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QD_TiaWoods_TheSkeletonHuntContinues">
            <summary>
              Looks up a localized string similar to Billy requires my help once more! This time I should bring him 25 Skeleton Bones and slay some of those red skeletons..
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QD_TiaWoods_ToxicPreparations">
            <summary>
              Looks up a localized string similar to The old woman in the north-eastern parts of the Tia Woods wants me to bring her Keese Tooths and Wings..
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QN_HyruleRivers_GhostHunt">
            <summary>
              Looks up a localized string similar to The Ghost Hunt.
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QN_HyruleRivers_TheEvilGhost">
            <summary>
              Looks up a localized string similar to The Evil Ghost.
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QN_RouteOfDin_BlackKey">
            <summary>
              Looks up a localized string similar to Black Key Craft.
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QN_RouteOfDin_ChickenFeed">
            <summary>
              Looks up a localized string similar to Chicken Feed.
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QN_RouteOfDin_SecureTheChickens">
            <summary>
              Looks up a localized string similar to Secure The Chickens.
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QN_RouteOfDin_TheCauseOfMadness">
            <summary>
              Looks up a localized string similar to The Cause of Madness.
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QN_RouteOfDin_TheMadBrothers">
            <summary>
              Looks up a localized string similar to The Mad Brothers.
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QN_StoneTombs_Wanted_Skeletons">
            <summary>
              Looks up a localized string similar to Wanted! Green Skeletons.
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QN_TiaWoods_BottlesForTheMedicine">
            <summary>
              Looks up a localized string similar to Bottles for the Medicine.
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QN_TiaWoods_BrokenYoyoDoll">
            <summary>
              Looks up a localized string similar to The Broken Yoyo Doll.
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QN_TiaWoods_CleanseTheTombs">
            <summary>
              Looks up a localized string similar to The Tombs.
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QN_TiaWoods_CleanseTheTombs_2">
            <summary>
              Looks up a localized string similar to The Tombs - Part 2.
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QN_TiaWoods_CleanseTheTombs_3">
            <summary>
              Looks up a localized string similar to The Tombs - Part 3.
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QN_TiaWoods_ClearTheFields">
            <summary>
              Looks up a localized string similar to Clear The Fields.
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QN_TiaWoods_FreshLeaves">
            <summary>
              Looks up a localized string similar to Fresh Leaves.
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QN_TiaWoods_GhostMushrooms">
            <summary>
              Looks up a localized string similar to Ghost Mushrooms.
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QN_TiaWoods_HungryKid">
            <summary>
              Looks up a localized string similar to Hungry Fish Kid.
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QN_TiaWoods_MeetBilly">
            <summary>
              Looks up a localized string similar to Meet Billy.
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QN_TiaWoods_MurderLetter">
            <summary>
              Looks up a localized string similar to Murder Letter.
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QN_TiaWoods_TalkToBillyAboutMilly">
            <summary>
              Looks up a localized string similar to Talk to Billy about Milly.
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QN_TiaWoods_TheFamilyPortrait">
            <summary>
              Looks up a localized string similar to The Family Portrait.
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QN_TiaWoods_TheFireRitual">
            <summary>
              Looks up a localized string similar to The Fire Ritual.
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QN_TiaWoods_TheLostMap">
            <summary>
              Looks up a localized string similar to The Lost Map.
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QN_TiaWoods_TheNiceFather">
            <summary>
              Looks up a localized string similar to The Nice Father.
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QN_TiaWoods_TheNotSoNiceMother">
            <summary>
              Looks up a localized string similar to The Not So Nice Mother.
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QN_TiaWoods_TheRouteOfDin">
            <summary>
              Looks up a localized string similar to The Route of Din.
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QN_TiaWoods_TheSister">
            <summary>
              Looks up a localized string similar to The Sister.
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QN_TiaWoods_TheSkeletonHunt">
            <summary>
              Looks up a localized string similar to The Skeleton Hunt.
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QN_TiaWoods_TheSkeletonHuntContinues">
            <summary>
              Looks up a localized string similar to The Skeleton Hunt Continues.
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QN_TiaWoods_ToxicPreparations">
            <summary>
              Looks up a localized string similar to Toxic Preparations.
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QNC_HyruleRivers_GhostHunt">
            <summary>
              Looks up a localized string similar to Do ghosts scare you?.
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QNC_HyruleRivers_TheEvilGhost">
            <summary>
              Looks up a localized string similar to Slay the red Ghost King ..! And try to not get eaten alive..
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QNC_RouteOfDin_BlackKey">
            <summary>
              Looks up a localized string similar to Still waiting.. for the required materials. Be quick about it! The hunger is eating me up alive..
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QNC_RouteOfDin_ChickenFeed">
            <summary>
              Looks up a localized string similar to You don&apos;t want my chickens to hunger, do you?.
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QNC_RouteOfDin_SecureTheChickens">
            <summary>
              Looks up a localized string similar to You must save my poor chickens!.
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QNC_RouteOfDin_TheCauseOfMadness">
            <summary>
              Looks up a localized string similar to Every day more of my chickens get mad .. -sobs-.
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QNC_RouteOfDin_TheMadBrothers">
            <summary>
              Looks up a localized string similar to Oh, oh. Their sounds ... why ... please help me ..!.
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QNC_TiaWoods_BottlesForTheMedicine">
            <summary>
              Looks up a localized string similar to I really need those bottles before I can make my medicine. Hurry!.
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QNC_TiaWoods_CleanseTheTombs">
            <summary>
              Looks up a localized string similar to Don&apos;t be too shy to say that the tombs scare you. You don&apos;t have to go inside ... just stay here with us..
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QNC_TiaWoods_CleanseTheTombs_2">
            <summary>
              Looks up a localized string similar to They&apos;ll try to seduce you. Watch out..
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QNC_TiaWoods_CleanseTheTombs_3">
            <summary>
              Looks up a localized string similar to You MUST help us. Please. If we don&apos;t stop the evil now it will spread over all Tia Woods..
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QNC_TiaWoods_ClearTheFields">
            <summary>
              Looks up a localized string similar to Why have you not completed your quest yet? Scared ... hehe ... ?!.
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QNC_TiaWoods_FreshLeaves">
            <summary>
              Looks up a localized string similar to Hurry! Bring me the leaves. There are some north-west of here..
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QNC_TiaWoods_GhostMushrooms">
            <summary>
              Looks up a localized string similar to Mushrooms from Ghosts. I need!.
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QNC_TiaWoods_HungryKid">
            <summary>
              Looks up a localized string similar to Huuuuuuuuuuuuuuungry. Me want fish! FISH..
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QNC_TiaWoods_TheFamilyPortrait">
            <summary>
              Looks up a localized string similar to Get me this portrait at all costs..
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QNC_TiaWoods_TheFireRitual">
            <summary>
              Looks up a localized string similar to What are you waiting for? Don&apos;t just stand there..
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QNC_TiaWoods_TheLostMap">
            <summary>
              Looks up a localized string similar to Pleeeeeeeeeeeeeease help me to find the map! Or my brother will ....
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QNC_TiaWoods_TheSkeletonHunt">
            <summary>
              Looks up a localized string similar to What&apos;s taking so long? Come on try harder! Do it for your friend Billy! Or the reward, THE reward!.
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QNC_TiaWoods_TheSkeletonHuntContinues">
            <summary>
              Looks up a localized string similar to Scared of the Red Skeletons? Muahahah aa... !.
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QNC_TiaWoods_ToxicPreparations">
            <summary>
              Looks up a localized string similar to What are you waiting for? Hunt those bats for their wings and tooths!.
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QS_HyruleRivers_GhostHunt">
            <summary>
              Looks up a localized string similar to Hey you! Come here and listen! I&apos;ve just lost my pupil to one of those ghosts. I&apos;ll make you my new student if you show me what you can do. For starters simply kill 12 ghosts. Hehehe. Some day you may become a great ghost buster - just like me..
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QS_HyruleRivers_TheEvilGhost">
            <summary>
              Looks up a localized string similar to My last pupil was killed by the Ghost King that lives deep in the woods of Hyrule Rivers. Now go and avenge him. If you succeed then you can have his old ghost necklace..
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QS_RouteOfDin_BlackKey">
            <summary>
              Looks up a localized string similar to Have you seen the black block? We&apos;ve sealed the pathway beyond. If you bring me 1x Goron Steel and 3x Goron Croisants, then I can craft you a key to open it. Especially the Croisants are important! They should be around here somewhere...
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QS_RouteOfDin_ChickenFeed">
            <summary>
              Looks up a localized string similar to Wait, a sec. The travelling salesman has recently arrived! Could you get me some Chicken Feed? Please!.
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QS_RouteOfDin_SecureTheChickens">
            <summary>
              Looks up a localized string similar to The evil Blood Keeses that have appeared last month eat my poor little baby chickens! And some of the older chickens turned -all- mad after they have been bitten. We must figure out this mystery! Bring me a few feathers of the mad chickens, and on the way slay some of those Bloody Keeses!.
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QS_RouteOfDin_TheCauseOfMadness">
            <summary>
              Looks up a localized string similar to These lands are changing and you must stop it ... before everyone turns completely mad. You seem like a strong fighter. Please figure out what is going wrong..
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QS_RouteOfDin_TheMadBrothers">
            <summary>
              Looks up a localized string similar to Oh dear, my beloved brothers have gone mad! I&apos;m so sorry that someone innocent like you has to see this. But I can&apos;t take this anymore. Please ....
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QS_StoneTombs_Wanted_Skeletons">
            <summary>
              Looks up a localized string similar to WANTED: Any adventurer with courage to slay atleast 10 green skeletons. .
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QS_TiaWoods_BottlesForTheMedicine">
            <summary>
              Looks up a localized string similar to What..? You want your answers now? Boy, first - I&apos;ve forgotten my medicine bottles at home. And I really need them. Bring me some from the Skeletons to the south..
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QS_TiaWoods_BrokenYoyoDoll">
            <summary>
              Looks up a localized string similar to As you inspect the doll you can clearly see that it is broken. If one could just repair it...  5x Fabric + 1x Red Dye should do it. To create Red Dye I will need 1x Small Empty Bottle + 2x Skeleton Bone Powder + 5x Red Potion..
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QS_TiaWoods_CleanseTheTombs">
            <summary>
              Looks up a localized string similar to Hey you! How did you get here? I think some strange boy sent us here ... I really can&apos;t remember. Do you see the entrance next to me? That&apos;s the entrance to the Family Stone Tombs. Just recently it was overrun by monsters. You look rather strong. Can&apos;t you help us out and make the place a bit safer? Those green skeletons scare us ....
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QS_TiaWoods_CleanseTheTombs_2">
            <summary>
              Looks up a localized string similar to An even greater evil than some skeletons has infested the tombs. And my feeling tells me that they will leave the tombs soon. Just don&apos;t tell my younger brother~. He&apos;d be scared to death! All I can tell you is that they are evil, eat fish and are female! Get them!!.
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QS_TiaWoods_CleanseTheTombs_3">
            <summary>
              Looks up a localized string similar to I have one last wish from you. Attack the evil at its roots by slaying the master demon. You shall have my Hyrule Boots if you succeed..
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QS_TiaWoods_ClearTheFields">
            <summary>
              Looks up a localized string similar to Hey you. Do you want to work for me? Of course you do. I&apos;m Billy. Everyone wants to help me. Anyway I need you to do some work for me. I need the fields to the west to be cleared of those skeletons and skeleton heads. I may give you a reward. Just go! Or are you too scared?.
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QS_TiaWoods_FreshLeaves">
            <summary>
              Looks up a localized string similar to Why, hello there too. You are asking what is going on? Well.. I won&apos;t tell you... until you bring me 5 fresh leaves for my daily medicine! There should be some just north of here. Would you be so nice?.
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QS_TiaWoods_GhostMushrooms">
            <summary>
              Looks up a localized string similar to Hello hello! Do you hear me? Can&apos;t you just simply bring me 4 Ghost Mushrooms? Yes, yes. You should be able to find some at the Hyrule Rivers. *coughs* No need to get wet just yet. Simply cross the bridge in the far south east. *coughs*.
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QS_TiaWoods_HungryKid">
            <summary>
              Looks up a localized string similar to Hey you. Do you have some food for me? I mean.. some fish. I want fish!  Any fish! Come please bring me some. Don&apos;t you smell the fish from the tombs?.
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QS_TiaWoods_MeetBilly">
            <summary>
              Looks up a localized string similar to About your questions... I actually... don&apos;t know. Sorry. But thanks anyway. Go talk to my son, Billy and he will give you a reward for your work. He should be somewhere to the South..
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QS_TiaWoods_MurderLetter">
            <summary>
              Looks up a localized string similar to You break the seal of the letter and read: ............... Dear mother, I hope this letter reaches you quickly. Those skeletons are just too stupid to follow orders. I&apos;ve sent two more &apos;adventurers&apos; to the family tombs. The demon master will be -very- happy with us. Now back to the case with my little sister Milly. Have you managed to create the potion for her? I&apos;d help you but I&apos;m just too busy. Your Billy &lt;3..
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QS_TiaWoods_TalkToBillyAboutMilly">
            <summary>
              Looks up a localized string similar to Now that you&apos;ve brought me the map my brother won&apos;t hurt me. Billy is such an acerb brother. Why?? :&apos;((.
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QS_TiaWoods_TheFamilyPortrait">
            <summary>
              Looks up a localized string similar to The tombs of my family are hidden in the south east of Tia Woods. Go there and find me the portrait of my father. If you do that then I&apos;ll forget about our little quarrel..
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QS_TiaWoods_TheFireRitual">
            <summary>
              Looks up a localized string similar to Boy boy. I now want you to find the ritual place to the far south west. Perform the fire ritual by simply litting the fires in the right pattern.  Do what I say or you&apos;ll face the consequences..
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QS_TiaWoods_TheLostMap">
            <summary>
              Looks up a localized string similar to Hello stranger! Nice to meet you! I&apos;m Milly, the future princess of these lands. You&apos;ve helped my dear brother Billy? Oh dear ... my brother ... He has been acting strangely lately. And now he wants the secret-map of the family tombs back! He&apos;ll hurt me again if I don&apos;t bring the map back. :&apos;( The map is somewhere in the woods, guarded by those razor blades. Please, please bring it to me!.
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QS_TiaWoods_TheNiceFather">
            <summary>
              Looks up a localized string similar to Hello. Who&apos;s there? Oh, you the young fighter. Your deeds already reached my kind ears. What do you say? Billy seems to beat poor Milly? Hmm ... You must know that we must train her to endure all physical and mental stress. Anyway, I&apos;m going to talk with Billy about Milly. Beating her is indeed too much..
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QS_TiaWoods_TheNotSoNiceMother">
            <summary>
              Looks up a localized string similar to Hello hello! You must speak louder or I won&apos;t hear you! ... Yes. I am the mother of Milly. And it&apos;s known to me that Billy beats Milly. It was my order after all. Be gone now..
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QS_TiaWoods_TheRouteOfDin">
            <summary>
              Looks up a localized string similar to Phew, thanks again for your help. I fear that our older sister Maja is in trouble too! She has been protecting our chickens. You may find her near the Route of Din in the far north west. Hey, take this key. It will allow you to leave this island quickly! Please, help our sister!.
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QS_TiaWoods_TheSister">
            <summary>
              Looks up a localized string similar to Hey, don&apos;t just run off. If you havn&apos;t spoken to my sister yet.. You will help her too. She should be hiding somewhere to the south..
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QS_TiaWoods_TheSkeletonHunt">
            <summary>
              Looks up a localized string similar to My family owns large parts of the Tia Woods. All was great until the skeletons came and most of our workers fled. Those bastards! Your next quest shall be to avenge me and my family. Hunt those skeletons like you&apos;ve never hunted something else before! Your reward is near ..! Oh, and before I forget it ... if you see my lil&apos; sister - tell her to HURRY..
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QS_TiaWoods_TheSkeletonHuntContinues">
            <summary>
              Looks up a localized string similar to Hey again. More work before we&apos;re finished. First, you must bring me at least 25 Skeleton Bones. I need them to make Skeleton Dust. Oh, and slay some Red Skeletons on your way, alright?.
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QS_TiaWoods_ToxicPreparations">
            <summary>
              Looks up a localized string similar to Hmpf.. I&apos;ve indeed ran out of Keese Wings and Tooths. Go out and hunt some of those bats for me..
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QuestGoalDesc_GetItem">
            <summary>
              Looks up a localized string similar to Get {0}! Got {1} of 1..
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QuestGoalDesc_GetItems">
            <summary>
              Looks up a localized string similar to Get {0}s! Got {1} of {2}..
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QuestGoalDesc_KillEnemies">
            <summary>
              Looks up a localized string similar to Hunt {0}s! Killed {1} of {2}..
            </summary>
        </member>
        <member name="P:Zelda.Quests.QuestResources.QuestGoalDesc_KillEnemy">
            <summary>
              Looks up a localized string similar to Hunt {0}! Killed {1} of 1..
            </summary>
        </member>
        <member name="T:Zelda.Quests.QuestType">
            <summary>
            Enumerates the different types of <see cref="T:Zelda.Quests.Quest"/>s.
            </summary>
        </member>
        <member name="F:Zelda.Quests.QuestType.Main">
            <summary>
            Represents a quest that drives the main story of the game.
            </summary>
        </member>
        <member name="F:Zelda.Quests.QuestType.Sub">
            <summary>
            Represents an optional sub quest.
            </summary>
        </member>
        <member name="T:Zelda.Quests.Requirements.QuestCompletedRequirement">
            <summary>
            Defines an <see cref="T:Zelda.Core.Requirements.IRequirement"/> that requires
            the player to have completed a specific quest to fulfill it.
            This class can't be inherited.
            </summary>
        </member>
        <member name="P:Zelda.Quests.Requirements.QuestCompletedRequirement.QuestName">
            <summary>
            Gets or sets the name that uniquely identifies the quest
            the player must have completed to fulfill this IQuestRequirement.
            </summary>
        </member>
        <member name="M:Zelda.Quests.Requirements.QuestCompletedRequirement.IsFulfilledBy(Zelda.Entities.PlayerEntity)">
            <summary>
            Gets a value indicating whether the player fulfills this <see cref="T:Zelda.Quests.Requirements.QuestCompletedRequirement"/>.
            </summary>
            <param name="player">
            The related PlayerEntity.
            </param>
            <returns>
            true if the given PlayerEntity fulfills this QuestCompletedRequirement; 
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Quests.Requirements.QuestCompletedRequirement.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Quests.Requirements.QuestCompletedRequirement.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="T:Zelda.Quests.Rewards.ExperienceReward">
            <summary>
            Represents an <see cref="T:Zelda.Quests.IQuestReward"/> that rewards
            the player with experience.
            This class can't be inherited.
            </summary>
        </member>
        <member name="P:Zelda.Quests.Rewards.ExperienceReward.ExperienceRewarded">
            <summary>
            Gets or sets the amount of experience rewarded by this ExperienceReward.
            </summary>
        </member>
        <member name="M:Zelda.Quests.Rewards.ExperienceReward.Reward(Zelda.Entities.PlayerEntity)">
            <summary>
            Rewards this ExperienceReward to the player.
            </summary>
            <param name="player">
            The related PlayerEntity.
            </param>
        </member>
        <member name="M:Zelda.Quests.Rewards.ExperienceReward.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Quests.Rewards.ExperienceReward.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="T:Zelda.Quests.Rewards.ItemReward">
            <summary>
            Represents an <see cref="T:Zelda.Quests.IQuestReward"/> that rewards
            the player with item(s).
            This class can't be inherited.
            </summary>
        </member>
        <member name="P:Zelda.Quests.Rewards.ItemReward.ItemName">
            <summary>
            Gets or sets the name of the item rewarded by this ItemReward.
            </summary>
        </member>
        <member name="P:Zelda.Quests.Rewards.ItemReward.ItemCount">
            <summary>
            Gets or sets the number of items (of the same type) rewarded by this ItemReward.
            </summary>
            <remarks>
            Usually used to reward multiple instances of a stackable item;
            such as a potion.
            </remarks>
        </member>
        <member name="M:Zelda.Quests.Rewards.ItemReward.Setup(Zelda.IZeldaServiceProvider)">
            <summary>
            Setups this ItemReward instance.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Quests.Rewards.ItemReward.Reward(Zelda.Entities.PlayerEntity)">
            <summary>
            Rewards this ItemReward to the player.
            </summary>
            <param name="player">
            The related PlayerEntity.
            </param>
        </member>
        <member name="M:Zelda.Quests.Rewards.ItemReward.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Quests.Rewards.ItemReward.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Quests.Rewards.ItemReward.itemManager">
            <summary>
            The ItemManager that is used to load the Items.
            </summary>
        </member>
        <member name="T:Zelda.Quests.Rewards.ReputationReward">
            <summary>
            Defines an <see cref="T:Zelda.Quests.IQuestReward"/> that awards
            reputation towards a <see cref="P:Zelda.Quests.Rewards.ReputationReward.Faction"/>.
            This class can't be inherited.
            </summary>
        </member>
        <member name="P:Zelda.Quests.Rewards.ReputationReward.FactionName">
            <summary>
            Gets or sets the name that uniquely identifies the <see cref="P:Zelda.Quests.Rewards.ReputationReward.Faction"/>
            this ReputationReward rewards point towards.
            </summary>
        </member>
        <member name="P:Zelda.Quests.Rewards.ReputationReward.Faction">
            <summary>
            Gets the <see cref="T:Zelda.Factions.Faction"/> this ReputationReward rewards point towards.
            </summary>
        </member>
        <member name="P:Zelda.Quests.Rewards.ReputationReward.ReputationAwarded">
            <summary>
            Gets or sets the reputation this ReputationReward rewards towards the <see cref="P:Zelda.Quests.Rewards.ReputationReward.Faction"/>.
            </summary>
        </member>
        <member name="M:Zelda.Quests.Rewards.ReputationReward.Reward(Zelda.Entities.PlayerEntity)">
            <summary>
            Rewards this ReputationReward to the player.
            </summary>
            <param name="player">
            The related PlayerEntity.
            </param>
        </member>
        <member name="M:Zelda.Quests.Rewards.ReputationReward.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Quests.Rewards.ReputationReward.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="T:Zelda.Quests.Rewards.RubyReward">
            <summary>
            Represents an <see cref="T:Zelda.Quests.IQuestReward"/> that rewards
            the player with rubies.
            This class can't be inherited.
            </summary>
        </member>
        <member name="P:Zelda.Quests.Rewards.RubyReward.RubiesRewarded">
            <summary>
            Gets or sets the number of rubies rewarded by this RubyReward.
            </summary>
        </member>
        <member name="M:Zelda.Quests.Rewards.RubyReward.Reward(Zelda.Entities.PlayerEntity)">
            <summary>
            Rewards this RubyReward to the player.
            </summary>
            <param name="player">
            The related PlayerEntity.
            </param>
        </member>
        <member name="M:Zelda.Quests.Rewards.RubyReward.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Quests.Rewards.RubyReward.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="T:Zelda.Profiles.GameProfile">
            <summary>
            A <see cref="T:Zelda.Profiles.GameProfile"/> provides all the data
            of the player's character.
            This is a sealed class.
            </summary>
        </member>
        <member name="P:Zelda.Profiles.GameProfile.Name">
            <summary>
            Gets or sets the name of the <see cref="T:Zelda.Profiles.GameProfile"/>.
            </summary>
        </member>
        <member name="P:Zelda.Profiles.GameProfile.CharacterLevel">
            <summary>
            Gets the level of the player.
            </summary>
        </member>
        <member name="P:Zelda.Profiles.GameProfile.CharacterName">
            <summary>
            Gets the name of the player.
            </summary>
        </member>
        <member name="P:Zelda.Profiles.GameProfile.CharacterClass">
            <summary>
            Gets the class of the player.
            </summary>
        </member>
        <member name="P:Zelda.Profiles.GameProfile.SaveFile">
            <summary>
            Gets the <see cref="P:Zelda.Profiles.GameProfile.SaveFile"/> that stores
            the information that descripes the game's state.
            </summary>
        </member>
        <member name="P:Zelda.Profiles.GameProfile.RegionName">
            <summary>
            Gets the name of the region the player has saved in.
            </summary>
        </member>
        <member name="P:Zelda.Profiles.GameProfile.Player">
            <summary>
            Gets the <see cref="T:Zelda.Entities.PlayerEntity"/> associated with the <see cref="T:Zelda.Profiles.GameProfile"/>.
            </summary>
        </member>
        <member name="P:Zelda.Profiles.GameProfile.KeySettings">
            <summary>
            Gets the KeySettings of the profile.
            </summary>
        </member>
        <member name="P:Zelda.Profiles.GameProfile.WorldStatus">
            <summary>
            Gets the object that descripes the current status of the world.
            </summary>
        </member>
        <member name="P:Zelda.Profiles.GameProfile.Difficulty">
            <summary>
            Gets the ID that uniquely identifies the difficulty the player has choosen
            for his game.
            </summary>
        </member>
        <member name="P:Zelda.Profiles.GameProfile.Hardcore">
            <summary>
            Gets or sets a value indicating whether the player choose to play on hardcore.
            </summary>
        </member>
        <member name="P:Zelda.Profiles.GameProfile.LastSavePoint">
            <summary>
            Gets or sets the last safe <see cref="T:Zelda.Saving.SavePoint"/> the player has used.
            </summary>
        </member>
        <member name="P:Zelda.Profiles.GameProfile.CharacterColorTint">
            <summary>
            Gets or sets the color tint that is applied to the main characters sprite.
            </summary>
        </member>
        <member name="P:Zelda.Profiles.GameProfile.Current">
            <summary>
            Gets or sets the current <see cref="T:Zelda.Profiles.GameProfile"/>.
            </summary>
        </member>
        <member name="F:Zelda.Profiles.GameProfile.current">
            <summary>
            Represents the storage field of the static Current property.
            </summary>
        </member>
        <member name="M:Zelda.Profiles.GameProfile.#ctor">
            <summary>
            Prevents the default creation of GameProfile instances.
            </summary>
        </member>
        <member name="M:Zelda.Profiles.GameProfile.StartNewAdventure(Zelda.KeySettings,Zelda.IZeldaServiceProvider)">
            <summary>
            Creates a new <see cref="T:Zelda.Profiles.GameProfile"/> which is set-up
            to start a new adventure. (level 1!)
            </summary>
            <param name="keySettings">
            The KeySettings instance the new GameProfile uses.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
            <returns>
            The new GameProfile.
            </returns>
        </member>
        <member name="M:Zelda.Profiles.GameProfile.LoadAdventure(System.String,Zelda.IZeldaServiceProvider)">
            <summary>
            Loads an already existing adventure.
            </summary>
            <param name="profileName">
            The name of the profile to load.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
            <returns>
            The newly loaded GameProfile.
            </returns>
        </member>
        <member name="M:Zelda.Profiles.GameProfile.Save">
            <summary>
            Saves the <see cref="T:Zelda.Profiles.GameProfile"/>.
            </summary>
            <returns>
            true if this IGameProfile has been succesfully saved;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Profiles.GameProfile.Zelda#Profiles#IGameProfile#Load">
            <summary>
            <see cref="T:Zelda.Profiles.GameProfile"/>s are always in a loaden state.
            </summary>
            <returns>
            Returns this GameProfile.
            </returns>
        </member>
        <member name="F:Zelda.Profiles.GameProfile.saveFile">
            <summary>
            Represents the file in which the data about this GameProfile is stored.
            </summary>
        </member>
        <member name="F:Zelda.Profiles.GameProfile.keySettings">
            <summary>
            The <see cref="P:Zelda.Profiles.GameProfile.KeySettings"/> of the profile.
            </summary>
        </member>
        <member name="F:Zelda.Profiles.GameProfile.player">
            <summary>
            The <see cref="T:Zelda.Entities.PlayerEntity"/>.
            </summary>
        </member>
        <member name="T:Zelda.Profiles.IGameProfile">
            <summary>
            An <see cref="T:Zelda.Profiles.IGameProfile"/> stores all
            the data one has to know about a player.
            </summary>
            <remarks>
            The different profile types:
            <para>
                ShortGameProfile - 
                    provides only the basic data about the player,
                    Created when the user enters the Character Selection Screen.
                    Must be converted to a GameProfile before it can be loaden.
            </para>
            <para>
                GameProfile -
                    provides all the data about the player.
            </para>
            </remarks>
        </member>
        <member name="P:Zelda.Profiles.IGameProfile.CharacterLevel">
            <summary>
            Gets the level of the game-character.
            </summary>
        </member>
        <member name="P:Zelda.Profiles.IGameProfile.CharacterName">
            <summary>
            Gets the name of the game-character.
            </summary>
        </member>
        <member name="P:Zelda.Profiles.IGameProfile.CharacterClass">
            <summary>
            Gets the name of the class of the game-character.
            </summary>
        </member>
        <member name="P:Zelda.Profiles.IGameProfile.RegionName">
            <summary>
            Gets the name of the region the player has saved in.
            </summary>
        </member>
        <member name="P:Zelda.Profiles.IGameProfile.Difficulty">
            <summary>
            Gets the ID that uniquely identifies the difficulty the player has choosen
            for his game.
            </summary>
        </member>
        <member name="P:Zelda.Profiles.IGameProfile.Hardcore">
            <summary>
            Gets a value indicating whether the player choose to play on hardcore.
            </summary>
        </member>
        <member name="P:Zelda.Profiles.IGameProfile.CharacterColorTint">
            <summary>
            Gets the color tint that is applied to the main characters sprite.
            </summary>
        </member>
        <member name="M:Zelda.Profiles.IGameProfile.Save">
            <summary>
            Saves this <see cref="T:Zelda.Profiles.IGameProfile"/>.
            </summary>
            <returns>
            true if this IGameProfile has been succesfully saved;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Profiles.IGameProfile.Load">
            <summary>
            Loads this <see cref="T:Zelda.Profiles.IGameProfile"/>.
            </summary>
            <returns>
            The loaded <see cref="T:Zelda.Profiles.GameProfile"/>.
            </returns>
        </member>
        <member name="T:Zelda.Profiles.ShortGameProfile">
            <summary>
            Represents an <see cref="T:Zelda.Profiles.IGameProfile"/>
            that has loaden only the information needed
            to display the profile in the CharacterSelectionScreen.
            </summary>
        </member>
        <member name="P:Zelda.Profiles.ShortGameProfile.Name">
            <summary>
            Gets the name of this ShortGameProfile.
            </summary>
        </member>
        <member name="P:Zelda.Profiles.ShortGameProfile.CharacterName">
            <summary>
            Gets the name of the character.
            </summary>
        </member>
        <member name="P:Zelda.Profiles.ShortGameProfile.CharacterClass">
            <summary>
            Gets the class of the character.
            </summary>
        </member>
        <member name="P:Zelda.Profiles.ShortGameProfile.RegionName">
            <summary>
            Gets the name of the region the player has saved in.
            </summary>
        </member>
        <member name="P:Zelda.Profiles.ShortGameProfile.CharacterLevel">
            <summary>
            Gets the level of the character.
            </summary>
        </member>
        <member name="P:Zelda.Profiles.ShortGameProfile.Difficulty">
            <summary>
            Gets the ID that uniquely identifies the difficulty the player has choosen
            for his game.
            </summary>
        </member>
        <member name="P:Zelda.Profiles.ShortGameProfile.Hardcore">
            <summary>
            Gets a value indicating whether the player choose to play on hardcore.
            </summary>
        </member>
        <member name="P:Zelda.Profiles.ShortGameProfile.CharacterColorTint">
            <summary>
            Gets the color tint that is applied to the main characters sprite.
            </summary>
        </member>
        <member name="M:Zelda.Profiles.ShortGameProfile.#ctor(System.String,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the ShortGameProfile class.
            </summary>
            <param name="profileName">
            The name of the profile.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Profiles.ShortGameProfile.Load">
            <summary>
            Fully loads this ShortGameProfile.
            </summary>
            <returns>
            The loaden GameProfile.
            </returns>
        </member>
        <member name="M:Zelda.Profiles.ShortGameProfile.Zelda#Profiles#IGameProfile#Save">
            <summary>
            This operation is not supported by ShortGameProfiles.
            </summary>
            <exception cref="T:System.NotSupportedException"></exception>
            <returns></returns>
        </member>
        <member name="F:Zelda.Profiles.ShortGameProfile.shortInfo">
            <summary>
            Stores the short game information about the loaden profile.
            </summary>
        </member>
        <member name="F:Zelda.Profiles.ShortGameProfile.serviceProvider">
            <summary>
            Provides fast access to game-related services.
            </summary>
        </member>
        <member name="T:Zelda.QuickActions.IQuickAction">
            <summary>
            Represents an action that can be quickly executed.
            </summary>
            <remarks>
            IsActive, IsExecuteable and CooldownLeft all expose the similiar 
            concept of whether the IQuickAction is currently 'useable'.
            </remarks>
        </member>
        <member name="P:Zelda.QuickActions.IQuickAction.IsActive">
            <summary>
            Gets a value indicating whether this IQuickAction is active;
            and as such executeable.
            </summary>
        </member>
        <member name="P:Zelda.QuickActions.IQuickAction.IsExecuteable">
            <summary>
            Gets a value indicating whether this IQuickAction is executeable.
            </summary>
        </member>
        <member name="P:Zelda.QuickActions.IQuickAction.CooldownLeft">
            <summary>
            Gets the time left (in seconds) until this IQuickAction can be executed
            again.
            </summary>
        </member>
        <member name="P:Zelda.QuickActions.IQuickAction.CooldownTotal">
            <summary>
            Gets the time (in seconds) this IQuickAction can't be executed again after executing it.
            </summary>
        </member>
        <member name="P:Zelda.QuickActions.IQuickAction.IsOnlyLimitedByCooldown">
            <summary>
            Gets a value indicating whether this IQuickAction executeability is only
            limited by the cooldown.
            </summary>
        </member>
        <member name="P:Zelda.QuickActions.IQuickAction.Symbol">
            <summary>
            Gets the symbol associated with this IQuickAction.
            </summary>
        </member>
        <member name="P:Zelda.QuickActions.IQuickAction.SymbolColor">
            <summary>
            Gets the Color the <see cref="P:Zelda.QuickActions.IQuickAction.Symbol"/> of this IQuickAction is tinted in.
            </summary>
        </member>
        <member name="M:Zelda.QuickActions.IQuickAction.Execute(Zelda.Entities.PlayerEntity)">
            <summary>
            Executes this IQuickAction.
            </summary>
            <param name="user">
            The PlayerEntity that wants to use this IQuickAction.
            </param>
            <returns>
            Whether this IQuickAction was succesfully used.
            </returns>
        </member>
        <member name="M:Zelda.QuickActions.IQuickAction.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes this IQuickAction using the given BinaryWriter.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.QuickActions.IQuickAction.Deserialize(Zelda.Entities.PlayerEntity,Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes this IQuickAction using the given BinaryReader.
            </summary>
            <param name="player">
            The PlayerEntity whose action is executed by this IQuickAction.
            </param>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="T:Zelda.QuickActions.QuickActionSlot">
            <summary>
            Represents a single entry in a <see cref="T:Zelda.QuickActions.QuickActionSlotList"/>.
            </summary>
        </member>
        <member name="P:Zelda.QuickActions.QuickActionSlot.Action">
            <summary>
            Gets or sets the <see cref="T:Zelda.QuickActions.IQuickAction"/> this QuickActionSlot is
            currently associated with.
            </summary>
        </member>
        <member name="T:Zelda.QuickActions.QuickActionSlotList">
            <summary>
            Represents a list of <see cref="T:Zelda.QuickActions.QuickActionSlot"/>s which can contain <see cref="T:Zelda.QuickActions.IQuickAction"/>s.
            </summary>
        </member>
        <member name="F:Zelda.QuickActions.QuickActionSlotList.Size">
            <summary>
            The number of <see cref="T:Zelda.QuickActions.QuickActionSlot"/>s a <see cref="T:Zelda.QuickActions.QuickActionSlotList"/> has. 
            </summary>
        </member>
        <member name="M:Zelda.QuickActions.QuickActionSlotList.#ctor(Zelda.Entities.PlayerEntity,Zelda.KeySettings)">
            <summary>
            Initializes a new instance of the QuickActionSlotList class.
            </summary>
            <param name="player">
            The PlayerEntity that owns the new QuickActionSlotList.
            </param>
            <param name="keySettings">
            The settings used to trigger the action action slots.
            </param>
        </member>
        <member name="M:Zelda.QuickActions.QuickActionSlotList.HookEvents">
            <summary>
            
            </summary>
        </member>
        <member name="M:Zelda.QuickActions.QuickActionSlotList.GetSlotAt(System.Int32)">
            <summary>
            Gets the QuickActionSlot at the given zero-based index.
            </summary>
            <param name="index">
            The zero-based input index.
            </param>
            <returns>
            The requested QuickActionSlot.
            </returns>
        </member>
        <member name="M:Zelda.QuickActions.QuickActionSlotList.GetFreeSlot">
            <summary>
            Gets an un-used <see cref="T:Zelda.QuickActions.QuickActionSlot"/>.
            </summary>
            <returns>
            An un-used QuickActionSlot; or null.
            </returns>
        </member>
        <member name="M:Zelda.QuickActions.QuickActionSlotList.AddSkill(Zelda.Skills.Skill)">
            <summary>
            Associates the given Skill with the next free QuickActionSlot.
            </summary>
            <param name="skill">
            The Skill to add.
            </param>
        </member>
        <member name="M:Zelda.QuickActions.QuickActionSlotList.TryRemoveAnyUseItemAction">
            <summary>
            Tries to remove an UseItemAction form this QuickActionSlotList.
            </summary>
            <returns>
            Whether an UseItemAction has been removed.
            </returns>
        </member>
        <member name="M:Zelda.QuickActions.QuickActionSlotList.RemoveSkill(Zelda.Skills.Skill)">
            <summary>
            Tries to temove the given Skill from this QuickActionSlotList.
            </summary>
            <param name="skill">
            The Skill to remove.
            </param>
            <returns>
            Returns whether the Skill has been removed.
            </returns>
        </member>
        <member name="M:Zelda.QuickActions.QuickActionSlotList.CreateSlots(Zelda.KeySettings)">
            <summary>
            Creates the individual QuickActionSlots.
            </summary>
            <param name="keySettings">
            The settings used to trigger the action action slots.
            </param>
        </member>
        <member name="M:Zelda.QuickActions.QuickActionSlotList.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this QuickActionSlotList.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.QuickActions.QuickActionSlotList.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes/Writes the data of this <see cref="T:Zelda.QuickActions.QuickActionSlotList"/>
            using the given System.IO.BinaryWriter.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.QuickActions.QuickActionSlotList.SerializeAction(Zelda.QuickActions.IQuickAction,Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the given IQuickAction.
            </summary>
            <param name="action">
            The action to serialize.
            </param>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.QuickActions.QuickActionSlotList.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.QuickActions.QuickActionSlotList.DeserializeAction(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes an IQuickAction.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
            <returns>
            The newly deserialized IQuickAction.
            </returns>
        </member>
        <member name="M:Zelda.QuickActions.QuickActionSlotList.SlotMissingSkills">
            <summary>
            Adds the skills of the player that are not yet slotted to this QuickActionSlotList.
            </summary>
        </member>
        <member name="M:Zelda.QuickActions.QuickActionSlotList.HasSkill(Zelda.Skills.Skill)">
            <summary>
            Gets a value indicating whether this QuickActionSlotList has the given Skill
            in one of its QuickActionSlots.
            </summary>
            <param name="skill">
            The Skill to search for.
            </param>
            <returns>
            Whether the given Skill is present in this QuickActionSlotList.
            </returns>
        </member>
        <member name="F:Zelda.QuickActions.QuickActionSlotList.slots">
            <summary>
            The various available slots.
            </summary>
        </member>
        <member name="F:Zelda.QuickActions.QuickActionSlotList.player">
            <summary>
            Idenfities the PlayerEntity whose actions can be controlled by this QuickActionSlotList.
            </summary>
        </member>
        <member name="T:Zelda.QuickActions.UseItemAction">
            <summary>
            Represents an <see cref="T:Zelda.QuickActions.IQuickAction"/> that uses an <see cref="T:Zelda.Items.Item"/>.
            </summary>
        </member>
        <member name="P:Zelda.QuickActions.UseItemAction.IsActive">
            <summary>
            Gets a value indicating whether this IQuickAction is active;
            and as such executeable.
            </summary>
        </member>
        <member name="P:Zelda.QuickActions.UseItemAction.IsExecuteable">
            <summary>
            Gets a value indicating whether this IQuickAction is executeable.
            </summary>
        </member>
        <member name="P:Zelda.QuickActions.UseItemAction.CooldownLeft">
            <summary>
            Gets the time left (in seconds) until this IQuickAction can be executed
            again.
            </summary>
        </member>
        <member name="P:Zelda.QuickActions.UseItemAction.CooldownTotal">
            <summary>
            Gets the time (in seconds) this IQuickAction can't be executed again after executing it.
            </summary>
        </member>
        <member name="P:Zelda.QuickActions.UseItemAction.IsOnlyLimitedByCooldown">
            <summary>
            Gets a value indicating whether this IQuickAction executeability is only
            limited by the cooldown.
            </summary>
        </member>
        <member name="P:Zelda.QuickActions.UseItemAction.Symbol">
            <summary>
            Gets the symbol associated with this IQuickAction.
            </summary>
        </member>
        <member name="P:Zelda.QuickActions.UseItemAction.SymbolColor">
            <summary>
            Gets the Color the <see cref="P:Zelda.QuickActions.UseItemAction.Symbol"/> of this IQuickAction is tinted in.
            </summary>
        </member>
        <member name="M:Zelda.QuickActions.UseItemAction.#ctor(Zelda.Items.Item,Zelda.Items.Inventory)">
            <summary>
            Initializes a new instance of the UseItemAction class.
            </summary>
            <param name="item">
            The item to use.
            </param>
            <param name="inventory">
            The Inventory that contains the Item to use.
            </param>
        </member>
        <member name="M:Zelda.QuickActions.UseItemAction.#ctor">
            <summary>
            Initializes a new instance of the UseItemAction class;
            used for deserialization.
            </summary>
        </member>
        <member name="M:Zelda.QuickActions.UseItemAction.Setup(Zelda.Items.Item,Zelda.Items.Inventory)">
            <summary>
            Setups a new instance of the UseItemAction class.
            </summary>
            <param name="item">
            The item to use.
            </param>
            <param name="inventory">
            The Inventory that contains the Item to use.
            </param>
        </member>
        <member name="M:Zelda.QuickActions.UseItemAction.Execute(Zelda.Entities.PlayerEntity)">
            <summary>
            Executes this UseItemQuickAction.
            </summary>
            <param name="user">
            The PlayerEntity that wants to use this IQuickAction.
            </param>
            <returns>
            Whether this IQuickAction has been executed.
            </returns>
        </member>
        <member name="M:Zelda.QuickActions.UseItemAction.OnItemAdded(System.Object,Zelda.Items.ItemInstance)">
            <summary>
            Called when an item was added to the Inventory.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="item">The item that was removed from the Inventory.</param>
        </member>
        <member name="M:Zelda.QuickActions.UseItemAction.OnItemRemoved(System.Object,Zelda.Items.ItemInstance)">
            <summary>
            Called when an item was removed from the Inventory.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="item">The item that was added to the Inventory.</param>
        </member>
        <member name="M:Zelda.QuickActions.UseItemAction.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes this IQuickAction using the given BinaryWriter.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.QuickActions.UseItemAction.Deserialize(Zelda.Entities.PlayerEntity,Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes this IQuickAction using the given BinaryReader.
            </summary>
            <param name="player">
            The PlayerEntity whose action is executed by this IQuickAction.
            </param>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.QuickActions.UseItemAction.Dispose">
            <summary>
            Disposes the (managed) resources aquired by this UseItemQuickAction.
            </summary>
        </member>
        <member name="M:Zelda.QuickActions.UseItemAction.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this UseItemAction.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="F:Zelda.QuickActions.UseItemAction.item">
            <summary>
            Identifies the Item associated with this UseItemQuickAction.
            </summary>
        </member>
        <member name="F:Zelda.QuickActions.UseItemAction.sprite">
            <summary>
            The sprite used to draw this UseItemAction.
            </summary>
        </member>
        <member name="F:Zelda.QuickActions.UseItemAction.useEffect">
            <summary>
            Identifies the ItemUseEffect associated with the Item.
            </summary>
        </member>
        <member name="F:Zelda.QuickActions.UseItemAction.hasItem">
            <summary>
            States whether the inventory currently contains atleast one Item.
            </summary>
        </member>
        <member name="F:Zelda.QuickActions.UseItemAction.inventory">
            <summary>
            Identifies the Inventory that contains the Item to be used.
            </summary>
        </member>
        <member name="T:Zelda.QuickActions.UseSkillAction">
            <summary>
            Represents an <see cref="T:Zelda.QuickActions.IQuickAction"/> that when executed
            invokes a <see cref="P:Zelda.QuickActions.UseSkillAction.Skill"/>.
            </summary>
        </member>
        <member name="P:Zelda.QuickActions.UseSkillAction.Skill">
            <summary>
            Gets the <see cref="P:Zelda.QuickActions.UseSkillAction.Skill"/> that is invoked by this UseSkillAction.
            </summary>
        </member>
        <member name="P:Zelda.QuickActions.UseSkillAction.IsActive">
            <summary>
            Gets a value indicating whether this IQuickAction is active;
            and as such executeable.
            </summary>
        </member>
        <member name="P:Zelda.QuickActions.UseSkillAction.IsExecuteable">
            <summary>
            Gets a value indicating whether this IQuickAction is executeable.
            </summary>
        </member>
        <member name="P:Zelda.QuickActions.UseSkillAction.CooldownLeft">
            <summary>
            Gets the time left (in seconds) until this IQuickAction can be executed
            again.
            </summary>
        </member>
        <member name="P:Zelda.QuickActions.UseSkillAction.CooldownTotal">
            <summary>
            Gets the time (in seconds) this IQuickAction can't be executed again after executing it.
            </summary>
        </member>
        <member name="P:Zelda.QuickActions.UseSkillAction.IsOnlyLimitedByCooldown">
            <summary>
            Gets a value indicating whether this IQuickAction executeability is only
            limited by the cooldown.
            </summary>
        </member>
        <member name="P:Zelda.QuickActions.UseSkillAction.Symbol">
            <summary>
            Gets the symbol associated with this IQuickAction.
            </summary>
        </member>
        <member name="P:Zelda.QuickActions.UseSkillAction.SymbolColor">
            <summary>
            Gets the Color the <see cref="P:Zelda.QuickActions.UseSkillAction.Symbol"/> of this IQuickAction is tinted in.
            </summary>
        </member>
        <member name="M:Zelda.QuickActions.UseSkillAction.#ctor(Zelda.Skills.Skill)">
            <summary>
            Initializes a new instance of the UseSkillAction class.
            </summary>
            <param name="skill">
            The Skill that should be invoked by the new UseSkillAction.
            </param>
        </member>
        <member name="M:Zelda.QuickActions.UseSkillAction.#ctor">
            <summary>
            Initializes a new instance of the UseSkillAction class;
            used for deserialization.
            </summary>
        </member>
        <member name="M:Zelda.QuickActions.UseSkillAction.Execute(Zelda.Entities.PlayerEntity)">
            <summary>
            Executes this UseSkillQuickAction.
            </summary>
            <param name="user">
            The PlayerEntity that wants to use this IQuickAction.
            </param>
            <returns>
            Whether this IQuickAction has been executed.
            </returns>
        </member>
        <member name="M:Zelda.QuickActions.UseSkillAction.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this UseSkillAction.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.QuickActions.UseSkillAction.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes this IQuickAction using the given BinaryWriter.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.QuickActions.UseSkillAction.Deserialize(Zelda.Entities.PlayerEntity,Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes this IQuickAction using the given BinaryReader.
            </summary>
            <param name="player">
            The PlayerEntity whose action is executed by this IQuickAction.
            </param>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.QuickActions.UseSkillAction.skill">
            <summary>
            The Skill invoked by this UseSkillAction.
            </summary>
        </member>
        <member name="T:Zelda.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Zelda.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Zelda.Resources.AcceptedQuestX">
            <summary>
              Looks up a localized string similar to New Quest &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Zelda.Resources.ActiveSkill">
            <summary>
              Looks up a localized string similar to active skill.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Agility">
            <summary>
              Looks up a localized string similar to Agility.
            </summary>
        </member>
        <member name="P:Zelda.Resources.All">
            <summary>
              Looks up a localized string similar to All.
            </summary>
        </member>
        <member name="P:Zelda.Resources.AllResistances">
            <summary>
              Looks up a localized string similar to All Resistances.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Armor">
            <summary>
              Looks up a localized string similar to Armor.
            </summary>
        </member>
        <member name="P:Zelda.Resources.ArmorIgnore">
            <summary>
              Looks up a localized string similar to Armor Ignore.
            </summary>
        </member>
        <member name="P:Zelda.Resources.ArmorIgnoreRating">
            <summary>
              Looks up a localized string similar to Armor Ignore Rating.
            </summary>
        </member>
        <member name="P:Zelda.Resources.ArmorXMitigationY">
            <summary>
              Looks up a localized string similar to {0} Armor ({1}%).
            </summary>
        </member>
        <member name="P:Zelda.Resources.AttackMelee">
            <summary>
              Looks up a localized string similar to Attack Melee.
            </summary>
        </member>
        <member name="P:Zelda.Resources.AttackRanged">
            <summary>
              Looks up a localized string similar to Attack Ranged.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Bag">
            <summary>
              Looks up a localized string similar to Bag.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Beast">
            <summary>
              Looks up a localized string similar to Beast.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Beasts">
            <summary>
              Looks up a localized string similar to Beasts.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Belt">
            <summary>
              Looks up a localized string similar to Belt.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Bleed">
            <summary>
              Looks up a localized string similar to Bleed.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Block">
            <summary>
              Looks up a localized string similar to Block.
            </summary>
        </member>
        <member name="P:Zelda.Resources.BlockChance">
            <summary>
              Looks up a localized string similar to Block Chance.
            </summary>
        </member>
        <member name="P:Zelda.Resources.BlockChanceRating">
            <summary>
              Looks up a localized string similar to Block Chance Rating.
            </summary>
        </member>
        <member name="P:Zelda.Resources.BlockValue">
            <summary>
              Looks up a localized string similar to Block Value.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Boots">
            <summary>
              Looks up a localized string similar to Boots.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Bottle">
            <summary>
              Looks up a localized string similar to Bottle.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Bow">
            <summary>
              Looks up a localized string similar to Bow.
            </summary>
        </member>
        <member name="P:Zelda.Resources.ChanceTo">
            <summary>
              Looks up a localized string similar to Chance to.
            </summary>
        </member>
        <member name="P:Zelda.Resources.ChanceToBe">
            <summary>
              Looks up a localized string similar to Chance to Be.
            </summary>
        </member>
        <member name="P:Zelda.Resources.ChanceToBeCrit">
            <summary>
              Looks up a localized string similar to chance to be crit.
            </summary>
        </member>
        <member name="P:Zelda.Resources.ChanceToBeCritX">
            <summary>
              Looks up a localized string similar to {0}% chance to be Crit.
            </summary>
        </member>
        <member name="P:Zelda.Resources.ChanceToBeHit">
            <summary>
              Looks up a localized string similar to chance to be hit.
            </summary>
        </member>
        <member name="P:Zelda.Resources.ChanceToBeHitX">
            <summary>
              Looks up a localized string similar to {0}% chance to be Hit.
            </summary>
        </member>
        <member name="P:Zelda.Resources.ChanceToBeParried">
            <summary>
              Looks up a localized string similar to chance to be parried.
            </summary>
        </member>
        <member name="P:Zelda.Resources.ChanceToBeParriedX">
            <summary>
              Looks up a localized string similar to {0}% chance to be Parried.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Chest">
            <summary>
              Looks up a localized string similar to Chest.
            </summary>
        </member>
        <member name="P:Zelda.Resources.ChestOfWinds">
            <summary>
              Looks up a localized string similar to Chest of Winds.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Cloak">
            <summary>
              Looks up a localized string similar to Cloak.
            </summary>
        </member>
        <member name="P:Zelda.Resources.CompanyName">
            <summary>
              Looks up a localized string similar to federrot Software.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Cooldown">
            <summary>
              Looks up a localized string similar to Cooldown.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Crit">
            <summary>
              Looks up a localized string similar to Crit.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Crit1">
            <summary>
              Looks up a localized string similar to Crit.
            </summary>
        </member>
        <member name="P:Zelda.Resources.CritBlock">
            <summary>
              Looks up a localized string similar to Block Crit.
            </summary>
        </member>
        <member name="P:Zelda.Resources.CritHeal">
            <summary>
              Looks up a localized string similar to Heal Crit.
            </summary>
        </member>
        <member name="P:Zelda.Resources.CriticalBonus">
            <summary>
              Looks up a localized string similar to Critical Bonus.
            </summary>
        </member>
        <member name="P:Zelda.Resources.CriticalDamageBonus">
            <summary>
              Looks up a localized string similar to Critical Damage Bonus.
            </summary>
        </member>
        <member name="P:Zelda.Resources.CritRating">
            <summary>
              Looks up a localized string similar to Crit Rating.
            </summary>
        </member>
        <member name="P:Zelda.Resources.CritX">
            <summary>
              Looks up a localized string similar to {0}% Crit.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Crossbow">
            <summary>
              Looks up a localized string similar to Crossbow.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Dagger">
            <summary>
              Looks up a localized string similar to Dagger.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Damage">
            <summary>
              Looks up a localized string similar to Damage.
            </summary>
        </member>
        <member name="P:Zelda.Resources.DamageOverTime">
            <summary>
              Looks up a localized string similar to Damage Over Time.
            </summary>
        </member>
        <member name="P:Zelda.Resources.DeathCount">
            <summary>
              Looks up a localized string similar to Death Count.
            </summary>
        </member>
        <member name="P:Zelda.Resources.DecreasesAttackSpeedRatingWithXByY">
            <summary>
              Looks up a localized string similar to -{0}{1} Attack Speed Rating ({2}%).
            </summary>
        </member>
        <member name="P:Zelda.Resources.DecreasesAttackSpeedWithXByY">
            <summary>
              Looks up a localized string similar to -{1}%{0} Attack Speed.
            </summary>
        </member>
        <member name="P:Zelda.Resources.DecreasesDamageDoneWithXByY">
            <summary>
              Looks up a localized string similar to -{1} {0}damage.
            </summary>
        </member>
        <member name="P:Zelda.Resources.DecreasesDamageDoneWithXByYPercent">
            <summary>
              Looks up a localized string similar to -{1}% {0}damage.
            </summary>
        </member>
        <member name="P:Zelda.Resources.DecreasesDamageTakenFromXByY">
            <summary>
              Looks up a localized string similar to -{1} {0}damage taken.
            </summary>
        </member>
        <member name="P:Zelda.Resources.DecreasesDamageTakenFromXByYPercent">
            <summary>
              Looks up a localized string similar to -{1}% {0}damage taken.
            </summary>
        </member>
        <member name="P:Zelda.Resources.DecXByRatingYActualZ">
            <summary>
              Looks up a localized string similar to -{0} {1} Rating ({2}%).
            </summary>
        </member>
        <member name="P:Zelda.Resources.DecXByY">
            <summary>
              Looks up a localized string similar to -{1} {0}.
            </summary>
        </member>
        <member name="P:Zelda.Resources.DecXByYPercent">
            <summary>
              Looks up a localized string similar to -{1}% {0}.
            </summary>
        </member>
        <member name="P:Zelda.Resources.DemiBeast">
            <summary>
              Looks up a localized string similar to Demi Beast.
            </summary>
        </member>
        <member name="P:Zelda.Resources.DemiBeasts">
            <summary>
              Looks up a localized string similar to Demi-Beasts.
            </summary>
        </member>
        <member name="P:Zelda.Resources.DemiHuman">
            <summary>
              Looks up a localized string similar to Demi Human.
            </summary>
        </member>
        <member name="P:Zelda.Resources.DemiHumans">
            <summary>
              Looks up a localized string similar to Demi-Humans.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Demon">
            <summary>
              Looks up a localized string similar to Demon.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Demons">
            <summary>
              Looks up a localized string similar to Demons.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Dexterity">
            <summary>
              Looks up a localized string similar to Dexterity.
            </summary>
        </member>
        <member name="P:Zelda.Resources.DialogTitle_SelectItem">
            <summary>
              Looks up a localized string similar to Select an item definition file ....
            </summary>
        </member>
        <member name="P:Zelda.Resources.DialogTitle_SelectScene">
            <summary>
              Looks up a localized string similar to Select an scene definition file ....
            </summary>
        </member>
        <member name="P:Zelda.Resources.DialogTitle_SelectSet">
            <summary>
              Looks up a localized string similar to Select a Item Set definition file..
            </summary>
        </member>
        <member name="P:Zelda.Resources.DialogTitle_SelectSprite">
            <summary>
              Looks up a localized string similar to Select a Sprite resource..
            </summary>
        </member>
        <member name="P:Zelda.Resources.DialogTitle_SelectTexture">
            <summary>
              Looks up a localized string similar to Select a texture ...
            </summary>
        </member>
        <member name="P:Zelda.Resources.Dodge">
            <summary>
              Looks up a localized string similar to Dodge.
            </summary>
        </member>
        <member name="P:Zelda.Resources.DodgeRating">
            <summary>
              Looks up a localized string similar to Dodge Rating.
            </summary>
        </member>
        <member name="P:Zelda.Resources.DodgeX">
            <summary>
              Looks up a localized string similar to {0}% Dodge.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Easy">
            <summary>
              Looks up a localized string similar to Easy.
            </summary>
        </member>
        <member name="P:Zelda.Resources.ED_DmgDoneRaceMod_Negative">
            <summary>
              Looks up a localized string similar to -{1} damage done against {0}.
            </summary>
        </member>
        <member name="P:Zelda.Resources.ED_DmgDoneRaceMod_Positive">
            <summary>
              Looks up a localized string similar to +{1} damage done against {0}.
            </summary>
        </member>
        <member name="P:Zelda.Resources.ED_EquipmentStatModifierEffect">
            <summary>
              Looks up a localized string similar to Stat Points given by {0}-type items.
            </summary>
        </member>
        <member name="P:Zelda.Resources.ED_Neg">
            <summary>
              Looks up a localized string similar to Decreases {0} by {1}..
            </summary>
        </member>
        <member name="P:Zelda.Resources.ED_NegPercentage">
            <summary>
              Looks up a localized string similar to Decreases {0} by {1}%..
            </summary>
        </member>
        <member name="P:Zelda.Resources.ED_Pos">
            <summary>
              Looks up a localized string similar to Increases {0} by {1}..
            </summary>
        </member>
        <member name="P:Zelda.Resources.ED_PosPercentage">
            <summary>
              Looks up a localized string similar to Increases {0} by {1}%..
            </summary>
        </member>
        <member name="P:Zelda.Resources.ED_TempNeg">
            <summary>
              Looks up a localized string similar to Temporarily decreases {0} by {1}..
            </summary>
        </member>
        <member name="P:Zelda.Resources.ED_TempNegPercentage">
            <summary>
              Looks up a localized string similar to Temporarily decreases {0} by {1}%..
            </summary>
        </member>
        <member name="P:Zelda.Resources.ED_TempPos">
            <summary>
              Looks up a localized string similar to Temporarily increases {0} by {1}..
            </summary>
        </member>
        <member name="P:Zelda.Resources.ED_TempPosPercentage">
            <summary>
              Looks up a localized string similar to Temporarily increases {0} by {1}%..
            </summary>
        </member>
        <member name="P:Zelda.Resources.EmptySocketX">
            <summary>
              Looks up a localized string similar to &gt; empty {0} socket.
            </summary>
        </member>
        <member name="P:Zelda.Resources.EN_Boss_RudrasEye">
            <summary>
              Looks up a localized string similar to Demon Eye.
            </summary>
        </member>
        <member name="P:Zelda.Resources.EN_DemonEyeBaby">
            <summary>
              Looks up a localized string similar to Demon Eye Baby.
            </summary>
        </member>
        <member name="P:Zelda.Resources.EN_DemonGirl">
            <summary>
              Looks up a localized string similar to Demon Girl.
            </summary>
        </member>
        <member name="P:Zelda.Resources.EN_Ghost_Boss">
            <summary>
              Looks up a localized string similar to Evil Ghost Boss.
            </summary>
        </member>
        <member name="P:Zelda.Resources.EN_Goron_Mad_45">
            <summary>
              Looks up a localized string similar to Mad Goron.
            </summary>
        </member>
        <member name="P:Zelda.Resources.EN_Keese_Red">
            <summary>
              Looks up a localized string similar to Blood Keese.
            </summary>
        </member>
        <member name="P:Zelda.Resources.EN_Skeleton_Green">
            <summary>
              Looks up a localized string similar to Green Skeleton.
            </summary>
        </member>
        <member name="P:Zelda.Resources.EN_Skeleton_Red">
            <summary>
              Looks up a localized string similar to Red Skeleton.
            </summary>
        </member>
        <member name="P:Zelda.Resources.EN_SkeletonHead">
            <summary>
              Looks up a localized string similar to Whisper.
            </summary>
        </member>
        <member name="P:Zelda.Resources.EnumValueIsNotSupported">
            <summary>
              Looks up a localized string similar to The specified Enum value is not supported by this operation..
            </summary>
        </member>
        <member name="P:Zelda.Resources.Equipment">
            <summary>
              Looks up a localized string similar to Equipment.
            </summary>
        </member>
        <member name="P:Zelda.Resources.EquipmentStatus">
            <summary>
              Looks up a localized string similar to Equipment Status.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Error">
            <summary>
              Looks up a localized string similar to Error.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Error_AlreadyHavePickedUpItem">
            <summary>
              Looks up a localized string similar to The player already has picked-up an item. Drop or restore the currently picked-up item first..
            </summary>
        </member>
        <member name="P:Zelda.Resources.Error_AuraXAlreadyDisabled">
            <summary>
              Looks up a localized string similar to The Zelda.Status.Aura &apos;{0}&apos; is already disabled..
            </summary>
        </member>
        <member name="P:Zelda.Resources.Error_AuraXAlreadyEnabledForY">
            <summary>
              Looks up a localized string similar to The Zelda.Status.Aura &apos;{0}&apos; is already enabled for the statable Entity &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Zelda.Resources.Error_AuraXAlreadyIsAttachedToTheAuraListOfEntityY">
            <summary>
              Looks up a localized string similar to The Aura &apos;{0}&apos; is already attached to the AuraList of statable Entity &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Zelda.Resources.Error_BehaviourXNotFoundInBehaveableOfY">
            <summary>
              Looks up a localized string similar to The requested behaviour &apos;{0}&apos; was not found in the Behaveable component of entity {1}. This is required..
            </summary>
        </member>
        <member name="P:Zelda.Resources.Error_CantLeaveEntityBehaviourItIsNotActive">
            <summary>
              Looks up a localized string similar to Can&apos;t leave this EntityBehaviour; it is not active..
            </summary>
        </member>
        <member name="P:Zelda.Resources.Error_CantRemoveXItemYTimesFromInventory">
            <summary>
              Looks up a localized string similar to Can&apos;t remove the Item &apos;{0}&apos; from the inventory &apos;{1}&apos; times..
            </summary>
        </member>
        <member name="P:Zelda.Resources.Error_CantRestoreForZeroOrLessThanZero">
            <summary>
              Looks up a localized string similar to Can&apos;t restore for zero or less than zero..
            </summary>
        </member>
        <member name="P:Zelda.Resources.Error_CantSaveSceneNameNotSet">
            <summary>
              Looks up a localized string similar to Cannot save a Scene whose name has not been set..
            </summary>
        </member>
        <member name="P:Zelda.Resources.Error_CouldntFindEntityReaderWriterForTypeX">
            <summary>
              Looks up a localized string similar to Couldn&apos;t find the IEntityReaderWriter for type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Zelda.Resources.Error_CouldntFindSpawnPointXInSceneY">
            <summary>
              Looks up a localized string similar to Couldn&apos;t find any ISpawnPoint named &apos;{0}&apos; in the scene &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Zelda.Resources.Error_CouldntFindWeatherCreatorOfTypeX">
            <summary>
              Looks up a localized string similar to Couldn&apos;t find IWeatherCreator of type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Zelda.Resources.Error_CouldntFindXNameY">
            <summary>
              Looks up a localized string similar to Couldn&apos;t find {0} with name &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Zelda.Resources.Error_CreatingInstanceOfAffixedItemBaseTypeXNotSupportedOrImplemented">
            <summary>
              Looks up a localized string similar to Creating an instance of the AffixedItem with base type &apos;{0}&apos; is not implemented or supported..
            </summary>
        </member>
        <member name="P:Zelda.Resources.Error_DrawableHasInvalidFloorNrXThereAreYFloorsInSceneZ">
            <summary>
              Looks up a localized string similar to Drawable Object has invalid FloorNumber of &apos;{0}&apos;. There are &apos;{1}&apos; Floors in Scene &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:Zelda.Resources.Error_EntityAlreadyExistsInScene">
            <summary>
              Looks up a localized string similar to The Entity already exists in the Scene..
            </summary>
        </member>
        <member name="P:Zelda.Resources.Error_EntityIsRequiredToHaveComponentX">
            <summary>
              Looks up a localized string similar to The entity is required to have the &apos;{0}&apos; component..
            </summary>
        </member>
        <member name="P:Zelda.Resources.Error_EntityIsRequiredToImplementInterfaceX">
            <summary>
              Looks up a localized string similar to The entity is required to implement the &apos;{0}&apos; interface..
            </summary>
        </member>
        <member name="P:Zelda.Resources.Error_EntityTemplateMustBeSet">
            <summary>
              Looks up a localized string similar to The entity template must be set for this operation..
            </summary>
        </member>
        <member name="P:Zelda.Resources.Error_EquipmentXIsAlreadyEquippedByY">
            <summary>
              Looks up a localized string similar to The Equipment &apos;{0}&apos; is already equipped by &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Zelda.Resources.Error_ErrorLoadingQuestX">
            <summary>
              Looks up a localized string similar to And error occurred while loading the Quest &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Zelda.Resources.Error_FactionXDoesNotExist">
            <summary>
              Looks up a localized string similar to The Faction &apos;{0}&apos; does not exist..
            </summary>
        </member>
        <member name="P:Zelda.Resources.Error_FloorNumberInvalid">
            <summary>
              Looks up a localized string similar to The Floor Number is invalid..
            </summary>
        </member>
        <member name="P:Zelda.Resources.Error_GemXIsAlreadyUsedByY">
            <summary>
              Looks up a localized string similar to The Gem &apos;{0}&apos; is already socketted/used by &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Zelda.Resources.Error_GivenCellIndexIsInvalid">
            <summary>
              Looks up a localized string similar to The given cell index is invalid..
            </summary>
        </member>
        <member name="P:Zelda.Resources.Error_GivenItemCountOutOfValidStackRange">
            <summary>
              Looks up a localized string similar to The given Item count value is out of the valid Stack Range of the Item..
            </summary>
        </member>
        <member name="P:Zelda.Resources.Error_InvalidSpriteTypeX">
            <summary>
              Looks up a localized string similar to Invalid Sprite Type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Zelda.Resources.Error_ItemIsNull">
            <summary>
              Looks up a localized string similar to The item is null. This is invalid for this operation..
            </summary>
        </member>
        <member name="P:Zelda.Resources.Error_ItemPrefixSuffixBothNull">
            <summary>
              Looks up a localized string similar to The item pre- and suffix are both null. Atleast one must not be null..
            </summary>
        </member>
        <member name="P:Zelda.Resources.Error_ItemRequiredToHaveUseEffect">
            <summary>
              Looks up a localized string similar to The Itme is required to have an UseEffect..
            </summary>
        </member>
        <member name="P:Zelda.Resources.Error_LayerNumberInvalid">
            <summary>
              Looks up a localized string similar to The Layer Number is invalid..
            </summary>
        </member>
        <member name="P:Zelda.Resources.Error_LoadingSoundAssetXExceptionMessageY">
             <summary>
               Looks up a localized string similar to An error has occurred while loading the Sound Asset &apos;{0}&apos;.
            Exception Message:
            
            &quot;{1}&quot;.
             </summary>
        </member>
        <member name="P:Zelda.Resources.Error_LoadingSpriteAssetXExceptionMessageY">
             <summary>
               Looks up a localized string similar to An error has occurred while loading the Sprite Asset &apos;{0}&apos;.
            Exception Message:
            
            &quot;{1}&quot;.
             </summary>
        </member>
        <member name="P:Zelda.Resources.Error_LoadingVersionXOfYIsNotSupportedCurrentVersionZ">
            <summary>
              Looks up a localized string similar to Loading of version &apos;{0}&apos; of &apos;{1}&apos; is not supported. The current version is &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:Zelda.Resources.Error_NoActiveZeldaScene">
            <summary>
              Looks up a localized string similar to There is currently no active ZeldaScene..
            </summary>
        </member>
        <member name="P:Zelda.Resources.Error_NoItemIsInGivenCell">
            <summary>
              Looks up a localized string similar to No item is in the given inventory cell. This is invalid for this operation..
            </summary>
        </member>
        <member name="P:Zelda.Resources.Error_OverlayAlreadyExistsInScene">
            <summary>
              Looks up a localized string similar to The Overlay already exists in the Scene..
            </summary>
        </member>
        <member name="P:Zelda.Resources.Error_PlayerSpawnPointCanOnlySpawnPlayerEntity">
            <summary>
              Looks up a localized string similar to The Zelda.Entities.Spawning.PlayerSpawnPoint can only spawn the Zelda.Entities.PlayerEntity..
            </summary>
        </member>
        <member name="P:Zelda.Resources.Error_QuestAlreadyAccepted">
            <summary>
              Looks up a localized string similar to This quest has already been accepted by the player..
            </summary>
        </member>
        <member name="P:Zelda.Resources.Error_QuestIsCompleted">
            <summary>
              Looks up a localized string similar to The quest has already been completed. This is invalid for this operation..
            </summary>
        </member>
        <member name="P:Zelda.Resources.Error_QuestLogAlreadyContainsQuest">
            <summary>
              Looks up a localized string similar to The QuestLog already contains the specified quest..
            </summary>
        </member>
        <member name="P:Zelda.Resources.Error_QuestNameNotSet">
            <summary>
              Looks up a localized string similar to The name of the quest has not been set. This is required for this operation..
            </summary>
        </member>
        <member name="P:Zelda.Resources.Error_QuestNotAccepted">
            <summary>
              Looks up a localized string similar to This quest has not been accepted by the player. This needs to be done for this operation to work..
            </summary>
        </member>
        <member name="P:Zelda.Resources.Error_RequiresIRangedEnemyBehaviour">
            <summary>
              Looks up a localized string similar to The entity is required to have an IEntityBehaviour of type IRangedEnemyBehaviour..
            </summary>
        </member>
        <member name="P:Zelda.Resources.Error_RespawnCooldownIsNull">
            <summary>
              Looks up a localized string similar to The RespawnCooldown is null. This is invalid..
            </summary>
        </member>
        <member name="P:Zelda.Resources.Error_SceneIsNull">
            <summary>
              Looks up a localized string similar to The current scene is null..
            </summary>
        </member>
        <member name="P:Zelda.Resources.Error_SceneStatusAlreadyExists">
            <summary>
              Looks up a localized string similar to The SceneStatus already exists..
            </summary>
        </member>
        <member name="P:Zelda.Resources.Error_SomeWeatherEffectsAreNotSupportedInsufficientPSSupport">
             <summary>
               Looks up a localized string similar to 
            Warning!! Some WeatherEffects are not supported! Insufficient Pixel Shader support.
            .
             </summary>
        </member>
        <member name="P:Zelda.Resources.Error_SongIsAlreadyPlaying">
            <summary>
              Looks up a localized string similar to The Song is already playing..
            </summary>
        </member>
        <member name="P:Zelda.Resources.Error_SpawnPointXOrAlternativeNotFound">
            <summary>
              Looks up a localized string similar to The SpawnPoint &apos;{0}&apos; nor an alternative SpawnPoint could be found in the current scene..
            </summary>
        </member>
        <member name="P:Zelda.Resources.Error_StatusManipTypeRatingInvalid">
            <summary>
              Looks up a localized string similar to A StatusManipulationType of &apos;Rating&apos; is invalid..
            </summary>
        </member>
        <member name="P:Zelda.Resources.Error_TheComponentNeedsSetup">
            <summary>
              Looks up a localized string similar to The component needs to be setup..
            </summary>
        </member>
        <member name="P:Zelda.Resources.Error_TheGivenSongIsAlreadyKnown">
            <summary>
              Looks up a localized string similar to The given Song is already known to this OcarinaBox..
            </summary>
        </member>
        <member name="P:Zelda.Resources.Error_TheGivenSongNameIsInvalid">
            <summary>
              Looks up a localized string similar to The given song name is invalid..
            </summary>
        </member>
        <member name="P:Zelda.Resources.Error_TheProfileIsNull">
            <summary>
              Looks up a localized string similar to The profile is null. This is not valid..
            </summary>
        </member>
        <member name="P:Zelda.Resources.Error_ValueMustBeGreaterOrEqualMinimum">
            <summary>
              Looks up a localized string similar to The value must be greater than or equal to the minimum..
            </summary>
        </member>
        <member name="P:Zelda.Resources.Error_ValueMustBeLessOrEqualMaximum">
            <summary>
              Looks up a localized string similar to The value must be less than or equal to the maximum..
            </summary>
        </member>
        <member name="P:Zelda.Resources.ErrorCantAddAnotherPropertyOfThatTypeItIsUnique">
            <summary>
              Looks up a localized string similar to Only one IProperty of that type is allowed at a single time..
            </summary>
        </member>
        <member name="P:Zelda.Resources.Exalted">
            <summary>
              Looks up a localized string similar to Exalted.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Experience">
            <summary>
              Looks up a localized string similar to Exp.
            </summary>
        </member>
        <member name="P:Zelda.Resources.ExperienceGained">
            <summary>
              Looks up a localized string similar to Experience Gained.
            </summary>
        </member>
        <member name="P:Zelda.Resources.ExperienceGainedRating">
            <summary>
              Looks up a localized string similar to Experience Gained Rating.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Fairies">
            <summary>
              Looks up a localized string similar to Fairies.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Fairy">
            <summary>
              Looks up a localized string similar to Fairy.
            </summary>
        </member>
        <member name="P:Zelda.Resources.FD_BrotherhoodOfTheTemple">
             <summary>
               Looks up a localized string similar to The Brotherhood of the Temple are
            honored for their brave deeds and
            feared for their powerful magic..
             </summary>
        </member>
        <member name="P:Zelda.Resources.FD_Goronia">
            <summary>
              Looks up a localized string similar to The mighty boulder brothers of Goronia. They inherit their strength from the earth itself..
            </summary>
        </member>
        <member name="P:Zelda.Resources.FD_TownFolk">
            <summary>
              Looks up a localized string similar to The &apos;innocent&apos; people of Hyrule town..
            </summary>
        </member>
        <member name="P:Zelda.Resources.Filter_BinarySpriteResources">
            <summary>
              Looks up a localized string similar to Compiled Sprite Resources (*.xnb)|*.xnb.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Filter_BinaryTextureResources">
            <summary>
              Looks up a localized string similar to Compiled Texture Resources (*.xnb)|*.xnb.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Filter_ItemResources">
            <summary>
              Looks up a localized string similar to Item Definition Files (*.zitm)|*.zitm.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Filter_SceneResources">
            <summary>
              Looks up a localized string similar to Scene Files (*.zs)|*.zs.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Filter_SetResources">
            <summary>
              Looks up a localized string similar to Set Definition Files (*.zset)|*.zset.
            </summary>
        </member>
        <member name="P:Zelda.Resources.FinishedSpellCast">
            <summary>
              Looks up a localized string similar to finished spell cast.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Fire">
            <summary>
              Looks up a localized string similar to Fire.
            </summary>
        </member>
        <member name="P:Zelda.Resources.FireGem">
            <summary>
              Looks up a localized string similar to Fire Gem.
            </summary>
        </member>
        <member name="P:Zelda.Resources.FireResistance">
            <summary>
              Looks up a localized string similar to Fire Resistance.
            </summary>
        </member>
        <member name="P:Zelda.Resources.FN_BrotherhoodOfTheTemple">
            <summary>
              Looks up a localized string similar to Brotherhood.
            </summary>
        </member>
        <member name="P:Zelda.Resources.FN_Goronia">
            <summary>
              Looks up a localized string similar to Goronia.
            </summary>
        </member>
        <member name="P:Zelda.Resources.FN_TownFolk">
            <summary>
              Looks up a localized string similar to Hyrule.
            </summary>
        </member>
        <member name="P:Zelda.Resources.FormatStringArmor">
            <summary>
              Looks up a localized string similar to {0} Armor.
            </summary>
        </member>
        <member name="P:Zelda.Resources.FormatStringStatNegative">
            <summary>
              Looks up a localized string similar to -{0} {1}.
            </summary>
        </member>
        <member name="P:Zelda.Resources.FormatStringStatPositive">
            <summary>
              Looks up a localized string similar to +{0} {1}.
            </summary>
        </member>
        <member name="P:Zelda.Resources.FreeStatPoint">
            <summary>
              Looks up a localized string similar to free point.
            </summary>
        </member>
        <member name="P:Zelda.Resources.FreeStatPoints">
            <summary>
              Looks up a localized string similar to free points.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Friendly">
            <summary>
              Looks up a localized string similar to Friendly.
            </summary>
        </member>
        <member name="P:Zelda.Resources.GameName">
            <summary>
              Looks up a localized string similar to The Legend of Zelda - Black Crown.
            </summary>
        </member>
        <member name="P:Zelda.Resources.GameSaved">
            <summary>
              Looks up a localized string similar to Game Saved.
            </summary>
        </member>
        <member name="P:Zelda.Resources.GameTime">
            <summary>
              Looks up a localized string similar to Game Time.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Gem">
            <summary>
              Looks up a localized string similar to Gem.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Gloves">
            <summary>
              Looks up a localized string similar to Gloves.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Hated">
            <summary>
              Looks up a localized string similar to Hated.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Head">
            <summary>
              Looks up a localized string similar to Head.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Heal">
            <summary>
              Looks up a localized string similar to Heal.
            </summary>
        </member>
        <member name="P:Zelda.Resources.HealingPotionEffectiveness">
            <summary>
              Looks up a localized string similar to Healing Potion Effectiveness.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Hell">
            <summary>
              Looks up a localized string similar to Hell.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Hit">
            <summary>
              Looks up a localized string similar to Hit.
            </summary>
        </member>
        <member name="P:Zelda.Resources.HitRating">
            <summary>
              Looks up a localized string similar to Hit Rating.
            </summary>
        </member>
        <member name="P:Zelda.Resources.HitX">
            <summary>
              Looks up a localized string similar to {0}% Hit.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Honored">
            <summary>
              Looks up a localized string similar to Honored.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Human">
            <summary>
              Looks up a localized string similar to Human.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Humans">
            <summary>
              Looks up a localized string similar to Humans.
            </summary>
        </member>
        <member name="P:Zelda.Resources.IncreasesAttackSpeedRatingWithXByY">
            <summary>
              Looks up a localized string similar to +{0}{1} Attack Speed Rating ({2}%).
            </summary>
        </member>
        <member name="P:Zelda.Resources.IncreasesAttackSpeedWithXByY">
            <summary>
              Looks up a localized string similar to +{1}%{0} Attack Speed.
            </summary>
        </member>
        <member name="P:Zelda.Resources.IncreasesChanceToXByY">
            <summary>
              Looks up a localized string similar to Increases chance to {0} by {1}..
            </summary>
        </member>
        <member name="P:Zelda.Resources.IncreasesChanceToXByYPercent">
            <summary>
              Looks up a localized string similar to Increases chance to {0} by {1}%..
            </summary>
        </member>
        <member name="P:Zelda.Resources.IncreasesDamageDoneWithXByY">
            <summary>
              Looks up a localized string similar to +{1} {0}damage.
            </summary>
        </member>
        <member name="P:Zelda.Resources.IncreasesDamageDoneWithXByYPercent">
            <summary>
              Looks up a localized string similar to +{1}% {0}damage.
            </summary>
        </member>
        <member name="P:Zelda.Resources.IncreasesDamageTakenFromXByY">
            <summary>
              Looks up a localized string similar to +{1} {0}damage taken.
            </summary>
        </member>
        <member name="P:Zelda.Resources.IncreasesDamageTakenFromXByYPercent">
            <summary>
              Looks up a localized string similar to +{1}% {0}damage taken.
            </summary>
        </member>
        <member name="P:Zelda.Resources.IncreasesXByY">
            <summary>
              Looks up a localized string similar to Increases {0} by {1}..
            </summary>
        </member>
        <member name="P:Zelda.Resources.IncreasesXByYPercent">
            <summary>
              Looks up a localized string similar to Increases {0} by {1}%..
            </summary>
        </member>
        <member name="P:Zelda.Resources.IncXByRatingYActualZ">
            <summary>
              Looks up a localized string similar to +{0} {1} Rating ({2}%).
            </summary>
        </member>
        <member name="P:Zelda.Resources.IncXByY">
            <summary>
              Looks up a localized string similar to +{1} {0}.
            </summary>
        </member>
        <member name="P:Zelda.Resources.IncXByYPercent">
            <summary>
              Looks up a localized string similar to +{1}% {0}.
            </summary>
        </member>
        <member name="P:Zelda.Resources.InfoBlocking">
            <summary>
              Looks up a localized string similar to {0}% to block &apos;1 to {1}&apos;.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Insane">
            <summary>
              Looks up a localized string similar to Insane.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Intelligence">
            <summary>
              Looks up a localized string similar to Intelligence.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Item">
            <summary>
              Looks up a localized string similar to Item.
            </summary>
        </member>
        <member name="P:Zelda.Resources.KillCount">
            <summary>
              Looks up a localized string similar to Kill Count.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Level">
            <summary>
              Looks up a localized string similar to Level.
            </summary>
        </member>
        <member name="P:Zelda.Resources.LevelUp">
            <summary>
              Looks up a localized string similar to Level Up.
            </summary>
        </member>
        <member name="P:Zelda.Resources.LevelXClassY">
            <summary>
              Looks up a localized string similar to Level {0} {1}.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Life">
            <summary>
              Looks up a localized string similar to Life.
            </summary>
        </member>
        <member name="P:Zelda.Resources.LifeManaRegeneration">
            <summary>
              Looks up a localized string similar to Life and Mana Regeneration.
            </summary>
        </member>
        <member name="P:Zelda.Resources.LifeRegen">
            <summary>
              Looks up a localized string similar to Life Regeneration.
            </summary>
        </member>
        <member name="P:Zelda.Resources.LifeXManaYRegen">
            <summary>
              Looks up a localized string similar to {0}L/{1}M Regen.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Light">
            <summary>
              Looks up a localized string similar to Light.
            </summary>
        </member>
        <member name="P:Zelda.Resources.LightGem">
            <summary>
              Looks up a localized string similar to Light Gem.
            </summary>
        </member>
        <member name="P:Zelda.Resources.LightRadius">
            <summary>
              Looks up a localized string similar to Light Radius.
            </summary>
        </member>
        <member name="P:Zelda.Resources.LightResistance">
            <summary>
              Looks up a localized string similar to Light Resistance.
            </summary>
        </member>
        <member name="P:Zelda.Resources.ListEndSeperator">
            <summary>
              Looks up a localized string similar to  and.
            </summary>
        </member>
        <member name="P:Zelda.Resources.ListSeperator">
            <summary>
              Looks up a localized string similar to ,.
            </summary>
        </member>
        <member name="P:Zelda.Resources.LoadingError">
            <summary>
              Looks up a localized string similar to Loading Error.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Luck">
            <summary>
              Looks up a localized string similar to Luck.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Magic">
            <summary>
              Looks up a localized string similar to Magic.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Magical">
            <summary>
              Looks up a localized string similar to Magical.
            </summary>
        </member>
        <member name="P:Zelda.Resources.MagicCraftingBottle">
            <summary>
              Looks up a localized string similar to Magic Crafting Bottle.
            </summary>
        </member>
        <member name="P:Zelda.Resources.MagicDamageXToYAtCastSpeedZ">
            <summary>
              Looks up a localized string similar to {0}-{1} | {2} S.
            </summary>
        </member>
        <member name="P:Zelda.Resources.MagicFind">
            <summary>
              Looks up a localized string similar to Magic Find.
            </summary>
        </member>
        <member name="P:Zelda.Resources.MagicFindX">
            <summary>
              Looks up a localized string similar to {0} Magic Find.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Mana">
            <summary>
              Looks up a localized string similar to Mana.
            </summary>
        </member>
        <member name="P:Zelda.Resources.ManaPotionEffectiveness">
            <summary>
              Looks up a localized string similar to Mana Potion Effectiveness.
            </summary>
        </member>
        <member name="P:Zelda.Resources.ManaRegen">
            <summary>
              Looks up a localized string similar to Mana Regeneration.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Melee">
            <summary>
              Looks up a localized string similar to Melee.
            </summary>
        </member>
        <member name="P:Zelda.Resources.MeleeCrit">
            <summary>
              Looks up a localized string similar to melee crit.
            </summary>
        </member>
        <member name="P:Zelda.Resources.MeleeCriticalDamageBonus">
            <summary>
              Looks up a localized string similar to Melee Critical Damage Bonus.
            </summary>
        </member>
        <member name="P:Zelda.Resources.MeleeDamageXToYAtSpeedZ">
            <summary>
              Looks up a localized string similar to {0}-{1} | {2} M.
            </summary>
        </member>
        <member name="P:Zelda.Resources.MeleeHit">
            <summary>
              Looks up a localized string similar to melee hit.
            </summary>
        </member>
        <member name="P:Zelda.Resources.MeleeRangedCrit">
            <summary>
              Looks up a localized string similar to melee and ranged crit.
            </summary>
        </member>
        <member name="P:Zelda.Resources.MeleeRangedHit">
            <summary>
              Looks up a localized string similar to melee and ranged hit.
            </summary>
        </member>
        <member name="P:Zelda.Resources.MeleeRangedStrike">
            <summary>
              Looks up a localized string similar to melee and ranged strike.
            </summary>
        </member>
        <member name="P:Zelda.Resources.MeleeStrike">
            <summary>
              Looks up a localized string similar to melee strike.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Merchant">
            <summary>
              Looks up a localized string similar to Merchant.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Minutes">
            <summary>
              Looks up a localized string similar to Minutes.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Miscellaneous">
            <summary>
              Looks up a localized string similar to Miscellaneous.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Miss">
            <summary>
              Looks up a localized string similar to Miss.
            </summary>
        </member>
        <member name="P:Zelda.Resources.MovementSpeed">
            <summary>
              Looks up a localized string similar to Movement Speed.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Nature">
            <summary>
              Looks up a localized string similar to Nature.
            </summary>
        </member>
        <member name="P:Zelda.Resources.NatureGem">
            <summary>
              Looks up a localized string similar to Nature Gem.
            </summary>
        </member>
        <member name="P:Zelda.Resources.NatureResistance">
            <summary>
              Looks up a localized string similar to Nature Resistance.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Necklace">
            <summary>
              Looks up a localized string similar to Necklace.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Neutral">
            <summary>
              Looks up a localized string similar to Neutral.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Nightmare">
            <summary>
              Looks up a localized string similar to Nightmare.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Normal">
            <summary>
              Looks up a localized string similar to Normal.
            </summary>
        </member>
        <member name="P:Zelda.Resources.OneFreeTalentPoint">
            <summary>
              Looks up a localized string similar to [1 free talent point].
            </summary>
        </member>
        <member name="P:Zelda.Resources.OneHandedAxe">
            <summary>
              Looks up a localized string similar to One-Handed Axe.
            </summary>
        </member>
        <member name="P:Zelda.Resources.OneHandedMace">
            <summary>
              Looks up a localized string similar to One-Handed Mace.
            </summary>
        </member>
        <member name="P:Zelda.Resources.OneHandedSword">
            <summary>
              Looks up a localized string similar to One-Handed Sword.
            </summary>
        </member>
        <member name="P:Zelda.Resources.OnUse">
            <summary>
              Looks up a localized string similar to On Use: .
            </summary>
        </member>
        <member name="P:Zelda.Resources.OnUseRestoresXToYLife">
            <summary>
              Looks up a localized string similar to On Use: Restores {0} to {1} life..
            </summary>
        </member>
        <member name="P:Zelda.Resources.OnUseRestoresXToYLifeAndZToWMana">
            <summary>
              Looks up a localized string similar to On Use: Restores {0} to {1} life and {2} to {3} mana..
            </summary>
        </member>
        <member name="P:Zelda.Resources.OnUseRestoresXToYMana">
            <summary>
              Looks up a localized string similar to On Use: Restores {0} to {1} mana..
            </summary>
        </member>
        <member name="P:Zelda.Resources.OnUseTempIncreasesDamageDoneWithXByY">
            <summary>
              Looks up a localized string similar to On Use: Temporarily increases {0}damage done by {1}%..
            </summary>
        </member>
        <member name="P:Zelda.Resources.Parry">
            <summary>
              Looks up a localized string similar to Parry.
            </summary>
        </member>
        <member name="P:Zelda.Resources.ParryRating">
            <summary>
              Looks up a localized string similar to Parry Rating.
            </summary>
        </member>
        <member name="P:Zelda.Resources.ParryX">
            <summary>
              Looks up a localized string similar to {0}% Parry.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Penetration">
            <summary>
              Looks up a localized string similar to Penetration.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Physical">
            <summary>
              Looks up a localized string similar to Physical.
            </summary>
        </member>
        <member name="P:Zelda.Resources.PierceChance">
            <summary>
              Looks up a localized string similar to Ranged Piercing Chance.
            </summary>
        </member>
        <member name="P:Zelda.Resources.PierceChanceRating">
            <summary>
              Looks up a localized string similar to Ranged Piercing Chance Rating.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Plant">
            <summary>
              Looks up a localized string similar to Plant.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Plants">
            <summary>
              Looks up a localized string similar to Plants.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Poison">
            <summary>
              Looks up a localized string similar to Poison.
            </summary>
        </member>
        <member name="P:Zelda.Resources.PotionEffectiveness">
            <summary>
              Looks up a localized string similar to Potion Effectiveness.
            </summary>
        </member>
        <member name="P:Zelda.Resources.PressSpace">
            <summary>
              Looks up a localized string similar to Press Space.
            </summary>
        </member>
        <member name="P:Zelda.Resources.PressSpaceToRespawn">
            <summary>
              Looks up a localized string similar to ~ Press Space to Respawn ~.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Prismatic">
            <summary>
              Looks up a localized string similar to Prismatic.
            </summary>
        </member>
        <member name="P:Zelda.Resources.PrismaticGem">
            <summary>
              Looks up a localized string similar to Prismatic Gem.
            </summary>
        </member>
        <member name="P:Zelda.Resources.PushingForce">
            <summary>
              Looks up a localized string similar to Pushing Force.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Question">
            <summary>
              Looks up a localized string similar to Question.
            </summary>
        </member>
        <member name="P:Zelda.Resources.QuestLog">
            <summary>
              Looks up a localized string similar to Quest Log.
            </summary>
        </member>
        <member name="P:Zelda.Resources.QuestXComplete">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; completed!.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Ranged">
            <summary>
              Looks up a localized string similar to Ranged.
            </summary>
        </member>
        <member name="P:Zelda.Resources.RangedCrit">
            <summary>
              Looks up a localized string similar to ranged crit.
            </summary>
        </member>
        <member name="P:Zelda.Resources.RangedCriticalDamageBonus">
            <summary>
              Looks up a localized string similar to Ranged Critical Damage Bonus.
            </summary>
        </member>
        <member name="P:Zelda.Resources.RangedDamageXToYAtSpeedZ">
            <summary>
              Looks up a localized string similar to {0}-{1} | {2} R.
            </summary>
        </member>
        <member name="P:Zelda.Resources.RangedHit">
            <summary>
              Looks up a localized string similar to ranged hit.
            </summary>
        </member>
        <member name="P:Zelda.Resources.RangedStrike">
            <summary>
              Looks up a localized string similar to ranged strike.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Rating">
            <summary>
              Looks up a localized string similar to Rating.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Recipes">
            <summary>
              Looks up a localized string similar to Recipes.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Relic">
            <summary>
              Looks up a localized string similar to Relic.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Reputation">
            <summary>
              Looks up a localized string similar to Reputation.
            </summary>
        </member>
        <member name="P:Zelda.Resources.ReputationLevelChangedWithXToY">
            <summary>
              Looks up a localized string similar to {0} now {1}!.
            </summary>
        </member>
        <member name="P:Zelda.Resources.RequiresLevelX">
            <summary>
              Looks up a localized string similar to Requires Level {0}..
            </summary>
        </member>
        <member name="P:Zelda.Resources.RequiresXAgility">
            <summary>
              Looks up a localized string similar to Requires {0} Agility..
            </summary>
        </member>
        <member name="P:Zelda.Resources.RequiresXDexterity">
            <summary>
              Looks up a localized string similar to Requires {0} Dexterity..
            </summary>
        </member>
        <member name="P:Zelda.Resources.RequiresXIntelligence">
            <summary>
              Looks up a localized string similar to Requires {0} Intelligence..
            </summary>
        </member>
        <member name="P:Zelda.Resources.RequiresXLuck">
            <summary>
              Looks up a localized string similar to Requires {0} Luck..
            </summary>
        </member>
        <member name="P:Zelda.Resources.RequiresXStrength">
            <summary>
              Looks up a localized string similar to Requires {0} Strength..
            </summary>
        </member>
        <member name="P:Zelda.Resources.RequiresXVitality">
            <summary>
              Looks up a localized string similar to Requires {0} Vitality..
            </summary>
        </member>
        <member name="P:Zelda.Resources.Resistance">
            <summary>
              Looks up a localized string similar to Resistance.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Resisted">
            <summary>
              Looks up a localized string similar to Resisted.
            </summary>
        </member>
        <member name="P:Zelda.Resources.RespawnCooldownIsNull">
            <summary>
              Looks up a localized string similar to Respawn Cooldown is null..
            </summary>
        </member>
        <member name="P:Zelda.Resources.Revered">
            <summary>
              Looks up a localized string similar to Revered.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Ring">
            <summary>
              Looks up a localized string similar to Ring.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Rod">
            <summary>
              Looks up a localized string similar to Rod.
            </summary>
        </member>
        <member name="P:Zelda.Resources.SaveGameDescriptionVersionX">
            <summary>
              Looks up a localized string similar to This is a SaveGame file of the game &apos;The Legend of Zelda: Black Crown&apos;. Made by federrot Software. FileVersion &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:Zelda.Resources.Seconds">
            <summary>
              Looks up a localized string similar to Seconds.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Shadow">
            <summary>
              Looks up a localized string similar to Shadow.
            </summary>
        </member>
        <member name="P:Zelda.Resources.ShadowGem">
            <summary>
              Looks up a localized string similar to Shadow Gem.
            </summary>
        </member>
        <member name="P:Zelda.Resources.ShadowResistance">
            <summary>
              Looks up a localized string similar to Shadow Resistance.
            </summary>
        </member>
        <member name="P:Zelda.Resources.ShieldHand">
            <summary>
              Looks up a localized string similar to Shield Hand.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Slime">
            <summary>
              Looks up a localized string similar to Slime.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Slimes">
            <summary>
              Looks up a localized string similar to Slimes.
            </summary>
        </member>
        <member name="P:Zelda.Resources.SN_BloodWoods">
            <summary>
              Looks up a localized string similar to Blood Woods.
            </summary>
        </member>
        <member name="P:Zelda.Resources.SN_FamilyStoneTombs">
            <summary>
              Looks up a localized string similar to Family Stone Tombs.
            </summary>
        </member>
        <member name="P:Zelda.Resources.SN_HyruleRivers">
            <summary>
              Looks up a localized string similar to Hyrule Rivers.
            </summary>
        </member>
        <member name="P:Zelda.Resources.SN_RouteOfDin">
            <summary>
              Looks up a localized string similar to Route Of Din.
            </summary>
        </member>
        <member name="P:Zelda.Resources.SN_Shrine">
            <summary>
              Looks up a localized string similar to Skull Shrine.
            </summary>
        </member>
        <member name="P:Zelda.Resources.SN_TiaWoodsNorth">
            <summary>
              Looks up a localized string similar to Tia Woods.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Socket">
            <summary>
              Looks up a localized string similar to Socket.
            </summary>
        </member>
        <member name="P:Zelda.Resources.SongD_ExecuteTriggerSong">
            <summary>
              Looks up a localized string similar to Uncovers secrets when played while standing on specific marked structures..
            </summary>
        </member>
        <member name="P:Zelda.Resources.SongD_FamilyTombsTeleport">
            <summary>
              Looks up a localized string similar to Swifly teleports you to the Family Stone Tombs in the Tia Woods..
            </summary>
        </member>
        <member name="P:Zelda.Resources.SongD_HomeTeleport">
            <summary>
              Looks up a localized string similar to Teleports you home..
            </summary>
        </member>
        <member name="P:Zelda.Resources.SongD_MusicCross">
            <summary>
              Looks up a localized string similar to Teleports you to the location that has been stored in the Cross of Teleportation..
            </summary>
        </member>
        <member name="P:Zelda.Resources.SongD_RouteOfDinTeleport">
            <summary>
              Looks up a localized string similar to Teleports you to Maja at the Route of Din..
            </summary>
        </member>
        <member name="P:Zelda.Resources.SongD_TimeWarpSong">
            <summary>
              Looks up a localized string similar to Warps you and your surroundings 8 hours into the future; costs 25% base mana..
            </summary>
        </member>
        <member name="P:Zelda.Resources.SongD_ZoneReset">
            <summary>
              Looks up a localized string similar to Your action are partially erased in the current region, allowing you to fight for the good cause once again!.
            </summary>
        </member>
        <member name="P:Zelda.Resources.SongN_ExecuteTriggerSong">
            <summary>
              Looks up a localized string similar to Carillon of Secrets.
            </summary>
        </member>
        <member name="P:Zelda.Resources.SongN_FamilyTombsTeleport">
            <summary>
              Looks up a localized string similar to Nocturne of the Stones.
            </summary>
        </member>
        <member name="P:Zelda.Resources.SongN_HomeTeleport">
            <summary>
              Looks up a localized string similar to Lament of Hyrule.
            </summary>
        </member>
        <member name="P:Zelda.Resources.SongN_MusicCross">
            <summary>
              Looks up a localized string similar to Song of the Cross.
            </summary>
        </member>
        <member name="P:Zelda.Resources.SongN_RouteOfDinTeleport">
            <summary>
              Looks up a localized string similar to Maja&apos;s Return of Hope.
            </summary>
        </member>
        <member name="P:Zelda.Resources.SongN_TimeWarpSong">
            <summary>
              Looks up a localized string similar to Futile Song of Time.
            </summary>
        </member>
        <member name="P:Zelda.Resources.SongN_ZoneReset">
            <summary>
              Looks up a localized string similar to Song of the Past.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Songs">
            <summary>
              Looks up a localized string similar to Songs.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Speed">
            <summary>
              Looks up a localized string similar to Speed.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Spell">
            <summary>
              Looks up a localized string similar to Spell.
            </summary>
        </member>
        <member name="P:Zelda.Resources.SpellCast">
            <summary>
              Looks up a localized string similar to spell cast.
            </summary>
        </member>
        <member name="P:Zelda.Resources.SpellCriticalDamageBonus">
            <summary>
              Looks up a localized string similar to Spell Critical Damage Bonus.
            </summary>
        </member>
        <member name="P:Zelda.Resources.SpellHaste">
            <summary>
              Looks up a localized string similar to Spell Haste.
            </summary>
        </member>
        <member name="P:Zelda.Resources.SpellHasteRating">
            <summary>
              Looks up a localized string similar to Spell Haste Rating.
            </summary>
        </member>
        <member name="P:Zelda.Resources.SpellPenetration">
            <summary>
              Looks up a localized string similar to Spell Penetration.
            </summary>
        </member>
        <member name="P:Zelda.Resources.SpellPenetrationRating">
            <summary>
              Looks up a localized string similar to Spell Penetration Rating.
            </summary>
        </member>
        <member name="P:Zelda.Resources.SpellPower">
            <summary>
              Looks up a localized string similar to Spell Power.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Staff">
            <summary>
              Looks up a localized string similar to Staff.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Statistics">
            <summary>
              Looks up a localized string similar to Statistics.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Strength">
            <summary>
              Looks up a localized string similar to Strength.
            </summary>
        </member>
        <member name="P:Zelda.Resources.TalentLevelXOfY">
            <summary>
              Looks up a localized string similar to Level {0} of {1}.
            </summary>
        </member>
        <member name="P:Zelda.Resources.TempStatusUseEffectDescription">
            <summary>
              Looks up a localized string similar to On Use: {0} for {1} seconds..
            </summary>
        </member>
        <member name="P:Zelda.Resources.Text_EnterNameOfHero">
            <summary>
              Looks up a localized string similar to Enter the Name of the Hero.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Text_PressSpace">
            <summary>
              Looks up a localized string similar to Press Space.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Tooltip_Agility">
            <summary>
              Looks up a localized string similar to Agility increases chance to Dodge, Melee and Ranged Attack Speed, and to a small part Armor, Movement Speed and Ranged Attack Power..
            </summary>
        </member>
        <member name="P:Zelda.Resources.Tooltip_Dexterity">
            <summary>
              Looks up a localized string similar to Dexterity increases Ranged Attack Power, chance to Hit, to a small part Melee Attack Power and reduces the Cast Time of spells..
            </summary>
        </member>
        <member name="P:Zelda.Resources.Tooltip_Intelligence">
            <summary>
              Looks up a localized string similar to Intelligence increases Magical Attack Power, the amount of Mana, Mana Regeneration and the effectiveness of Mana Potions..
            </summary>
        </member>
        <member name="P:Zelda.Resources.Tooltip_Luck">
            <summary>
              Looks up a localized string similar to Luck increases chance to get a Critical Attack and the chance to find rare items..
            </summary>
        </member>
        <member name="P:Zelda.Resources.Tooltip_Strength">
            <summary>
              Looks up a localized string similar to Strength increases Melee Attack Power, Block Value and slightly the chance to Parry melee attacks..
            </summary>
        </member>
        <member name="P:Zelda.Resources.Tooltip_Vitality">
            <summary>
              Looks up a localized string similar to Vitality increases the amount of Life, Life Regeneration, the effectiveness of Healing Potions and slightly reduces the chance to be crit..
            </summary>
        </member>
        <member name="P:Zelda.Resources.Trinket">
            <summary>
              Looks up a localized string similar to Trinket.
            </summary>
        </member>
        <member name="P:Zelda.Resources.TwoHandedAxe">
            <summary>
              Looks up a localized string similar to Two-Handed Axe.
            </summary>
        </member>
        <member name="P:Zelda.Resources.TwoHandedMace">
            <summary>
              Looks up a localized string similar to Two-Handed Mace.
            </summary>
        </member>
        <member name="P:Zelda.Resources.TwoHandedSword">
            <summary>
              Looks up a localized string similar to Two-Handed Sword.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Undead">
            <summary>
              Looks up a localized string similar to Undead.
            </summary>
        </member>
        <member name="P:Zelda.Resources.UndeadPlural">
            <summary>
              Looks up a localized string similar to Undead.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Unfriendly">
            <summary>
              Looks up a localized string similar to Unfriendly.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Vitality">
            <summary>
              Looks up a localized string similar to Vitality.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Water">
            <summary>
              Looks up a localized string similar to Water.
            </summary>
        </member>
        <member name="P:Zelda.Resources.WaterGem">
            <summary>
              Looks up a localized string similar to Water Gem.
            </summary>
        </member>
        <member name="P:Zelda.Resources.WaterResistance">
            <summary>
              Looks up a localized string similar to Water Resistance.
            </summary>
        </member>
        <member name="P:Zelda.Resources.Weapon">
            <summary>
              Looks up a localized string similar to Weapon.
            </summary>
        </member>
        <member name="P:Zelda.Resources.WeaponHand">
            <summary>
              Looks up a localized string similar to Weapon Hand.
            </summary>
        </member>
        <member name="P:Zelda.Resources.XFreeTalentPoints">
            <summary>
              Looks up a localized string similar to [{0} free talent points].
            </summary>
        </member>
        <member name="T:Zelda.Saving.ContextExtensions">
            <summary>
            Defines extension methods for the <see cref="T:Zelda.Saving.IZeldaSerializationContext"/> and
            <see cref="T:Zelda.Saving.IZeldaDeserializationContext"/> interfaces.
            </summary>
        </member>
        <member name="M:Zelda.Saving.ContextExtensions.WriteHeader(Atom.Storage.ISerializationContext,System.Int32)">
            <summary>
            Writes a version header to the ISerializationContext.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
            <param name="version">
            The current version of the object to serialize.
            </param>
        </member>
        <member name="M:Zelda.Saving.ContextExtensions.WriteDefaultHeader(Atom.Storage.ISerializationContext)">
            <summary>
            Writes a default version header to the ISerializationContext.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Saving.ContextExtensions.ReadHeader(Atom.Storage.IDeserializationContext,System.Int32,System.Int32,System.Type)">
            <summary>
            Reads a version header from the IDeserializationContext.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
            <param name="minimumVersion">
            The minimum expected version.
            </param>
            <param name="maximumVersion">
            The maximum expected version.
            </param>
            <param name="type">
            The type the header relates to.
            </param>
            <returns>
            The version that has been read.
            </returns>
        </member>
        <member name="M:Zelda.Saving.ContextExtensions.ReadHeader(Atom.Storage.IDeserializationContext,System.Int32,System.Type)">
            <summary>
            Reads a version header from the IDeserializationContext.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
            <param name="maximumVersion">
            The maximum expected version.
            </param>
            <param name="type">
            The type the header relates to.
            </param>
            <returns>
            The version that has been read.
            </returns>
        </member>
        <member name="M:Zelda.Saving.ContextExtensions.ReadDefaultHeader``1(Atom.Storage.IDeserializationContext)">
            <summary>
            Reads a default version header from the IDeserializationContext.
            </summary>
            <typeparam name="Type">
            The type the header relates to.
            </typeparam>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Saving.ContextExtensions.ReadDefaultHeader(Atom.Storage.IDeserializationContext,System.Type)">
            <summary>
            Reads a default version header from the IDeserializationContext.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
            <param name="type">
            The type the header relates to.
            </param>
        </member>
        <member name="M:Zelda.Saving.ContextExtensions.ReadDefaultHeader(Atom.Storage.IDeserializationContext,System.String)">
            <summary>
            Reads a default version header to the ISerializationContext.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
            <param name="typeName">
            The type name of the type the header relates to.
            </param>
        </member>
        <member name="M:Zelda.Saving.ContextExtensions.WriteObject``1(Zelda.Saving.IZeldaSerializationContext,``0)">
            <summary>
            Writes the given <typeparamref name="TObject"/>.
            </summary>
            <typeparam name="TObject">
            The <see cref="T:Zelda.Saving.ISaveable"/> type to serialize.
            </typeparam>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
            <param name="obj">
            The object to serialize.
            </param>
        </member>
        <member name="M:Zelda.Saving.ContextExtensions.WriteStoreObject``1(Zelda.Saving.IZeldaSerializationContext,``0)">
            <summary>
            Writes the given <typeparamref name="TObject"/>.
            </summary>
            <typeparam name="TObject">
            The <see cref="T:Atom.Storage.IStorable"/> type to serialize.
            </typeparam>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
            <param name="obj">
            The object to serialize.
            </param>
        </member>
        <member name="M:Zelda.Saving.ContextExtensions.ReadObject``1(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes an object of the specified base type.
            </summary>
            <typeparam name="TBase">
            The <see cref="T:Zelda.Saving.ISaveable"/> type to deserialize.
            </typeparam>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
            <returns>
            The deserialized object.
            </returns>
        </member>
        <member name="M:Zelda.Saving.ContextExtensions.ReadStoreObject``1(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes an object of the specified base type.
            </summary>
            <typeparam name="TBase">
            The <see cref="T:Atom.Storage.IStorable"/> type to deserialize.
            </typeparam>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
            <returns>
            The deserialized object.
            </returns>
        </member>
        <member name="M:Zelda.Saving.ContextExtensions.WriteStorage``1(Zelda.Saving.IZeldaSerializationContext,``0)">
            <summary>
            Writes the given <typeparamref name="TObject"/>.
            </summary>
            <typeparam name="TObject">
            The <see cref="T:Zelda.Saving.ISaveable"/> type to serialize.
            </typeparam>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
            <param name="obj">
            The object to serialize.
            </param>
        </member>
        <member name="M:Zelda.Saving.ContextExtensions.ReadStorage``1(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes an IStorage of the specified type.
            </summary>
            <typeparam name="TBase">
            The <see cref="T:Zelda.Saving.ISaveable"/> type to deserialize.
            </typeparam>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
            <returns>
            The deserialized object.
            </returns>
        </member>
        <member name="M:Zelda.Saving.ContextExtensions.WriteList``1(Zelda.Saving.IZeldaSerializationContext,System.Collections.Generic.IList{``0})">
            <summary>
            Serializes the specified list of ISaveable objects.
            </summary>
            <typeparam name="TElement">
            The type of the elements in the list.
            </typeparam>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
            <param name="list">
            The list to serialize.
            </param>
        </member>
        <member name="M:Zelda.Saving.ContextExtensions.ReadListInto``1(Zelda.Saving.IZeldaDeserializationContext,System.Collections.Generic.IList{``0})">
            <summary>
            Deserializes a list of ISaveable objects into the
            specified list.
            </summary>
            <typeparam name="TElement">
            The type of the elements in the list.
            </typeparam>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
            <param name="list">
            The list into which should be de-serialized.
            </param>
        </member>
        <member name="M:Zelda.Saving.ContextExtensions.WriteDrawStrategy(Zelda.Saving.IZeldaSerializationContext,Zelda.Entities.Drawing.IDrawDataAndStrategy)">
            <summary>
            Writes/Serializes the specified IDrawDataAndStrategy under the specified IZeldaSerializationContext.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
            <param name="strategy">
            The IDrawDataAndStrategy to serialize. Can be null.
            </param>
        </member>
        <member name="M:Zelda.Saving.ContextExtensions.ReadDrawStrategy(Zelda.Saving.IZeldaDeserializationContext,Zelda.Entities.ZeldaEntity)">
            <summary>
            Deserializes and loads an <see cref="T:Zelda.Entities.Drawing.IDrawDataAndStrategy"/>.
            </summary>
            <remarks>
            The IDrawDataAndStrategy is -not- assigned to the entity.
            </remarks>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
            <param name="entity">
            The entity that should be visualized using the IDrawDataAndStrategy.
            </param>
            <returns>
            The newly loaded IDrawDataAndStrategy; -or- null.
            </returns>
        </member>
        <member name="M:Zelda.Saving.ContextExtensions.Write(Zelda.Saving.IZeldaSerializationContext,Atom.Math.Curve)">
            <summary>
            Writes/Serializes the given Curve under the specified IZeldaSerializationContext. 
            </summary>
            <param name="context">
            The serialization context.
            </param>
            <param name="curve">
            The curve to serialize.
            </param>
        </member>
        <member name="M:Zelda.Saving.ContextExtensions.ReadCurve(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Reads/Deserializes a Curve object under the specified IZeldaDeserializationContext. 
            </summary>
            <param name="context">
            The serialization context.
            </param>
            <param name="curve">
            The curve to serialize.
            </param>
        </member>
        <member name="T:Zelda.Saving.DeserializationContext">
            <summary>
            Provides access to the objects required during deserialization.
            </summary>
        </member>
        <member name="P:Zelda.Saving.DeserializationContext.ServiceProvider">
            <summary>
            Gets the <see cref="T:Zelda.IZeldaServiceProvider"/> that provides fast access
            to game-related services.
            </summary>
        </member>
        <member name="P:Zelda.Saving.DeserializationContext.Version">
            <summary>
            Gets or sets the version of the safe file beeing deserialized.
            </summary>
        </member>
        <member name="M:Zelda.Saving.DeserializationContext.#ctor(System.IO.Stream,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the DeserializationContext class.
            </summary>
            <param name="stream">
            The <see cref="T:System.IO.Stream"/> from which is read during the deserialization process.
            </param>
            <param name="serviceProvider">
            The <see cref="T:Zelda.IZeldaServiceProvider"/> that provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Saving.DeserializationContext.#ctor(System.IO.BinaryReader,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the DeserializationContext class.
            </summary>
            <param name="reader">
            The <see cref="T:System.IO.BinaryReader"/> that should be used during the deserialization process.
            </param>
            <param name="serviceProvider">
            The <see cref="T:Zelda.IZeldaServiceProvider"/> that provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Saving.DeserializationContext.GetService(System.Type)">
            <summary>
            Gets the service object of the specified type.
            </summary>
            <param name="serviceType">
            An object that specifies the type of service object to get.
            </param>
            <returns>
            A service object of type serviceType.
            -or- null if there is no service object of type serviceType.
            </returns>
        </member>
        <member name="F:Zelda.Saving.DeserializationContext.serviceProvider">
            <summary>
            Provides fast access to game-related services.
            </summary>
        </member>
        <member name="T:Zelda.Saving.ISceneDeserializationContext">
            <summary>
            Provides access to the objects required during deserialization of a <see cref="T:Zelda.ZeldaScene"/>.
            </summary>
        </member>
        <member name="P:Zelda.Saving.ISceneDeserializationContext.Scene">
            <summary>
            Gets the ZeldaScene that is currently beeing deserialized.
            </summary>
        </member>
        <member name="T:Zelda.Saving.IZeldaDeserializationContext">
            <summary>
            Provides access to the objects required during deserialization.
            </summary>
        </member>
        <member name="P:Zelda.Saving.IZeldaDeserializationContext.Version">
            <summary>
            Gets or sets the version of the serialized data beeing deserialized.
            </summary>
        </member>
        <member name="P:Zelda.Saving.IZeldaDeserializationContext.ServiceProvider">
            <summary>
            Gets the <see cref="T:Zelda.IZeldaServiceProvider"/> that provides fast access
            to game-related services.
            </summary>
        </member>
        <member name="T:Zelda.Saving.IZeldaEventDeserializationContext">
            <summary>
            Provides access to the objects required during deserialization of event data.
            </summary>
        </member>
        <member name="T:Zelda.Saving.SceneDeserializationContext">
            <summary>
            Provides access to the objects required during deserialization of a ZeldaScene.
            </summary>
        </member>
        <member name="P:Zelda.Saving.SceneDeserializationContext.Scene">
            <summary>
            Gets the <see cref="T:Zelda.ZeldaScene"/> that is currently
            beeing deserialized.
            </summary>
        </member>
        <member name="P:Zelda.Saving.SceneDeserializationContext.WorldStatus">
            <summary>
            Gets the object that stores the state of the game world.
            Might be null.
            </summary>
        </member>
        <member name="M:Zelda.Saving.SceneDeserializationContext.#ctor(Zelda.ZeldaScene,Zelda.Saving.WorldStatus,System.IO.BinaryReader,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the SceneDeserializationContext class.
            </summary>
            <param name="scene">
            The ZeldaScene that is going to be deserialized.
            </param>
            <param name="worldStatus">
            The object that stores the state of the game world.
            Can be null.
            </param>
            <param name="reader">
            The <see cref="T:System.IO.BinaryReader"/> that should be used during the deserialization process.
            </param>
            <param name="serviceProvider">
            The <see cref="T:Zelda.IZeldaServiceProvider"/> that provides fast access to game-related services.
            </param>
        </member>
        <member name="F:Zelda.Saving.SceneDeserializationContext.scene">
            <summary>
            The <see cref="T:Zelda.ZeldaScene"/> that is currently beeing deserialized.
            </summary>
        </member>
        <member name="F:Zelda.Saving.SceneDeserializationContext.worldStatus">
            <summary>
            Stores the state of the game world.
            </summary>
        </member>
        <member name="T:Zelda.Saving.ZeldaEventDeserializationContext">
            <summary>
            Provides access to the objects required during deserialization of event data.
            </summary>
        </member>
        <member name="P:Zelda.Saving.ZeldaEventDeserializationContext.EventManager">
            <summary>
            Gets the <Desee cref="T:Zelda.Events.ZeldaEventManager"/> that is currently deserialized.
            </summary>
            <value>
            Is null when deserializing an event that is not attached to an EventManager.
            </value>
        </member>
        <member name="P:Zelda.Saving.ZeldaEventDeserializationContext.Atom#Events#IEventStorageContext#EventManager">
            <summary>
            Gets the <Desee cref="P:Zelda.Saving.ZeldaEventDeserializationContext.EventManager"/> that is currently deserialized.
            </summary>
            <value>
            Is null when deserializing an event that is not attached to an EventManager.
            </value>
        </member>
        <member name="M:Zelda.Saving.ZeldaEventDeserializationContext.#ctor(Zelda.Events.ZeldaEventManager,System.IO.BinaryReader,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the ZeldaEventDeserializationContext class.
            </summary>
            <param name="eventManager">
            The ZeldaEventManager that is going to be deserialized.
            </param>
            <param name="reader">
            The BinaryReader that is going to be read with.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Saving.ZeldaEventDeserializationContext.GetEvent(System.String)">
            <summary>
            Gets the <Desee cref="T:Atom.Events.Event"/> with the given <paramref name="name"/>.
            </summary>
            <param name="name">
            The name that uniquely identifies the Event to reveive.
            </param>
            <returns>
            The requested Event;
            or null.
            </returns>
        </member>
        <member name="M:Zelda.Saving.ZeldaEventDeserializationContext.GetTrigger(System.String)">
            <summary>
            Gets the <Desee cref="T:Atom.Events.EventTrigger"/> with the given <paramref name="name"/>.
            </summary>
            <param name="name">
            The name that uniquely identifies the EventTrigger to reveive.
            </param>
            <returns>
            The requested EventTrigger;
            or null.
            </returns>
        </member>
        <member name="F:Zelda.Saving.ZeldaEventDeserializationContext.eventManager">
            <summary>
            The <see cref="T:Zelda.Events.ZeldaEventManager"/> that is currently deserialized.
            </summary>
        </member>
        <member name="T:Zelda.Saving.ISceneSerializationContext">
            <summary>
            Provides access to the objects required during serialization of a <see cref="T:Zelda.ZeldaScene"/>.
            </summary>
        </member>
        <member name="P:Zelda.Saving.ISceneSerializationContext.Scene">
            <summary>
            Gets the ZeldaScene that is currently beeing serialized.
            </summary>
        </member>
        <member name="T:Zelda.Saving.IZeldaEventSerializationContext">
            <summary>
            Provides access to the objects required during serialization of event data.
            </summary>
        </member>
        <member name="T:Zelda.Saving.IZeldaSerializationContext">
            <summary>
            Provides access to the objects required during serialization.
            </summary>
        </member>
        <member name="P:Zelda.Saving.IZeldaSerializationContext.ServiceProvider">
            <summary>
            Gets the <see cref="T:Zelda.IZeldaServiceProvider"/> that provides fast access
            to game-related services.
            </summary>
        </member>
        <member name="T:Zelda.Saving.SceneSerializationContext">
            <summary>
            Provides access to the objects required during serialization of a ZeldaScene.
            </summary>
        </member>
        <member name="P:Zelda.Saving.SceneSerializationContext.Scene">
            <summary>
            Gets the <see cref="T:Zelda.ZeldaScene"/> that is currently beeing serialized.
            </summary>
        </member>
        <member name="M:Zelda.Saving.SceneSerializationContext.#ctor(Zelda.ZeldaScene,System.IO.BinaryWriter,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the SceneSerializationContext class.
            </summary>
            <param name="scene">
            The ZeldaScene that is going to be serialized.
            </param>
            <param name="writer">
            The <see cref="T:System.IO.BinaryWriter"/> that should be used during the serialization process.
            </param>
            <param name="serviceProvider">
            The <see cref="T:Zelda.IZeldaServiceProvider"/> that provides fast access to game-related services.
            </param>
        </member>
        <member name="F:Zelda.Saving.SceneSerializationContext.scene">
            <summary>
            The <see cref="T:Zelda.ZeldaScene"/> that is currently beeing deserialized.
            </summary>
        </member>
        <member name="T:Zelda.Saving.SerializationContext">
            <summary>
            Provides access to the objects required during serialization.
            </summary>
        </member>
        <member name="P:Zelda.Saving.SerializationContext.ServiceProvider">
            <summary>
            Gets the <see cref="T:Zelda.IZeldaServiceProvider"/> that provides fast access
            to game-related services.
            </summary>
        </member>
        <member name="M:Zelda.Saving.SerializationContext.#ctor(System.IO.Stream,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the SerializationContext class.
            </summary>
            <param name="stream">
            The Stream to which is written during the serialization process.
            </param>
            <param name="serviceProvider">
            The <see cref="T:Zelda.IZeldaServiceProvider"/> that provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Saving.SerializationContext.#ctor(System.IO.BinaryWriter,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the SerializationContext class.
            </summary>
            <param name="writer">
            The <see cref="T:System.IO.BinaryWriter"/> that should be used during the serialization process.
            </param>
            <param name="serviceProvider">
            The <see cref="T:Zelda.IZeldaServiceProvider"/> that provides fast access to game-related services.
            </param>
        </member>
        <member name="F:Zelda.Saving.SerializationContext.serviceProvider">
            <summary>
            Provides fast access to game-related services.
            </summary>
        </member>
        <member name="T:Zelda.Saving.ZeldaEventSerializationContext">
            <summary>
            Provides access to the objects required during serialization of event data.
            </summary>
        </member>
        <member name="P:Zelda.Saving.ZeldaEventSerializationContext.EventManager">
            <summary>
            Gets the <Desee cref="T:Zelda.Events.ZeldaEventManager"/> that is currently deserialized.
            </summary>
            <value>
            Is null when deserializing an event that is not attached to an EventManager.
            </value>
        </member>
        <member name="P:Zelda.Saving.ZeldaEventSerializationContext.Atom#Events#IEventStorageContext#EventManager">
            <summary>
            Gets the <Desee cref="P:Zelda.Saving.ZeldaEventSerializationContext.EventManager"/> that is currently deserialized.
            </summary>
            <value>
            Is null when deserializing an event that is not attached to an EventManager.
            </value>
        </member>
        <member name="M:Zelda.Saving.ZeldaEventSerializationContext.#ctor(Zelda.Events.ZeldaEventManager,System.IO.BinaryWriter,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the ZeldaEventSerializationContext class.
            </summary>
            <param name="eventManager">
            The ZeldaEventManager that is going to be deserialized.
            </param>
            <param name="writer">
            The BinaryWriter that is going to be written to.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Saving.ZeldaEventSerializationContext.GetEvent(System.String)">
            <summary>
            Gets the <Desee cref="T:Atom.Events.Event"/> with the given <paramref name="name"/>.
            </summary>
            <param name="name">
            The name that uniquely identifies the Event to reveive.
            </param>
            <returns>
            The requested Event;
            or null.
            </returns>
        </member>
        <member name="M:Zelda.Saving.ZeldaEventSerializationContext.GetTrigger(System.String)">
            <summary>
            Gets the <Desee cref="T:Atom.Events.EventTrigger"/> with the given <paramref name="name"/>.
            </summary>
            <param name="name">
            The name that uniquely identifies the EventTrigger to reveive.
            </param>
            <returns>
            The requested EventTrigger;
            or null.
            </returns>
        </member>
        <member name="F:Zelda.Saving.ZeldaEventSerializationContext.eventManager">
            <summary>
            The <see cref="T:Zelda.Events.ZeldaEventManager"/> that is currently serialized.
            </summary>
        </member>
        <member name="T:Zelda.Saving.IMaybeSaved">
            <summary>
            Provides a mechanism that allows to control
            whether an object should be saved/serialized or not.
            </summary>
        </member>
        <member name="M:Zelda.Saving.IMaybeSaved.ShouldSerialize">
            <summary>
            Gets a value indicating whether an object
            should be saved.
            </summary>
            <returns>
            true if the object should be serialized;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Saving.ISaveable">
            <summary>
            Provides a mechanism to read and write an object into a binary stream.
            </summary>
        </member>
        <member name="M:Zelda.Saving.ISaveable.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Saving.ISaveable.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="T:Zelda.Saving.ISavedState">
            <summary>
            Provides a mechanism that allows one to receive whether 
            the object that implements the interface should be saved.
            </summary>
        </member>
        <member name="P:Zelda.Saving.ISavedState.IsSaved">
            <summary>
            Gets a value indicating whether the object
            that implements this interface should be saved.
            </summary>
        </member>
        <member name="T:Zelda.Saving.IStateSaveable">
            <summary>
            Provides a mechanism to write and read the state of the object
            that implements the interface.
            </summary>
        </member>
        <member name="M:Zelda.Saving.IStateSaveable.SerializeState(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the current state of this IStateSaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Saving.IStateSaveable.DeserializeState(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the current state of this IStateSaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="T:Zelda.Saving.IWorldStatusProvider">
            <summary>
            Provides a mechanism to receive the current status of the world.
            </summary>
        </member>
        <member name="P:Zelda.Saving.IWorldStatusProvider.WorldStatus">
            <summary>
            Gets the <see cref="P:Zelda.Saving.IWorldStatusProvider.WorldStatus"/> object;
            responsible for holding the overal state of the game world.
            </summary>
        </member>
        <member name="T:Zelda.Saving.SaveFile">
            <summary>
            Provides type-safe access to the information stored in a SaveFile.
            </summary>
            <remarks>
            Keep in mind that the data stored in the <see cref="T:Zelda.Saving.SaveFile"/>
            object may not be completly up-to-date until it is actually saved/loaden.
            </remarks>
        </member>
        <member name="F:Zelda.Saving.SaveFile.Version">
            <summary>
            The current version number of the SaveFile.
            </summary>
            <remarks>
            V3/4 : Added versioning and power factors to Gem and Item instances.
            </remarks>
        </member>
        <member name="P:Zelda.Saving.SaveFile.Name">
            <summary>
            Gets or sets the name of this <see cref="T:Zelda.Saving.SaveFile"/>.
            </summary>
        </member>
        <member name="P:Zelda.Saving.SaveFile.WorldStatus">
            <summary>
            Gets the <see cref="P:Zelda.Saving.SaveFile.WorldStatus"/> object that descripes the status of the whole world.
            </summary>
        </member>
        <member name="P:Zelda.Saving.SaveFile.LastSavePoint">
            <summary>
            Gets or sets the last safe <see cref="T:Zelda.Saving.SavePoint"/> the player has used.
            </summary>
        </member>
        <member name="P:Zelda.Saving.SaveFile.Difficulty">
            <summary>
            Gets or sets the ID that uniquely identifies the difficulty of the game.
            </summary>
        </member>
        <member name="P:Zelda.Saving.SaveFile.Hardcore">
            <summary>
            Gets or sets a value indicating whether the player choose to play on hardcore;
            e.g. once dead always dead.
            </summary>
        </member>
        <member name="P:Zelda.Saving.SaveFile.CharacterColorTint">
            <summary>
            Gets or sets the colors in which the player's character is tinted.
            </summary>
        </member>
        <member name="M:Zelda.Saving.SaveFile.#ctor(System.String,Zelda.Profiles.GameProfile,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Saving.SaveFile"/> class.
            </summary>
            <param name="name">
            The name of the <see cref="T:Zelda.Saving.SaveFile"/>.
            </param>
            <param name="profile">
            Represents the GameProfile that is saved in this SaveFile.
            </param>
            <param name="serviceProvider">
            Provides access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Saving.SaveFile.Save">
            <summary>
            Saves this <see cref="T:Zelda.Saving.SaveFile"/>.
            </summary>
            <returns>
            true if the SaveFile has been succesfully saved;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Saving.SaveFile.SaveUnchecked">
            <summary>
            Saves this <see cref="T:Zelda.Saving.SaveFile"/>.
            </summary>
        </member>
        <member name="M:Zelda.Saving.SaveFile.WriteToFile(System.IO.Stream)">
            <summary>
            Copies the content of the given memory stream onto
            the harddisc.
            </summary>
            <param name="memoryStream">
            The stream of data that contains all data that has been written.
            </param>
        </member>
        <member name="M:Zelda.Saving.SaveFile.Write(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Writes the save file using the given BinaryWriter.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Saving.SaveFile.WriteHeader(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Writes the header information about this SaveFile.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Saving.SaveFile.WriteShortGameInfo(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Writes short information about the player.
            This is loaded when opening the game
            and shown om the character screen.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Saving.SaveFile.Load">
            <summary>
            Loads this SaveFile.
            </summary>
        </member>
        <member name="M:Zelda.Saving.SaveFile.LoadShortGameInfo(System.String,Zelda.IZeldaServiceProvider)">
            <summary>
            Loads the <see cref="T:Zelda.Saving.ShortSaveGameInfo"/> of the profile with the given name.
            </summary>
            <param name="profileName">
            The name of the profile.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
            <returns>
            The ShortSaveGameInfo that contains the data that has been loaden.
            </returns>
        </member>
        <member name="M:Zelda.Saving.SaveFile.Read(Zelda.Saving.DeserializationContext)">
            <summary>
            Reads this SaveFile using the given BinaryReader.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Saving.SaveFile.ReadShortGameInfo(System.Int32,Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Reads the <see cref="T:Zelda.Saving.ShortSaveGameInfo"/> using the given BinaryReader.
            </summary>
            <param name="version">
            The version of the SaveFile.
            </param>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
            <returns>
            The ShortSaveGameInfo that has been readen.
            </returns>
        </member>
        <member name="F:Zelda.Saving.SaveFile.name">
            <summary>
            The name of the <see cref="T:Zelda.Saving.SaveFile"/>.
            </summary>
        </member>
        <member name="F:Zelda.Saving.SaveFile.worldStatus">
            <summary>
            Descripes the status of the whole world.
            </summary>
        </member>
        <member name="F:Zelda.Saving.SaveFile.player">
            <summary>
            The character whose status is descripted.
            </summary>
        </member>
        <member name="F:Zelda.Saving.SaveFile.serviceProvider">
            <summary>
            Provides type-safe access to game services.
            </summary>
        </member>
        <member name="T:Zelda.Saving.SavePoint">
            <summary>
            Defines the properties of a Save Point in the world.
            </summary>
        </member>
        <member name="P:Zelda.Saving.SavePoint.Scene">
            <summary>
            Gets the name that uniquely identifies the Scene 
            in which the player has saved.
            </summary>
        </member>
        <member name="P:Zelda.Saving.SavePoint.SpawnPoint">
            <summary>
            Gets the name that uniquely identifies the Spawn Point in the Scene.
            </summary>
        </member>
        <member name="M:Zelda.Saving.SavePoint.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Saving.SavePoint"/> struct.
            </summary>
            <param name="sceneName">
            The name of the scene.
            </param>
            <param name="spawnPointName">
            The name of the spawn point.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="sceneName"/> or <paramref name="spawnPointName"/> is null.
            </exception>
        </member>
        <member name="F:Zelda.Saving.SavePoint.scene">
            <summary>
            The name of the scene.
            </summary>
        </member>
        <member name="F:Zelda.Saving.SavePoint.spawnPoint">
            <summary>
            The name of the spawn point.
            </summary>
        </member>
        <member name="T:Zelda.Saving.SceneEntitiesStorage">
            <summary>
            Encapsulates the serialization and deserialization of a list of entities.
            </summary>
        </member>
        <member name="M:Zelda.Saving.SceneEntitiesStorage.FindToSave(System.Collections.Generic.IEnumerable{Zelda.Entities.ZeldaEntity})">
            <summary>
            Helper method that filters out the entities that must be saved.
            </summary>
            <param name="entities">
            All entities that might want to be saved.
            </param>
            <returns>A new dictionary that maps entity type to a list of entities.</returns>
        </member>
        <member name="M:Zelda.Saving.SceneEntitiesStorage.WriteHeader(System.Collections.Generic.IDictionary{System.Type,System.Collections.Generic.List{Zelda.Entities.ZeldaEntity}},Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Writes the entities header data junk that contains
            the types and names of all entities in the scene.
            </summary>
            <param name="sortedEntities">
            The entities that are required to be saved.
            </param>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Saving.SceneEntitiesStorage.Write(System.Collections.Generic.Dictionary{System.Type,System.Collections.Generic.List{Zelda.Entities.ZeldaEntity}},Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Writes the objects of the Scene using the given BinaryWriter.
            </summary>
            <param name="sortedEntities">
            The entities that are required to be saved.
            </param>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Saving.SceneEntitiesStorage.ReadHeader(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Reads the entity header and returns the sorted list of entities.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
            <returns>
            The list of entities, sorted by type.
            </returns>
        </member>
        <member name="M:Zelda.Saving.SceneEntitiesStorage.Read(System.Collections.Generic.IDictionary{System.Type,System.Collections.Generic.List{Zelda.Entities.ZeldaEntity}},Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Reads the entities of the Scene from the given System.IO.BinaryReader.
            </summary>
            <param name="sortedEntities">
            The list of entities the scene contains, as readen from the entities header, sorted by type.
            </param>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="T:Zelda.Saving.SceneStatus">
            <summary>
            Provides a storage place for the current status of a ZeldaScene.
            </summary>
        </member>
        <member name="P:Zelda.Saving.SceneStatus.Name">
            <summary>
            Gets the name of the Scene whose status
            is descriped by the SceneStatus.
            </summary>
        </member>
        <member name="P:Zelda.Saving.SceneStatus.RemovedPersistantEntities">
            <summary>
            Gets an IEnumerable over the persistant objects
            that have been removed from the scene. Can be null.
            </summary>
        </member>
        <member name="P:Zelda.Saving.SceneStatus.DataStore">
            <summary>
            Gets the storage place for arabitary data
            that is related to this SceneStatus.
            </summary>
        </member>
        <member name="P:Zelda.Saving.SceneStatus.EntityDataStore">
            <summary>
            Gets the storage place for per-entity data that is related to this SceneStatus.
            </summary>
        </member>
        <member name="P:Zelda.Saving.SceneStatus.FogOfWar">
            <summary>
            Gets the fog-of-war status of the scene descriped by this SceneStatus.
            </summary>
        </member>
        <member name="M:Zelda.Saving.SceneStatus.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Saving.SceneStatus"/> class.
            </summary>
        </member>
        <member name="M:Zelda.Saving.SceneStatus.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Saving.SceneStatus"/> class.
            </summary>
            <param name="name">
            The name of the Scene.
            </param>
        </member>
        <member name="M:Zelda.Saving.SceneStatus.RemovePersistantEntity(Zelda.Entities.IPersistentEntity)">
            <summary>
            Adds the specified <see cref="T:Zelda.Entities.IPersistentEntity"/>
            to the list of IPersistentEntities that have been removed from the Scene.
            </summary>
            <param name="persistentEntity">
            The IPersistentEntity to remove.
            </param>
        </member>
        <member name="M:Zelda.Saving.SceneStatus.RemovePersistantEntity(System.String)">
            <summary>
            Adds the <see cref="T:Zelda.Entities.IPersistentEntity"/> with the specified name
            to the list of IPersistentEntities that have been removed from the Scene.
            </summary>
            <param name="name">
            The name of the IPersistentEntity to remove.
            </param>
        </member>
        <member name="M:Zelda.Saving.SceneStatus.HasPersistantEntityBeenRemoved(System.String)">
            <summary>
            Gets whether the persistant object with 
            the given <paramref name="name"/> is removed from the Scene.
            </summary>
            <param name="name">
            The name of the persistant object.
            </param>
            <returns>
            True if the object has been removed; otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Saving.SceneStatus.InitializeScene(Zelda.ZeldaScene)">
            <summary>
            Initializes the specified ZeldaScene based on the data stored in this SceneStatus.
            </summary>
        </member>
        <member name="M:Zelda.Saving.SceneStatus.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Saving.SceneStatus.SerializeRemovedEntities(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the list of entities that have been
            removed from the ZeldaScene.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Saving.SceneStatus.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Saving.SceneStatus.DeserializeRemovedEntities(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the list of entities that have been
            removed from the ZeldaScene.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Saving.SceneStatus.name">
            <summary>
            The name of the Scene whose status is descriped
            by the SceneStatus.
            </summary>
        </member>
        <member name="F:Zelda.Saving.SceneStatus.removedEntities">
            <summary>
            Stores the names of persistant entities that have been removed from the scene.
            </summary>
        </member>
        <member name="F:Zelda.Saving.SceneStatus.addedEntities">
            <summary>
            Lists the additional SceneStatusStorable entities that have been added to the map.
            </summary>
        </member>
        <member name="F:Zelda.Saving.SceneStatus.dataStore">
            <summary>
            Provides a storage place for arabitary data
            that is related to this SceneStatus.
            </summary>
        </member>
        <member name="F:Zelda.Saving.SceneStatus.entityDataStore">
            <summary>
            Provides a storage place for per-entity data that is related to this SceneStatus.
            </summary>
        </member>
        <member name="F:Zelda.Saving.SceneStatus.fogOfWar">
            <summary>
            Stores the fog-of-war status of the scene descripes by this SceneStatus.
            </summary>
        </member>
        <member name="T:Zelda.Saving.ShortSaveGameInfo">
            <summary>
            Represents a POCObject holds the basic game information stored in a SaveFile.
            </summary>
        </member>
        <member name="F:Zelda.Saving.ShortSaveGameInfo.CharacterName">
            <summary>
            The name of the character.
            </summary>
        </member>
        <member name="F:Zelda.Saving.ShortSaveGameInfo.CharacterClass">
            <summary>
            The class of the character.
            </summary>
        </member>
        <member name="F:Zelda.Saving.ShortSaveGameInfo.CharacterLevel">
            <summary>
            The level of the character.
            </summary>
        </member>
        <member name="F:Zelda.Saving.ShortSaveGameInfo.RegionName">
            <summary>
            The name of the region the player has saved in.
            </summary>
        </member>
        <member name="F:Zelda.Saving.ShortSaveGameInfo.CharacterColorTint">
            <summary>
            The color tint that is applied to the main characters sprite.
            </summary>
        </member>
        <member name="F:Zelda.Saving.ShortSaveGameInfo.Difficulty">
            <summary>
            The ID that uniquely identifies the difficulty of the game.
            </summary>
        </member>
        <member name="F:Zelda.Saving.ShortSaveGameInfo.Hardcore">
            <summary>
            States whether the player choose to play on hardcore.
            </summary>
        </member>
        <member name="M:Zelda.Saving.ShortSaveGameInfo.#ctor(System.String,System.String,System.Int32,System.String,Zelda.Entities.Drawing.LinkSpriteColorTint,Zelda.Difficulties.DifficultyId,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Saving.ShortSaveGameInfo"/> structure.
            </summary>
            <param name="characterName">
            The name of the character.
            </param>
            <param name="characterClass">
            The class of the character.
            </param>
            <param name="characterLevel">
            The level of the character.
            </param>
            <param name="regionName">
            The name of the region the player has saved in.
            </param>
            <param name="characterColorTint">
            The color in which the player's character is tinted in.
            </param>
            <param name="difficulty">
            The ID that uniquely identifies the difficulty of the game.
            </param>
            <param name="hardcore">
            States whether the player choose to play on hardcore.
            </param>
        </member>
        <member name="T:Zelda.Saving.Storage.BooleanStorage">
            <summary>
            Provides a place to store a single <see cref="T:System.Boolean"/> value.
            This class can't be inherited.
            </summary>
        </member>
        <member name="P:Zelda.Saving.Storage.BooleanStorage.Value">
            <summary>
            Gets or sets the value stored in this BooleanStorage.
            </summary>
        </member>
        <member name="M:Zelda.Saving.Storage.BooleanStorage.SerializeStorage(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this IStorage.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Saving.Storage.BooleanStorage.DeserializeStorage(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this IStorage.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="T:Zelda.Saving.Storage.DataStore">
            <summary>
            Represents a place that stores <see cref="T:Zelda.Saving.Storage.IStorage"/> values
            by mapping them onto an identifier string.
            </summary>
        </member>
        <member name="P:Zelda.Saving.Storage.DataStore.Entries">
            <summary>
            Gets the <see cref="T:Zelda.Saving.Storage.IStorage"/> entries in this DataStore.
            </summary>
        </member>
        <member name="M:Zelda.Saving.Storage.DataStore.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Saving.Storage.DataStore.SerializeEntry(System.Collections.Generic.KeyValuePair{System.String,Zelda.Saving.Storage.IStorage},Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes/Writes the data descriping the given ValueStore entry.
            </summary>
            <param name="entry">
            The ValueStore entry to serialize.
            </param>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Saving.Storage.DataStore.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Saving.Storage.DataStore.DeserializeEntry(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes/Reads the data descriping an entry in the ValueStore.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Saving.Storage.DataStore.TryGet(System.String)">
            <summary>
            Gets the <see cref="T:Zelda.Saving.Storage.IStorage"/> with the given <paramref name="identifier"/>.
            </summary>
            <param name="identifier">
            The full identifier.
            </param>
            <returns>
            The requested IStorage; or null.
            </returns>
        </member>
        <member name="M:Zelda.Saving.Storage.DataStore.TryGet``1(System.String)">
            <summary>
            Gets the <see cref="T:Zelda.Saving.Storage.IStorage"/> with the given <paramref name="identifier"/> and type.
            </summary>
            <typeparam name="T">
            The type of the IStorage to receive.
            </typeparam>
            <param name="identifier">
            The full identifier.
            </param>
            <returns>
            The requested IStorage; or null.
            </returns>
        </member>
        <member name="M:Zelda.Saving.Storage.DataStore.TryGetBoolean(System.String)">
            <summary>
            Gets the <see cref="T:Zelda.Saving.Storage.IValueStorage`1"/> with the given <paramref name="identifier"/> .
            </summary>
            <param name="identifier">
            The full identifier.
            </param>
            <returns>
            The requested IStorage; or null.
            </returns>
        </member>
        <member name="M:Zelda.Saving.Storage.DataStore.GetOrCreateBoolean(System.String,System.Boolean)">
            <summary>
            Gets or creates the IValueStorage{Boolean} with the given identifier.
            </summary>
            <param name="identifier">
            The full identifier.
            </param>
            <param name="initialValue">
            The initial value of the new IValueStorage.
            </param>
            <returns>
            The already existing or newly created IValueStorage.
            </returns>
        </member>
        <member name="M:Zelda.Saving.Storage.DataStore.CreateBoolean(System.String,System.Boolean)">
            <summary>
            Creates or overwrites the IValueStorage{Boolean} with the given identifier.
            </summary>
            <param name="identifier">
            The full identifier.
            </param>
            <param name="initialValue">
            The initial value of the new BooleanStorage.
            </param>
        </member>
        <member name="M:Zelda.Saving.Storage.DataStore.Create``2(System.String,``1)">
            <summary>
            Creates or overwrites the IValueStorage{TValue} with the given identifier.
            </summary>
            <typeparam name="TStorage">
            The final type of the IValueStorage.
            </typeparam>
            <typeparam name="TValue">
            The type of the value.
            </typeparam>
            <param name="identifier">
            The full identifier.
            </param>
            <param name="initialValue">
            The initial value of the new IValueStorage.
            </param>
        </member>
        <member name="M:Zelda.Saving.Storage.DataStore.GetOrCreate``2(System.String,``1)">
            <summary>
            Gets or creates the IValueStorage{TValue} with the given identifier.
            </summary>
            <typeparam name="TStorage">
            The final type of the IValueStorage.
            </typeparam>
            <typeparam name="TValue">
            The type of the value.
            </typeparam>
            <param name="identifier">
            The full identifier.
            </param>
            <param name="initialValue">
            The initial value of the new IValueStorage.
            </param>
            <returns>
            The already existing or newly created IValueStorage.
            </returns>
        </member>
        <member name="M:Zelda.Saving.Storage.DataStore.GetOrCreate``1(System.String)">
            <summary>
            Gets or creates the IStorage with the given identifier.
            </summary>
            <typeparam name="TStorage">
            The final type of the IStorage.
            </typeparam>
            <param name="identifier">
            The full identifier.
            </param>
            <returns>
            The already existing or newly created IStorage.
            </returns>
        </member>
        <member name="M:Zelda.Saving.Storage.DataStore.GetOrCreate``1(System.String,System.Func{``0})">
            <summary>
            Gets or creates the IStorage with the given identifier.
            </summary>
            <typeparam name="TStorage">
            The final type of the IStorage.
            </typeparam>
            <param name="identifier">
            The full identifier.
            </param>
            <param name="creationFunction">
            The function that is executed when the IStorage has to be created.
            </param>
            <returns>
            The already existing or newly created IStorage.
            </returns>
        </member>
        <member name="M:Zelda.Saving.Storage.DataStore.TryGetValue``1(System.String,``0@)">
            <summary>
            Tries to the value with the given <paramref name="identifier"/> and type.
            </summary>
            <typeparam name="T">
            The type of the value.
            </typeparam>
            <param name="identifier">
            The full identifier.
            </param>
            <param name="value">
            Will contain the requested value.
            </param>
            <returns>
            Returns true if a value was found for the given <paramref name="identifier"/> and type;
            or otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Saving.Storage.DataStore.Add(System.String,Zelda.Saving.Storage.IStorage)">
            <summary>
            Adds the specified <see cref="T:Zelda.Saving.Storage.IStorage"/> with the given
            unique <paramref name="identifier"/> to this Store.
            </summary>
            <param name="identifier">
            An unique identifier string.
            </param>
            <param name="storage">
            The IStorage to add.
            </param>
        </member>
        <member name="M:Zelda.Saving.Storage.DataStore.AddOrReplace``1(System.String,``0)">
            <summary>
            Adds the specified <see cref="T:Zelda.Saving.Storage.IStorage"/> with the given
            unique <paramref name="identifier"/> to this Store.
            </summary>
            <param name="identifier">
            An unique identifier string.
            </param>
            <param name="storage">
            The IStorage to add.
            </param>
        </member>
        <member name="F:Zelda.Saving.Storage.DataStore.dictionary">
            <summary>
            The dictionary that maps identifier strings onto IStorages.
            </summary>
        </member>
        <member name="T:Zelda.Saving.Storage.BaseEntityDataStorage`1">
            <summary>
            Represents an abstract base implementation of the IEntityDataStorage interface
            that can be applied on an entity with a special constraint.
            </summary>
        </member>
        <member name="M:Zelda.Saving.Storage.BaseEntityDataStorage`1.ApplyOn(Atom.Components.IEntity)">
            <summary>
            Applies this IEntityDataStorage on the specified entity.
            </summary>
            <param name="entity">
            The entity to apply the data stored in this IEntityDataStorage on.
            </param>
        </member>
        <member name="M:Zelda.Saving.Storage.BaseEntityDataStorage`1.ReceiveFrom(Atom.Components.IEntity)">
            <summary>
            Receives the data that is stored in this IEntityDataStorage about
            the specified IEntity and then stores it.
            </summary>
            <param name="entity">
            The entity from which the data should be received from.
            </param>
        </member>
        <member name="M:Zelda.Saving.Storage.BaseEntityDataStorage`1.ApplyOn(`0)">
            <summary>
            Applies this IEntityDataStorage on the specified constrained entity.
            </summary>
            <param name="entity">
            The entity to apply the data stored in this IEntityDataStorage on.
            </param>
        </member>
        <member name="M:Zelda.Saving.Storage.BaseEntityDataStorage`1.ReceiveFrom(`0)">
            <summary>
            Receives the data that is stored in this IEntityDataStorage about
            the specified constrained entity and then stores it.
            </summary>
            <param name="entity">
            The entity from which the data should be received from.
            </param>
        </member>
        <member name="M:Zelda.Saving.Storage.BaseEntityDataStorage`1.SerializeStorage(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this IEntityDataStorage.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Saving.Storage.BaseEntityDataStorage`1.DeserializeStorage(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this IEntityDataStorage.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="T:Zelda.Saving.Storage.EntityDataStore">
            <summary>
            Represents a store that stores per-entity data.
            </summary>
            <remarks>
            Multiple different <see cref="T:Zelda.Saving.Storage.IEntityDataStorage"/>s are supported per entity.
            </remarks>
        </member>
        <member name="M:Zelda.Saving.Storage.EntityDataStore.GetOrCreateAndUpdate``1(Atom.Components.IEntity)">
            <summary>
            Gets or creates and then updates the TEntityData for the specified IEntity.
            </summary>
            <typeparam name="TEntityData">
            The exact type of the entity data.
            </typeparam>
            <param name="entity">
            The entity for which the data storage should be received.
            </param>
            <returns>
            The requested TEntityData.
            </returns>
        </member>
        <member name="M:Zelda.Saving.Storage.EntityDataStore.GetOrCreate``1(Atom.Components.IEntity)">
            <summary>
            Gets or creates the TEntityData for the specified IEntity.
            </summary>
            <typeparam name="TEntityData">
            The exact type of the entity data.
            </typeparam>
            <param name="entity">
            The entity for which the data storage should be received.
            </param>
            <returns>
            The requested TEntityData.
            </returns>
        </member>
        <member name="M:Zelda.Saving.Storage.EntityDataStore.GetOrCreate``1(System.String)">
            <summary>
            Gets or creates the TEntityData for the entity with given name.
            </summary>
            <typeparam name="TEntityData">
            The exact type of the entity data.
            </typeparam>
            <param name="entityName">
            The name that uniquely identifies the entity.
            </param>
            <returns>
            The requested TEntityData.
            </returns>
        </member>
        <member name="M:Zelda.Saving.Storage.EntityDataStore.InitializeEntities(System.Collections.Generic.IEnumerable{Zelda.Entities.ZeldaEntity})">
            <summary>
            Initializes the specified entities by applying the data that is stored about
            them in this EntityDataStore.
            </summary>
            <param name="entities">
            The entities to initialize.
            </param>
        </member>
        <member name="M:Zelda.Saving.Storage.EntityDataStore.GetIdentifier``1">
            <summary>
            Gets the identifier that uniquely identifies the IEntityDataStorage of the specified type.
            </summary>
            <typeparam name="TEntityData">
            The exact type of the IEntityDataStorage.
            </typeparam>
            <returns>
            The string that uniquely identifies the entity.
            </returns>
        </member>
        <member name="M:Zelda.Saving.Storage.EntityDataStore.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Saving.Storage.EntityDataStore.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Saving.Storage.EntityDataStore.dataStores">
            <summary>
            The dictionary that maps entity names onto their individual DataStores.
            </summary>
        </member>
        <member name="T:Zelda.Saving.Storage.IEntityDataStorage">
            <summary>
            Represents a storage of entity related data.
            </summary>
        </member>
        <member name="M:Zelda.Saving.Storage.IEntityDataStorage.ApplyOn(Atom.Components.IEntity)">
            <summary>
            Applies this IEntityDataStorage on the specified entity.
            </summary>
            <param name="entity">
            The entity to apply the data stored in this IEntityDataStorage on.
            </param>
        </member>
        <member name="M:Zelda.Saving.Storage.IEntityDataStorage.ReceiveFrom(Atom.Components.IEntity)">
            <summary>
            Receives the data that is stored in this IEntityDataStorage about
            the specified IEntity and then stores it.
            </summary>
            <param name="entity">
            The entity from which the data should be received from.
            </param>
        </member>
        <member name="T:Zelda.Saving.Storage.IntegerStorage">
            <summary>
            Provides a place to store a single <see cref="T:System.Int32"/> value.
            This class can't be inherited.
            </summary>
        </member>
        <member name="P:Zelda.Saving.Storage.IntegerStorage.Value">
            <summary>
            Gets or sets the value stored in this IntegerStorage.
            </summary>
        </member>
        <member name="M:Zelda.Saving.Storage.IntegerStorage.SerializeStorage(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this IStorage.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Saving.Storage.IntegerStorage.DeserializeStorage(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this IStorage.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="T:Zelda.Saving.Storage.IStorage">
            <summary>
            Provides a place to store arabitary data.
            </summary>
        </member>
        <member name="M:Zelda.Saving.Storage.IStorage.SerializeStorage(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this IStorage.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Saving.Storage.IStorage.DeserializeStorage(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this IStorage.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="T:Zelda.Saving.Storage.IValueStorage`1">
            <summary>
            Provides a place to store a single value.
            </summary>
            <typeparam name="T">
            The type of the value.
            </typeparam>
        </member>
        <member name="P:Zelda.Saving.Storage.IValueStorage`1.Value">
            <summary>
            Gets or sets the value stored in this IValueStorage{T}.
            </summary>
        </member>
        <member name="T:Zelda.Saving.WorldStatus">
            <summary>
            Descripes the full status of the game world.
            This class can't be inherited.
            </summary>
        </member>
        <member name="P:Zelda.Saving.WorldStatus.DataStore">
            <summary>
            Gets a store for arabitary world-wide data.
            </summary>
        </member>
        <member name="P:Zelda.Saving.WorldStatus.TempDataStore">
            <summary>
            Gets a store for arabitary world-wide data that is not persisted.
            </summary>
        </member>
        <member name="P:Zelda.Saving.WorldStatus.IngameDateTime">
            <summary>
            Gets the object that stores the ingame date and time.
            </summary>
        </member>
        <member name="P:Zelda.Saving.WorldStatus.ScenesCache">
            <summary>
            Gets the <see cref="T:Zelda.ZeldaScenesCache"/> that provides a mechanism to cache previous <see cref="T:Zelda.ZeldaScene"/>s.
            </summary>
        </member>
        <member name="P:Zelda.Saving.WorldStatus.WorldWideTimers">
            <summary>
            Gets the map of ITimers that are world-wide active.
            </summary>
        </member>
        <member name="M:Zelda.Saving.WorldStatus.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this WorldStatus.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Saving.WorldStatus.GetSceneStatus(System.String)">
            <summary>
            Tries to get the <see cref="T:Zelda.Saving.SceneStatus"/>
            of the scene with the given <paramref name="name"/>.
            </summary>
            <param name="name">
            The name of the scene to get.
            </param>
            <returns>
            The status of the scene with the given name; or null.
            </returns>
        </member>
        <member name="M:Zelda.Saving.WorldStatus.AddSceneStatus(Zelda.Saving.SceneStatus)">
            <summary>
            Adds the specified <see cref="T:Zelda.Saving.SceneStatus"/>
            to the list of known SceneStatuses of the <see cref="T:Zelda.Saving.WorldStatus"/>.
            </summary>
            <param name="status">
            The SceneStatus to add.
            </param>
        </member>
        <member name="M:Zelda.Saving.WorldStatus.ContainsSceneStatus(Zelda.Saving.SceneStatus)">
            <summary>
            Gets a value indicating whether this WorldStatus contains the specified SceneStatus. 
            </summary>
            <param name="status">
            The SceneStatus to search for.
            </param>
            <returns>
            true if it contains the specified SceneStatus or another SceneStatus for the same scene;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Saving.WorldStatus.SerializeState(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe the state of this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Saving.WorldStatus.DeserializeState(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the current state of the World.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Saving.WorldStatus.dataStore">
            <summary>
            Represents a store for arabitary world-wide data.
            </summary>
        </member>
        <member name="F:Zelda.Saving.WorldStatus.tempDataStore">
            <summary>
            Represents a store for arabitary world-wide data that is not persisted.
            </summary>
        </member>
        <member name="F:Zelda.Saving.WorldStatus.ingameDateTime">
            <summary>
            Stores the ingame date and time.
            </summary>
        </member>
        <member name="F:Zelda.Saving.WorldStatus.scenes">
            <summary>
            Stores the status of the scenes in the world known to the player.
            </summary>
        </member>
        <member name="F:Zelda.Saving.WorldStatus.scenesCache">
            <summary>
            Provides a mechanism to cache previous <see cref="T:Zelda.ZeldaScene"/>s.
            </summary>
        </member>
        <member name="F:Zelda.Saving.WorldStatus.worldWideTimers">
            <summary>
            The map of timers that are world-wide active.
            </summary>
        </member>
        <member name="T:Zelda.ZeldaEventTypeActivator">
            <summary>
            Provides a mechanism that creates new objects given a type name.
            </summary>
        </member>
        <member name="F:Zelda.ZeldaEventTypeActivator.Instance">
            <summary>
            Represents an instance of the ZeldaEventTypeActivator class.
            </summary>
        </member>
        <member name="M:Zelda.ZeldaEventTypeActivator.CreateInstance(System.String)">
            <summary>
            Creates an instance of the type with the given typeName.
            </summary>
            <param name="typeName">
            The name that uniquely identifies the type to initiate.
            </param>
            <returns>
            The object that has been created.
            </returns>
        </member>
        <member name="F:Zelda.ZeldaEventTypeActivator.actualTypeActivator">
            <summary>
            The ITypeActivator that is actually doing the the activation logic.
            </summary>
        </member>
        <member name="T:Zelda.ZeldaTypeActivator">
            <summary>
            Provides a mechanism that creates new objects given a type name.
            </summary>
        </member>
        <member name="F:Zelda.ZeldaTypeActivator.Instance">
            <summary>
            Represents an instance of the ZeldaTypeActivator class.
            </summary>
        </member>
        <member name="M:Zelda.ZeldaTypeActivator.#ctor">
            <summary>
            Prevents the creation of ZeldaTypeActivator instances.
            </summary>
        </member>
        <member name="M:Zelda.ZeldaTypeActivator.CreateInstance(System.String)">
            <summary>
            Creates an instance of the type with the given typeName.
            </summary>
            <param name="typeName">
            The name that uniquely identifies the type to initiate.
            </param>
            <returns>
            The object that has been created.
            </returns>
        </member>
        <member name="F:Zelda.ZeldaTypeActivator.actualTypeActivator">
            <summary>
            The ITypeActivator that is actually doing the the activation logic.
            </summary>
        </member>
        <member name="T:Zelda.InactiveSceneUpdater">
            <summary>
            Implements a mechanism that silently updates ZeldaScenes that the player
            has left.
            </summary>
            <remarks>
            This is used to simulate that time still continues in the previous scene.
            </remarks>
        </member>
        <member name="M:Zelda.InactiveSceneUpdater.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this InactiveSceneUpdater.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.InactiveSceneUpdater.SetUpdateContext(Zelda.ZeldaUpdateContext)">
            <summary>
            Setups the inactiveUpdateContext this InactiveSceneUpdater uses
            to update the current scene.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.InactiveSceneUpdater.NotifyInacitify(Zelda.ZeldaScene)">
            <summary>
            Notifies this InactiveSceneUpdater that the specified ZeldaScene
            has turned inactive and ahouls be updated silently in the background.
            </summary>
            <param name="scene">
            The scene that has turned inactive.
            </param>
        </member>
        <member name="M:Zelda.InactiveSceneUpdater.Clear">
            <summary>
            Clears this InactiveSceneUpdater; removing all inacticely updated scenes.
            </summary>
        </member>
        <member name="F:Zelda.InactiveSceneUpdater.scene">
            <summary>
            The scene that last turned inactive and should be updated in the background.
            </summary>
        </member>
        <member name="F:Zelda.InactiveSceneUpdater.updateTime">
            <summary>
            The time in seconds the scene has been updated silently.
            </summary>
        </member>
        <member name="F:Zelda.InactiveSceneUpdater.MaximumUpdateTime">
            <summary>
            The maximum time in seconds updates to the scene are done in the background
            until it is discarded.
            </summary>
        </member>
        <member name="F:Zelda.InactiveSceneUpdater.inactiveUpdateContext">
            <summary>
            The ZeldaUpdateContext that is used 
            </summary>
        </member>
        <member name="T:Zelda.ISceneChangeListener">
            <summary>
            Represents an object that wants to listen
            to scene chance messages.
            </summary>
            <remarks>
            This should be confused with the changing of the current Scene of an entity.
            A scene change is a higher level concept as in that it represents the complete
            change of the current scene to another scene.
            </remarks>
        </member>
        <member name="M:Zelda.ISceneChangeListener.NotifySceneChange(Zelda.ChangeType)">
            <summary>
            Notifies this ISceneChangeListener that a scene change has occured.
            </summary>
            <param name="changeType">
            States whether the current scene has changed away or to its current scene.
            </param>
        </member>
        <member name="T:Zelda.ISceneProvider">
            <summary>
            Provides a mechanism that allows one
            to receive a ZeldaScene instance.
            </summary>
        </member>
        <member name="P:Zelda.ISceneProvider.Scene">
            <summary>
            Gets the ZeldaScene that this ISceneProvider provides.
            </summary>
        </member>
        <member name="T:Zelda.SceneSettings">
            <summary>
            Encapsulates the settings of a <see cref="T:Zelda.ZeldaScene"/>.
            </summary>
        </member>
        <member name="P:Zelda.SceneSettings.SceneType">
            <summary>
            Gets or sets a value that inidicates what general kind of scene
            the ZeldaScene is.
            </summary>
        </member>
        <member name="P:Zelda.SceneSettings.AmbientColor">
            <summary>
            Gets or sets the ambient color of the scene.
            </summary>
        </member>
        <member name="P:Zelda.SceneSettings.IsLightingEnabled">
            <summary>
            Gets or sets a value indicating whether
            Lightning is currently enabled for this Scene.
            </summary>
        </member>
        <member name="P:Zelda.SceneSettings.MusicList">
            <summary>
            Gets the list of <see cref="T:Zelda.Audio.BackgroundMusic"/> from which songs are randomly choosen
            to be play in the background.
            </summary>
        </member>
        <member name="P:Zelda.SceneSettings.Properties">
            <summary>
            Gets the list of additional arbitrary scene properties.
            </summary>
        </member>
        <member name="P:Zelda.SceneSettings.WeatherSettings">
            <summary>
            Gets the settings that control the IWeather in the scene.
            </summary>
        </member>
        <member name="P:Zelda.SceneSettings.SubdivisionDepth">
            <summary>
            Gets or sets the number of subdivision that are done in the quad tree.
            </summary>
        </member>
        <member name="P:Zelda.SceneSettings.MapSize">
            <summary>
            Gets the size of the scene in tilespace.
            </summary>
        </member>
        <member name="M:Zelda.SceneSettings.#ctor(Zelda.ZeldaScene)">
            <summary>
            Initializes a new instance of the SceneSettings class.
            </summary>
            <param name="scene">
            The scene whose settings are managed by the new SceneSettings instance.
            </param>
        </member>
        <member name="M:Zelda.SceneSettings.RecreateQuadTree">
            <summary>
            Recreates the quad-tree.
            </summary>
        </member>
        <member name="M:Zelda.SceneSettings.ApplyNewSceneType">
            <summary>
            Applies the settings the currently set <see cref="P:Zelda.SceneSettings.SceneType"/> imply to the underlying Scene.
            </summary>
        </member>
        <member name="M:Zelda.SceneSettings.Clear">
            <summary>
            Clears this SceneSettings instance.
            </summary>
        </member>
        <member name="M:Zelda.SceneSettings.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.SceneSettings.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.SceneSettings.subdivisionDepth">
            <summary>
            Represents the storage field of the <see cref="P:Zelda.SceneSettings.SubdivisionDepth"/> property.
            </summary>
        </member>
        <member name="F:Zelda.SceneSettings.ambientColor">
            <summary>
            The ambient color applied to this ZeldaScene.
            </summary>
        </member>
        <member name="F:Zelda.SceneSettings.isLightingEnabled">
            <summary>
            States whether lighting is enabled for this ZeldaScene.
            </summary>
        </member>
        <member name="F:Zelda.SceneSettings.sceneType">
            <summary>
            Indicates what kind of scene this ZeldaScene is.
            </summary>
        </member>
        <member name="F:Zelda.SceneSettings.properties">
            <summary>
            Stores the arbitrary scene properties.
            </summary>
        </member>
        <member name="F:Zelda.SceneSettings.musicList">
            <summary>
            Stores the names of the music tracks played in the background in this ZeldaScene.
            </summary>
        </member>
        <member name="F:Zelda.SceneSettings.scene">
            <summary>
            Identifies the ZeldaScene whose settings this SceneSettings instance encapsulates.
            </summary>
        </member>
        <member name="T:Zelda.SceneType">
            <summary>
            Enumerates the different types of <see cref="T:Zelda.ZeldaScene"/>s.
            </summary>
        </member>
        <member name="F:Zelda.SceneType.Outdoor">
            <summary>
            An outdoor scene has an active day/night cycle and weather system.
            </summary>
        </member>
        <member name="F:Zelda.SceneType.IndoorAmbient">
            <summary>
            An indoor-ambient scene has a static ambient color and no active weather system.
            </summary>
        </member>
        <member name="F:Zelda.SceneType.OutdoorAmbient">
            <summary>
            An outdoor-ambient scene has a static ambient color and an active weather system.
            </summary>
        </member>
        <member name="F:Zelda.SceneType.Indoor">
            <summary>
            An indoor scene has an active day/night cycle and no active weather system.
            </summary>
        </member>
        <member name="T:Zelda.ZeldaScene">
            <summary>
            Represents an actual ingame scene which contains entities, events, 
            particle systems, the tilemap and more.
            This is a sealed class.
            </summary>
            <content>
            This partial class implementation contains all
            code related to saving and loading a ZeldaScene.
            </content>
        </member>
        <member name="F:Zelda.ZeldaScene.Extension">
            <summary>
            The extension of the file-format ZeldaScene's are saved in. ".zs"
            </summary>
        </member>
        <member name="M:Zelda.ZeldaScene.GetLocalizedName(System.String)">
            <summary>
            Gets the localized name of the scene with the specified name.
            </summary>
            <param name="name">
            The name of the scene. Can be null.
            </param>
            <returns>
            The localized name.
            </returns>
        </member>
        <member name="E:Zelda.ZeldaScene.EntityAdded">
            <summary>
            Fired when a <see cref="T:Zelda.Entities.ZeldaEntity"/> has been added to this ZeldaScene.
            </summary>
        </member>
        <member name="E:Zelda.ZeldaScene.EntityRemoved">
            <summary>
            Fired when a <see cref="T:Zelda.Entities.ZeldaEntity"/> has been removed from this ZeldaScene.
            </summary>
        </member>
        <member name="P:Zelda.ZeldaScene.Name">
            <summary>
            Gets or sets the name that uniquely identifies this <see cref="T:Zelda.ZeldaScene"/>.
            </summary>
        </member>
        <member name="P:Zelda.ZeldaScene.LocalizedName">
            <summary>
            Gets the localized name of this ZeldaScene, used ingame.
            </summary>
        </member>
        <member name="P:Zelda.ZeldaScene.IsPaused">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Zelda.ZeldaScene"/>
            is currently paused.
            </summary>
            <value>
            The default value is false.
            </value>
        </member>
        <member name="P:Zelda.ZeldaScene.Status">
            <summary>
            Gets the object that descripes the status of this <see cref="T:Zelda.ZeldaScene"/>.
            </summary>
        </member>
        <member name="P:Zelda.ZeldaScene.EventManager">
            <summary>
            Gets the <see cref="T:Zelda.Events.ZeldaEventManager"/> of this <see cref="T:Zelda.ZeldaScene"/>.
            </summary>
        </member>
        <member name="P:Zelda.ZeldaScene.IngameDateTime">
            <summary>
            Gets or sets a reference of the <see cref="P:Zelda.ZeldaScene.IngameDateTime"/> object
            which manages the date and time settings of the <see cref="T:Zelda.ZeldaScene"/>.
            </summary>
            <value>
            This value is null by default and must be set after the Scene has been created.
            </value>
        </member>
        <member name="P:Zelda.ZeldaScene.DayNightCycle">
            <summary>
            Gets the <see cref="P:Zelda.ZeldaScene.DayNightCycle"/> used by this ZeldaScene.
            </summary>
        </member>
        <member name="P:Zelda.ZeldaScene.IngameState">
            <summary>
            Gets the <see cref="T:Zelda.IIngameState"/> this ZeldaScene is associated with.
            </summary>
            <value>The IIngameState; or null.</value>
        </member>
        <member name="P:Zelda.ZeldaScene.WeatherMachine">
            <summary>
            Gets the <see cref="T:Zelda.Weather.WeatherMachine"/>
            that manages the IWeather of this ZeldaScene.
            </summary>
        </member>
        <member name="P:Zelda.ZeldaScene.FlyingTextManager">
            <summary>
            Gets the <see cref="P:Zelda.ZeldaScene.FlyingTextManager"/> object.
            </summary>
        </member>
        <member name="P:Zelda.ZeldaScene.BubbleTextManager">
            <summary>
            Gets the object that manages "speak" bubbles.
            </summary>
        </member>
        <member name="P:Zelda.ZeldaScene.WaypointMap">
            <summary>
            Gets the <see cref="T:Zelda.Waypoints.ZeldaWaypointMap"/> that contains the Waypoints and Paths of this ZeldaScene.
            </summary>
        </member>
        <member name="P:Zelda.ZeldaScene.Rand">
            <summary>
            Gets a random number generator.
            </summary>
        </member>
        <member name="P:Zelda.ZeldaScene.UserInterface">
            <summary>
            Gets or sets the <see cref="T:Zelda.UI.ZeldaUserInterface"/>
            that is currently associated with this ZeldaScene.
            </summary>
        </member>
        <member name="P:Zelda.ZeldaScene.Storyboard">
            <summary>
            Gets the ZeldaStoryboard that manages the various Timelines that this ZeldaScene has.
            </summary>
        </member>
        <member name="P:Zelda.ZeldaScene.Settings">
            <summary>
            Gets the settings of this ZeldaScene.
            </summary>
        </member>
        <member name="P:Zelda.ZeldaScene.QuadTree">
            <summary>
            Gets the <see cref="T:Atom.Scene.QuadTree2"/> that contains the objects this ZeldaScene contains.
            </summary>
            <remarks>
            Should not be modified manually.
            </remarks>
        </member>
        <member name="P:Zelda.ZeldaScene.Map">
            <summary>
            Gets the <see cref="T:Atom.Scene.Tiles.TileMap"/> of this <see cref="T:Zelda.ZeldaScene"/>.
            </summary>
        </member>
        <member name="P:Zelda.ZeldaScene.WidthInPixels">
            <summary>
            Gets the width of this ZeldaScene (in pixels).
            </summary>
        </member>
        <member name="P:Zelda.ZeldaScene.HeightInPixels">
            <summary>
            Gets the height of this ZeldaScene (in pixels).
            </summary>
        </member>
        <member name="P:Zelda.ZeldaScene.FloorCount">
            <summary>
            Gets a value that indicates how many TileMapFloors this ZeldaScene has.
            </summary>
        </member>
        <member name="P:Zelda.ZeldaScene.Player">
            <summary>
            Gets or sets the <see cref="T:Zelda.Entities.PlayerEntity"/> object.
            </summary>
        </member>
        <member name="P:Zelda.ZeldaScene.Camera">
            <summary>
            Gets the camera of this <see cref="T:Zelda.ZeldaScene"/>.
            </summary>
        </member>
        <member name="P:Zelda.ZeldaScene.Entities">
            <summary>
            Gets the list of entities that are part of this Scene.
            </summary>
        </member>
        <member name="P:Zelda.ZeldaScene.VisibleEntities">
            <summary>
            Gets the list of entities that are currently visible to the Player.
            </summary>
        </member>
        <member name="P:Zelda.ZeldaScene.VisibleLights">
            <summary>
            Gets the list that contains the Lights that are currently visible.
            </summary>
            <remarks>
            Don't modify the list.
            </remarks>
        </member>
        <member name="P:Zelda.ZeldaScene.Overlays">
            <summary>
            Gets the list that contains the ISceneOverlay that should
            be drawn ontop of the scene.
            </summary>
            <remarks>
            Don't modify the list.
            </remarks>
        </member>
        <member name="P:Zelda.ZeldaScene.EditorMode">
            <summary>
            Gets or sets a value indicating whether the application is in editor-mode.
            </summary>
            <value>The default value is false.</value>
        </member>
        <member name="P:Zelda.ZeldaScene.EntityEditMode">
            <summary>
            Gets or sets a value indicating whether the application is in entity edit-mode.
            </summary>
            <value>The default value is false.</value>
        </member>
        <member name="P:Zelda.ZeldaScene.EventTriggersAreDrawn">
            <summary>
            Gets or sets a value indicating whether EventTriggers are drawn in all Scenes.
            </summary>
            <value>The default value is false.</value>
        </member>
        <member name="M:Zelda.ZeldaScene.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.ZeldaScene"/> class.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.ZeldaScene.#ctor(System.Int32,System.Int32,System.Int32,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.ZeldaScene"/> class.
            </summary>
            <param name="width">The width of the new TileMap (in tile-space).</param>
            <param name="height">The height of the new TileMap (in tile-space).</param>
            <param name="initialFloorCount">
            The initial number of floors the new Scene has.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.ZeldaScene.CreateManual(System.Int32,System.Int32,System.Int32,Zelda.IZeldaServiceProvider)">
            <summary>
            Manually creates a new instance of the <see cref="T:Zelda.ZeldaScene"/> class.
            </summary>
            <param name="width">The width of the new TileMap (in tile-space).</param>
            <param name="height">The height of the new TileMap (in tile-space).</param>
            <param name="initialFloorCount">
            The initial number of floors the new Scene has.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
            <returns>The new ZeldaScene.</returns>
        </member>
        <member name="M:Zelda.ZeldaScene.Load(System.String,Zelda.IZeldaServiceProvider)">
            <summary>
            Creates a new instance of the <see cref="T:Zelda.ZeldaScene"/> class
            by loading an existing scene.
            </summary>
            <param name="sceneName">The name of the scene to load.</param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
            <returns>The new ZeldaScene.</returns>
        </member>
        <member name="M:Zelda.ZeldaScene.Load(System.String,Zelda.Saving.WorldStatus,Zelda.IZeldaServiceProvider)">
            <summary>
            Creates a new instance of the <see cref="T:Zelda.ZeldaScene"/> class
            by loading an existing scene.
            </summary>
            <param name="sceneName">The name of the scene to load.</param>
            <param name="worldStatus">
            Stores the state of the world. can be null.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
            <returns>The new ZeldaScene.</returns>
        </member>
        <member name="M:Zelda.ZeldaScene.SetupStatus(Zelda.Saving.WorldStatus)">
            <summary>
            Setups the status of the Scene.
            </summary>
            <param name="worldStatus">
            Stores the status of the world. Can be null.
            </param>
        </member>
        <member name="M:Zelda.ZeldaScene.RemoveRemovedPersistantEntities">
            <summary>
            Removes the persistant entities that have been removed
            from this ZeldaScene.
            </summary>
        </member>
        <member name="M:Zelda.ZeldaScene.SetupMap">
            <summary>
            Setups the map related data of this <see cref="T:Zelda.ZeldaScene"/>.
            </summary>
        </member>
        <member name="M:Zelda.ZeldaScene.RefreshLocalizedName">
            <summary>
            Refreshes the localized name of this ZeldaScene.
            </summary>
        </member>
        <member name="M:Zelda.ZeldaScene.CreateTileMapFloorTags">
            <summary>
            Creates the ZeldaTileMapFloorTags of the TileMap.
            </summary>
        </member>
        <member name="M:Zelda.ZeldaScene.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this <see cref="T:Zelda.ZeldaScene"/>.
            </summary>
            <param name="updateContext">
            The current IUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.ZeldaScene.UpdateVisible">
            <summary>
            Updates the list of visible entities/drawables.
            </summary>
        </member>
        <member name="M:Zelda.ZeldaScene.ClearTileMapFloorTags">
            <summary>
            Clears the <see cref="T:Zelda.ZeldaTileMapFloorTag"/>s of the TileMap.
            </summary>
        </member>
        <member name="M:Zelda.ZeldaScene.AddVisibleDrawablesToTileMapFloorTags">
            <summary>
            Adds the currently visibleDrawables to the <see cref="T:Zelda.ZeldaTileMapFloorTag"/>s of the TileMap.
            </summary>
        </member>
        <member name="M:Zelda.ZeldaScene.SortVisible">
            <summary>
            Sorts the IFloorDrawables that are currently visible.
            </summary>
        </member>
        <member name="M:Zelda.ZeldaScene.FindDrawableEventTriggers">
            <summary>
            Helper-method of UpdateVisible that finds 
            the currently visible drawable EventTriggers.
            </summary>
            <remarks>
            This method needs refactoring.
            </remarks>
        </member>
        <member name="M:Zelda.ZeldaScene.Add(Zelda.Entities.ZeldaEntity)">
            <summary>
            Adds the given <see cref="T:Zelda.Entities.ZeldaEntity"/> to this <see cref="T:Zelda.ZeldaScene"/>.
            </summary>
            <param name="entity">
            The entity to add.
            </param>
        </member>
        <member name="M:Zelda.ZeldaScene.Atom#Scene#IScene#Add(Atom.Components.IEntity)">
            <summary>
            Adds the given <see cref="T:Zelda.Entities.ZeldaEntity"/> to this <see cref="T:Zelda.ZeldaScene"/>.
            </summary>
            <param name="entity">
            The entity to add.
            </param>
        </member>
        <member name="M:Zelda.ZeldaScene.Add(Zelda.Overlays.ISceneOverlay)">
            <summary>
            Adds the given <see cref="T:Zelda.Overlays.ISceneOverlay"/> to this <see cref="T:Zelda.ZeldaScene"/>.
            </summary>
            <param name="overlay">
            The overlay to add.
            </param>
        </member>
        <member name="M:Zelda.ZeldaScene.RemoveEntity(Zelda.Entities.ZeldaEntity)">
            <summary>
            Tries to remoe the given <see cref="T:Zelda.Entities.ZeldaEntity"/> from this <see cref="T:Zelda.ZeldaScene"/>.
            </summary>
            <param name="entity">
            The entity to remove.
            </param>
            <returns>
            true if the ZeldaEntity has been removed;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.ZeldaScene.RemoveEntity(System.String)">
            <summary>
            Tries to remove the ZeldaEntity with the given <paramref name="name"/>.
            </summary>
            <param name="name">The name of the entity to remove.</param>
            <returns>
            true if the ZeldaEntity has been removed;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.ZeldaScene.Atom#Scene#IScene#Remove(Atom.Components.IEntity)">
            <summary>
            Tries to remove the given <see cref="T:Zelda.Entities.ZeldaEntity"/> from this <see cref="T:Zelda.ZeldaScene"/>.
            </summary>
            <param name="entity">
            The entity to remove.
            </param>
            <returns>
            true if the ZeldaEntity has been removed;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.ZeldaScene.Remove(Zelda.Overlays.ISceneOverlay)">
            <summary>
            Adds the given <see cref="T:Zelda.Overlays.ISceneOverlay"/> to this <see cref="T:Zelda.ZeldaScene"/>.
            </summary>
            <param name="overlay">
            The overlay to add.
            </param>
            <returns>
            true if the overlay has been removed;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.ZeldaScene.HasEntity(System.String)">
            <summary>
            Returns whether this <see cref="T:Zelda.ZeldaScene"/>
            contains a <see cref="T:Zelda.Entities.ZeldaEntity"/> with the given <paramref name="name"/>.
            </summary>
            <param name="name">The name of the Entity to look for.</param>
            <returns>
            true if such an Entity exists;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.ZeldaScene.HasEntityAt(Atom.Math.Rectangle,System.Int32)">
            <summary>
            Returns whether this ZeldaScene contains a <see cref="T:Zelda.Entities.ZeldaEntity"/>
            within the given <paramref name="area"/> on the floor of the given <paramref name="floorNumber"/>.
            </summary>
            <param name="area">
            The area to check.
            </param>
            <param name="floorNumber">
            The number of the floor to check.
            </param>        
            <returns>
            true if an Entity exists at the given area of the given floor;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.ZeldaScene.HasSolidEntityAt(Atom.Math.Rectangle,System.Int32)">
            <summary>
            Returns whether this ZeldaScene contains a solid <see cref="T:Zelda.Entities.ZeldaEntity"/>
            within the given <paramref name="area"/> on the floor of the given <paramref name="floorNumber"/>.
            </summary>
            <param name="area">
            The area to check.
            </param>
            <param name="floorNumber">
            The number of the floor to check.
            </param>        
            <returns>
            true if an Entity exists at the given area of the given floor;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.ZeldaScene.HasEntityAtBut(Atom.Math.Rectangle,System.Int32,Zelda.Entities.ZeldaEntity)">
            <summary>
            Returns whether this ZeldaScene contains a <see cref="T:Zelda.Entities.ZeldaEntity"/>
            within the given <paramref name="area"/> on the floor of the given <paramref name="floorNumber"/>,
            ignoring the given <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
            <param name="area">
            The area to check.
            </param>
            <param name="floorNumber">
            The number of the floor to check.
            </param>
            <param name="butEntity">
            The ZeldaEntity to ignore.
            </param>
            <returns>
            true if an Entity exists at the given area of the given floor;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.ZeldaScene.GetEntity``1">
            <summary>
            Returns the first <see cref="T:Zelda.Entities.ZeldaEntity"/> of the given <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">
            The type of the <see cref="T:Zelda.Entities.ZeldaEntity"/> to receive.
            </typeparam>
            <returns>
            The first <see cref="T:Zelda.Entities.ZeldaEntity"/> of the given <typeparamref name="TEntity"/>;
            or null.
            </returns>
        </member>
        <member name="M:Zelda.ZeldaScene.GetEntity(System.String)">
            <summary>
            Tries to receive the <see cref="T:Zelda.Entities.ZeldaEntity"/> with the given <paramref name="name"/>.
            </summary>
            <remarks>This operation has a complexity of O(N).</remarks>
            <param name="name">
            The name that uniquely identifies the entity to receive.
            </param>
            <returns>
            The Zelda.Entities.ZeldaEntity or null if there exists no ZeldaEntity with the given name.
            </returns>
        </member>
        <member name="M:Zelda.ZeldaScene.GetSpawnPoint(System.String)">
            <summary>
            Tries to receive the <see cref="T:Zelda.Entities.Spawning.ISpawnPoint"/> with the given <paramref name="name"/>.
            </summary>
            <remarks>This operation has a complexity of O(N).</remarks>
            <param name="name">
            The name that uniquely identifies the ISpawnPoint to receive.
            </param>
            <returns>
            The Zelda.Entities.Spawning.ISpawnPoint or null if there exists no ISpawnPoint with the given name.
            </returns>
        </member>
        <member name="M:Zelda.ZeldaScene.GetActionLayer(System.Int32)">
            <summary>
            Gets the action tilemap layer for the given floor.
            </summary>
            <param name="floorNumber">
            The number of the floor of the action layer to get.
            </param>
            <returns>
            The action layer of the map on the given floor.
            </returns>
        </member>
        <member name="M:Zelda.ZeldaScene.FindVisible(Atom.Math.Rectangle)">
            <summary>
            Finds all IQuadTreeItem2s that are in the given <see cref="T:Atom.Math.Rectangle"/>.
            </summary>
            <remarks>
            The returned enumeration gets destroyed when FindVisible is called again.
            </remarks>
            <param name="rectangle">
            The area to look for entities.
            </param>
            <returns>
            The enumeration of visible IQuadTreeItem2s.
            WARNING: Don't midify this list.
            </returns>
        </member>
        <member name="M:Zelda.ZeldaScene.FindVisibleEntities(System.Int32,Atom.Math.Rectangle)">
            <summary>
            Finds all ZeldaEntities that are in the given <see cref="T:Atom.Math.Rectangle"/>.
            </summary>
            <remarks>
            The returned enumeration gets destroyed when FindVisibleEntities is called again.
            </remarks>
            <param name="floorNumber">
            The number of the floor to look for entities.
            </param>
            <param name="rectangle">
            The area to look for entities.
            </param>
            <returns>
            The enumeration of visible IQuadTreeItem2s.
            WARNING: Don't modify this list.
            </returns>
        </member>
        <member name="M:Zelda.ZeldaScene.FindVisibleEntities(Zelda.Entities.ZeldaEntity)">
            <summary>
            Finds all ZeldaEntities that touch the given <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
            <remarks>
            The returned enumeration gets destroyed when FindVisibleEntities is called again.
            </remarks>
            <param name="entity">
            The related ZeldaEntity.
            </param>
            <returns>
            The enumeration of visible IQuadTreeItem2s.
            WARNING: Don't modify this list.
            </returns>
        </member>
        <member name="M:Zelda.ZeldaScene.Contains(Atom.Math.Rectangle,System.Predicate{Atom.Scene.IQuadTreeItem2})">
            <summary>
            Gets whether this <see cref="T:Zelda.ZeldaScene"/> contains an <see cref="T:Atom.Scene.IQuadTreeItem2"/>
            in the given <paramref name="area"/> while the given additional <paramref name="predicate"/> holds true.
            </summary>
            <exception cref="T:System.ArgumentException">
            If <paramref name="predicate"/> is null.
            </exception>
            <param name="area">
            The area to look for items in.
            </param>
            <param name="predicate">
            The additional predicate that must hold true.
            </param>
            <returns>
            true if this ZeldaScene contains an IQuadTreeItem2 in the given <paramref name="area"/>
            while the given <paramref name="predicate"/> still holds true;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.ZeldaScene.GetTilePathSearcher(System.Int32)">
            <summary>
            Receives the <see cref="T:Atom.AI.AStarTilePathSearcher"/> for the given floor.
            </summary>
            <param name="floorNumber">
            The number of the floor.
            </param>
            <returns>
            The Atom.AI.AStarTilePathSearcher.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If <paramref name="floorNumber"/> is invalid.
            </exception>
        </member>
        <member name="M:Zelda.ZeldaScene.Atom#AI#IMultiFloorPathSearcherProvider#GetTilePathSearcher(System.Int32)">
            <summary>
            Gets the <see cref="T:Atom.AI.ITilePathSearcher"/> for the floor with the specified <paramref name="floorNumber"/>.
            </summary>
            <param name="floorNumber">
            The number of the floor.
            </param>
            <returns>
            The <see cref="T:Atom.AI.ITilePathSearcher"/> for the floor with the specified floorNumber.
            </returns>
        </member>
        <member name="M:Zelda.ZeldaScene.NotifyVisabilityUpdateNeeded">
            <summary>
            Notifies this ZeldaScene that a visability update is needed.
            </summary>
        </member>
        <member name="M:Zelda.ZeldaScene.NotifyVisabilityUpdateNeededSoon">
            <summary>
            Notifies this ZeldaScene that the next visability update
            should happen sooner.
            </summary>
        </member>
        <member name="M:Zelda.ZeldaScene.NotifySceneChange(Zelda.ChangeType)">
            <summary>
            Notifies this ZeldaScene that a scene change has occured.
            </summary>
            <param name="changeType">
            States whether the current scene has changed away or to this scene.
            </param>
        </member>
        <member name="M:Zelda.ZeldaScene.SetVisibilityStateActionLayer(System.Boolean)">
            <summary>
            Utility method that sets the visability of all ActionLayers of the TileMap of the Scene
            to the given boolean <paramref name="state"/>.
            </summary>
            <param name="state">
            true to show all action layers;
            false to hide all action layers.
            </param>
        </member>
        <member name="M:Zelda.ZeldaScene.ToggleVisibilityStateActionLayer">
            <summary>
            Toggles the visibility state of the action layers of the map On/Off.
            </summary>
        </member>
        <member name="M:Zelda.ZeldaScene.RefreshSpriteSheetsToUpdate">
            <summary>
            Refreshes the list of SpriteSheets that need to updated in the Scene.
            </summary>
        </member>
        <member name="M:Zelda.ZeldaScene.ClearAll">
            <summary>
            Removes every single object, entity, etc from this Scene.
            </summary>
        </member>
        <member name="M:Zelda.ZeldaScene.OnCameraTransformChanged(Zelda.Entities.ZeldaCamera)">
            <summary>
            Gets called when the Transformation of the Camera has changed;
            such as when the players moves around the Scene.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
        </member>
        <member name="M:Zelda.ZeldaScene.Reload(Zelda.IZeldaServiceProvider)">
            <summary>
            Relodas this scene; including all its reloadable entities, overlays and weather effects.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="F:Zelda.ZeldaScene.status">
            <summary>
            Descripes the game status of this ZeldaScene. Is saved in the SaveFile.
            </summary>
        </member>
        <member name="F:Zelda.ZeldaScene.map">
            <summary>
            The tilemap of this <see cref="T:Zelda.ZeldaScene"/>.
            </summary>
        </member>
        <member name="F:Zelda.ZeldaScene.storyboard">
            <summary>
            Combines and stores the various Timelines of this ZeldaScene.
            </summary>
        </member>
        <member name="F:Zelda.ZeldaScene.eventManager">
            <summary>
            Manages the Events and EventTriggers of this ZeldaScene.
            </summary>
        </member>
        <member name="F:Zelda.ZeldaScene.waypointMap">
            <summary>
            Manages and stores Waypoints and Paths in this ZeldaScene.
            </summary>
        </member>
        <member name="F:Zelda.ZeldaScene.flyingTextManager">
            <summary>
            Manages the creation, drawing and updating of <see cref="T:Zelda.FlyingText"/> instances.
            </summary>
        </member>
        <member name="F:Zelda.ZeldaScene.bubbleTextManager">
            <summary>
            Manages the creation, drawing and updating of <see cref="T:Zelda.BubbleText"/> instances.
            </summary>
        </member>
        <member name="F:Zelda.ZeldaScene.weatherMachine">
            <summary>
            Manages the IWeather shown in this ZeldaScene.
            </summary>
        </member>
        <member name="F:Zelda.ZeldaScene.settings">
            <summary>
            The settings of this ZeldaScene.
            </summary>
        </member>
        <member name="F:Zelda.ZeldaScene.serviceProvider">
            <summary>
            Provides fast access to game-related services.
            </summary>
        </member>
        <member name="F:Zelda.ZeldaScene.quadTree">
            <summary>
            The tree that stores the Entities of this <see cref="T:Zelda.ZeldaScene"/>
            in a hirachical scheme for fast lock-up.
            </summary>
        </member>
        <member name="F:Zelda.ZeldaScene.camera">
            <summary>
            The camera is responsible for showing us
            what can be seen by the player.
            </summary>
        </member>
        <member name="F:Zelda.ZeldaScene.visabilityUpdateNeeded">
            <summary>
            States whether a visability update is needed.
            </summary>
        </member>
        <member name="F:Zelda.ZeldaScene.timeSinceLastVisabilityUpdate">
            <summary>
            Stores the time since the last visability update.
            </summary>
        </member>
        <member name="F:Zelda.ZeldaScene.MaximumTimeBetweenVisabilityUpdates">
            <summary>
            The maximum time that is allowed to pass before a visability update must happen.
            </summary>
        </member>
        <member name="F:Zelda.ZeldaScene.timeSinceLastSceneSort">
            <summary>
            Stores the time since the last scene sort.
            </summary>
        </member>
        <member name="F:Zelda.ZeldaScene.MaximumTimeBetweenSceneSorts">
            <summary>
            The maximum time that is allowed to pass before a scene sort must happen.
            </summary>
        </member>
        <member name="F:Zelda.ZeldaScene.ingameDateTime">
            <summary>
            The <see cref="P:Zelda.ZeldaScene.IngameDateTime"/> which stores the current date and time in the <see cref="T:Zelda.ZeldaScene"/>.
            </summary>
        </member>
        <member name="F:Zelda.ZeldaScene.dayNightCycle">
            <summary>
            The <see cref="P:Zelda.ZeldaScene.DayNightCycle"/> calculates the alpha value needed
            to make the day-night cycle go smooth.
            </summary>
        </member>
        <member name="F:Zelda.ZeldaScene.additionalObjectsToUpdate">
            <summary>
            Lists additional non-entity objects that are updated each frame; such as simple timers.
            </summary>
        </member>
        <member name="F:Zelda.ZeldaScene.entities">
            <summary>
            The list of entities that are part of this <see cref="T:Zelda.ZeldaScene"/>.
            </summary>
        </member>
        <member name="F:Zelda.ZeldaScene.overlays">
            <summary>
            The list of ISceneOverlay active in this ZeldaScene.
            </summary>
        </member>
        <member name="F:Zelda.ZeldaScene.visibleTreeItems">
            <summary>
            Stores the currently visible items that have been stored in the quad tree.
            </summary>
        </member>
        <member name="F:Zelda.ZeldaScene.visibleEntities">
            <summary>
            The list of entities that are currently in the ViewArea of the player.
            </summary>
        </member>
        <member name="F:Zelda.ZeldaScene.visibleLights">
            <summary>
            The list of currently visible Lights.
            </summary>
        </member>
        <member name="F:Zelda.ZeldaScene.visibleDrawables">
            <summary>
            Stores the currently visible <see cref="T:Zelda.IZeldaFloorDrawable"/>s.
            </summary>
        </member>
        <member name="F:Zelda.ZeldaScene.spriteSheetsToUpdate">
            <summary>
            Enumerates the SpriteSheets of the TileMap which need to updated each frame.
            </summary>
        </member>
        <member name="F:Zelda.ZeldaScene.tempVisibleTreeItems">
            <summary>
            Temporary storage list that stores visible quad tree items.
            </summary>
        </member>
        <member name="F:Zelda.ZeldaScene.tempVisibleEntities">
            <summary>
            Temporary storage list that stores visible ZeldaEntities.
            </summary>
        </member>
        <member name="M:Zelda.ZeldaScene.Save">
            <summary>
            Saves this <see cref="T:Zelda.ZeldaScene"/>.
            </summary>
        </member>
        <member name="M:Zelda.ZeldaScene.WriteToFile(System.IO.MemoryStream)">
            <summary>
            Writes the specified stream of scene data to the hard-disc.
            </summary>
            <param name="memoryStream">
            The memory stream to copy over into a file.
            </param>
        </member>
        <member name="M:Zelda.ZeldaScene.Write(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Write this <see cref="T:Zelda.ZeldaScene"/> to the given <see cref="T:System.IO.BinaryWriter"/>.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.ZeldaScene.WriteWaypoints(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Writes the Waypoints, Path Segments and Paths of this Scene using the given IZeldaSerializationContext.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.ZeldaScene.WriteSettings(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Writes the Scene's settings using the given IZeldaSerializationContext.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.ZeldaScene.WriteEventsHeader(System.Collections.Generic.IList{Atom.Events.Event},System.Collections.Generic.IList{Atom.Events.EventTrigger},Atom.Events.EventManager.ReaderWriter,Atom.Events.IEventSerializationContext)">
            <summary>
            Writes the event header data junk that contains
            the types and names of all events and triggers in the scene.
            </summary>
            <param name="eventsToSave">
            The events that are required to be saved.
            </param>
            <param name="triggersToSave">
            The triggers that are required to be saved.
            </param>
            <param name="writer">
            The writer to use when writing the event data.
            </param>
            <param name="context">
            The context under which the serialization process takes place.
            </param>
        </member>
        <member name="M:Zelda.ZeldaScene.WriteEvents(System.Collections.Generic.IList{Atom.Events.Event},System.Collections.Generic.IList{Atom.Events.EventTrigger},Atom.Events.EventManager.ReaderWriter,Atom.Events.IEventSerializationContext)">
            <summary>
            Writes the Events and EventTriggers of the Scene using the given writer and context.
            </summary>
            <param name="eventsToSave">
            The events that are required to be saved.
            </param>
            <param name="triggersToSave">
            The triggers that are required to be saved.
            </param>
            <param name="writer">
            The writer to use when writing the event data.
            </param>
            <param name="context">
            The context under which the serialization process takes place.
            </param>
        </member>
        <member name="M:Zelda.ZeldaScene.Load(System.String,Zelda.Saving.WorldStatus)">
            <summary>
            Loads the scene with the given <paramref name="name"/>.
            </summary>
            <param name="name">
            The name of the scene to load.
            </param>
            <param name="worldStatus">
            Stores the status of the game world. Can be null.
            </param>
        </member>
        <member name="M:Zelda.ZeldaScene.Read(Zelda.Saving.SceneDeserializationContext)">
            <summary>
            Deserializes the data required to descripe a complete scene.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.ZeldaScene.FinalizeRead">
            <summary>
            Finalizes reading of the ZeldaScene.
            </summary>
        </member>
        <member name="M:Zelda.ZeldaScene.ReadWaypoints(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Reads the Waypoints, Path Segments and Paths of this Scene using the given IZeldaDeserializationContext.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.ZeldaScene.ReadSettings(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Reads the Settings of the Scene from the given BinaryReader.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.ZeldaScene.ReadMap(Zelda.Saving.ISceneDeserializationContext)">
            <summary>
            Reads the Map data of the Scene from the given BinaryReader.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.ZeldaScene.ReadEventsHeader(Atom.Events.EventManager.ReaderWriter,Atom.Events.IEventDeserializationContext)">
            <summary>
            Reads the entity header and returns the used EventDocument.
            </summary>
            <param name="eventReader">
            Provides a mechanism for reading the event header.
            </param>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.ZeldaScene.ReadEvents(Atom.Events.EventManager.ReaderWriter,Atom.Events.IEventDeserializationContext)">
            <summary>
            Reads the Events and EventTriggers of the Scene from the given BinaryReader.
            </summary>
            <param name="eventReader">
            The EventDocument that has been used to read the header.
            </param>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="T:Zelda.ZeldaSceneDrawer">
            <summary>
            Encapsulates the <see cref="T:Zelda.ZeldaScene"/> drawing logic.
            </summary>
        </member>
        <member name="M:Zelda.ZeldaSceneDrawer.#ctor(Atom.Xna.LightMap)">
            <summary>
            Initializes a new instance of the ZeldaSceneDrawer class.
            </summary>
            <param name="lightMap">
            The LightMap this ZeldaSceneDrawer should use during the light pass.
            </param>
        </member>
        <member name="M:Zelda.ZeldaSceneDrawer.Draw(Zelda.ZeldaScene,Zelda.ZeldaDrawContext)">
            <summary>
            Draws the specified <see cref="T:Zelda.ZeldaScene"/>.
            </summary>
            <param name="scene">
            The scene to draw.
            </param>
            <param name="drawContext">
            The current IDrawContext.
            </param>
        </member>
        <member name="M:Zelda.ZeldaSceneDrawer.SetupDraw(Zelda.ZeldaScene,Zelda.ZeldaDrawContext)">
            <summary>
            Setups this ZeldaSceneDrawer to draw the specified scene.
            </summary>
            <param name="scene">
            The scene to draw.
            </param>
            <param name="drawContext">
            The current IDrawContext.
            </param>
        </member>
        <member name="M:Zelda.ZeldaSceneDrawer.PreDraw">
            <summary>
            Calls the PreDraw method of all visible entities.
            </summary>
        </member>
        <member name="M:Zelda.ZeldaSceneDrawer.DrawUnlit">
            <summary>
            Draws the unlit scene to the current RenderTarget.
            </summary>
        </member>
        <member name="M:Zelda.ZeldaSceneDrawer.ActuallyDrawUnlit">
            <summary>
            Draws the unlit scene to the current RenderTarget.
            </summary>
        </member>
        <member name="M:Zelda.ZeldaSceneDrawer.ActuallyDrawUnlitEditMode">
            <summary>
            Draws the unlit scene to the current RenderTarget;
            prefering the drawing method of <see cref="T:Zelda.IEditModeDrawable"/>s
            over the normal drawing method.
            </summary>
            <remarks>
            This is used for visualization required for the world editor.
            </remarks>
        </member>
        <member name="M:Zelda.ZeldaSceneDrawer.DrawLights">
            <summary>
            Draws the lights in the scene and merges them
            with the previously drawn unlit scene.
            </summary>
        </member>
        <member name="M:Zelda.ZeldaSceneDrawer.DrawOverlays">
            <summary>
            Draws the overlays that are part of the scene.
            </summary>
        </member>
        <member name="F:Zelda.ZeldaSceneDrawer.scene">
            <summary>
            The scene currently drawn.
            </summary>
        </member>
        <member name="F:Zelda.ZeldaSceneDrawer.settings">
            <summary>
            The settings of the scene that is currently drawn.
            </summary>
        </member>
        <member name="F:Zelda.ZeldaSceneDrawer.drawContext">
            <summary>
            The context under which is currently drawn.
            </summary>
        </member>
        <member name="F:Zelda.ZeldaSceneDrawer.lightMap">
            <summary>
            The LightMap encapsulates the logic of changing RenderTarget
            when drawing the invidual lights and then compining them with
            the unlit scene.
            </summary>
        </member>
        <member name="T:Zelda.ZeldaScenesCache">
            <summary>
            Provides a mechanism to cache existing <see cref="T:Zelda.ZeldaScene"/>s.
            This class can't be inherited.
            </summary>
            <remarks>
            This functionality is used when changing from one ZeldaScene to another.
            Without a scene cache the player could quickly change from one scene to another
            and back to completly -reset- the scene.
            </remarks>
        </member>
        <member name="M:Zelda.ZeldaScenesCache.Add(Zelda.ZeldaScene)">
            <summary>
            Adds the given <see cref="T:Zelda.ZeldaScene"/> to this ZeldaScenesCache,
            and as such caching the given ZeldaScene.
            </summary>
            <remarks>
            Nothing is done if this ZeldaScenesCache already contains the given <see cref="T:Zelda.ZeldaScene"/>.
            </remarks>
            <param name="scene">
            The <see cref="T:Zelda.ZeldaScene"/> to add to this ZeldaScenesCache.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="scene"/> is null.
            </exception>
        </member>
        <member name="M:Zelda.ZeldaScenesCache.Remove(System.String)">
            <summary>
            Tries to remove the cached <see cref="T:Zelda.ZeldaScene"/>
            with the given <paramref name="name"/>.
            </summary>
            <param name="name">
            The name that unique identifies the cached ZeldaScene.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="name"/> is null.
            </exception>
            <returns>
            true if the ZeldaScene with the given <paramref name="name"/> has been
            removed from this ZeldaScenesCache;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.ZeldaScenesCache.Remove(Zelda.ZeldaScene)">
            <summary>
            Tries to remove the specified ZeldaScene from this ZeldaScenesCache.
            </summary>
            <param name="scene">
            The scene to remove.
            </param>
            <returns>
            true if the given ZeldaScne was removed from this ZeldaScenesCache;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.ZeldaScenesCache.Get(System.String)">
            <summary>
            Tries to get the cached <see cref="T:Zelda.ZeldaScene"/>
            with the given <paramref name="name"/>.
            </summary>
            <param name="name">
            The name that unique identifies the cached ZeldaScene.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="name"/> is null.
            </exception>
            <returns>
            The requested cached <see cref="T:Zelda.ZeldaScene"/>;
            or null if this ZeldaScenesCache doesn't contain
            a ZeldaScene that has the specified <paramref name="name"/>.
            </returns>
        </member>
        <member name="M:Zelda.ZeldaScenesCache.Contains(System.String)">
            <summary>
            Gets a value indicating whether this ZeldaScenesCache
            contains a cached <see cref="T:Zelda.ZeldaScene"/>
            with the given <paramref name="name"/>.
            </summary>
            <param name="name">
            The name that unique identifies the cached ZeldaScene.
            </param>
            <returns>
            true if this ZeldaScenesCache contains a cached <see cref="T:Zelda.ZeldaScene"/>
            that has the given <paramref name="name"/>;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.ZeldaScenesCache.Contains(Zelda.ZeldaScene)">
            <summary>
            Gets a value indicating whether this this cache contains the given scene.
            </summary>
            <param name="scene">
            The scene to query for.
            </param>
            <returns>
            true if it contains the scene; -or- otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.ZeldaScenesCache.Reload(Zelda.IZeldaServiceProvider)">
            <summary>
            Reloads all scenes in this cache.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="F:Zelda.ZeldaScenesCache.cachedScenes">
            <summary>
            The list of currently cached ZeldaScenes.
            </summary>
        </member>
        <member name="M:Zelda.Scripting.ZeldaScriptEnvironment.WarmBoot">
            <summary>
            Executes one script to 'warm boot' the system.
            This reduces the lag that sometimes occurres when executing the first script.
            </summary>
        </member>
        <member name="T:Zelda.SharedCooldownMap">
            <summary>
            The <see cref="T:Zelda.SharedCooldownMap"/> stores <see cref="T:Zelda.Cooldown"/>s that are shared
            over multiple objects.
            This class can't be inherited.
            </summary>
            <remarks>
            The Cooldowns are sorted by the cooldown's unique ID.
            </remarks>
        </member>
        <member name="P:Zelda.SharedCooldownMap.Owner">
            <summary>
            Gets the <see cref="T:Zelda.Status.ExtendedStatable"/> that owns this SharedCooldownMap.
            </summary>
        </member>
        <member name="M:Zelda.SharedCooldownMap.#ctor(Zelda.Status.ExtendedStatable)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.SharedCooldownMap"/> class.
            </summary>
            <param name="owner">
            The <see cref="T:Zelda.Status.ExtendedStatable"/> that owns the new SharedCooldownMap.
            </param>
        </member>
        <member name="F:Zelda.SharedCooldownMap.owner">
            <summary>
            The <see cref="T:Zelda.Status.ExtendedStatable"/> that owns this SharedCooldownMap.
            </summary>
        </member>
        <member name="T:Zelda.Skills.ISkillProvider">
            <summary>
            Provides a mechanism that allows to receive a <see cref="P:Zelda.Skills.ISkillProvider.Skill"/> instance.
            </summary>
        </member>
        <member name="P:Zelda.Skills.ISkillProvider.Skill">
            <summary>
            Gets the <see cref="P:Zelda.Skills.ISkillProvider.Skill"/> this ISkillProvider provides.
            </summary>
        </member>
        <member name="T:Zelda.Skills.ISkillProvider`1">
            <summary>
            Provides a mechanism that allows to receive a <see cref="P:Zelda.Skills.ISkillProvider`1.Skill"/> instance.
            </summary>
            <typeparam name="TSkill">
            The type of the Skill provided by the ISkillProvider.
            </typeparam>
        </member>
        <member name="P:Zelda.Skills.ISkillProvider`1.Skill">
            <summary>
            Gets the <see cref="P:Zelda.Skills.ISkillProvider`1.Skill"/> this ISkillProvider provides.
            </summary>
        </member>
        <member name="T:Zelda.Skills.Magic.FirevortexSkill">
            <summary>
            Casts a vortex of fire that gains 5/7/10% in size and 
            strength every 0.5 seconds.
            Sucks nearby enemies into it.
            </summary>
        </member>
        <member name="M:Zelda.Skills.Magic.FirevortexSkill.#ctor(Zelda.Talents.Magic.FirevortexTalent,Zelda.Talents.Magic.RazorWindsTalent,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Skills.Magic.FirevortexSkill"/> class.
            </summary>
            <param name="talent">
            The talent that 'learns' the player the new FirevortexSkill.
            </param>
            <param name="razorWindsTalent">
            The RazorWindsTalent that increases the piercing chance of the new FirevortexSkill.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Skills.Magic.FirevortexSkill.SetupSpell(Zelda.IZeldaServiceProvider)">
            <summary>
            Setups the Firevortex spell.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Skills.Magic.FirevortexSkill.RefreshDataFromTalents">
            <summary> 
            Refreshes the data from talents that modify this <see cref="T:Zelda.Skills.Skill"/>'s power. 
            </summary>
        </member>
        <member name="M:Zelda.Skills.Magic.FirevortexSkill.RefreshCooldown">
            <summary>
            Refreshes the cooldown of this FirevortexSkill.
            </summary>
        </member>
        <member name="M:Zelda.Skills.Magic.FirevortexSkill.RefreshPiercingMode">
            <summary>
            Refreshes the piercing settings of the Firevortex spell.
            </summary>
        </member>
        <member name="F:Zelda.Skills.Magic.FirevortexSkill.razorWindsTalent">
            <summary>
            Identifies the RazorWindsTalent that modifies the power of this FirevortexSkill.
            </summary>
        </member>
        <member name="F:Zelda.Skills.Magic.FirevortexSkill.method">
            <summary>
            The FirevortexDamageMethod that calculates how much damage an arrow launched by the FirevortexSkill does.
            </summary>
        </member>
        <member name="T:Zelda.Skills.Magic.FirevortexSkill.FirevortexUpdateLogic">
            <summary>
            Contains the additional update logic and data of a Firevortex projectile.
            </summary>
        </member>
        <member name="P:Zelda.Skills.Magic.FirevortexSkill.FirevortexUpdateLogic.DamageModifier">
            <summary>
            Gets the damage modifier value of the Firevortex.
            </summary>
        </member>
        <member name="M:Zelda.Skills.Magic.FirevortexSkill.FirevortexUpdateLogic.#ctor(Zelda.Talents.Magic.FirevortexTalent)">
            <summary>
            Initializes a new instance of the FirevortexUpdateLogic class.
            </summary>
            <param name="firevortexTalent">
            Identifies the FirevortexTalent that controls the strength of the vortex.
            </param>
        </member>
        <member name="M:Zelda.Skills.Magic.FirevortexSkill.FirevortexUpdateLogic.Update(Zelda.Entities.Projectiles.Projectile,Zelda.ZeldaUpdateContext)">
            <summary>
            Updates the given Firevortex.
            </summary>
            <param name="entity">
            The entity to update.
            </param>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Skills.Magic.FirevortexSkill.FirevortexUpdateLogic.PowerUpVortex(Zelda.Entities.Projectiles.Projectile)">
            <summary>
            Powers-up the given Firevortex.
            </summary>
            <param name="vortex">
            The vortex to modify.
            </param>
        </member>
        <member name="M:Zelda.Skills.Magic.FirevortexSkill.FirevortexUpdateLogic.IncreaseSize(Zelda.Entities.Projectiles.Projectile)">
            <summary>
            Increases the size of the given Firevortex.
            </summary>
            <param name="vortex">
            The vortex to modify.
            </param>
        </member>
        <member name="M:Zelda.Skills.Magic.FirevortexSkill.FirevortexUpdateLogic.IncreasePower">
            <summary>
            Increases the power of the Firevortex.
            </summary>
        </member>
        <member name="M:Zelda.Skills.Magic.FirevortexSkill.FirevortexUpdateLogic.SuckNearbyEnemiesIntoVortex(Zelda.Entities.Projectiles.Projectile,Zelda.ZeldaUpdateContext)">
            <summary>
            Sucks nearby enemies into the given FireVortex.
            </summary>
            <param name="vortex">
            The vortex that is supposed to suck enemies into it.
            </param>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Skills.Magic.FirevortexSkill.FirevortexUpdateLogic.Clone">
            <summary>
            Returns an instance of this FirevortexUpdateLogic.
            </summary>
            <returns>A new FirevortexUpdateLogic instance.</returns>
        </member>
        <member name="F:Zelda.Skills.Magic.FirevortexSkill.FirevortexUpdateLogic.damageModifier">
            <summary>
            The damage modifier of the FireVortex;
            </summary>
        </member>
        <member name="F:Zelda.Skills.Magic.FirevortexSkill.FirevortexUpdateLogic.timeLeft">
            <summary>
            The time left (in seconds) before a Firevortex increases in strength.
            </summary>
        </member>
        <member name="F:Zelda.Skills.Magic.FirevortexSkill.FirevortexUpdateLogic.firevortexTalent">
            <summary>
            Identifies the FirevortexTalent that controls the strength of the vortex.
            </summary>
        </member>
        <member name="T:Zelda.Skills.Magic.FirevortexSkill.FirevortexDamageMethod">
            <summary>
            Calculates the damage done by Firevortex.
            </summary>
        </member>
        <member name="F:Zelda.Skills.Magic.FirevortexSkill.FirevortexDamageMethod.DamageTypeInfo">
            <summary>
            Stores type information about the damage inflicted by the FirevortexDamageMethod.
            </summary>
        </member>
        <member name="M:Zelda.Skills.Magic.FirevortexSkill.FirevortexDamageMethod.GetDamageDone(Zelda.Status.Statable,Zelda.Status.Statable)">
            <summary>
            Calculates the damage done by the <paramref name="user"/> on the <paramref name="target"/>
            using this <see cref="T:Zelda.Attacks.AttackDamageMethod"/>.
            </summary>
            <param name="user">The user of the attack.</param>
            <param name="target">The target of the attack.</param>
            <returns>The calculated result.</returns>
        </member>
        <member name="M:Zelda.Skills.Magic.FirevortexSkill.FirevortexDamageMethod.GetDamageModifier">
            <summary>
            Gets the damage multiplier of the Firevortex.
            </summary>
            <returns>
            The current damage modification value of the FireVortex.
            </returns>
        </member>
        <member name="T:Zelda.Skills.Magic.FirewallSkill">
            <summary>
            Each Firewall consists of 3 individual pillars that deal ..
            
            </summary>
        </member>
        <member name="M:Zelda.Skills.Magic.FirewallSkill.#ctor(Zelda.Talents.Magic.FirewallTalent,Zelda.Talents.Magic.PiercingFireTalent,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Skills.Magic.FirewallSkill"/> class.
            </summary>
            <param name="talent">
            The talent that 'learns' the player the new FirewallSkill.
            </param>
            <param name="piercingFireTalent">
            Identifies the PiercingFireTalent that improves the cance for Firewall to crit.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Skills.Magic.FirewallSkill.RefreshDataFromTalents">
            <summary> 
            Refreshes the data from talents that modify this <see cref="T:Zelda.Skills.Skill"/>'s power. 
            </summary>
        </member>
        <member name="M:Zelda.Skills.Magic.FirewallSkill.RefreshCooldown">
            <summary>
            Refreshes the cooldown of this FirewallSkill.
            </summary>
        </member>
        <member name="F:Zelda.Skills.Magic.FirewallSkill.piercingFireTalent">
            <summary>
            Identifies the PiercingFireTalent that increases the chance to crit with this FirewallSkill.
            </summary>
        </member>
        <member name="F:Zelda.Skills.Magic.FirewallSkill.method">
            <summary>
            The FireSpellDamageMethod that calculates how much damage an arrow launched by the FirewallSkill does.
            </summary>
        </member>
        <member name="T:Zelda.Skills.Magic.FirewhirlSkill">
            <summary>
            Firewhirl deals 103/106/109/112/115% to 105/110/115/120/125% fire damage.
            2.4/2.3/2.2/2.1/2.0 seconds cast time.
            5 seconds cooldown.
            </summary>
            <remarks>
            Firewhirl can be enhanced using the <see cref="T:Zelda.Talents.Magic.CorrosiveFireTalent"/>.
            </remarks>
        </member>
        <member name="M:Zelda.Skills.Magic.FirewhirlSkill.#ctor(Zelda.Talents.Magic.FirewhirlTalent,Zelda.Talents.Magic.ImpactTheoryTalent,Zelda.Talents.Magic.CorrosiveFireTalent,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Skills.Magic.FirewhirlSkill"/> class.
            </summary>
            <param name="talent">
            The talent that 'learns' the player the new FirewhirlSkill.
            </param>
            <param name="impactTheoryTalent">
            The talent that gives Firewhirl a chance to split into more Firewhirls upon impact.
            </param>
            <param name="corrosiveFireTalent">
            The talent that adds a damage-over-time effect to Firewhirl.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Skills.Magic.FirewhirlSkill.SetupSpell(Zelda.IZeldaServiceProvider)">
            <summary>
            Setups the Firewhirl spell.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Skills.Magic.FirewhirlSkill.RefreshCooldown">
            <summary>
            Refreshes the cooldown of this FirewhirlSkill.
            </summary>
        </member>
        <member name="M:Zelda.Skills.Magic.FirewhirlSkill.RefreshDataFromTalents">
            <summary> 
            Refreshes the data from talents that modify this <see cref="T:Zelda.Skills.Skill"/>'s power. 
            </summary>
        </member>
        <member name="F:Zelda.Skills.Magic.FirewhirlSkill.method">
            <summary>
            The FirewhirlDamageMethod that calculates how much damage an arrow launched by the FirewhirlSkill does.
            </summary>
        </member>
        <member name="F:Zelda.Skills.Magic.FirewhirlSkill.hitEffect">
            <summary>
            The FirewhirlHitEffect that is applied when Firewhirl hits a target.
            </summary>
        </member>
        <member name="T:Zelda.Skills.Magic.FirewhirlSkill.ProjectileData">
            <summary>
            Represents the data that is additonally attached
            to the Projectiles of the Firewhirl spell.
            </summary>
        </member>
        <member name="P:Zelda.Skills.Magic.FirewhirlSkill.ProjectileData.NumberOfSplits">
            <summary>
            Gets or sets the number of times the Projectile has
            been split so far.
            </summary>
        </member>
        <member name="T:Zelda.Skills.Magic.FirewhirlSkill.FirewhirlHitEffect">
            <summary>
            Defines the IAttackHitEffect that gets applies when a
            Firewhirl has hit a target.
            </summary>
        </member>
        <member name="M:Zelda.Skills.Magic.FirewhirlSkill.FirewhirlHitEffect.#ctor(Zelda.Casting.Spells.ProjectilePlayerSpell,Zelda.Talents.Magic.ImpactTheoryTalent,Zelda.Talents.Magic.CorrosiveFireTalent,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the FirewhirlHitEffect class.
            </summary>
            <param name="firewhirlSpell">
            The Firewhirl spell object.
            </param>
            <param name="impactTheoryTalent">
            Identifies the ImpactTheoryTalent that gives Firewhirl a chance to split into more Firewhirls upon impact.
            </param>
            <param name="corrosiveFireTalent">
            Identifies the CorrosiveFireTalent that modifies the strength of the corrosive fire damage-over-time effect.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Skills.Magic.FirewhirlSkill.FirewhirlHitEffect.RefreshDataFromTalents">
            <summary>
            Refreshes the strength of this FirewhirlHitEffect.
            </summary>
        </member>
        <member name="M:Zelda.Skills.Magic.FirewhirlSkill.FirewhirlHitEffect.OnHit(Zelda.Status.Statable,Zelda.Status.Statable)">
            <summary>
            Called when the FirewhirlHitEffect is to be applied.
            </summary>
            <param name="user">
            The user of the attack.
            </param>
            <param name="target">
            The target of the attack.
            </param>
        </member>
        <member name="F:Zelda.Skills.Magic.FirewhirlSkill.FirewhirlHitEffect.corrosiveFireHitEffect">
            <summary>
            The effect that applies the Corrosive Fire effect.
            </summary>
        </member>
        <member name="F:Zelda.Skills.Magic.FirewhirlSkill.FirewhirlHitEffect.impactTheoryProjectileDestroyedEffect">
            <summary>
            The effect that implements the Impact Theory effect.
            </summary>
        </member>
        <member name="T:Zelda.Skills.Magic.FirewhirlSkill.FirewhirlHitEffect.ImpactTheoryProjectileDestroyedEffect">
            <summary>
            Defines the effect that gets invoked when a Firewhirl projectile has been destroyed.
            </summary>
            <seealso cref="T:Zelda.Talents.Magic.ImpactTheoryTalent"/>
        </member>
        <member name="M:Zelda.Skills.Magic.FirewhirlSkill.FirewhirlHitEffect.ImpactTheoryProjectileDestroyedEffect.#ctor(Zelda.Casting.Spells.ProjectilePlayerSpell,Zelda.Talents.Magic.ImpactTheoryTalent,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the ImpactTheoryProjectileDestroyedEffect class.
            </summary>
            <param name="fireWhirlSpell">
            The Firewhirl spell object.
            </param>
            <param name="impactTheoryTalent">
            Identifies the ImpactTheoryTalent that gives Firewhirl a chance to 
            split into more Firewhirls upon impact.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Skills.Magic.FirewhirlSkill.FirewhirlHitEffect.ImpactTheoryProjectileDestroyedEffect.HookEvents">
            <summary>
            Hooks up the EventHandlers for this ImpactTheoryProjectileDestroyedEffect.
            </summary>
        </member>
        <member name="M:Zelda.Skills.Magic.FirewhirlSkill.FirewhirlHitEffect.ImpactTheoryProjectileDestroyedEffect.RefreshDataFromTalents">
            <summary>
            Refreshes the strength of this ImpactTheoryProjectileDestroyedEffect.
            </summary>
        </member>
        <member name="M:Zelda.Skills.Magic.FirewhirlSkill.FirewhirlHitEffect.ImpactTheoryProjectileDestroyedEffect.OnFirewhirlDestroyed(System.Object,Zelda.Entities.Projectiles.Projectile)">
            <summary>
            Gets called when a Firewhirl projectile gets destroyed.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
            <param name="firewhirl">
            The firewhirl projectile that has been destroyed.
            </param>
        </member>
        <member name="M:Zelda.Skills.Magic.FirewhirlSkill.FirewhirlHitEffect.ImpactTheoryProjectileDestroyedEffect.ShouldSplitIntoMoreFirewhirls(Zelda.Entities.Projectiles.Projectile)">
            <summary>
            Gets a value indicating whether a destroyed Firewhirl should
            split into more Firewhirls.
            </summary>
            <param name="projectile">
            The firewhirl Projectile that might split into multiple Firewhirls.
            </param>
            <returns>
            True if the splitting logic should be executed;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Skills.Magic.FirewhirlSkill.FirewhirlHitEffect.ImpactTheoryProjectileDestroyedEffect.GetNumberOfSplits(Zelda.Entities.Projectiles.Projectile)">
            <summary>
            Gets the number of times the given Firewhirl projectile has been split.
            </summary>
            <param name="firewhirl">
            The Firewhirl projectile.
            </param>
            <returns>
            The split count.
            </returns>
        </member>
        <member name="M:Zelda.Skills.Magic.FirewhirlSkill.FirewhirlHitEffect.ImpactTheoryProjectileDestroyedEffect.SetNumberOfSplits(System.Int32,Zelda.Entities.Projectiles.Projectile)">
            <summary>
            Sets the number of times the given Firewhirl projectile has been split.
            </summary>
            <param name="splitCount">
            The number of splits to set.
            </param>
            <param name="firewhirl">
            The Firewhirl projectile.
            </param>
        </member>
        <member name="M:Zelda.Skills.Magic.FirewhirlSkill.FirewhirlHitEffect.ImpactTheoryProjectileDestroyedEffect.Split(Zelda.Entities.Projectiles.Projectile)">
            <summary>
            Splits the given firewhirl into more firewhirls;
            which in-turn can split too.
            </summary>
            <param name="parentFirewhirl">
            The firewhirl projectile that should be split.
            </param>
        </member>
        <member name="M:Zelda.Skills.Magic.FirewhirlSkill.FirewhirlHitEffect.ImpactTheoryProjectileDestroyedEffect.GetProjectileSpawnPosition(Atom.Math.Vector2,Atom.Math.Vector2)">
            <summary>
            Gets the projectile spawning position for an offspring Firewhirl.
            </summary>
            <param name="position">
            The position of the parent Firewhirl.
            </param>
            <param name="direction">
            The direction the projectile is heading.
            </param>
            <returns>
            The spawning position.
            </returns>
        </member>
        <member name="M:Zelda.Skills.Magic.FirewhirlSkill.FirewhirlHitEffect.ImpactTheoryProjectileDestroyedEffect.GetOffset(Atom.Math.Vector2)">
            <summary>
            Gets the total offset applied to the parent position to get the offspring spawning
            position.
            </summary>
            <param name="direction">
            The direction the offspring is heading.
            </param>
            <returns>
            The offset to apply.
            </returns>
        </member>
        <member name="M:Zelda.Skills.Magic.FirewhirlSkill.FirewhirlHitEffect.ImpactTheoryProjectileDestroyedEffect.CanSpawnProjectileAt(Atom.Math.Vector2,System.Int32)">
            <summary>
            Gets a value indicating whether a Firewhirl offspring can spawn at the given position.
            </summary>
            <param name="position">
            The position´at which the projectile is supposed to spawn.
            </param>
            <param name="floorNumber">
            The number of the floor to spawn at.
            </param>
            <returns>
            Returns true if the offspring can spawn;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Skills.Magic.FirewhirlSkill.FirewhirlHitEffect.ImpactTheoryProjectileDestroyedEffect.GetActionLayer(System.Int32)">
            <summary>
            Gets the tile map action layer associated with the given floorNumber.
            </summary>
            <param name="floorNumber">
            The number of the floor.
            </param>
            <returns>
            The requested action layer.
            </returns>
        </member>
        <member name="M:Zelda.Skills.Magic.FirewhirlSkill.FirewhirlHitEffect.ImpactTheoryProjectileDestroyedEffect.FireProjectile(Atom.Math.Vector2,Atom.Math.Vector2,System.Int32,System.Int32)">
            <summary>
            Fires an offspring Firewhirl projectile.
            </summary>
            <param name="position">
            The position the offspring should be spawned at.
            </param>
            <param name="direction">
            The direction the offspring should be heading.
            </param>
            <param name="floorNumber">
            The number of the floor the offspring should be spawned on.
            </param>
            <param name="numberOfContinousSplits">
            The number of times the projectile to fire has been split by now.
            </param>
        </member>
        <member name="F:Zelda.Skills.Magic.FirewhirlSkill.FirewhirlHitEffect.ImpactTheoryProjectileDestroyedEffect.chanceToProc">
            <summary>
            The (cached) chance for a Firewhirl to split into more Firewhirls.
            </summary>
        </member>
        <member name="F:Zelda.Skills.Magic.FirewhirlSkill.FirewhirlHitEffect.ImpactTheoryProjectileDestroyedEffect.fireWhirlSpell">
            <summary>
            Identifies the Firewhirl spell object.
            </summary>
        </member>
        <member name="F:Zelda.Skills.Magic.FirewhirlSkill.FirewhirlHitEffect.ImpactTheoryProjectileDestroyedEffect.impactTheoryTalent">
            <summary>
            Identifies the ImpactTheoryTalent that gives Firewhirl a chance to
            split into more Firewhirls upon impact.
            </summary>
        </member>
        <member name="F:Zelda.Skills.Magic.FirewhirlSkill.FirewhirlHitEffect.ImpactTheoryProjectileDestroyedEffect.rand">
            <summary>
            A random number generator.
            </summary>
        </member>
        <member name="T:Zelda.Skills.Magic.FirewhirlSkill.FirewhirlHitEffect.CorrosiveFireHitEffect">
            <summary>
            Defines the IAttackHitEffect that applies a Damage Over Time effect
            when Firewhirl hits an target.
            </summary>
            <seealso cref="T:Zelda.Talents.Magic.CorrosiveFireTalent"/>
        </member>
        <member name="M:Zelda.Skills.Magic.FirewhirlSkill.FirewhirlHitEffect.CorrosiveFireHitEffect.#ctor(Zelda.Talents.Magic.CorrosiveFireTalent,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the CorrosiveFireHitEffect class.
            </summary>
            <param name="corrosiveFireTalent">
            Identifies the CorrosiveFireTalent that modifies the strength of 
            the corrosive fire damage-over-time effect.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Skills.Magic.FirewhirlSkill.FirewhirlHitEffect.CorrosiveFireHitEffect.RefreshDataFromTalents">
            <summary>
            Refreshes the strength of this FirewhirlHitEffect.
            </summary>
        </member>
        <member name="M:Zelda.Skills.Magic.FirewhirlSkill.FirewhirlHitEffect.CorrosiveFireHitEffect.OnHit(Zelda.Status.Statable,Zelda.Status.Statable)">
            <summary>
            Called when the FirewhirlHitEffect is to be applied.
            </summary>
            <param name="user">
            The user of the attack.
            </param>
            <param name="target">
            The target of the attack.
            </param>
        </member>
        <member name="M:Zelda.Skills.Magic.FirewhirlSkill.FirewhirlHitEffect.CorrosiveFireHitEffect.ShouldApplyCorrosiveFire">
            <summary>
            Gets a value indicating whether the Corrosive Fire damage-over-time
            effect should be applies.
            </summary>
            <returns>
            true if it should be applied;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Skills.Magic.FirewhirlSkill.FirewhirlHitEffect.CorrosiveFireHitEffect.ApplyCorrosiveFire(Zelda.Status.Statable,Zelda.Status.Statable)">
            <summary>
            Applies the corrosive fire damage-over-time effect to the given target.
            </summary>
            <param name="user">
            The user of the corrosive fire.
            </param>
            <param name="target">
            The target of the corrosive fire.
            </param>
        </member>
        <member name="M:Zelda.Skills.Magic.FirewhirlSkill.FirewhirlHitEffect.CorrosiveFireHitEffect.GetCorrosiveFireAura">
            <summary>
            Gets a DamageOverTimeAura that can be used for the Corrosive Fire effect.
            </summary>
            <returns>
            An DamageOverTimeAura that is ready to be setup and applied.
            </returns>
        </member>
        <member name="M:Zelda.Skills.Magic.FirewhirlSkill.FirewhirlHitEffect.CorrosiveFireHitEffect.CreatePooledAura">
            <summary>
            Creates a new PooledDamageOverTimeAura; pooled in an AuraPool{DamageOverTimeAura}.
            </summary>
            <returns>
            A newly created PooledDamageOverTimeAura.
            </returns>
        </member>
        <member name="F:Zelda.Skills.Magic.FirewhirlSkill.FirewhirlHitEffect.CorrosiveFireHitEffect.corrosiveFireTalent">
            <summary>
            Identifies the CorrosiveFireTalent that modifies the strength of
            the corrosive fire damage-over-time effect.
            </summary>
        </member>
        <member name="F:Zelda.Skills.Magic.FirewhirlSkill.FirewhirlHitEffect.CorrosiveFireHitEffect.corrosiveFireAuraPool">
            <summary>
            The AuraPool that stores the DamageOverTimeAuras used for the corrosive fire damage-over-time effect.
            </summary>
        </member>
        <member name="F:Zelda.Skills.Magic.FirewhirlSkill.FirewhirlHitEffect.CorrosiveFireHitEffect.corrosiveFireMethod">
            <summary>
            The DamageMethod used to calculate the damage done by the corrosive fire damage-over-time effect.
            </summary>
        </member>
        <member name="T:Zelda.Skills.Magic.FlamesOfPhlegethonSkill">
            <summary>
            Summons {0} wave(s) of fire directly from the underworld.
            Targets that are hit take {0}% to {1}% fire damage.
            {1} secs cooldown. {2} secs cast time.
            </summary>
        </member>
        <member name="M:Zelda.Skills.Magic.FlamesOfPhlegethonSkill.#ctor(Zelda.Talents.Magic.FlamesOfPhlegethonTalent,Zelda.Talents.Magic.PiercingFireTalent,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Skills.Magic.FlamesOfPhlegethonSkill"/> class.
            </summary>
            <param name="talent">
            The talent that 'learns' the player the new FlamesOfPhlegethonSkill.
            </param>
            <param name="piercingFireTalent">
            Identifies the PiercingFireTalent that improves the cance for FlamesOfPhlegethon to crit.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Skills.Magic.FlamesOfPhlegethonSkill.RefreshDataFromTalents">
            <summary> 
            Refreshes the data from talents that modify this <see cref="T:Zelda.Skills.Skill"/>'s power. 
            </summary>
        </member>
        <member name="M:Zelda.Skills.Magic.FlamesOfPhlegethonSkill.RefreshCooldown">
            <summary>
            Refreshes the cooldown of this FlamesOfPhlegethonSkill.
            </summary>
        </member>
        <member name="F:Zelda.Skills.Magic.FlamesOfPhlegethonSkill.piercingFireTalent">
            <summary>
            Identifies the PiercingFireTalent that increases the chance to crit with this FlamesOfPhlegethonSkill.
            </summary>
        </member>
        <member name="F:Zelda.Skills.Magic.FlamesOfPhlegethonSkill.method">
            <summary>
            The AttackDamageMethod that calculates how much damage an arrow launched by the FlamesOfPhlegethonSkill does.
            </summary>
        </member>
        <member name="T:Zelda.Skills.Magic.PyromaniaSkill">
            <summary>
            Reduces the cooldown of all offensive Fire spells
            by 10/20/30/40/50% for 15 seconds.
            </summary>
        </member>
        <member name="P:Zelda.Skills.Magic.PyromaniaSkill.IsOnlyLimitedByCooldown">
            <summary>
            Gets a value indicating whether this PyromaniaSkill is only limited by its own cooldown
            and not such things as location/mana cost/etc.
            </summary>
        </member>
        <member name="M:Zelda.Skills.Magic.PyromaniaSkill.#ctor(Zelda.Talents.Magic.PyromaniaTalent)">
            <summary>
            Initializes a new instance of the PyromaniaSkill class.
            </summary>
            <param name="talent">
            The PyromaniaTalent that modifies the strength of the new PyromaniaSkill.
            </param>
        </member>
        <member name="M:Zelda.Skills.Magic.PyromaniaSkill.CreateAura">
            <summary>
            Creates the aura that gets enabled when this
            PyromaniaSkill is used.
            </summary>
            <returns>
            The newly created Aura.
            </returns>
        </member>
        <member name="M:Zelda.Skills.Magic.PyromaniaSkill.CreateEffects">
            <summary>
            Creates the StatusEffects that get enabled when this
            PyromaniaSkill is used.
            </summary>
            <returns>
            The newly created StatusEffects.
            </returns>
        </member>
        <member name="M:Zelda.Skills.Magic.PyromaniaSkill.RefreshAuraEffect">
            <summary>
            Refreshes the strength of the individual buff effect of this PlayerBuffSkill{TTalent}.
            </summary>
        </member>
        <member name="T:Zelda.Skills.Melee.BashSkill">
            <summary> 
            Bash is a powerful instant melee attack to provides additional damage
            and if specced crit chance compared to a normal attack.
            </summary>
        </member>
        <member name="M:Zelda.Skills.Melee.BashSkill.#ctor(Zelda.Talents.Melee.BashTalent,Zelda.Talents.Melee.ImprovedBashTalent,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Skills.Melee.BashSkill"/> class.
            </summary>
            <param name="talent">
            The talent that 'learns' the player the Skill.
            </param>
            <param name="improvedBashTalent">
            The talent that 'learns' the player an improved to the Skill.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Skills.Melee.BashSkill.RefreshDataFromTalents">
            <summary>
            Refreshes the power of this BashSkill based on the talents of the player.
            </summary>
        </member>
        <member name="F:Zelda.Skills.Melee.BashSkill.improvedBashTalent">
            <summary>
            Identifies the supporting talent related to this BashSkill.
            </summary>
        </member>
        <member name="F:Zelda.Skills.Melee.BashSkill.method">
            <summary>
            The damage method that calculates how much damage this BashSkill does.
            </summary>
        </member>
        <member name="T:Zelda.Skills.Melee.BattleShoutSkill">
            <summary> 
            Battle Shout increases the Strength of the player
            for 60 seconds. (cooldown 120 seconds)
            </summary>
        </member>
        <member name="P:Zelda.Skills.Melee.BattleShoutSkill.IsOnlyLimitedByCooldown">
            <summary>
            Gets a value indicating whether this BattleShoutSkill is only limited by its own cooldown
            and not such things as location/mana cost/etc.
            </summary>
        </member>
        <member name="M:Zelda.Skills.Melee.BattleShoutSkill.#ctor(Zelda.Talents.Melee.BattleShoutTalent)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Skills.Melee.BattleShoutSkill"/> class.
            </summary>
            <param name="talent">
            The talent that 'learns' the player the new BattleShoutSkill.
            </param>
        </member>
        <member name="M:Zelda.Skills.Melee.BattleShoutSkill.RefreshAuraEffect">
            <summary>
            Refreshes the strength of the individual buff effect of this PlayerBuffSkill{TTalent}.
            </summary>
        </member>
        <member name="F:Zelda.Skills.Melee.BattleShoutSkill.effectFixed">
            <summary>
            The effect that is applied by this BattleShoutSkill.
            </summary>
        </member>
        <member name="F:Zelda.Skills.Melee.BattleShoutSkill.effectMulti">
            <summary>
            The effect that is applied by this BattleShoutSkill.
            </summary>
        </member>
        <member name="T:Zelda.Skills.Melee.BladestormSkill">
            <summary>
            The player goes nuts after using Whirlwind, 
            turning for another X times, dealing (MeleeDamage x Y%) 
            non-parry nor dodgeable damage.
            Compared to Whirlwind movement is allowed with a speed penality of Z%.
            </summary>
        </member>
        <member name="P:Zelda.Skills.Melee.BladestormSkill.IsInactive">
            <summary>
            Gets a value indicating whether this <see cref="T:Zelda.Skills.Skill"/> is currently inactive;
            and as such unuseable.
            </summary>
        </member>
        <member name="M:Zelda.Skills.Melee.BladestormSkill.#ctor(Zelda.Talents.Melee.BladestormTalent,Zelda.Skills.Melee.WhirlwindSkill,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Skills.Melee.BladestormSkill"/> class.
            </summary>
            <param name="talent">
            The BladestormTalent that 'learns' the player the new BladestormSkill.
            </param>
            <param name="whirlwindSkill">
            The WhirlwindSkill that must be on cooldown for Bladestorm to be useable.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Skills.Melee.BladestormSkill.RefreshDataFromTalents">
            <summary>
            Refreshes the power of this BladestormSkill based on the Talents of the player.
            </summary>
        </member>
        <member name="M:Zelda.Skills.Melee.BladestormSkill.OnFired">
            <summary>
            Called when this BladestormSkill has been succesfully fired
            </summary>
        </member>
        <member name="M:Zelda.Skills.Melee.BladestormSkill.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this BladestormSkill.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Skills.Melee.BladestormSkill.IsInTimeframeAfterWhirlwind">
            <summary>
            Gets a value indicating whether the player just used Whirlwind,
            and is sitll allowed to use Bladestorm.
            </summary>
            <seealso cref="F:Zelda.Talents.Melee.BladestormTalent.TimeUseableAfterWhirlwind"/>
            <returns>
            Whether Bladestorm is useable regarding the current timeframe related to Whirlwind.
            </returns>
        </member>
        <member name="F:Zelda.Skills.Melee.BladestormSkill.whirlwindSkill">
            <summary>
            Identifies the WhirlwindSkill, that must be on cooldown for Bladestorm to be useable.
            </summary>
        </member>
        <member name="F:Zelda.Skills.Melee.BladestormSkill.method">
            <summary>
            The damage method that is used to calculate the damage of this BladestormSkill.
            </summary>
        </member>
        <member name="F:Zelda.Skills.Melee.BladestormSkill.speedEffect">
            <summary>
            The movement speed penality applied when the Player uses the Bladestorm skill.
            </summary>
        </member>
        <member name="F:Zelda.Skills.Melee.BladestormSkill.aura">
            <summary>
            The effect aura that gets applied when the Player uses the Bladestorm skill.
            </summary>
        </member>
        <member name="T:Zelda.Skills.Melee.CounterAttackSkill">
            <summary>
            The Counter Attack skill gets useable after killing
            </summary>
        </member>
        <member name="P:Zelda.Skills.Melee.CounterAttackSkill.IsInactive">
            <summary>
            Gets a value indicating whether this <see cref="T:Zelda.Skills.Skill"/> is currently inactive;
            and as such unuseable.
            </summary>
        </member>
        <member name="M:Zelda.Skills.Melee.CounterAttackSkill.#ctor(Zelda.Talents.Melee.CounterAttackTalent,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Skills.Melee.CounterAttackSkill"/> class.
            </summary>
            <param name="talent">
            The CounterAttackTalent that 'learns' the player the new CounterAttackSkill.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Skills.Melee.CounterAttackSkill.Initialize">
            <summary>
            Initializes this CounterAttackSkill.
            </summary>
        </member>
        <member name="M:Zelda.Skills.Melee.CounterAttackSkill.Uninitialize">
            <summary>
            Uninitializes this CounterAttackSkill.
            </summary>
        </member>
        <member name="M:Zelda.Skills.Melee.CounterAttackSkill.RefreshDataFromTalents">
            <summary>
            Refreshes the power of this CounterAttackSkill based on the talents of the player.
            </summary>
        </member>
        <member name="M:Zelda.Skills.Melee.CounterAttackSkill.OnFired">
            <summary>
            Called when this CounterAttackSkill has been succesfully fired.
            </summary>
        </member>
        <member name="M:Zelda.Skills.Melee.CounterAttackSkill.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this CounterAttackSkill.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Skills.Melee.CounterAttackSkill.OnPlayerAttacked(System.Object,Zelda.Entities.Components.AttackEventArgs)">
            <summary>
            Called when the player was attacked by an enemy.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
            <param name="e">
            The <see cref="T:Zelda.Entities.Components.AttackEventArgs"/> that contain the event data.
            </param>
        </member>
        <member name="F:Zelda.Skills.Melee.CounterAttackSkill.useableTimeCounter">
            <summary>
            Stores the time the Counter Attack ability is useable.
            </summary>
        </member>
        <member name="F:Zelda.Skills.Melee.CounterAttackSkill.method">
            <summary>
            The method that calcualtes the damage the CounterAttack does.
            </summary>
        </member>
        <member name="T:Zelda.Skills.Melee.FrustrationSkill">
            <summary>
            Defines the Frustration skill which turns the frustration of the player into anger;
            <para>
            increasing chance to get a Double Attack by 15/30/45%.
            In his anger the player has a 15% chance to hit himself.
            1 minute duration, 5 minutes cooldown.
            </para>
            </summary>
        </member>
        <member name="P:Zelda.Skills.Melee.FrustrationSkill.Aura">
            <summary>
            Gets or sets the FrustrationAura this FrustrationSkill applies.
            </summary>
        </member>
        <member name="M:Zelda.Skills.Melee.FrustrationSkill.#ctor(Zelda.Talents.Melee.FrustrationTalent,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Skills.Melee.FrustrationSkill"/> class.
            </summary>
            <param name="talent">
            The talent that 'learns' the player the new FrustrationSkill.
            </param>
            <param name="serviceProvider">
            Provides access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Skills.Melee.FrustrationSkill.RefreshDataFromTalents">
            <summary>
            Refreshes the strength of this FrustrationSkill based on the talents the player has choosen.
            </summary>
        </member>
        <member name="T:Zelda.Skills.Melee.FrustrationSkill.FrustrationAura">
            <summary>
            Defines the TimedAura that enables the effect of the FrustrationSkill.
            </summary>
        </member>
        <member name="M:Zelda.Skills.Melee.FrustrationSkill.FrustrationAura.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the FrustrationAura class.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Skills.Melee.FrustrationSkill.FrustrationAura.RefreshData(Zelda.Talents.Melee.FrustrationTalent)">
            <summary>
            Refreshes the strength of the FrustrationAura.
            </summary>
            <param name="talent">
            The related FrustrationTalent.
            </param>
        </member>
        <member name="M:Zelda.Skills.Melee.FrustrationSkill.FrustrationAura.OnDefaultMeleeHit(Zelda.Status.Statable,Zelda.Status.CombatEventArgs)">
            <summary>
            Called when the player has managed to hit an enemy with his default attack.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
            <param name="e">
            The CombatEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:Zelda.Skills.Melee.FrustrationSkill.FrustrationAura.OnEnabled(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="P:Zelda.Skills.Melee.FrustrationSkill.Aura"/> has got enabled.
            </summary>
            <param name="owner">
            The Statable that now owns this Aura.
            </param>
        </member>
        <member name="M:Zelda.Skills.Melee.FrustrationSkill.FrustrationAura.OnDisabled(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="P:Zelda.Skills.Melee.FrustrationSkill.Aura"/> got disabled.
            </summary>
            <param name="owner">
            The Statable that previously owned this Aura.
            </param>
        </member>
        <member name="F:Zelda.Skills.Melee.FrustrationSkill.FrustrationAura.procChance">
            <summary>
            Stores the chance the Double Attack effect can proc.
            </summary>
        </member>
        <member name="F:Zelda.Skills.Melee.FrustrationSkill.FrustrationAura.player">
            <summary>
            Idenfities the PlayerEntity.
            </summary>
        </member>
        <member name="F:Zelda.Skills.Melee.FrustrationSkill.FrustrationAura.damageMethod">
            <summary>
            The damage method used to calculate the damage inflicted by the Double Attack.
            </summary>
        </member>
        <member name="F:Zelda.Skills.Melee.FrustrationSkill.FrustrationAura.rand">
            <summary>
            A random number generator.
            </summary>
        </member>
        <member name="T:Zelda.Skills.Melee.FurorSkill">
            <summary>
            Melee increases melee attack speed by 15%/30%/45% for 10 seconds.
            </summary>
        </member>
        <member name="P:Zelda.Skills.Melee.FurorSkill.IsOnlyLimitedByCooldown">
            <summary>
            Gets a value indicating whether this <see cref="T:Zelda.Skills.Skill"/> is only limited by its own cooldown
            and not such things as location/mana cost/etc.
            </summary>
        </member>
        <member name="M:Zelda.Skills.Melee.FurorSkill.#ctor(Zelda.Talents.Melee.FurorTalent)">
            <summary>
            Initializes a new instance of the FurorSkill class.
            </summary>
            <param name="talent">
            The FurorTalent that modifies the power of the new FurorSkill.
            </param>
        </member>
        <member name="M:Zelda.Skills.Melee.FurorSkill.RefreshAuraEffect">
            <summary>
            Refreshes the strength of the individual buff effect of this PlayerBuffSkill{TTalent}.
            </summary>
        </member>
        <member name="F:Zelda.Skills.Melee.FurorSkill.effect">
            <summary>
            The AttackSpeedEffect that is applied by this FurorSkill.
            </summary>
        </member>
        <member name="T:Zelda.Skills.Melee.NormalMeleeAttackSkill">
            <summary>
            Defines the <see cref="T:Zelda.Skills.Skill"/> that enables the
            Player to attack with his sword.
            </summary>
        </member>
        <member name="P:Zelda.Skills.Melee.NormalMeleeAttackSkill.Description">
            <summary>
            Gets the localized description of this <see cref="T:Zelda.Skills.Melee.NormalMeleeAttackSkill"/>.
            </summary>
        </member>
        <member name="P:Zelda.Skills.Melee.NormalMeleeAttackSkill.IsUseable">
            <summary>
            Gets a value indicating whether this <see cref="T:Zelda.Skills.Melee.NormalMeleeAttackSkill"/> is useable 
            depending on the current state of the user.
            </summary>
            <remarks>
            The cooldown is not taken into account.
            </remarks>
        </member>
        <member name="M:Zelda.Skills.Melee.NormalMeleeAttackSkill.#ctor(Zelda.Entities.PlayerEntity,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Skills.Melee.NormalMeleeAttackSkill"/> class.
            </summary>
            <param name="player">
            The <see cref="T:Zelda.Entities.PlayerEntity"/> that owns the new NormalMeleeAttackSkill.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Skills.Melee.NormalMeleeAttackSkill.Fire">
            <summary>
            Fires this <see cref="T:Zelda.Skills.Melee.NormalMeleeAttackSkill"/>.
            </summary>
            <returns>
            true if this Skill has been used;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Skills.Melee.NormalMeleeAttackSkill.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this <see cref="T:Zelda.Skills.Skill"/>.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Skills.Melee.NormalMeleeAttackSkill.RefreshDataFromTalents">
            <summary>
            There are no talents that modify the NormalMeleeAttackSkill.
            </summary>
        </member>
        <member name="F:Zelda.Skills.Melee.NormalMeleeAttackSkill.attack">
            <summary>
            Stores the <see cref="T:Zelda.Attacks.Melee.PlayerMeleeAttack"/> object related to this Skill.
            </summary>
        </member>
        <member name="T:Zelda.Skills.Melee.PushingAttackSkill">
            <summary> 
            Pushing Attack pushes the enemy away with full power dealing MeleeDamage,
            increasing pushing power by X to Y.
            </summary>
        </member>
        <member name="M:Zelda.Skills.Melee.PushingAttackSkill.#ctor(Zelda.Talents.Melee.PushingAttackTalent,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Skills.Melee.PushingAttackSkill"/> class.
            </summary>
            <param name="talent">
            The PushingAttackTalent that 'learns' the player the new PushingAttackSkill.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Skills.Melee.PushingAttackSkill.RefreshDataFromTalents">
            <summary>
            Refreshes the power of this PushingAttackSkill based on the talents of the player.
            </summary>
        </member>
        <member name="T:Zelda.Skills.Melee.QuickStrikeSkill">
            <summary> 
            <para>
            Swiftly strikes at the enemy dealing MeleeDamage. 
            Can proc Double Attack. Cooldown of {0} seconds.
            </para>
            <para>
            Requires a Dagger to be used!
            </para>
            </summary>
        </member>
        <member name="P:Zelda.Skills.Melee.QuickStrikeSkill.IsInactive">
            <summary>
            Gets a value indicating whether this QuickStrikeSkill is currently in-active and
            as such unuseable.
            </summary>
        </member>
        <member name="M:Zelda.Skills.Melee.QuickStrikeSkill.#ctor(Zelda.Talents.Melee.QuickStrikeTalent,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Skills.Melee.QuickStrikeSkill"/> class.
            </summary>
            <param name="talent">
            The talent that 'learns' the player the Skill.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Skills.Melee.QuickStrikeSkill.RefreshDataFromTalents">
            <summary>
            Refreshes the power of this QuickStrikeSkill based on the talents of the player.
            </summary>
        </member>
        <member name="F:Zelda.Skills.Melee.QuickStrikeSkill.equipment">
            <summary>
            Identifies the current EquiptmentStatus of the Player that owns this Skill.
            </summary>
        </member>
        <member name="T:Zelda.Skills.Melee.RecoverWoundsSkill">
            <summary>
            Recover Wounds increases Life Regeneration 
            by 100% per talent-level for a total of 300%.
            </summary>
        </member>
        <member name="P:Zelda.Skills.Melee.RecoverWoundsSkill.IsOnlyLimitedByCooldown">
            <summary>
            Gets a value indicating whether this RecoverWoundsSkill is only limited by its own cooldown
            and not such things as location/mana cost/etc.
            </summary>
        </member>
        <member name="M:Zelda.Skills.Melee.RecoverWoundsSkill.#ctor(Zelda.Talents.Melee.RecoverWoundsTalent)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Skills.Melee.RecoverWoundsSkill"/> class.
            </summary>
            <param name="talent">
            The talent that 'learns' the player the Skill.
            </param>
        </member>
        <member name="M:Zelda.Skills.Melee.RecoverWoundsSkill.RefreshAuraEffect">
            <summary>
            Refreshes the strength of the individual buff effect of this RecoverWoundsSkill.
            </summary>
        </member>
        <member name="F:Zelda.Skills.Melee.RecoverWoundsSkill.effect">
            <summary>
            The LifeManaRegenEffect that gets applied by this RecoverWoundsSkill.
            </summary>
        </member>
        <member name="T:Zelda.Skills.Melee.ShieldBlockSkill">
            <summary>
            Shield Block increases Chance to Block by 10/20/30 for 12 seconds.
            60 seconds cooldown.
            </summary>
        </member>
        <member name="P:Zelda.Skills.Melee.ShieldBlockSkill.IsOnlyLimitedByCooldown">
            <summary>
            Gets a value indicating whether this ShieldBlockSkill is only limited by its own cooldown
            and not such things as location/mana cost/etc.
            </summary>
        </member>
        <member name="P:Zelda.Skills.Melee.ShieldBlockSkill.IsUseable">
            <summary>
            Gets a value indicating whether this ShieldBlockSkill is currently useable.
            </summary>
        </member>
        <member name="M:Zelda.Skills.Melee.ShieldBlockSkill.#ctor(Zelda.Talents.Melee.ShieldBlockTalent)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Skills.Melee.ShieldBlockSkill"/> class.
            </summary>
            <param name="talent">
            The talent that 'learns' the player the new ShieldBlockSkill.
            </param>
        </member>
        <member name="M:Zelda.Skills.Melee.ShieldBlockSkill.RefreshAuraEffect">
            <summary>
            Refreshes the strength of the individual buff effect of this ShieldBlockSkill.
            </summary>
        </member>
        <member name="F:Zelda.Skills.Melee.ShieldBlockSkill.effect">
            <summary>
            The effect that is applied by this ShieldBlockSkill.
            </summary>
        </member>
        <member name="T:Zelda.Skills.Melee.ShieldBreakerSkill">
            <summary>
            You build up strength in your swords arm after blocking an attack.
            Unleashes MeleeDmg + BlockValue * ({0} * Block Points)% damage. 
            1 Block Point is awarded for each block; lasting 12 seconds. 
            5 Block Points maximum.
            </summary>
        </member>
        <member name="P:Zelda.Skills.Melee.ShieldBreakerSkill.IsOnlyLimitedByCooldown">
            <summary>
            Gets a value indicating whether this ShieldBreakerSkill is only limited by its own cooldown
            and not such things as location/mana cost/etc.
            </summary>
        </member>
        <member name="P:Zelda.Skills.Melee.ShieldBreakerSkill.IsUseable">
            <summary>
            Gets a value indicating whether this ShieldBlockSkill is currently useable.
            </summary>
        </member>
        <member name="P:Zelda.Skills.Melee.ShieldBreakerSkill.IsInactive">
            <summary>
            Gets a value indicating whether this ShieldBreakerSkill is currently in-active and
            as such unuseable.
            </summary>
        </member>
        <member name="M:Zelda.Skills.Melee.ShieldBreakerSkill.#ctor(Zelda.Talents.Melee.ShieldBreakerTalent,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Skills.Melee.ShieldBreakerSkill"/> class.
            </summary>
            <param name="talent">
            The talent that 'learns' the player the Skill.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Skills.Melee.ShieldBreakerSkill.Initialize">
            <summary>
            Initializes this ShieldBreakerSkill.
            </summary>
        </member>
        <member name="M:Zelda.Skills.Melee.ShieldBreakerSkill.Uninitialize">
            <summary>
            Uninitializes this ShieldBreakerSkill.
            </summary>
        </member>
        <member name="M:Zelda.Skills.Melee.ShieldBreakerSkill.OnFired">
            <summary>
            Called when this Skill has been succesfully fired.
            </summary>
        </member>
        <member name="M:Zelda.Skills.Melee.ShieldBreakerSkill.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this ShieldBreakerSkill.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Skills.Melee.ShieldBreakerSkill.RefreshDataFromTalents">
            <summary>
            Refreshes the power of this ShieldBreakerSkill based on the talents of the player.
            </summary>
        </member>
        <member name="M:Zelda.Skills.Melee.ShieldBreakerSkill.RefreshBlockValueToDamageMultiplier">
            <summary>
            Refreshes the multiplier value that converts BlockValue into Damage. 
            </summary>
        </member>
        <member name="M:Zelda.Skills.Melee.ShieldBreakerSkill.OnPlayerBlocked(Zelda.Status.Statable)">
            <summary>
            Called when the player has blocked an attack.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
        </member>
        <member name="M:Zelda.Skills.Melee.ShieldBreakerSkill.ResetAura">
            <summary>
            Resets the TimedAura to display how many block points the player has.
            </summary>
        </member>
        <member name="M:Zelda.Skills.Melee.ShieldBreakerSkill.GetAuraSymbol">
            <summary>
            Gets the Sprite that is used to visualize the current number of blockPoints.
            </summary>
            <returns>The requested Sprite.</returns>
        </member>
        <member name="F:Zelda.Skills.Melee.ShieldBreakerSkill.multiplierPerPoint">
            <summary>
            Caches the current multiplier value of the ShieldBreakerTalent.
            </summary>
        </member>
        <member name="F:Zelda.Skills.Melee.ShieldBreakerSkill.blockPoints">
            <summary>
            The number of block points the player has managed to aquire.
            </summary>
        </member>
        <member name="F:Zelda.Skills.Melee.ShieldBreakerSkill.blockPointsTimeRemaining">
            <summary>
            The time left until the blockPoints vanish.
            </summary>
        </member>
        <member name="F:Zelda.Skills.Melee.ShieldBreakerSkill.blockPointAura">
            <summary>
            The aura responsible for visualizing how many block points the player has.
            </summary>
        </member>
        <member name="F:Zelda.Skills.Melee.ShieldBreakerSkill.method">
            <summary>
            The DamageMethod used to calculate the damage done by this ShieldBreakerSkill.
            </summary>
        </member>
        <member name="F:Zelda.Skills.Melee.ShieldBreakerSkill.spriteSymbol_1BP">
            <summary>
            The sprites used to visualize how many block points the player currently has.
            </summary>
        </member>
        <member name="F:Zelda.Skills.Melee.ShieldBreakerSkill.spriteSymbol_2BP">
            <summary>
            The sprites used to visualize how many block points the player currently has.
            </summary>
        </member>
        <member name="F:Zelda.Skills.Melee.ShieldBreakerSkill.spriteSymbol_3BP">
            <summary>
            The sprites used to visualize how many block points the player currently has.
            </summary>
        </member>
        <member name="F:Zelda.Skills.Melee.ShieldBreakerSkill.spriteSymbol_4BP">
            <summary>
            The sprites used to visualize how many block points the player currently has.
            </summary>
        </member>
        <member name="F:Zelda.Skills.Melee.ShieldBreakerSkill.spriteSymbol_5BP">
            <summary>
            The sprites used to visualize how many block points the player currently has.
            </summary>
        </member>
        <member name="T:Zelda.Skills.Melee.ShieldWallSkill">
            <summary>
            Shield Wall is an active ability that when
            used reduces damage taken by all sources 
            by 20.0% per level for a total of 60%.
            <para>
            Shield Wall also reduces damage done and the movement speed of the Player
            as a penality for using the Skill.
            Shield Wall doesn't cost Mana and is active until deactivated.
            </para>
            </summary>
        </member>
        <member name="P:Zelda.Skills.Melee.ShieldWallSkill.Description">
            <summary>
            Gets the description of this ShieldWallSkill.
            </summary>
        </member>
        <member name="P:Zelda.Skills.Melee.ShieldWallSkill.IsUseable">
            <summary>
            Gets a value indicating whether this ShieldWallSkill is currently useable.
            </summary>
        </member>
        <member name="P:Zelda.Skills.Melee.ShieldWallSkill.IsOnlyLimitedByCooldown">
            <summary>
            Gets a value indicating whether this ShieldWallSkill is only limited by its own cooldown
            and not such things as location/mana cost/etc.
            </summary>
        </member>
        <member name="M:Zelda.Skills.Melee.ShieldWallSkill.#ctor(Zelda.Talents.Melee.ShieldWallTalent)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Skills.Melee.ShieldWallSkill"/> class.
            </summary>
            <param name="talent">
            The ShieldWallTalent that 'learns' the player the new ShieldWallSkill.
            </param>
        </member>
        <member name="M:Zelda.Skills.Melee.ShieldWallSkill.RefreshDataFromTalents">
            <summary>
            Refreshes the strength of this ShieldWallSkill based on the Talents the player has choosen.
            </summary>
        </member>
        <member name="M:Zelda.Skills.Melee.ShieldWallSkill.Fire">
            <summary>
            Uses this ShieldWallSkill.
            </summary>
            <returns>
            true if this ShieldWallSkill has been used;
            otherwise false.
            </returns>
        </member>
        <member name="F:Zelda.Skills.Melee.ShieldWallSkill.talent">
            <summary>
            Identifies the ShieldWallTalent that modifies the strength of this ShieldWallSkill.
            </summary>
        </member>
        <member name="F:Zelda.Skills.Melee.ShieldWallSkill.effectDamageTaken">
            <summary>
            The DamageTakenModEffect that is applied by this ShieldWallSkill.
            </summary>
        </member>
        <member name="F:Zelda.Skills.Melee.ShieldWallSkill.effectDamageDone">
            <summary>
            The DamageDoneModEffect that is applied by this ShieldWallSkill.
            </summary>
        </member>
        <member name="F:Zelda.Skills.Melee.ShieldWallSkill.effectMoveSpeed">
            <summary>
            The MovementSpeedEffect that is applied by this ShieldWallSkill.
            </summary>
        </member>
        <member name="F:Zelda.Skills.Melee.ShieldWallSkill.aura">
            <summary>
            The PermanentAura that holds the StatusEffects this ShieldWallSkill provides.
            </summary>
        </member>
        <member name="T:Zelda.Skills.Melee.WhirlwindSkill">
            <summary>
            Whirlwind is a powerful attack that needs to be charged up.
            After the charge is complete the player turns like a Whirlwind,
            hitting and pushing all enemies very hard.
            As a bonus the Whirlwind attack can't be dodged.
            </summary>
        </member>
        <member name="M:Zelda.Skills.Melee.WhirlwindSkill.#ctor(Zelda.Talents.Melee.WhirlwindTalent,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Skills.Melee.WhirlwindSkill"/> class.
            </summary>
            <param name="talent">
            The WhirlwindTalent that 'learns' the player the new WhirlwindSkill.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Skills.Melee.WhirlwindSkill.RefreshDataFromTalents">
            <summary>
            Refreshes the power of this WhirlwindSkill based on the Talents of the player.
            </summary>
        </member>
        <member name="F:Zelda.Skills.Melee.WhirlwindSkill.method">
            <summary>
            The AttackDamageMethod that is used to calculate damage done by the WhirlwindAttack.
            </summary>
        </member>
        <member name="T:Zelda.Skills.PlayerAttackSkill`2">
            <summary>
            Represents a <see cref="T:Zelda.Skills.PlayerSkill"/> that internally uses an <see cref="P:Zelda.Skills.PlayerAttackSkill`2.Attack"/>
            when the Skill is fired.
            </summary>
            <typeparam name="TTalent">
            The exact type of the <see cref="T:Zelda.Talents.SkillTalent"/>.
            </typeparam>
            <typeparam name="TAttack">
            The exact type of the <see cref="P:Zelda.Skills.PlayerAttackSkill`2.Attack"/>.
            </typeparam>
        </member>
        <member name="P:Zelda.Skills.PlayerAttackSkill`2.Attack">
            <summary>
            Gets or sets the attack this PlayerAttackSkill{TTalent, TAttack} is based on.
            </summary>
        </member>
        <member name="P:Zelda.Skills.PlayerAttackSkill`2.IsUseable">
            <summary>
            Gets a value indicating whether this PlayerAttackSkill{TTalent, TAttack} is currently useable.
            </summary>
        </member>
        <member name="M:Zelda.Skills.PlayerAttackSkill`2.#ctor(`0,System.Single)">
            <summary>
            Initializes a new instance of the PlayerAttackSkill{TTalent, TAttack} class.
            </summary>
            <param name="talent"> 
            The <see cref="T:Zelda.Talents.Talent"/> that descripes the power of the new PlayerAttackSkill{TTalent, TAttack}.
            </param>
            <param name="cooldownTime">
            The number of second the new PlayerAttackSkill{TTalent, TAttack} has to cooldown after it has been used.
            </param>
        </member>
        <member name="M:Zelda.Skills.PlayerAttackSkill`2.#ctor(`0,Zelda.Cooldown)">
            <summary>
            Initializes a new instance of the PlayerAttackSkill{TTalent, TAttack} class.
            </summary>
            <param name="talent"> 
            The <see cref="T:Zelda.Talents.Talent"/> that descripes the power of the new PlayerAttackSkill{TTalent, TAttack}.
            </param>
            <param name="cooldown">
            The cooldown of the new PlayerAttackSkill{TTalent, TAttack}.
            </param>
        </member>
        <member name="M:Zelda.Skills.PlayerAttackSkill`2.Fire">
            <summary>
            Fires this PlayerAttackSkill{TTalent, TAttack}.
            </summary>
            <returns>
            true if this PlayerAttackSkill{TTalent, TAttack} has been used;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Skills.PlayerAttackSkill`2.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this PlayerAttackSkill{TTalent, TAttack}.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="F:Zelda.Skills.PlayerAttackSkill`2.attack">
            <summary>
            Represents the storage field of the Attack property.
            </summary>
        </member>
        <member name="T:Zelda.Skills.PlayerBuffSkill`1">
            <summary>
            Represents a PlayerSkill that temp. applies an Aura to the Player
            when the uses the skill.
            </summary>
            <typeparam name="TTalent">
            The exact type of the <see cref="T:Zelda.Talents.Talent"/> that descripes the buff.
            </typeparam>
        </member>
        <member name="P:Zelda.Skills.PlayerBuffSkill`1.IsUseable">
            <summary>
            Gets a value indicating whether this PlayerBuffSkill is currently useable.
            </summary>
        </member>
        <member name="P:Zelda.Skills.PlayerBuffSkill`1.IsOnlyLimitedByCooldown">
            <summary>
            Gets a value indicating whether this PlayerBuffSkill is only limited by its own cooldown
            and not such things as location/mana cost/etc.
            </summary>
        </member>
        <member name="P:Zelda.Skills.PlayerBuffSkill`1.Aura">
            <summary>
            Gets or sets the TimedAura which contains the buff 
            effects of this PlayerBuffSkill{TTalent}
            </summary>
        </member>
        <member name="M:Zelda.Skills.PlayerBuffSkill`1.#ctor(`0,System.Single)">
            <summary>
            Initializes a new instance of the PlayerBuffSkill{TTalent} class.
            </summary>
            <param name="talent"> 
            The <see cref="T:Zelda.Talents.Talent"/> that descripes the power of the new PlayerBuffSkill{TTalent}.
            </param>
            <param name="cooldownTime">
            The number of second the new PlayerBuffSkill{TTalent} has to cooldown after it has been used.
            </param>
        </member>
        <member name="M:Zelda.Skills.PlayerBuffSkill`1.#ctor(`0,Zelda.Cooldown)">
            <summary>
            Initializes a new instance of the PlayerBuffSkill{TTalent} class.
            </summary>
            <param name="talent"> 
            The <see cref="T:Zelda.Talents.Talent"/> that descripes the power of the new PlayerBuffSkill{TTalent,}.
            </param>
            <param name="cooldown">
            The cooldown of the new PlayerBuffSkill{TTalent}.
            </param>
        </member>
        <member name="M:Zelda.Skills.PlayerBuffSkill`1.Fire">
            <summary>
            Uses this PlayerBuffSkill{TTalent}.
            </summary>
            <returns>
            true if this PlayerBuffSkill{TTalent} has been used;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Skills.PlayerBuffSkill`1.RefreshDataFromTalents">
            <summary>
            Refreshes the strength of this PlayerBuffSkill{TTalent} based on the talents the player has choosen.
            </summary>
        </member>
        <member name="M:Zelda.Skills.PlayerBuffSkill`1.RefreshAuraEffect">
            <summary>
            Refreshes the strength of the individual buff effect of this PlayerBuffSkill{TTalent}.
            </summary>
        </member>
        <member name="F:Zelda.Skills.PlayerBuffSkill`1.aura">
            <summary>
            The TimedAura that holds the StatusEffects that gets applied by this PlayerBuffSkill{TTalent}.
            </summary>
        </member>
        <member name="T:Zelda.Skills.PlayerSkill">
            <summary>
            Represents a <see cref="T:Zelda.Skills.Skill"/> that can only be used by the player.
            </summary>
            <remarks>
            Most skills are player skills that require an investment into a talent.
            </remarks>
        </member>
        <member name="P:Zelda.Skills.PlayerSkill.Statable">
            <summary>
            Gets the <see cref="T:Zelda.Status.ExtendedStatable"/> component
            of the <see cref="T:Zelda.Entities.PlayerEntity"/> that owns this <see cref="T:Zelda.Skills.PlayerSkill"/>.
            </summary>
        </member>
        <member name="P:Zelda.Skills.PlayerSkill.AuraList">
            <summary>
            Gets the <see cref="T:Zelda.Status.AuraList"/> of the <see cref="T:Zelda.Entities.PlayerEntity"/>
            that owns this <see cref="T:Zelda.Skills.PlayerSkill"/>.
            </summary>
        </member>
        <member name="M:Zelda.Skills.PlayerSkill.#ctor(System.String,Zelda.Cooldown,Atom.Xna.Sprite,Zelda.Entities.PlayerEntity)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Skills.PlayerSkill"/> class.
            </summary>
            <param name="localizedName">The localized name of the new PlayerSkill.</param>
            <param name="cooldown">The cooldown on the PlayerSkill.</param>
            <param name="symbol">The symbol displayed for the new PlayerSkill.</param>
            <param name="player">The PlayerEntity that owns the new PlayerSkill.</param>
        </member>
        <member name="F:Zelda.Skills.PlayerSkill.Player">
            <summary>
            Identifies the <see cref="T:Zelda.Entities.PlayerEntity"/> that owns this <see cref="T:Zelda.Skills.PlayerSkill"/>.
            </summary>
        </member>
        <member name="T:Zelda.Skills.PlayerSpellSkill`2">
            <summary>
            Represents a <see cref="T:Zelda.Skills.PlayerSkill"/> that internally casts an <see cref="P:Zelda.Skills.PlayerSpellSkill`2.Spell"/>
            when the Skill is fired.
            </summary>
            <typeparam name="TTalent">
            The exact type of the <see cref="T:Zelda.Talents.SkillTalent"/>.
            </typeparam>
            <typeparam name="TSpell">
            The exact type of the <see cref="P:Zelda.Skills.PlayerSpellSkill`2.Spell"/>.
            </typeparam>
        </member>
        <member name="P:Zelda.Skills.PlayerSpellSkill`2.Spell">
            <summary>
            Gets or sets the Spell that is cast by this PlayerSpellSkill{TTalent, TSpell}.
            </summary>
        </member>
        <member name="M:Zelda.Skills.PlayerSpellSkill`2.#ctor(`0,System.Single)">
            <summary>
            Initializes a new instance of the PlayerSpellSkill{TTalent, TSpell} class.
            </summary>
            <param name="talent"> 
            The <see cref="T:Zelda.Talents.Talent"/> that descripes the power of the new PlayerSpellSkill{TTalent, TSpell}.
            </param>
            <param name="cooldownTime">
            The number of second the new PlayerSpellSkill{TTalent, TSpell} has to cooldown after it has been used.
            </param>
        </member>
        <member name="M:Zelda.Skills.PlayerSpellSkill`2.Fire">
            <summary>
            Fires this PlayerSpellSkill{TTalent, TSpell}.
            </summary>
            <returns>
            True if the Spell was cast;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Skills.PlayerTalentSkill`1">
            <summary>
            Represents a <see cref="T:Zelda.Skills.PlayerSkill"/> whose power is descriped by a <see cref="P:Zelda.Skills.PlayerTalentSkill`1.Talent"/>.
            </summary>
            <typeparam name="TTalent">
            The exact type of the <see cref="P:Zelda.Skills.PlayerTalentSkill`1.Talent"/>.
            </typeparam>
        </member>
        <member name="P:Zelda.Skills.PlayerTalentSkill`1.Talent">
            <summary>
            Gets the <see cref="P:Zelda.Skills.PlayerTalentSkill`1.Talent"/> that descripes the power of this PlayerTalentSkill{TTalent}.
            </summary>
        </member>
        <member name="P:Zelda.Skills.PlayerTalentSkill`1.Description">
            <summary>
            Gets the (localized) description of this PlayerTalentSkill{TTalent}.
            </summary>
        </member>
        <member name="M:Zelda.Skills.PlayerTalentSkill`1.#ctor(`0,System.Single)">
            <summary>
            Initializes a new instance of the PlayerTalentSkill{TTalent} class.
            </summary>
            <param name="talent"> 
            The <see cref="P:Zelda.Skills.PlayerTalentSkill`1.Talent"/> that descripes the power of the new PlayerTalentSkill{TTalent}.
            </param>
            <param name="cooldownTime">
            The number of second the new PlayerTalentSkill{TTalent} has to cooldown after it has been used.
            </param>
        </member>
        <member name="M:Zelda.Skills.PlayerTalentSkill`1.#ctor(`0,Zelda.Cooldown)">
            <summary>
            Initializes a new instance of the PlayerTalentSkill{TTalent} class.
            </summary>
            <param name="talent"> 
            The <see cref="P:Zelda.Skills.PlayerTalentSkill`1.Talent"/> that descripes the power of the new PlayerTalentSkill{TTalent,}.
            </param>
            <param name="cooldown">
            The cooldown of the new PlayerTalentSkill{TTalent}.
            </param>
        </member>
        <member name="F:Zelda.Skills.PlayerTalentSkill`1.talent">
            <summary>
            The <see cref="P:Zelda.Skills.PlayerTalentSkill`1.Talent"/> that descripes the power of this PlayerTalentSkill{TTalent}.
            </summary>
        </member>
        <member name="T:Zelda.Skills.Ranged.ArrowShowerSkill">
            <summary>
            The ArrowShowerTalent learns the player the ArrowShowerSkill.
            'You fire one Multi Shot every X seconds for Y seconds.'
            </summary>
        </member>
        <member name="M:Zelda.Skills.Ranged.ArrowShowerSkill.#ctor(Zelda.Talents.Ranged.ArrowShowerTalent,Zelda.Talents.Ranged.MultiShotTalent,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Skills.Ranged.ArrowShowerSkill"/> class.
            </summary>
            <param name="talent">
            The talent that 'learns' the player the new ArrowShowerSkill.
            </param>
            <param name="multiShotTalent">
            The talent that modifies the power of each multi shot fired by the ArrowShowerSkill.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Skills.Ranged.ArrowShowerSkill.Initialize">
            <summary>v
            Initializes this HeadshotSkill.
            </summary>
        </member>
        <member name="M:Zelda.Skills.Ranged.ArrowShowerSkill.Uninitialize">
            <summary>
            Uninitializes this HeadshotSkill.
            </summary>
        </member>
        <member name="M:Zelda.Skills.Ranged.ArrowShowerSkill.RefreshDataFromTalents">
            <summary>
            Refreshes the power of this ArrowShowerSkill based on the talents of the player.
            </summary>
        </member>
        <member name="M:Zelda.Skills.Ranged.ArrowShowerSkill.OnMultiShotTalent_LevelChanged(System.Object,System.EventArgs)">
            <summary>
            Gets called when the level of the Multi Shot talent has changed.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The EventArgs that contains the event data.</param>
        </member>
        <member name="F:Zelda.Skills.Ranged.ArrowShowerSkill.multiShotTalent">
            <summary>
            Identifies the MultiShotTalent that modifies the power of each Multi Shot.
            </summary>
        </member>
        <member name="T:Zelda.Skills.Ranged.FireBombSkill">
            <summary>
            The FireBombSkill increases the movement speed 
            of the Player for a fixed amount of time.
            </summary>
        </member>
        <member name="P:Zelda.Skills.Ranged.FireBombSkill.IsUseable">
            <summary>
            Gets a value indicating whether the Skill is currently useable by the Player.
            </summary>
        </member>
        <member name="M:Zelda.Skills.Ranged.FireBombSkill.#ctor(Zelda.Talents.Ranged.FireBombTalent,Zelda.Talents.Ranged.FireBombChainTalent,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Skills.Ranged.FireBombSkill"/> class.
            </summary>
            <param name="talent">
            The talent that 'learns' the player the Skill.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Skills.Ranged.FireBombSkill.RefreshDataFromTalents">
            <summary> 
            Refreshes the data from talents that modify this <see cref="T:Zelda.Skills.Skill"/>'s power. 
            </summary>
        </member>
        <member name="M:Zelda.Skills.Ranged.FireBombSkill.Fire">
            <summary>
            Fires this FireBombSkill.
            </summary>
            <returns>
            true if this Skill has been fired;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Skills.Ranged.FireBombSkill.GetBombPosition">
            <summary>
            Gets the position the next bomb should be spawned at.
            </summary>
            <returns>
            The position.
            </returns>
        </member>
        <member name="M:Zelda.Skills.Ranged.FireBombSkill.CreateBomb(Atom.Math.Vector2)">
            <summary>
            Creates and spawns a new Bomb at the given explosion.
            </summary>
            <param name="position">
            The position at which the Bomb should be spawned at.
            </param>
        </member>
        <member name="F:Zelda.Skills.Ranged.FireBombSkill.maximumBombsUp">
            <summary>
            The maximum number of bombs that can be placed before the cooldown is triggered.
            </summary>
        </member>
        <member name="F:Zelda.Skills.Ranged.FireBombSkill.activeBombs">
            <summary>
            The number of bombs that have been placed before reaching maximumBombsUp.
            </summary>
        </member>
        <member name="F:Zelda.Skills.Ranged.FireBombSkill.damageMethod">
            <summary>
            The damage method used to calculate the damage of each bomb.
            </summary>
        </member>
        <member name="F:Zelda.Skills.Ranged.FireBombSkill.bombSprite">
            <summary>
            The sprites used to visualize the bombs.
            </summary>
        </member>
        <member name="F:Zelda.Skills.Ranged.FireBombSkill.bombExplosion">
            <summary>
            The sprites used to visualize the bombs.
            </summary>
        </member>
        <member name="F:Zelda.Skills.Ranged.FireBombSkill.bombAudio">
            <summary>
            The sound to play when a bomb explodes.
            </summary>
        </member>
        <member name="T:Zelda.Skills.Ranged.HeadshotSkill">
            <summary>
            Headshot is a swift ranged instant attack that can only be used
            after getting a critical ranged attack.
            <para>
            You aim for the head after getting a critical attack,
            firing a swift partially armor-piercing arrow that 
            has an improved chance to crit and pierce of 10/20/30%.
            </para>
            </summary>
        </member>
        <member name="P:Zelda.Skills.Ranged.HeadshotSkill.IsInactive">
            <summary>
            Gets a value indicating whether this HeadshotSkill is currently in-active.
            </summary>
        </member>
        <member name="M:Zelda.Skills.Ranged.HeadshotSkill.#ctor(Zelda.Talents.Ranged.HeadshotTalent,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Skills.Ranged.HeadshotSkill"/> class.
            </summary>
            <param name="talent">
            The talent that 'learns' the player the Skill.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Skills.Ranged.HeadshotSkill.Initialize">
            <summary>
            Initializes this HeadshotSkill.
            </summary>
        </member>
        <member name="M:Zelda.Skills.Ranged.HeadshotSkill.Uninitialize">
            <summary>
            Uninitializes this HeadshotSkill.
            </summary>
        </member>
        <member name="M:Zelda.Skills.Ranged.HeadshotSkill.RefreshDataFromTalents">
            <summary>
            Refreshes the power of this HeadshotSkill based on the HeadshotTalent.
            </summary>
        </member>
        <member name="M:Zelda.Skills.Ranged.HeadshotSkill.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates the HeadshotSkill.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Skills.Ranged.HeadshotSkill.OnRangedCrit(Zelda.Status.Statable)">
            <summary>
            Gets called when the player got a ranged critical attack.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
        </member>
        <member name="F:Zelda.Skills.Ranged.HeadshotSkill.timeLeftUseable">
            <summary>
            The time in seconds left the HeadshotSkill is useable for.
            </summary>
        </member>
        <member name="F:Zelda.Skills.Ranged.HeadshotSkill.method">
            <summary>
            The AttackDamageMethod that is used to calculate the damage done by the headshots.
            </summary>
        </member>
        <member name="T:Zelda.Skills.Ranged.LightArrowSkill">
            <summary>
            The LightArrowSkill is a instant ranged attack that does Light Damage.
            This class can't be inherited.
            </summary>
        </member>
        <member name="M:Zelda.Skills.Ranged.LightArrowSkill.#ctor(Zelda.Talents.Ranged.LightArrowTalent,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Skills.Ranged.LightArrowSkill"/> class.
            </summary>
            <param name="talent">
            The talent that 'learns' the player the LightArrowSkill.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Skills.Ranged.LightArrowSkill.RefreshDataFromTalents">
            <summary>
            Refreshes the power of the LightArrowSkill based on the talents of the player.
            </summary>
        </member>
        <member name="F:Zelda.Skills.Ranged.LightArrowSkill.method">
            <summary>
            The LightArrowDamageMethod that is responsible for calculating damage.
            </summary>
        </member>
        <member name="T:Zelda.Skills.Ranged.MultiShotSkill">
            <summary>
            The MultiShotSkill s a instant ranged attack that fires
            multiple arrows at the same time. A damage reduction is applied to those arrows.
            This class can't be inherited.
            </summary>
        </member>
        <member name="M:Zelda.Skills.Ranged.MultiShotSkill.#ctor(Zelda.Talents.Ranged.MultiShotTalent,Zelda.Talents.Ranged.ImprovedMultiShotTalent,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Skills.Ranged.MultiShotSkill"/> class.
            </summary>
            <param name="talent">
            The talent that 'learns' the player the new MultiShotSkill.
            </param>
            <param name="improvedTalent">
            The talent that improves the new MultiShotSkill.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Skills.Ranged.MultiShotSkill.RefreshDataFromTalents">
            <summary>
            Refreshes the power of this MultiShotSkill based on the MultiShotTalent of the player.
            </summary>
        </member>
        <member name="F:Zelda.Skills.Ranged.MultiShotSkill.improvedTalent">
            <summary>
            Identifies the ImprovedMultiShotTalent that modifies the power of this MultiShotSkill.
            </summary>
        </member>
        <member name="T:Zelda.Skills.Ranged.NormalRangedAttackSkill">
            <summary>
            Defines the <see cref="T:Zelda.Skills.Skill"/> that enables the
            Player to attack with his bow.
            This class can't be inherited.
            </summary>
        </member>
        <member name="P:Zelda.Skills.Ranged.NormalRangedAttackSkill.Description">
            <summary>
            Gets the localized description of this <see cref="T:Zelda.Skills.Skill"/>.
            </summary>
        </member>
        <member name="P:Zelda.Skills.Ranged.NormalRangedAttackSkill.IsUseable">
            <summary>
            Gets a value indicating whether this <see cref="T:Zelda.Skills.Skill"/> is useable 
            depending on the current state of the user.
            </summary>
            <remarks>
            The cooldown is not taken into account.
            </remarks>
        </member>
        <member name="M:Zelda.Skills.Ranged.NormalRangedAttackSkill.#ctor(Zelda.Entities.PlayerEntity,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Skills.Ranged.NormalRangedAttackSkill"/> class.
            </summary>
            <param name="player">
            The PlayerEntity that owns the new Skill.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Skills.Ranged.NormalRangedAttackSkill.Fire">
            <summary>
            Uses this NormalRangedAttackSkill, firing an arrow.
            </summary>
            <returns>
            true if this Skill has been used;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Skills.Ranged.NormalRangedAttackSkill.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this <see cref="T:Zelda.Skills.Skill"/>.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Skills.Ranged.NormalRangedAttackSkill.RefreshDataFromTalents">
            <summary>
            There are no talents that modify the NormalMeleeAttackSkill.
            </summary>
        </member>
        <member name="F:Zelda.Skills.Ranged.NormalRangedAttackSkill.attack">
            <summary>
            The attack related to this skill.
            </summary>
        </member>
        <member name="T:Zelda.Skills.Ranged.PoisonedShotSkill">
            <summary>  
            PoisonedShot is a ranged attack that does 
            (RangedDamage * InstantDamagePenality) plus (RangedDamage*DamageOverTimeMultiplier) over time.
            <para>
            The effect also slows down the enemy by X% per TalentLevel.
            </para>
            </summary>
        </member>
        <member name="M:Zelda.Skills.Ranged.PoisonedShotSkill.#ctor(Zelda.Talents.Ranged.PoisonedShotTalent,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Skills.Ranged.PoisonedShotSkill"/> class.
            </summary>
            <param name="talent">
            The talent that 'learns' the player the Skill.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Skills.Ranged.PoisonedShotSkill.RefreshDataFromTalents">
            <summary>
            Refreshes the power of this PoisonedShotSkill based on the PoisonedShotTalent.
            </summary>
        </member>
        <member name="F:Zelda.Skills.Ranged.PoisonedShotSkill.slowingEffect">
            <summary>
            The movement slowing affect applied to a poisoned target.
            </summary>
        </member>
        <member name="F:Zelda.Skills.Ranged.PoisonedShotSkill.dotAura">
            <summary>
            The DamageOverTimeAura.
            </summary>
        </member>
        <member name="F:Zelda.Skills.Ranged.PoisonedShotSkill.dotDamageMethod">
            <summary>
            The AttackDamageMethod that is used to calculate the damage done by the DOT effect.
            </summary>
        </member>
        <member name="T:Zelda.Skills.Ranged.RapidFireSkill">
            <summary>
            Rapid Fire increases chance to pierce and ranged attack speed by 10%/20%/30% for 24 seconds.
            </summary>
        </member>
        <member name="M:Zelda.Skills.Ranged.RapidFireSkill.#ctor(Zelda.Talents.Ranged.RapidFireTalent)">
            <summary>
            Initializes a new instance of the RapidFireSkill class.
            </summary>
            <param name="talent">
            The RapidFireTalent that modifies the power of the new RapidFireSkill.
            </param>
        </member>
        <member name="M:Zelda.Skills.Ranged.RapidFireSkill.RefreshAuraEffect">
            <summary>
            Refreshes the strength of the individual buff effect of this PlayerBuffSkill{TTalent}.
            </summary>
        </member>
        <member name="F:Zelda.Skills.Ranged.RapidFireSkill.speedEffect">
            <summary>
            The AttackSpeedEffect that is applied by this RapidFireSkill.
            </summary>
        </member>
        <member name="F:Zelda.Skills.Ranged.RapidFireSkill.piercingEffect">
            <summary>
            The ChanceToStatusEffect that is applied by this RapidFireSkill.
            </summary>
        </member>
        <member name="T:Zelda.Skills.Ranged.SprintSkill">
            <summary>
            The SprintSkill increases the movement speed 
            of the Player for a fixed amount of time.
            </summary>
        </member>
        <member name="P:Zelda.Skills.Ranged.SprintSkill.IsOnlyLimitedByCooldown">
            <summary>
            Gets a value indicating whether this <see cref="T:Zelda.Skills.Ranged.SprintSkill"/> is only limited by its own cooldown
            and not such things as location/mana cost/etc.
            </summary>
            <value>Always returns true.</value>
        </member>
        <member name="M:Zelda.Skills.Ranged.SprintSkill.#ctor(Zelda.Talents.Ranged.SprintTalent)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Skills.Ranged.SprintSkill"/> class.
            </summary>
            <param name="talent">
            The talent that 'learns' the player the Skill.
            </param>
        </member>
        <member name="M:Zelda.Skills.Ranged.SprintSkill.RefreshAuraEffect">
            <summary>
            Refreshes the strength of the individual buff effect of this SprintSkill.
            </summary>
        </member>
        <member name="F:Zelda.Skills.Ranged.SprintSkill.effect">
            <summary>
            The MovementSpeedEffect this SprintSkill applies.
            </summary>
        </member>
        <member name="T:Zelda.Skills.Skill">
            <summary>
            A <see cref="T:Zelda.Skills.Skill"/> is an action controlled by the Player.
            </summary>
        </member>
        <member name="E:Zelda.Skills.Skill.Fired">
            <summary>
            Raised when this Skill has been succesfully fired.
            </summary>
        </member>
        <member name="P:Zelda.Skills.Skill.LocalizedName">
            <summary>
            Gets the localized name of this <see cref="T:Zelda.Skills.Skill"/>.
            </summary>
        </member>
        <member name="P:Zelda.Skills.Skill.Description">
            <summary>
            Gets the localized description of this <see cref="T:Zelda.Skills.Skill"/>.
            </summary>
        </member>
        <member name="P:Zelda.Skills.Skill.Symbol">
            <summary>
            Gets the symbol of this <see cref="T:Zelda.Skills.Skill"/>.
            </summary>
        </member>
        <member name="P:Zelda.Skills.Skill.Cooldown">
            <summary>
            Gets the cooldown of this <see cref="T:Zelda.Skills.Skill"/>.
            </summary>
        </member>
        <member name="P:Zelda.Skills.Skill.IsUseable">
            <summary>
            Gets a value indicating whether this <see cref="T:Zelda.Skills.Skill"/> is useable 
            depending on the current state of the user.
            </summary>
            <remarks>
            The cooldown is not taken into account.
            </remarks>
        </member>
        <member name="P:Zelda.Skills.Skill.IsOnlyLimitedByCooldown">
            <summary>
            Gets a value indicating whether this <see cref="T:Zelda.Skills.Skill"/> is only limited by its own cooldown
            and not such things as location/mana cost/etc.
            </summary>
            <value>The default value is false.</value>
        </member>
        <member name="P:Zelda.Skills.Skill.IsInactive">
            <summary>
            Gets a value indicating whether this <see cref="T:Zelda.Skills.Skill"/> is currently inactive;
            and as such unuseable.
            </summary>
            <value>The default value is false.</value>
        </member>
        <member name="P:Zelda.Skills.Skill.Cost">
            <summary>
            Gets or sets the IManaCost of this Skill.
            </summary>
        </member>
        <member name="P:Zelda.Skills.Skill.HasRequiredMana">
            <summary>
            Gets a value indicating whether the owner of this Skill has
            enought mana to use it.
            </summary>
        </member>
        <member name="M:Zelda.Skills.Skill.#ctor(System.String,Zelda.Cooldown,Atom.Xna.Sprite,Zelda.Status.Statable)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Skills.Skill"/> class.
            </summary>
            <param name="localizedName">
            The localized name of the new Skill.
            </param>
            <param name="cooldown">
            The cooldown on the new Skill.
            </param>
            <param name="symbol">
            The symbol displayed for the new Skill.
            </param>
            <param name="statable">
            The statable component of the entity that wants to own the new Skill.
            </param>
        </member>
        <member name="M:Zelda.Skills.Skill.Initialize">
            <summary>
            Initializes this Skill.
            </summary>
        </member>
        <member name="M:Zelda.Skills.Skill.Uninitialize">
            <summary>
            Uninitializes this Skill.
            </summary>
        </member>
        <member name="M:Zelda.Skills.Skill.Use">
            <summary>
            Uses this <see cref="T:Zelda.Skills.Skill"/>.
            </summary>
            <returns>
            true if this Skill has been used;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Skills.Skill.Fire">
            <summary>
            Fires this Skill.
            </summary>
            <remarks>
            At this points the Skill has been checked for beeing
            useable and that the owner of the skill fulfills the mana cost.
            </remarks>
            <returns>
            true if this Skill has been fired;
            -or- otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Skills.Skill.OnFiredCore">
            <summary>
            Called when this Skill has been succesfully fired.
            </summary>
        </member>
        <member name="M:Zelda.Skills.Skill.OnFired">
            <summary>
            Called when this Skill has been succesfully fired.
            Must not be called when overriden.
            </summary>
        </member>
        <member name="M:Zelda.Skills.Skill.CanUse">
            <summary>
            Gets a value indicating whether this Skill can currently be used.
            </summary>
            <returns>
            true if it can be used;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Skills.Skill.RefreshDataFromTalents">
            <summary> 
            Refreshes the data from talents that modify this <see cref="T:Zelda.Skills.Skill"/>'s power. 
            </summary>
        </member>
        <member name="M:Zelda.Skills.Skill.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this <see cref="T:Zelda.Skills.Skill"/>.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="F:Zelda.Skills.Skill.manaCost">
            <summary>
            The cost of this Skill.
            </summary>
        </member>
        <member name="F:Zelda.Skills.Skill.symbol">
            <summary>
            The symbol that is displayed in the Skill Bar for this Skill.
            </summary>
        </member>
        <member name="F:Zelda.Skills.Skill.cooldown">
            <summary>
            The cooldown on this Skill.
            </summary>
        </member>
        <member name="F:Zelda.Skills.Skill.localizedName">
            <summary>
            The localized name of this Skill.
            </summary>
        </member>
        <member name="F:Zelda.Skills.Skill.statable">
            <summary>
            The statable component of the entity that owns this Skill.
            </summary>
        </member>
        <member name="T:Zelda.Skills.Skillable">
            <summary>
            Encapsulates the <see cref="T:Zelda.Skills.Skill"/>s management of an entity. 
            </summary>
        </member>
        <member name="E:Zelda.Skills.Skillable.Learned">
            <summary>
            Raised when the skillable Entity has learned a new Skill.
            </summary>
        </member>
        <member name="E:Zelda.Skills.Skillable.Unlearned">
            <summary>
            Raised when the skillable Entity has unlearned a Skill.
            </summary>
        </member>
        <member name="M:Zelda.Skills.Skillable.Has(Zelda.Skills.Skill)">
            <summary>
            Receives a value that indicates whether this PlayerEntity 
            has learned the given <see cref="T:Zelda.Skills.Skill"/>.
            </summary>
            <param name="skill">The skill to look for.</param>
            <returns>
            true if this PlayerEntity has already learned the given Skill;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Skills.Skillable.Get(System.Type)">
            <summary>
            Tries to receive the <see cref="T:Zelda.Skills.Skill"/> of the specified type.
            </summary>
            <param name="type">
            The type of the skill to get.
            </param>
            <returns>
            The Skill; or null if the Player doesn't own that Skill.
            </returns>
        </member>
        <member name="M:Zelda.Skills.Skillable.Learn(Zelda.Skills.Skill)">
            <summary>
            Adds the given <see cref="T:Zelda.Skills.Skill"/> to the list of skills the player has learned.
            </summary>
            <param name="skill">
            The skill to add.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="skill"/> is null.
            </exception>
        </member>
        <member name="M:Zelda.Skills.Skillable.Unlearn(Zelda.Skills.Skill)">
            <summary>
            Removes the given <see cref="T:Zelda.Skills.Skill"/> from the list of skills the player has learned.
            </summary>
            <param name="skill">
            The skill to remove.
            </param>
        </member>
        <member name="M:Zelda.Skills.Skillable.Update(Atom.IUpdateContext)">
            <summary>
            Updates this Skillable component.
            </summary>
            <param name="updateContext">
            The current IUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Skills.Skillable.GetEnumerator">
            <summary>
            Gets an enumerator that iterates over the Skills that the entity has learned.
            </summary>
            <returns>
            The Skills that the entity has learned.
            </returns>
        </member>
        <member name="M:Zelda.Skills.Skillable.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator that iterates over the Skills that the entity has learned.
            </summary>
            <returns>
            The Skills that the entity has learned.
            </returns>
        </member>
        <member name="F:Zelda.Skills.Skillable.skills">
            <summary>
            Lists the <see cref="T:Zelda.Skills.Skill"/>s the PlayerEntity has aquired.
            </summary>
        </member>
        <member name="T:Zelda.Skills.SkillCooldownEffect">
            <summary>
            Defines an effect that modifies the cooldown of an <see cref="T:Zelda.ICooldownDependant"/>
            object.
            </summary>
        </member>
        <member name="M:Zelda.Skills.SkillCooldownEffect.GetIdentifier``1">
            <summary>
            Gets the identifier for this SkillCooldownEffect.
            </summary>
            <typeparam name="TSkill">
            The type of the skill.
            </typeparam>
            <returns>
            The string that uniquely identifies this CooldownEffect.
            </returns>
        </member>
        <member name="M:Zelda.Skills.SkillCooldownEffect.GetIdentifier(System.Type)">
            <summary>
            Gets the identifier for this SkillCooldownEffect.
            </summary>
            <param name="skillType">
            The type of the Skill.
            </param>
            <returns>
            The string that uniquely identifies this CooldownEffect.
            </returns>
        </member>
        <member name="P:Zelda.Skills.SkillCooldownEffect.Identifier">
            <summary> 
            Gets an unique string that represents what this SkillCooldownEffect manipulates.
            </summary>
        </member>
        <member name="M:Zelda.Skills.SkillCooldownEffect.GetDescription(Zelda.Status.Statable)">
            <summary>
            This operation is not supported.
            </summary>
            <param name="statable">
            This paramater is unused.
            </param>
            <returns>
            This method will never return.
            </returns>
            <exception cref="T:System.NotSupportedException"/>
        </member>
        <member name="M:Zelda.Skills.SkillCooldownEffect.#ctor(Zelda.Status.StatusManipType,Zelda.Talents.SkillTalent)">
            <summary>
            Initializes a new instance of the SkillCooldownEffect class.
            </summary>
            <param name="manipulationType">
            States how the value of the new SkillCooldownEffect should be interpreted.
            </param>
            <param name="skillTalent">
            The SkillTalent whose skill's cooldown is modified by this CooldownEffect.
            </param>
        </member>
        <member name="M:Zelda.Skills.SkillCooldownEffect.OnEnable(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.StatusEffect"/> gets enabled for the given statable Entity.
            </summary>
            <param name="user">
            The statable that enabled this <see cref="T:Zelda.Status.StatusEffect"/>.
            </param>
        </member>
        <member name="M:Zelda.Skills.SkillCooldownEffect.OnDisable(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.StatusEffect"/> gets disabled for the given statable Entity.
            </summary>
            <param name="user">
            The statable that disabled this <see cref="T:Zelda.Status.StatusEffect"/>.
            </param>
        </member>
        <member name="M:Zelda.Skills.SkillCooldownEffect.OnChanged">
            <summary>
            Called when this StatusEffect has bene enabled or disabled.
            </summary>
        </member>
        <member name="M:Zelda.Skills.SkillCooldownEffect.Clone">
            <summary>
            This operation is not supported.
            </summary>
            <returns>
            This method will never return.
            </returns>
            <exception cref="T:System.NotSupportedException"/>
        </member>
        <member name="M:Zelda.Skills.SkillCooldownEffect.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            This operation is not supported.
            </summary>
            <param name="context">This paramater is unused.</param>
            <exception cref="T:System.NotSupportedException"/>
        </member>
        <member name="M:Zelda.Skills.SkillCooldownEffect.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            This operation is not supported.
            </summary>
            <param name="context">This paramater is unused.</param>
            <exception cref="T:System.NotSupportedException"/>
        </member>
        <member name="F:Zelda.Skills.SkillCooldownEffect.skillProvider">
            <summary>
            The object that provides the Skill whose cooldown is affected
            by this SkillCooldownEffect.
            </summary>
        </member>
        <member name="F:Zelda.Skills.SkillCooldownEffect.identifier">
            <summary>
            The cached identifier for this SkillCooldownEffect.
            </summary>
        </member>
        <member name="T:Zelda.Status.Aura">
            <summary>
            Represents a composition of StatusEffects.
            </summary>
        </member>
        <member name="E:Zelda.Status.Aura.Enabled">
            <summary>
            Fired when this Aura has been enabled.
            </summary>
        </member>
        <member name="E:Zelda.Status.Aura.Disabled">
            <summary>
            Fired when this Aura has been disabled.
            </summary>
        </member>
        <member name="P:Zelda.Status.Aura.Name">
            <summary>
            Gets or sets the name that identifies this <see cref="T:Zelda.Status.Aura"/>.
            </summary>
            <remarks>
            This value may or may not be supposed to be unique.
            </remarks>
        </member>
        <member name="P:Zelda.Status.Aura.DescriptionProvider">
            <summary>
            Gets or sets an object which provides access to a description.
            </summary>
        </member>
        <member name="P:Zelda.Status.Aura.Description">
            <summary>
            Gets the (localized) description of this <see cref="T:Zelda.Status.Aura"/>.
            </summary>
        </member>
        <member name="P:Zelda.Status.Aura.Symbol">
            <summary>
            Gets or sets the symbol sprite of this <see cref="T:Zelda.Status.Aura"/>. May be null.
            </summary>
        </member>
        <member name="P:Zelda.Status.Aura.SymbolColor">
            <summary>
            Gets or sets the color the <see cref="P:Zelda.Status.Aura.Symbol"/> of this Aura is tinted in.
            </summary>
            <value>The default value is Color.White.</value>
        </member>
        <member name="P:Zelda.Status.Aura.IsVisible">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Zelda.Status.Aura"/> is visible.
            </summary>
            <remarks>
            Visible auras are shown (in the case of the player) in the buff/debuff bar.
            </remarks>
        </member>
        <member name="P:Zelda.Status.Aura.IsEnabled">
            <summary>
            Gets a value indicating whether this <see cref="T:Zelda.Status.Aura"/> has been enabled.
            </summary>
        </member>
        <member name="P:Zelda.Status.Aura.DebuffFlags">
            <summary>
            Gets or sets the <see cref="P:Zelda.Status.Aura.DebuffFlags"/> of this <see cref="T:Zelda.Status.Aura"/>.
            </summary>
        </member>
        <member name="P:Zelda.Status.Aura.IsDebuff">
            <summary>
            Gets a value indicating whether this <see cref="T:Zelda.Status.Aura"/> is a debuff.
            </summary>
        </member>
        <member name="P:Zelda.Status.Aura.Effects">
            <summary>
            Gets the list of <see cref="P:Zelda.Status.Aura.Effects"/> of this <see cref="T:Zelda.Status.Aura"/>.
            </summary>
        </member>
        <member name="P:Zelda.Status.Aura.AuraList">
            <summary>
            Gets the <see cref="P:Zelda.Status.Aura.AuraList"/> that owns this <see cref="T:Zelda.Status.Aura"/>.
            </summary>
        </member>
        <member name="M:Zelda.Status.Aura.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Status.Aura"/> class.
            </summary>
        </member>
        <member name="M:Zelda.Status.Aura.#ctor(Zelda.Status.StatusEffect[])">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Status.Aura"/> class.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="effects"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            If any of the elements of the given <paramref name="effects"/> array is null.
            </exception>
            <param name="effects">
            The list of <see cref="T:Zelda.Status.StatusEffect"/>s of the new <see cref="T:Zelda.Status.Aura"/>.
            </param>
        </member>
        <member name="M:Zelda.Status.Aura.ModifyPowerBy(System.Single)">
            <summary>
            Modifies the power of each effect of this Aura by the given factor.
            </summary>
            <param name="factor">
            The factor to change by.
            </param>
        </member>
        <member name="M:Zelda.Status.Aura.Enable">
            <summary>
            Enables this <see cref="T:Zelda.Status.Aura"/>.
            </summary>
        </member>
        <member name="M:Zelda.Status.Aura.OnEnabledPrivate(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.Aura"/> has got enabled.
            </summary>
            <param name="owner">
            The Statable that now owns this Aura.
            </param>
        </member>
        <member name="M:Zelda.Status.Aura.OnEnabled(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.Aura"/> has got enabled.
            </summary>
            <param name="owner">
            The Statable that now owns this Aura.
            </param>
        </member>
        <member name="M:Zelda.Status.Aura.Disable">
            <summary>
            Disables the <see cref="T:Zelda.Status.Aura"/>.
            </summary>
        </member>
        <member name="M:Zelda.Status.Aura.OnDisabledPrivate(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.Aura"/> got disabled.
            </summary>
            <param name="owner">
            The Statable that previously owned this Aura.
            </param>
        </member>
        <member name="M:Zelda.Status.Aura.OnDisabled(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.Aura"/> got disabled.
            </summary>
            <param name="owner">
            The Statable that previously owned this Aura.
            </param>
        </member>
        <member name="M:Zelda.Status.Aura.Update(Zelda.ZeldaUpdateContext)">
            <summary>        
            Updates this <see cref="T:Zelda.Status.Aura"/>.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Status.Aura.ClearEffects">
            <summary>
            Removes all StatusEffects from this Aura.
            </summary>
        </member>
        <member name="M:Zelda.Status.Aura.GetEffect``1">
            <summary>
            Tries to get the StatusValueEffect of the specified <typeparamref name="TEffect"/>
            and <see cref="T:Zelda.Status.StatusManipType"/>.
            </summary>
            <typeparam name="TEffect">
            The exact type of StatusValueEffect to get.
            </typeparam>
            <returns>
            The requested StatusValueEffect; or null if no such effect could be found.
            </returns>
        </member>
        <member name="M:Zelda.Status.Aura.GetEffect``1(Zelda.Status.StatusManipType)">
            <summary>
            Tries to get the StatusValueEffect of the specified <typeparamref name="TEffect"/>
            and <see cref="T:Zelda.Status.StatusManipType"/>.
            </summary>
            <typeparam name="TEffect">
            The exact type of StatusValueEffect to get.
            </typeparam>
            <param name="manipulationType">
            The manipulation type the StatusValueEffect must have.
            </param>
            <returns>
            The requested StatusValueEffect; or null if no such effect could be found.
            </returns>
        </member>
        <member name="M:Zelda.Status.Aura.GetEffect``1(System.Predicate{``0})">
            <summary>
            Tries to get the StatusEffect of the specified <typeparamref name="TEffect"/>
            that matches the given Predicate.
            </summary>
            <typeparam name="TEffect">
            The exact type of StatusEffect to get.
            </typeparam>
            <param name="predicate">
            The predicate that a StatusEffect must fulfill.
            </param>
            <returns>
            The requested StatusEffect; or null if no such effect could be found.
            </returns>
        </member>
        <member name="M:Zelda.Status.Aura.Clone">
            <summary>
            Clones this <see cref="T:Zelda.Status.Aura"/>.
            </summary>
            <returns>
            The cloned <see cref="T:Zelda.Status.Aura"/>.
            </returns>
        </member>
        <member name="M:Zelda.Status.Aura.SetupClone(Zelda.Status.Aura)">
            <summary>
            Setups the given Aura to be a clone of this Aura.
            </summary>
            <param name="clone">
            The Aura to setup as a clone of this Aura.
            </param>
        </member>
        <member name="M:Zelda.Status.Aura.GetClonedEffects">
            <summary>
            Clones the StatusEffects of this <see cref="T:Zelda.Status.Aura"/>.
            </summary>
            <returns>The cloned StatusEffects, or null.</returns>
        </member>
        <member name="M:Zelda.Status.Aura.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Status.Aura.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Status.Aura.symbolColor">
            <summary>
            The color the <see cref="P:Zelda.Status.Aura.Symbol"/> of this Aura is tinted in.
            </summary>
        </member>
        <member name="F:Zelda.Status.Aura.list">
            <summary>
            The list that owns the <see cref="T:Zelda.Status.Aura"/>.
            </summary>
        </member>
        <member name="F:Zelda.Status.Aura.effects">
            <summary>
            The list of StatusEffects this <see cref="T:Zelda.Status.Aura"/> has.
            </summary>
        </member>
        <member name="T:Zelda.Status.AuraList">
            <summary>
            Manages the life-cycle of all <see cref="T:Zelda.Status.Aura"/>s
            that are applied to a <see cref="T:Zelda.Status.Statable"/> ZeldaEntity.
            This class can't be inherited.
            </summary>
        </member>
        <member name="M:Zelda.Status.AuraList.#ctor(Zelda.Status.Statable)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Status.AuraList"/> class.
            </summary>
            <param name="owner">
            The object that owns the new <see cref="T:Zelda.Status.AuraList"/>.
            </param>
        </member>
        <member name="P:Zelda.Status.AuraList.Owner">
            <summary>
            Gets the object that owns this <see cref="T:Zelda.Status.AuraList"/>.
            </summary>
        </member>
        <member name="P:Zelda.Status.AuraList.CaptureVisibleAuras">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Zelda.Status.AuraList"/> is capturing
            what <see cref="T:Zelda.Status.Aura"/>s are currently visible.
            </summary>
        </member>
        <member name="P:Zelda.Status.AuraList.VisibleAuras">
            <summary>
            Gets the enumeration of currently visible auras. 
            Might be null. Warning: Don't modify this list directly.
            </summary>
        </member>
        <member name="M:Zelda.Status.AuraList.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this <see cref="T:Zelda.Status.AuraList"/>.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Status.AuraList.HasTimedAura(System.String)">
            <summary>
            Gets a value indicating whether this AuraList contains
            a TimedAura with the specified <paramref name="name"/>.
            </summary>
            <param name="name">
            The name of the TimedAura to find.
            </param>
            <returns>
            true if this AuraList contains a TimedAura that has the specified <paramref name="name"/>;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Status.AuraList.FindTimedAura(System.String)">
            <summary>
            Tries to find the TimedAura with the specified <paramref name="name"/> in this AuraList.
            </summary>
            <param name="name">
            The name of the TimedAura to find.
            </param>
            <returns>
            The TimedAura that has been found; or null if none was found.
            </returns>
        </member>
        <member name="M:Zelda.Status.AuraList.GetEffects(System.String,System.Collections.Generic.List{Zelda.Status.StatusValueEffect}@)">
            <summary>
            Gets the active <see cref="T:Zelda.Status.StatusValueEffect"/>s that match
            the specified manipulation criterica.
            </summary>
            <param name="identifier">
            The string that represents what the StatusEffects to receive are manibulating.
            </param>
            <param name="matchingEffects">
            Will contain the matching effects.
            </param>
        </member>
        <member name="M:Zelda.Status.AuraList.GetEffectValues(System.String,System.Single@,System.Single@)">
            <summary>
            Gets the value for the active <see cref="T:Zelda.Status.StatusValueEffect"/>s that match
            the specified manipulation criterica.
            </summary>
            <param name="identifier">
            The string that represents what the StatusEffects to receive are manibulating.
            </param>
            <param name="fixedValue">
            Will contain the additive effect value.
            </param>
            <param name="percentalValue">
            Will contain the multipicative effect value.
            </param>
        </member>
        <member name="M:Zelda.Status.AuraList.GetEffectValues(System.String,System.Single@,System.Single@,System.Single@)">
            <summary>
            Gets the value for the active <see cref="T:Zelda.Status.StatusValueEffect"/>s that match
            the specified manipulation criterica.
            </summary>
            <param name="identifier">
            The string that represents what the StatusEffects to receive are manibulating.
            </param>
            <param name="fixedValue">
            Will contain the additive effect value.
            </param>
            <param name="percentalValue">
            Will contain the multipicative effect value.
            </param>
            <param name="ratingValue">
            Will contain the rating effect value.
            </param>
        </member>
        <member name="M:Zelda.Status.AuraList.GetEffectValues(System.String,System.String,System.Single@,System.Single@)">
            <summary>
            Gets the value for the active <see cref="T:Zelda.Status.StatusValueEffect"/>s that match
            atleast one of the two the specified manipulation critericas.
            </summary>
            <param name="identifierA">
            The first string that represents what the StatusEffects to receive are manibulating.
            </param>
            <param name="identifierB">
            The second string that represents what the StatusEffects to receive are manibulating.
            </param>
            <param name="fixedValue">
            Will contain the additive effect value.
            </param>
            <param name="percentalValue">
            Will contain the multipicative effect value.
            </param>
        </member>
        <member name="M:Zelda.Status.AuraList.GetEffectValues(System.String,System.String,System.Single@,System.Single@,System.Single@)">
            <summary>
            Gets the value for the active <see cref="T:Zelda.Status.StatusValueEffect"/>s that match
            atleast one of the two the specified manipulation critericas.
            </summary>
            <param name="identifierA">
            The first string that represents what the StatusEffects to receive are manibulating.
            </param>
            <param name="identifierB">
            The second string that represents what the StatusEffects to receive are manibulating.
            </param>
            <param name="fixedValue">
            Will contain the additive effect value.
            </param>
            <param name="percentalValue">
            Will contain the multipicative effect value.
            </param>
            <param name="ratingValue">
            Will contain the rating effect value.
            </param>
        </member>
        <member name="M:Zelda.Status.AuraList.GetPercentalAndRatingEffectValues(System.String,System.Single@,System.Single@)">
            <summary>
            Gets the value for the active <see cref="T:Zelda.Status.StatusValueEffect"/>s that match
            atleast one of the two the specified manipulation critericas.
            </summary>
            <param name="identifier">
            The first string that represents what the StatusEffects to receive are manibulating.
            </param>
            <param name="percentalValue">
            Will contain the multipicative effect value.
            </param>
            <param name="ratingValue">
            Will contain the rating effect value.
            </param>
        </member>
        <member name="M:Zelda.Status.AuraList.GetPercentalAndRatingEffectValues(System.String,System.String,System.Single@,System.Single@)">
            <summary>
            Gets the value for the active <see cref="T:Zelda.Status.StatusValueEffect"/>s that match
            atleast one of the two the specified manipulation critericas.
            </summary>
            <param name="identifierA">
            The first string that represents what the StatusEffects to receive are manibulating.
            </param>
            <param name="identifierB">
            The second string that represents what the StatusEffects to receive are manibulating.
            </param>
            <param name="percentalValue">
            Will contain the multipicative effect value.
            </param>
            <param name="ratingValue">
            Will contain the rating effect value.
            </param>
        </member>
        <member name="M:Zelda.Status.AuraList.GetFixedEffectValue(System.String)">
            <summary>
            Gets the fixed value for the active <see cref="T:Zelda.Status.StatusValueEffect"/>s that match
            the specified manipulation criterica.
            </summary>
            <param name="identifier">
            The string that represents what the StatusEffects to receive are manibulating.
            </param>
            <returns>
            The fixed value.
            </returns>
        </member>
        <member name="M:Zelda.Status.AuraList.GetPercentalEffectValue(System.String)">
            <summary>
            Gets the percental value for the active <see cref="T:Zelda.Status.StatusValueEffect"/>s
            of the specified <paramref name="identifier"/>.
            </summary>
            <param name="identifier">
            The string that represents what the StatusEffects to receive are manibulating.
            </param>
            <returns>
            The percental value.
            </returns>
        </member>
        <member name="M:Zelda.Status.AuraList.GetPercentalEffectValue(System.String,System.String)">
            <summary>
            Gets the percental value for the active <see cref="T:Zelda.Status.StatusValueEffect"/>s that matches
            atleast one of the specified manipulation critericas.
            </summary>    
            <param name="identifierA">
            The first string that represents what the StatusEffects to receive are manibulating.
            </param>
            <param name="identifierB">
            The second string that represents what the StatusEffects to receive are manibulating.
            </param>
            <returns>
            The percental value.
            </returns>
        </member>
        <member name="M:Zelda.Status.AuraList.Add(Zelda.Status.PermanentAura)">
            <summary>
            Adds the specified <see cref="T:Zelda.Status.PermanentAura"/> to this <see cref="T:Zelda.Status.AuraList"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="aura"/> is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            If the <paramref name="aura"/> already has been added to a <see cref="T:Zelda.Status.AuraList"/>.
            </exception>
            <param name="aura"> The aura to add, must be disabled. </param>
        </member>
        <member name="M:Zelda.Status.AuraList.Remove(Zelda.Status.PermanentAura)">
            <summary>
            Tries to remove the specified <see cref="T:Zelda.Status.PermanentAura"/> from this <see cref="T:Zelda.Status.AuraList"/>.
            </summary>
            <param name="aura">
            The aura to remove.
            </param>
            <returns>
            true if the PermanentAura has been removed; 
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Status.AuraList.Add(Zelda.Status.TimedAura)">
            <summary>
            Adds the specified <see cref="T:Zelda.Status.TimedAura"/> to this <see cref="T:Zelda.Status.AuraList"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="aura"/> is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            If the <paramref name="aura"/> already has been added to a different <see cref="T:Zelda.Status.AuraList"/>.
            </exception>
            <param name="aura"> The aura to add, must be disabled. </param>
        </member>
        <member name="M:Zelda.Status.AuraList.Remove(Zelda.Status.TimedAura)">
            <summary>
            Tries to remove the specified <see cref="T:Zelda.Status.TimedAura"/> from this <see cref="T:Zelda.Status.AuraList"/>.
            </summary>
            <param name="aura">
            The aura to remove.
            </param>
            <returns>
            true if the TimedAura has been removed; 
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Status.AuraList.RemoveTimedAura(System.Int32,Zelda.Status.TimedAura)">
            <summary>
            Removes the TimedAura at the specified index.
            </summary>
            <param name="index">
            The index of the aura to remove.
            </param>
            <param name="aura">
            The TimedAura to remove.
            </param>
        </member>
        <member name="M:Zelda.Status.AuraList.AddEffect(Zelda.Status.StatusValueEffect)">
            <summary>
            Adds and enables the specified StatusValueEffect.
            </summary>
            <param name="effect">
            The effect to add.
            </param>
        </member>
        <member name="M:Zelda.Status.AuraList.AddEffects(System.Collections.Generic.List{Zelda.Status.StatusEffect})">
            <summary>
            Adds the specified StatusEffects to this AuraList;
            without enableding them.
            </summary>
            <param name="effects">
            The list of StatusEffects to add.
            </param>
        </member>
        <member name="M:Zelda.Status.AuraList.RemoveEffects(System.Collections.Generic.List{Zelda.Status.StatusEffect})">
            <summary>
            Removes the specified StatusEffects from this AuraList.
            </summary>
            <param name="effects">
            The list of StatusEffects to remove.
            </param>
        </member>
        <member name="M:Zelda.Status.AuraList.AddToVisibleListIfRequired(Zelda.Status.Aura)">
            <summary>
            Adds the specified Aura to the list of visibleAuras
            if required.
            </summary>
            <param name="aura">
            The aura to investigate.
            </param>
        </member>
        <member name="M:Zelda.Status.AuraList.RemoveFromVisibleAuras(Zelda.Status.Aura)">
            <summary>
            Removes the specified Aura from the list of visibleAuras
            if required.
            </summary>
            <param name="aura">
            The aura to investigate.
            </param>
        </member>
        <member name="M:Zelda.Status.AuraList.RefreshVisibleAuras">
            <summary>
            Rebuilds the visibleAuras list.
            </summary>
        </member>
        <member name="M:Zelda.Status.AuraList.Clear">
            <summary>
            Removes all permanent and all timed auras from this AuraList.
            </summary>
        </member>
        <member name="F:Zelda.Status.AuraList.owner">
            <summary>
            Identifies the Statable component that owns this <see cref="T:Zelda.Status.AuraList"/>.
            </summary>
        </member>
        <member name="F:Zelda.Status.AuraList.visibleAuras">
            <summary>
            Lists the currently active visible <see cref="T:Zelda.Status.Aura"/>s.
            </summary>
        </member>
        <member name="F:Zelda.Status.AuraList.permanentAuras">
            <summary>
            Lists the currently active <see cref="T:Zelda.Status.PermanentAura"/>s.
            </summary>
        </member>
        <member name="F:Zelda.Status.AuraList.timedAuras">
            <summary>
            Lists the currently active <see cref="T:Zelda.Status.TimedAura"/>s.
            </summary>
        </member>
        <member name="F:Zelda.Status.AuraList.effects">
            <summary>
            The list of active <see cref="T:Zelda.Status.StatusValueEffect"/>s.
            </summary>
        </member>
        <member name="T:Zelda.Status.Auras.DamageOverTimeAura">
            <summary>
            Defines a <see cref="T:Zelda.Status.TimedAura"/> that applies damage over time.
            </summary>
        </member>
        <member name="P:Zelda.Status.Auras.DamageOverTimeAura.DamageEachTick">
            <summary>
            Gets or sets the amount of damage each tick of this DamageOverTimeAura does. 
            </summary>
        </member>
        <member name="P:Zelda.Status.Auras.DamageOverTimeAura.PowerType">
            <summary>
            Gets or sets the power type that is affected by this DamageOverTimeAura.
            </summary>
        </member>
        <member name="P:Zelda.Status.Auras.DamageOverTimeAura.ManipulationType">
            <summary>
            Gets or sets status manipulation type that is used when applying the damage of this DamageOverTimeAura.
            </summary>
        </member>
        <member name="P:Zelda.Status.Auras.DamageOverTimeAura.Attacker">
            <summary>
            Gets or sets the <see cref="T:Zelda.Entities.IAttackableEntity"/> that has applied this DamageOverTimeAura.
            </summary>
        </member>
        <member name="M:Zelda.Status.Auras.DamageOverTimeAura.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Status.Auras.DamageOverTimeAura"/> class.
            </summary>
            <param name="totalTime">
            The time (in seconds) the new DamageOverTimeAura lasts.
            </param>
            <param name="tickTime">
            The time (in seconds) between two ticks.
            </param>
        </member>
        <member name="M:Zelda.Status.Auras.DamageOverTimeAura.#ctor(System.Single,System.Single,Zelda.Status.StatusEffect,Zelda.Entities.IAttackableEntity)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Status.Auras.DamageOverTimeAura"/> class.
            </summary>
            <param name="totalTime">
            The time (in seconds) the new DamageOverTimeAura lasts.
            </param>
            <param name="tickTime">
            The time (in seconds) between two ticks.
            </param>
            <param name="effect">
            The <see cref="T:Zelda.Status.StatusEffect"/> the new DamageOverTimeAura applies additionaly.
            </param>
            <param name="attacker">
            Identifies the Entity that has applied the new DamageOverTimeAura.
            </param>
        </member>
        <member name="M:Zelda.Status.Auras.DamageOverTimeAura.#ctor(System.Single,System.Single,Zelda.Status.StatusEffect[],Zelda.Entities.IAttackableEntity)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Status.Auras.DamageOverTimeAura"/> class.
            </summary>
            <exception cref="T:System.ArgumentNullException"> 
            If <paramref name="effects"/> is null.
            </exception>
            <param name="totalTime">
            The time (in seconds) the new DamageOverTimeAura lasts.
            </param>
            <param name="tickTime">
            The time (in seconds) between two ticks.
            </param>
            <param name="effects">
            The list of <see cref="T:Zelda.Status.StatusEffect"/>s of the new DamageOverTimeAura.
            </param>
            <param name="attacker">
            Identifies the Entity that has applied the new DamageOverTimeAura.
            </param>
        </member>
        <member name="M:Zelda.Status.Auras.DamageOverTimeAura.OnTicked">
            <summary>
            Called when this DamageOverTimeAura has ticked.
            </summary>
        </member>
        <member name="M:Zelda.Status.Auras.DamageOverTimeAura.ApplyLifeDamage">
            <summary>
            Applies life damage to the owner of this DamageOverTimeAura.
            </summary>
        </member>
        <member name="M:Zelda.Status.Auras.DamageOverTimeAura.ApplyManaDamage">
            <summary>
            Applies mana damage to the owner of this DamageOverTimeAura.
            </summary>
        </member>
        <member name="M:Zelda.Status.Auras.DamageOverTimeAura.OnEnabled(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.Aura"/> got enabled.
            </summary>
            <param name="owner">
            The Statable that now owns this Aura.
            </param>
        </member>
        <member name="M:Zelda.Status.Auras.DamageOverTimeAura.OnDisabled(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.Aura"/> got disabled.
            </summary>
            <param name="owner">
            The Statable that previously owned this Aura.
            </param>
        </member>
        <member name="M:Zelda.Status.Auras.DamageOverTimeAura.Clone">
            <summary>
            Returns a clone of this <see cref="T:Zelda.Status.Auras.DamageOverTimeAura"/>.
            </summary>
            <returns>The cloned Aura.</returns>
        </member>
        <member name="M:Zelda.Status.Auras.DamageOverTimeAura.SetupClone(Zelda.Status.Auras.DamageOverTimeAura)">
            <summary>
            Setups the specified DamageOverTimeAura to be a clone of this DamageOverTimeAura.
            </summary>
            <param name="clone">
            The DamageOverTimeAura to setup as a clone of this DamageOverTimeAura.
            </param>
        </member>
        <member name="F:Zelda.Status.Auras.DamageOverTimeAura.damageEachTick">
            <summary>
            The daamge that is applied when this DamageOverTimeAura ticks.
            </summary>
        </member>
        <member name="F:Zelda.Status.Auras.DamageOverTimeAura.attackable">
            <summary>
            Identifies the Attackable component of the currently active AuraList.Owner.
            </summary>
        </member>
        <member name="F:Zelda.Status.Auras.DamageOverTimeAura.attacker">
            <summary>
            Identifies the Entity that has applied this DamageOverTimeAura.
            </summary>
        </member>
        <member name="T:Zelda.Status.Auras.FixedManaRegenerationAura">
            <summary>
            Defines a <see cref="T:Zelda.Status.TimedAura"/> that regenerates mana over time.
            This is a sealed class.
            </summary>
        </member>
        <member name="P:Zelda.Status.Auras.FixedManaRegenerationAura.ManaEachTick">
            <summary>
            Gets or sets the amount of damage each tick of this FixedManaRegenerationAura does. 
            </summary>
        </member>
        <member name="M:Zelda.Status.Auras.FixedManaRegenerationAura.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Status.Auras.FixedManaRegenerationAura"/> class.
            </summary>
            <param name="totalTime">
            The time (in seconds) the new FixedManaRegenerationAura lasts.
            </param>
            <param name="tickTime">
            The time (in seconds) between two ticks.
            </param>
        </member>
        <member name="M:Zelda.Status.Auras.FixedManaRegenerationAura.OnTicked">
            <summary>
            Called when this FixedManaRegenerationAura is ticking.
            </summary>
        </member>
        <member name="M:Zelda.Status.Auras.FixedManaRegenerationAura.OnEnabled(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.Aura"/> got enabled.
            </summary>
            <param name="owner">
            The Statable that now owns this Aura.
            </param>
        </member>
        <member name="M:Zelda.Status.Auras.FixedManaRegenerationAura.OnDisabled(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.Aura"/> got disabled.
            </summary>
            <param name="owner">
            The Statable that previously owned this Aura.
            </param>
        </member>
        <member name="M:Zelda.Status.Auras.FixedManaRegenerationAura.Clone">
            <summary>
            Returns a clone of this <see cref="T:Zelda.Status.Auras.FixedManaRegenerationAura"/>.
            </summary>
            <returns>The cloned Aura.</returns>
        </member>
        <member name="F:Zelda.Status.Auras.FixedManaRegenerationAura.statable">
            <summary>
            Identifies the Statable component of the currently active AuraList.Owner.
            </summary>
        </member>
        <member name="T:Zelda.Status.Auras.PermanentDamageOverTimeAura">
            <summary>
            Defines a <see cref="T:Zelda.Status.PermanentAura"/> that applies DamageOverTime to its owning StatusObject.
            </summary>
            <remarks>
            DamageOverTime(DoT) StatusEffects never crit, nor can the individual ticks get resisted.
            </remarks>
        </member>
        <member name="P:Zelda.Status.Auras.PermanentDamageOverTimeAura.DamageEachTick">
            <summary>
            Gets or sets the amount of damage this <see cref="T:Zelda.Status.Auras.PermanentDamageOverTimeAura"/> applies each tick. 
            </summary>
        </member>
        <member name="P:Zelda.Status.Auras.PermanentDamageOverTimeAura.ManipType">
            <summary>
            Gets or sets how the <see cref="P:Zelda.Status.Auras.PermanentDamageOverTimeAura.DamageEachTick"/> property
            should be interpreted.
            </summary>
        </member>
        <member name="P:Zelda.Status.Auras.PermanentDamageOverTimeAura.PowerType">
            <summary>
            Gets or sets what kind of power this <see cref="T:Zelda.Status.Auras.PermanentDamageOverTimeAura"/> manibulates.
            </summary>
        </member>
        <member name="P:Zelda.Status.Auras.PermanentDamageOverTimeAura.TickTime">
            <summary>
            Gets or sets the time (in seconds) between two ticks.
            </summary>
        </member>
        <member name="M:Zelda.Status.Auras.PermanentDamageOverTimeAura.#ctor(Zelda.Entities.IAttackableEntity)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Status.Auras.PermanentDamageOverTimeAura"/> class.
            </summary>
            <param name="attacker">
            Identifies the Entity that has applied the new PermanentDamageOverTimeAura.
            </param>
        </member>
        <member name="M:Zelda.Status.Auras.PermanentDamageOverTimeAura.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this <see cref="T:Zelda.Status.Auras.PermanentDamageOverTimeAura"/>.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Status.Auras.PermanentDamageOverTimeAura.ResetTick">
            <summary>
            Resets the time until this <see cref="T:Zelda.Status.Auras.PermanentDamageOverTimeAura"/> ticks again.
            </summary>
        </member>
        <member name="M:Zelda.Status.Auras.PermanentDamageOverTimeAura.OnTick">
            <summary>
            Applies the damage inflicates by this <see cref="T:Zelda.Status.Auras.PermanentDamageOverTimeAura"/>.
            </summary>
        </member>
        <member name="M:Zelda.Status.Auras.PermanentDamageOverTimeAura.OnEnabled(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.Aura"/> got enabled.
            </summary>
            <param name="owner">
            The Statable that now owns this Aura.
            </param>
        </member>
        <member name="M:Zelda.Status.Auras.PermanentDamageOverTimeAura.OnDisabled(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.Aura"/> got disabled.
            </summary>
            <param name="owner">
            The Statable that previously owned this Aura.
            </param>
        </member>
        <member name="M:Zelda.Status.Auras.PermanentDamageOverTimeAura.Clone">
            <summary>
            Creates a clone of this <see cref="T:Zelda.Status.Auras.PermanentDamageOverTimeAura"/>.
            </summary>
            <returns>The cloned Aura.</returns>
        </member>
        <member name="F:Zelda.Status.Auras.PermanentDamageOverTimeAura.tickTimeLeft">
            <summary>
            The time (in seconds) left until this PermanentDamageOverTimeAura ticks again.
            </summary>
        </member>
        <member name="F:Zelda.Status.Auras.PermanentDamageOverTimeAura.tickTime">
            <summary>
            The time (in seconds) between two ticks.
            </summary>
        </member>
        <member name="F:Zelda.Status.Auras.PermanentDamageOverTimeAura.attackable">
            <summary>
            Identifies the Attackable component of the currently active AuraList.Owner.
            </summary>
        </member>
        <member name="F:Zelda.Status.Auras.PermanentDamageOverTimeAura.attacker">
            <summary>
            Identifies the Entity that has applied this PermanentDamageOverTimeAura.
            </summary>
        </member>
        <member name="T:Zelda.Status.Auras.TickingAura">
            <summary>
            Represents a <see cref="T:Zelda.Status.TimedAura"/> that ticks in a fixed interval.
            </summary>
        </member>
        <member name="E:Zelda.Status.Auras.TickingAura.Ticked">
            <summary>
            Raised when this TickingAura has ticked.
            </summary>
        </member>
        <member name="P:Zelda.Status.Auras.TickingAura.TickTime">
            <summary>
            Gets or sets the time a single tick of this TIckingAura lasts.
            </summary>
        </member>
        <member name="P:Zelda.Status.Auras.TickingAura.TickCount">
            <summary>
            Gets the number of ticks this TickingAura will have.
            </summary>
        </member>
        <member name="M:Zelda.Status.Auras.TickingAura.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Status.Auras.TickingAura"/> class.
            </summary>
            <param name="totalTime">
            The total time (in seconds) the new TickingAura lasts.
            </param>
            <param name="tickTime">
            The time (in seconds) between two ticks of the new TickingAura.
            </param>
        </member>
        <member name="M:Zelda.Status.Auras.TickingAura.#ctor(System.Single,System.Single,Zelda.Status.StatusEffect[])">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Status.Auras.TickingAura"/> class.
            </summary>
            <exception cref="T:System.ArgumentNullException"> 
            If <paramref name="effects"/> is null.
            </exception>
            <param name="totalTime">
            The total time (in seconds) the new TickingAura lasts.
            </param>
            <param name="tickTime">
            The time (in seconds) between two ticks of the new TickingAura.
            </param>
            <param name="effects">
            The list of <see cref="T:Zelda.Status.StatusEffect"/>s of the new TickingAura.
            </param>
        </member>
        <member name="M:Zelda.Status.Auras.TickingAura.Initialize(System.Single)">
            <summary>
            Initializes this TickingAura.
            </summary>
            <param name="tickTime">
            The time (in seconds) between two ticks of the TickingAura.
            </param>
        </member>
        <member name="M:Zelda.Status.Auras.TickingAura.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this TickingAura.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Status.Auras.TickingAura.ResetTick">
            <summary>
            Resets the time until the TickingAura ticks again.
            </summary>
        </member>
        <member name="M:Zelda.Status.Auras.TickingAura.OnTickedPrivate">
            <summary>
            Raises the Ticked event.
            </summary>
        </member>
        <member name="M:Zelda.Status.Auras.TickingAura.OnTicked">
            <summary>
            Called when this TickingAura has ticked.
            </summary>
        </member>
        <member name="M:Zelda.Status.Auras.TickingAura.Clone">
            <summary>
            Returns a clone of this <see cref="T:Zelda.Status.Auras.TickingAura"/>.
            </summary>
            <returns>The cloned Aura.</returns>
        </member>
        <member name="F:Zelda.Status.Auras.TickingAura.timeLeftUntilNextTick">
            <summary>
            The time left until this TickingAura ticks again.
            </summary>
        </member>
        <member name="F:Zelda.Status.Auras.TickingAura.tickTime">
            <summary>
            The storage field of the <see cref="P:Zelda.Status.Auras.TickingAura.TickTime"/> property.
            </summary>
        </member>
        <member name="T:Zelda.Status.IAura">
            <summary>
            Specifies the common interface of all Auras; 
            which are compositions of StatusEffects.
            </summary>
        </member>
        <member name="E:Zelda.Status.IAura.Enabled">
            <summary>
            Fired when this Aura has been enabled.
            </summary>
        </member>
        <member name="E:Zelda.Status.IAura.Disabled">
            <summary>
            Fired when this Aura has been disabled.
            </summary>
        </member>
        <member name="M:Zelda.Status.IAura.Update(Zelda.ZeldaUpdateContext)">
            <summary>        
            Updates this <see cref="T:Zelda.Status.IAura"/>.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="T:Zelda.Status.PermanentAura">
            <summary>
            A <see cref="T:Zelda.Status.PermanentAura"/> is an <see cref="T:Zelda.Status.Aura"/> that stays active until it's manually removed.
            </summary>
        </member>
        <member name="M:Zelda.Status.PermanentAura.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Status.PermanentAura"/> class.
            </summary>
        </member>
        <member name="M:Zelda.Status.PermanentAura.#ctor(Zelda.Status.StatusEffect)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Status.PermanentAura"/> class.
            </summary>
            <param name="effect"> 
            The <see cref="T:Zelda.Status.StatusEffect"/> the new <see cref="T:Zelda.Status.PermanentAura"/> applies.
            </param>
        </member>
        <member name="M:Zelda.Status.PermanentAura.#ctor(Zelda.Status.StatusEffect,Zelda.Status.StatusEffect)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Status.PermanentAura"/> class.
            </summary>
            <param name="firstEffect"> 
            The first <see cref="T:Zelda.Status.StatusEffect"/> the new <see cref="T:Zelda.Status.PermanentAura"/> applies.
            </param>
            <param name="secondEffect"> 
            The second <see cref="T:Zelda.Status.StatusEffect"/> the new <see cref="T:Zelda.Status.PermanentAura"/> applies.
            </param>
        </member>
        <member name="M:Zelda.Status.PermanentAura.#ctor(Zelda.Status.StatusEffect[])">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Status.PermanentAura"/> class.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="effects"/> is null.
            </exception>
            <param name="effects"> The list of <see cref="T:Zelda.Status.StatusEffect"/>s of the new <see cref="T:Zelda.Status.PermanentAura"/>. </param>
        </member>
        <member name="M:Zelda.Status.PermanentAura.AddEffect(Zelda.Status.StatusEffect)">
            <summary>
            Adds the specified StatusEffect to this PermanentAura.
            </summary>
            <param name="effect">
            The StatusEffect to add.
            </param>
        </member>
        <member name="M:Zelda.Status.PermanentAura.MergeAdd(System.Collections.Generic.IEnumerable{Zelda.Status.StatusEffect})">
            <summary>
            Adds the given StatusValueEffects to this PermanentAura by simply adding the effect
            or if possible merging the value with an existing effect.
            </summary>
            <param name="effects">
            The StatusEffects to merge/add.
            </param>
        </member>
        <member name="M:Zelda.Status.PermanentAura.MergeAdd(Zelda.Status.StatusValueEffect)">
            <summary>
            Adds the given StatusValueEffect to this PermanentAura by simply adding the effect
            or if possible merging the value with an existing effect.
            </summary>
            <param name="effect">
            The effect to merge/add.
            </param>
        </member>
        <member name="M:Zelda.Status.PermanentAura.SortEffects">
            <summary>
            Sorts the StatusEffects of this PermanentAura.
            </summary>
        </member>
        <member name="M:Zelda.Status.PermanentAura.CompareEffects(Zelda.Status.StatusEffect,Zelda.Status.StatusEffect)">
            <summary>
            Used to compare two StatusEffects while sorting.
            </summary>
            <param name="x">
            The StatusEffect on the left side.
            </param>
            <param name="y">
            The StatusEffect on the right side.
            </param>
            <returns>
            An integer that 
            </returns>
        </member>
        <member name="M:Zelda.Status.PermanentAura.GetExistingValueEffectEqual(Zelda.Status.StatusValueEffect)">
            <summary>
            Tries to get an existing StatusValueEffect that equals the given StatusEffect.
            </summary>
            <param name="inputEffect">
            The input StatusEffect.
            </param>
            <returns>
            An StatusValueEffect instance that is part of this Aura; or null.
            </returns>
        </member>
        <member name="M:Zelda.Status.PermanentAura.Clone">
            <summary>
            Creates a clone of this <see cref="T:Zelda.Status.PermanentAura"/>.
            </summary>
            <returns>The cloned Aura.</returns>
        </member>
        <member name="T:Zelda.Status.Pooling.AuraPool`1">
            <summary>
            Defines a <see cref="T:Atom.Collections.Pooling.Pool`1"/> that contains poolable <see cref="T:Zelda.Status.Aura"/>
            objects.
            </summary>
            <typeparam name="TAura">
            The type of Aura the AuraPool can contain.
            </typeparam>
        </member>
        <member name="M:Zelda.Status.Pooling.AuraPool`1.#ctor(System.Int32,Atom.Collections.Pooling.PooledObjectCreator{Atom.Collections.Pooling.IPooledObjectWrapper{`0}})">
            <summary>
            Initializes a new instance of the AuraPool class.
            </summary>
            <param name="initialCapacity">
            The initial capacity of the new AuraPool{TAura}.
            </param>
            <param name="creator">
            The creation function of the new AuraPool.
            </param>
        </member>
        <member name="M:Zelda.Status.Pooling.AuraPool`1.Create(System.Int32,Atom.Collections.Pooling.PooledObjectCreator{Atom.Collections.Pooling.IPooledObjectWrapper{`0}})">
            <summary>
            Creates a new instance of the AuraPool{TAura} class that has the specified number of pre-allocated PoolNode{TAura}s.
            </summary>
            <param name="initialSize">
            The initial size of the new AuraPool{TAura}.
            </param>
            <param name="creator">
            The creation function of the new AuraPool.
            </param>
            <returns>
            The newly created AuraPool{TAura}.
            </returns>
        </member>
        <member name="M:Zelda.Status.Pooling.AuraPool`1.OnCreated(Atom.Collections.Pooling.PoolNode{Atom.Collections.Pooling.IPooledObjectWrapper{`0}})">
            <summary>
            Called when the given PoolNode&lt;IPooledObjectWrapper&lt;TAura&gt;&gt; has been created
            for this Pool{T}.
            </summary>
            <param name="node">
            The PoolNode{T} that has just been created.
            This value is never null.
            </param>
        </member>
        <member name="M:Zelda.Status.Pooling.AuraPool`1.OnAuraDisabled(System.Object,Zelda.Status.Statable)">
            <summary>
            Called when an Aura created by this AuraPool has been disabled.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
            <param name="oldOwner">
            The Statable component of the Entity that has owned the Aura before it got disabled.
            </param>
        </member>
        <member name="T:Zelda.Status.Pooling.PooledDamageOverTimeAura">
            <summary>
            Defines a wrapper around <see cref="T:Zelda.Status.TimedAura"/> that can be pooled within
            an <see cref="T:Zelda.Status.Pooling.AuraPool`1"/>.
            This class can't be inherited.
            </summary>
        </member>
        <member name="M:Zelda.Status.Pooling.PooledDamageOverTimeAura.#ctor(Zelda.Status.Auras.DamageOverTimeAura)">
            <summary>
            Initializes a new instance of the PooledDamageOverTimeAura class.
            </summary>
            <param name="aura">
            The DamageOverTimeAura that actually gets pooled.
            </param>
        </member>
        <member name="T:Zelda.Status.Pooling.PooledTimedAura">
            <summary>
            Defines a wrapper around <see cref="T:Zelda.Status.TimedAura"/> that can be pooled within
            an <see cref="T:Zelda.Status.Pooling.AuraPool`1"/>.
            This class can't be inherited.
            </summary>
        </member>
        <member name="M:Zelda.Status.Pooling.PooledTimedAura.#ctor">
            <summary>
            Initializes a new instance of the PooledTimedAura class.
            </summary>
        </member>
        <member name="T:Zelda.Status.TimedAura">
            <summary>
            A <see cref="T:Zelda.Status.TimedAura"/> is an <see cref="T:Zelda.Status.Aura"/> that stays active until for a given <see cref="P:Zelda.Status.TimedAura.Cooldown"/>.
            </summary>
        </member>
        <member name="P:Zelda.Status.TimedAura.Cooldown">
            <summary>
            Gets the cooldown of this <see cref="T:Zelda.Status.TimedAura"/>.
            </summary>
        </member>
        <member name="P:Zelda.Status.TimedAura.Duration">
            <summary>
            Gets or sets the total duration this TimedAura lasts.
            </summary>
        </member>
        <member name="P:Zelda.Status.TimedAura.IsActive">
            <summary>
            Gets a value indicating whether this <see cref="T:Zelda.Status.TimedAura"/> is still active.
            </summary>
        </member>
        <member name="M:Zelda.Status.TimedAura.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Status.TimedAura"/> class.
            </summary>
        </member>
        <member name="M:Zelda.Status.TimedAura.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Status.TimedAura"/> class.
            </summary>
            <param name="time">
            The time the new TimedAura lasts.
            </param>
        </member>
        <member name="M:Zelda.Status.TimedAura.#ctor(System.Single,Zelda.Status.StatusEffect)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Status.TimedAura"/> class.
            </summary>
            <exception cref="T:System.ArgumentNullException"> 
            If <paramref name="effect"/> is null.
            </exception>
            <param name="time">
            The time the new TimedAura lasts.
            </param>
            <param name="effect">
            The StatusEffect that gets applied by the new TimedAura.
            </param>
        </member>
        <member name="M:Zelda.Status.TimedAura.#ctor(System.Single,Zelda.Status.StatusEffect[])">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Status.TimedAura"/> class.
            </summary>
            <exception cref="T:System.ArgumentNullException"> 
            If <paramref name="effects"/> is null.
            </exception>
            <param name="time">
            The time the new TimedAura lasts.
            </param>
            <param name="effects">
            The list of <see cref="T:Zelda.Status.StatusEffect"/>s of the new TimedAura.
            </param>
        </member>
        <member name="M:Zelda.Status.TimedAura.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this <see cref="T:Zelda.Status.TimedAura"/>.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Status.TimedAura.ResetDuration">
            <summary>
            Resets the time this <see cref="T:Zelda.Status.TimedAura"/> lasts.
            </summary>
        </member>
        <member name="M:Zelda.Status.TimedAura.GetEffectDescription(Zelda.Status.Statable)">
            <summary>
            Gets a localized string that descripes the effect(s) of this TimedAura.
            </summary>
            <param name="statable">
            The statable component of the entity that wants to receive the description about this StatusEffect.
            </param>
            <returns>
            The localized effect description.
            </returns>
        </member>
        <member name="M:Zelda.Status.TimedAura.GetEffectsDescription(Zelda.Status.Statable)">
            <summary>
            Gets a localized string that descripes the effect of the proc effect of this TimedStatusProcEffect;
            taking into account that the effect consists of multiple other StatusEffects.
            </summary>
            <param name="statable">
            The statable component of the entity that wants to receive the description about this StatusEffect.
            </param>
            <returns>
            The localized effect description.
            </returns>
        </member>
        <member name="M:Zelda.Status.TimedAura.AppendEffectDescription(System.Int32,System.Text.StringBuilder,Zelda.Status.Statable)">
            <summary>
            Appends the description of the StatusEffect at the given index to the given StringBuilder.
            </summary>
            <param name="effectIndex">
            The index of the StatusEffect.
            </param>
            <param name="sb">
            The StringBuilder that should be used.
            </param>
            <param name="statable">
            The statable component of the entity that wants to receive the description about this StatusEffect.
            </param>
        </member>
        <member name="M:Zelda.Status.TimedAura.AppendSeperator(System.Int32,System.Text.StringBuilder)">
            <summary>
            Appends a seperator between two effect description elements.
            </summary>
            <param name="effectIndex">
            The index of the StatusEffect.
            </param>
            <param name="sb">
            The StringBuilder that should be used.
            </param>
        </member>
        <member name="M:Zelda.Status.TimedAura.GetEffectDescription(System.Int32,Zelda.Status.Statable)">
            <summary>
            Gets the description of the StatusEffect at the given index.
            </summary>
            <param name="effectIndex">
            The index of the StatusEffect.
            </param>
            <param name="statable">
            The statable component of the entity that wants to receive the description about this StatusEffect.
            </param>
            <returns>
            The description of the effect.
            </returns>
        </member>
        <member name="M:Zelda.Status.TimedAura.Clone">
            <summary>
            Returns a clone of this <see cref="T:Zelda.Status.TimedAura"/>.
            </summary>
            <returns>The cloned Aura.</returns>
        </member>
        <member name="M:Zelda.Status.TimedAura.SetupClone(Zelda.Status.TimedAura)">
            <summary>
            Setups the given TimedAura to be a clone of this TimedAura.
            </summary>
            <param name="clone">
            The TimedAura to setup as a clone of this TimedAura.
            </param>
        </member>
        <member name="M:Zelda.Status.TimedAura.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Status.TimedAura.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Status.TimedAura.cooldown">
            <summary>
            Stores the time this <see cref="T:Zelda.Status.TimedAura"/> lasts.
            </summary>
        </member>
        <member name="T:Zelda.Status.CombatEventArgs">
            <summary>
            Defines the event arguments used by the Statable.
            </summary>
        </member>
        <member name="F:Zelda.Status.CombatEventArgs.User">
            <summary>
            The object that initiated the combat event.
            </summary>
        </member>
        <member name="F:Zelda.Status.CombatEventArgs.Target">
            <summary>
            The target of the combat event.
            </summary>
        </member>
        <member name="M:Zelda.Status.CombatEventArgs.#ctor(Zelda.Status.Statable,Zelda.Status.Statable)">
            <summary>
            Initializes a new instance of the CombatEventArgs structure.
            </summary>
            <param name="user">
            The user of the combat event.
            </param>
            <param name="target">
            The target of the combat event.
            </param>
        </member>
        <member name="T:Zelda.Status.Containers.ChanceToBeContainer">
            <summary>
            Encapsulates various status properties with a chance;
            such as chance-to-be parry or chance-to-be hit.
            </summary>
        </member>
        <member name="P:Zelda.Status.Containers.ChanceToBeContainer.BaseCrit">
            <summary>
            Gets or sets the base extra chance for the Statable that own this ChanceToBeContainer
            to be the receiver of a critical attack.
            </summary>
        </member>
        <member name="P:Zelda.Status.Containers.ChanceToBeContainer.BaseHit">
            <summary>
            Gets or sets the base extra chance for the Statable that owns this ChanceToBeContainer
            to be the receiver of an attack.
            </summary>
        </member>
        <member name="P:Zelda.Status.Containers.ChanceToBeContainer.Crit">
            <summary>
            Gets or sets the extra chance for the Statable that own this ChanceToBeContainer
            to be the receiver of a critical attack.
            </summary>
        </member>
        <member name="P:Zelda.Status.Containers.ChanceToBeContainer.Hit">
            <summary>
            Gets or sets the extra chance for the Statable that owns this ChanceToBeContainer
            to be the receiver of an attack.
            </summary>
        </member>
        <member name="M:Zelda.Status.Containers.ChanceToBeContainer.#ctor">
            <summary>
            Initializes a new instance of the ChanceToBeContainer class.
            </summary>
        </member>
        <member name="M:Zelda.Status.Containers.ChanceToBeContainer.Initialize(Zelda.Status.Statable)">
            <summary>
            Initializes this ChanceToBeContainer.
            </summary>
            <param name="statable">
            The statable that owns this ChanceToBeContainer.
            </param>
        </member>
        <member name="M:Zelda.Status.Containers.ChanceToBeContainer.Refresh(Zelda.Status.ChanceToStatus)">
            <summary>
            Refreshes the chance-to-be value for the specified ChanceToStatus.
            </summary>
            <param name="statusType">
            The ChanceToStatus to refresh.
            </param>
        </member>
        <member name="M:Zelda.Status.Containers.ChanceToBeContainer.RefreshHit">
            <summary>
            Refreshes the extra chance to be hit by an enemy attack.
            </summary>
        </member>
        <member name="M:Zelda.Status.Containers.ChanceToBeContainer.RefreshCrit">
            <summary>
            Refreshes the extra chance to be crit by an enemy attack.
            </summary>
        </member>
        <member name="M:Zelda.Status.Containers.ChanceToBeContainer.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Status.Containers.ChanceToBeContainer.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Status.Containers.ChanceToBeContainer.SetFinalToBase">
            <summary>
            Sets the final values to the base values.
            </summary>
        </member>
        <member name="M:Zelda.Status.Containers.ChanceToBeContainer.SetupClone(Zelda.Status.Containers.ChanceToBeContainer)">
            <summary>
            Setups the given ChanceToBeContainer to be a clone of this ChanceToBeContainer.
            </summary>
            <param name="clone">
            The ChanceToBeContainer to setup as a clone of this ChanceToBeContainer
            </param>
        </member>
        <member name="F:Zelda.Status.Containers.ChanceToBeContainer.crit">
            <summary>
            The extra chance for the owner of this ChanceToBeContainer to be
            the receiver of a critical attack. Might be a negative value.
            </summary>
        </member>
        <member name="F:Zelda.Status.Containers.ChanceToBeContainer.baseCrit">
            <summary>
            The extra chance for the owner of this ChanceToBeContainer to be
            the receiver of a critical attack. Might be a negative value.
            </summary>
        </member>
        <member name="F:Zelda.Status.Containers.ChanceToBeContainer.hit">
            <summary>
            The extra chance for the owner of this ChanceToBeContainer to be
            the receiver of an attack. Might be a negative value.
            </summary>
        </member>
        <member name="F:Zelda.Status.Containers.ChanceToBeContainer.baseHit">
            <summary>
            The extra chance for the owner of this ChanceToBeContainer to be
            the receiver of an attack. Might be a negative value.
            </summary>
        </member>
        <member name="F:Zelda.Status.Containers.ChanceToBeContainer.statable">
            <summary>
            Identifies the t component that owns this ChanceToBeContainer.
            </summary>
        </member>
        <member name="T:Zelda.Status.Containers.ChanceToContainer">
            <summary>
            Encapsulates various status properties with a chance;
            such as chance to parry, chance to miss or even chance to pierce.
            </summary>
        </member>
        <member name="F:Zelda.Status.Containers.ChanceToContainer.DefaultMiss">
            <summary>
            The default chance to miss with an outgoing attack.
            </summary>
        </member>
        <member name="F:Zelda.Status.Containers.ChanceToContainer.DefaultCrit">
            <summary>
            The default chance to crit with an outgoing attack.
            </summary>
        </member>
        <member name="F:Zelda.Status.Containers.ChanceToContainer.DefaultCritHealBlock">
            <summary>
            The default chance to crit with a life restoring effect and blocking.
            </summary>
        </member>
        <member name="F:Zelda.Status.Containers.ChanceToContainer.DefaultDodge">
            <summary>
            The default chance to dodge an incomming attack.
            </summary>
        </member>
        <member name="F:Zelda.Status.Containers.ChanceToContainer.DefaultParry">
            <summary>
            The default chance to parry an incomming attack.
            </summary>
        </member>
        <member name="F:Zelda.Status.Containers.ChanceToContainer.DefaultPierce">
            <summary>
            The default chance for a ranged attack to pierce.
            </summary>
        </member>
        <member name="F:Zelda.Status.Containers.ChanceToContainer.DefaultBlock">
            <summary>
            The default chance to block an incomming attack.
            </summary>
        </member>
        <member name="P:Zelda.Status.Containers.ChanceToContainer.Crit">
            <summary>
            Gets or sets the chance to get a critical attack in %.
            </summary>
        </member>
        <member name="P:Zelda.Status.Containers.ChanceToContainer.Miss">
            <summary>
            Gets or sets the chance to miss with an attack in %.
            </summary>
        </member>
        <member name="P:Zelda.Status.Containers.ChanceToContainer.CritHeal">
            <summary>
            Gets or sets the chance to get a critical heal in %.
            </summary>
        </member>
        <member name="P:Zelda.Status.Containers.ChanceToContainer.CritBlock">
            <summary>
            Gets or sets the chance to get a critical block in %.
            </summary>
        </member>
        <member name="P:Zelda.Status.Containers.ChanceToContainer.Dodge">
            <summary>
            Gets or sets the chance to dodge an incomming attack.
            </summary>
        </member>
        <member name="P:Zelda.Status.Containers.ChanceToContainer.Parry">
            <summary>
            Gets or sets the chance to parry an incomming attack.
            </summary>
            <remarks>
            Parried attacks still knockback.
            </remarks>
        </member>
        <member name="P:Zelda.Status.Containers.ChanceToContainer.Block">
            <summary>
            Gets or sets the chance to block an incomming attack.
            </summary>
        </member>
        <member name="P:Zelda.Status.Containers.ChanceToContainer.Pierce">
            <summary>
            Gets or sets the chance that a ranged Projectile pierces through a target it hit.
            </summary>
        </member>
        <member name="P:Zelda.Status.Containers.ChanceToContainer.AuraList">
            <summary>
            Gets the <see cref="P:Zelda.Status.Containers.ChanceToContainer.AuraList"/> of the Statable that owns this ChanceToContainer.
            </summary>
        </member>
        <member name="M:Zelda.Status.Containers.ChanceToContainer.#ctor">
            <summary>
            Initializes a new instance of the ChanceToContainer class.
            </summary>
        </member>
        <member name="M:Zelda.Status.Containers.ChanceToContainer.Initialize(Zelda.Status.Statable)">
            <summary>
            Initializes this ChanceToContainer to be used
            for the specified Statable.
            </summary>
            <param name="statable">
            The Statable component that will own the ChanceToContainer.
            </param>
        </member>
        <member name="M:Zelda.Status.Containers.ChanceToContainer.GetBase(Zelda.Status.ChanceToStatus)">
            <summary>
            Gets the base chance for the specified ChanceToStatus.
            </summary>
            <param name="statusType">
            The ChanceToStatus modifier to get.
            </param>
            <returns>
            The base chance in percent.
            </returns>
        </member>
        <member name="M:Zelda.Status.Containers.ChanceToContainer.SetBase(Zelda.Status.ChanceToStatus,System.Single)">
            <summary>
            Sets the base chance for the specified <see cref="T:Zelda.Status.ChanceToStatus"/>.
            </summary>
            <param name="statusType">
            The ChanceToStatus to set.
            </param>
            <param name="value">
            The value to set.
            </param>
        </member>
        <member name="M:Zelda.Status.Containers.ChanceToContainer.SetAvoidance(System.Single)">
            <summary>
            Sets the chance to dodge, parry and block to the specified value.
            </summary>
            <param name="value">
            The value to set.
            </param>
        </member>
        <member name="M:Zelda.Status.Containers.ChanceToContainer.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Status.Containers.ChanceToContainer.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Status.Containers.ChanceToContainer.SetFinalToBase">
            <summary>
            Sets the chance-to values to the base chance-to values.
            </summary>
        </member>
        <member name="M:Zelda.Status.Containers.ChanceToContainer.SetupClone(Zelda.Status.Containers.ChanceToContainer)">
            <summary>
            Setups the given ChanceToContainer to be a clone of this
            ChanceToContainer.
            </summary>
            <param name="clone">
            The ChanceToContainer to setup as a clone of this ChanceToContainer.
            </param>
        </member>
        <member name="F:Zelda.Status.Containers.ChanceToContainer.baseMiss">
            <summary> 
            The chance to miss with an outgoing attack.
            </summary>
        </member>
        <member name="F:Zelda.Status.Containers.ChanceToContainer.miss">
            <summary> 
            The chance to miss with an outgoing attack.
            </summary>
        </member>
        <member name="F:Zelda.Status.Containers.ChanceToContainer.baseCrit">
            <summary> 
            The chance to crit with an outgoing attack.
            </summary>
        </member>
        <member name="F:Zelda.Status.Containers.ChanceToContainer.crit">
            <summary> 
            The chance to crit with an outgoing attack.
            </summary>
        </member>
        <member name="F:Zelda.Status.Containers.ChanceToContainer.critHeal">
            <summary>
            The chance to crit with a life-restoring effect.
            </summary>
        </member>
        <member name="F:Zelda.Status.Containers.ChanceToContainer.critBlock">
            <summary>
            The chance to crit with a block.
            </summary>
        </member>
        <member name="F:Zelda.Status.Containers.ChanceToContainer.baseDodge">
            <summary> 
            The chance to dodge an incomming attack.
            </summary>
        </member>
        <member name="F:Zelda.Status.Containers.ChanceToContainer.dodge">
            <summary> 
            The chance to dodge an incomming attack.
            </summary>
        </member>
        <member name="F:Zelda.Status.Containers.ChanceToContainer.baseParry">
            <summary> 
            The chance to parry an incomming attack.
            </summary>
        </member>
        <member name="F:Zelda.Status.Containers.ChanceToContainer.parry">
            <summary> 
            The chance to parry an incomming attack.
            </summary>
        </member>
        <member name="F:Zelda.Status.Containers.ChanceToContainer.baseBlock">
            <summary>
            The chance to block and incomming attack.
            </summary>
        </member>
        <member name="F:Zelda.Status.Containers.ChanceToContainer.block">
            <summary>
            The chance to block and incomming attack.
            </summary>
        </member>
        <member name="F:Zelda.Status.Containers.ChanceToContainer.basePierce">
            <summary>
            The chance to pierce with a ranged attack.
            </summary>
        </member>
        <member name="F:Zelda.Status.Containers.ChanceToContainer.pierce">
            <summary>
            The chance to pierce with a ranged attack.
            </summary>
        </member>
        <member name="F:Zelda.Status.Containers.ChanceToContainer.statable">
            <summary>
            Identifies the Statable component that owns the new ChanceToContainer.
            </summary>
        </member>
        <member name="T:Zelda.Status.Containers.EquipmentSlotStatModifierContainer">
            <summary>
            Encapsulates the stat modifiers that are applied to the stats
            given from items with a specific <see cref="T:Zelda.Items.EquipmentSlot"/>.
            This class can't be inherited.
            </summary>
            <seealso cref="T:Zelda.Status.EquipmentSlotStatModifierEffect"/>
        </member>
        <member name="P:Zelda.Status.Containers.EquipmentSlotStatModifierContainer.Chest">
            <summary>
            Gets the modifier value applied to the stats given 
            by items in the <see cref="F:Zelda.Items.EquipmentSlot.Chest"/>.
            </summary>
        </member>
        <member name="P:Zelda.Status.Containers.EquipmentSlotStatModifierContainer.Boots">
            <summary>
            Gets the modifier value applied to the stats given 
            by items in the <see cref="F:Zelda.Items.EquipmentSlot.Boots"/>.
            </summary>
        </member>
        <member name="P:Zelda.Status.Containers.EquipmentSlotStatModifierContainer.Belt">
            <summary>
            Gets the modifier value applied to the stats given 
            by items in the <see cref="F:Zelda.Items.EquipmentSlot.Belt"/>.
            </summary>
        </member>
        <member name="P:Zelda.Status.Containers.EquipmentSlotStatModifierContainer.Head">
            <summary>
            Gets the modifier value applied to the stats given 
            by items in the <see cref="F:Zelda.Items.EquipmentSlot.Head"/>.
            </summary>
        </member>
        <member name="P:Zelda.Status.Containers.EquipmentSlotStatModifierContainer.Gloves">
            <summary>
            Gets the modifier value applied to the stats given 
            by items in the <see cref="F:Zelda.Items.EquipmentSlot.Gloves"/>.
            </summary>
        </member>
        <member name="P:Zelda.Status.Containers.EquipmentSlotStatModifierContainer.Cloak">
            <summary>
            Gets the modifier value applied to the stats given 
            by items in the <see cref="F:Zelda.Items.EquipmentSlot.Cloak"/>.
            </summary>
        </member>
        <member name="P:Zelda.Status.Containers.EquipmentSlotStatModifierContainer.Rings">
            <summary>
            Gets the modifier value applied to the stats given 
            by items in the <see cref="F:Zelda.Items.EquipmentSlot.Ring"/>.
            </summary>
        </member>
        <member name="P:Zelda.Status.Containers.EquipmentSlotStatModifierContainer.Trinkets">
            <summary>
            Gets the modifier value applied to the stats given 
            by items in the <see cref="F:Zelda.Items.EquipmentSlot.Trinket"/>.
            </summary>
        </member>
        <member name="P:Zelda.Status.Containers.EquipmentSlotStatModifierContainer.Necklaces">
            <summary>
            Gets the modifier value applied to the stats given 
            by items in the <see cref="F:Zelda.Items.EquipmentSlot.Necklace"/>.
            </summary>
        </member>
        <member name="P:Zelda.Status.Containers.EquipmentSlotStatModifierContainer.Relics">
            <summary>
            Gets the modifier value applied to the stats given 
            by items in the <see cref="F:Zelda.Items.EquipmentSlot.Relic"/>.
            </summary>
        </member>
        <member name="M:Zelda.Status.Containers.EquipmentSlotStatModifierContainer.#ctor(Zelda.Status.ExtendedStatable)">
            <summary>
            Initializes a new instance of the EquipmentSlotStatModifierContainer class.
            </summary>
            <param name="statable">
            The ExtendedStatable that owns the new EquipmentSlotStatModifierContainer.
            </param>
        </member>
        <member name="M:Zelda.Status.Containers.EquipmentSlotStatModifierContainer.Refresh(Zelda.Items.EquipmentSlot)">
            <summary>
            Refreshes the multiplier modifier value for the specified EquipmentSlot.
            </summary>
            <param name="slot">
            The EquipmentSlot that should be refreshed.
            </param>
        </member>
        <member name="M:Zelda.Status.Containers.EquipmentSlotStatModifierContainer.Set(Zelda.Items.EquipmentSlot,System.Single)">
            <summary>
            Sets the multiplier value for the specified EquipmentSlot.
            </summary>
            <param name="slot">
            The slot whose multiplier should be set.
            </param>
            <param name="value">
            The value to set.
            </param>
        </member>
        <member name="F:Zelda.Status.Containers.EquipmentSlotStatModifierContainer.chest">
            <summary>
            Stores the multiplier values that are applied to stats provided by items of a specic EquipmentSlot.
            </summary>
        </member>
        <member name="F:Zelda.Status.Containers.EquipmentSlotStatModifierContainer.boots">
            <summary>
            Stores the multiplier values that are applied to stats provided by items of a specic EquipmentSlot.
            </summary>
        </member>
        <member name="F:Zelda.Status.Containers.EquipmentSlotStatModifierContainer.head">
            <summary>
            Stores the multiplier values that are applied to stats provided by items of a specic EquipmentSlot.
            </summary>
        </member>
        <member name="F:Zelda.Status.Containers.EquipmentSlotStatModifierContainer.gloves">
            <summary>
            Stores the multiplier values that are applied to stats provided by items of a specic EquipmentSlot.
            </summary>
        </member>
        <member name="F:Zelda.Status.Containers.EquipmentSlotStatModifierContainer.belt">
            <summary>
            Stores the multiplier values that are applied to stats provided by items of a specic EquipmentSlot.
            </summary>
        </member>
        <member name="F:Zelda.Status.Containers.EquipmentSlotStatModifierContainer.cloak">
            <summary>
            Stores the multiplier values that are applied to stats provided by items of a specic EquipmentSlot.
            </summary>
        </member>
        <member name="F:Zelda.Status.Containers.EquipmentSlotStatModifierContainer.rings">
            <summary>
            Stores the multiplier values that are applied to stats provided by items of a specic EquipmentSlot.
            </summary>
        </member>
        <member name="F:Zelda.Status.Containers.EquipmentSlotStatModifierContainer.necklaces">
            <summary>
            Stores the multiplier values that are applied to stats provided by items of a specic EquipmentSlot.
            </summary>
        </member>
        <member name="F:Zelda.Status.Containers.EquipmentSlotStatModifierContainer.trinkets">
            <summary>
            Stores the multiplier values that are applied to stats provided by items of a specic EquipmentSlot.
            </summary>
        </member>
        <member name="F:Zelda.Status.Containers.EquipmentSlotStatModifierContainer.relics">
            <summary>
            Stores the multiplier values that are applied to stats provided by items of a specic EquipmentSlot.
            </summary>
        </member>
        <member name="F:Zelda.Status.Containers.EquipmentSlotStatModifierContainer.statable">
            <summary>
            Identifies the ExtendedStatable component that owns this EquipmentSlotStatModifierContainer.
            </summary>
        </member>
        <member name="T:Zelda.Status.Containers.ExtendedChanceToBeContainer">
            <summary>
            Encapsulates various status properties with a chance;
            such as chance-to-be parry or chance-to-be hit.
            This class can't be inherited.
            </summary>
        </member>
        <member name="P:Zelda.Status.Containers.ExtendedChanceToBeContainer.Resisted">
            <summary>
            Gets the extra chance that attacks of the owner of this ExtendedChanceToBeContainer
            are resisted.
            </summary>
            <seealso cref="T:Zelda.Status.SpellPenetrationEffect"/>
        </member>
        <member name="M:Zelda.Status.Containers.ExtendedChanceToBeContainer.#ctor">
            <summary>
            Initializes a new instance of the ExtendedChanceToBeContainer class.
            </summary>
        </member>
        <member name="M:Zelda.Status.Containers.ExtendedChanceToBeContainer.Initialize(Zelda.Status.Statable)">
            <summary>
            Initializes this ExtendedChanceToBeContainer to be used
            for the specified Statable.
            </summary>
            <param name="statable">
            The ExtendedStatable component that will own the ExtendedChanceToBeContainer.
            </param>
        </member>
        <member name="M:Zelda.Status.Containers.ExtendedChanceToBeContainer.Refresh">
            <summary>
            Refreshes all chance-to-be values stored in this ExtendedChanceToBeContainer.
            </summary>
        </member>
        <member name="M:Zelda.Status.Containers.ExtendedChanceToBeContainer.RefreshHit">
            <summary>
            Refreshes the extra chance to be hit by an enemy attack.
            </summary>
        </member>
        <member name="M:Zelda.Status.Containers.ExtendedChanceToBeContainer.RefreshCrit">
            <summary>
            Refreshes the extra chance to be crit by an enemy attack.
            </summary>
        </member>
        <member name="M:Zelda.Status.Containers.ExtendedChanceToBeContainer.RefreshResisted">
            <summary>
            Refreshes the extra chance for (magical) attacks to be resisted.
            </summary>
            <seealso cref="T:Zelda.Status.SpellPenetrationEffect"/>
        </member>
        <member name="F:Zelda.Status.Containers.ExtendedChanceToBeContainer.resisted">
            <summary>
            The extra chance that attacks of the owner of this ExtendedChanceToBeContainer are resisted.
            </summary>
        </member>
        <member name="F:Zelda.Status.Containers.ExtendedChanceToBeContainer.statable">
            <summary>
            Identifies the ExtendedStatable component that owns this ExtendedChanceToBeContainer.
            </summary>
        </member>
        <member name="T:Zelda.Status.Containers.ExtendedChanceToContainer">
            <summary>
            Encapsulates various status properties with a chance;
            such as chance to parry, chance to miss or even chance to pierce.
            </summary>
        </member>
        <member name="M:Zelda.Status.Containers.ExtendedChanceToContainer.#ctor">
            <summary>
            Initializes a new instance of the ExtendedChanceToContainer class.
            </summary>
        </member>
        <member name="M:Zelda.Status.Containers.ExtendedChanceToContainer.Initialize(Zelda.Status.Statable)">
            <summary>
            Initializes this ExtendedChanceToContainer to be used
            for the specified Statable.
            </summary>
            <param name="statable">
            The Statable component that will own the ExtendedChanceToContainer.
            </param>
        </member>
        <member name="M:Zelda.Status.Containers.ExtendedChanceToContainer.Refresh">
            <summary>
            Refreshes all chance-to properties of this ExtendedChanceToContainer.
            </summary>
        </member>
        <member name="M:Zelda.Status.Containers.ExtendedChanceToContainer.Refresh(Zelda.Status.ChanceToStatus)">
            <summary>
            Refreshes the chance for the specified ChanceToStatus.
            </summary>
            <param name="statusType">
            The ChanceToStatus to refresh.
            </param>
        </member>
        <member name="M:Zelda.Status.Containers.ExtendedChanceToContainer.RefreshCrit">
            <summary>
            Refreshes the chance to get a critical attack.
            </summary>
        </member>
        <member name="M:Zelda.Status.Containers.ExtendedChanceToContainer.RefreshDodge">
            <summary>
            Refreshes the chance to dodge an incomming attack.
            </summary>
        </member>
        <member name="M:Zelda.Status.Containers.ExtendedChanceToContainer.RefreshParry">
            <summary>
            Refreshes the chance to parry an incomming attack.
            </summary>
        </member>
        <member name="M:Zelda.Status.Containers.ExtendedChanceToContainer.RefreshMiss">
            <summary>
            Refreshes the chance to miss with an outgoing attack.
            </summary>
        </member>
        <member name="M:Zelda.Status.Containers.ExtendedChanceToContainer.RefreshCritHeal">
            <summary>
            Refreshes the chance to get a critical heal.
            </summary>
        </member>
        <member name="M:Zelda.Status.Containers.ExtendedChanceToContainer.RefreshBlock">
            <summary>
            Refreshes the chance to block an incomming attack.
            </summary>
        </member>
        <member name="M:Zelda.Status.Containers.ExtendedChanceToContainer.RefreshCritBlock">
            <summary>
            Refreshes the chance to get a critical block.
            </summary>
        </member>
        <member name="M:Zelda.Status.Containers.ExtendedChanceToContainer.RefreshPierce">
            <summary>
            Refreshes the chance to pierce with a ranged Projectile.
            </summary>
        </member>
        <member name="F:Zelda.Status.Containers.ExtendedChanceToContainer.statable">
            <summary>
            Identifies the ExtendedStatable component that owns this ExtendedChanceToContainer.
            </summary>
        </member>
        <member name="T:Zelda.Status.Containers.SpellPowerContainer">
            <summary>
            Manages and stores the spell power properties of an ExtendedStatable.
            This class can't be inherited.
            </summary>
        </member>
        <member name="M:Zelda.Status.Containers.SpellPowerContainer.GetDamage(Zelda.Status.ElementalSchool)">
            <summary>
            Gets a random damage value within the damage range of the given <see cref="T:Zelda.Status.ElementalSchool"/>.
            </summary>
            <param name="school">
            The elemental school of the Spell.
            </param>
            <returns>
            A random damage range within the associated damage range.
            </returns>
        </member>
        <member name="M:Zelda.Status.Containers.SpellPowerContainer.GetDamageRange(Zelda.Status.ElementalSchool)">
            <summary>
            Gets the damage range for the given <see cref="T:Zelda.Status.ElementalSchool"/>.
            </summary>
            <param name="school">
            The elemental school of the Spell.
            </param>
            <returns>
            The associated damage range.
            </returns>
        </member>
        <member name="M:Zelda.Status.Containers.SpellPowerContainer.#ctor(Zelda.Status.ExtendedStatable)">
            <summary>
            Initializes a new instance of the SpellPowerContainer class.
            </summary>
            <param name="statable">
            The ExtendedStatable that owns the new SpellPowerContainer.
            </param>
        </member>
        <member name="M:Zelda.Status.Containers.SpellPowerContainer.Setup(Zelda.IZeldaServiceProvider)">
            <summary>
            Setups this SpellPowerContainer.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Status.Containers.SpellPowerContainer.RefreshTotal">
            <summary>
            Refreshes this SpellPowerContainer after the total Spell Power 
            has changed by re-caching all values.
            </summary>
        </member>
        <member name="M:Zelda.Status.Containers.SpellPowerContainer.RefreshExtra(Zelda.Status.ElementalSchool)">
            <summary>
            Refreshes this SpellPowerContainer after the Spell Power
            of a single ElementalSchool has changed.
            </summary>
            <param name="school">
            The elemental school of the Spell.
            </param>
        </member>
        <member name="M:Zelda.Status.Containers.SpellPowerContainer.RefreshExtraValue(Zelda.Status.ElementalSchool)">
            <summary>
            Refreshes the 'extra' field of the given ElementSchool.
            </summary>
            <param name="school">
            The elemental school of the Spell.
            </param>
        </member>
        <member name="M:Zelda.Status.Containers.SpellPowerContainer.RefreshTotal(Zelda.Status.ElementalSchool)">
            <summary>
            Refreshes the 'total' field of the given ElementalSchool.
            </summary>>
            <param name="school">
            The elemental school of the Spell.
            </param>
        </member>
        <member name="M:Zelda.Status.Containers.SpellPowerContainer.GetEffectValues(Zelda.Status.ElementalSchool,System.Single@,System.Single@)">
            <summary>
            Gets the effect values for the given ElementSChool
            </summary>
            <param name="school">
            The elemental school of the Spell.
            </param>
            <param name="fixedValue">
            Will contain the additive effect value.
            </param>
            <param name="percentalValue">
            Will contain the multipicative effect value.
            </param>
        </member>
        <member name="M:Zelda.Status.Containers.SpellPowerContainer.SetExtraValue(Zelda.Status.ElementalSchool,System.Int32)">
            <summary>
            Sets the value of the 'extra' field of the given ElementalSchool.
            </summary>
            <param name="school">
            The elemental school of the Spell.
            </param>
            <param name="value">
            The value to set the field to.
            </param>
        </member>
        <member name="F:Zelda.Status.Containers.SpellPowerContainer.extraAll">
            <summary>
            The extra spell power applied to the various elements.
            </summary>
        </member>
        <member name="F:Zelda.Status.Containers.SpellPowerContainer.extraFire">
            <summary>
            The extra spell power applied to the various elements.
            </summary>
        </member>
        <member name="F:Zelda.Status.Containers.SpellPowerContainer.extraNature">
            <summary>
            The extra spell power applied to the various elements.
            </summary>
        </member>
        <member name="F:Zelda.Status.Containers.SpellPowerContainer.extraShadow">
            <summary>
            The extra spell power applied to the various elements.
            </summary>
        </member>
        <member name="F:Zelda.Status.Containers.SpellPowerContainer.extraLight">
            <summary>
            The extra spell power applied to the various elements.
            </summary>
        </member>
        <member name="F:Zelda.Status.Containers.SpellPowerContainer.extraWater">
            <summary>
            The extra spell power applied to the various elements.
            </summary>
        </member>
        <member name="F:Zelda.Status.Containers.SpellPowerContainer.totalAll">
            <summary>
            The total spell power of the various elements.
            </summary>
        </member>
        <member name="F:Zelda.Status.Containers.SpellPowerContainer.totalFire">
            <summary>
            The total spell power of the various elements.
            </summary>
        </member>
        <member name="F:Zelda.Status.Containers.SpellPowerContainer.totalNature">
            <summary>
            The total spell power of the various elements.
            </summary>
        </member>
        <member name="F:Zelda.Status.Containers.SpellPowerContainer.totalShadow">
            <summary>
            The total spell power of the various elements.
            </summary>
        </member>
        <member name="F:Zelda.Status.Containers.SpellPowerContainer.totalLight">
            <summary>
            The total spell power of the various elements.
            </summary>
        </member>
        <member name="F:Zelda.Status.Containers.SpellPowerContainer.totalWater">
            <summary>
            The total spell power of the various elements.
            </summary>
        </member>
        <member name="F:Zelda.Status.Containers.SpellPowerContainer.rand">
            <summary>
            A random number generator.
            </summary>
        </member>
        <member name="F:Zelda.Status.Containers.SpellPowerContainer.statable">
            <summary>
            Identifies the ExtendedStatable component that owns this SpellPowerContainer.
            </summary>
        </member>
        <member name="F:Zelda.Status.Containers.SpellPowerContainer.auraList">
            <summary>
            Identifies the AuraList of the ExtendedStatable component that owns this SpellPowerContainer.
            </summary>
        </member>
        <member name="T:Zelda.Status.Containers.SpellResistanceContainer">
            <summary>
            Manages and stores the spell resistance properties of a <see cref="T:Zelda.Status.Statable"/> entity.
            This class can't be inherited.
            </summary>
        </member>
        <member name="M:Zelda.Status.Containers.SpellResistanceContainer.#ctor(Zelda.Status.Statable)">
            <summary>
            Initializes a new instance of the SpellResistanceContainer class.
            </summary>
            <param name="statable">
            The Statable component that owns the new SpellPowerContainer.
            </param>
        </member>
        <member name="M:Zelda.Status.Containers.SpellResistanceContainer.Setup(Zelda.IZeldaServiceProvider)">
            <summary>
            Setups this SpellResistanceContainer.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Status.Containers.SpellResistanceContainer.TryResist(Zelda.Status.ElementalSchool)">
            <summary>
            Rolls the dice and returns whether a resist has occurred
            against an attack of the given ElementalSchool.
            </summary>
            <param name="school">
            The school of the attack or spell.
            </param>
            <returns>
            true if an resist has occurred;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Status.Containers.SpellResistanceContainer.TryResist(Zelda.Status.ExtendedStatable,Zelda.Status.ElementalSchool)">
            <summary>
            Rolls the dice and returns whether a resist has occurred
            against an attack of the specified ElementalSchool from
            the specified ExtendedStatable entity.
            </summary>
            <param name="attacker">
            The ExtendedStatable component of the entity that is attacking
            the owner of this SpellResistanceContainer with a magical attack.
            </param>
            <param name="school">
            The school of the attack or spell.
            </param>
            <returns>
            true if an resist has occurred;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Status.Containers.SpellResistanceContainer.Refresh(Zelda.Status.ElementalSchool)">
            <summary>
            Refreshes the chance to resist the given ElementalSchool.
            </summary>
            <param name="school">
            The school of the attack or spell.
            </param>
        </member>
        <member name="M:Zelda.Status.Containers.SpellResistanceContainer.RefreshExact(Zelda.Status.ElementalSchool)">
            <summary>
            Refreshes the chance to resist the given exact ElementalSchool.
            </summary>
            <param name="school">
            The school of the attack or spell; may not be ElementalSchool.All.
            </param>
        </member>
        <member name="M:Zelda.Status.Containers.SpellResistanceContainer.CalculateChance(System.Single,System.Single,System.Single,Zelda.Status.ElementalSchool)">
            <summary>
            Calculates the chance to resist given the specified input paramaters.
            </summary>
            <param name="fixedValue">
            The fixed value from related ChanceToResistEffects.
            </param>
            <param name="ratingValue">
            The rating value from related ChanceToResistEffects.
            </param>
            <param name="percentualValue">
            The percentual value from related ChanceToResistEffects.
            </param>
            <param name="school">
            The school of the attack or spell.
            </param>
            <returns>
            The chance to resist.
            </returns>
        </member>
        <member name="M:Zelda.Status.Containers.SpellResistanceContainer.GetBase(Zelda.Status.ElementalSchool)">
            <summary>
            Gets the base chance to resist the given ElementalSchool.
            </summary>
            <param name="school">
            The school of the attack or spell.
            </param>
            <returns>
            The base chance to resist in %.
            </returns>
        </member>
        <member name="M:Zelda.Status.Containers.SpellResistanceContainer.Get(Zelda.Status.ElementalSchool)">
            <summary>
            Gets the chance to resist the given ElementalSchool.
            </summary>
            <param name="school">
            The school of the attack or spell.
            </param>
            <returns>
            The base chance to resist in %.
            </returns>
        </member>
        <member name="M:Zelda.Status.Containers.SpellResistanceContainer.Set(Zelda.Status.ElementalSchool,System.Single)">
            <summary>
            Sets the chance to resist the given ElementalSchool.
            </summary>
            <param name="school">
            The school of the attack or spell.
            </param>
            <param name="value">
            The new chance to resist the given ElementalSchool.
            </param>
        </member>
        <member name="M:Zelda.Status.Containers.SpellResistanceContainer.SetBase(Zelda.Status.ElementalSchool,System.Single)">
            <summary>
            Sets the base chance to resist the given ElementalSchool.
            </summary>
            <param name="school">
            The school of the attack or spell.
            </param>
            <param name="value">
            The value to set.
            </param>
            <exception cref="T:System.ArgumentException">
            If <paramref name="value"/> is not a value within 0..100.
            </exception>
        </member>
        <member name="M:Zelda.Status.Containers.SpellResistanceContainer.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Status.Containers.SpellResistanceContainer.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Status.Containers.SpellResistanceContainer.SetFinalChanceToBeBaseChance">
            <summary>
            Sets the chance to resist to be the base chance to resist.
            </summary>
        </member>
        <member name="M:Zelda.Status.Containers.SpellResistanceContainer.SetupClone(Zelda.Status.Containers.SpellResistanceContainer)">
            <summary>
            Setups the given SpellResistanceContainer instance to be a clone
            of this SpellResistanceContainer.
            </summary>
            <param name="clone">
            The SpellResistanceContainer to setup as a clone of this SpellResistanceContainer.
            </param>
        </member>
        <member name="F:Zelda.Status.Containers.SpellResistanceContainer.baseFire">
            <summary>
            The base chance to resist a specific element. 
            </summary>
        </member>
        <member name="F:Zelda.Status.Containers.SpellResistanceContainer.baseWater">
            <summary>
            The base chance to resist a specific element. 
            </summary>
        </member>
        <member name="F:Zelda.Status.Containers.SpellResistanceContainer.baseLight">
            <summary>
            The base chance to resist a specific element. 
            </summary>
        </member>
        <member name="F:Zelda.Status.Containers.SpellResistanceContainer.baseShadow">
            <summary>
            The base chance to resist a specific element. 
            </summary>
        </member>
        <member name="F:Zelda.Status.Containers.SpellResistanceContainer.baseNature">
            <summary>
            The base chance to resist a specific element. 
            </summary>
        </member>
        <member name="F:Zelda.Status.Containers.SpellResistanceContainer.fire">
            <summary>
            The final chance to resist specific element.
            </summary>
        </member>
        <member name="F:Zelda.Status.Containers.SpellResistanceContainer.water">
            <summary>
            The final chance to resist specific element.
            </summary>
        </member>
        <member name="F:Zelda.Status.Containers.SpellResistanceContainer.light">
            <summary>
            The final chance to resist specific element.
            </summary>
        </member>
        <member name="F:Zelda.Status.Containers.SpellResistanceContainer.shadow">
            <summary>
            The final chance to resist specific element.
            </summary>
        </member>
        <member name="F:Zelda.Status.Containers.SpellResistanceContainer.nature">
            <summary>
            The final chance to resist specific element.
            </summary>
        </member>
        <member name="F:Zelda.Status.Containers.SpellResistanceContainer.rand">
            <summary>
            A random number generator.
            </summary>
        </member>
        <member name="F:Zelda.Status.Containers.SpellResistanceContainer.statable">
            <summary>
            Identifies the Statable component that owns this SpellPowerContainer.
            </summary>
        </member>
        <member name="T:Zelda.Status.Cost.FixedManaCost">
            <summary>
            Defines an <see cref="T:Zelda.Status.Cost.IManaCost"/> that costs a fixed amount of mana. 
            </summary>
        </member>
        <member name="M:Zelda.Status.Cost.FixedManaCost.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the FixedManaCost class.
            </summary>
            <param name="fixedCost">
            The fixed mana cost the new FixedManaCost encapsulates.
            </param>
        </member>
        <member name="M:Zelda.Status.Cost.FixedManaCost.Get(Zelda.Status.Statable)">
            <summary>
            Gets the actual mana cost.
            </summary>
            <param name="user">
            The user that wishes to use mana.
            </param>
            <returns>
            The fixed mana cost.
            </returns>
        </member>
        <member name="F:Zelda.Status.Cost.FixedManaCost.fixedCost">
            <summary>
            Stores the fixed mana cost.
            </summary>
        </member>
        <member name="T:Zelda.Status.Cost.IManaCost">
            <summary>
            Provides an abstraction of the mana cost concept of an attack/spell/skill.
            </summary>
        </member>
        <member name="M:Zelda.Status.Cost.IManaCost.Get(Zelda.Status.Statable)">
            <summary>
            Gets the actual mana cost.
            </summary>
            <param name="user">
            The user that wishes to use mana.
            </param>
            <returns>
            The fixed mana cost.
            </returns>
        </member>
        <member name="M:Zelda.Status.Cost.IManaCost.Has(Zelda.Status.Statable)">
            <summary>
            Gets a value indicating whether the given user has the required mana.
            </summary>
            <param name="user">
            The user that wishes to use mana.
            </param>
            <returns>
            Returns true if the given user has the required mana;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Status.Cost.IManaCost.Apply(Zelda.Status.Statable)">
            <summary>
            Tries to apply this IManaCost to the given user.
            </summary>
            <param name="user">
            The user that wishes to use mana.
            </param>
            <returns>
            Returns true if the mana cost has been applied to the user;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Status.Cost.ManaCostBase">
            <summary>
            Provides a base implementation of the IManaCost interface.
            </summary>
        </member>
        <member name="M:Zelda.Status.Cost.ManaCostBase.Get(Zelda.Status.Statable)">
            <summary>
            Gets the actual mana cost.
            </summary>
            <param name="user">
            The user that wishes to use mana.
            </param>
            <returns>
            The fixed mana cost.
            </returns>
        </member>
        <member name="M:Zelda.Status.Cost.ManaCostBase.Has(Zelda.Status.Statable)">
            <summary>
            Gets a value indicating whether the given user has the required mana.
            </summary>
            <param name="user">
            The user that wishes to use mana.
            </param>
            <returns>
            Returns true if the given user has the required mana;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Status.Cost.ManaCostBase.Has(System.Int32,Zelda.Status.Statable)">
            <summary>
            Gets a value indicating whether the given user has the given mana.
            </summary>
            <param name="cost">
            The mana the user is required to have.
            </param>
            <param name="user">
            The user that wishes to use mana.
            </param>
            <returns>
            Returns true if the given user has the required mana;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Status.Cost.ManaCostBase.Apply(Zelda.Status.Statable)">
            <summary>
            Tries to apply this IManaCost to the given user.
            </summary>
            <param name="user">
            The user that wishes to use mana.
            </param>
            <returns>
            Returns true if the mana cost has been applied to the user;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Status.Cost.NullManaCost">
            <summary>
            Defines an <see cref="T:Zelda.Status.Cost.IManaCost"/> that costs absolutely nothing.
            </summary>
        </member>
        <member name="F:Zelda.Status.Cost.NullManaCost.Instance">
            <summary>
            Represents an instance of the NullManaCost class.
            </summary>
        </member>
        <member name="M:Zelda.Status.Cost.NullManaCost.Get(Zelda.Status.Statable)">
            <summary>
            Gets the actual mana cost.
            </summary>
            <param name="user">
            The user that wishes to use mana.
            </param>
            <returns>
            The fixed mana cost.
            </returns>
        </member>
        <member name="M:Zelda.Status.Cost.NullManaCost.Has(Zelda.Status.Statable)">
            <summary>
            Gets a value indicating whether the given user has the required mana.
            </summary>
            <param name="user">
            The user that wishes to use mana.
            </param>
            <returns>
            Returns true if the given user has the required mana;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Status.Cost.NullManaCost.Apply(Zelda.Status.Statable)">
            <summary>
            Tries to apply this IManaCost to the given user.
            </summary>
            <param name="user">
            The user that wishes to use mana.
            </param>
            <returns>
            Returns true if the mana cost has been applied to the user;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Status.Cost.PercentageOfBaseAndTotalManaCost">
            <summary>
            Defines an <see cref="T:Zelda.Status.Cost.IManaCost"/> that costs a percentage of base mana
            and a percentage of total mana added together.
            This class can't be inherited.
            </summary>
        </member>
        <member name="M:Zelda.Status.Cost.PercentageOfBaseAndTotalManaCost.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the PercentageOfBaseAndTotalManaCost class.
            </summary>
            <param name="ofBasePercentage">
            The percentage of base mana the new PercentageOfBaseAndTotalManaCost encapsulates.
            </param>
            <param name="ofTotalPercentage">
            The percentage of total mana the new PercentageOfBaseAndTotalManaCost encapsulates.
            </param>
        </member>
        <member name="M:Zelda.Status.Cost.PercentageOfBaseAndTotalManaCost.Get(Zelda.Status.Statable)">
            <summary>
            Gets the actual mana cost.
            </summary>
            <param name="user">
            The user that wishes to use mana.
            </param>
            <returns>
            The fixed mana cost.
            </returns>
        </member>
        <member name="F:Zelda.Status.Cost.PercentageOfBaseAndTotalManaCost.ofBaseManaCost">
            <summary>
            The mana cost of base mana that is part of this PercentageOfBaseAndTotalManaCost.
            </summary>
        </member>
        <member name="F:Zelda.Status.Cost.PercentageOfBaseAndTotalManaCost.ofTotalManaCost">
            <summary>
            The mana cost of total mana that is part of this PercentageOfBaseAndTotalManaCost.
            </summary>
        </member>
        <member name="T:Zelda.Status.Cost.PercentageOfBaseManaCost">
            <summary>
            Defines an <see cref="T:Zelda.Status.Cost.IManaCost"/> that costs a percentage of the base mana
            of the <see cref="T:Zelda.Status.ExtendedStatable"/> that uses the mana.
            </summary>
        </member>
        <member name="M:Zelda.Status.Cost.PercentageOfBaseManaCost.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the PercentageOfBaseManaCost class.
            </summary>
            <param name="percentage">
            The percentage the new PercentageOfBaseManaCost encapsulates.
            </param>
        </member>
        <member name="M:Zelda.Status.Cost.PercentageOfBaseManaCost.Get(Zelda.Status.Statable)">
            <summary>
            Gets the actual mana cost.
            </summary>
            <param name="user">
            The user that wishes to use mana.
            </param>
            <returns>
            The fixed mana cost.
            </returns>
        </member>
        <member name="F:Zelda.Status.Cost.PercentageOfBaseManaCost.percentage">
            <summary>
            Stores the percentage encapsulated by this PercentageOfBaseManaCost.
            </summary>
        </member>
        <member name="T:Zelda.Status.Cost.PercentageOfTotalManaCost">
            <summary>
            Defines an <see cref="T:Zelda.Status.Cost.IManaCost"/> that costs a percentage of the total mana
            of the <see cref="T:Zelda.Status.ExtendedStatable"/> that uses the mana.
            </summary>
        </member>
        <member name="M:Zelda.Status.Cost.PercentageOfTotalManaCost.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the PercentageOfTotalManaCost class.
            </summary>
            <param name="percentage">
            The percentage the new PercentageOfTotalManaCost encapsulates.
            </param>
        </member>
        <member name="M:Zelda.Status.Cost.PercentageOfTotalManaCost.Get(Zelda.Status.Statable)">
            <summary>
            Gets the actual mana cost.
            </summary>
            <param name="user">
            The user that wishes to use mana.
            </param>
            <returns>
            The fixed mana cost.
            </returns>
        </member>
        <member name="F:Zelda.Status.Cost.PercentageOfTotalManaCost.percentage">
            <summary>
            Stores the percentage encapsulated by this PercentageOfTotalManaCost.
            </summary>
        </member>
        <member name="T:Zelda.Status.ManaCost">
            <summary>
            Provices factory methods that create instances of objects that implement the <see cref="T:Zelda.Status.Cost.IManaCost"/> interface.
            </summary>
        </member>
        <member name="P:Zelda.Status.ManaCost.None">
            <summary>
            Gets an instance of an object that implements the IManaCost interface;
            and costs absolutely nothing.
            </summary>
        </member>
        <member name="M:Zelda.Status.ManaCost.Fixed(System.Int32)">
            <summary>
            Gets an IManaCost that requires a fixed amount of mana.
            </summary>
            <param name="amount">
            The fixed amount of mana that is required.
            </param>
            <returns>
            A newly created instance of an object that implements the IManaCost interface.
            </returns>
        </member>
        <member name="M:Zelda.Status.ManaCost.PercentageOfBase(System.Single)">
            <summary>
            Gets an IManaCost that requires a percentage of the base mana of the user.
            </summary>
            <param name="percentage">
            The percentage that is required; where 1.0f = 100% of base mana.
            </param>
            <returns>
            A newly created instance of an object that implements the IManaCost interface.
            </returns>
        </member>
        <member name="M:Zelda.Status.ManaCost.PercentageOfTotal(System.Single)">
            <summary>
            Gets an IManaCost that requires a percentage of the total mana of the user.
            </summary>
            <param name="percentage">
            The percentage that is required; where 1.0f = 100% of total mana.
            </param>
            <returns>
            A newly created instance of an object that implements the IManaCost interface.
            </returns>
        </member>
        <member name="M:Zelda.Status.ManaCost.PercentageOfBaseAndTotal(System.Single,System.Single)">
            <summary>
            Gets an IManaCost that requires a percentage of the base mana plus a percentage of the total mana of the user.
            </summary>
            <param name="ofBasePercentage">
            The percentage of base mana that is required; where 1.0f = 100% of base mana.
            </param>
            <param name="ofTotalPercentage">
            The percentage of total mana that is required; where 1.0f = 100% of total mana.
            </param>
            <returns>
            A newly created instance of an object that implements the IManaCost interface.
            </returns>
        </member>
        <member name="T:Zelda.Status.Damage.Containers.DamageSchoolContainer">
            <summary>
            Defines a container that contain modifier values for all <see cref="T:Zelda.Status.Damage.DamageSchool"/>s.
            </summary>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageSchoolContainer.#ctor">
            <summary>
            Initializes a new instance of the DamageSchoolContainer class.
            </summary>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageSchoolContainer.Initialize(Zelda.Status.Statable)">
            <summary>
            Initializes this DamageSchoolContainer instance.
            </summary>
            <param name="statable">
            The statable component that should own this DamageSchoolContainer.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageSchoolContainer.Apply(Zelda.Status.Damage.DamageSchool,System.Int32)">
            <summary>
            Applies the damage multiplier for the specified <see cref="T:Zelda.Status.Damage.DamageSchool"/>
            to the specified <paramref name="damage"/> value.
            </summary>
            <param name="school">
            The school of damage the damage value is part of.
            </param>
            <param name="damage">
            The input damage value.
            </param>
            <returns>
            The output damage value.
            </returns>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageSchoolContainer.ApplyFixed(Zelda.Status.Damage.DamageSchool,System.Int32)">
            <summary>
            Applies the fixed damage modifier for the specified <see cref="T:Zelda.Status.Damage.DamageSchool"/>
            to the specified <paramref name="damage"/> value.
            </summary>
            <param name="school">
            The school of damage the damage value is part of.
            </param>
            <param name="damage">
            The input damage value.
            </param>
            <returns>
            The output damage value.
            </returns>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageSchoolContainer.ApplyPhysical(System.Int32)">
            <summary>
            Applies the multiplier for <see cref="F:Zelda.Status.Damage.DamageSchool.Physical"/>
            to the specified <paramref name="damage"/> value.
            </summary>
            <remarks>
            This shortcut method for Apply( Int32, DamageSchool ) has been
            defined for perfomance reasons.
            </remarks>
            <param name="damage">
            The input damage value.
            </param>
            <returns>
            The output damage value.
            </returns>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageSchoolContainer.ApplyMagical(System.Int32)">
            <summary>
            Applies the multiplier for <see cref="F:Zelda.Status.Damage.DamageSchool.Magical"/>
            to the specified <paramref name="damage"/> value.
            </summary>
            <remarks>
            This shortcut method for Apply( Int32, DamageSchool ) has been
            defined for perfomance reasons.
            </remarks>
            <param name="damage">
            The input damage value.
            </param>
            <returns>
            The output damage value.
            </returns>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageSchoolContainer.ApplyFixedPhysical(System.Int32)">
            <summary>
            Applies the fixed damage modifier for Physical damage.
            </summary>
            <param name="damage">
            The initial input damage.
            </param>
            <returns>
            The output damage.
            </returns>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageSchoolContainer.ApplyFixedMagical(System.Int32)">
            <summary>
            Applies the fixed damage modifier for Magical damage.
            </summary>
            <param name="damage">
            The initial input damage.
            </param>
            <returns>
            The output damage.
            </returns>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageSchoolContainer.Refresh(Zelda.Status.Damage.DamageSchool)">
            <summary>
            Refreshes the value of the specified DamageSchool modifier value.
            </summary>
            <param name="school">
            The school of damage.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageSchoolContainer.RefreshActual(Zelda.Status.Damage.DamageSchool)">
            <summary>
            Refreshes the value of the specified DamageSchool modifier value.
            </summary>
            <param name="school">
            The school of damage. Must be an actual DamageSchool, no generalization.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageSchoolContainer.GetEffectIdentifier(Zelda.Status.Damage.DamageSchool)">
            <summary>
            Gets the StatusEffect identifier string that is associated with
            the given DamageSchool.
            </summary>
            <param name="school">
            The school of damage.
            </param>
            <returns>
            An unique string identifier.
            </returns>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageSchoolContainer.Get(Zelda.Status.Damage.DamageSchool)">
            <summary>
            Gets the final damage multiplier value for the given DamageSchool.
            </summary>
            <param name="school">
            The school of damage.
            </param>
            <returns>
            The value a damage value of the given DamageSchool should be multiplied by.
            </returns>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageSchoolContainer.GetBase(Zelda.Status.Damage.DamageSchool)">
            <summary>
            Gets the base damage multiplier value for the given DamageSchool.
            </summary>
            <remarks>
            The base value before any StatusEffects are applied.
            </remarks>
            <param name="school">
            The school of damage.
            </param>
            <returns>
            The value a damage value of the given DamageSchool should be multiplied by.
            </returns>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageSchoolContainer.GetFixed(Zelda.Status.Damage.DamageSchool)">
            <summary>
            Gets the fixed damage modifier value for the given DamageSchool.
            </summary>
            <param name="school">
            The school of damage.
            </param>
            <returns>
            The value that should be added to a damage value of the specified DamageSchool.
            </returns>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageSchoolContainer.Set(Zelda.Status.Damage.DamageSchool,System.Single)">
            <summary>
            Sets the final damage multiplier value for the given DamageSchool.
            </summary>
            <remarks>
            The base value before any StatusEffects are applied.
            </remarks>
            <param name="school">
            The school of damage.
            </param>
            <param name="value">
            The value a damage value of the given DamageSchool should be multiplied by.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageSchoolContainer.SetBase(Zelda.Status.Damage.DamageSchool,System.Single)">
            <summary>
            Sets the base damage multiplier value for the given DamageSchool.
            </summary>
            <remarks>
            The base value before any StatusEffects are applied.
            </remarks>
            <param name="school">
            The school of damage.
            </param>
            <param name="value">
            The value a damage value of the given DamageSchool should be multiplied by.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageSchoolContainer.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageSchoolContainer.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageSchoolContainer.SetFinalToBase">
            <summary>
            Sets the chance to resist to be the base chance to resist.
            </summary>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageSchoolContainer.SetupClone(Zelda.Status.Damage.Containers.DamageSchoolContainer)">
            <summary>
            Setups the given DamageSchoolContainer to be a clone of this DamageSchoolContainer.
            </summary>
            <param name="clone">
            The DamageSchoolContainer to setup as a clone of this DamageSchoolContainer.
            </param>
        </member>
        <member name="F:Zelda.Status.Damage.Containers.DamageSchoolContainer.basePhysical">
            <summary>
            Stores the base multiplier for physical and magical damage.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.Containers.DamageSchoolContainer.baseMagical">
            <summary>
            Stores the base multiplier for physical and magical damage.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.Containers.DamageSchoolContainer.physical">
            <summary>
            Stores the final multiplier for physical and magical damage.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.Containers.DamageSchoolContainer.magical">
            <summary>
            Stores the final multiplier for physical and magical damage.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.Containers.DamageSchoolContainer.auraList">
            <summary>
            Identifies the AuraList of the statable entity that owns this DamageSchoolContainer.
            </summary>
        </member>
        <member name="T:Zelda.Status.Damage.Containers.DamageSourceContainer">
            <summary>
            Defines a container that contain modifier values for all <see cref="T:Zelda.Status.Damage.DamageSource"/>s.
            </summary>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageSourceContainer.#ctor">
            <summary>
            Initializes a new instance of the DamageSourceContainer class.
            </summary>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageSourceContainer.Initialize(Zelda.Status.Statable)">
            <summary>
            Initializes this DamageSourceContainer instance.
            </summary>
            <param name="statable">
            The statable component that should own this DamageSourceContainer.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageSourceContainer.Apply(Zelda.Status.Damage.DamageSource,System.Int32)">
            <summary>
            Applies the multiplier for the specified <see cref="T:Zelda.Status.Damage.DamageSource"/>
            to the specified <paramref name="damage"/> value.
            </summary>
            <param name="source">
            The source of the damage.
            </param>
            <param name="damage">
            The input damage value.
            </param>
            <returns>
            The output damage value.
            </returns>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageSourceContainer.ApplyFixed(Zelda.Status.Damage.DamageSource,System.Int32)">
            <summary>
            Applies the fixed modifier for the specified <see cref="T:Zelda.Status.Damage.DamageSource"/>
            to the specified <paramref name="damage"/> value.
            </summary>
            <param name="source">
            The source of the damage.
            </param>
            <param name="damage">
            The input damage value.
            </param>
            <returns>
            The output damage value.
            </returns>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageSourceContainer.ApplyMelee(System.Int32)">
            <summary>
            Applies the multiplier for <see cref="F:Zelda.Status.Damage.DamageSource.Melee"/>
            to the specified <paramref name="damage"/> value.
            </summary>
            <remarks>
            This shortcut method for Apply( Int32, DamageSource ) has been
            defined for perfomance reasons.
            </remarks>
            <param name="damage">
            The input damage value.
            </param>
            <returns>
            The output damage value.
            </returns>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageSourceContainer.ApplyRanged(System.Int32)">
            <summary>
            Applies the multiplier for <see cref="F:Zelda.Status.Damage.DamageSource.Ranged"/>
            to the specified <paramref name="damage"/> value.
            </summary>
            <remarks>
            This shortcut method for Apply( Int32, DamageSource ) has been
            defined for perfomance reasons.
            </remarks>
            <param name="damage">
            The input damage value.
            </param>
            <returns>
            The output damage value.
            </returns>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageSourceContainer.ApplySpell(System.Int32)">
            <summary>
            Applies the multiplier for <see cref="F:Zelda.Status.Damage.DamageSource.Spell"/>
            to the specified <paramref name="damage"/> value.
            </summary>
            <remarks>
            This shortcut method for Apply( Int32, DamageSource ) has been
            defined for perfomance reasons.
            </remarks>
            <param name="damage">
            The input damage value.
            </param>
            <returns>
            The output damage value.
            </returns>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageSourceContainer.ApplyFixedMelee(System.Int32)">
            <summary>
            Applies the fixed modifier value for <see cref="F:Zelda.Status.Damage.DamageSource.Melee"/>
            to the specified <paramref name="damage"/> value.
            </summary>
            <remarks>
            This shortcut method for Apply( Int32, DamageSource ) has been
            defined for perfomance reasons.
            </remarks>
            <param name="damage">
            The input damage value.
            </param>
            <returns>
            The output damage value.
            </returns>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageSourceContainer.ApplyFixedRanged(System.Int32)">
            <summary>
            Applies the fixed modifier value for <see cref="F:Zelda.Status.Damage.DamageSource.Ranged"/>
            to the specified <paramref name="damage"/> value.
            </summary>
            <remarks>
            This shortcut method for Apply( Int32, DamageSource ) has been
            defined for perfomance reasons.
            </remarks>
            <param name="damage">
            The input damage value.
            </param>
            <returns>
            The output damage value.
            </returns>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageSourceContainer.ApplyFixedSpell(System.Int32)">
            <summary>
            Applies the fixed modifier value for <see cref="F:Zelda.Status.Damage.DamageSource.Spell"/>
            to the specified <paramref name="damage"/> value.
            </summary>
            <remarks>
            This shortcut method for Apply( Int32, DamageSource ) has been
            defined for perfomance reasons.
            </remarks>
            <param name="damage">
            The input damage value.
            </param>
            <returns>
            The output damage value.
            </returns>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageSourceContainer.Refresh(Zelda.Status.Damage.DamageSource)">
            <summary>
            Refreshes the value of the specified DamageSource modifier value.
            </summary>
            <param name="source">
            The source of damage.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageSourceContainer.RefreshActual(Zelda.Status.Damage.DamageSource)">
            <summary>
            Refreshes the value of the specified DamageSource modifier value.
            </summary>
            <param name="source">
            The source of damage. Must be an actual DamageSource, no generalization.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageSourceContainer.GetEffectIdentifier(Zelda.Status.Damage.DamageSource)">
            <summary>
            Gets the StatusEffect identifier string that is associated with
            the given DamageSource.
            </summary>
            <param name="source">
            The source of damage.
            </param>
            <returns>
            An unique string identifier.
            </returns>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageSourceContainer.Get(Zelda.Status.Damage.DamageSource)">
            <summary>
            Gets the final damage multiplier value for the given DamageSource.
            </summary>
            <param name="source">
            The Source of damage.
            </param>
            <returns>
            The value a damage value of the given DamageSource should be multiplied by.
            </returns>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageSourceContainer.GetBase(Zelda.Status.Damage.DamageSource)">
            <summary>
            Gets the base damage multiplier value for the given DamageSource.
            </summary>
            <remarks>
            The base value before any StatusEffects are applied.
            </remarks>
            <param name="source">
            The Source of damage.
            </param>
            <returns>
            The value a damage value of the given DamageSource should be multiplied by.
            </returns>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageSourceContainer.GetFixed(Zelda.Status.Damage.DamageSource)">
            <summary>
            Gets the fixed damage modifier value for the given DamageSource.
            </summary>
            <param name="source">
            The Source of damage.
            </param>
            <returns>
            The value that should be added to the  damage value of the specified DamageSource.
            </returns>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageSourceContainer.Set(Zelda.Status.Damage.DamageSource,System.Int32,System.Single)">
            <summary>
            Sets the final damage multiplier value for the given DamageSource.
            </summary>
            <remarks>
            The base value before any StatusEffects are applied.
            </remarks>
            <param name="source">
            The Source of damage.
            </param>
            <param name="fixedValue">
            The value that should be added to a damage value of the given DamageSource.
            </param>
            <param name="multiplierValue">
            The value a damage value of the given DamageSource should be multiplied by.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageSourceContainer.SetBase(Zelda.Status.Damage.DamageSource,System.Single)">
            <summary>
            Sets the base damage multiplier value for the given DamageSource.
            </summary>
            <remarks>
            The base value before any StatusEffects are applied.
            </remarks>
            <param name="source">
            The Source of damage.
            </param>
            <param name="value">
            The value a damage value of the given DamageSource should be multiplied by.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageSourceContainer.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageSourceContainer.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageSourceContainer.SetFinalToBase">
            <summary>
            Sets the chance to resist to be the base chance to resist.
            </summary>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageSourceContainer.SetupClone(Zelda.Status.Damage.Containers.DamageSourceContainer)">
            <summary>
            Setups the given DamageSourceContainer to be a clone of this DamageSourceContainer.
            </summary>
            <param name="clone">
            The DamageSourceContainer to setup as a clone of this DamageSourceContainer.
            </param>
        </member>
        <member name="F:Zelda.Status.Damage.Containers.DamageSourceContainer.baseMelee">
            <summary>
            Stores the base multipliers for the various DamageSources.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.Containers.DamageSourceContainer.baseRanged">
            <summary>
            Stores the base multipliers for the various DamageSources.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.Containers.DamageSourceContainer.baseSpell">
            <summary>
            Stores the base multipliers for the various DamageSources.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.Containers.DamageSourceContainer.melee">
            <summary>
            Stores the final multipliers for the various DamageSources.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.Containers.DamageSourceContainer.ranged">
            <summary>
            Stores the final multipliers for the various DamageSources.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.Containers.DamageSourceContainer.spell">
            <summary>
            Stores the final multipliers for the various DamageSources.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.Containers.DamageSourceContainer.fixedMelee">
            <summary>
            Stores the final multipliers for the various DamageSources.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.Containers.DamageSourceContainer.fixedRanged">
            <summary>
            Stores the final multipliers for the various DamageSources.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.Containers.DamageSourceContainer.fixedSpell">
            <summary>
            Stores the final multipliers for the various DamageSources.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.Containers.DamageSourceContainer.auraList">
            <summary>
            Identifies the AuraList of the statable entity that owns this DamageSourceContainer.
            </summary>
        </member>
        <member name="T:Zelda.Status.Damage.Containers.CriticalDamageBonusContainer">
            <summary>
            Encapsulates the damage increase gained when
            an attack has been a critical attack.
            This class can't be inherited.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.Containers.CriticalDamageBonusContainer.DefaultMelee">
            <summary>
            The default Critical Damage Modifier for Melee damage.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.Containers.CriticalDamageBonusContainer.DefaultRanged">
            <summary>
            The default Critical Damage Modifier for Ranged damage.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.Containers.CriticalDamageBonusContainer.DefaultSpell">
            <summary>
            The default Critical Damage Modifier for Spell damage.
            </summary>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.CriticalDamageBonusContainer.GetDefault(Zelda.Status.Damage.DamageSource)">
            <summary>
            Gets the default Critical Damage Modifier for the specified <see cref="T:Zelda.Status.Damage.DamageSource"/>.
            </summary>
            <param name="source">
            The source of damage.
            </param>
            <returns>
            The multiplier that should be applied when an attack has crit.
            </returns>
        </member>
        <member name="P:Zelda.Status.Damage.Containers.CriticalDamageBonusContainer.Melee">
            <summary>
            Gets the damage multiplier value that should get applied
            when a Melee attack has been a critical attack.
            </summary>
        </member>
        <member name="P:Zelda.Status.Damage.Containers.CriticalDamageBonusContainer.Ranged">
            <summary>
            Gets the damage multiplier value that should get applied
            when a Ranged attack has been a critical attack.
            </summary>
        </member>
        <member name="P:Zelda.Status.Damage.Containers.CriticalDamageBonusContainer.Spell">
            <summary>
            Gets the damage multiplier value that should get applied
            when a Spell attack has been a critical attack.
            </summary>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.CriticalDamageBonusContainer.#ctor">
            <summary>
            Initializes a new instance of the CriticalDamageBonusContainer class.
            </summary>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.CriticalDamageBonusContainer.Initialize(Zelda.Status.Statable)">
            <summary>
            Initializes this CriticalDamageBonusContainer instance.
            </summary>
            <param name="statable">
            The Statable component that should own this CriticalDamageBonusContainer.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.CriticalDamageBonusContainer.Refresh(Zelda.Status.Damage.DamageSource)">
            <summary>
            Refreshes the critical damage bonus for the specified DamageSource.
            </summary>
            <param name="source">
            The source of the damage.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.CriticalDamageBonusContainer.RefreshActual(Zelda.Status.Damage.DamageSource)">
            <summary>
            Refreshes the critical damage bonus for the specified DamageSource.
            </summary>
            <param name="source">
            The source of the damage.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.CriticalDamageBonusContainer.Set(Zelda.Status.Damage.DamageSource,System.Single)">
            <summary>
            Sets the critical damage modifier property for the specified DamageSource.
            </summary>
            <param name="source">
            The DamageSource whose critical damage properties should be set.
            </param>
            <param name="multiplierValue">
            The value a damage value of the given DamageSource that has crit should be multiplied by.
            </param>
        </member>
        <member name="F:Zelda.Status.Damage.Containers.CriticalDamageBonusContainer.melee">
            <summary>
            The critical damage modifiers.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.Containers.CriticalDamageBonusContainer.ranged">
            <summary>
            The critical damage modifiers.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.Containers.CriticalDamageBonusContainer.spell">
            <summary>
            The critical damage modifiers.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.Containers.CriticalDamageBonusContainer.statable">
            <summary>
            Identifies the <see cref="T:Zelda.Status.Statable"/> component that owns this CriticalDamageBonusContainer.
            </summary>
        </member>
        <member name="T:Zelda.Status.Damage.Containers.DamageDoneAgainstRaceContainer">
            <summary>
            Encapsulates the damage properties that are applied
            on damage done against a specific <see cref="T:Zelda.Status.RaceType"/>.
            This class can't be inherited.
            </summary>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageDoneAgainstRaceContainer.#ctor">
            <summary>
            Initializes a new instance of the DamageDoneAgainstRaceContainer class.
            </summary>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageDoneAgainstRaceContainer.Initialize(Zelda.Status.ExtendedStatable)">
            <summary>
            Initializes this DamageDoneAgainstRaceContainer instance.
            </summary>
            <param name="statable">
            The ExtendedStatable component that should own this DamageSourceContainer.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageDoneAgainstRaceContainer.Apply(System.Int32,Zelda.Status.RaceType)">
            <summary>
            Applies the damage multiplier for the specified <see cref="T:Zelda.Status.RaceType"/>
            to the specified <paramref name="damage"/> value.
            </summary>
            <param name="damage">
            The input damage value.
            </param>
            <param name="race">
            The race of the target of the damage.
            </param>
            <returns>
            The output damage value.
            </returns>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageDoneAgainstRaceContainer.ApplyFixed(System.Int32,Zelda.Status.RaceType)">
            <summary>
            Applies the fixed damage modifier for the specified <see cref="T:Zelda.Status.RaceType"/>
            to the specified <paramref name="damage"/> value.
            </summary>
            <param name="damage">
            The input damage value.
            </param>
            <param name="race">
            The race of the target of the damage.
            </param>
            <returns>
            The output damage value.
            </returns>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageDoneAgainstRaceContainer.Refresh(Zelda.Status.RaceType)">
            <summary>
            Refreshes the damage properties against the specified Race.
            </summary>
            <param name="race">
            The race to refresh.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageDoneAgainstRaceContainer.Get(Zelda.Status.RaceType)">
            <summary>
            Gets the damage multiplier value for the given RaceType.
            </summary>
            <param name="race">
            The race of the target of the damage.
            </param>
            <returns>
            The value a damage value that is directed against the specified Race should be multiplied by.
            </returns>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageDoneAgainstRaceContainer.GetFixed(Zelda.Status.RaceType)">
            <summary>
            Gets the fixed damage modifier value for the given RaceType.
            </summary>
            <param name="race">
            The race of the target of the damage.
            </param>
            <returns>
            The value that should be added to damage value that is directed against the specified Race.
            </returns>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageDoneAgainstRaceContainer.Set(Zelda.Status.RaceType,System.Int32,System.Single)">
            <summary>
            Sets the modifier properties for the specified RaceType.
            </summary>
            <param name="race">
            The race whose properties should be set.
            </param>
            <param name="fixedValue">
            The value that should be added to a damage value of the given DamageSchool.
            </param>
            <param name="multiplierValue">
            The value a damage value of the given DamageSchool should be multiplied by.
            </param>
        </member>
        <member name="F:Zelda.Status.Damage.Containers.DamageDoneAgainstRaceContainer.undead">
            <summary>
            The multiplier values that are applied against enemies of a specific Race.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.Containers.DamageDoneAgainstRaceContainer.human">
            <summary>
            The multiplier values that are applied against enemies of a specific Race.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.Containers.DamageDoneAgainstRaceContainer.machine">
            <summary>
            The multiplier values that are applied against enemies of a specific Race.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.Containers.DamageDoneAgainstRaceContainer.plant">
            <summary>
            The multiplier values that are applied against enemies of a specific Race.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.Containers.DamageDoneAgainstRaceContainer.fairy">
            <summary>
            The multiplier values that are applied against enemies of a specific Race.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.Containers.DamageDoneAgainstRaceContainer.beast">
            <summary>
            The multiplier values that are applied against enemies of a specific Race.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.Containers.DamageDoneAgainstRaceContainer.demiHuman">
            <summary>
            The multiplier values that are applied against enemies of a specific Race.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.Containers.DamageDoneAgainstRaceContainer.slime">
            <summary>
            The multiplier values that are applied against enemies of a specific Race.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.Containers.DamageDoneAgainstRaceContainer.demiBeast">
            <summary>
            The multiplier values that are applied against enemies of a specific Race.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.Containers.DamageDoneAgainstRaceContainer.demon">
            <summary>
            The multiplier values that are applied against enemies of a specific Race.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.Containers.DamageDoneAgainstRaceContainer.fixedUndead">
            <summary>
            The fixed modifier values that are applied against enemies of a specific Race.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.Containers.DamageDoneAgainstRaceContainer.fixedHuman">
            <summary>
            The fixed modifier values that are applied against enemies of a specific Race.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.Containers.DamageDoneAgainstRaceContainer.fixedPlant">
            <summary>
            The fixed modifier values that are applied against enemies of a specific Race.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.Containers.DamageDoneAgainstRaceContainer.fixedMachine">
            <summary>
            The fixed modifier values that are applied against enemies of a specific Race.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.Containers.DamageDoneAgainstRaceContainer.fixedFairy">
            <summary>
            The fixed modifier values that are applied against enemies of a specific Race.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.Containers.DamageDoneAgainstRaceContainer.fixedBeast">
            <summary>
            The fixed modifier values that are applied against enemies of a specific Race.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.Containers.DamageDoneAgainstRaceContainer.fixedDemiHuman">
            <summary>
            The fixed modifier values that are applied against enemies of a specific Race.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.Containers.DamageDoneAgainstRaceContainer.fixedSlime">
            <summary>
            The fixed modifier values that are applied against enemies of a specific Race.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.Containers.DamageDoneAgainstRaceContainer.fixedDemiBeast">
            <summary>
            The fixed modifier values that are applied against enemies of a specific Race.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.Containers.DamageDoneAgainstRaceContainer.fixedDemon">
            <summary>
            The fixed modifier values that are applied against enemies of a specific Race.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.Containers.DamageDoneAgainstRaceContainer.auraList">
            <summary>
            Identifies the AuraList of the statable entity that owns this DamageDoneAgainstRaceContainer.
            </summary>
        </member>
        <member name="T:Zelda.Status.Damage.Containers.DamageDoneContainer">
            <summary>
            Encapsulates the damage done properties of <see cref="T:Zelda.Status.Statable"/> entity.
            </summary>
        </member>
        <member name="P:Zelda.Status.Damage.Containers.DamageDoneContainer.WithSource">
            <summary>
            Gets the <see cref="T:Zelda.Status.Damage.Containers.DamageDoneWithSourceContainer"/> that encapsulates
            what the damage done properties towards specific <see cref="T:Zelda.Status.Damage.DamageSource"/>s.
            </summary>
        </member>
        <member name="P:Zelda.Status.Damage.Containers.DamageDoneContainer.WithSchool">
            <summary>
            Gets the <see cref="T:Zelda.Status.Damage.Containers.DamageDoneWithSchoolContainer"/> that encapsulates
            what the damage done properties towards specifics <see cref="T:Zelda.Status.Damage.DamageSchool"/>.
            </summary>
        </member>
        <member name="P:Zelda.Status.Damage.Containers.DamageDoneContainer.WithElement">
            <summary>
            Gets the <see cref="T:Zelda.Status.Damage.Containers.ElementalDamageDoneContainer"/> that encapsulates
            what the damage done properties towards specifics <see cref="T:Zelda.Status.ElementalSchool"/>.
            </summary>
        </member>
        <member name="P:Zelda.Status.Damage.Containers.DamageDoneContainer.WithCritical">
            <summary>
            Gets the <see cref="T:Zelda.Status.Damage.Containers.CriticalDamageBonusContainer"/> that encapsulates
            what the damage done properties that are applied when damage has been critical.
            </summary>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageDoneContainer.#ctor">
            <summary>
            Initializes a new instance of the DamageDoneContainer class.
            </summary>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageDoneContainer.Initialize(Zelda.Status.Statable)">
            <summary>
            Initializes this DamageDoneContainer instance.
            </summary>
            <param name="statable">
            The statable component that should own this DamageDoneContainer.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageDoneContainer.Apply(System.Int32,Zelda.Status.Damage.DamageTypeInfo)">
            <summary>
            Applies the damage multipliers contained in this DamageDoneContainer
            to the specified damage that is descriped by the specified DamageTypeInfo.
            </summary>
            <param name="damage">
            The input damage.
            </param>
            <param name="damageTypeInfo">
            The type of the damage.
            </param>
            <returns>
            The output damage.
            </returns>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageDoneContainer.ApplyFixed(System.Int32,Zelda.Status.Damage.DamageTypeInfo)">
            <summary>
            Applies the fixed damage modifiers contained in this DamageDoneContainer
            to the specified damage that is descriped by the specified DamageTypeInfo.
            </summary>
            <param name="damage">
            The input damage.
            </param>
            <param name="damageTypeInfo">
            The type of the damage.
            </param>
            <returns>
            The output damage.
            </returns>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageDoneContainer.ApplyPhysicalMelee(System.Int32)">
            <summary>
            Applies the damage multipliers for Physical Melee damage.
            </summary>
            <param name="damage">
            The initial input damage.
            </param>
            <returns>
            The output damage.
            </returns>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageDoneContainer.ApplyFixedPhysicalMelee(System.Int32)">
            <summary>
            Applies the fixed damage modifiers for Physical Melee damage.
            </summary>
            <param name="damage">
            The initial input damage.
            </param>
            <returns>
            The output damage.
            </returns>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageDoneContainer.ApplyPhysicalRanged(System.Int32)">
            <summary>
            Applies the damage multipliers for Physical Ranged damage.
            </summary>
            <param name="damage">
            The initial input damage.
            </param>
            <returns>
            The output damage.
            </returns>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageDoneContainer.ApplyFixedPhysicalRanged(System.Int32)">
            <summary>
            Applies the fixed damage modifiers for Physical Ranged damage.
            </summary>
            <param name="damage">
            The initial input damage.
            </param>
            <returns>
            The output damage.
            </returns>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageDoneContainer.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageDoneContainer.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageDoneContainer.SetupClone(Zelda.Status.Damage.Containers.DamageDoneContainer)">
            <summary>
            Setups the given DamageDoneContainer to be a clone of this DamageDoneContainer.
            </summary>
            <param name="clone">
            The DamageDoneContainer to setup as a clone of this DamageDoneContainer.
            </param>
        </member>
        <member name="F:Zelda.Status.Damage.Containers.DamageDoneContainer.withSource">
            <summary>
            Encapsulates the damage done properties that relate to specific <see cref="T:Zelda.Status.Damage.DamageSource"/>s.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.Containers.DamageDoneContainer.withSchool">
            <summary>
            Encapsulates the damage done properties that relate to specific <see cref="T:Zelda.Status.Damage.DamageSchool"/>s.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.Containers.DamageDoneContainer.withElement">
            <summary>
            Encapsulates the damage done properties that relate to specific <see cref="T:Zelda.Status.ElementalSchool"/>s.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.Containers.DamageDoneContainer.withCritical">
            <summary>
            Encapsulates the damage multipliers that are applied when damage has been critical.
            </summary>
        </member>
        <member name="T:Zelda.Status.Damage.Containers.DamageDoneWithSchoolContainer">
            <summary>
            Encapsulates the damage done properties for all <see cref="T:Zelda.Status.Damage.DamageSchool"/>s.
            This class can't be inherited.
            </summary>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageDoneWithSchoolContainer.#ctor">
            <summary>
            Initializes a new instance of the DamageDoneWithSchoolContainer class.
            </summary>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageDoneWithSchoolContainer.GetEffectIdentifier(Zelda.Status.Damage.DamageSchool)">
            <summary>
            Gets the StatusEffect identifier string that is associated with
            the given DamageSchool.
            </summary>
            <param name="school">
            The school of damage.
            </param>
            <returns>
            An unique string identifier.
            </returns>
        </member>
        <member name="T:Zelda.Status.Damage.Containers.DamageDoneWithSourceContainer">
            <summary>
            Encapsulates the damage done properties for all <see cref="T:Zelda.Status.Damage.DamageSource"/>s.
            This class can't be inherited.
            </summary>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageDoneWithSourceContainer.#ctor">
            <summary>
            Initializes a new instance of the DamageDoneWithSourceContainer class.
            </summary>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageDoneWithSourceContainer.GetEffectIdentifier(Zelda.Status.Damage.DamageSource)">
            <summary>
            Gets the StatusEffect identifier string that is associated with
            the given DamageSource.
            </summary>
            <param name="school">
            The school of damage.
            </param>
            <returns>
            An unique string identifier.
            </returns>
        </member>
        <member name="T:Zelda.Status.Damage.Containers.ElementalDamageDoneContainer">
            <summary>
            Encapsulates the damage taken from magical attacks of a specific <see cref="T:Zelda.Status.ElementalSchool"/>.
            This class can't be inherited.
            </summary>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.ElementalDamageDoneContainer.#ctor">
            <summary>
            Initializes a new instance of the ElementalDamageDoneContainer class.
            </summary>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.ElementalDamageDoneContainer.GetEffectIdentifier(Zelda.Status.ElementalSchool)">
            <summary>
            Gets the StatusEffect identifier string that is associated with
            the given ElementalSchool.
            </summary>
            <param name="school">
            The school of damage.
            </param>
            <returns>
            An unique string identifier.
            </returns>
        </member>
        <member name="T:Zelda.Status.Damage.Containers.ExtendedDamageDoneContainer">
            <summary>
            Encapsulates the damage done properties of <see cref="T:Zelda.Status.ExtendedStatable"/> entity.
            </summary>
        </member>
        <member name="P:Zelda.Status.Damage.Containers.ExtendedDamageDoneContainer.AgainstRace">
            <summary>
            Gets the <see cref="T:Zelda.Status.Damage.Containers.DamageDoneAgainstRaceContainer"/> that encapsulates the
            damage done properties that relate to specific <see cref="T:Zelda.Status.RaceType"/>s.
            </summary>
        </member>
        <member name="P:Zelda.Status.Damage.Containers.ExtendedDamageDoneContainer.WithSpecial">
            <summary>
            Gets the <see cref="T:Zelda.Status.Damage.Containers.SpecialDamageDoneContainer"/> that encapsulates the
            damage done properties of damage with a <see cref="T:Zelda.Status.Damage.SpecialDamageType"/>.
            </summary>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.ExtendedDamageDoneContainer.#ctor">
            <summary>
            Initializes a new instance of the ExtendedDamageDoneContainer class.
            </summary>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.ExtendedDamageDoneContainer.Initialize(Zelda.Status.Statable)">
            <summary>
            Initializes this DamageDoneContainer instance.
            </summary>
            <param name="statable">
            The statable component that should own this DamageDoneContainer.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.ExtendedDamageDoneContainer.Apply(System.Int32,Zelda.Status.Statable,Zelda.Status.Damage.DamageTypeInfo)">
            <summary>
            Applies the damage multpliers contained in this ExtendedDamageDoneContainer
            to the specified damage that is descriped by the specified DamageTypeInfo.
            </summary>
            <param name="damage">
            The input damage.
            </param>
            <param name="target">
            The target of the damage.
            </param>
            <param name="damageTypeInfo">
            The type of the damage.
            </param>
            <returns>
            The output damage.
            </returns>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.ExtendedDamageDoneContainer.ApplyFixed(System.Int32,Zelda.Status.Statable,Zelda.Status.Damage.DamageTypeInfo)">
            <summary>
            Applies the fixed damage modifiers contained in this ExtendedDamageDoneContainer
            to the specified damage that is descriped by the specified DamageTypeInfo.
            </summary>
            <param name="damage">
            The input damage.
            </param>
            <param name="target">
            The target of the damage.
            </param>
            <param name="damageTypeInfo">
            The type of the damage.
            </param>
            <returns>
            The output damage.
            </returns>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.ExtendedDamageDoneContainer.ApplyMagicalSpell(System.Int32,Zelda.Status.ElementalSchool,Zelda.Status.RaceType)">
            <summary>
            Applies the damage multipliers for a magical spell of the given <see cref="T:Zelda.Status.ElementalSchool"/>
            targeted against an enemy of the specified RaceType.
            </summary>
            <param name="damage">
            The input damage.
            </param>
            <param name="elementalSchool">
            The school of spell.
            </param>
            <param name="targetRace">
            The race of the entity that is the target of this damage.
            </param>
            <returns>
            The output damage.
            </returns>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.ExtendedDamageDoneContainer.ApplyFixedMagicalSpell(System.Int32,Zelda.Status.ElementalSchool,Zelda.Status.RaceType)">
            <summary>
            Applies the fixed damage modifiers for a magical spell of the given <see cref="T:Zelda.Status.ElementalSchool"/>
            targeted against an enemy of the specified RaceType.
            </summary>
            <param name="damage">
            The input damage.
            </param>
            <param name="elementalSchool">
            The school of spell.
            </param>
            <param name="targetRace">
            The race of the entity that is the target of this damage.
            </param>
            <returns>
            The output damage.
            </returns>
        </member>
        <member name="F:Zelda.Status.Damage.Containers.ExtendedDamageDoneContainer.againstRace">
            <summary>
            Encapsulates the damage done properties that relate to specific <see cref="T:Zelda.Status.RaceType"/>s.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.Containers.ExtendedDamageDoneContainer.withSpecial">
            <summary>
            Encapsulates the damage done properties for damage of a <see cref="T:Zelda.Status.Damage.SpecialDamageType"/>.
            </summary>
        </member>
        <member name="T:Zelda.Status.Damage.Containers.SpecialDamageDoneContainer">
            <summary>
            Encapsulates the damage properties that are applied
            on damage done of a <see cref="T:Zelda.Status.Damage.SpecialDamageType"/>.
            This class can't be inherited.
            </summary>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.SpecialDamageDoneContainer.#ctor">
            <summary>
            Initializes a new instance of the SpecialDamageDoneContainer class.
            </summary>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.SpecialDamageDoneContainer.Initialize(Zelda.Status.ExtendedStatable)">
            <summary>
            Initializes this SpecialDamageDoneContainer instance.
            </summary>
            <param name="statable">
            The ExtendedStatable component that should own this DamageSourceContainer.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.SpecialDamageDoneContainer.Apply(System.Int32,Zelda.Status.Damage.SpecialDamageType)">
            <summary>
            Applies the damage multiplier for the specified <see cref="T:Zelda.Status.Damage.SpecialDamageType"/>
            to the specified <paramref name="damage"/> value.
            </summary>
            <param name="damage">
            The input damage value.
            </param>
            <param name="damageType">
            The damageType of the target of the damage.
            </param>
            <returns>
            The output damage value.
            </returns>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.SpecialDamageDoneContainer.ApplyFixed(System.Int32,Zelda.Status.Damage.SpecialDamageType)">
            <summary>
            Applies the fixed damage modifier for the specified <see cref="T:Zelda.Status.Damage.SpecialDamageType"/>
            to the specified <paramref name="damage"/> value.
            </summary>
            <param name="damage">
            The input damage value.
            </param>
            <param name="damageType">
            The damageType of the target of the damage.
            </param>
            <returns>
            The output damage value.
            </returns>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.SpecialDamageDoneContainer.Refresh(Zelda.Status.Damage.SpecialDamageType)">
            <summary>
            Refreshes the damage properties for the specified SpecialDamageType.
            </summary>
            <param name="damageType">
            The SpecialDamageType to refresh.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.SpecialDamageDoneContainer.Get(Zelda.Status.Damage.SpecialDamageType)">
            <summary>
            Gets the damage multiplier value for the given SpecialDamageType.
            </summary>
            <param name="damageType">
            The damageType of the target of the damage.
            </param>
            <returns>
            The value a damage value that is directed against the specified Race should be multiplied by.
            </returns>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.SpecialDamageDoneContainer.GetFixed(Zelda.Status.Damage.SpecialDamageType)">
            <summary>
            Gets the fixed damage modifier value for the given SpecialDamageType.
            </summary>
            <param name="damageType">
            The damageType of the target of the damage.
            </param>
            <returns>
            The value that should be added to damage value that is directed against the specified Race.
            </returns>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.SpecialDamageDoneContainer.Set(Zelda.Status.Damage.SpecialDamageType,System.Int32,System.Single)">
            <summary>
            Sets the modifier properties for the specified SpecialDamageType.
            </summary>
            <param name="damageType">
            The damageType whose properties should be set.
            </param>
            <param name="fixedValue">
            The value that should be added to a damage value of the given SpecialDamageType.
            </param>
            <param name="multiplierValue">
            The value a damage value of the given SpecialDamageType should be multiplied by.
            </param>
        </member>
        <member name="F:Zelda.Status.Damage.Containers.SpecialDamageDoneContainer.damageOverTime">
            <summary>
            The multiplier values that are applied against enemies of a specific Race.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.Containers.SpecialDamageDoneContainer.bleed">
            <summary>
            The multiplier values that are applied against enemies of a specific Race.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.Containers.SpecialDamageDoneContainer.poison">
            <summary>
            The multiplier values that are applied against enemies of a specific Race.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.Containers.SpecialDamageDoneContainer.fixedDamageOverTime">
            <summary>
            The fixed modifier values that are applied against enemies of a specific Race.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.Containers.SpecialDamageDoneContainer.fixedBleed">
            <summary>
            The fixed modifier values that are applied against enemies of a specific Race.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.Containers.SpecialDamageDoneContainer.fixedPoison">
            <summary>
            The fixed modifier values that are applied against enemies of a specific Race.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.Containers.SpecialDamageDoneContainer.auraList">
            <summary>
            Identifies the AuraList of the statable entity that owns this SpecialDamageDoneContainer.
            </summary>
        </member>
        <member name="T:Zelda.Status.Damage.Containers.ElementalSchoolContainer">
            <summary>
            Defines a container that contain modifier values for all <see cref="T:Zelda.Status.ElementalSchool"/>s.
            </summary>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.ElementalSchoolContainer.#ctor">
            <summary>
            Initializes a new instance of the ElementalSchoolContainer class.
            </summary>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.ElementalSchoolContainer.Initialize(Zelda.Status.Statable)">
            <summary>
            Initializes this ElementalSchoolContainer instance.
            </summary>
            <param name="statable">
            The statable component that should own this ElementalSchoolContainer.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.ElementalSchoolContainer.Apply(Zelda.Status.ElementalSchool,System.Int32)">
            <summary>
            Applies this multiplier for the specified <see cref="T:Zelda.Status.ElementalSchool"/>
            to the specified <paramref name="damage"/> value.
            </summary>
            <param name="element">
            The element of the damage.
            </param>
            <param name="damage">
            The input damage value.
            </param>
            <returns>
            The output damage value.
            </returns>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.ElementalSchoolContainer.ToString">
            <summary>
            Overriden to return a string representation of this ElementalSchoolContainer.
            </summary>
            <returns>
            A string representation of this object.
            </returns>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.ElementalSchoolContainer.Refresh(Zelda.Status.ElementalSchool)">
            <summary>
            Refreshes the value of the specified ElementalSchool modifier value.
            </summary>
            <param name="school">
            The school of damage.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.ElementalSchoolContainer.RefreshActual(Zelda.Status.ElementalSchool)">
            <summary>
            Refreshes the value of the specified ElementalSchool modifier value.
            </summary>
            <param name="school">
            The school of damage. Must be an actual ElementalSchool, no generalization.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.ElementalSchoolContainer.GetEffectIdentifier(Zelda.Status.ElementalSchool)">
            <summary>
            Gets the StatusEffect identifier string that is associated with
            the given ElementalSchool.
            </summary>
            <param name="school">
            The school of damage.
            </param>
            <returns>
            An unique string identifier.
            </returns>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.ElementalSchoolContainer.Get(Zelda.Status.ElementalSchool)">
            <summary>
            Gets the final damage multiplier value for the given ElementalSchool.
            </summary>
            <param name="school">
            The school of damage.
            </param>
            <returns>
            The value a damage value of the given ElementalSchool should be multiplied by.
            </returns>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.ElementalSchoolContainer.GetBase(Zelda.Status.ElementalSchool)">
            <summary>
            Gets the base damage multiplier value for the given ElementalSchool.
            </summary>
            <remarks>
            The base value before any StatusEffects are applied.
            </remarks>
            <param name="school">
            The school of damage.
            </param>
            <returns>
            The value a damage value of the given ElementalSchool should be multiplied by.
            </returns>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.ElementalSchoolContainer.Set(Zelda.Status.ElementalSchool,System.Single)">
            <summary>
            Sets the final damage multiplier value for the given ElementalSchool.
            </summary>
            <remarks>
            The base value before any StatusEffects are applied.
            </remarks>
            <param name="school">
            The school of damage.
            </param>
            <param name="value">
            The value a damage value of the given ElementalSchool should be multiplied by.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.ElementalSchoolContainer.SetBase(Zelda.Status.ElementalSchool,System.Single)">
            <summary>
            Sets the base damage multiplier value for the given ElementalSchool.
            </summary>
            <remarks>
            The base value before any StatusEffects are applied.
            </remarks>
            <param name="school">
            The school of damage.
            </param>
            <param name="value">
            The value a damage value of the given ElementalSchool should be multiplied by.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.ElementalSchoolContainer.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.ElementalSchoolContainer.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.ElementalSchoolContainer.SetFinalToBase">
            <summary>
            Sets the final values to the base values.
            </summary>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.ElementalSchoolContainer.SetupClone(Zelda.Status.Damage.Containers.ElementalSchoolContainer)">
            <summary>
            Setups the given ElementalSchoolContainer to be a clone of this ElementalSchoolContainer.
            </summary>
            <param name="clone">
            The ElementalSchoolContainer to setup as a clone of this ElementalSchoolContainer.
            </param>
        </member>
        <member name="F:Zelda.Status.Damage.Containers.ElementalSchoolContainer.baseFire">
            <summary>
            Stores the base multiplier values for elemental damage.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.Containers.ElementalSchoolContainer.baseWater">
            <summary>
            Stores the base multiplier values for elemental damage.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.Containers.ElementalSchoolContainer.baseLight">
            <summary>
            Stores the base multiplier values for elemental damage.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.Containers.ElementalSchoolContainer.baseShadow">
            <summary>
            Stores the base multiplier values for elemental damage.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.Containers.ElementalSchoolContainer.baseNature">
            <summary>
            Stores the base multiplier values for elemental damage.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.Containers.ElementalSchoolContainer.fire">
            <summary>
            Stores the final multiplier values for elemental damage.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.Containers.ElementalSchoolContainer.water">
            <summary>
            Stores the final multiplier values for elemental damage.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.Containers.ElementalSchoolContainer.light">
            <summary>
            Stores the final multiplier values for elemental damage.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.Containers.ElementalSchoolContainer.shadow">
            <summary>
            Stores the final multiplier values for elemental damage.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.Containers.ElementalSchoolContainer.nature">
            <summary>
            Stores the final multiplier values for elemental damage.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.Containers.ElementalSchoolContainer.auraList">
            <summary>
            Identifies the AuraList of the statable entity that owns this ElementalSchoolContainer.
            </summary>
        </member>
        <member name="T:Zelda.Status.Damage.Containers.DamageTakenContainer">
            <summary>
            Encapsulates the damage taken properties of <see cref="T:Zelda.Status.Statable"/> entity.
            This class can't be inherited.
            </summary>
        </member>
        <member name="P:Zelda.Status.Damage.Containers.DamageTakenContainer.FromSource">
            <summary>
            Gets the <see cref="T:Zelda.Status.Damage.Containers.DamageTakenFromSourceContainer"/> that encapsulates
            what the damage taken properties towards specific <see cref="T:Zelda.Status.Damage.DamageSource"/>s.
            </summary>
        </member>
        <member name="P:Zelda.Status.Damage.Containers.DamageTakenContainer.FromSchool">
            <summary>
            Gets the <see cref="T:Zelda.Status.Damage.Containers.DamageTakenFromSchoolContainer"/> that encapsulates
            what the damage taken properties towards specifics <see cref="T:Zelda.Status.Damage.DamageSchool"/>.
            </summary>
        </member>
        <member name="P:Zelda.Status.Damage.Containers.DamageTakenContainer.FromElement">
            <summary>
            Gets the <see cref="T:Zelda.Status.Damage.Containers.ElementalDamageTakenContainer"/> that encapsulates
            what the damage taken properties towards specifics <see cref="T:Zelda.Status.ElementalSchool"/>.
            </summary>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageTakenContainer.#ctor">
            <summary>
            Initializes a new instance of the DamageTakenContainer class.
            </summary>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageTakenContainer.Initialize(Zelda.Status.Statable)">
            <summary>
            Initializes this DamageTakenContainer instance.
            </summary>
            <param name="statable">
            The statable component that should own this DamageTakenContainer.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageTakenContainer.ApplyFixed(System.Int32,Zelda.Status.Damage.DamageTypeInfo)">
            <summary>
            Applies the fixed damage modifiers contained in this DamageTakenContainer
            to the specified damage that is descriped by the specified DamageTypeInfo.
            </summary>
            <param name="damage">
            The input damage.
            </param>
            <param name="damageTypeInfo">
            The type of the damage.
            </param>
            <returns>
            The output damage.
            </returns>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageTakenContainer.Apply(System.Int32,Zelda.Status.Damage.DamageTypeInfo)">
            <summary>
            Applies the damage multpliers contained in this DamageTakenContainer
            to the specified damage that is descriped by the specified DamageTypeInfo.
            </summary>
            <param name="damage">
            The input damage.
            </param>
            <param name="damageTypeInfo">
            The type of the damage.
            </param>
            <returns>
            The output damage.
            </returns>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageTakenContainer.ApplyPhysicalMelee(System.Int32)">
            <summary>
            Applies the damage multipliers for Physical Melee damage.
            </summary>
            <param name="damage">
            The initial input damage.
            </param>
            <returns>
            The output damage.
            </returns>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageTakenContainer.ApplyFixedPhysicalMelee(System.Int32)">
            <summary>
            Applies the fixed damage modifiers for Physical Melee damage.
            </summary>
            <param name="damage">
            The initial input damage.
            </param>
            <returns>
            The output damage.
            </returns>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageTakenContainer.ApplyPhysicalRanged(System.Int32)">
            <summary>
            Applies the damage multipliers for Physical Ranged damage.
            </summary>
            <param name="damage">
            The initial input damage.
            </param>
            <returns>
            The output damage.
            </returns>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageTakenContainer.ApplyFixedPhysicalRanged(System.Int32)">
            <summary>
            Applies the fixed damage modifiers for Physical Ranged damage.
            </summary>
            <param name="damage">
            The initial input damage.
            </param>
            <returns>
            The output damage.
            </returns>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageTakenContainer.ApplyMagicalSpell(System.Int32,Zelda.Status.ElementalSchool)">
            <summary>
            Applies the damage multiplier for a magical spell of
            the specified <see cref="T:Zelda.Status.ElementalSchool"/>.
            </summary>
            <param name="damage">
            The input damage.
            </param>
            <param name="elementalSchool">
            The school of the spell.
            </param>
            <returns>
            The output damage.
            </returns>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageTakenContainer.ApplyFixedMagicalSpell(System.Int32,Zelda.Status.ElementalSchool)">
            <summary>
            Applies the fixed damage modifiers for a magical spell of
            the specified <see cref="T:Zelda.Status.ElementalSchool"/>.
            </summary>
            <param name="damage">
            The input damage.
            </param>
            <param name="elementalSchool">
            The school of the spell.
            </param>
            <returns>
            The output damage.
            </returns>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageTakenContainer.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageTakenContainer.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageTakenContainer.SetupClone(Zelda.Status.Damage.Containers.DamageTakenContainer)">
            <summary>
            Setups the given DamageTakenContainer to be a clone of this DamageTakenContainer.
            </summary>
            <param name="clone">
            The DamageTakenContainer to setup as a clone of this DamageTakenContainer.
            </param>
        </member>
        <member name="F:Zelda.Status.Damage.Containers.DamageTakenContainer.fromSource">
            <summary>
            Encapsulates the damage taken properties that relate to specific <see cref="T:Zelda.Status.Damage.DamageSource"/>s.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.Containers.DamageTakenContainer.fromSchool">
            <summary>
            Encapsulates the damage taken properties that relate to specific <see cref="T:Zelda.Status.Damage.DamageSchool"/>s.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.Containers.DamageTakenContainer.fromElement">
            <summary>
            Encapsulates the damage taken properties that relate to specific <see cref="T:Zelda.Status.ElementalSchool"/>s.
            </summary>
        </member>
        <member name="T:Zelda.Status.Damage.Containers.DamageTakenFromSchoolContainer">
            <summary>
            Encapsulates the damage taken properties for all <see cref="T:Zelda.Status.Damage.DamageSchool"/>s.
            This class can't be inherited.
            </summary>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageTakenFromSchoolContainer.#ctor">
            <summary>
            Initializes a new instance of the DamageTakenFromSchoolContainer class.
            </summary>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageTakenFromSchoolContainer.GetEffectIdentifier(Zelda.Status.Damage.DamageSchool)">
            <summary>
            Gets the StatusEffect identifier string that is associated with
            the given DamageSchool.
            </summary>
            <param name="school">
            The school of damage.
            </param>
            <returns>
            An unique string identifier.
            </returns>
        </member>
        <member name="T:Zelda.Status.Damage.Containers.DamageTakenFromSourceContainer">
            <summary>
            Encapsulates the damage taken properties that relate to a <see cref="T:Zelda.Status.Damage.DamageSource"/>.
            This class can't be inherited.
            </summary>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageTakenFromSourceContainer.#ctor">
            <summary>
            Initializes a new instance of the DamageTakenFromSourceContainer class.
            </summary>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.DamageTakenFromSourceContainer.GetEffectIdentifier(Zelda.Status.Damage.DamageSource)">
            <summary>
            Gets the StatusEffect identifier string that is associated with
            the given DamageSource.
            </summary>
            <param name="source">
            The source of damage.
            </param>
            <returns>
            An unique string identifier.
            </returns>
        </member>
        <member name="T:Zelda.Status.Damage.Containers.ElementalDamageTakenContainer">
            <summary>
            Encapsulates the damage taken from magical attacks of a specific <see cref="T:Zelda.Status.ElementalSchool"/>.
            This class can't be inherited.
            </summary>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.ElementalDamageTakenContainer.#ctor">
            <summary>
            Initializes a new instance of the ElementalDamageTakenContainer class.
            </summary>
        </member>
        <member name="M:Zelda.Status.Damage.Containers.ElementalDamageTakenContainer.GetEffectIdentifier(Zelda.Status.ElementalSchool)">
            <summary>
            Gets the StatusEffect identifier string that is associated with
            the given ElementalSchool.
            </summary>
            <param name="school">
            The school of damage.
            </param>
            <returns>
            An unique string identifier.
            </returns>
        </member>
        <member name="T:Zelda.Status.Damage.DamageTypeInfo">
            <summary>
            Encapsulates information that descripes the type of some damage.
            This class can't be inherited.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.DamageTypeInfo.School">
            <summary>
            The school of the damage.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.DamageTypeInfo.Source">
            <summary>
            The source of the damage.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.DamageTypeInfo.Element">
            <summary>
            The element of the damage;
            only applied with <see cref="F:Zelda.Status.Damage.DamageSchool.Magical"/>.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.DamageTypeInfo.SpecialType">
            <summary>
            The special type of the damage.
            </summary>
            <remarks>
            Might consist of multiple combined flags.
            </remarks>
        </member>
        <member name="M:Zelda.Status.Damage.DamageTypeInfo.#ctor(Zelda.Status.Damage.DamageSchool,Zelda.Status.Damage.DamageSource,Zelda.Status.ElementalSchool,Zelda.Status.Damage.SpecialDamageType)">
            <summary>
            Initializes a new instance of the DamageTypeInfo class.
            </summary>
            <param name="school">
            The school of the damage descriped by the new DamageTypeInfo.
            </param>
            <param name="source">
            The source of the damage descriped by the new DamageTypeInfo.
            </param>
            <param name="element">
            The element of the damage descriped by the new DamageTypeInfo.
            </param>
            <param name="specialType">
            The special type of the damage descriped by the new DamageTypeInfo.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.DamageTypeInfo.CreatePhysical(Zelda.Status.Damage.DamageSource)">
            <summary>
            Creates a new instance of the DamageTypeInfo class that
            represents damage of the <see cref="F:Zelda.Status.Damage.DamageSchool.Physical"/>. 
            </summary>
            <param name="source">
            The source of the physical damage.
            </param>
            <returns>
            A newly created DamageTypeInfo instance.
            </returns>
        </member>
        <member name="M:Zelda.Status.Damage.DamageTypeInfo.CreateMagical(Zelda.Status.Damage.DamageSource,Zelda.Status.ElementalSchool)">
            <summary>
            Creates a new instance of the DamageTypeInfo class that
            represents damage of the <see cref="F:Zelda.Status.Damage.DamageSchool.Magical"/>. 
            </summary>
            <param name="source">
            The source of the magical damage.
            </param>
            <param name="element">
            The element of the damage.
            </param>
            <returns>
            A newly created DamageTypeInfo instance.
            </returns>
        </member>
        <member name="M:Zelda.Status.Damage.DamageTypeInfo.Create(Zelda.Status.Damage.DamageSchool,Zelda.Status.Damage.DamageSource,Zelda.Status.ElementalSchool,Zelda.Status.Damage.SpecialDamageType)">
            <summary>
            Creates a new instance of the DamageTypeInfo class.
            </summary>
            <param name="school">
            The school of the damage.
            </param>
            <param name="source">
            The source of the magical damage.
            </param>
            <param name="element">
            The element of the damage.
            </param>
            <param name="specialType">
            The special type of the damage.
            </param>
            <returns>
            A newly created DamageTypeInfo instance.
            </returns>
        </member>
        <member name="M:Zelda.Status.Damage.DamageTypeInfo.WithElement(Zelda.Status.ElementalSchool)">
            <summary>
            Creates a new DamageTypeInfo instance based on this DamageTypeInfo instance; but with the given ElementalSchool.
            </summary>
            <param name="element">
            The element of the damage.
            </param>
            <returns>
            A newly created DamageTypeInfo instance.
            </returns>
        </member>
        <member name="F:Zelda.Status.Damage.DamageTypeInfo.PhysicalMelee">
            <summary>
            Stores type information about the damage inflicted by a physical melee attack.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.DamageTypeInfo.PhysicalRanged">
            <summary>
            Stores type information about the damage inflicted by a physical ranged attack.
            </summary>
        </member>
        <member name="T:Zelda.Status.Damage.DamageSchoolEffect">
            <summary>
            Represents a <see cref="T:Zelda.Status.StatusValueEffect"/> that manipulates a status related to <see cref="P:Zelda.Status.Damage.DamageSchoolEffect.DamageSchool"/>s.
            </summary>
        </member>
        <member name="P:Zelda.Status.Damage.DamageSchoolEffect.DamageSchool">
            <summary>
            Gets or sets the <see cref="P:Zelda.Status.Damage.DamageSchoolEffect.DamageSchool"/> this <see cref="T:Zelda.Status.Damage.DamageSchoolEffect"/> manipulates.
            </summary>
        </member>
        <member name="M:Zelda.Status.Damage.DamageSchoolEffect.GetLocalizedModifyingString">
            <summary>
            Gets a localized string for the <see cref="P:Zelda.Status.Damage.DamageSchoolEffect.DamageSchool"/> of this DamageTakenFromSchoolEffect.
            </summary>
            <returns>
            The localized DamageSchool string.
            </returns>
        </member>
        <member name="M:Zelda.Status.Damage.DamageSchoolEffect.#ctor">
            <summary>
            Initializes a new instance of the DamageSchoolEffect class.
            </summary>
        </member>
        <member name="M:Zelda.Status.Damage.DamageSchoolEffect.#ctor(System.Single,Zelda.Status.StatusManipType,Zelda.Status.Damage.DamageSchool)">
            <summary>
            Initializes a new instance of the DamageSchoolEffect class.
            </summary>
            <param name="value">
            The value of the new DamageSchoolEffect.
            </param>
            <param name="manipulationType">
            States how the <paramref name="value"/> of the new DamageSchoolEffect should be interpreted.
            </param>
            <param name="damageSchool">
            The DamageSchool that is manipulated by the new DamageSchoolEffect.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.DamageSchoolEffect.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.DamageSchoolEffect.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.DamageSchoolEffect.SetupClone(Zelda.Status.Damage.DamageSchoolEffect)">
            <summary>
            Setups the given DamageSchoolEffect to be a clone of this DamageSchoolEffect.
            </summary>
            <param name="clone">
            The DamageSchoolEffect to setup as a clone of this DamageSchoolEffect.
            </param>
        </member>
        <member name="T:Zelda.Status.Damage.DamageSourceEffect">
            <summary>
            Represents a <see cref="T:Zelda.Status.StatusValueEffect"/> that manipulates a status related to <see cref="P:Zelda.Status.Damage.DamageSourceEffect.DamageSource"/>s.
            </summary>
        </member>
        <member name="P:Zelda.Status.Damage.DamageSourceEffect.DamageSource">
            <summary>
            Gets or sets the <see cref="P:Zelda.Status.Damage.DamageSourceEffect.DamageSource"/> this <see cref="T:Zelda.Status.Damage.DamageSourceEffect"/> manipulates.
            </summary>
        </member>
        <member name="M:Zelda.Status.Damage.DamageSourceEffect.#ctor">
            <summary>
            Initializes a new instance of the DamageSourceEffect class.
            </summary>
        </member>
        <member name="M:Zelda.Status.Damage.DamageSourceEffect.#ctor(System.Single,Zelda.Status.StatusManipType,Zelda.Status.Damage.DamageSource)">
            <summary>
            Initializes a new instance of the DamageSourceEffect class.
            </summary>
            <param name="value">
            The value of the new DamageSourceEffect.
            </param>
            <param name="manipulationType">
            The manipulation type.
            </param>
            <param name="damageSource">
            The property that is manipulated.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.DamageSourceEffect.GetLocalizedDamageSourceString">
            <summary>
            Gets a localized string for the <see cref="P:Zelda.Status.Damage.DamageSourceEffect.DamageSource"/> of this DamageSourceEffect.
            </summary>
            <returns>
            A localized string.
            </returns>
        </member>
        <member name="M:Zelda.Status.Damage.DamageSourceEffect.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.DamageSourceEffect.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.DamageSourceEffect.SetupClone(Zelda.Status.Damage.DamageSourceEffect)">
            <summary>
            Setups the given DamageSourceEffect to be a clone of this DamageSourceEffect.
            </summary>
            <param name="clone">
            The DamageSourceEffect to setup as a clone of this DamageSourceEffect.
            </param>
        </member>
        <member name="T:Zelda.Status.Damage.CriticalDamageBonusEffect">
            <summary>
            Defines a <see cref="T:Zelda.Status.StatusValueEffect"/> that manipulates how much damage
            the <see cref="T:Zelda.Status.Statable"/> ZeldaEntity does with a specific type of attack.
            This class can't be inherited.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.CriticalDamageBonusEffect.IdentifierMelee">
            <summary>
            Identifies the unique manipulation identifiers of the CriticalDamageBonusEffect.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.CriticalDamageBonusEffect.IdentifierRanged">
            <summary>
            Identifies the unique manipulation identifiers of the CriticalDamageBonusEffect.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.CriticalDamageBonusEffect.IdentifierSpell">
            <summary>
            Identifies the unique manipulation identifiers of the CriticalDamageBonusEffect.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.CriticalDamageBonusEffect.IdentifierAll">
            <summary>
            Identifies the unique manipulation identifiers of the CriticalDamageBonusEffect.
            </summary>
        </member>
        <member name="M:Zelda.Status.Damage.CriticalDamageBonusEffect.GetIdentifier(Zelda.Status.Damage.DamageSource)">
            <summary>
            Gets the (unique) identifier string that is associated with
            the CriticalDamageBonusEffect of the specified <see cref="P:Zelda.Status.Damage.CriticalDamageBonusEffect.DamageSource"/>.
            </summary>
            <param name="source">
            The DamageSource whose effect identifier should be returned.
            </param>
            <returns>
            An (unique) identifier string.
            </returns>
        </member>
        <member name="P:Zelda.Status.Damage.CriticalDamageBonusEffect.Identifier">
            <summary> 
            Gets a string that uniquely identifies this <see cref="T:Zelda.Status.Damage.DamageDoneAgainstRaceEffect"/>.
            </summary>
        </member>
        <member name="P:Zelda.Status.Damage.CriticalDamageBonusEffect.DamageSource">
            <summary>
            Gets or sets what kind of Critical Damage Bonus this <see cref="T:Zelda.Status.Damage.CriticalDamageBonusEffect"/> modifies.
            </summary>
        </member>
        <member name="M:Zelda.Status.Damage.CriticalDamageBonusEffect.GetDescription(Zelda.Status.Statable)">
            <summary>
            Gets a short localised description of this <see cref="T:Zelda.Status.StatusEffect"/>.
            </summary>
            <param name="statable">
            The statable component of the entity that wants to receive the description about this StatusEffect.
            </param>
            <returns>
            The localized description string.
            </returns>
        </member>
        <member name="M:Zelda.Status.Damage.CriticalDamageBonusEffect.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Status.Damage.CriticalDamageBonusEffect"/> class.
            </summary>
        </member>
        <member name="M:Zelda.Status.Damage.CriticalDamageBonusEffect.#ctor(System.Single,Zelda.Status.StatusManipType,Zelda.Status.Damage.DamageSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Status.Damage.CriticalDamageBonusEffect"/> class.
            </summary>
            <param name="value">
            The value of the new CriticalDamageBonusEffect.
            </param>
            <param name="manipulationType">
            States how the <paramref name="value"/> of the new CriticalDamageBonusEffect should be interpreted.
            </param>
            <param name="source">
            States what kind of Critical Damage Bonus Modifier(s) the new CriticalDamageBonusEffect affects.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.CriticalDamageBonusEffect.OnEnable(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.Damage.CriticalDamageBonusEffect"/> gets enabled for the given statable Entity.
            </summary>
            <param name="user">
            The statable that enabled this <see cref="T:Zelda.Status.Damage.CriticalDamageBonusEffect"/>.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.CriticalDamageBonusEffect.OnDisable(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.Damage.CriticalDamageBonusEffect"/> gets disabled for the given statable Entity.
            </summary>
            <param name="user">
            The statable that disabled this <see cref="T:Zelda.Status.StatusEffect"/>.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.CriticalDamageBonusEffect.OnChanged(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.Damage.CriticalDamageBonusEffect"/> gets enabled or disabled for the given Statable Entity.
            </summary>
            <param name="user">
            The related statable.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.CriticalDamageBonusEffect.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.CriticalDamageBonusEffect.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.CriticalDamageBonusEffect.Clone">
            <summary>
            Returns a clone of this CriticalDamageBonusEffect.
            </summary>
            <returns>
            The cloned StatusEffect.
            </returns>
        </member>
        <member name="T:Zelda.Status.Damage.DamageDoneAgainstRaceEffect">
            <summary>
            Defines a StatusEffect that manipulates the damage done against a specified Race.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.DamageDoneAgainstRaceEffect.IdentifierUndead">
            <summary>
            Identifies the unique manipulation identifiers of the DamageDoneAgainstRaceEffect.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.DamageDoneAgainstRaceEffect.IdentifierSlime">
            <summary>
            Identifies the unique manipulation identifiers of the DamageDoneAgainstRaceEffect.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.DamageDoneAgainstRaceEffect.IdentifierPlant">
            <summary>
            Identifies the unique manipulation identifiers of the DamageDoneAgainstRaceEffect.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.DamageDoneAgainstRaceEffect.IdentifierMachine">
            <summary>
            Identifies the unique manipulation identifiers of the DamageDoneAgainstRaceEffect.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.DamageDoneAgainstRaceEffect.IdentifierHuman">
            <summary>
            Identifies the unique manipulation identifiers of the DamageDoneAgainstRaceEffect.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.DamageDoneAgainstRaceEffect.IdentifierFairy">
            <summary>
            Identifies the unique manipulation identifiers of the DamageDoneAgainstRaceEffect.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.DamageDoneAgainstRaceEffect.IdentifierDemiHuman">
            <summary>
            Identifies the unique manipulation identifiers of the DamageDoneAgainstRaceEffect.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.DamageDoneAgainstRaceEffect.IdentifierDemiBeast">
            <summary>
            Identifies the unique manipulation identifiers of the DamageDoneAgainstRaceEffect.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.DamageDoneAgainstRaceEffect.IdentifierBeast">
            <summary>
            Identifies the unique manipulation identifiers of the DamageDoneAgainstRaceEffect.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.DamageDoneAgainstRaceEffect.IdentifierDemon">
            <summary>
            Identifies the unique manipulation identifiers of the DamageDoneAgainstRaceEffect.
            </summary>
        </member>
        <member name="M:Zelda.Status.Damage.DamageDoneAgainstRaceEffect.GetIdentifier(Zelda.Status.RaceType)">
            <summary>
            Gets the (unique) identifier string that is associated with
            the DamageDoneAgainstRaceEffect of the specified <see cref="T:Zelda.Status.RaceType"/>.
            </summary>
            <param name="race">
            The race whose effect identifier should be returned.
            </param>
            <returns>
            An (unique) identifier string.
            </returns>
        </member>
        <member name="P:Zelda.Status.Damage.DamageDoneAgainstRaceEffect.Identifier">
            <summary> 
            Gets a string that uniquely identifies this <see cref="T:Zelda.Status.Damage.DamageDoneAgainstRaceEffect"/>.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.DamageDoneAgainstRaceEffect.DescStringPositive">
            <summary>
            Cached description strings.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.DamageDoneAgainstRaceEffect.DescStringNegative">
            <summary>
            Cached description strings.
            </summary>
        </member>
        <member name="P:Zelda.Status.Damage.DamageDoneAgainstRaceEffect.Race">
            <summary>
            Gets or sets a value that indicates what kind of race this <see cref="T:Zelda.Status.Damage.DamageDoneAgainstRaceEffect"/>
            modifies the damage done for.
            </summary>
        </member>
        <member name="M:Zelda.Status.Damage.DamageDoneAgainstRaceEffect.GetDescription(Zelda.Status.Statable)">
            <summary>
            Gets a short localised description of this <see cref="T:Zelda.Status.StatusEffect"/>.
            </summary>
            <param name="statable">
            The statable component of the entity that wants to receive the description about this StatusEffect.
            </param>
            <returns>
            The localized description string.
            </returns>
        </member>
        <member name="M:Zelda.Status.Damage.DamageDoneAgainstRaceEffect.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Status.Damage.DamageDoneAgainstRaceEffect"/> class.
            </summary>
        </member>
        <member name="M:Zelda.Status.Damage.DamageDoneAgainstRaceEffect.#ctor(Zelda.Status.RaceType,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Status.Damage.DamageDoneAgainstRaceEffect"/> class.
            </summary>
            <param name="race">
            States what kind of race the new DamageDoneRaceModEffect modifies damage done for.
            </param>
            <param name="value">
            The manipulation value of the new DamageDoneRaceModEffect.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.DamageDoneAgainstRaceEffect.OnEnable(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.Damage.DamageDoneAgainstRaceEffect"/> gets enabled for the given statable Entity.
            </summary>
            <param name="user">
            The statable that enabled this <see cref="T:Zelda.Status.Damage.DamageDoneAgainstRaceEffect"/>.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.DamageDoneAgainstRaceEffect.OnDisable(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.Damage.DamageDoneAgainstRaceEffect"/> gets disabled for the given statable Entity.
            </summary>
            <param name="user">
            The statable that disabled this <see cref="T:Zelda.Status.Damage.DamageDoneAgainstRaceEffect"/>.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.DamageDoneAgainstRaceEffect.OnChanged(Zelda.Status.ExtendedStatable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.Damage.DamageDoneAgainstRaceEffect"/> gets enabled or disabled for the given extended-statable Entity.
            </summary>
            <param name="user">
            The related statable.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.DamageDoneAgainstRaceEffect.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.DamageDoneAgainstRaceEffect.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.DamageDoneAgainstRaceEffect.Clone">
            <summary>
            Returns a clone of this DamageDoneAgainstRaceEffect.
            </summary>
            <returns>
            The cloned StatusEffect.
            </returns>
        </member>
        <member name="T:Zelda.Status.Damage.DamageDoneWithSchoolEffect">
            <summary>
            Defines a StatusEffect that manipulates the damage taken from a specific <see cref="T:Zelda.Status.Damage.DamageSchool"/>.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.DamageDoneWithSchoolEffect.IdentifierPhysical">
            <summary>
            The (unique) identifier string associated with the DamageDoneWithSchoolEffect for DamageSchool.Physical.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.DamageDoneWithSchoolEffect.IdentifierMagical">
            <summary>
            The (unique) identifier string associated with the DamageDoneWithSchoolEffect for DamageSchool.Magical.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.DamageDoneWithSchoolEffect.IdentifierAll">
            <summary>
            The (unique) identifier string associated with the DamageDoneWithSchoolEffect for DamageSchool.All.
            </summary>
        </member>
        <member name="M:Zelda.Status.Damage.DamageDoneWithSchoolEffect.GetIdentifier(Zelda.Status.Damage.DamageSchool)">
            <summary>
            Gets the (unique) identifier string that is associated with the specified <see cref="T:Zelda.Status.Damage.DamageSchool"/>.
            </summary>
            <param name="source">
            The source of damage.
            </param>
            <returns>
            An (unique) identifier string.
            </returns>
        </member>
        <member name="P:Zelda.Status.Damage.DamageDoneWithSchoolEffect.Identifier">
            <summary>
            Get the (unique) identifier string this DamageDoneWithSchoolEffect is associated with.
            </summary>
        </member>
        <member name="M:Zelda.Status.Damage.DamageDoneWithSchoolEffect.GetDescription(Zelda.Status.Statable)">
            <summary>
            Gets a short localised description of this <see cref="T:Zelda.Status.Damage.DamageDoneWithSchoolEffect"/>.
            </summary>
            <param name="statable">
            The statable component of the entity that wants to receive the description about this StatusEffect.
            </param>
            <returns>
            The localized description string.
            </returns>
        </member>
        <member name="M:Zelda.Status.Damage.DamageDoneWithSchoolEffect.OnEnable(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.Damage.DamageDoneWithSchoolEffect"/> gets enabled for the given statable Entity.
            </summary>
            <param name="user">
            The statable that enabled this <see cref="T:Zelda.Status.StatusEffect"/>.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.DamageDoneWithSchoolEffect.OnDisable(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.Damage.DamageDoneWithSchoolEffect"/> gets disabled for the given statable Entity.
            </summary>
            <param name="user">
            The statable that disabled this <see cref="T:Zelda.Status.StatusEffect"/>.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.DamageDoneWithSchoolEffect.OnChanged(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.Damage.DamageDoneWithSchoolEffect"/> gets enabled or disabled
            for the given statable Entity.
            </summary>
            <param name="user">
            The statable that enabled or disabled this <see cref="T:Zelda.Status.StatusEffect"/>.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.DamageDoneWithSchoolEffect.Clone">
            <summary>
            Returns a clone of this DamageDoneWithSchoolEffect.
            </summary>
            <returns>
            The cloned StatusEffect.
            </returns>
        </member>
        <member name="T:Zelda.Status.Damage.DamageDoneWithSourceEffect">
            <summary>
            Defines a StatusEffect that manipulates the damage taken from a specific <see cref="T:Zelda.Status.Damage.DamageSource"/>.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.DamageDoneWithSourceEffect.IdentifierMelee">
            <summary>
            The (unique) identifier string associated with the DamageDoneWithSourceEffect for DamageSchool.Physical.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.DamageDoneWithSourceEffect.IdentifierRanged">
            <summary>
            The (unique) identifier string associated with the DamageDoneWithSourceEffect for DamageSchool.Magical.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.DamageDoneWithSourceEffect.IdentifierSpell">
            <summary>
            The (unique) identifier string associated with the DamageDoneWithSourceEffect for DamageSchool.Magical.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.DamageDoneWithSourceEffect.IdentifierAll">
            <summary>
            The (unique) identifier string associated with the DamageDoneWithSourceEffect for DamageSchool.All.
            </summary>
        </member>
        <member name="M:Zelda.Status.Damage.DamageDoneWithSourceEffect.GetIdentifier(Zelda.Status.Damage.DamageSource)">
            <summary>
            Gets the (unique) identifier string that is associated with the specified <see cref="T:Zelda.Status.Damage.DamageSchool"/>.
            </summary>
            <param name="source">
            The source of damage.
            </param>
            <returns>
            An (unique) identifier string.
            </returns>
        </member>
        <member name="P:Zelda.Status.Damage.DamageDoneWithSourceEffect.Identifier">
            <summary>
            Get the (unique) identifier string this DamageDoneWithSourceEffect is associated with.
            </summary>
        </member>
        <member name="M:Zelda.Status.Damage.DamageDoneWithSourceEffect.#ctor">
            <summary>
            Initializes a new instance of the DamageDoneWithSourceEffect class.
            </summary>
        </member>
        <member name="M:Zelda.Status.Damage.DamageDoneWithSourceEffect.#ctor(System.Single,Zelda.Status.StatusManipType,Zelda.Status.Damage.DamageSource)">
            <summary>
            Initializes a new instance of the DamageDoneWithSourceEffect class.
            </summary>
            <param name="value">
            The value of the new DamageDoneWithSourceEffect.
            </param>
            <param name="manipulationType">
            The manipulation type.
            </param>
            <param name="damageSource">
            The property that is manipulated.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.DamageDoneWithSourceEffect.GetDescription(Zelda.Status.Statable)">
            <summary>
            Gets a short localised description of this <see cref="T:Zelda.Status.Damage.DamageDoneWithSourceEffect"/>.
            </summary>
            <param name="statable">
            The statable component of the entity that wants to receive the description about this StatusEffect.
            </param>
            <returns>
            The localized description string.
            </returns>
        </member>
        <member name="M:Zelda.Status.Damage.DamageDoneWithSourceEffect.GetDescriptionFormatString">
            <summary>
            Gets the format string that is used to create the description.
            </summary>
            <returns>
            A localized string.
            </returns>
        </member>
        <member name="M:Zelda.Status.Damage.DamageDoneWithSourceEffect.OnEnable(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.Damage.DamageDoneWithSourceEffect"/> gets enabled for the given statable Entity.
            </summary>
            <param name="user">
            The statable that enabled this <see cref="T:Zelda.Status.StatusEffect"/>.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.DamageDoneWithSourceEffect.OnDisable(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.Damage.DamageDoneWithSourceEffect"/> gets disabled for the given statable Entity.
            </summary>
            <param name="user">
            The statable that disabled this <see cref="T:Zelda.Status.StatusEffect"/>.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.DamageDoneWithSourceEffect.OnChanged(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.Damage.DamageDoneWithSourceEffect"/> gets enabled or disabled
            for the given statable Entity.
            </summary>
            <param name="user">
            The statable that enabled or disabled this <see cref="T:Zelda.Status.StatusEffect"/>.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.DamageDoneWithSourceEffect.Clone">
            <summary>
            Returns a clone of this DamageDoneWithSourceEffect.
            </summary>
            <returns>
            The cloned StatusEffect.
            </returns>
        </member>
        <member name="T:Zelda.Status.Damage.ElementalDamageDoneEffect">
            <summary>
            Defines a StatusEffect that manipulates the damage done with a specific <see cref="T:Zelda.Status.Damage.DamageSchool"/>.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.ElementalDamageDoneEffect.IdentifierFire">
            <summary>
            The (unique) identifier string associated with the ElementalDamageEffect for ElementalSchool.Fire.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.ElementalDamageDoneEffect.IdentifierWater">
            <summary>
            The (unique) identifier string associated with the ElementalDamageEffect for ElementalSchool.Water.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.ElementalDamageDoneEffect.IdentifierLight">
            <summary>
            The (unique) identifier string associated with the ElementalDamageEffect for ElementalSchool.Light.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.ElementalDamageDoneEffect.IdentifierShadow">
            <summary>
            The (unique) identifier string associated with the ElementalDamageEffect for ElementalSchool.Shadow.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.ElementalDamageDoneEffect.IdentifierNature">
            <summary>
            The (unique) identifier string associated with the ElementalDamageEffect for ElementalSchool.Nature.
            </summary>
        </member>
        <member name="M:Zelda.Status.Damage.ElementalDamageDoneEffect.GetIdentifier(Zelda.Status.ElementalSchool)">
            <summary>
            Gets the (unique) identifier string that is associated with the specified <see cref="T:Zelda.Status.Damage.DamageSchool"/>.
            </summary>
            <param name="school">
            The school of damage.
            </param>
            <returns>
            An (unique) identifier string.
            </returns>
        </member>
        <member name="P:Zelda.Status.Damage.ElementalDamageDoneEffect.Identifier">
            <summary>
            Get the (unique) identifier string this ElementalDamageDoneEffect is associated with.
            </summary>
        </member>
        <member name="M:Zelda.Status.Damage.ElementalDamageDoneEffect.#ctor">
            <summary>
            Initializes a new instance of the ElementalDamageDoneEffect class.
            </summary>
        </member>
        <member name="M:Zelda.Status.Damage.ElementalDamageDoneEffect.#ctor(System.Single,Zelda.Status.StatusManipType,Zelda.Status.ElementalSchool)">
            <summary>
            Initializes a new instance of the ElementalDamageDoneEffect class.
            </summary>
            <param name="value">
            The value of the new ElementalDamageDoneEffect.
            </param>
            <param name="manipulationType">
            States how the <paramref name="value"/> should be interpreted.
            </param>
            <param name="elementalSchool">
            The ElementalSchool that is manipulated by the new ElementalDamageDoneEffect.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.ElementalDamageDoneEffect.GetDescription(Zelda.Status.Statable)">
            <summary>
            Gets a short localised description of this <see cref="T:Zelda.Status.Damage.ElementalDamageDoneEffect"/>.
            </summary>
            <param name="statable">
            The statable component of the entity that wants to receive the description about this StatusEffect.
            </param>
            <returns>
            The localized description string.
            </returns>
        </member>
        <member name="M:Zelda.Status.Damage.ElementalDamageDoneEffect.OnEnable(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.Damage.ElementalDamageDoneEffect"/> gets enabled for the given statable Entity.
            </summary>
            <param name="user">
            The statable that enabled this <see cref="T:Zelda.Status.StatusEffect"/>.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.ElementalDamageDoneEffect.OnDisable(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.Damage.ElementalDamageDoneEffect"/> gets disabled for the given statable Entity.
            </summary>
            <param name="user">
            The statable that disabled this <see cref="T:Zelda.Status.StatusEffect"/>.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.ElementalDamageDoneEffect.OnChanged(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.Damage.ElementalDamageDoneEffect"/> gets enabled or disabled
            for the given statable Entity.
            </summary>
            <param name="user">
            The statable that enabled or disabled this <see cref="T:Zelda.Status.StatusEffect"/>.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.ElementalDamageDoneEffect.Clone">
            <summary>
            Returns a clone of this ElementalDamageDoneEffect.
            </summary>
            <returns>
            The cloned StatusEffect.
            </returns>
        </member>
        <member name="T:Zelda.Status.Damage.SpecialDamageDoneEffect">
            <summary>
            Defines a StatusEffect that manipulates the damage done against a specified Race.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.SpecialDamageDoneEffect.IdentifierDamagerOverTime">
            <summary>
            Identifies the unique manipulation name(s) of the SpecialDamageDoneEffect.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.SpecialDamageDoneEffect.IdentifierBleed">
            <summary>
            Identifies the unique manipulation name(s) of the SpecialDamageDoneEffect.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.SpecialDamageDoneEffect.IdentifierPoison">
            <summary>
            Identifies the unique manipulation name(s) of the SpecialDamageDoneEffect.
            </summary>
        </member>
        <member name="M:Zelda.Status.Damage.SpecialDamageDoneEffect.GetIdentifier(Zelda.Status.Damage.SpecialDamageType)">
            <summary>
            Gets the (unique) identifier string that is associated with
            the SpecialDamageDoneEffect of the specified <see cref="T:Zelda.Status.Damage.SpecialDamageType"/>.
            </summary>
            <param name="damageType">
            The damageType whose effect identifier should be returned.
            </param>
            <returns>
            An (unique) identifier string.
            </returns>
        </member>
        <member name="P:Zelda.Status.Damage.SpecialDamageDoneEffect.DamageType">
            <summary>
            Gets or sets the <see cref="T:Zelda.Status.Damage.SpecialDamageType"/> this SpecialDamageDoneEffect
            modifies the damage done for.
            </summary>
        </member>
        <member name="P:Zelda.Status.Damage.SpecialDamageDoneEffect.Identifier">
            <summary> 
            Gets an unique string that represents what this <see cref="T:Zelda.Status.Damage.SpecialDamageDoneEffect"/> manipulates.
            </summary>
        </member>
        <member name="M:Zelda.Status.Damage.SpecialDamageDoneEffect.GetDescription(Zelda.Status.Statable)">
            <summary>
            Gets a short localised description of this <see cref="T:Zelda.Status.Damage.DamageDoneWithSourceEffect"/>.
            </summary>
            <param name="statable">
            The statable component of the entity that wants to receive the description about this StatusEffect.
            </param>
            <returns>
            The localized description string.
            </returns>
        </member>
        <member name="M:Zelda.Status.Damage.SpecialDamageDoneEffect.GetDescriptionFormatString">
            <summary>
            Gets the format string that is used to create the description.
            </summary>
            <returns>
            A localized string.
            </returns>
        </member>
        <member name="M:Zelda.Status.Damage.SpecialDamageDoneEffect.GetModifiyingString">
            <summary>
            Gets the localiized string that is associated with the current
            <see cref="P:Zelda.Status.Damage.SpecialDamageDoneEffect.DamageType"/>.
            </summary>
            <returns>
            A localized string.
            </returns>
        </member>
        <member name="M:Zelda.Status.Damage.SpecialDamageDoneEffect.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Status.Damage.SpecialDamageDoneEffect"/> class.
            </summary>
        </member>
        <member name="M:Zelda.Status.Damage.SpecialDamageDoneEffect.#ctor(System.Single,Zelda.Status.StatusManipType,Zelda.Status.Damage.SpecialDamageType)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Status.Damage.SpecialDamageDoneEffect"/> class.
            </summary>
            <param name="value">
            The manipulation value of the new DamageDoneRaceModEffect.
            </param>
            <param name="manipulationType">
            States how the <paramref name="value"/> should be interpreted.
            </param>
            <param name="damageType">
            States what kind of SpecialDamageType the new DamageDoneRaceModEffect modifies.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.SpecialDamageDoneEffect.OnEnable(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.Damage.SpecialDamageDoneEffect"/> gets enabled for the given statable Entity.
            </summary>
            <param name="user">
            The statable that enabled this <see cref="T:Zelda.Status.Damage.SpecialDamageDoneEffect"/>.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.SpecialDamageDoneEffect.OnDisable(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.Damage.SpecialDamageDoneEffect"/> gets disabled for the given statable Entity.
            </summary>
            <param name="user">
            The statable that disabled this <see cref="T:Zelda.Status.Damage.SpecialDamageDoneEffect"/>.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.SpecialDamageDoneEffect.OnChanged(Zelda.Status.ExtendedStatable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.Damage.SpecialDamageDoneEffect"/> gets enabled or disabled for the given extended-statable Entity.
            </summary>
            <param name="user">
            The related statable.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.SpecialDamageDoneEffect.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.SpecialDamageDoneEffect.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.SpecialDamageDoneEffect.Clone">
            <summary>
            Returns a clone of this SpecialDamageDoneEffect.
            </summary>
            <returns>
            The cloned StatusEffect.
            </returns>
        </member>
        <member name="T:Zelda.Status.Damage.ElementalSchoolEffect">
            <summary>
            Represents a <see cref="T:Zelda.Status.StatusValueEffect"/> that manipulates a status related to the <see cref="P:Zelda.Status.Damage.ElementalSchoolEffect.ElementalSchool"/>s.
            </summary>
        </member>
        <member name="P:Zelda.Status.Damage.ElementalSchoolEffect.ElementalSchool">
            <summary>
            Gets or sets the <see cref="P:Zelda.Status.Damage.ElementalSchoolEffect.ElementalSchool"/> this <see cref="T:Zelda.Status.Damage.ElementalSchoolEffect"/> manipulates.
            </summary>
        </member>
        <member name="M:Zelda.Status.Damage.ElementalSchoolEffect.GetLocalizedModifyingString">
            <summary>
            Gets a localized string for the <see cref="P:Zelda.Status.Damage.ElementalSchoolEffect.ElementalSchool"/> of this ElementalDamageDoneEffect.
            </summary>
            <returns>
            A localized string that is displayed to the player.
            </returns>
        </member>
        <member name="M:Zelda.Status.Damage.ElementalSchoolEffect.#ctor">
            <summary>
            Initializes a new instance of the ElementalSchoolEffect class.
            </summary>
        </member>
        <member name="M:Zelda.Status.Damage.ElementalSchoolEffect.#ctor(System.Single,Zelda.Status.StatusManipType,Zelda.Status.ElementalSchool)">
            <summary>
            Initializes a new instance of the ElementalSchoolEffect class.
            </summary>
            <param name="value">
            The value of the new ElementalSchoolEffect.
            </param>
            <param name="manipulationType">
            States how the <paramref name="value"/> of the new ElementalSchoolEffect should be interpreted.
            </param>
            <param name="elementalSchool">
            The ElementalSchool that is manipulated by the new ElementalSchoolEffect.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.ElementalSchoolEffect.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.ElementalSchoolEffect.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.ElementalSchoolEffect.SetupClone(Zelda.Status.Damage.ElementalSchoolEffect)">
            <summary>
            Setups the given ElementalSchoolEffect to be a clone of this ElementalSchoolEffect.
            </summary>
            <param name="clone">
            The ElementalSchoolEffect to setup as a clone of this ElementalSchoolEffect.
            </param>
        </member>
        <member name="T:Zelda.Status.Damage.DamageTakenFromSchoolEffect">
            <summary>
            Defines a StatusEffect that manipulates the damage taken from a specific <see cref="T:Zelda.Status.Damage.DamageSchool"/>.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.DamageTakenFromSchoolEffect.IdentifierPhysical">
            <summary>
            The (unique) identifier string associated with the DamageTakenFromSchoolEffect for DamageSchool.Physical.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.DamageTakenFromSchoolEffect.IdentifierMagical">
            <summary>
            The (unique) identifier string associated with the DamageTakenFromSchoolEffect for DamageSchool.Magical.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.DamageTakenFromSchoolEffect.IdentifierAll">
            <summary>
            The (unique) identifier string associated with the DamageTakenFromSchoolEffect for DamageSchool.All.
            </summary>
        </member>
        <member name="M:Zelda.Status.Damage.DamageTakenFromSchoolEffect.GetIdentifier(Zelda.Status.Damage.DamageSchool)">
            <summary>
            Gets the (unique) identifier string that is associated with the specified <see cref="T:Zelda.Status.Damage.DamageSchool"/>.
            </summary>
            <param name="school">
            The school of damage.
            </param>
            <returns>
            An (unique) identifier string.
            </returns>
        </member>
        <member name="P:Zelda.Status.Damage.DamageTakenFromSchoolEffect.Identifier">
            <summary>
            Get the (unique) identifier string this DamageTakenFromSchoolEffect is associated with.
            </summary>
        </member>
        <member name="M:Zelda.Status.Damage.DamageTakenFromSchoolEffect.#ctor">
            <summary>
            Initializes a new instance of the DamageTakenFromSchoolEffect class.
            </summary>
        </member>
        <member name="M:Zelda.Status.Damage.DamageTakenFromSchoolEffect.#ctor(System.Single,Zelda.Status.StatusManipType,Zelda.Status.Damage.DamageSchool)">
            <summary>
            Initializes a new instance of the DamageTakenFromSchoolEffect class.
            </summary>
            <param name="value">
            The value of the new DamageTakenFromSchoolEffect.
            </param>
            <param name="manipulationType">
            States how the <paramref name="value"/> of the new DamageTakenFromSchoolEffect should be interpreted.
            </param>
            <param name="damageSchool">
            The DamageSchool that is manipulated by the new DamageTakenFromSchoolEffect.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.DamageTakenFromSchoolEffect.GetDescription(Zelda.Status.Statable)">
            <summary>
            Gets a short localised description of this <see cref="T:Zelda.Status.Damage.DamageTakenFromSchoolEffect"/>.
            </summary>
            <param name="statable">
            The statable component of the entity that wants to receive the description about this StatusEffect.
            </param>
            <returns>
            The localized description string.
            </returns>
        </member>
        <member name="P:Zelda.Status.Damage.DamageTakenFromSchoolEffect.IsBad">
            <summary>
            Gets a value indicating whether this StatusEffect is 'bad' for the statable ZeldaEntity.
            </summary>
        </member>
        <member name="M:Zelda.Status.Damage.DamageTakenFromSchoolEffect.OnEnable(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.Damage.DamageTakenFromSchoolEffect"/> gets enabled for the given statable Entity.
            </summary>
            <param name="user">
            The statable that enabled this <see cref="T:Zelda.Status.StatusEffect"/>.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.DamageTakenFromSchoolEffect.OnDisable(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.Damage.DamageTakenFromSchoolEffect"/> gets disabled for the given statable Entity.
            </summary>
            <param name="user">
            The statable that disabled this <see cref="T:Zelda.Status.StatusEffect"/>.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.DamageTakenFromSchoolEffect.OnChanged(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.Damage.DamageTakenFromSchoolEffect"/> gets enabled or disabled
            for the given statable Entity.
            </summary>
            <param name="user">
            The statable that enabled or disabled this <see cref="T:Zelda.Status.StatusEffect"/>.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.DamageTakenFromSchoolEffect.Clone">
            <summary>
            Returns a clone of this DamageTakenFromSchoolEffect.
            </summary>
            <returns>
            The cloned StatusEffect.
            </returns>
        </member>
        <member name="T:Zelda.Status.Damage.DamageTakenFromSourceEffect">
            <summary>
            Defines a StatusEffect that manipulates the damage taken from a specific <see cref="T:Zelda.Status.Damage.DamageSource"/>.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.DamageTakenFromSourceEffect.IdentifierMelee">
            <summary>
            The (unique) identifier string associated with the DamageTakenFromSourceEffect for DamageSchool.Physical.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.DamageTakenFromSourceEffect.IdentifierRanged">
            <summary>
            The (unique) identifier string associated with the DamageTakenFromSourceEffect for DamageSchool.Magical.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.DamageTakenFromSourceEffect.IdentifierSpell">
            <summary>
            The (unique) identifier string associated with the DamageTakenFromSourceEffect for DamageSchool.Magical.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.DamageTakenFromSourceEffect.IdentifierAll">
            <summary>
            The (unique) identifier string associated with the DamageTakenFromSourceEffect for DamageSchool.All.
            </summary>
        </member>
        <member name="M:Zelda.Status.Damage.DamageTakenFromSourceEffect.GetIdentifier(Zelda.Status.Damage.DamageSource)">
            <summary>
            Gets the (unique) identifier string that is associated with the specified <see cref="T:Zelda.Status.Damage.DamageSchool"/>.
            </summary>
            <param name="source">
            The source of damage.
            </param>
            <returns>
            An (unique) identifier string.
            </returns>
        </member>
        <member name="P:Zelda.Status.Damage.DamageTakenFromSourceEffect.Identifier">
            <summary>
            Get the (unique) identifier string this DamageTakenFromSourceEffect is associated with.
            </summary>
        </member>
        <member name="M:Zelda.Status.Damage.DamageTakenFromSourceEffect.GetDescription(Zelda.Status.Statable)">
            <summary>
            Gets a short localised description of this <see cref="T:Zelda.Status.Damage.DamageDoneWithSourceEffect"/>.
            </summary>
            <param name="statable">
            The statable component of the entity that wants to receive the description about this StatusEffect.
            </param>
            <returns>
            The localized description string.
            </returns>
        </member>
        <member name="M:Zelda.Status.Damage.DamageTakenFromSourceEffect.GetDescriptionFormatString">
            <summary>
            Gets the format string that is used to create the
            descrooption of this DamageTakenFromSourceEffect.
            </summary>
            <returns>
            A localized string that is displayed to the player.
            </returns>
        </member>
        <member name="P:Zelda.Status.Damage.DamageTakenFromSourceEffect.IsBad">
            <summary>
            Gets a value indicating whether this StatusEffect is 'bad' for the statable ZeldaEntity.
            </summary>
        </member>
        <member name="M:Zelda.Status.Damage.DamageTakenFromSourceEffect.OnEnable(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.Damage.DamageTakenFromSourceEffect"/> gets enabled for the given statable Entity.
            </summary>
            <param name="user">
            The statable that enabled this <see cref="T:Zelda.Status.StatusEffect"/>.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.DamageTakenFromSourceEffect.OnDisable(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.Damage.DamageTakenFromSourceEffect"/> gets disabled for the given statable Entity.
            </summary>
            <param name="user">
            The statable that disabled this <see cref="T:Zelda.Status.StatusEffect"/>.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.DamageTakenFromSourceEffect.OnChanged(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.Damage.DamageTakenFromSourceEffect"/> gets enabled or disabled
            for the given statable Entity.
            </summary>
            <param name="user">
            The statable that enabled or disabled this <see cref="T:Zelda.Status.StatusEffect"/>.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.DamageTakenFromSourceEffect.Clone">
            <summary>
            Returns a clone of this DamageTakenFromSourceEffect.
            </summary>
            <returns>
            The cloned StatusEffect.
            </returns>
        </member>
        <member name="T:Zelda.Status.Damage.ElementalDamageTakenEffect">
            <summary>
            Defines a StatusEffect that manipulates the damage taken from a specific <see cref="T:Zelda.Status.Damage.DamageSchool"/>.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.ElementalDamageTakenEffect.IdentifierFire">
            <summary>
            The (unique) identifier string associated with the ElementalDamageTakenEffect for ElementalSchool.Fire.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.ElementalDamageTakenEffect.IdentifierWater">
            <summary>
            The (unique) identifier string associated with the ElementalDamageTakenEffect for ElementalSchool.Water.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.ElementalDamageTakenEffect.IdentifierLight">
            <summary>
            The (unique) identifier string associated with the ElementalDamageTakenEffect for ElementalSchool.Light.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.ElementalDamageTakenEffect.IdentifierShadow">
            <summary>
            The (unique) identifier string associated with the ElementalDamageTakenEffect for ElementalSchool.Shadow.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.ElementalDamageTakenEffect.IdentifierNature">
            <summary>
            The (unique) identifier string associated with the ElementalDamageTakenEffect for ElementalSchool.Nature.
            </summary>
        </member>
        <member name="M:Zelda.Status.Damage.ElementalDamageTakenEffect.GetIdentifier(Zelda.Status.ElementalSchool)">
            <summary>
            Gets the (unique) identifier string that is associated with the specified <see cref="T:Zelda.Status.Damage.DamageSchool"/>.
            </summary>
            <param name="school">
            The school of damage.
            </param>
            <returns>
            An (unique) identifier string.
            </returns>
        </member>
        <member name="P:Zelda.Status.Damage.ElementalDamageTakenEffect.Identifier">
            <summary>
            Get the (unique) identifier string this ElementalDamageTakenEffect is associated with.
            </summary>
        </member>
        <member name="M:Zelda.Status.Damage.ElementalDamageTakenEffect.GetDescription(Zelda.Status.Statable)">
            <summary>
            Gets a short localised description of this <see cref="T:Zelda.Status.Damage.ElementalDamageTakenEffect"/>.
            </summary>
            <param name="statable">
            The statable component of the entity that wants to receive the description about this StatusEffect.
            </param>
            <returns>
            The localized description string.
            </returns>
        </member>
        <member name="P:Zelda.Status.Damage.ElementalDamageTakenEffect.IsBad">
            <summary>
            Gets a value indicating whether this StatusEffect is 'bad' for the statable ZeldaEntity.
            </summary>
        </member>
        <member name="M:Zelda.Status.Damage.ElementalDamageTakenEffect.#ctor">
            <summary>
            Initializes a new instance of the ElementalDamageTakenEffect class.
            </summary>
        </member>
        <member name="M:Zelda.Status.Damage.ElementalDamageTakenEffect.#ctor(System.Single,Zelda.Status.StatusManipType,Zelda.Status.ElementalSchool)">
            <summary>
            Initializes a new instance of the ElementalDamageTakenEffect class.
            </summary>
            <param name="value">
            The value of the new ElementalDamageTakenEffect.
            </param>
            <param name="manipulationType">
            States how the <paramref name="value"/> of the new ElementalDamageTakenEffect should be interpreted.
            </param>
            <param name="elementalSchool">
            The ElementalSchool that is manipulated by the new ElementalDamageTakenEffect.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.ElementalDamageTakenEffect.OnEnable(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.Damage.ElementalDamageTakenEffect"/> gets enabled for the given statable Entity.
            </summary>
            <param name="user">
            The statable that enabled this <see cref="T:Zelda.Status.StatusEffect"/>.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.ElementalDamageTakenEffect.OnDisable(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.Damage.ElementalDamageTakenEffect"/> gets disabled for the given statable Entity.
            </summary>
            <param name="user">
            The statable that disabled this <see cref="T:Zelda.Status.StatusEffect"/>.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.ElementalDamageTakenEffect.OnChanged(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.Damage.ElementalDamageTakenEffect"/> gets enabled or disabled
            for the given statable Entity.
            </summary>
            <param name="user">
            The statable that enabled or disabled this <see cref="T:Zelda.Status.StatusEffect"/>.
            </param>
        </member>
        <member name="M:Zelda.Status.Damage.ElementalDamageTakenEffect.Clone">
            <summary>
            Returns a clone of this ElementalDamageTakenEffect.
            </summary>
            <returns>
            The cloned StatusEffect.
            </returns>
        </member>
        <member name="T:Zelda.Status.Damage.DamageSchool">
            <summary>
            Enumerates the different schools of damage.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.DamageSchool.None">
            <summary>
            Represents no specific damage school.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.DamageSchool.Physical">
            <summary>
            Represents the physical damage school;
            used by most melee and ranged attacks.
            Is mitigated by armor.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.DamageSchool.Magical">
            <summary>
            Represents the magical damage school;
            used by most spell attacks.
            Isn't mitigated by armor, bt can be resisted.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.DamageSchool.All">
            <summary>
            Represents all damage schools together.
            </summary>
        </member>
        <member name="T:Zelda.Status.Damage.DamageSource">
            <summary>
            Enumerates the different sources of damage.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.DamageSource.None">
            <summary>
            Represents no damage source.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.DamageSource.Melee">
            <summary>
            States that a melee attack was the source of the damage.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.DamageSource.Ranged">
            <summary>
            States that a ranged attack was the source of the damage.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.DamageSource.Spell">
            <summary>
            States that a spell was the source of the damage.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.DamageSource.All">
            <summary>
            Represents all damage sources together.
            </summary>
        </member>
        <member name="T:Zelda.Status.Damage.SpecialDamageType">
            <summary>
            Enumerates various special kinds of damage.
            </summary>
            <remarks>
            StatusEffects and Containers use actual elements of the enumeration; not combined.
            The <see cref="T:Zelda.Status.Damage.DamageTypeInfo"/> on the other hand might have combined SpecialDamageType flags.
            </remarks>
        </member>
        <member name="F:Zelda.Status.Damage.SpecialDamageType.None">
            <summary>
            Represents no specific special damage type.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.SpecialDamageType.DamagerOverTime">
            <summary>
            Damage Over Time StatusEffects are applied over a longer period of time.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.SpecialDamageType.Poison">
            <summary>
            Poisons are usually damage-over-time nature damage.
            </summary>
        </member>
        <member name="F:Zelda.Status.Damage.SpecialDamageType.Bleed">
            <summary>
            Bleeds are usually damage-over-time physical damage.
            </summary>
        </member>
        <member name="T:Zelda.Status.ArmorEffect">
            <summary>
            Defines a <see cref="T:Zelda.Status.StatusValueEffect"/> that manipulates the armor status-value 
            of a <see cref="T:Zelda.Status.Statable"/> ZeldaEntity.
            This class can't be inherited.
            </summary>
        </member>
        <member name="F:Zelda.Status.ArmorEffect.IdentifierString">
            <summary>
            The string that uniquely identifies this ArmorEffect.
            </summary>
        </member>
        <member name="M:Zelda.Status.ArmorEffect.GetDescription(Zelda.Status.Statable)">
            <summary>
            Gets a short localised description of this <see cref="T:Zelda.Status.StatusEffect"/>.
            </summary>
            <param name="statable">
            The statable component of the entity that wants to receive the description about this StatusEffect.
            </param>
            <returns>
            The localized description string.
            </returns>
        </member>
        <member name="P:Zelda.Status.ArmorEffect.Identifier">
            <summary> 
            Gets an unique string that represents what this <see cref="T:Zelda.Status.ArmorEffect"/> manipulates.
            </summary>
        </member>
        <member name="M:Zelda.Status.ArmorEffect.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Status.ArmorEffect"/> class.
            </summary>
        </member>
        <member name="M:Zelda.Status.ArmorEffect.#ctor(System.Single,Zelda.Status.StatusManipType)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Status.ArmorEffect"/> class.
            </summary>
            <param name="value"> The manipulation value. 
            It's depending on the <see cref="T:Zelda.Status.StatusManipType"/> 
               a total value ( 10 would increase the stat by 10 ),
            or a procentual value ( 10 would increase the stat by 10% )
            </param>
            <param name="manipulationType">
            Indicates how the Value of the new <see cref="T:Zelda.Status.StatusValueEffect"/> should be interpreted.
            </param>
        </member>
        <member name="M:Zelda.Status.ArmorEffect.OnEnable(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.StatusEffect"/> gets enabled for the given statable Entity.
            </summary>
            <param name="user">
            The statable that enabled this <see cref="T:Zelda.Status.StatusEffect"/>.
            </param>
        </member>
        <member name="M:Zelda.Status.ArmorEffect.OnDisable(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.StatusEffect"/> gets disabled for the given statable Entity.
            </summary>
            <param name="user">
            The statable that disabled this <see cref="T:Zelda.Status.StatusEffect"/>.
            </param>
        </member>
        <member name="M:Zelda.Status.ArmorEffect.Clone">
            <summary>
            Returns a clone of this ArmorEffect.
            </summary>
            <returns>
            The cloned StatusEffect.
            </returns>
        </member>
        <member name="T:Zelda.Status.ArmorIgnoreEffect">
            <summary>
            Defines a <see cref="T:Zelda.Status.StatusValueEffect"/> that manipulates the
            armor ignore status-value of a <see cref="T:Zelda.Status.Statable"/> ZeldaEntity.
            <para>
            Armor Ignore reduces the armor of the attacked target when using a physical attack.
            </para>
            This class can't be inherited.
            </summary>
        </member>
        <member name="F:Zelda.Status.ArmorIgnoreEffect.IdentifierString">
            <summary>
            The string that uniquely identifies this ArmorIgnoreEffect.
            </summary>
        </member>
        <member name="M:Zelda.Status.ArmorIgnoreEffect.GetDescription(Zelda.Status.Statable)">
            <summary>
            Gets a short localised description of this <see cref="T:Zelda.Status.StatusEffect"/>.
            </summary>
            <param name="statable">
            The statable component of the entity that wants to receive the description about this StatusEffect.
            </param>
            <returns>
            The localized description string.
            </returns>
        </member>
        <member name="P:Zelda.Status.ArmorIgnoreEffect.Identifier">
            <summary> 
            Gets an unique string that represents what this <see cref="T:Zelda.Status.ArmorIgnoreEffect"/> manipulates.
            </summary>
        </member>
        <member name="M:Zelda.Status.ArmorIgnoreEffect.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Status.ArmorIgnoreEffect"/> class.
            </summary>
        </member>
        <member name="M:Zelda.Status.ArmorIgnoreEffect.#ctor(System.Single,Zelda.Status.StatusManipType)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Status.ArmorIgnoreEffect"/> class.
            </summary>
            <param name="value"> The manipulation value. 
            It's depending on the <see cref="T:Zelda.Status.StatusManipType"/> 
               a total value ( 10 would increase the stat by 10 ),
            or a procentual value ( 10 would increase the stat by 10% )
            </param>
            <param name="manipulationType">
            Indicates how the Value of the new <see cref="T:Zelda.Status.StatusValueEffect"/> should be interpreted.
            </param>
        </member>
        <member name="M:Zelda.Status.ArmorIgnoreEffect.OnEnable(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.StatusEffect"/> gets enabled for the given statable Entity.
            </summary>
            <param name="user">
            The statable that enabled this <see cref="T:Zelda.Status.StatusEffect"/>.
            </param>
        </member>
        <member name="M:Zelda.Status.ArmorIgnoreEffect.OnDisable(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.StatusEffect"/> gets disabled for the given statable Entity.
            </summary>
            <param name="user">
            The statable that disabled this <see cref="T:Zelda.Status.StatusEffect"/>.
            </param>
        </member>
        <member name="M:Zelda.Status.ArmorIgnoreEffect.OnChanged(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.StatusEffect"/> gets enabled/disabled for the given statable Entity.
            </summary>
            <param name="user">
            The statable that enabled/disabled this <see cref="T:Zelda.Status.StatusEffect"/>.
            </param>
        </member>
        <member name="M:Zelda.Status.ArmorIgnoreEffect.Clone">
            <summary>
            Returns a clone of this ArmorIgnoreEffect.
            </summary>
            <returns>
            The cloned StatusEffect.
            </returns>
        </member>
        <member name="T:Zelda.Status.AttackSpeedEffect">
            <summary>
            Defines a StatusEffect which manipulates melee/ranged Attack Speed. 
            This class can't be inherited.
            </summary>
        </member>
        <member name="F:Zelda.Status.AttackSpeedEffect.IdentifierMelee">
            <summary>
            The string that uniquely identifies this AttackSpeedEffect.
            </summary>
        </member>
        <member name="F:Zelda.Status.AttackSpeedEffect.IdentifierRanged">
            <summary>
            The string that uniquely identifies this AttackSpeedEffect.
            </summary>
        </member>
        <member name="F:Zelda.Status.AttackSpeedEffect.IdentifierAll">
            <summary>
            The string that uniquely identifies this AttackSpeedEffect.
            </summary>
        </member>
        <member name="P:Zelda.Status.AttackSpeedEffect.AttackType">
            <summary>
            Gets or sets the <see cref="P:Zelda.Status.AttackSpeedEffect.AttackType"/> whos attack-speed is modified
            by this <see cref="T:Zelda.Status.AttackSpeedEffect"/>.
            </summary>
        </member>
        <member name="P:Zelda.Status.AttackSpeedEffect.Identifier">
            <summary> 
            Gets an unique string that represents what this <see cref="T:Zelda.Status.StatusEffect"/> manipulates.
            </summary>
        </member>
        <member name="M:Zelda.Status.AttackSpeedEffect.GetDescription(Zelda.Status.Statable)">
            <summary>
            Gets a short localised description of this <see cref="T:Zelda.Status.StatusEffect"/>.
            </summary>
            <param name="statable">
            The statable component of the entity that wants to receive the description about this StatusEffect.
            </param>
            <returns>
            The localized description string.
            </returns>
        </member>
        <member name="M:Zelda.Status.AttackSpeedEffect.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Status.AttackSpeedEffect"/> class.
            </summary>
        </member>
        <member name="M:Zelda.Status.AttackSpeedEffect.#ctor(Zelda.Attacks.AttackType,System.Single,Zelda.Status.StatusManipType)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Status.AttackSpeedEffect"/> class.
            </summary>
            <param name="attackType">
            States what kind of attack speed is manibulated by the new AttackSpeedEffect.
            </param>
            <param name="value"> The manipulation value. 
            It's depending on the <see cref="T:Zelda.Status.StatusManipType"/> 
               a total value ( 10 would increase the stat by 10 ),
            or a procentual value ( 10 would increase the stat by 10% )
            </param>
            <param name="manipulationType">
            Indicates how the <see cref="P:Zelda.Status.StatusValueEffect.Value"/> of the new AttackSpeedEffect should be interpreted.
            </param>
        </member>
        <member name="M:Zelda.Status.AttackSpeedEffect.OnEnable(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.AttackSpeedEffect"/> gets enabled for the given <see cref="T:Zelda.Status.ExtendedStatable"/> Entity.
            </summary>
            <param name="user">
            The statable that enabled this <see cref="T:Zelda.Status.AttackSpeedEffect"/>.
            </param>
        </member>
        <member name="M:Zelda.Status.AttackSpeedEffect.OnDisable(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.AttackSpeedEffect"/> gets disabled for the given <see cref="T:Zelda.Status.ExtendedStatable"/> Entity.
            </summary>
            <param name="user">
            The statable that disabled this <see cref="T:Zelda.Status.AttackSpeedEffect"/>.
            </param>
        </member>
        <member name="M:Zelda.Status.AttackSpeedEffect.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Status.AttackSpeedEffect.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Status.AttackSpeedEffect.Clone">
            <summary>
            Returns a clone of this AttackSpeedEffect.
            </summary>
            <returns>
            The cloned StatusEffect.
            </returns>
        </member>
        <member name="T:Zelda.Status.BlockValueEffect">
            <summary>
            Defines a <see cref="T:Zelda.Status.StatusValueEffect"/> that manipulates the Block Value of an ExtendedStatable ZeldaEntity.
            The higher the block value the more damage is blocked.
            This class can't be inherited.
            </summary>
        </member>
        <member name="F:Zelda.Status.BlockValueEffect.IdentifierString">
            <summary>
            The string that uniquely identifies this BlockValueEffect.
            </summary>
        </member>
        <member name="M:Zelda.Status.BlockValueEffect.GetDescription(Zelda.Status.Statable)">
            <summary>
            Gets a short localised description of this <see cref="T:Zelda.Status.StatusEffect"/>.
            </summary>
            <param name="statable">
            The statable component of the entity that wants to receive the description about this StatusEffect.
            </param>
            <returns>
            The localized description string.
            </returns>
        </member>
        <member name="P:Zelda.Status.BlockValueEffect.Identifier">
            <summary> 
            Gets an unique string that represents what this <see cref="T:Zelda.Status.BlockValueEffect"/> manipulates.
            </summary>
        </member>
        <member name="M:Zelda.Status.BlockValueEffect.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Status.BlockValueEffect"/> class.
            </summary>
        </member>
        <member name="M:Zelda.Status.BlockValueEffect.#ctor(System.Single,Zelda.Status.StatusManipType)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Status.BlockValueEffect"/> class.
            </summary>
            <param name="value"> The manipulation value. 
            It's depending on the <see cref="T:Zelda.Status.StatusManipType"/> 
               a total value ( 10 would increase the stat by 10 ),
            or a procentual value ( 10 would increase the stat by 10% )
            </param>
            <param name="manipulationType">
            Indicates how the Value of the new <see cref="T:Zelda.Status.StatusValueEffect"/> should be interpreted.
            </param>
        </member>
        <member name="M:Zelda.Status.BlockValueEffect.OnEnable(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.LifeManaEffect"/> gets enabled for the given extended-statable Entity.
            </summary>
            <param name="user">
            The statable that enabled this <see cref="T:Zelda.Status.LifeManaEffect"/>.
            </param>
        </member>
        <member name="M:Zelda.Status.BlockValueEffect.OnDisable(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.LifeManaEffect"/> gets disabled for the given extended-statable Entity.
            </summary>
            <param name="user">
            The statable that disabled this <see cref="T:Zelda.Status.LifeManaEffect"/>.
            </param>
        </member>
        <member name="M:Zelda.Status.BlockValueEffect.Clone">
            <summary>
            Returns a clone of this BlockValueEffect.
            </summary>
            <returns>
            The cloned StatusEffect.
            </returns>
        </member>
        <member name="T:Zelda.Status.ChanceToBeStatusEffect">
            <summary>
            Defines a StatusEffect that manipulates the chance to be crit/hit/dodged/etc.
            This class can't be inherited.
            </summary>
            <seealso cref="T:Zelda.Status.ChanceToStatus"/>
        </member>
        <member name="F:Zelda.Status.ChanceToBeStatusEffect.IdentifierToBeCrit">
            <summary>
            The manipulation name that uniquely identifies the StatusEffects that manipulate the Crit modifier.
            </summary>
        </member>
        <member name="F:Zelda.Status.ChanceToBeStatusEffect.IdentifierToBeHit">
            <summary>
            The manipulation name that uniquely identifies the StatusEffects that manipulate the To Be Hit modifier.
            </summary>
        </member>
        <member name="P:Zelda.Status.ChanceToBeStatusEffect.Identifier">
            <summary> 
            Gets an unique string that represents what this <see cref="T:Zelda.Status.StatusEffect"/> manipulates.
            </summary>
        </member>
        <member name="P:Zelda.Status.ChanceToBeStatusEffect.StatusType">
            <summary>
            Gets or sets the <see cref="T:Zelda.Status.ChanceToStatus"/> that is manipulated by the <see cref="T:Zelda.Status.ChanceToBeStatusEffect"/>.
            </summary>
        </member>
        <member name="M:Zelda.Status.ChanceToBeStatusEffect.GetDescription(Zelda.Status.Statable)">
            <summary>
            Gets a short localised description of this <see cref="T:Zelda.Status.StatusEffect"/>.
            </summary>
            <param name="statable">
            The statable component of the entity that wants to receive the description about this StatusEffect.
            </param>
            <returns>
            The localized description string.
            </returns>
        </member>
        <member name="P:Zelda.Status.ChanceToBeStatusEffect.IsBad">
            <summary>
            Gets a value indicating whether this StatusEffect is 'bad' for the statable ZeldaEntity.
            </summary>
        </member>
        <member name="M:Zelda.Status.ChanceToBeStatusEffect.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Status.ChanceToBeStatusEffect"/> class.
            </summary>
        </member>
        <member name="M:Zelda.Status.ChanceToBeStatusEffect.#ctor(System.Single,Zelda.Status.StatusManipType,Zelda.Status.ChanceToStatus)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Status.ChanceToBeStatusEffect"/> class.
            </summary>
            <param name="value">
            The value of the new ChanceToBeStatusEffect.
            </param>
            <param name="manipulationType">
            Indicates how the value of the new <see cref="T:Zelda.Status.StatusValueEffect"/> should be interpreted.
            </param>
            <param name="statusType">
            Indicates what <see cref="T:Zelda.Status.ChanceToStatus"/> the new ChanceToBeStatusEffect manipulates.
            </param>
        </member>
        <member name="M:Zelda.Status.ChanceToBeStatusEffect.OnEnable(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.ChanceToBeStatusEffect"/> gets enabled for the given extended-sstatable Entity.
            </summary>
            <param name="user">
            The statable that enabled this <see cref="T:Zelda.Status.StatusEffect"/>.
            </param>
        </member>
        <member name="M:Zelda.Status.ChanceToBeStatusEffect.OnDisable(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.ChanceToBeStatusEffect"/> gets disabled for the given extended-statable Entity.
            </summary>
            <param name="user">
            The statable that disabled this <see cref="T:Zelda.Status.StatusEffect"/>.
            </param>
        </member>
        <member name="M:Zelda.Status.ChanceToBeStatusEffect.OnStateChange(Zelda.Status.Statable)">
            <summary>
            Called when the Enabled/Disabled state of this ChanceToBeStatusEffect has 
            changed for the given statable Entity.
            </summary>
            <param name="user">
            The statable that enabled/disabled this <see cref="T:Zelda.Status.StatusEffect"/>.
            </param>
        </member>
        <member name="M:Zelda.Status.ChanceToBeStatusEffect.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Status.ChanceToBeStatusEffect.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Status.ChanceToBeStatusEffect.Clone">
            <summary>
            Returns a clone of this ChanceToBeStatusEffect.
            </summary>
            <returns>
            The cloned StatusEffect.
            </returns>
        </member>
        <member name="T:Zelda.Status.ChanceToResistEffect">
            <summary>
            Defines a <see cref="T:Zelda.Status.StatusValueEffect"/> that manipulates the change of a <see cref="T:Zelda.Status.Statable"/> ZeldaEntity
            to resist a specific school of magic.
            This class can't be inherited.
            </summary>
        </member>
        <member name="F:Zelda.Status.ChanceToResistEffect.ManipNameFire">
            <summary>
            The manipulation name that uniquely identifies the StatusEffects that manipulate the Fire resist value.
            </summary>
        </member>
        <member name="F:Zelda.Status.ChanceToResistEffect.ManipNameLight">
            <summary>
            The manipulation name that uniquely identifies the StatusEffects that manipulate the Light resist value.
            </summary>
        </member>
        <member name="F:Zelda.Status.ChanceToResistEffect.ManipNameShadow">
            <summary>
            The manipulation name that uniquely identifies the StatusEffects that manipulate the Shadow resist value.
            </summary>
        </member>
        <member name="F:Zelda.Status.ChanceToResistEffect.ManipNameNature">
            <summary>
            The manipulation name that uniquely identifies the StatusEffects that manipulate the Nature resist value.
            </summary>
        </member>
        <member name="F:Zelda.Status.ChanceToResistEffect.ManipNameWater">
            <summary>
            The manipulation name that uniquely identifies the StatusEffects that manipulate the Water resist value.
            </summary>
        </member>
        <member name="F:Zelda.Status.ChanceToResistEffect.ManipNameAll">
            <summary>
            The manipulation name that uniquely identifies the StatusEffects that manipulates all resist values at once.
            </summary>
        </member>
        <member name="M:Zelda.Status.ChanceToResistEffect.GetManipName(Zelda.Status.ElementalSchool)">
            <summary>
            Gets the manipulation identifier string the ChanceToResistEffect class
            uses for the given ElementalSchool.
            </summary>
            <param name="school">
            The school of the attack or spell.
            </param>
            <returns>
            The string that uniquely identifies the ChanceToResistEffect for the given ElementalSchool.
            </returns>
        </member>
        <member name="P:Zelda.Status.ChanceToResistEffect.ElementalSchool">
            <summary>
            Gets or sets the <see cref="P:Zelda.Status.ChanceToResistEffect.ElementalSchool"/> that is manipulated by this <see cref="T:Zelda.Status.ChanceToResistEffect"/>.
            </summary>
        </member>
        <member name="M:Zelda.Status.ChanceToResistEffect.GetDescription(Zelda.Status.Statable)">
            <summary>
            Gets a short localised description of this <see cref="T:Zelda.Status.StatusEffect"/>.
            </summary>
            <param name="statable">
            The statable component of the entity that wants to receive the description about this StatusEffect.
            </param>
            <returns>
            The localized description string.
            </returns>
        </member>
        <member name="P:Zelda.Status.ChanceToResistEffect.Identifier">
            <summary> 
            Gets an unique string that represents what this <see cref="T:Zelda.Status.StatusEffect"/> manipulates.
            </summary>
        </member>
        <member name="M:Zelda.Status.ChanceToResistEffect.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Status.ChanceToResistEffect"/> class.
            </summary>
        </member>
        <member name="M:Zelda.Status.ChanceToResistEffect.#ctor(System.Single,Zelda.Status.StatusManipType,Zelda.Status.ElementalSchool)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Status.ChanceToResistEffect"/> class.
            </summary>
            <param name="value"> 
            The value of the new ChanceToResistEffect.
            </param>
            <param name="manipulationType">
            The manipulation type of the new ChanceToResistEffect.
            </param>
            <param name="element">
            Indicates what <see cref="P:Zelda.Status.ChanceToResistEffect.ElementalSchool"/> the new ChanceToResistEffect manipulates.
            </param>
        </member>
        <member name="M:Zelda.Status.ChanceToResistEffect.OnEnable(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.ChanceToStatusEffect"/> gets enabled for the given extended-sstatable Entity.
            </summary>
            <param name="user">
            The statable that enabled this <see cref="T:Zelda.Status.StatusEffect"/>.
            </param>
        </member>
        <member name="M:Zelda.Status.ChanceToResistEffect.OnDisable(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.ChanceToStatusEffect"/> gets disabled for the given extended-statable Entity.
            </summary>
            <param name="user">
            The statable that disabled this <see cref="T:Zelda.Status.StatusEffect"/>.
            </param>
        </member>
        <member name="M:Zelda.Status.ChanceToResistEffect.OnStateChange(Zelda.Status.Statable)">
            <summary>
            Called when the Enabled/Disabled state of this ChanceToStatusEffect has 
            changed for the given statable Entity.
            </summary>
            <param name="user">
            The statable that disabled this <see cref="T:Zelda.Status.StatusEffect"/>.
            </param>
        </member>
        <member name="M:Zelda.Status.ChanceToResistEffect.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Status.ChanceToResistEffect.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Status.ChanceToResistEffect.Clone">
            <summary>
            Returns a clone of this ChanceToStatusEffect.
            </summary>
            <returns>
            The cloned StatusEffect.
            </returns>
        </member>
        <member name="F:Zelda.Status.ChanceToResistEffect.element">
            <summary>
            The <see cref="P:Zelda.Status.ChanceToResistEffect.ElementalSchool"/> this ChanceToResistEffect manipulates.
            </summary>
        </member>
        <member name="T:Zelda.Status.ChanceToStatusEffect">
            <summary>
            Defines a <see cref="T:Zelda.Status.StatusValueEffect"/> that manipulates a <see cref="T:Zelda.Status.ChanceToStatus"/> status-value 
            of a <see cref="T:Zelda.Status.ExtendedStatable"/> ZeldaEntity.
            This class can't be inherited.
            </summary>
        </member>
        <member name="F:Zelda.Status.ChanceToStatusEffect.IdentifierCrit">
            <summary>
            The manipulation name that uniquely identifies the StatusEffects that manipulate the Crit modifier.
            </summary>
        </member>
        <member name="F:Zelda.Status.ChanceToStatusEffect.IdentifierMiss">
            <summary>
            The manipulation name that uniquely identifies the StatusEffects that manipulate the Miss modifier.
            </summary>
        </member>
        <member name="F:Zelda.Status.ChanceToStatusEffect.IdentifierDodge">
            <summary>
            The manipulation name that uniquely identifies the StatusEffects that manipulate the Dodge modifier.
            </summary>
        </member>
        <member name="F:Zelda.Status.ChanceToStatusEffect.IdentifierBlock">
            <summary>
            The manipulation name that uniquely identifies the StatusEffects that manipulate the Block modifier.
            </summary>
        </member>
        <member name="F:Zelda.Status.ChanceToStatusEffect.IdentifierParry">
            <summary>
            The manipulation name that uniquely identifies the StatusEffects that manipulate the Parry modifier.
            </summary>
        </member>
        <member name="F:Zelda.Status.ChanceToStatusEffect.IdentifierCritHeal">
            <summary>
            The manipulation name that uniquely identifies the StatusEffects that manipulate the CritHeal modifier.
            </summary>
        </member>
        <member name="F:Zelda.Status.ChanceToStatusEffect.IdentifierCritBlock">
            <summary>
            The manipulation name that uniquely identifies the StatusEffects that manipulate the CritBlock modifier.
            </summary>
        </member>
        <member name="F:Zelda.Status.ChanceToStatusEffect.IdentifierPierce">
            <summary>
            The manipulation name that uniquely identifies the StatusEffects that manipulate the Pierce modifier.
            </summary>
        </member>
        <member name="P:Zelda.Status.ChanceToStatusEffect.Identifier">
            <summary> 
            Gets an unique string that represents what this <see cref="T:Zelda.Status.StatusEffect"/> manipulates.
            </summary>
        </member>
        <member name="M:Zelda.Status.ChanceToStatusEffect.GetIdentifier(Zelda.Status.ChanceToStatus)">
            <summary>
            Gets the string that uniquely identifies the <see cref="T:Zelda.Status.ChanceToStatusEffect"/>
            for the specified ChanceToStatus.
            </summary>
            <param name="statusType">
            The ChanceToStatus to get the identifier for.
            </param>
            <returns>
            An string that can be used an unique identifier.
            </returns>
        </member>
        <member name="P:Zelda.Status.ChanceToStatusEffect.StatusType">
            <summary>
            Gets or sets the <see cref="T:Zelda.Status.ChanceToStatus"/> that is manipulated by the <see cref="T:Zelda.Status.ChanceToStatusEffect"/>.
            </summary>
        </member>
        <member name="M:Zelda.Status.ChanceToStatusEffect.GetDescription(Zelda.Status.Statable)">
            <summary>
            Gets a short localised description of this <see cref="T:Zelda.Status.StatusEffect"/>.
            </summary>
            <param name="statable">
            The statable component of the entity that wants to receive the description about this StatusEffect.
            </param>
            <returns>
            The localized description string.
            </returns>
        </member>
        <member name="P:Zelda.Status.ChanceToStatusEffect.IsBad">
            <summary>
            Gets a value indicating whether this ChanceToStatusEffect is a 'bad' effect.
            </summary>
        </member>
        <member name="M:Zelda.Status.ChanceToStatusEffect.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Status.ChanceToStatusEffect"/> class.
            </summary>
        </member>
        <member name="M:Zelda.Status.ChanceToStatusEffect.#ctor(System.Single,Zelda.Status.StatusManipType,Zelda.Status.ChanceToStatus)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Status.ChanceToStatusEffect"/> class.
            </summary>
            <param name="value">
            The value of the new ChanceToStatusEffect.
            </param>
            <param name="manipulationType">
            Indicates how the value of the new <see cref="T:Zelda.Status.StatusValueEffect"/> should be interpreted.
            </param>
            <param name="statusType">
            Indicates what <see cref="T:Zelda.Status.ChanceToStatus"/> the new ChanceToStatusEffect manipulates.
            </param>
        </member>
        <member name="M:Zelda.Status.ChanceToStatusEffect.OnEnable(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.ChanceToStatusEffect"/> gets enabled for the given extended-sstatable Entity.
            </summary>
            <param name="user">
            The statable that enabled this <see cref="T:Zelda.Status.StatusEffect"/>.
            </param>
        </member>
        <member name="M:Zelda.Status.ChanceToStatusEffect.OnDisable(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.ChanceToStatusEffect"/> gets disabled for the given extended-statable Entity.
            </summary>
            <param name="user">
            The statable that disabled this <see cref="T:Zelda.Status.StatusEffect"/>.
            </param>
        </member>
        <member name="M:Zelda.Status.ChanceToStatusEffect.OnStateChange(Zelda.Status.Statable)">
            <summary>
            Called when the Enabled/Disabled state of this ChanceToStatusEffect has 
            changed for the given extended-statable Entity.
            </summary>
            <param name="user">
            The extended-statable that disabled this <see cref="T:Zelda.Status.StatusEffect"/>.
            </param>
        </member>
        <member name="M:Zelda.Status.ChanceToStatusEffect.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Status.ChanceToStatusEffect.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Status.ChanceToStatusEffect.Clone">
            <summary>
            Returns a clone of this ChanceToStatusEffect.
            </summary>
            <returns>
            The cloned StatusEffect.
            </returns>
        </member>
        <member name="T:Zelda.Status.ColorEffect">
            <summary>
            Represents an effect that changes the color of the fairy.
            </summary>
        </member>
        <member name="F:Zelda.Status.ColorEffect.IdentifierString">
            <summary>
            The string that uniquely identifies this ColorEffect.
            </summary>
        </member>
        <member name="P:Zelda.Status.ColorEffect.Identifier">
            <summary> 
            Gets an unique string that represents what this <see cref="T:Zelda.Status.LightRadiusEffect"/> manipulates.
            </summary>
        </member>
        <member name="M:Zelda.Status.ColorEffect.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Status.ColorEffect.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Status.ColorEffect.Clone">
            <summary>
            Returns a clone of this ChanceToStatusEffect.
            </summary>
            <returns>
            The cloned StatusEffect.
            </returns>
        </member>
        <member name="T:Zelda.Status.Design.KnownStatusEffect">
            <summary>
            Enumerates all StatusEffects that are available at design-time.
            </summary>
        </member>
        <member name="P:Zelda.Status.Design.KnownStatusEffect.Types">
            <summary>
            Gets the types of all known StatusEffects.
            </summary>
            <remarks>
            The returned array should not be modified.
            </remarks>
        </member>
        <member name="F:Zelda.Status.Design.KnownStatusEffect.types">
            <summary>
            The list of effect types supported by the design-time editors.
            </summary>
        </member>
        <member name="T:Zelda.Status.Design.StatusEffectEditor">
            <summary>
            Implements an <see cref="T:Zelda.Design.BaseZeldaObjectCreationEditor"/> that provides a mechanism that
            allows the user to create a StatusEffect.
            </summary>
        </member>
        <member name="M:Zelda.Status.Design.StatusEffectEditor.GetTypes">
            <summary>
            Gets the types of the objects that can be created by this StatusEffectEditor.
            </summary>
            <returns>
            The list of types.
            </returns>
        </member>
        <member name="T:Zelda.Status.EquipmentSlotStatModifierEffect">
            <summary>
            Represents a <see cref="T:Zelda.Status.StatusValueEffect"/> that
            manipulates how many <see cref="T:Zelda.Status.Stat"/> points items
            in a specific <see cref="P:Zelda.Status.EquipmentSlotStatModifierEffect.EquipmentSlot"/> give.
            </summary>
        </member>
        <member name="M:Zelda.Status.EquipmentSlotStatModifierEffect.GetIdentifier(Zelda.Items.EquipmentSlot)">
            <summary>
            Gets the string that uniquely identifies what a specific EquipmentStatModifierEffect
            manipulates.
            </summary>
            <param name="equipmentSlot">
            The <see cref="P:Zelda.Status.EquipmentSlotStatModifierEffect.EquipmentSlot"/> the EquipmentStatModifierEffect is related to.
            </param>
            <returns>
            The manipulation identification string.
            </returns>
        </member>
        <member name="P:Zelda.Status.EquipmentSlotStatModifierEffect.Identifier">
            <summary> 
            Gets an unique string that represents what this <see cref="T:Zelda.Status.StatusEffect"/> manipulates.
            </summary>
        </member>
        <member name="P:Zelda.Status.EquipmentSlotStatModifierEffect.EquipmentSlot">
            <summary>
            Gets or sets the <see cref="P:Zelda.Status.EquipmentSlotStatModifierEffect.EquipmentSlot"/> this EquipmentStatModifierEffect
            is related to.
            </summary>
        </member>
        <member name="M:Zelda.Status.EquipmentSlotStatModifierEffect.GetDescription(Zelda.Status.Statable)">
            <summary>
            Gets a short localised description of this <see cref="T:Zelda.Status.StatusEffect"/>.
            </summary>
            <param name="statable">
            The statable component of the entity that wants to receive the description about this StatusEffect.
            </param>
            <returns>
            The localized description string.
            </returns>
        </member>
        <member name="M:Zelda.Status.EquipmentSlotStatModifierEffect.#ctor">
            <summary>
            Initializes a new instance of the EquipmentSlotStatModifierEffect class.
            </summary>
        </member>
        <member name="M:Zelda.Status.EquipmentSlotStatModifierEffect.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the EquipmentSlotStatModifierEffect class.
            </summary>
            <param name="value">
            The initial effect value of the new EquipmentSlotStatModifierEffect.
            </param>
        </member>
        <member name="M:Zelda.Status.EquipmentSlotStatModifierEffect.#ctor(Zelda.Items.EquipmentSlot,System.Single)">
            <summary>
            Initializes a new instance of the EquipmentSlotStatModifierEffect class.
            </summary>
            <param name="slot">
            The <see cref="P:Zelda.Status.EquipmentSlotStatModifierEffect.EquipmentSlot"/> the new EquipmentSlotStatModifierEffect is related to.
            </param>
            <param name="value">
            The initial effect value of the new EquipmentSlotStatModifierEffect.
            </param>
        </member>
        <member name="M:Zelda.Status.EquipmentSlotStatModifierEffect.OnEnable(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.StatusEffect"/> gets enabled for the given statable Entity.
            </summary>
            <param name="user">
            The statable that enabled this <see cref="T:Zelda.Status.StatusEffect"/>.
            </param>
        </member>
        <member name="M:Zelda.Status.EquipmentSlotStatModifierEffect.OnDisable(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.StatusEffect"/> gets disabled for the given statable Entity.
            </summary>
            <param name="user">
            The statable that disabled this <see cref="T:Zelda.Status.StatusEffect"/>.
            </param>
        </member>
        <member name="M:Zelda.Status.EquipmentSlotStatModifierEffect.Refresh(Zelda.Status.ExtendedStatable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.StatusEffect"/> gets enabled/disabled for the given statable Entity.
            </summary>
            <param name="user">
            The statable that disabled this <see cref="T:Zelda.Status.StatusEffect"/>.
            </param>
        </member>
        <member name="M:Zelda.Status.EquipmentSlotStatModifierEffect.Clone">
            <summary>
            Returns a clone of this EquipmentSlotStatModifierEffect.
            </summary>
            <returns>
            The cloned StatusEffect.
            </returns>
        </member>
        <member name="T:Zelda.Status.ExperienceGainedEffect">
            <summary>
            Defines a <see cref="T:Zelda.Status.StatusValueEffect"/> that manipulates the ExperienceGainedModifier
            of an extended-statable ZeldaEntity.
            This class can't be inherited.
            </summary>
        </member>
        <member name="F:Zelda.Status.ExperienceGainedEffect.IdentifierString">
            <summary>
            The string that uniquely identifies this ExperiencedGainedEffect.
            </summary>
        </member>
        <member name="M:Zelda.Status.ExperienceGainedEffect.GetDescription(Zelda.Status.Statable)">
            <summary>
            Gets a short localised description of this <see cref="T:Zelda.Status.StatusEffect"/>.
            </summary>
            <param name="statable">
            The statable component of the entity that wants to receive the description about this StatusEffect.
            </param>
            <returns>
            The localized description string.
            </returns>
        </member>
        <member name="P:Zelda.Status.ExperienceGainedEffect.Identifier">
            <summary> 
            Gets an unique string that represents what this <see cref="T:Zelda.Status.ExperienceGainedEffect"/> manipulates.
            </summary>
        </member>
        <member name="M:Zelda.Status.ExperienceGainedEffect.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Status.ExperienceGainedEffect"/> class.
            </summary>
        </member>
        <member name="M:Zelda.Status.ExperienceGainedEffect.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Status.ExperienceGainedEffect"/> class.
            </summary>
            <param name="value">
            The manipulation value.
            </param>
        </member>
        <member name="M:Zelda.Status.ExperienceGainedEffect.OnEnable(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.LifeManaEffect"/> gets enabled for the given extended-statable Entity.
            </summary>
            <param name="user">
            The statable that enabled this <see cref="T:Zelda.Status.LifeManaEffect"/>.
            </param>
        </member>
        <member name="M:Zelda.Status.ExperienceGainedEffect.OnDisable(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.LifeManaEffect"/> gets disabled for the given extended-statable Entity.
            </summary>
            <param name="user">
            The statable that disabled this <see cref="T:Zelda.Status.LifeManaEffect"/>.
            </param>
        </member>
        <member name="M:Zelda.Status.ExperienceGainedEffect.Clone">
            <summary>
            Returns a clone of this ExperienceGainedEffect.
            </summary>
            <returns>
            The cloned StatusEffect.
            </returns>
        </member>
        <member name="T:Zelda.Status.LifeManaEffect">
            <summary>
            Defines a <see cref="T:Zelda.Status.StatusValueEffect"/> that manipulates total life/mana values of an ExtendedStatable ZeldaEntity.
            This class can't be inherited.
            </summary>
        </member>
        <member name="F:Zelda.Status.LifeManaEffect.IdentifierLife">
            <summary>
            The string that uniquely identifies this LifeManaEffect.
            </summary>
        </member>
        <member name="F:Zelda.Status.LifeManaEffect.IdentifierMana">
            <summary>
            The string that uniquely identifies this LifeManaEffect.
            </summary>
        </member>
        <member name="P:Zelda.Status.LifeManaEffect.Identifier">
            <summary> 
            Gets an unique string that represents what this <see cref="T:Zelda.Status.LifeManaEffect"/> manipulates.
            </summary>
        </member>
        <member name="P:Zelda.Status.LifeManaEffect.PowerType">
            <summary>
            Gets or sets whether this LifeManaEffect manipulates Mana or Life.
            </summary>
        </member>
        <member name="M:Zelda.Status.LifeManaEffect.GetDescription(Zelda.Status.Statable)">
            <summary>
            Gets a short localised description of this <see cref="T:Zelda.Status.StatusEffect"/>.
            </summary>
            <param name="statable">
            The statable component of the entity that wants to receive the description about this StatusEffect.
            </param>
            <returns>
            The localized description string.
            </returns>
        </member>
        <member name="M:Zelda.Status.LifeManaEffect.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Status.LifeManaEffect"/> class.
            </summary>
        </member>
        <member name="M:Zelda.Status.LifeManaEffect.#ctor(System.Single,Zelda.Status.StatusManipType,Zelda.Status.LifeMana)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Status.LifeManaEffect"/> class.
            </summary>
            <param name="value">
            The value of the new LifeManaEffect.
            </param>
            <param name="manipulationType">
            Indicates how the Value of the new <see cref="T:Zelda.Status.StatusValueEffect"/> should be interpreted.
            </param>
            <param name="powerType">
            States whether the new LifeManaEffect manipulates Life or Mana.
            </param>
        </member>
        <member name="M:Zelda.Status.LifeManaEffect.OnEnable(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.LifeManaEffect"/> gets enabled for the given statable Entity.
            </summary>
            <param name="user">
            The statable that enabled this <see cref="T:Zelda.Status.LifeManaEffect"/>.
            </param>
        </member>
        <member name="M:Zelda.Status.LifeManaEffect.OnDisable(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.LifeManaEffect"/> gets disabled for the given statable Entity.
            </summary>
            <param name="user">
            The statable that disabled this <see cref="T:Zelda.Status.LifeManaEffect"/>.
            </param>
        </member>
        <member name="M:Zelda.Status.LifeManaEffect.OnChanged(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.LifeManaEffect"/> gets enabled or disabled for the given statable Entity.
            </summary>
            <param name="user">
            The statable that disabled this <see cref="T:Zelda.Status.LifeManaEffect"/>.
            </param>
        </member>
        <member name="M:Zelda.Status.LifeManaEffect.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Status.LifeManaEffect.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Status.LifeManaEffect.Clone">
            <summary>
            Returns a clone of this LifeManaEffect.
            </summary>
            <returns>
            The cloned StatusEffect.
            </returns>
        </member>
        <member name="T:Zelda.Status.LifeManaPotionEffectivenessEffect">
            <summary>
            Defines a <see cref="T:Zelda.Status.StatusEffect"/> which manipulates how
            well a <see cref="T:Zelda.Status.ExtendedStatable"/> ZeldaEntity regenerates Life/Mana.
            This class can't be inherited.
            </summary>
        </member>
        <member name="F:Zelda.Status.LifeManaPotionEffectivenessEffect.IdentifierLife">
            <summary>
            The string that uniquely identifies this LifeManaPotionEffectivenessEffect.
            </summary>
        </member>
        <member name="F:Zelda.Status.LifeManaPotionEffectivenessEffect.IdentifierMana">
            <summary>
            The string that uniquely identifies this LifeManaPotionEffectivenessEffect.
            </summary>
        </member>
        <member name="P:Zelda.Status.LifeManaPotionEffectivenessEffect.Identifier">
            <summary>
            Gets an unique string that represents what this LifeManaPotionEffectivenessEffect manipulates.
            </summary>
        </member>
        <member name="P:Zelda.Status.LifeManaPotionEffectivenessEffect.PowerType">
            <summary>
            Gets or sets what kind of Power the LifeManaPotionEffectivenessEffect manipulates.
            </summary>
        </member>
        <member name="M:Zelda.Status.LifeManaPotionEffectivenessEffect.GetDescription(Zelda.Status.Statable)">
            <summary>
            Gets a short localised description of this <see cref="T:Zelda.Status.StatusEffect"/>.
            </summary>
            <param name="statable">
            The statable component of the entity that wants to receive the description about this StatusEffect.
            </param>
            <returns>
            The localized description string.
            </returns>
        </member>
        <member name="M:Zelda.Status.LifeManaPotionEffectivenessEffect.#ctor">
            <summary>
            Initializes a new instance of the LifeManaPotionEffectivenessEffect class.
            </summary>
        </member>
        <member name="M:Zelda.Status.LifeManaPotionEffectivenessEffect.#ctor(System.Single,Zelda.Status.LifeMana)">
            <summary>
            Initializes a new instance of the LifeManaPotionEffectivenessEffect class.
            </summary>
            <param name="value">
            The value of the new LifeManaPotionEffectivenessEffect.
            </param>
            <param name="powerType">
            The power type the new <see cref="T:Zelda.Status.LifeManaRegenEffect"/> modifies.
            </param>
        </member>
        <member name="M:Zelda.Status.LifeManaPotionEffectivenessEffect.OnEnable(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.StatusEffect"/> gets enabled for the given statable Entity.
            </summary>
            <param name="user">
            The statable that enabled this <see cref="T:Zelda.Status.StatusEffect"/>.
            </param>
        </member>
        <member name="M:Zelda.Status.LifeManaPotionEffectivenessEffect.OnDisable(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.StatusEffect"/> gets disabled for the given statable Entity.
            </summary>
            <param name="user">
            The statable that disabled this <see cref="T:Zelda.Status.StatusEffect"/>.
            </param>
        </member>
        <member name="M:Zelda.Status.LifeManaPotionEffectivenessEffect.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Status.LifeManaPotionEffectivenessEffect.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Status.LifeManaPotionEffectivenessEffect.Clone">
            <summary>
            Returns a clone of this LifeManaPotionEffectivenessEffect.
            </summary>
            <returns>
            The cloned StatusEffect.
            </returns>
        </member>
        <member name="T:Zelda.Status.LifeManaRegenEffect">
            <summary>
            Defines a <see cref="T:Zelda.Status.StatusEffect"/> which manipulates how
            well a <see cref="T:Zelda.Status.ExtendedStatable"/> ZeldaEntity regenerates Life/Mana.
            This class can't be inherited.
            </summary>
        </member>
        <member name="F:Zelda.Status.LifeManaRegenEffect.IdentifierLife">
            <summary>
            The string that uniquely identifies this LifeManaRegenEffect.
            </summary>
        </member>
        <member name="F:Zelda.Status.LifeManaRegenEffect.IdentifierMana">
            <summary>
            The string that uniquely identifies this LifeManaRegenEffect.
            </summary>
        </member>
        <member name="F:Zelda.Status.LifeManaRegenEffect.IdentifierBoth">
            <summary>
            The string that uniquely identifies this LifeManaRegenEffect.
            </summary>
        </member>
        <member name="P:Zelda.Status.LifeManaRegenEffect.Identifier">
            <summary>
            Gets an unique string that represents what this LifeManaRegenEffect manipulates.
            </summary>
        </member>
        <member name="M:Zelda.Status.LifeManaRegenEffect.GetDescription(Zelda.Status.Statable)">
            <summary>
            Gets a short localised description of this <see cref="T:Zelda.Status.StatusEffect"/>.
            </summary>
            <param name="statable">
            The statable component of the entity that wants to receive the description about this StatusEffect.
            </param>
            <returns>
            The localized description string.
            </returns>
        </member>
        <member name="P:Zelda.Status.LifeManaRegenEffect.PowerType">
            <summary>
            Gets or sets what kind of Power the <see cref="T:Zelda.Status.LifeManaRegenEffect"/> manipulates.
            </summary>
        </member>
        <member name="M:Zelda.Status.LifeManaRegenEffect.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Status.LifeManaRegenEffect"/> class.
            </summary>
        </member>
        <member name="M:Zelda.Status.LifeManaRegenEffect.#ctor(System.Single,Zelda.Status.StatusManipType,Zelda.Status.LifeMana)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Status.LifeManaRegenEffect"/> class.
            </summary>
            <param name="value">
            The value of the new LifeManaRegenEffect.
            </param>
            <param name="manipulationType">
            Indicates how the <see cref="P:Zelda.Status.StatusValueEffect.Value"/> of the new <see cref="T:Zelda.Status.StatusValueEffect"/>
            should be interpreted.
            </param>
            <param name="powerType">
            The power type the new <see cref="T:Zelda.Status.LifeManaRegenEffect"/> modifies.
            </param>
        </member>
        <member name="M:Zelda.Status.LifeManaRegenEffect.OnEnable(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.StatusEffect"/> gets enabled for the given statable Entity.
            </summary>
            <param name="user">
            The statable that enabled this <see cref="T:Zelda.Status.StatusEffect"/>.
            </param>
        </member>
        <member name="M:Zelda.Status.LifeManaRegenEffect.OnDisable(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.StatusEffect"/> gets disabled for the given statable Entity.
            </summary>
            <param name="user">
            The statable that disabled this <see cref="T:Zelda.Status.StatusEffect"/>.
            </param>
        </member>
        <member name="M:Zelda.Status.LifeManaRegenEffect.OnChanged(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.StatusEffect"/> gets enabled/disabled for the given statable Entity.
            </summary>
            <param name="user">
            The statable that enabled/disabled this <see cref="T:Zelda.Status.StatusEffect"/>.
            </param>
        </member>
        <member name="M:Zelda.Status.LifeManaRegenEffect.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Status.LifeManaRegenEffect.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Status.LifeManaRegenEffect.Clone">
            <summary>
            Returns a clone of this LifeManaRegenEffect.
            </summary>
            <returns>
            The cloned StatusEffect.
            </returns>
        </member>
        <member name="T:Zelda.Status.LightRadiusEffect">
            <summary>
            Defines a StatusValueEffect that increases the chance of an extended-statable ZeldaEntity
            to find rare items.
            </summary>
        </member>
        <member name="F:Zelda.Status.LightRadiusEffect.IdentifierString">
            <summary>
            The string that uniquely identifies this LightRadiusEffect.
            </summary>
        </member>
        <member name="P:Zelda.Status.LightRadiusEffect.Identifier">
            <summary> 
            Gets an unique string that represents what this <see cref="T:Zelda.Status.LightRadiusEffect"/> manipulates.
            </summary>
        </member>
        <member name="M:Zelda.Status.LightRadiusEffect.GetDescription(Zelda.Status.Statable)">
            <summary>
            Gets a short localised description of this <see cref="T:Zelda.Status.StatusEffect"/>.
            </summary>
            <param name="statable">
            The statable component of the entity that wants to receive the description about this StatusEffect.
            </param>
            <returns>
            The localized description string.
            </returns>
        </member>
        <member name="M:Zelda.Status.LightRadiusEffect.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Status.LightRadiusEffect"/> class.
            </summary>
        </member>
        <member name="M:Zelda.Status.LightRadiusEffect.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Status.LightRadiusEffect"/> class.
            </summary>
            <param name="value">
            The manipulation value.
            </param>
        </member>
        <member name="M:Zelda.Status.LightRadiusEffect.OnEnable(Zelda.Status.Statable)">
            <summary>
            Called when this LightRadiusEffect gets enabled for the given extended-statable Entity.
            </summary>
            <param name="user">
            The statable that enabled this LightRadiusEffect.
            </param>
        </member>
        <member name="M:Zelda.Status.LightRadiusEffect.OnDisable(Zelda.Status.Statable)">
            <summary>
            Called when this LightRadiusEffect gets disabled for the given extended-statable Entity.
            </summary>
            <param name="user">
            The statable that disabled this LightRadiusEffect.
            </param>
        </member>
        <member name="M:Zelda.Status.LightRadiusEffect.OnChanged(Zelda.Status.Statable)">
            <summary>
            Called when this LightRadiusEffect gets enabled/disabled for the given extended-statable Entity.
            </summary>
            <param name="user">
            The statable that has enabled/disabled this LightRadiusEffect.
            </param>
        </member>
        <member name="M:Zelda.Status.LightRadiusEffect.Clone">
            <summary>
            Returns a clone of this LightRadiusEffect.
            </summary>
            <returns>
            The cloned StatusEffect.
            </returns>
        </member>
        <member name="T:Zelda.Status.MagicFindEffect">
            <summary>
            Defines a StatusValueEffect that increases the chance of an extended-statable ZeldaEntity
            to find rare items.
            </summary>
        </member>
        <member name="F:Zelda.Status.MagicFindEffect.IdentifierString">
            <summary>
            The string that uniquely identifies this MagicFindEffect.
            </summary>
        </member>
        <member name="P:Zelda.Status.MagicFindEffect.Identifier">
            <summary> 
            Gets an unique string that represents what this <see cref="T:Zelda.Status.MagicFindEffect"/> manipulates.
            </summary>
        </member>
        <member name="M:Zelda.Status.MagicFindEffect.GetDescription(Zelda.Status.Statable)">
            <summary>
            Gets a short localised description of this <see cref="T:Zelda.Status.StatusEffect"/>.
            </summary>
            <param name="statable">
            The statable component of the entity that wants to receive the description about this StatusEffect.
            </param>
            <returns>
            The localized description string.
            </returns>
        </member>
        <member name="M:Zelda.Status.MagicFindEffect.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Status.MagicFindEffect"/> class.
            </summary>
        </member>
        <member name="M:Zelda.Status.MagicFindEffect.#ctor(System.Single,Zelda.Status.StatusManipType)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Status.MagicFindEffect"/> class.
            </summary>
            <param name="value">
            The manipulation value.
            </param>
            <param name="manipulationType">
            Indicates how the Value of the new <see cref="T:Zelda.Status.MagicFindEffect"/> should be interpreted.
            </param>
        </member>
        <member name="M:Zelda.Status.MagicFindEffect.OnEnable(Zelda.Status.Statable)">
            <summary>
            Called when this MagicFindEffect gets enabled for the given extended-statable Entity.
            </summary>
            <param name="user">
            The statable that enabled this MagicFindEffect.
            </param>
        </member>
        <member name="M:Zelda.Status.MagicFindEffect.OnDisable(Zelda.Status.Statable)">
            <summary>
            Called when this MagicFindEffect gets disabled for the given extended-statable Entity.
            </summary>
            <param name="user">
            The statable that disabled this MagicFindEffect.
            </param>
        </member>
        <member name="M:Zelda.Status.MagicFindEffect.OnChanged(Zelda.Status.Statable)">
            <summary>
            Called when this MagicFindEffect gets enabled/disabled for the given extended-statable Entity.
            </summary>
            <param name="user">
            The statable that has enabled/disabled this MagicFindEffect.
            </param>
        </member>
        <member name="M:Zelda.Status.MagicFindEffect.Clone">
            <summary>
            Returns a clone of this MagicFindEffect.
            </summary>
            <returns>
            The cloned StatusEffect.
            </returns>
        </member>
        <member name="T:Zelda.Status.MovementSpeedEffect">
            <summary>
            Defines a <see cref="T:Zelda.Status.StatusEffect"/> that modifies
            the Movement Speed of a <see cref="T:Zelda.Status.Statable"/> entity it's applied to.
            This class can't be inherited.
            </summary>
        </member>
        <member name="F:Zelda.Status.MovementSpeedEffect.IdentifierString">
            <summary>
            The string that uniquely identifies this MovementSpeedEffect.
            </summary>
        </member>
        <member name="P:Zelda.Status.MovementSpeedEffect.Identifier">
            <summary>
            Gets an unique string that represents what this <see cref="T:Zelda.Status.MovementSpeedEffect"/> manipulates.
            </summary>
        </member>
        <member name="M:Zelda.Status.MovementSpeedEffect.GetDescription(Zelda.Status.Statable)">
            <summary>
            Gets a short localised description of this <see cref="T:Zelda.Status.StatusEffect"/>.
            </summary>
            <param name="statable">
            The statable component of the entity that wants to receive the description about this StatusEffect.
            </param>
            <returns>
            The localized description string.
            </returns>
        </member>
        <member name="M:Zelda.Status.MovementSpeedEffect.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Status.MovementSpeedEffect"/> class.
            </summary>
        </member>
        <member name="M:Zelda.Status.MovementSpeedEffect.#ctor(System.Single,Zelda.Status.StatusManipType)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Status.MovementSpeedEffect"/> class.
            </summary>
            <param name="value">
            The value of the new MovementSpeedEffect.
            </param>
            <param name="manipulationType">
            Indicates how the <see cref="P:Zelda.Status.StatusValueEffect.Value"/> of the new <see cref="T:Zelda.Status.MovementSpeedEffect"/>
            should be interpreted.
            </param>
        </member>
        <member name="M:Zelda.Status.MovementSpeedEffect.OnEnable(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.MovementSpeedEffect"/> gets enabled for the given statable Entity.
            </summary>
            <param name="user">
            The statable that enabled this <see cref="T:Zelda.Status.StatusEffect"/>.
            </param>
        </member>
        <member name="M:Zelda.Status.MovementSpeedEffect.OnDisable(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.MovementSpeedEffect"/> gets disabled for the given statable Entity.
            </summary>
            <param name="user">
            The statable that disabled this <see cref="T:Zelda.Status.StatusEffect"/>.
            </param>
        </member>
        <member name="M:Zelda.Status.MovementSpeedEffect.Clone">
            <summary>
            Returns a clone of this MovementSpeedEffect.
            </summary>
            <returns>
            The cloned StatusEffect.
            </returns>
        </member>
        <member name="T:Zelda.Status.PushingForceEffect">
            <summary>
            Defines a StatusEffect that modifies the Extra Pushing Force of an <see cref="T:Zelda.Status.ExtendedStatable"/> ZeldaEntity.
            </summary>
        </member>
        <member name="F:Zelda.Status.PushingForceEffect.IdentifierString">
            <summary>
            The string that uniquely identifies this PushingForceEffect.
            </summary>
        </member>
        <member name="P:Zelda.Status.PushingForceEffect.Identifier">
            <summary>
            Gets an unique string that represents what this <see cref="T:Zelda.Status.PushingForceEffect"/> manipulates.
            </summary>
        </member>
        <member name="M:Zelda.Status.PushingForceEffect.GetDescription(Zelda.Status.Statable)">
            <summary>
            Gets a short localised description of this <see cref="T:Zelda.Status.StatusEffect"/>.
            </summary>
            <param name="statable">
            The statable component of the entity that wants to receive the description about this StatusEffect.
            </param>
            <returns>
            The localized description string.
            </returns>
        </member>
        <member name="M:Zelda.Status.PushingForceEffect.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Status.PushingForceEffect"/> class.
            </summary>
        </member>
        <member name="M:Zelda.Status.PushingForceEffect.#ctor(System.Single,Zelda.Status.StatusManipType)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Status.PushingForceEffect"/> class.
            </summary>
            <param name="value"> The manipulation value. 
            It's depending on the <see cref="T:Zelda.Status.StatusManipType"/> 
               a total value ( 10 would increase the stat by 10 ),
            or a procentual value ( 10 would increase the stat by 10% )
            </param>
            <param name="manipulationType">
            Indicates how the <paramref name="value"/> of the new <see cref="T:Zelda.Status.PushingForceEffect"/> should be interpreted.
            </param>
        </member>
        <member name="M:Zelda.Status.PushingForceEffect.OnEnable(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.PushingForceEffect"/> gets enabled for the given statable Entity.
            </summary>
            <param name="user">
            The extended-statable that enabled this <see cref="T:Zelda.Status.StatusEffect"/>.
            </param>
        </member>
        <member name="M:Zelda.Status.PushingForceEffect.OnDisable(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.PushingForceEffect"/> gets disabled for the given statable Entity.
            </summary>
            <param name="user">
            The extended-statable that disabled this <see cref="T:Zelda.Status.StatusEffect"/>.
            </param>
        </member>
        <member name="M:Zelda.Status.PushingForceEffect.Clone">
            <summary>
            Returns a clone of this PushingForceEffect.
            </summary>
            <returns>
            The cloned StatusEffect.
            </returns>
        </member>
        <member name="T:Zelda.Status.SpellHasteEffect">
            <summary>
            Defines a <see cref="T:Zelda.Status.StatusValueEffect"/> that manipulates the armor status-value 
            of a <see cref="T:Zelda.Status.Statable"/> ZeldaEntity.
            This class can't be inherited.
            </summary>
        </member>
        <member name="F:Zelda.Status.SpellHasteEffect.IdentifierString">
            <summary>
            The string that uniquely identifies this SpellHasteEffect.
            </summary>
        </member>
        <member name="P:Zelda.Status.SpellHasteEffect.Identifier">
            <summary> 
            Gets an unique string that represents what this <see cref="T:Zelda.Status.SpellHasteEffect"/> manipulates.
            </summary>
        </member>
        <member name="M:Zelda.Status.SpellHasteEffect.GetDescription(Zelda.Status.Statable)">
            <summary>
            Gets a short localised description of this <see cref="T:Zelda.Status.StatusEffect"/>.
            </summary>
            <param name="statable">
            The statable component of the entity that wants to receive the description about this StatusEffect.
            </param>
            <returns>
            The localized description string.
            </returns>
        </member>
        <member name="M:Zelda.Status.SpellHasteEffect.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Status.SpellHasteEffect"/> class.
            </summary>
        </member>
        <member name="M:Zelda.Status.SpellHasteEffect.#ctor(System.Single,Zelda.Status.StatusManipType)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Status.SpellHasteEffect"/> class.
            </summary>
            <param name="value">
            The value of the new SpellHasteEffect.
            </param>
            <param name="manipulationType">
            Indicates how the value of the new <see cref="T:Zelda.Status.StatusValueEffect"/> should be interpreted.
            </param>
        </member>
        <member name="M:Zelda.Status.SpellHasteEffect.OnEnable(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.StatusEffect"/> gets enabled for the given statable Entity.
            </summary>
            <param name="user">
            The statable that enabled this <see cref="T:Zelda.Status.StatusEffect"/>.
            </param>
        </member>
        <member name="M:Zelda.Status.SpellHasteEffect.OnDisable(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.StatusEffect"/> gets disabled for the given statable Entity.
            </summary>
            <param name="user">
            The statable that disabled this <see cref="T:Zelda.Status.StatusEffect"/>.
            </param>
        </member>
        <member name="M:Zelda.Status.SpellHasteEffect.OnChanged(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.StatusEffect"/> gets enabled/disabled for the given statable Entity.
            </summary>
            <param name="user">
            The statable that disabled this <see cref="T:Zelda.Status.StatusEffect"/>.
            </param>
        </member>
        <member name="M:Zelda.Status.SpellHasteEffect.Clone">
            <summary>
            Returns a clone of this SpellHasteEffect.
            </summary>
            <returns>
            The cloned StatusEffect.
            </returns>
        </member>
        <member name="T:Zelda.Status.SpellPenetrationEffect">
            <summary>
            The Spell Penetration stat reduces the chance for magical attacks to be resisted.
            </summary>
        </member>
        <member name="F:Zelda.Status.SpellPenetrationEffect.IdentifierString">
            <summary>
            The string that uniquely identifies this SpellPenetrationEffect.
            </summary>
        </member>
        <member name="P:Zelda.Status.SpellPenetrationEffect.Identifier">
            <summary> 
            Gets an unique string that represents what this <see cref="T:Zelda.Status.SpellPenetrationEffect"/> manipulates.
            </summary>
        </member>
        <member name="M:Zelda.Status.SpellPenetrationEffect.GetDescription(Zelda.Status.Statable)">
            <summary>
            Gets a short localised description of this <see cref="T:Zelda.Status.StatusEffect"/>.
            </summary>
            <param name="statable">
            The statable component of the entity that wants to receive the description about this StatusEffect.
            </param>
            <returns>
            The localized description string.
            </returns>
        </member>
        <member name="M:Zelda.Status.SpellPenetrationEffect.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Status.SpellPenetrationEffect"/> class.
            </summary>
        </member>
        <member name="M:Zelda.Status.SpellPenetrationEffect.#ctor(System.Single,Zelda.Status.StatusManipType)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Status.SpellPenetrationEffect"/> class.
            </summary>
            <param name="value">
            The value of the new MagicPenetrationEffect.
            </param>
            <param name="manipulationType">
            Indicates how the value of the new <see cref="T:Zelda.Status.StatusValueEffect"/> should be interpreted.
            </param>
        </member>
        <member name="M:Zelda.Status.SpellPenetrationEffect.OnEnable(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.StatusEffect"/> gets enabled for the given statable Entity.
            </summary>
            <param name="user">
            The statable that enabled this <see cref="T:Zelda.Status.StatusEffect"/>.
            </param>
        </member>
        <member name="M:Zelda.Status.SpellPenetrationEffect.OnDisable(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.StatusEffect"/> gets disabled for the given statable Entity.
            </summary>
            <param name="user">
            The statable that disabled this <see cref="T:Zelda.Status.StatusEffect"/>.
            </param>
        </member>
        <member name="M:Zelda.Status.SpellPenetrationEffect.OnChanged(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.StatusEffect"/> gets enabled/disabled for the given statable Entity.
            </summary>
            <param name="user">
            The statable that disabled this <see cref="T:Zelda.Status.StatusEffect"/>.
            </param>
        </member>
        <member name="M:Zelda.Status.SpellPenetrationEffect.Clone">
            <summary>
            Returns a clone of this MagicPenetrationEffect.
            </summary>
            <returns>
            The cloned StatusEffect.
            </returns>
        </member>
        <member name="T:Zelda.Status.SpellPowerEffect">
            <summary>
            Defines a <see cref="T:Zelda.Status.StatusValueEffect"/> that manipulates the power of a spell school
            of a <see cref="T:Zelda.Status.ExtendedStatable"/> ZeldaEntity.
            This class can't be inherited.
            </summary>
        </member>
        <member name="F:Zelda.Status.SpellPowerEffect.IdentifierAll">
            <summary>
            The manipulation name that uniquely identifies the StatusEffects that manipulate the power of all spells.
            </summary>
        </member>
        <member name="F:Zelda.Status.SpellPowerEffect.IdentifierFire">
            <summary>
            The manipulation name that uniquely identifies the StatusEffects that manipulate the power of Fire spells.
            </summary>
        </member>
        <member name="F:Zelda.Status.SpellPowerEffect.IdentifierWater">
            <summary>
            The manipulation name that uniquely identifies the StatusEffects that manipulate the power of Water spells.
            </summary>
        </member>
        <member name="F:Zelda.Status.SpellPowerEffect.IdentifierNature">
            <summary>
            The manipulation name that uniquely identifies the StatusEffects that manipulate the power of Nature spells.
            </summary>
        </member>
        <member name="F:Zelda.Status.SpellPowerEffect.IdentifierShadow">
            <summary>
            The manipulation name that uniquely identifies the StatusEffects that manipulate the power of Shadow spells.
            </summary>
        </member>
        <member name="F:Zelda.Status.SpellPowerEffect.IdentifierLight">
            <summary>
            The manipulation name that uniquely identifies the StatusEffects that manipulate the power of Light spells.
            </summary>
        </member>
        <member name="M:Zelda.Status.SpellPowerEffect.GetManipulationString(Zelda.Status.ElementalSchool)">
            <summary>
            Gets the manipulation string used by the SpellPowerEffect for the given ElementSchool.
            </summary>
            <param name="school">
            The element school.
            </param>
            <returns>
            An unique string.
            </returns>
        </member>
        <member name="P:Zelda.Status.SpellPowerEffect.Identifier">
            <summary> 
            Gets an unique string that represents what this <see cref="T:Zelda.Status.StatusEffect"/> manipulates.
            </summary>
        </member>
        <member name="P:Zelda.Status.SpellPowerEffect.SpellSchool">
            <summary>
            Gets or sets what kind of spell power is manipulated by this <see cref="T:Zelda.Status.SpellPowerEffect"/>.
            </summary>
        </member>
        <member name="M:Zelda.Status.SpellPowerEffect.GetDescription(Zelda.Status.Statable)">
            <summary>
            Gets a short localised description of this <see cref="T:Zelda.Status.StatusEffect"/>.
            </summary>
            <param name="statable">
            The statable component of the entity that wants to receive the description about this StatusEffect.
            </param>
            <returns>
            The localized description string.
            </returns>
        </member>
        <member name="M:Zelda.Status.SpellPowerEffect.GetDefineDescription">
            <summary>
            Gets a localized string the defines what this Spell Power Effect increases.
            </summary>
            <returns>
            A localiued string for the current SpellSchool.
            </returns>
        </member>
        <member name="M:Zelda.Status.SpellPowerEffect.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Status.SpellPowerEffect"/> class.
            </summary>
        </member>
        <member name="M:Zelda.Status.SpellPowerEffect.#ctor(System.Single,Zelda.Status.StatusManipType,Zelda.Status.ElementalSchool)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Status.SpellPowerEffect"/> class.
            </summary>
            <param name="value">
            The value of the new SpellPowerEffect.
            </param>
            <param name="manipulationType">
            The manipulation type of value of the new SpellPowerEffect.
            </param>
            <param name="spellSchool">
            The ElementalSchool the new SpellPowerEffect should affect.
            </param>
        </member>
        <member name="M:Zelda.Status.SpellPowerEffect.OnEnable(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.SpellPowerEffect"/> gets enabled for the given extended-sstatable Entity.
            </summary>
            <param name="user">
            The statable that enabled this <see cref="T:Zelda.Status.StatusEffect"/>.
            </param>
        </member>
        <member name="M:Zelda.Status.SpellPowerEffect.OnDisable(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.SpellPowerEffect"/> gets disabled for the given extended-statable Entity.
            </summary>
            <param name="user">
            The statable that disabled this <see cref="T:Zelda.Status.StatusEffect"/>.
            </param>
        </member>
        <member name="M:Zelda.Status.SpellPowerEffect.OnStateChange(Zelda.Status.ExtendedStatable)">
            <summary>
            Called when the Enabled/Disabled state of this SpellPowerEffect has changed for the given extended-statable Entity.
            </summary>
            <param name="user">
            The extended-statable that disabled this <see cref="T:Zelda.Status.StatusEffect"/>.
            </param>
        </member>
        <member name="M:Zelda.Status.SpellPowerEffect.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Status.SpellPowerEffect.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Status.SpellPowerEffect.Clone">
            <summary>
            Returns a clone of this SpellPowerEffect.
            </summary>
            <returns>
            The cloned StatusEffect.
            </returns>
        </member>
        <member name="T:Zelda.Status.StatEffect">
            <summary>
            Defines a <see cref="T:Zelda.Status.StatusValueEffect"/> that manipulates a <see cref="P:Zelda.Status.StatEffect.Stat"/>
            of a <see cref="T:Zelda.Status.ExtendedStatable"/> ZeldaEntity.
            This class can't be inherited.
            </summary>
        </member>
        <member name="F:Zelda.Status.StatEffect.IdentifierStrength">
            <summary>
            The manipulation name that uniquely identifies the StatusEffects that manipulate the Strength stat.
            </summary>
        </member>
        <member name="F:Zelda.Status.StatEffect.IdentifierDexterity">
            <summary>
            The manipulation name that uniquely identifies the StatusEffects that manipulate the Dexterity stat.
            </summary>
        </member>
        <member name="F:Zelda.Status.StatEffect.IdentifierAgility">
            <summary>
            The manipulation name that uniquely identifies the StatusEffects that manipulate the Agility stat.
            </summary>
        </member>
        <member name="F:Zelda.Status.StatEffect.IdentifierVitality">
            <summary>
            The manipulation name that uniquely identifies the StatusEffects that manipulate the Vitality stat.
            </summary>
        </member>
        <member name="F:Zelda.Status.StatEffect.IdentifierIntelligence">
            <summary>
            The manipulation name that uniquely identifies the StatusEffects that manipulate the Intelligence stat.
            </summary>
        </member>
        <member name="F:Zelda.Status.StatEffect.IdentifierLuck">
            <summary>
            The manipulation name that uniquely identifies the StatusEffects that manipulate the Luck stat.
            </summary>
        </member>
        <member name="P:Zelda.Status.StatEffect.Identifier">
            <summary> 
            Gets an unique string that represents what this <see cref="T:Zelda.Status.StatusEffect"/> manipulates.
            </summary>
        </member>
        <member name="P:Zelda.Status.StatEffect.Stat">
            <summary>
            Gets or sets what <see cref="P:Zelda.Status.StatEffect.Stat"/> is manipulated by this <see cref="T:Zelda.Status.StatEffect"/>.
            </summary>
        </member>
        <member name="M:Zelda.Status.StatEffect.GetDescription(Zelda.Status.Statable)">
            <summary>
            Gets a short localised description of this <see cref="T:Zelda.Status.StatusEffect"/>.
            </summary>
            <param name="statable">
            The statable component of the entity that wants to receive the description about this StatusEffect.
            </param>
            <returns>
            The localized description string.
            </returns>
        </member>
        <member name="M:Zelda.Status.StatEffect.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Status.StatEffect"/> class.
            </summary>
        </member>
        <member name="M:Zelda.Status.StatEffect.#ctor(System.Single,Zelda.Status.StatusManipType,Zelda.Status.Stat)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Status.StatEffect"/> class.
            </summary>
            <param name="value"> 
            The value of the new StatEffect.
            </param>
            <param name="manipulationType">
            States how the value of the new StatEffect should be interpreted.
            </param>
            <param name="stat">
            The <see cref="P:Zelda.Status.StatEffect.Stat"/> the new StatEffect manipulates.
            </param>
        </member>
        <member name="M:Zelda.Status.StatEffect.OnEnable(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.StatEffect"/> gets enabled for the given extended-sstatable Entity.
            </summary>
            <param name="user">
            The statable that enabled this <see cref="T:Zelda.Status.StatusEffect"/>.
            </param>
        </member>
        <member name="M:Zelda.Status.StatEffect.OnDisable(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.StatEffect"/> gets disabled for the given extended-statable Entity.
            </summary>
            <param name="user">
            The statable that disabled this <see cref="T:Zelda.Status.StatusEffect"/>.
            </param>
        </member>
        <member name="M:Zelda.Status.StatEffect.OnStateChange(Zelda.Status.ExtendedStatable)">
            <summary>
            Called when the Enabled/Disabled state of this StatEffect has changed for the given extended-statable Entity.
            </summary>
            <param name="user">
            The extended-statable that disabled this <see cref="T:Zelda.Status.StatusEffect"/>.
            </param>
        </member>
        <member name="M:Zelda.Status.StatEffect.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Status.StatEffect.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Status.StatEffect.Clone">
            <summary>
            Returns a clone of this StatEffect.
            </summary>
            <returns>
            The cloned StatusEffect.
            </returns>
        </member>
        <member name="F:Zelda.Status.StatEffect.stat">
            <summary>
            The stat that is manipulated by this StatEffect.
            </summary>
        </member>
        <member name="F:Zelda.Status.StatEffect.FormatPositive">
            <summary>
            Caches the <see cref="P:Zelda.Resources.ED_Pos"/> string.
            </summary>
        </member>
        <member name="F:Zelda.Status.StatEffect.FormatNegative">
            <summary>
            Caches the <see cref="P:Zelda.Resources.ED_Neg"/> string.
            </summary>
        </member>
        <member name="F:Zelda.Status.StatEffect.FormatPositivePercentage">
            <summary>
            Caches the <see cref="P:Zelda.Resources.ED_PosPercentage"/> string.
            </summary>
        </member>
        <member name="F:Zelda.Status.StatEffect.FormatNegativePercentage">
            <summary>
            Caches the <see cref="P:Zelda.Resources.ED_NegPercentage"/> string.
            </summary>
        </member>
        <member name="T:Zelda.Status.StatusEffect">
            <summary>
            Defines the abstract base class of all StatusEffects that manipulate a <see cref="T:Zelda.Status.Statable"/> ZeldaEntity.
            </summary>
            <remarks>
            <para>
            StatusEffects aren't bound to a specific entity, but are globally shared among all <see cref="T:Zelda.Status.Statable"/> entities.
            We use this system because StatusEffects are designed to be modified only during design time.
            </para>
            <para>
            StatusEffect are applied to a statable Entity by adding 
            them within an <see cref="T:Zelda.Status.Aura"/> to the <see cref="T:Zelda.Status.AuraList"/> of the statable entity.
            </para>
            </remarks>
        </member>
        <member name="P:Zelda.Status.StatusEffect.Identifier">
            <summary> 
            Gets an unique string that represents what this <see cref="T:Zelda.Status.StatusEffect"/> manipulates.
            </summary>
            <remarks>
            The Manipulates value is looked at when an <see cref="T:Zelda.Status.AuraList"/> 
            chooses to find all StatusEffects that apply to one specific kind of status.
            Examples would be "Strength", "Crit" or "AtkSpd".
            </remarks>
        </member>
        <member name="M:Zelda.Status.StatusEffect.GetDescription(Zelda.Status.Statable)">
            <summary>
            Gets a short localised description of this <see cref="T:Zelda.Status.StatusEffect"/>.
            </summary>
            <param name="statable">
            The statable component of the entity that wants to receive the description about this StatusEffect.
            </param>
            <returns>
            The localized description string.
            </returns>
        </member>
        <member name="P:Zelda.Status.StatusEffect.DebuffFlags">
            <summary>
            Gets or sets the <see cref="P:Zelda.Status.StatusEffect.DebuffFlags"/> of this <see cref="T:Zelda.Status.StatusEffect"/>.
            </summary>
        </member>
        <member name="P:Zelda.Status.StatusEffect.IsDebuff">
            <summary>
            Gets a value indicating whether this <see cref="T:Zelda.Status.StatusEffect"/> is a debuff.
            </summary>
        </member>
        <member name="P:Zelda.Status.StatusEffect.IsBad">
            <summary>
            Gets a value indicating whether this StatusEffect is 'bad' for the statable ZeldaEntity.
            </summary>
            <value>The default value is false.</value>
        </member>
        <member name="P:Zelda.Status.StatusEffect.IsUseless">
            <summary>
            Gets a value indicating whether this StatusEffect has no actual effect.
            </summary>
        </member>
        <member name="M:Zelda.Status.StatusEffect.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Status.StatusEffect"/> class.
            </summary>
        </member>
        <member name="M:Zelda.Status.StatusEffect.#ctor(Zelda.Status.DebuffFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Status.StatusEffect"/> class.
            </summary>
            <param name="debuffFlags">
            Descripes what debuffs the new <see cref="T:Zelda.Status.StatusEffect"/> applies.
            </param>
        </member>
        <member name="M:Zelda.Status.StatusEffect.OnEnable(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.StatusEffect"/> gets enabled for the given statable Entity.
            </summary>
            <param name="user">
            The statable that enabled this <see cref="T:Zelda.Status.StatusEffect"/>.
            </param>
        </member>
        <member name="M:Zelda.Status.StatusEffect.OnDisable(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.StatusEffect"/> gets disabled for the given statable Entity.
            </summary>
            <param name="user">
            The statable that disabled this <see cref="T:Zelda.Status.StatusEffect"/>.
            </param>
        </member>
        <member name="M:Zelda.Status.StatusEffect.Equals(Zelda.Status.StatusEffect)">
            <summary>
            Gets a value indicating whether the given StatusEffect is 'equal' to this StatusEffect.
            </summary>
            <param name="effect">
            The StatusEffect to compare with this.
            </param>
            <returns>
            Returns true if they capture the same 'concept';
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Status.StatusEffect.ModifyPowerBy(System.Single)">
            <summary>
            Modifies the power of this StatusEffect by the given factor.
            </summary>
            <param name="factor">
            The factor to change this StatusEffect by.
            </param>
        </member>
        <member name="M:Zelda.Status.StatusEffect.Clone">
            <summary>
            Returns a clone of this StatusEffect.
            </summary>
            <returns>
            The cloned StatusEffect.
            </returns>
        </member>
        <member name="M:Zelda.Status.StatusEffect.SetupClone(Zelda.Status.StatusEffect)">
            <summary>
            Setups the given StatusEffect to be a clone of this StatusEffect.
            </summary>
            <param name="clone">
            The StatusEffect to setup as a clone of this StatusEffect.
            </param>
        </member>
        <member name="M:Zelda.Status.StatusEffect.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <remarks>
            This method should be called first when overriding this method
            in a sub-class. It writes the global header of the StatusEffect.
            </remarks>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Status.StatusEffect.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <remarks>
            This method should be called first when overriding this method
            in a sub-class. It reads the global header/data of the StatusEffect.
            </remarks>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="T:Zelda.Status.StatusValueEffect">
            <summary>
            A <see cref="T:Zelda.Status.StatusValueEffect"/> is a <see cref="T:Zelda.Status.StatusEffect"/> which manipulates a
            status-value of a <see cref="T:Zelda.Status.Statable"/> ZeldaEntity.
            </summary>
            <remarks>
            This class is the base class of most actual StatusEffect.
            </remarks>
        </member>
        <member name="P:Zelda.Status.StatusValueEffect.ManipulationType">
            <summary>
            Gets or sets a value that indicates how the <see cref="P:Zelda.Status.StatusValueEffect.Value"/> of this <see cref="T:Zelda.Status.StatusValueEffect"/> should be interpreted.
            </summary>
        </member>
        <member name="P:Zelda.Status.StatusValueEffect.Value">
            <summary> 
            Gets or sets the value of this <see cref="T:Zelda.Status.StatusValueEffect"/> .
            </summary>
        </member>
        <member name="P:Zelda.Status.StatusValueEffect.IsBad">
            <summary>
            Gets a value indicating whether this StatusEffect is 'bad' for the statable ZeldaEntity.
            </summary>
        </member>
        <member name="P:Zelda.Status.StatusValueEffect.IsUseless">
            <summary>
            Gets a value indicating whether this StatusEffect has no actual effect.
            </summary>
        </member>
        <member name="M:Zelda.Status.StatusValueEffect.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Status.StatusValueEffect"/> class.
            </summary>
        </member>
        <member name="M:Zelda.Status.StatusValueEffect.#ctor(System.Single,Zelda.Status.StatusManipType)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Status.StatusValueEffect"/> class.
            </summary>
            <param name="value"> The manipulation value. 
            It's depending on the <see cref="T:Zelda.Status.StatusManipType"/> 
               a total value ( 10 would increase the stat by 10 ),
            or a procentual value ( 10 would increase the stat by 10% )
            </param>
            <param name="manipulationType">
            Indicates how the <see cref="P:Zelda.Status.StatusValueEffect.Value"/> of the new <see cref="T:Zelda.Status.StatusValueEffect"/> should be interpreted.
            </param>
        </member>
        <member name="M:Zelda.Status.StatusValueEffect.#ctor(System.Single,Zelda.Status.StatusManipType,Zelda.Status.DebuffFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Status.StatusValueEffect"/> class.
            </summary>
            <param name="value"> The manipulation value. 
            It's depending on the <see cref="T:Zelda.Status.StatusManipType"/> 
               a total value ( 10 would increase the stat by 10 ),
            or a procentual value ( 10 would increase the stat by 10% )
            </param>
            <param name="manipulationType">
            Indicates how the <see cref="P:Zelda.Status.StatusValueEffect.Value"/> of the new <see cref="T:Zelda.Status.StatusValueEffect"/> should be interpreted.
            </param>
            <param name="debuffFlags"> The debuff flags of this effect. </param>
        </member>
        <member name="M:Zelda.Status.StatusValueEffect.ModifyPowerBy(System.Single)">
            <summary>
            Modifies the power of this StatusEffect by the given factor.
            </summary>
            <param name="factor">
            The factor to change this StatusEffect by.
            </param>
        </member>
        <member name="M:Zelda.Status.StatusValueEffect.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Status.StatusValueEffect.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Status.StatusValueEffect.Equals(Zelda.Status.StatusEffect)">
            <summary>
            Gets a value indicating whether the given StatusEffect is 'equal' to this StatusValueEffect.
            </summary>
            <param name="effect">
            The StatusValueEffect to compare with this.
            </param>
            <returns>
            Returns true if both the ManipulationType and Manipulates are equal;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Status.StatusValueEffect.SetupClone(Zelda.Status.StatusValueEffect)">
            <summary>
            Setups the given StatusValueEffect to be a clone of this StatusValueEffect.
            </summary>
            <param name="clone">
            The StatusValueEffect to setup as a clone of this StatusValueEffect.
            </param>
        </member>
        <member name="T:Zelda.Status.WeaponDamageTypeBasedEffect">
            <summary>
            Defines a <see cref="T:Zelda.Status.StatusValueEffect"/> that manipulates how much damage
            the <see cref="T:Zelda.Status.Statable"/> ZeldaEntity does with a specific type of weapon.
            This class can't be inherited.
            </summary>
            <seealso cref="P:Zelda.Status.WeaponDamageTypeBasedEffect.WeaponType"/>
        </member>
        <member name="F:Zelda.Status.WeaponDamageTypeBasedEffect.IdentifierDagger">
            <summary>
            The strings that uniquely identify the WeaponDamageTypeBasedEffect.
            </summary>
        </member>
        <member name="F:Zelda.Status.WeaponDamageTypeBasedEffect.IdentifierOneHandedSword">
            <summary>
            The strings that uniquely identify the WeaponDamageTypeBasedEffect.
            </summary>
        </member>
        <member name="F:Zelda.Status.WeaponDamageTypeBasedEffect.IdentifierTwoHandedSword">
            <summary>
            The strings that uniquely identify the WeaponDamageTypeBasedEffect.
            </summary>
        </member>
        <member name="F:Zelda.Status.WeaponDamageTypeBasedEffect.IdentifierBow">
            <summary>
            The strings that uniquely identify the WeaponDamageTypeBasedEffect.
            </summary>
        </member>
        <member name="F:Zelda.Status.WeaponDamageTypeBasedEffect.IdentifierCrossbow">
            <summary>
            The strings that uniquely identify the WeaponDamageTypeBasedEffect.
            </summary>
        </member>
        <member name="M:Zelda.Status.WeaponDamageTypeBasedEffect.GetIdentifier(Zelda.Items.WeaponType)">
            <summary>
            Gets the manpulation name that identifies the WeaponDamageTypeBasedEffect
            for the given WeaponType.
            </summary>
            <param name="weaponType">
            The input WeaponType.
            </param>
            <returns>
            The unique manipulation string.
            </returns>
        </member>
        <member name="P:Zelda.Status.WeaponDamageTypeBasedEffect.Identifier">
            <summary> 
            Gets an unique string that represents what this <see cref="T:Zelda.Status.WeaponDamageTypeBasedEffect"/> manipulates.
            </summary>
        </member>
        <member name="P:Zelda.Status.WeaponDamageTypeBasedEffect.WeaponType">
            <summary>
            Gets or sets what <see cref="P:Zelda.Status.WeaponDamageTypeBasedEffect.WeaponType"/> this <see cref="T:Zelda.Status.WeaponDamageTypeBasedEffect"/> modifies.
            </summary>
        </member>
        <member name="M:Zelda.Status.WeaponDamageTypeBasedEffect.GetDescription(Zelda.Status.Statable)">
            <summary>
            Gets a short localised description of this <see cref="T:Zelda.Status.StatusEffect"/>.
            </summary>
            <param name="statable">
            The statable component of the entity that wants to receive the description about this StatusEffect.
            </param>
            <returns>
            The localized description string.
            </returns>
        </member>
        <member name="M:Zelda.Status.WeaponDamageTypeBasedEffect.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Status.WeaponDamageTypeBasedEffect"/> class.
            </summary>
        </member>
        <member name="M:Zelda.Status.WeaponDamageTypeBasedEffect.#ctor(System.Single,Zelda.Status.StatusManipType,Zelda.Items.WeaponType)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Status.WeaponDamageTypeBasedEffect"/> class.
            </summary>
            <param name="value">
            The modification value of the new WeaponDamageTypeBasedEffect.
            </param>
            <param name="manipulationType">
            The manipulation type of the new WeaponDamageTypeBasedEffect.
            </param>
            <param name="weaponType">
            States what kind of weapon the new WeaponDamageTypeBasedEffect modifies.
            </param>
        </member>
        <member name="M:Zelda.Status.WeaponDamageTypeBasedEffect.OnEnable(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.WeaponDamageTypeBasedEffect"/> gets enabled for the given statable Entity.
            </summary>
            <param name="user">
            The statable that enabled this <see cref="T:Zelda.Status.WeaponDamageTypeBasedEffect"/>.
            </param>
        </member>
        <member name="M:Zelda.Status.WeaponDamageTypeBasedEffect.OnDisable(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.WeaponDamageTypeBasedEffect"/> gets disabled for the given statable Entity.
            </summary>
            <param name="user">
            The statable that disabled this <see cref="T:Zelda.Status.StatusEffect"/>.
            </param>
        </member>
        <member name="M:Zelda.Status.WeaponDamageTypeBasedEffect.OnChanged(Zelda.Status.ExtendedStatable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.WeaponDamageTypeBasedEffect"/> gets enabled or disabled for the given Statable Entity.
            </summary>
            <param name="user">
            The related statable.
            </param>
        </member>
        <member name="M:Zelda.Status.WeaponDamageTypeBasedEffect.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Status.WeaponDamageTypeBasedEffect.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Status.WeaponDamageTypeBasedEffect.Clone">
            <summary>
            Returns a clone of this WeaponDamageTypeBasedEffect.
            </summary>
            <returns>
            The cloned StatusEffect.
            </returns>
        </member>
        <member name="T:Zelda.Status.ChanceToStatus">
            <summary>
            Enumerates the different chance-to status values.
            </summary>
        </member>
        <member name="F:Zelda.Status.ChanceToStatus.None">
            <summary>
            No specific ChanceToStatus.
            </summary>
        </member>
        <member name="F:Zelda.Status.ChanceToStatus.Crit">
            <summary>
            A critical strike gives bonus damage.
            </summary>
        </member>
        <member name="F:Zelda.Status.ChanceToStatus.CritHeal">
            <summary>
            A critical heal provides bonus healing.
            </summary>
        </member>
        <member name="F:Zelda.Status.ChanceToStatus.Dodge">
            <summary>
            Melee and Ranged Attacks can be doged.
            </summary>
        </member>
        <member name="F:Zelda.Status.ChanceToStatus.Miss">
            <summary>
            Melee and Ranged Attacks can miss.
            </summary>
        </member>
        <member name="F:Zelda.Status.ChanceToStatus.Block">
            <summary>
            Melee and Ranged attacks can be blocked.
            </summary>
        </member>
        <member name="F:Zelda.Status.ChanceToStatus.Parry">
            <summary>
            Melee attacks can be parried.
            </summary>
        </member>
        <member name="F:Zelda.Status.ChanceToStatus.Pierce">
            <summary>
            Ranged attacks can pierce their target.
            </summary>
        </member>
        <member name="F:Zelda.Status.ChanceToStatus.CritBlock">
            <summary>
            A critical block provides additional block value.
            </summary>
        </member>
        <member name="T:Zelda.Status.DebuffFlags">
            <summary>
            Enumates the different types of debuffs.
            </summary>
        </member>
        <member name="F:Zelda.Status.DebuffFlags.None">
            <summary>
            Indicates that there is no debuff.
            </summary>
        </member>
        <member name="F:Zelda.Status.DebuffFlags.Immobilize">
            <summary>
            Movement is no possible under this effect.
            </summary>
        </member>
        <member name="F:Zelda.Status.DebuffFlags.Slow">
            <summary>
            Movement is slowed down under this effect.
            </summary>
        </member>
        <member name="F:Zelda.Status.DebuffFlags.Disease">
            <summary>
            A disease, may get worse over time.
            </summary>
        </member>
        <member name="F:Zelda.Status.DebuffFlags.Curse">
            <summary>
            An evil curse.
            </summary>
        </member>
        <member name="F:Zelda.Status.DebuffFlags.Poisoned">
            <summary>
            A poison, damaging over time.
            </summary>
        </member>
        <member name="F:Zelda.Status.DebuffFlags.Burning">
            <summary>
            Burns, damaging over time.
            </summary>
        </member>
        <member name="T:Zelda.Status.ElementalSchool">
            <summary>
            Enumerates the different schools of elemental magic.
            </summary>
        </member>
        <member name="F:Zelda.Status.ElementalSchool.None">
            <summary>
            No element.
            </summary>
        </member>
        <member name="F:Zelda.Status.ElementalSchool.Light">
            <summary>
            The light element.
            </summary>
        </member>
        <member name="F:Zelda.Status.ElementalSchool.Shadow">
            <summary>
            The shadow element.
            </summary>
        </member>
        <member name="F:Zelda.Status.ElementalSchool.Fire">
            <summary>
            The fire element.
            </summary>
        </member>
        <member name="F:Zelda.Status.ElementalSchool.Water">
            <summary>
            The water element.
            </summary>
        </member>
        <member name="F:Zelda.Status.ElementalSchool.Nature">
            <summary>
            The nature element; includes poisons.
            </summary>
        </member>
        <member name="F:Zelda.Status.ElementalSchool.All">
            <summary>
            Represents all elemental schools at the same time.
            </summary>
        </member>
        <member name="T:Zelda.Status.LifeMana">
            <summary>
            Enumerates the two power resources in the game.
            </summary>
        </member>
        <member name="F:Zelda.Status.LifeMana.Life">
            <summary>
            The health points.
            </summary>
        </member>
        <member name="F:Zelda.Status.LifeMana.Mana">
            <summary>
            The mana points.
            </summary>
        </member>
        <member name="F:Zelda.Status.LifeMana.Both">
            <summary>
            Represents both life and mana at the same time.
            </summary>
        </member>
        <member name="T:Zelda.Status.RaceType">
            <summary>
            Enumerates the different 'races' in the world.
            </summary>
        </member>
        <member name="F:Zelda.Status.RaceType.Human">
            <summary>
            A normal humanoide.
            </summary>
        </member>
        <member name="F:Zelda.Status.RaceType.DemiHuman">
            <summary>
            A demon-like humanoide.
            </summary>
        </member>
        <member name="F:Zelda.Status.RaceType.Undead">
            <summary>
            Undead enemies usually take high damage from Holy attacks.
            </summary>
        </member>
        <member name="F:Zelda.Status.RaceType.Plant">
            <summary> 
            Normal beasts. 
            Usually have very high armor but low health.
            </summary>
        </member>
        <member name="F:Zelda.Status.RaceType.Fairy">
            <summary>
            The Fairy race type includes Fairy and Ghost type entities.
            </summary>
        </member>
        <member name="F:Zelda.Status.RaceType.Beast">
            <summary> 
            Normal beasts.
            </summary>
        </member>
        <member name="F:Zelda.Status.RaceType.DemiBeast">
            <summary>
            Demon-like beasts. Usually holy magic deals increased damage.
            </summary>
        </member>
        <member name="F:Zelda.Status.RaceType.Slime">
            <summary>
            Slime-like enemis usually do nature damage.
            </summary>
        </member>
        <member name="F:Zelda.Status.RaceType.Machine">
            <summary>
            Machine type monster usually can't get poisoned.
            </summary>
        </member>
        <member name="F:Zelda.Status.RaceType.Demon">
            <summary>
            Demon-type monsters.
            </summary>
        </member>
        <member name="T:Zelda.Status.Stat">
            <summary>
            Enumerates the different (main) Stats used by the Status system.
            </summary>
        </member>
        <member name="F:Zelda.Status.Stat.None">
            <summary> No specific stat. </summary>
        </member>
        <member name="F:Zelda.Status.Stat.Strength">
            <summary>
            Strength increases Melee Attack Power (MAP),
            and to a small amount how much damage may be blocked by the shield.
            </summary>
        </member>
        <member name="F:Zelda.Status.Stat.Dexterity">
            <summary> 
            Dexterity increases Ranged Attack Power (RAP),
            the hit chance, to a small part also Melee Attack Power,
            and reduces the cast-time of spell.
            </summary>
        </member>
        <member name="F:Zelda.Status.Stat.Agility">
            <summary> 
            Agility increases Chance To Dodge, Melee and Ranged Attack Speed
            and to a small part Armor.
            </summary>
        </member>
        <member name="F:Zelda.Status.Stat.Vitality">
            <summary> 
            Vitality increases Life Points, the Life Point Regeneration
            and also increases the chance to resist status changing StatusEffects.
            </summary>
        </member>
        <member name="F:Zelda.Status.Stat.Intelligence">
            <summary> 
            Intelligence increases Magical Attack Power (MagAP), the amount of Mana, and Mana Regeneration.
            </summary>
        </member>
        <member name="F:Zelda.Status.Stat.Luck">
            <summary> 
            Luck increases the chance to get a Critical Attack and the chance to find rare items.
            </summary>
        </member>
        <member name="T:Zelda.Status.StatusManipType">
            <summary>
            The type of a <see cref="T:Zelda.Status.StatusValueEffect"/>. 
            </summary>
            <remarks>
            (base value+additive effect+additive effect+...) * (multiplicative effect+multiplicative effect+...)
            </remarks>
        </member>
        <member name="F:Zelda.Status.StatusManipType.Fixed">
            <summary>
            A fixed status value.
            </summary>
        </member>
        <member name="F:Zelda.Status.StatusManipType.Percental">
            <summary>
            A percentual increase of the total <see cref="F:Zelda.Status.StatusManipType.Fixed"/> value.
            </summary>
        </member>
        <member name="F:Zelda.Status.StatusManipType.Rating">
            <summary>
            A rating value is converted into a <see cref="F:Zelda.Status.StatusManipType.Fixed"/> value by
            scaling it up or down related to the <see cref="P:Zelda.Status.Statable.Level"/>.
            </summary>
            <seealso cref="T:Zelda.Status.StatusCalc"/>
        </member>
        <member name="T:Zelda.Status.ExtendedStatable">
            <summary>
            Defines a <see cref="T:Zelda.Status.Statable"/> that provides extended functionallity.
            </summary>
            <remarks>
            This component is currently only used by the PlayerEntity,
            all other statable entities use the simpler Statable component.
            </remarks>
        </member>
        <member name="F:Zelda.Status.ExtendedStatable.InitialFreeStatPoints">
            <summary>
            The initial number of free stat points an extended-statable ZeldaEntity has.
            </summary>
        </member>
        <member name="E:Zelda.Status.ExtendedStatable.LevelUped">
            <summary>
            Fired when the extended-statable ZeldaEntity
            has received a level-up.
            </summary>
        </member>
        <member name="E:Zelda.Status.ExtendedStatable.ExperienceGained">
            <summary>
            Fired when the extended-statable ZeldaEntity
            has gained experience.
            </summary>
        </member>
        <member name="E:Zelda.Status.ExtendedStatable.AgilityUpdated">
            <summary>
            Called when the total <see cref="P:Zelda.Status.ExtendedStatable.Agility"/> of the 
            extended-statable ZeldaEntity has been refreshed.
            </summary>
        </member>
        <member name="P:Zelda.Status.ExtendedStatable.SpellPower">
            <summary>
            Gets the container that manages and stores the spell power properties of this ExtendedStatable.
            </summary>
        </member>
        <member name="P:Zelda.Status.ExtendedStatable.DamageDone">
            <summary>
            Gets the container that manages and stores the damage done properties of this ExtendedStatable.
            </summary>
        </member>
        <member name="P:Zelda.Status.ExtendedStatable.ChanceTo">
            <summary>
            Gets the object that encapsulates various
            chance-to properties of this ExtendedStatable.
            </summary>
        </member>
        <member name="P:Zelda.Status.ExtendedStatable.ChanceToBe">
            <summary>
            Gets the object that encapsulates various
            chance-to-be properties of this ExtendedStatable.
            </summary>
        </member>
        <member name="P:Zelda.Status.ExtendedStatable.EquipmentSlotStatModifiers">
            <summary>
            Gets the container that encapuslates the stat modifiers that are applied to the stats
            given from items with a specific <see cref="T:Zelda.Items.EquipmentSlot"/>.
            </summary>
        </member>
        <member name="P:Zelda.Status.ExtendedStatable.Rubies">
            <summary>
            Gets or sets the number of rubies the extended statable ZeldaEntity has.
            </summary>
        </member>
        <member name="P:Zelda.Status.ExtendedStatable.Experience">
            <summary>
            Gets the experience of the extended-statable <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
        </member>
        <member name="P:Zelda.Status.ExtendedStatable.ExperienceNeeded">
            <summary>
            Gets the experience needed by the extended-statable <see cref="T:Zelda.Entities.ZeldaEntity"/> to level-up.
            </summary>
        </member>
        <member name="P:Zelda.Status.ExtendedStatable.FreeStatPoints">
            <summary>
            Gets the number of stat points that haven't been invested by the extended-statable <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
        </member>
        <member name="P:Zelda.Status.ExtendedStatable.TotalStatPoints">
            <summary>
            Gets the number of stat points that have been awarded to the player so far.
            </summary>
        </member>
        <member name="P:Zelda.Status.ExtendedStatable.Level">
            <summary>
            Gets or sets the level of the extended-statable <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
        </member>
        <member name="P:Zelda.Status.ExtendedStatable.SharedCooldowns">
            <summary>
            Gets the <see cref="T:Zelda.SharedCooldownMap"/> which stores the shared <see cref="T:Zelda.Cooldown"/>s 
            corresponding to the extended-statable <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
        </member>
        <member name="P:Zelda.Status.ExtendedStatable.Equipment">
            <summary>
            Gets the <see cref="T:Zelda.Items.EquipmentStatus"/> of the extended-statable <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
        </member>
        <member name="P:Zelda.Status.ExtendedStatable.PushingForceMultiplicative">
            <summary>
            Gets the value that is multiplicated with the final pushing force of an attack.
            </summary>
        </member>
        <member name="P:Zelda.Status.ExtendedStatable.PushingForceAdditive">
            <summary>
            Gets the value that is added to the final pushing force of an attack.
            </summary>
        </member>
        <member name="P:Zelda.Status.ExtendedStatable.MagicFind">
            <summary>
            Gets the magic find value of the extended-statable <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
            <remarks>
            This value represents a multiplicand that is integrated into the
            Drop Chance of Rare Items. A higher MF value increases the chance
            to find those Rare Items.
            </remarks>
        </member>
        <member name="P:Zelda.Status.ExtendedStatable.AttackSpeedMeleeNormalized">
            <summary>
            Gets the average of the melee AttackSpeed and the melee WeaponSpeed.
            </summary>
        </member>
        <member name="P:Zelda.Status.ExtendedStatable.AttackSpeedRangedNormalized">
            <summary>
            Gets the average of the ranged AttackSpeed and the ranged WeaponSpeed.
            </summary>
        </member>
        <member name="P:Zelda.Status.ExtendedStatable.ArmorIgnore">
            <summary>
            Gets the flat amount of enemy armor this extended-statable ignores.
            </summary>
        </member>
        <member name="P:Zelda.Status.ExtendedStatable.ArmorIgnoreMultiplier">
            <summary>
            Gets the percentage of enemy armor this extended-statable ignores.
            </summary>
        </member>
        <member name="P:Zelda.Status.ExtendedStatable.FixedExperienceGainedModifier">
            <summary>
            Gets the fixed additional experience that is added to the experience the extended-statable ZeldaEntity gains.
            </summary>
            <remarks>
            This won't modify experience gained by Quests.
            </remarks>
        </member>
        <member name="P:Zelda.Status.ExtendedStatable.ExperienceGainedModifier">
            <summary>
            Gets the modifer applied to experience the extended-statable ZeldaEntity gains.
            </summary>
            <remarks>
            This won't modify experience gained by Quests.
            </remarks>
        </member>
        <member name="P:Zelda.Status.ExtendedStatable.DamageMeleeNormalizedMin">
            <summary>
            Gets or sets the normalized physcial damage the ZeldaEntity can do with melee attacks.
            </summary>
            <remarks>
            Normalized damage is calculated using the normalized weapon speed of the equipped weapon,
            instead of the actual weapon speed.
            The normalized weapon speed can be looked-up using the StatusCalc.
            </remarks>
        </member>
        <member name="P:Zelda.Status.ExtendedStatable.DamageMeleeNormalizedMax">
            <summary>
            Gets or sets the normalized physcial damage the ZeldaEntity can do with melee attacks.
            </summary>   
            <remarks>
            Normalized damage is calculated using the normalized weapon speed of the equipped weapon,
            instead of the actual weapon speed.
            The normalized weapon speed can be looked-up using the StatusCalc.
            </remarks>
        </member>
        <member name="P:Zelda.Status.ExtendedStatable.DamageRangedNormalizedMin">
            <summary>
            Gets or sets the normalized physcial damage the ZeldaEntity can do with ranged attacks.
            </summary>
            <remarks>
            Normalized damage is calculated using the normalized weapon speed of the equipped weapon,
            instead of the actual weapon speed.
            The normalized weapon speed can be looked-up using the StatusCalc.
            </remarks>
        </member>
        <member name="P:Zelda.Status.ExtendedStatable.DamageRangedNormalizedMax">
            <summary>
            Gets or sets the normalized physcial damage this <see cref="T:Zelda.Entities.ZeldaEntity"/> can do with ranged attacks.
            </summary>   
            <remarks>
            Normalized damage is calculated using the normalized weapon speed of the equipped weapon,
            instead of the actual weapon speed.
            The normalized weapon speed can be looked-up using the StatusCalc.
            </remarks>
        </member>
        <member name="P:Zelda.Status.ExtendedStatable.LifePotionEffectiviness">
            <summary>
            Gets the effectiviness multiplier for Life Potions 
            this extended-statable <see cref="T:Zelda.Entities.ZeldaEntity"/> uses.
            </summary>
        </member>
        <member name="P:Zelda.Status.ExtendedStatable.ManaPotionEffectiviness">
            <summary>
            Gets the effectiviness multiplier for Mana Potions 
            this extended-statable <see cref="T:Zelda.Entities.ZeldaEntity"/> uses.
            </summary>
        </member>
        <member name="P:Zelda.Status.ExtendedStatable.BaseStrength">
            <summary>
            Gets the base strength of the extended-statable <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
        </member>
        <member name="P:Zelda.Status.ExtendedStatable.BaseDexterity">
            <summary>
            Gets the base dexterity of the extended-statable <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
        </member>
        <member name="P:Zelda.Status.ExtendedStatable.BaseAgility">
            <summary>
            Gets the base agility of the extended-statable <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
        </member>
        <member name="P:Zelda.Status.ExtendedStatable.BaseVitality">
            <summary>
            Gets the base vitality of the extended-statable <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
        </member>
        <member name="P:Zelda.Status.ExtendedStatable.BaseIntelligence">
            <summary>
            Gets the base intelligence of the extended-statable <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
        </member>
        <member name="P:Zelda.Status.ExtendedStatable.BaseLuck">
            <summary>
            Gets the base luck of the extended-statable <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
        </member>
        <member name="P:Zelda.Status.ExtendedStatable.Strength">
            <summary>
            Gets the total strength of the extended-statable <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
        </member>
        <member name="P:Zelda.Status.ExtendedStatable.Dexterity">
            <summary>
            Gets the total dexterity of the extended-statable <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
        </member>
        <member name="P:Zelda.Status.ExtendedStatable.Agility">
            <summary>
            Gets the total agility of the extended-statable <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
        </member>
        <member name="P:Zelda.Status.ExtendedStatable.Vitality">
            <summary>
            Gets the total vitality of the extended-statable <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
        </member>
        <member name="P:Zelda.Status.ExtendedStatable.Intelligence">
            <summary>
            Gets the total intelligence of the extended-statable <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
        </member>
        <member name="P:Zelda.Status.ExtendedStatable.Luck">
            <summary>
            Gets the total luck of the extended-statable <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
        </member>
        <member name="M:Zelda.Status.ExtendedStatable.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Status.ExtendedStatable"/> class.
            </summary>
        </member>
        <member name="M:Zelda.Status.ExtendedStatable.Setup(Zelda.IZeldaServiceProvider)">
            <summary>
            Setups this Statable ExtendedStatable.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Status.ExtendedStatable.SetupInitialStatus">
            <summary>
            Setups the initial status of this <see cref="T:Zelda.Status.ExtendedStatable"/>.
            </summary>
        </member>
        <member name="M:Zelda.Status.ExtendedStatable.Update(Atom.IUpdateContext)">
            <summary>
            Updates this <see cref="T:Zelda.Status.ExtendedStatable"/> component.
            </summary>
            <param name="updateContext">
            The current IUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Status.ExtendedStatable.GetPhysicalMitigationOf(System.Int32,System.Int32)">
            <summary>
            Calculates the mitigation multiplier a physical attack of this extended-statable
            against a target with the given <paramref name="targetArmor"/> and <paramref name="targetLevel"/>.
            </summary>
            <param name="targetArmor">
            The armor of the target of the physical attack.
            </param>
            <param name="targetLevel">
            The level of the target of the physical attack.
            </param>
            <returns>
            The mitigation multiplier that simply gets applied to the damage.
            </returns>
        </member>
        <member name="M:Zelda.Status.ExtendedStatable.GetModifiedTargetArmor(System.Int32)">
            <summary>
            Gets the final armor value by modifying the given armor value.
            </summary>
            <param name="armor">
            The armor of the target.
            </param>
            <returns>
            The modifier armor value.
            </returns>
            <seealso cref="T:Zelda.Status.ArmorIgnoreEffect"/>
        </member>
        <member name="M:Zelda.Status.ExtendedStatable.GetBaseStat(Zelda.Status.Stat)">
            <summary>
            Receives a value that indicates how much of a given <see cref="T:Zelda.Status.Stat"/> 
            the extended-statable ZeldaEntity has invested in.
            </summary>
            <param name="stat">The Stat to receive the value for.</param>
            <returns>The number of points the Stat has.</returns>
        </member>
        <member name="M:Zelda.Status.ExtendedStatable.GetStat(Zelda.Status.Stat)">
            <summary>
            Receives a value that indicates how much of a given <see cref="T:Zelda.Status.Stat"/> 
            the extended-statable ZeldaEntity has in total.
            </summary>
            <param name="stat">The Stat to receive the value for.</param>
            <returns>The total number of points the Stat has.</returns>
        </member>
        <member name="M:Zelda.Status.ExtendedStatable.GetPercentageOfBaseMana(System.Single)">
            <summary>
            Gets the given percentage of the base mana of the extended-statable ZeldaEntity.
            </summary>
            <remarks>
            Base Mana is the Maia gained just by leveling-up.
            </remarks>
            <param name="percentage">
            The percentage to get; where 1 equals 100%.
            </param>
            <returns>The requested value.</returns>
        </member>
        <member name="M:Zelda.Status.ExtendedStatable.RemovePercentageOfBaseMana(System.Single)">
            <summary>
            Removes a percentage of base mana from the extended-statable ZeldaEntity.
            </summary>
            <param name="manaCost">
            The mana to remove in %; where 1 = 100%.
            </param>
        </member>
        <member name="M:Zelda.Status.ExtendedStatable.AddExperienceModified(System.Int64)">
            <summary>
            Adds the given amount of experience, modified by the ExperienceGainedModifier,
            to the extended-statable <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
            <param name="amount">
            The amount of experience to add to the extended-statable ZeldaEntity.
            </param>
            <exception cref="T:System.ArgumentException">
            If <paramref name="amount"/> is less than 0.
            </exception>
        </member>
        <member name="M:Zelda.Status.ExtendedStatable.AddExperience(System.Int64)">
            <summary>
            Adds the given amount of experience to the extended-statable <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
            <param name="amount">
            The amount of experience to add to the extended-statable ZeldaEntity.
            </param>
            <exception cref="T:System.ArgumentException">
            If <paramref name="amount"/> is less than 0.
            </exception>
        </member>
        <member name="M:Zelda.Status.ExtendedStatable.AddStatPoints(System.Int32)">
            <summary>
            Adds the given number of stat points to the extended-statable ZeldaEntity.
            </summary>
            <remarks>
            Those points can be used to invest into one of the main <see cref="T:Zelda.Status.Stat"/>s.
            </remarks>
            <param name="count">
            The number of points to add.
            </param>
        </member>
        <member name="M:Zelda.Status.ExtendedStatable.CanInvestInStat(Zelda.Status.Stat)">
            <summary>
            Receives a value that indicates whether the extented-statable ZeldaEntity
            has enough free Stat Points to invest in the given <see cref="T:Zelda.Status.Stat"/>.
            </summary>
            <param name="stat">
            The stat the user wants to invest in.
            </param>
            <returns>
            true if there are enough points left to invest atleast one time;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Status.ExtendedStatable.InvestInStat(Zelda.Status.Stat)">
            <summary>
            Tries to invest FreeStatPoints to increase the given <see cref="T:Zelda.Status.Stat"/> by one.
            </summary>
            <param name="stat">
            The Stat to invest in.
            </param>
            <returns>
            True if it was possible to invest into the Stat; 
            False if it wasn't possible to invest - aka. there were not enough free stat points available.
            </returns>
        </member>
        <member name="M:Zelda.Status.ExtendedStatable.UndoInvestmentInStat(Zelda.Status.Stat)">
            <summary>
            Tries to undo the last investment into the given <see cref="T:Zelda.Status.Stat"/>.
            </summary>
            <param name="stat">
            The Stat to undo the invest for.
            </param>
            <returns>
            True if it was possible to undo the investment into the Stat; otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Status.ExtendedStatable.GetPointsRequiredForStat(Zelda.Status.Stat)">
            <summary>
            Gets the number of status points that are required to invest one point
            into the specified Stat.
            </summary>
            <param name="stat">
            The Stat to invest in.
            </param>
            <returns>
            The number of status points that are required.
            </returns>
        </member>
        <member name="M:Zelda.Status.ExtendedStatable.GetPointsGainedByDecreasingStat(Zelda.Status.Stat)">
            <summary>
            Gets the number of status points that would be gained by decreasing the given stat point by one.
            </summary>
            <param name="stat">
            The Stat to derease.
            </param>
            <returns>
            The number of status points that would be gained.
            </returns>
        </member>
        <member name="M:Zelda.Status.ExtendedStatable.IncreaseStat(Zelda.Status.Stat)">
            <summary>
            Increases the given <see cref="T:Zelda.Status.Stat"/> by one.
            </summary>
            <param name="stat">The Stat to increase by one.</param>
        </member>
        <member name="M:Zelda.Status.ExtendedStatable.DecreaseStat(Zelda.Status.Stat)">
            <summary>
            Decreases the given <see cref="T:Zelda.Status.Stat"/> by one.
            </summary>
            <param name="stat">The Stat to decrase by one.</param>
        </member>
        <member name="M:Zelda.Status.ExtendedStatable.RefreshStatus">
            <summary>
            Refreshes all status data of the extended-statable <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
        </member>
        <member name="M:Zelda.Status.ExtendedStatable.RefreshStatus_LevelBased">
            <summary>
            Refreshes all level-based statuses of the extended-statable <see cref="T:Zelda.Entities.ZeldaEntity"/>..
            </summary>
        </member>
        <member name="M:Zelda.Status.ExtendedStatable.Refresh_RatingDependend">
            <summary>
            Refreshes all status values that might scale with a rating.
            </summary>
        </member>
        <member name="M:Zelda.Status.ExtendedStatable.Refresh_TotalArmor">
            <summary>
            Refreshes the total <see cref="P:Zelda.Status.Statable.Armor"/> of the extended-statable <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
        </member>
        <member name="M:Zelda.Status.ExtendedStatable.Refresh_ArmorIgnore">
            <summary>
            Refreshes the ArmorIgnore value of the extended-statable <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
            <seealso cref="T:Zelda.Status.ArmorIgnoreEffect"/>
        </member>
        <member name="M:Zelda.Status.ExtendedStatable.Refresh_MagicFind">
            <summary>
            Refreshes the Magic Find value of the extended-statable <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
        </member>
        <member name="M:Zelda.Status.ExtendedStatable.Refresh_MeleeWeaponRelated">
            <summary>
            Refreshes all status values that might change when changing the currently
            equiped melee weapon.
            </summary>
        </member>
        <member name="M:Zelda.Status.ExtendedStatable.Refresh_Pushing">
            <summary>
            Refreshes the current PushingExtraForce value.
            </summary>
        </member>
        <member name="M:Zelda.Status.ExtendedStatable.Refresh_BlockValue">
            <summary>
            Refreshes the block value that indicates how much physical damage the
            extended-statable ZeldaEntity may block.
            </summary>
        </member>
        <member name="M:Zelda.Status.ExtendedStatable.Refresh_MovementSpeed">
            <summary>
            Refreshes the Movement Speed of the statable <see cref="T:Zelda.Entities.ZeldaEntity"/>
            by taking into account the <see cref="T:Zelda.Status.MovementSpeedEffect"/>s currently active
            on the ZeldaEntity.
            </summary>
            <seealso cref="T:Zelda.Status.MovementSpeedEffect"/>
        </member>
        <member name="M:Zelda.Status.ExtendedStatable.Refresh_ExperienceGained">
            <summary>
            Refreshes the Experience Gained Modifier value of the statable <see cref="T:Zelda.Entities.ZeldaEntity"/>
            by taking into account the <see cref="T:Zelda.Status.ExperienceGainedEffect"/>s currently active
            on the ZeldaEntity.
            </summary>
            <seealso cref="T:Zelda.Status.ExperienceGainedEffect"/>
        </member>
        <member name="M:Zelda.Status.ExtendedStatable.Refresh_Strength">
            <summary>
            Refreshes the total strength and all related other stats of the extended-statable <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
        </member>
        <member name="M:Zelda.Status.ExtendedStatable.Refresh_Dexterity">
            <summary>
            Refreshes the total dexterity and all related other stats of the extended-statable <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
        </member>
        <member name="M:Zelda.Status.ExtendedStatable.Refresh_Vitality">
            <summary>
            Refreshes the total vitality and all related other stats of the extended-statable <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
        </member>
        <member name="M:Zelda.Status.ExtendedStatable.Refresh_Agility">
            <summary>
            Refreshes the total agility and all related other stats of the extended-statable <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
        </member>
        <member name="M:Zelda.Status.ExtendedStatable.Refresh_Intelligence">
            <summary>
            Refreshes the total intelligence and all related other stats of the extended-statable <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
        </member>
        <member name="M:Zelda.Status.ExtendedStatable.Refresh_Luck">
            <summary>
            Refreshes the total luck and all related other stats of the extended-statable <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
        </member>
        <member name="M:Zelda.Status.ExtendedStatable.Refresh_TotalLife">
            <summary>
            Refreshes the total life and all related other stats of the extended-statable <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
        </member>
        <member name="M:Zelda.Status.ExtendedStatable.Refresh_TotalMana">
            <summary>
            Refreshes the total mana and all related other stats of the extended-statable <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
        </member>
        <member name="M:Zelda.Status.ExtendedStatable.Refresh_LifeRegen">
            <summary>
            Refreshes the life regeneration value the extended-statable <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
        </member>
        <member name="M:Zelda.Status.ExtendedStatable.Refresh_ManaRegen">
            <summary>
            Refreshes the mana regeneration value the extended-statable <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
        </member>
        <member name="M:Zelda.Status.ExtendedStatable.Refresh_LifePotionEffectiveness">
            <summary>
            Refreshes the life potion effectiviness multiplciator value
            of the extended-statable <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
        </member>
        <member name="M:Zelda.Status.ExtendedStatable.Refresh_ManaPotionEffectiveness">
            <summary>
            Refreshes the mana potion effectiviness multiplciator value
            of the extended-statable <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
        </member>
        <member name="M:Zelda.Status.ExtendedStatable.Refresh_DamageMelee">
            <summary>
            Refreshes the damage the extended-statable ZeldaEntity does in Melee Combat.
            </summary>
        </member>
        <member name="M:Zelda.Status.ExtendedStatable.CalculateMeleeDamage(System.Int32,System.Int32,System.Single,System.Int32,System.Single)">
            <summary>
            Helpers method that calculates the melee damage done by the player.
            </summary>
            <param name="min">
            The minimum damage; includes weapon damage.
            </param>
            <param name="max">
            The maximum damage; includes weapon damage.
            </param>
            <param name="weaponSpeed">
            The speed of the weapon.
            </param>
            <param name="fixedIncrease">
            The fixed damage increase.
            </param>
            <param name="damageMultiplier">
            The multiplicative damage modifier.
            </param>
        </member>
        <member name="M:Zelda.Status.ExtendedStatable.CalculateNormalizedMeleeDamage(System.Int32,System.Int32,System.Single,System.Int32,System.Single)">
            <summary>
            Helpers method that calculates the normalized melee damage done by the player.
            </summary>
            <param name="min">
            The minimum damage; includes weapon damage.
            </param>
            <param name="max">
            The maximum damage; includes weapon damage.
            </param>
            <param name="normWeaponSpeed">
            The normalized speed of the weapon.
            </param>
            <param name="fixedIncrease">
            The fixed damage increase.
            </param>
            <param name="damageMultiplier">
            The multiplicative damage modifier.
            </param>
        </member>
        <member name="M:Zelda.Status.ExtendedStatable.Refresh_DamageRanged">
            <summary>
            Refreshes the damage the extended-statable ZeldaEntity does in Ranged Combat.
            </summary>
        </member>
        <member name="M:Zelda.Status.ExtendedStatable.CalculateRangedDamage(System.Int32,System.Int32,System.Single,System.Int32,System.Single)">
            <summary>
            Helpers method that calculates the ranged damage done by the player.
            </summary>
            <param name="min">
            The minimum damage; includes weapon damage.
            </param>
            <param name="max">
            The maximum damage; includes weapon damage.
            </param>
            <param name="weaponSpeed">
            The speed of the weapon.
            </param>
            <param name="fixedIncrease">
            The fixed damage increase.
            </param>
            <param name="damageMultiplier">
            The multiplicative damage modifier.
            </param>
        </member>
        <member name="M:Zelda.Status.ExtendedStatable.CalculateNormaliizedRangedDamage(System.Int32,System.Int32,System.Single,System.Int32,System.Single)">
            <summary>
            Helpers method that calculates the normalized ranged damage done by the player.
            </summary>
            <param name="min">
            The minimum damage; includes weapon damage.
            </param>
            <param name="max">
            The maximum damage; includes weapon damage.
            </param>
            <param name="normWeaponSpeed">
            The normalized speed of the weapon.
            </param>
            <param name="fixedIncrease">
            The fixed damage increase.
            </param>
            <param name="damageMultiplier">
            The multiplicative damage modifier.
            </param>
        </member>
        <member name="M:Zelda.Status.ExtendedStatable.Refresh_DamageMagic">
            <summary>
            Refreshes the damage the extended-statable ZeldaEntity does in Magic Combat.
            </summary>
        </member>
        <member name="M:Zelda.Status.ExtendedStatable.Refresh_AttackSpeedMelee">
            <summary>
            Refreshes the attack speed/delay for the default melee attack.
            </summary>
        </member>
        <member name="M:Zelda.Status.ExtendedStatable.Refresh_AttackSpeedRanged">
            <summary>
            Refreshes the attack speed/delay for the default ranged attack.
            </summary>
        </member>
        <member name="M:Zelda.Status.ExtendedStatable.Refresh_CastTimeModifier">
            <summary>
            Refreshes the cast time modifier value.
            </summary>
        </member>
        <member name="M:Zelda.Status.ExtendedStatable.SerializeExtended(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Writes the current status state of this ExtendedStatable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Status.ExtendedStatable.WriteCooldowns(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Saves the currently active shared cooldowns of the ExtendedStatable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Status.ExtendedStatable.DeserializeExtended(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Reads the current status state of this ExtendedStatable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Status.ExtendedStatable.SerializePowerStatus(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the current life and mana status of the extended statable entity.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            </param>
        </member>
        <member name="M:Zelda.Status.ExtendedStatable.DeserializePowerStatus(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the current life and mana status of the extended statable entity.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            </param>
        </member>
        <member name="M:Zelda.Status.ExtendedStatable.ReadCooldowns(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Reads the currently active shared cooldowns of the player.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Status.ExtendedStatable.ResetStats">
            <summary>
            Resets the stats of the extended-statable entity
            has aquired so far.
            </summary>
        </member>
        <member name="M:Zelda.Status.ExtendedStatable.ResetBaseStats">
            <summary>
            Sets all of the base stats to 1.
            </summary>
        </member>
        <member name="F:Zelda.Status.ExtendedStatable.sharedCooldowns">
            <summary>
            Stores the shared <see cref="T:Zelda.Cooldown"/>s corresponding to the
            extended-statable <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
        </member>
        <member name="F:Zelda.Status.ExtendedStatable.equipmentStatus">
            <summary>
            Stores what equipment the extended-statable <see cref="T:Zelda.Entities.ZeldaEntity"/>
            has currently equiped.
            </summary>
        </member>
        <member name="F:Zelda.Status.ExtendedStatable.baseStrength">
            <summary> 
            The stat value which is increased by the status points.
            </summary>
        </member>
        <member name="F:Zelda.Status.ExtendedStatable.baseDexterity">
            <summary> 
            The stat value which is increased by the status points.
            </summary>
        </member>
        <member name="F:Zelda.Status.ExtendedStatable.baseAgility">
            <summary> 
            The stat value which is increased by the status points.
            </summary>
        </member>
        <member name="F:Zelda.Status.ExtendedStatable.baseVitality">
            <summary> 
            The stat value which is increased by the status points.
            </summary>
        </member>
        <member name="F:Zelda.Status.ExtendedStatable.baseIntelligence">
            <summary> 
            The stat value which is increased by the status points.
            </summary>
        </member>
        <member name="F:Zelda.Status.ExtendedStatable.baseLuck">
            <summary> 
            The stat value which is increased by the status points.
            </summary>
        </member>
        <member name="F:Zelda.Status.ExtendedStatable.totalStrength">
            <summary> 
            The stat value which is created by 
            adding together the base value, the value from items and additional StatEffect values.
            This value is then multiplicated by multiplicative StatEffects.
            </summary>
        </member>
        <member name="F:Zelda.Status.ExtendedStatable.totalDexterity">
            <summary> 
            The stat value which is created by 
            adding together the base value, the value from items and additional StatEffect values.
            This value is then multiplicated by multiplicative StatEffects.
            </summary>
        </member>
        <member name="F:Zelda.Status.ExtendedStatable.totalAgility">
            <summary> 
            The stat value which is created by 
            adding together the base value, the value from items and additional StatEffect values.
            This value is then multiplicated by multiplicative StatEffects.
            </summary>
        </member>
        <member name="F:Zelda.Status.ExtendedStatable.totalVitality">
            <summary> 
            The stat value which is created by 
            adding together the base value, the value from items and additional StatEffect values.
            This value is then multiplicated by multiplicative StatEffects.
            </summary>
        </member>
        <member name="F:Zelda.Status.ExtendedStatable.totalIntelligence">
            <summary> 
            The stat value which is created by 
            adding together the base value, the value from items and additional StatEffect values.
            This value is then multiplicated by multiplicative StatEffects.
            </summary>
        </member>
        <member name="F:Zelda.Status.ExtendedStatable.totalLuck">
            <summary> 
            The stat value which is created by 
            adding together the base value, the value from items and additional StatEffect values.
            This value is then multiplicated by multiplicative StatEffects.
            </summary>
        </member>
        <member name="F:Zelda.Status.ExtendedStatable.baseMana">
            <summary>
            The base mana of the extended-statable ZeldaEntity. This value is often used
            to get the mana costs of a Skill.
            </summary>
        </member>
        <member name="F:Zelda.Status.ExtendedStatable.rubies">
            <summary>
            Stores the value of the <see cref="P:Zelda.Status.ExtendedStatable.Rubies"/> property.
            </summary>
        </member>
        <member name="F:Zelda.Status.ExtendedStatable.experience">
            <summary>
            Stores how much experience the extended-statable ZeldaEntity has.
            </summary>
        </member>
        <member name="F:Zelda.Status.ExtendedStatable.experienceNeeded">
            <summary>
            Stores how much experience the extended-statable ZeldaEntity needs for the next level-up.
            </summary>
        </member>
        <member name="F:Zelda.Status.ExtendedStatable.fixedExperienceGainedModifier">
            <summary>
            The fixed additional experience that is added to the experience the extended-statable ZeldaEntity gains.
            </summary>
        </member>
        <member name="F:Zelda.Status.ExtendedStatable.experienceGainedModifier">
            <summary>
            The modifer applied to experience the extended-statable ZeldaEntity gains.
            </summary>
            <remarks>
            This won't modify experience gained by Quests.
            </remarks>
        </member>
        <member name="F:Zelda.Status.ExtendedStatable.freeStatPoints">
            <summary>
            The number of stat points that haven't been invested by the extended-statable <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
        </member>
        <member name="F:Zelda.Status.ExtendedStatable.totalStatPoints">
            <summary>
            The total number of stat points this extended-statable ZeldaEntity has gained so far.
            </summary>
        </member>
        <member name="F:Zelda.Status.ExtendedStatable.armorIgnore">
            <summary>
            The armor this extended-statable ZeldaEntity ignores.
            </summary>
        </member>
        <member name="F:Zelda.Status.ExtendedStatable.armorIgnoreMultiplier">
            <summary>
            The multiplier applied to the total armor of an enemy.
            </summary>
        </member>
        <member name="F:Zelda.Status.ExtendedStatable.magicFind">
            <summary>
            The MF value is a multiplicand that is integrated into the
            Drop Chance of Rare Items. A higher MF value increases the chance
            to find those Rare Items.
            </summary>
        </member>
        <member name="F:Zelda.Status.ExtendedStatable.pushingForceAdditive">
            <summary>
            An extra value added to the final pushing force of an attack.
            </summary>
        </member>
        <member name="F:Zelda.Status.ExtendedStatable.pushingForceMultiplicative">
            <summary>
            An extra value added to the final pushing force of an attack.
            </summary>
        </member>
        <member name="F:Zelda.Status.ExtendedStatable.chanceTo">
            <summary>
            Encapsulates the various chance-to properties of this ExtendedStatable.
            </summary>
        </member>
        <member name="F:Zelda.Status.ExtendedStatable.chanceToBe">
            <summary>
            Encapsulates the various chance-to-be properties of this ExtendedStatable.
            </summary>
        </member>
        <member name="F:Zelda.Status.ExtendedStatable.spellPower">
            <summary>
            Stores and manages the Spell Power related values of this ExtendedStatable.
            </summary>
        </member>
        <member name="F:Zelda.Status.ExtendedStatable.damageDone">
            <summary>
            Encapsulates the damage done modifiers of this ExtendedStatable.
            </summary>
        </member>
        <member name="F:Zelda.Status.ExtendedStatable.equipmentSlotStatModifiers">
            <summary>
            Encapuslates the stat modifiers that are applied to the stats
            given from items with a specific <see cref="T:Zelda.Items.EquipmentSlot"/>.
            </summary>
        </member>
        <member name="T:Zelda.Status.Hooks.Design.StatusHookEditor">
            <summary>
            Implements an <see cref="T:Zelda.Design.BaseZeldaObjectCreationEditor"/> that provides a mechanism that
            allows the user to create a <see cref="T:Zelda.Status.Hooks.IStatusHook"/>.
            </summary>
        </member>
        <member name="M:Zelda.Status.Hooks.Design.StatusHookEditor.GetTypes">
            <summary>
            Gets the types of the objects that can be created by this StatusEffectEditor.
            </summary>
            <returns>
            The list of types.
            </returns>
        </member>
        <member name="F:Zelda.Status.Hooks.Design.StatusHookEditor.types">
            <summary>
            The types that can created by a StatusHookEditor.
            </summary>
        </member>
        <member name="T:Zelda.Status.Hooks.HitCritHookMode">
            <summary>
            Enumerates the different ways an IStatusHook might
            hook up with an attack.
            </summary>
        </member>
        <member name="F:Zelda.Status.Hooks.HitCritHookMode.HitAndCrit">
            <summary>
            The IStatusHook hooks up with both hits and crits.
            </summary>
        </member>
        <member name="F:Zelda.Status.Hooks.HitCritHookMode.OnlyHit">
            <summary>
            The IStatusHook only hooks up with hits.
            </summary>
        </member>
        <member name="F:Zelda.Status.Hooks.HitCritHookMode.OnlyCrit">
            <summary>
            The IStatusHook only hooks up with crits.
            </summary>
        </member>
        <member name="T:Zelda.Status.Hooks.IStatusHook">
            <summary>
            Provides a mechanism that allows one to hook up
            with a statable Entity and listen to its events.
            </summary>
        </member>
        <member name="E:Zelda.Status.Hooks.IStatusHook.Invoked">
            <summary>
            Fired when this IStatusHook has been invoked.
            </summary>
        </member>
        <member name="M:Zelda.Status.Hooks.IStatusHook.Hook(Zelda.Status.Statable)">
            <summary>
            Hooks this IStatusHook up with the given Statable.
            </summary>
            <param name="statable">
            The Statable component of the ZeldaEntity to hook up with.
            </param>
        </member>
        <member name="M:Zelda.Status.Hooks.IStatusHook.Unhook(Zelda.Status.Statable)">
            <summary>
            Unhooks this IStatusHook from the given Statable.
            </summary>
            <param name="statable">
            The Statable component of the ZeldaEntity to unhook from.
            </param>
        </member>
        <member name="M:Zelda.Status.Hooks.IStatusHook.GetShortDescription(Zelda.Status.Statable)">
            <summary>
            Gets a short description of this IStatusHook.
            </summary>
            <param name="statable">
            The Statable component of the ZeldaEntity that hooks up with this IStatusHook.
            </param>
            <returns>
            A short string that is descriping with what this IStatusHook is hooking up.
            </returns>
        </member>
        <member name="M:Zelda.Status.Hooks.IStatusHook.Clone">
            <summary>
            Returns a clone of this IStatusHook.
            </summary>
            <returns>
            The cloned IStatusHook.
            </returns>
        </member>
        <member name="T:Zelda.Status.Hooks.OnAttackHook">
            <summary>
            Defines an <see cref="T:Zelda.Status.Hooks.IStatusHook"/> that hooks up with 
            <see cref="E:Zelda.Status.Statable.MeleeHit"/>, <see cref="E:Zelda.Status.Statable.RangedHit"/> and so on...
            </summary>
            <remarks>
            No entity should be hooked/unhooked until the OnAttackHook
            has been fully initialized.
            </remarks>
        </member>
        <member name="P:Zelda.Status.Hooks.OnAttackHook.AttackType">
            <summary>
            Gets or sets what kind of attacks this OnAttackHook 
            should be hooked up with.
            </summary>
        </member>
        <member name="P:Zelda.Status.Hooks.OnAttackHook.HookMode">
            <summary>
            Gets or sets a value indicating whether this OnAttackHook should
            hook up with crits, hits or both.
            </summary>
        </member>
        <member name="M:Zelda.Status.Hooks.OnAttackHook.HooksUpWithHits">
            <summary>
            Gets a value indicating whether this OnAttackHook hooks up with hits.
            </summary>
            <returns>
            Returns true if it hooks up with attacks that hit;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Status.Hooks.OnAttackHook.HooksUpWithCrits">
            <summary>
            Gets a value indicating whether this OnAttackHook hooks up with crits.
            </summary>
            <returns>
            Returns true if it hooks up with attacks that crit;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Status.Hooks.OnAttackHook.Hook(Zelda.Status.Statable)">
            <summary>
            Hooks this OnAttackHook up with the given Statable.
            </summary>
            <param name="statable">
            The Statable component of the ZeldaEntity to hook up with.
            </param>
        </member>
        <member name="M:Zelda.Status.Hooks.OnAttackHook.HookMelee(Zelda.Status.Statable)">
            <summary>
            Hooks this OnAttackHook up with the melee hit/crit.
            </summary>
            <param name="statable">
            The Statable component of the ZeldaEntity to hook up with.
            </param>
        </member>
        <member name="M:Zelda.Status.Hooks.OnAttackHook.HookRanged(Zelda.Status.Statable)">
            <summary>
            Hooks this OnAttackHook up with the ranged hit/crit.
            </summary>
            <param name="statable">
            The Statable component of the ZeldaEntity to hook up with.
            </param>
        </member>
        <member name="M:Zelda.Status.Hooks.OnAttackHook.Unhook(Zelda.Status.Statable)">
            <summary>
            Unhooks this OnAttackHook from the given Statable.
            </summary>
            <param name="statable">
            The Statable component of the ZeldaEntity to unhook from.
            </param>
        </member>
        <member name="M:Zelda.Status.Hooks.OnAttackHook.UnhookMelee(Zelda.Status.Statable)">
            <summary>
            Unhook this OnAttackHook up with the melee hit/crit.
            </summary>
            <param name="statable">
            The Statable component of the ZeldaEntity to hook up with.
            </param>
        </member>
        <member name="M:Zelda.Status.Hooks.OnAttackHook.UnhookRanged(Zelda.Status.Statable)">
            <summary>
            Unhook this OnAttackHook up with the ranged hit/crit.
            </summary>
            <param name="statable">
            The Statable component of the ZeldaEntity to hook up with.
            </param>
        </member>
        <member name="M:Zelda.Status.Hooks.OnAttackHook.OnAttack(Zelda.Status.Statable)">
            <summary>
            Called when damage has been received by a statable entity 
            that has been hooked up with this OnAttackHook.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
        </member>
        <member name="M:Zelda.Status.Hooks.OnAttackHook.OnAttackWithArgs(Zelda.Status.Statable,Zelda.Status.CombatEventArgs)">
            <summary>
            Called when damage has been received by a statable entity 
            that has been hooked up with this OnAttackHook.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
            <param name="e">
            The CombatEventArgs that contain the event data.
            </param>
        </member>
        <member name="M:Zelda.Status.Hooks.OnAttackHook.GetShortDescription(Zelda.Status.Statable)">
            <summary>
            Gets a short description of this IStatusHook.
            </summary>
            <param name="statable">
            The Statable component of the ZeldaEntity that hooks up with this IStatusHook.
            </param>
            <returns>
            A short string that is descriping with what this IStatusHook is hooking up.
            </returns>
        </member>
        <member name="M:Zelda.Status.Hooks.OnAttackHook.GetShortMeleeDescription">
            <summary>
            Gets a short description of this IStatusHook; in the case of AttackType.Melee.
            </summary>
            <returns>
            A localized string that is displayed to the player.
            </returns>
        </member>
        <member name="M:Zelda.Status.Hooks.OnAttackHook.GetShortRangedDescription">
            <summary>
            Gets a short description of this IStatusHook; in the case of a AttackType.Ranged.
            </summary>
            <returns>
            A localized string that is displayed to the player.
            </returns>
        </member>
        <member name="M:Zelda.Status.Hooks.OnAttackHook.GetShortDescriptionForAll">
            <summary>
            Gets a short description of this IStatusHook; in the case of AttackType.All.
            </summary>
            <returns>
            A localized string that is displayed to the player.
            </returns>
        </member>
        <member name="M:Zelda.Status.Hooks.OnAttackHook.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Status.Hooks.OnAttackHook.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Status.Hooks.OnAttackHook.Clone">
            <summary>
            Returns a clone of this OnAttackHook.
            </summary>
            <returns>
            The cloned IStatusHook.
            </returns>
        </member>
        <member name="F:Zelda.Status.Hooks.OnAttackHook.attackType">
            <summary>
            The storage field of the <see cref="P:Zelda.Status.Hooks.OnAttackHook.AttackType"/> property.
            </summary>
        </member>
        <member name="T:Zelda.Status.Hooks.OnCastHook">
            <summary>
            Defines an <see cref="T:Zelda.Status.Hooks.IStatusHook"/> that hooks up with
            the Castable.Casted event.
            </summary>
            <remarks>
            No entity should be hooked/unhooked until the OnCastHook
            has been fully initialized.
            </remarks>
        </member>
        <member name="T:Zelda.Status.Hooks.OnCastHook.CastMode">
            <summary>
            Enumerates the different types of casting
            the OnCastHook can hook up with.
            </summary>
        </member>
        <member name="F:Zelda.Status.Hooks.OnCastHook.CastMode.CastStarted">
            <summary>
            The OnCastHook hooks up with the Castbar.Started event.
            </summary>
        </member>
        <member name="F:Zelda.Status.Hooks.OnCastHook.CastMode.CastFinished">
            <summary>
            The OnCastHook hooks up with the Castbar.Finished event.
            </summary>
        </member>
        <member name="P:Zelda.Status.Hooks.OnCastHook.Mode">
            <summary>
            Gets or sets a value indicating what kinda of casting
            this OnCastHook should hook up with.
            </summary>
        </member>
        <member name="M:Zelda.Status.Hooks.OnCastHook.Hook(Zelda.Status.Statable)">
            <summary>
            Hooks this StatusHook up with the given Statable.
            </summary>
            <param name="statable">
            The Statable component of the ZeldaEntity to hook up with.
            </param>
        </member>
        <member name="M:Zelda.Status.Hooks.OnCastHook.ShouldHookWithCastStarted">
            <summary>
            Gets a value indicating whether this StatusHook
            should hook up with the Castbar.Started event.
            </summary>
            <returns>
            true if the events should be hooked-up;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Status.Hooks.OnCastHook.ShouldHookWithCastFinished">
            <summary>
            Gets a value indicating whether this StatusHook
            should hook up with the Castbar.Finished event.
            </summary>
            <returns>
            true if the events should be hooked-up;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Status.Hooks.OnCastHook.OnCasted(Zelda.Casting.CastBar,Zelda.Casting.Spell)">
            <summary>
            Called when a cast has either completed or started.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="spell">The spell that has been casted/is casting.</param>
        </member>
        <member name="M:Zelda.Status.Hooks.OnCastHook.Unhook(Zelda.Status.Statable)">
            <summary>
            Unhooks this StatusHook from the given Statable.
            </summary>
            <param name="statable">
            The Statable component of the ZeldaEntity to unhook from.
            </param>
        </member>
        <member name="M:Zelda.Status.Hooks.OnCastHook.GetCastbar(Zelda.Status.Statable)">
            <summary>
            Gets the CastBar associated with the given
            Statable component.
            </summary>
            <param name="statable">
            The Statable component of the ZeldaEntity that hooks up with this IStatusHook.
            </param>
            <returns>
            The CastBar of the given statable enetity..
            </returns>
        </member>
        <member name="M:Zelda.Status.Hooks.OnCastHook.GetShortDescription(Zelda.Status.Statable)">
            <summary>
            Gets a short description of this IStatusHook.
            </summary>
            <param name="statable">
            The Statable component of the ZeldaEntity that hooks up with this IStatusHook.
            </param>
            <returns>
            A short string that is descriping with what this IStatusHook is hooking up.
            </returns>
        </member>
        <member name="M:Zelda.Status.Hooks.OnCastHook.Clone">
            <summary>
            Returns a clone of this StatusHook.
            </summary>
            <returns>
            The cloned IStatusHook.
            </returns>
        </member>
        <member name="M:Zelda.Status.Hooks.OnCastHook.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Status.Hooks.OnCastHook.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="T:Zelda.Status.Hooks.StatusHook">
            <summary>
            Represents an abstract base implementation of the <see cref="T:Zelda.Status.Hooks.IStatusHook"/> interface.
            </summary>
        </member>
        <member name="E:Zelda.Status.Hooks.StatusHook.Invoked">
            <summary>
            Fired when this IStatusHook has been invoked.
            </summary>
        </member>
        <member name="M:Zelda.Status.Hooks.StatusHook.OnInvoked(Zelda.Status.Statable)">
            <summary>
            Raises the <see cref="E:Zelda.Status.Hooks.StatusHook.Invoked"/> event.
            </summary>
            <param name="invoker">
            The statable component of the ZeldaEntity that has invoked
            this IStatusHook.
            </param>
        </member>
        <member name="M:Zelda.Status.Hooks.StatusHook.Hook(Zelda.Status.Statable)">
            <summary>
            Hooks this StatusHook up with the given Statable.
            </summary>
            <param name="statable">
            The Statable component of the ZeldaEntity to hook up with.
            </param>
        </member>
        <member name="M:Zelda.Status.Hooks.StatusHook.Unhook(Zelda.Status.Statable)">
            <summary>
            Unhooks this StatusHook from the given Statable.
            </summary>
            <param name="statable">
            The Statable component of the ZeldaEntity to unhook from.
            </param>
        </member>
        <member name="M:Zelda.Status.Hooks.StatusHook.GetShortDescription(Zelda.Status.Statable)">
            <summary>
            Gets a short description of this IStatusHook.
            </summary>
            <param name="statable">
            The Statable component of the ZeldaEntity that hooks up with this IStatusHook.
            </param>
            <returns>
            A short string that is descriping with what this IStatusHook is hooking up.
            </returns>
        </member>
        <member name="M:Zelda.Status.Hooks.StatusHook.Clone">
            <summary>
            Returns a clone of this StatusHook.
            </summary>
            <returns>
            The cloned IStatusHook.
            </returns>
        </member>
        <member name="M:Zelda.Status.Hooks.StatusHook.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Status.Hooks.StatusHook.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="T:Zelda.Status.PlayerStatistics">
            <summary>
            Encapsulates the play statistics of a player.
            </summary>
        </member>
        <member name="P:Zelda.Status.PlayerStatistics.DeathCount">
            <summary>
            Gets the number of times that the player has died.
            </summary>
        </member>
        <member name="P:Zelda.Status.PlayerStatistics.KillCount">
            <summary>
            Gets the number of targets that the player has killed.
            </summary>
        </member>
        <member name="T:Zelda.Status.Procs.Design.ProcChanceEditor">
            <summary>
            Implements an <see cref="T:Zelda.Design.BaseZeldaObjectCreationEditor"/> that provides a mechanism that
            allows the user to create a <see cref="T:Zelda.Status.Procs.IProcChance"/>.
            </summary>
        </member>
        <member name="M:Zelda.Status.Procs.Design.ProcChanceEditor.GetTypes">
            <summary>
            Gets the types of the objects that can be created by this StatusEffectEditor.
            </summary>
            <returns>
            The list of types.
            </returns>
        </member>
        <member name="F:Zelda.Status.Procs.Design.ProcChanceEditor.types">
            <summary>
            The types that can created by a ProcChanceEditor.
            </summary>
        </member>
        <member name="T:Zelda.Status.Procs.FixedProcChance">
            <summary>
            Represents an <see cref="T:Zelda.Status.Procs.IProcChance"/> that has a fixed value.
            </summary>
        </member>
        <member name="P:Zelda.Status.Procs.FixedProcChance.Chance">
            <summary>
            Gets or sets the chance for a proc to occure.
            </summary>
        </member>
        <member name="M:Zelda.Status.Procs.FixedProcChance.TryProc(Zelda.Status.Statable,Atom.Math.RandMT)">
            <summary>
            Gets a value indicating whether a proc has occured
            using the rules of this IProcChance by throwing the dice.
            </summary>
            <param name="caller">
            The statable component of the entity that
            tries to proc something.
            </param>
            <param name="rand">
            A random number generator.
            </param>
            <returns>
            True if a proc has occured;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Status.Procs.FixedProcChance.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Status.Procs.FixedProcChance.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Status.Procs.FixedProcChance.chance">
            <summary>
            The storage field of the <see cref="P:Zelda.Status.Procs.FixedProcChance.Chance"/> property.
            </summary>
        </member>
        <member name="T:Zelda.Status.Procs.IProcChance">
            <summary>
            Encapsulates the logic that decides 
            whether a proc has occured.
            </summary>
        </member>
        <member name="M:Zelda.Status.Procs.IProcChance.TryProc(Zelda.Status.Statable,Atom.Math.RandMT)">
            <summary>
            Gets a value indicating whether a proc has occured
            using the rules of this IProcChance by throwing the dice.
            </summary>
            <param name="caller">
            The statable component of the entity that
            tries to proc something.
            </param>
            <param name="rand">
            A random number generator.
            </param>
            <returns>
            True if a proc has occured;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Status.Procs.PerMinuteAttackSpeedRelatedProcChance">
            <summary>
            Defines a <see cref="T:Zelda.Status.Procs.PerMinuteProcChance"/> that uses the Attack Speed
            of the caller to calculate the proc occurrences per minute.
            This class is sealed.
            </summary>
        </member>
        <member name="P:Zelda.Status.Procs.PerMinuteAttackSpeedRelatedProcChance.AttackType">
            <summary>
            Gets or sets what kind of attack speed should be used
            to calculate the proc chance.
            </summary>
        </member>
        <member name="M:Zelda.Status.Procs.PerMinuteAttackSpeedRelatedProcChance.GetOccurrencesPerMinute(Zelda.Status.Statable)">
            <summary>
            Gets the number of occurrences this PerMinuteAttackSpeedRelatedProcChance
            has to proc per minute.
            </summary>
            <param name="caller">
            The statable component of the entity that
            tries to proc something.
            </param>
            <returns>
            The number of occurences this PerMinuteProcChance has to proc per minute.
            </returns>
        </member>
        <member name="M:Zelda.Status.Procs.PerMinuteAttackSpeedRelatedProcChance.GetAttackSpeed(Zelda.Status.Statable)">
            <summary>
            Gets the attack speed of the set <see cref="P:Zelda.Status.Procs.PerMinuteAttackSpeedRelatedProcChance.AttackType"/> of the given caller.
            </summary>
            <param name="caller">
            The statable component of the entity that
            tries to proc something.
            </param>
            <returns>
            The attack speed (also called attack delay).
            </returns>
        </member>
        <member name="M:Zelda.Status.Procs.PerMinuteAttackSpeedRelatedProcChance.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Status.Procs.PerMinuteAttackSpeedRelatedProcChance.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Status.Procs.PerMinuteAttackSpeedRelatedProcChance.attackType">
            <summary>
            The storage field of the <see cref="P:Zelda.Status.Procs.PerMinuteAttackSpeedRelatedProcChance.AttackType"/> property.
            </summary>
        </member>
        <member name="T:Zelda.Status.Procs.PerMinuteProcChance">
            <summary>
            Represents an <see cref="T:Zelda.Status.Procs.IProcChance"/> that has an average number
            of Procs Per Minute.
            </summary>
        </member>
        <member name="P:Zelda.Status.Procs.PerMinuteProcChance.ProcsPerMinute">
            <summary>
            Gets or sets the number of procs that should occure on average.
            </summary>
        </member>
        <member name="M:Zelda.Status.Procs.PerMinuteProcChance.TryProc(Zelda.Status.Statable,Atom.Math.RandMT)">
            <summary>
            Gets a value indicating whether a proc has occured
            using the rules of this IProcChance by throwing the dice.
            </summary>
            <param name="caller">
            The statable component of the entity that
            tries to proc something.
            </param>
            <param name="rand">
            A random number generator.
            </param>
            <returns>
            True if a proc has occured;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Status.Procs.PerMinuteProcChance.GetProcChancePerOccurrence(Zelda.Status.Statable)">
            <summary>
            Gets the fixed chance for this PerMinuteProcChance to be a proc.
            </summary>
            <param name="caller">
            The statable component of the entity that
            tries to proc something.
            </param>
            <returns>
            The fixed chance to proc.
            </returns>
        </member>
        <member name="M:Zelda.Status.Procs.PerMinuteProcChance.GetOccurrencesPerMinute(Zelda.Status.Statable)">
            <summary>
            Gets the number of occurrences this PerMinuteProcChance
            has to proc per minute.
            </summary>
            <param name="caller">
            The statable component of the entity that
            tries to proc something.
            </param>
            <returns>
            The number of occurences this PerMinuteProcChance has to proc per minute.
            </returns>
        </member>
        <member name="M:Zelda.Status.Procs.PerMinuteProcChance.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Status.Procs.PerMinuteProcChance.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Status.Procs.PerMinuteProcChance.procsPerMinute">
            <summary>
            The storage field of the <see cref="P:Zelda.Status.Procs.PerMinuteProcChance.ProcsPerMinute"/> property.
            </summary>
        </member>
        <member name="T:Zelda.Status.Procs.ProcEffect">
            <summary>
            Represents a StatusEffect that procs some other effect.
            </summary>
            <seealso cref="T:Zelda.Status.Procs.IProcChance"/>
            <seealso cref="T:Zelda.Status.Hooks.IStatusHook"/>
        </member>
        <member name="P:Zelda.Status.Procs.ProcEffect.ProcChance">
            <summary>
            Gets or sets the <see cref="T:Zelda.Status.Procs.IProcChance"/> of this TimedProcEffect.
            </summary>
        </member>
        <member name="P:Zelda.Status.Procs.ProcEffect.Hook">
            <summary>
            Gets or sets the <see cref="T:Zelda.Status.Hooks.IStatusHook"/> that hooks up this TimedProcEffect
            with the statable entity that owns the effect.
            </summary>
        </member>
        <member name="P:Zelda.Status.Procs.ProcEffect.Identifier">
            <summary> 
            Gets an unique string that represents what this <see cref="T:Zelda.Status.StatusEffect"/> manipulates.
            </summary>
        </member>
        <member name="M:Zelda.Status.Procs.ProcEffect.OnEnable(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.StatusEffect"/> gets enabled for the given statable Entity.
            </summary>
            <param name="user">
            The statable that enabled this <see cref="T:Zelda.Status.StatusEffect"/>.
            </param>
        </member>
        <member name="M:Zelda.Status.Procs.ProcEffect.OnDisable(Zelda.Status.Statable)">
            <summary>
            Called when this <see cref="T:Zelda.Status.StatusEffect"/> gets disabled for the given statable Entity.
            </summary>
            <param name="user">
            The statable that disabled this <see cref="T:Zelda.Status.StatusEffect"/>.
            </param>
        </member>
        <member name="M:Zelda.Status.Procs.ProcEffect.OnHookInvoked(System.Object,Zelda.Status.Statable)">
            <summary>
            Called when the <see cref="P:Zelda.Status.Procs.ProcEffect.Hook"/> has been invoked.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
            <param name="invoker">
            The Statable component of the entity that has invoked this TimedProcEffect.
            </param>
        </member>
        <member name="M:Zelda.Status.Procs.ProcEffect.HasProcced(Zelda.Status.Statable)">
            <summary>
            Gets a value indicating whether this TimedProcEffect has procced;
            </summary>
            <param name="invoker">
            The Statable component of the entity that has invoked this TimedProcEffect.
            </param>
            <returns>
            Returns true if a proc has occurred;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Status.Procs.ProcEffect.OnProccedPrivate(Zelda.Status.Statable)">
            <summary>
            Called when this ProcEffect has actually procced.
            </summary>
            <param name="invoker">
            The Statable component of the entity that has invoked this TimedProcEffect.
            </param>
        </member>
        <member name="M:Zelda.Status.Procs.ProcEffect.OnProcced(Zelda.Status.Statable)">
            <summary>
            Called when this ProcEffect has actually procced.
            </summary>
            <param name="invoker">
            The Statable component of the entity that has invoked this TimedProcEffect.
            </param>
        </member>
        <member name="M:Zelda.Status.Procs.ProcEffect.Equals(Zelda.Status.StatusEffect)">
            <summary>
            Gets a value indicating whether the given StatusEffect is 'equal' to this StatusEffect.
            </summary>
            <param name="effect">
            The StatusEffect to compare with this.
            </param>
            <returns>
            Returns true if they capture the same 'concept';
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Status.Procs.ProcEffect.GetProcChanceDescription(Zelda.Status.Statable)">
            <summary>
            Gets a human-readable description on how this TimedStatusProcEffect is proccing.
            </summary>
            <param name="statable">
            The statable component of the entity that wants to receive the description.
            </param>
            <returns>
            A short localized string.
            </returns>
        </member>
        <member name="M:Zelda.Status.Procs.ProcEffect.SetupClone(Zelda.Status.Procs.ProcEffect)">
            <summary>
            Setups the given ProcEffect to be a clone of this ProcEffect.
            </summary>
            <param name="clone">
            The StatusEffect to setup as a clone of this StatusEffect.
            </param>
        </member>
        <member name="M:Zelda.Status.Procs.ProcEffect.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <remarks>
            This method should be called first when overriding this method
            in a sub-class. It writes the global header of the StatusEffect.
            </remarks>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Status.Procs.ProcEffect.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <remarks>
            This method should be called first when overriding this method
            in a sub-class. It reads the global header/data of the StatusEffect.
            </remarks>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Status.Procs.ProcEffect._hook">
            <summary>
            The storage field of the <see cref="P:Zelda.Status.Procs.ProcEffect.Hook"/> property.
            </summary>
        </member>
        <member name="T:Zelda.Status.Procs.TimedStatusProcEffect">
            <summary>
            Represents a <see cref="T:Zelda.Status.Procs.TimedStatusProcEffect"/> that applies
            </summary>
        </member>
        <member name="P:Zelda.Status.Procs.TimedStatusProcEffect.Effect">
            <summary>
            Gets or sets the StatusEffect that gets temporarily applies by this TimedStatusProcEffect.
            </summary>
        </member>
        <member name="P:Zelda.Status.Procs.TimedStatusProcEffect.Effects">
            <summary>
            Gets the list of StatusEffects that gets temporarily applied by this TimedStatusProcEffect.
            </summary>
        </member>
        <member name="P:Zelda.Status.Procs.TimedStatusProcEffect.Duration">
            <summary>
            Gets or sets the duration this TimedStatusProcEffect lasts.
            </summary>
        </member>
        <member name="P:Zelda.Status.Procs.TimedStatusProcEffect.Symbol">
            <summary>
            Gets or sets the symbol that shows up in the Buff Bar
            when this TimedStatusEffect procs.
            </summary>
        </member>
        <member name="P:Zelda.Status.Procs.TimedStatusProcEffect.SymbolColor">
            <summary>
            Gets or sets the Color the <see cref="P:Zelda.Status.Procs.TimedStatusProcEffect.Symbol"/> is tinted in.
            </summary>
        </member>
        <member name="M:Zelda.Status.Procs.TimedStatusProcEffect.GetDescription(Zelda.Status.Statable)">
            <summary>
            Gets a short localised description of this <see cref="T:Zelda.Status.StatusEffect"/>.
            </summary>
            <param name="statable">
            The statable component of the entity that wants to receive the description about this StatusEffect.
            </param>
            <returns>
            The localized description string.
            </returns>
        </member>
        <member name="M:Zelda.Status.Procs.TimedStatusProcEffect.GetEffectDescription(Zelda.Status.Statable)">
            <summary>
            Gets a localized string that descripes the effect of the proc effect of this TimedStatusProcEffect.
            </summary>
            <param name="statable">
            The statable component of the entity that wants to receive the description about this StatusEffect.
            </param>
            <returns>
            The localized effect description.
            </returns>
        </member>
        <member name="M:Zelda.Status.Procs.TimedStatusProcEffect.ModifyPowerBy(System.Single)">
            <summary>
            Modifies the power of this StatusEffect by the given factor.
            </summary>
            <param name="factor">
            The factor to change this StatusEffect by.
            </param>
        </member>
        <member name="M:Zelda.Status.Procs.TimedStatusProcEffect.OnProcced(Zelda.Status.Statable)">
            <summary>
            Called when this TimedStatusProcEffect has actually procced.
            </summary>
            <param name="invoker">
            The Statable component of the entity that has invoked this TimedProcEffect.
            </param>
        </member>
        <member name="M:Zelda.Status.Procs.TimedStatusProcEffect.Clone">
            <summary>
            Returns a clone of this TimedStatusProcEffect.
            </summary>
            <returns>
            The cloned StatusEffect.
            </returns>
        </member>
        <member name="M:Zelda.Status.Procs.TimedStatusProcEffect.SetupClone(Zelda.Status.Procs.TimedStatusProcEffect)">
            <summary>
            Setups the given TimedStatusProcEffect to be a clone of this TimedStatusProcEffect.
            </summary>
            <param name="clone">
            The StatusEffect to setup as a clone of this StatusEffect.
            </param>
        </member>
        <member name="M:Zelda.Status.Procs.TimedStatusProcEffect.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <remarks>
            This method should be called first when overriding this method
            in a sub-class. It writes the global header of the StatusEffect.
            </remarks>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Status.Procs.TimedStatusProcEffect.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <remarks>
            This method should be called first when overriding this method
            in a sub-class. It reads the global header/data of the StatusEffect.
            </remarks>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Status.Procs.TimedStatusProcEffect.aura">
            <summary>
            The TimedAura that applies the StatusEffect of this TimedStatusProcEffect.
            </summary>
        </member>
        <member name="T:Zelda.Status.Statable">
            <summary>
            Defines the <see cref="T:Zelda.Entities.Components.ZeldaComponent"/> that holds
            the RPG-related status information of the Entity that owns it.
            </summary>
        </member>
        <member name="E:Zelda.Status.Statable.Died">
            <summary>
            Fired when the <see cref="T:Zelda.Entities.ZeldaEntity"/> has died.
            </summary>
        </member>
        <member name="E:Zelda.Status.Statable.Damaged">
            <summary>
            Fired when the statable <see cref="T:Zelda.Entities.ZeldaEntity"/> has been damaged.
            </summary>
        </member>
        <member name="E:Zelda.Status.Statable.DamagedMana">
            <summary>
            Fired when the statable <see cref="T:Zelda.Entities.ZeldaEntity"/> has been damaged.
            </summary>
        </member>
        <member name="E:Zelda.Status.Statable.Restored">
            <summary>
            Fired when the power of the statable <see cref="T:Zelda.Entities.ZeldaEntity"/> has been restored (partially).
            </summary>
        </member>
        <member name="E:Zelda.Status.Statable.RestoredMana">
            <summary>
            Fired when the power of the statable <see cref="T:Zelda.Entities.ZeldaEntity"/> has been restored (partially).
            </summary>
        </member>
        <member name="E:Zelda.Status.Statable.MeleeHit">
            <summary>
            Fired when the <see cref="T:Zelda.Entities.ZeldaEntity"/> managed to hit something.
            </summary>
        </member>
        <member name="E:Zelda.Status.Statable.RangedHit">
            <summary>
            Fired when the <see cref="T:Zelda.Entities.ZeldaEntity"/> managed to hit something.
            </summary>
        </member>
        <member name="E:Zelda.Status.Statable.MagicHit">
            <summary>
            Fired when the <see cref="T:Zelda.Entities.ZeldaEntity"/> managed to hit something.
            </summary>
        </member>
        <member name="E:Zelda.Status.Statable.DefaultMeleeHit">
            <summary>
            Fired when the <see cref="T:Zelda.Entities.ZeldaEntity"/> hits something with a default attack.
            </summary>
        </member>
        <member name="E:Zelda.Status.Statable.DefaultRangedHit">
            <summary>
            Fired when the <see cref="T:Zelda.Entities.ZeldaEntity"/> hits something with a default attack.
            </summary>
        </member>
        <member name="E:Zelda.Status.Statable.DefaultMeleeCrit">
            <summary>
            Fired when the <see cref="T:Zelda.Entities.ZeldaEntity"/> crits something with a default attack.
            </summary>
        </member>
        <member name="E:Zelda.Status.Statable.MeleeCrit">
            <summary>
            Fired when the <see cref="T:Zelda.Entities.ZeldaEntity"/> managed to critically hit something.
            </summary>
        </member>
        <member name="E:Zelda.Status.Statable.RangedCrit">
            <summary>
            Fired when the <see cref="T:Zelda.Entities.ZeldaEntity"/> managed to critically hit something.
            </summary>
        </member>
        <member name="E:Zelda.Status.Statable.MagicCrit">
            <summary>
            Fired when the <see cref="T:Zelda.Entities.ZeldaEntity"/> managed to critically hit something.
            </summary>
        </member>
        <member name="E:Zelda.Status.Statable.GotMeleeHit">
            <summary>
            Fired when the <see cref="T:Zelda.Entities.ZeldaEntity"/> got hit.
            </summary>
        </member>
        <member name="E:Zelda.Status.Statable.GotRangedHit">
            <summary>
            Fired when the <see cref="T:Zelda.Entities.ZeldaEntity"/> got hit.
            </summary>
        </member>
        <member name="E:Zelda.Status.Statable.GotMagicHit">
            <summary>
            Fired when the <see cref="T:Zelda.Entities.ZeldaEntity"/> got hit.
            </summary>
        </member>
        <member name="E:Zelda.Status.Statable.GotMeleeCrit">
            <summary>
            Fired when the <see cref="T:Zelda.Entities.ZeldaEntity"/> got critically hit.
            </summary>
        </member>
        <member name="E:Zelda.Status.Statable.GotRangedCrit">
            <summary>
            Fired when the <see cref="T:Zelda.Entities.ZeldaEntity"/> got critically hit.
            </summary>
        </member>
        <member name="E:Zelda.Status.Statable.GotMagicCrit">
            <summary>
            Fired when the <see cref="T:Zelda.Entities.ZeldaEntity"/> got critically hit.
            </summary>
        </member>
        <member name="E:Zelda.Status.Statable.Blocked">
            <summary>
            Fired when the <see cref="T:Zelda.Entities.ZeldaEntity"/> blocked an attack.
            </summary>
        </member>
        <member name="E:Zelda.Status.Statable.GotBlocked">
            <summary>
            Fired when one of the attacks of the <see cref="T:Zelda.Entities.ZeldaEntity"/> got blocked.
            </summary>
        </member>
        <member name="P:Zelda.Status.Statable.IsFriendly">
            <summary>
            Gets or sets a value indicates whether
            this <see cref="T:Zelda.Status.Statable"/> is 'friendly' towards the player.
            </summary>
            <value>The default value is null.</value>
        </member>
        <member name="P:Zelda.Status.Statable.DamageDone">
            <summary>
            Gets the object that encapsulates the various
            damage done properties of the statable entity.
            </summary>
        </member>
        <member name="P:Zelda.Status.Statable.DamageTaken">
            <summary>
            Gets the object that encapsulates the various
            damage taken properties.
            </summary>
        </member>
        <member name="P:Zelda.Status.Statable.ChanceTo">
            <summary>
            Gets the object that encapsulates various
            chance-to properties.
            </summary>
        </member>
        <member name="P:Zelda.Status.Statable.ChanceToBe">
            <summary>
            Gets the object that encapsulates various
            chance-to-be properties.
            </summary>
        </member>
        <member name="P:Zelda.Status.Statable.Resistances">
            <summary>
            Gets the object that encapsulates the chances to resist 
            spells or attacks of a specific ElementSchool.
            </summary>
        </member>
        <member name="P:Zelda.Status.Statable.AuraList">
            <summary>
            Gets the list of <see cref="T:Zelda.Status.Aura"/>s active on this <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
        </member>
        <member name="P:Zelda.Status.Statable.Race">
            <summary>
            Gets or sets the race of the <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
        </member>
        <member name="P:Zelda.Status.Statable.Level">
            <summary>
            Gets or sets the level of the status object.
            </summary>
        </member>
        <member name="P:Zelda.Status.Statable.Armor">
            <summary>
            Gets or sets the total armor of the statable <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
        </member>
        <member name="P:Zelda.Status.Statable.BaseArmor">
            <summary>
            Gets or sets the base armor of the statable <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
        </member>
        <member name="P:Zelda.Status.Statable.AttackSpeedMelee">
            <summary>
            Gets or sets the melee attack speed (also called delay) of this status object.
            </summary>
        </member>
        <member name="P:Zelda.Status.Statable.AttackSpeedRanged">
            <summary>
            Gets or sets the melee ranged speed (also called delay) of this status object.
            </summary>
        </member>
        <member name="P:Zelda.Status.Statable.CastTimeModifier">
            <summary>
            Gets the modifier value that is applied to the cast-time
            of a spell to get the actual cast-time.
            </summary>
        </member>
        <member name="P:Zelda.Status.Statable.CritModifierMelee">
            <summary>
            Gets or sets the value an attack is multiplied with when it crits. 
            </summary>
        </member>
        <member name="P:Zelda.Status.Statable.CritModifierRanged">
            <summary>
            Gets or sets the value an attack is multiplied with when it crits. 
            </summary>
        </member>
        <member name="P:Zelda.Status.Statable.CritModifierSpell">
            <summary>
            Gets or sets the value an attack is multiplied with when it crits. 
            </summary>
        </member>
        <member name="P:Zelda.Status.Statable.CritModifierHeal">
            <summary>
            Gets the value a healing effect is multiplied with when it crits.
            </summary>
        </member>
        <member name="P:Zelda.Status.Statable.CritModifierBlock">
            <summary>
            Gets the value a block effect is multiplied with when it crits.
            </summary>
        </member>
        <member name="P:Zelda.Status.Statable.DamageMeleeMin">
            <summary>
            Gets or sets the physcial damage this <see cref="T:Zelda.Entities.ZeldaEntity"/> can do in melee-range. 
            </summary>
        </member>
        <member name="P:Zelda.Status.Statable.DamageMeleeMax">
            <summary>
            Gets or sets the physcial damage this <see cref="T:Zelda.Entities.ZeldaEntity"/> can do in melee-range. 
            </summary>
        </member>
        <member name="P:Zelda.Status.Statable.DamageRangedMin">
            <summary>
            Gets or sets the physcial damage this <see cref="T:Zelda.Entities.ZeldaEntity"/> can do in ranged combat. 
            </summary>
        </member>
        <member name="P:Zelda.Status.Statable.DamageRangedMax">
            <summary>
            Gets or sets the physcial damage this <see cref="T:Zelda.Entities.ZeldaEntity"/> can do in ranged combat. 
            </summary>
        </member>
        <member name="P:Zelda.Status.Statable.DamageMagic">
            <summary>
            Gets or sets the magical damage bonus this <see cref="T:Zelda.Entities.ZeldaEntity"/> has. 
            </summary>
        </member>
        <member name="P:Zelda.Status.Statable.Life">
            <summary>
            Gets or sets the current life of this <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
        </member>
        <member name="P:Zelda.Status.Statable.BaseMaximumLife">
            <summary>
            Gets or sets the base value the <see cref="P:Zelda.Status.Statable.MaximumLife"/> value is based on.
            </summary>
        </member>
        <member name="P:Zelda.Status.Statable.MaximumLife">
            <summary>
            Gets or sets the maximum life of this <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
        </member>
        <member name="P:Zelda.Status.Statable.LifeRegeneration">
            <summary>
            Gets or sets the amount of life regenerated each regen-tick.
            </summary>
        </member>
        <member name="P:Zelda.Status.Statable.Mana">
            <summary>
            Gets or sets the current mana of this <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
        </member>
        <member name="P:Zelda.Status.Statable.MaximumMana">
            <summary>
            Gets or sets the maximum mana of this <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
        </member>
        <member name="P:Zelda.Status.Statable.ManaRegeneration">
            <summary>
            Gets or sets the amount of life regenerated each regen-tick.
            </summary>
        </member>
        <member name="P:Zelda.Status.Statable.CanBlock">
            <summary>
             Gets or sets the value that states whether the <see cref="T:Zelda.Entities.ZeldaEntity"/> can block attacks.
            </summary>
        </member>
        <member name="P:Zelda.Status.Statable.ChanceToBlock">
            <summary>
            Gets or sets the value that stores the chance for the <see cref="T:Zelda.Entities.ZeldaEntity"/> to block an attack.
            Only relevant if canBlock is true.
            </summary>
        </member>
        <member name="P:Zelda.Status.Statable.BlockValue">
            <summary>
            Gets or sets the value that stores the block 'power' of the <see cref="T:Zelda.Entities.ZeldaEntity"/> - aka how much damage is blocked.
            Only relevant if canBlock is true.
            </summary>
        </member>
        <member name="P:Zelda.Status.Statable.IsDead">
            <summary>
            Gets a value indicating whether the statable ZeldaEntity is dead.
            </summary>
        </member>
        <member name="P:Zelda.Status.Statable.IsInvincible">
            <summary>
            Gets or sets a value indicating whether this Statable is invincible.
            </summary>
        </member>
        <member name="P:Zelda.Status.Statable.IsTempInvincible">
            <summary>
            Gets a value indicating whether this Statable is temporary invincible.
            </summary>
        </member>
        <member name="M:Zelda.Status.Statable.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Status.Statable"/> class.
            </summary>
        </member>
        <member name="M:Zelda.Status.Statable.#ctor(Zelda.Status.Damage.Containers.DamageDoneContainer,Zelda.Status.Containers.ChanceToContainer,Zelda.Status.Containers.ChanceToBeContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Status.Statable"/> class.
            </summary>
            <param name="damageDoneContainer">
            The DamageDoneContainer that should be injected into the new Statable component.
            </param>
            <param name="chanceToContainer">
            The ChanceToContainer that should be injected into the new Statable component.
            </param>
            <param name="chanceToBeContainer">
            The ChanceToBeContainer that should be injected into the new Statable component.
            </param>
        </member>
        <member name="M:Zelda.Status.Statable.Setup(Zelda.IZeldaServiceProvider)">
            <summary>
            Setups this Statable component.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Status.Statable.TryHit(Zelda.Status.Statable)">
            <summary>
            Rolls the dice; deciding whether an attack has hit or missed.
            </summary>
            <param name="target">
            The target of the attack.
            </param>
            <returns>
            true if this Statable has missed the specified <paramref name="target"/> Statable;
            otherwise false if it has hit.
            </returns>
        </member>
        <member name="M:Zelda.Status.Statable.TryDodge(Zelda.Status.Statable)">
            <summary>
            Rolls the dice; deciding whether an attack against this Statable was dodged.
            </summary>
            <param name="attacker">
            The Statable that is attacking this Statable.
            </param>
            <returns>
            true if this Statable has dodged the specified <paramref name="attacker"/> Statable;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Status.Statable.TryParry(Zelda.Status.Statable)">
            <summary>
            Rolls the dice; deciding whether an attack against this Statable was parried.
            </summary>
            <param name="attacker">
            The Statable that is attacking this Statable.
            </param>
            <returns>
            true if this Statable has parried the specified <paramref name="attacker"/> Statable;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Status.Statable.TryCrit(Zelda.Status.Statable)">
            <summary>
            Rolls the dice; deciding whether an attack against
            the specified <paramref name="target"/> Statable has been a critical attack.
            </summary>
            <param name="target">
            The target of the attack.
            </param>
            <returns>
            true if the attack of this Statable has been a critical attack
            against the specified <paramref name="target"/> Statable;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Status.Statable.TryCrit(Zelda.Status.Statable,System.Single)">
            <summary>
            Rolls the dice; deciding whether an attack against
            the specified <paramref name="target"/> Statable has been a critical attack.
            </summary>
            <param name="target">
            The target of the attack.
            </param>
            <param name="extraCritChance">
            The extra chance the attack will be a critical attack (in percent).
            </param>
            <returns>
            true if the attack of this Statable has been a critical attack
            against the specified <paramref name="target"/> Statable;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Status.Statable.Update(Atom.IUpdateContext)">
            <summary>
            Updates this <see cref="T:Zelda.Status.Statable"/> component-
            </summary>
            <param name="updateContext">
            The current IUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Status.Statable.UpdateInvincible(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates the IsInvincible state of the ZeldaEntity
            if isInvincibleTicking is true.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Status.Statable.UpdateRegenaration(Zelda.ZeldaUpdateContext)">
            <summary>
            Regenerates the life/mana of the ZeldaEntity.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Status.Statable.GetPhysicalMitigationOf(Zelda.Status.Statable)">
            <summary>
            Calculates the mitigation multiplier a physical attack of this statable
            against the given <paramref name="target"/>.
            </summary>
            <param name="target">
            The target of the physical attack.
            </param>
            <returns>
            The mitigation multiplier that simply gets applied to the damage.
            </returns>
        </member>
        <member name="M:Zelda.Status.Statable.GetPhysicalMitigationOf(System.Int32,System.Int32)">
            <summary>
            Calculates the mitigation multiplier a physical attack of this statable
            against a target with the given <paramref name="targetArmor"/> and <paramref name="targetLevel"/>.
            </summary>
            <param name="targetArmor">
            The armor of the target of the physical attack.
            </param>
            <param name="targetLevel">
            The level of the target of the physical attack.
            </param>
            <returns>
            The mitigation multiplier that simply gets applied to the damage.
            </returns>
        </member>
        <member name="M:Zelda.Status.Statable.GetPercentageOf(Zelda.Status.LifeMana,System.Single)">
            <summary>
            Gets the given percentage of the specified power type of the extended-statable ZeldaEntity.
            </summary>
            <param name="powerType">
            The power type.
            </param>
            <param name="percentage">
            The percentage to get; where 1 equals 100%.
            </param>
            <returns>The requested value.</returns>
        </member>
        <member name="M:Zelda.Status.Statable.GetRestoreNeeded(Zelda.Status.LifeMana)">
            <summary>
            Helpers method that gets how much of the given power type
            is needed to be restored before the statable ZeldaEntity
            is fully restored.
            </summary>
            <param name="powerType">
            The power type to query.
            </param>
            <returns>
            The amount needed to restore.
            </returns>
        </member>
        <member name="M:Zelda.Status.Statable.LoseLife(Zelda.Attacks.AttackDamageResult)">
            <summary>
            Reduces the life of the <see cref="T:Zelda.Entities.ZeldaEntity"/> given the given
            <see cref="T:Zelda.Attacks.AttackDamageResult"/>.
            </summary>
            <param name="result">
            </param>
        </member>
        <member name="M:Zelda.Status.Statable.LoseMana(Zelda.Attacks.AttackDamageResult)">
            <summary>
            Reduces the mana of the <see cref="T:Zelda.Entities.ZeldaEntity"/> by the amount
            encapsulates by the given <see cref="T:Zelda.Attacks.AttackDamageResult"/>.
            </summary>
            <param name="result">
            The AttackDamageResult encapsulating the amount of mana the 
            entity should lose.
            </param>
        </member>
        <member name="M:Zelda.Status.Statable.LoseMana(System.Int32)">
            <summary>
            Reduces the mana of the <see cref="T:Zelda.Entities.ZeldaEntity"/> by the given amount .
            </summary>
            <param name="amount">
            The amount of mana</param>
        </member>
        <member name="M:Zelda.Status.Statable.Restore(Zelda.Status.LifeMana,Zelda.Attacks.AttackDamageResult)">
            <summary>
            Restores the ZeldaEntity's Power by the amount specified 
            with the given <see cref="T:Zelda.Attacks.AttackDamageResult"/>.
            </summary>
            <param name="powerType">
            The power to restore.
            </param>
            <param name="result">
            The structure that encapsulates the amount restored.
            </param>
        </member>
        <member name="M:Zelda.Status.Statable.RestoreLife(Zelda.Attacks.AttackDamageResult)">
            <summary>
            Heals the ZeldaEntity by the by the amount specified 
            with the given <see cref="T:Zelda.Attacks.AttackDamageResult"/>.
            </summary>
            <param name="result">
            The structure that encapsulates the amount restored.
            </param>
        </member>
        <member name="M:Zelda.Status.Statable.RestoreMana(Zelda.Attacks.AttackDamageResult)">
            <summary>
            Restores the ZeldaEntity's mana by the amount specified 
            with the given <see cref="T:Zelda.Attacks.AttackDamageResult"/>.
            </summary>
            <param name="result">
            The structure that encapsulates the amount restored.
            </param>
        </member>
        <member name="M:Zelda.Status.Statable.RestoreMana(System.Int32)">
            <summary>
            Restores the ZeldaEntity's mana by the specified amount.
            </summary>
            <param name="amount">
            The amount of mana to restore.
            </param>
        </member>
        <member name="M:Zelda.Status.Statable.RestoreFully">
            <summary>
            Fully restores the life and mana of this statable ZeldaEntity.
            </summary>
        </member>
        <member name="M:Zelda.Status.Statable.TryBlock(Zelda.Status.Statable,Atom.Math.RandMT)">
            <summary>
            Helper method that returns whether an attack was blocked,
            based on the <see cref="P:Zelda.Status.Statable.ChanceToBlock"/> and <see cref="P:Zelda.Status.Statable.CanBlock"/> properties.
            </summary>
            <param name="attacker">
            The statable component of the Entity that is attacking this statable Entity.
            </param>
            <param name="rand">
            A random number generator.
            </param>
            <returns>
            True if the attack was blocked;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Status.Statable.HandleBlock(System.Int32,Zelda.Status.Statable,Atom.Math.RandMT)">
            <summary>
            Calculates the damage done to the statable Entity, 
            after blocking the attack.
            </summary>
            <param name="damage">
            The input damage.
            </param>
            <param name="attacker">
            The statable component of the Entity that is attacking this statable Entity.
            </param>
            <param name="rand">
            A random number generator.
            </param>
            <returns>
            The blocked output damage.
            </returns>
        </member>
        <member name="M:Zelda.Status.Statable.Refresh_MovementSpeed">
            <summary>
            Refreshes the Movement Speed of the statable <see cref="T:Zelda.Entities.ZeldaEntity"/>
            by taking into account the <see cref="T:Zelda.Status.MovementSpeedEffect"/>s currently active
            on the ZeldaEntity.
            </summary>
            <seealso cref="T:Zelda.Status.MovementSpeedEffect"/>
        </member>
        <member name="M:Zelda.Status.Statable.Refresh_TotalArmor">
            <summary>
            Refreshes the total <see cref="P:Zelda.Status.Statable.Armor"/> of the statable <see cref="T:Zelda.Entities.ZeldaEntity"/>
            by taking into account the <see cref="T:Zelda.Status.ArmorEffect"/>s currently active
            on the ZeldaEntity.
            </summary>
            <seealso cref="T:Zelda.Status.ArmorEffect"/>
        </member>
        <member name="M:Zelda.Status.Statable.Refresh_TotalLife">
            <summary>
            Refreshes the MaximumLife of this statable entity.
            </summary>
        </member>
        <member name="M:Zelda.Status.Statable.OnDied">
            <summary>
            Triggers the <see cref="E:Zelda.Status.Statable.Died"/> event.
            </summary>
        </member>
        <member name="M:Zelda.Status.Statable.OnMeleeHit">
            <summary>
            Triggers the <see cref="E:Zelda.Status.Statable.MeleeHit"/> event.
            Should only be used from inside an <see cref="T:Zelda.Attacks.AttackDamageMethod"/>.
            </summary>
        </member>
        <member name="M:Zelda.Status.Statable.OnRangedHit">
            <summary>
            Triggers the <see cref="E:Zelda.Status.Statable.RangedHit"/> event.
            Should only be used from inside an <see cref="T:Zelda.Attacks.AttackDamageMethod"/>.
            </summary>
        </member>
        <member name="M:Zelda.Status.Statable.OnMagicHit">
            <summary>
            Triggers the <see cref="E:Zelda.Status.Statable.MagicHit"/> event.
            Should only be used from inside an <see cref="T:Zelda.Attacks.AttackDamageMethod"/>.
            </summary>
        </member>
        <member name="M:Zelda.Status.Statable.OnNormalMeleeHit(Zelda.Status.Statable)">
            <summary>
            Raises the <see cref="E:Zelda.Status.Statable.DefaultMeleeHit"/> event.
            Should only be used from inside an <see cref="T:Zelda.Attacks.AttackDamageMethod"/>.
            </summary>
            <param name="target">
            The target that got hit.
            </param>
        </member>
        <member name="M:Zelda.Status.Statable.OnNormalMeleeCrit(Zelda.Status.Statable)">
            <summary>
            Raises the <see cref="E:Zelda.Status.Statable.DefaultMeleeCrit"/> and <see cref="E:Zelda.Status.Statable.MeleeCrit"/> events.
            Should only be used from inside an <see cref="T:Zelda.Attacks.AttackDamageMethod"/>.
            </summary>
            <param name="target">
            The target that got hit.
            </param>
        </member>
        <member name="M:Zelda.Status.Statable.OnNormalRangedHit(Zelda.Status.Statable)">
            <summary>
            Triggers the <see cref="E:Zelda.Status.Statable.DefaultRangedHit"/> event.
            Should only be used from inside an <see cref="T:Zelda.Attacks.AttackDamageMethod"/>.
            </summary>
            <param name="target">
            The target that got hit.
            </param>
        </member>
        <member name="M:Zelda.Status.Statable.OnMeleeCrit">
            <summary>
            Triggers the <see cref="E:Zelda.Status.Statable.MeleeCrit"/> event.
            Should only be used from inside an <see cref="T:Zelda.Attacks.AttackDamageMethod"/>.
            </summary>
        </member>
        <member name="M:Zelda.Status.Statable.OnRangedCrit">
            <summary>
            Triggers the <see cref="E:Zelda.Status.Statable.RangedCrit"/> event.
            Should only be used from inside an <see cref="T:Zelda.Attacks.AttackDamageMethod"/>.
            </summary>
        </member>
        <member name="M:Zelda.Status.Statable.OnMagicCrit">
            <summary>
            Triggers the <see cref="E:Zelda.Status.Statable.MagicCrit"/> event.
            Should only be used from inside an <see cref="T:Zelda.Attacks.AttackDamageMethod"/>.
            </summary>
        </member>
        <member name="M:Zelda.Status.Statable.OnGotMeleeHit">
            <summary>
            Triggers the <see cref="E:Zelda.Status.Statable.GotMeleeHit"/> event.
            Should only be used from inside an <see cref="T:Zelda.Attacks.AttackDamageMethod"/>.
            </summary>
        </member>
        <member name="M:Zelda.Status.Statable.OnGotRangedHit">
            <summary>
            Triggers the <see cref="E:Zelda.Status.Statable.GotRangedHit"/> event.
            Should only be used from inside an <see cref="T:Zelda.Attacks.AttackDamageMethod"/>.
            </summary>
        </member>
        <member name="M:Zelda.Status.Statable.OnGotMagicHit">
            <summary>
            Triggers the <see cref="E:Zelda.Status.Statable.GotMagicHit"/> event.
            Should only be used from inside an <see cref="T:Zelda.Attacks.AttackDamageMethod"/>.
            </summary>
        </member>
        <member name="M:Zelda.Status.Statable.OnGotMeleeCrit">
            <summary>
            Triggers the <see cref="E:Zelda.Status.Statable.GotMeleeCrit"/> event.
            Should only be used from inside an <see cref="T:Zelda.Attacks.AttackDamageMethod"/>.
            </summary>
        </member>
        <member name="M:Zelda.Status.Statable.OnGotRangedCrit">
            <summary>
            Triggers the <see cref="E:Zelda.Status.Statable.GotRangedCrit"/> event.
            Should only be used from inside an <see cref="T:Zelda.Attacks.AttackDamageMethod"/>.
            </summary>
        </member>
        <member name="M:Zelda.Status.Statable.OnGotMagicCrit">
            <summary>
            Triggers the <see cref="E:Zelda.Status.Statable.GotMagicCrit"/> event.
            Should only be used from inside an <see cref="T:Zelda.Attacks.AttackDamageMethod"/>.
            </summary>
        </member>
        <member name="M:Zelda.Status.Statable.OnBlocked">
            <summary>
            Triggers the <see cref="E:Zelda.Status.Statable.Blocked"/> event.
            </summary>
        </member>
        <member name="M:Zelda.Status.Statable.OnGotBlocked">
            <summary>
            Triggers the <see cref="E:Zelda.Status.Statable.GotBlocked"/> event.
            </summary>
        </member>
        <member name="M:Zelda.Status.Statable.SetupClone(Zelda.Status.Statable)">
            <summary>
            Setups the given <see cref="T:Zelda.Status.Statable"/> component to be a clone of this <see cref="T:Zelda.Status.Statable"/> component.
            </summary>
            <param name="clone">
            The object to setup as a clone.
            </param>
        </member>
        <member name="M:Zelda.Status.Statable.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Status.Statable.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Status.Statable.MakeTempInvincible(System.Single)">
            <summary>
            Makes the statable ZeldaEntity invincible for
            the given amount of <paramref name="time"/>.
            </summary>
            <param name="time">
            The time in seconds the statable ZeldaEntity should go invincible.
            </param>
            <exception cref="T:System.ArgumentException">
            If <paramref name="time"/> is negative.
            </exception>
        </member>
        <member name="F:Zelda.Status.Statable.race">
            <summary>
            The race of the <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
        </member>
        <member name="F:Zelda.Status.Statable.auraList">
            <summary>
            The list of <see cref="T:Zelda.Status.Aura"/>s active on the <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
        </member>
        <member name="F:Zelda.Status.Statable.damageMeleeMin">
            <summary> 
            The final physcial damage the <see cref="T:Zelda.Entities.ZeldaEntity"/> does in melee-range.
            </summary>
        </member>
        <member name="F:Zelda.Status.Statable.damageMeleeMax">
            <summary> 
            The final physcial damage the <see cref="T:Zelda.Entities.ZeldaEntity"/> does in melee-range.
            </summary>
        </member>
        <member name="F:Zelda.Status.Statable.damageRangedMin">
            <summary>
            The final physcial damage the <see cref="T:Zelda.Entities.ZeldaEntity"/> does in ranged-combat.
            </summary>
        </member>
        <member name="F:Zelda.Status.Statable.damageRangedMax">
            <summary>
            The final physcial damage the <see cref="T:Zelda.Entities.ZeldaEntity"/> does in ranged-combat.
            </summary>
        </member>
        <member name="F:Zelda.Status.Statable.attackSpeedMelee">
            <summary>
            The attack speed (also called delay) of the status object.
            </summary>
        </member>
        <member name="F:Zelda.Status.Statable.attackSpeedRanged">
            <summary>
            The attack speed (also called delay) of the status object.
            </summary>
        </member>
        <member name="F:Zelda.Status.Statable.castTimeModifier">
            <summary>
            The modifier value that is applied to the cast-time
            of a spell to get the actual cast-time.
            </summary>
        </member>
        <member name="F:Zelda.Status.Statable.life">
            <summary>
            The current life of the <see cref="T:Zelda.Entities.ZeldaEntity"/>.</summary>
        </member>
        <member name="F:Zelda.Status.Statable.maximumLife">
            <summary> The maximum life of the <see cref="T:Zelda.Entities.ZeldaEntity"/>. </summary>
        </member>
        <member name="F:Zelda.Status.Statable.lifeRegeneration">
            <summary> The amount of life regenerated each regen-tick. </summary>
        </member>
        <member name="F:Zelda.Status.Statable.mana">
            <summary> The current mana of the <see cref="T:Zelda.Entities.ZeldaEntity"/>. </summary>
        </member>
        <member name="F:Zelda.Status.Statable.maximumMana">
            <summary> The maximum mana of the <see cref="T:Zelda.Entities.ZeldaEntity"/>. </summary>
        </member>
        <member name="F:Zelda.Status.Statable.manaRegeneration">
            <summary> The amount of mana regenerated each regen-tick. </summary>
        </member>
        <member name="F:Zelda.Status.Statable.regenTick">
            <summary>
            The time left until the object regenerates life/mana again.
            </summary>
        </member>
        <member name="F:Zelda.Status.Statable.RegenTime">
            <summary>
            The time between Regeneration Ticks.
            </summary>
        </member>
        <member name="F:Zelda.Status.Statable.level">
            <summary>
            The level of the statable <see cref="T:Zelda.Entities.ZeldaEntity"/>.
            </summary>
        </member>
        <member name="F:Zelda.Status.Statable.armor">
            <summary> 
            The total armor of the statable <see cref="T:Zelda.Entities.ZeldaEntity"/>. 
            </summary>
        </member>
        <member name="F:Zelda.Status.Statable.baseArmor">
            <summary> 
            The base armor of the statable <see cref="T:Zelda.Entities.ZeldaEntity"/>, not taking into account any modifiers.
            </summary>
        </member>
        <member name="F:Zelda.Status.Statable.chanceTo">
            <summary>
            Encapsulates the various chance-to properties.
            </summary>
        </member>
        <member name="F:Zelda.Status.Statable.chanceToBe">
            <summary>
            Encapsulates the various chance-to-be properties.
            </summary>
        </member>
        <member name="F:Zelda.Status.Statable.damageDone">
            <summary>
            Encapsulates the various kind of damage done properties.
            </summary>
        </member>
        <member name="F:Zelda.Status.Statable.damageTaken">
            <summary>
            Encapsulates the various kind of damage taken properties.
            </summary>
        </member>
        <member name="F:Zelda.Status.Statable.resistances">
            <summary>
            Encapsulates the chances to resist spell or attacks of a specific ElementSchool.
            </summary>
        </member>
        <member name="F:Zelda.Status.Statable.rand">
            <summary>
            A random number generator.
            </summary>
        </member>
        <member name="F:Zelda.Status.Statable.canBlock">
            <summary>
            States whether the <see cref="T:Zelda.Entities.ZeldaEntity"/> can block attacks.
            </summary>
        </member>
        <member name="F:Zelda.Status.Statable.blockValue">
            <summary>
            Stores the block 'power' of the <see cref="T:Zelda.Entities.ZeldaEntity"/> - aka how much damage is blocked.
            Only relevant if canBlock is true.
            </summary>
        </member>
        <member name="F:Zelda.Status.Statable.isInvincible">
            <summary>
            States whether the object is invincible.
            </summary>
        </member>
        <member name="F:Zelda.Status.Statable.isTempInvincible">
            <summary>
            States whether the IsInvincible state of the object is only temporary.
            </summary>
        </member>
        <member name="F:Zelda.Status.Statable.invincibleTick">
            <summary>
            Stores how much time is left until the object wents non invincible again.
            Only relevant if isInvincible and isInvincibleTicking are both true.
            </summary>
        </member>
        <member name="T:Zelda.Status.StatusCalc">
            <summary>
            Static utility class that encapsulates all status related calculations.
            </summary>
        </member>
        <member name="M:Zelda.Status.StatusCalc.GetAvailableItemBudget(System.Int32,Zelda.Items.ItemQuality,Zelda.Items.EquipmentSlot)">
            <summary>
            Gets the available number of Item Points for the item with the given semantics.
            </summary>
            <param name="itemLevel">
            The level of the item.
            </param>
            <param name="quality">
            The quality of the item.
            </param>
            <param name="slot">
            The slot the item goes in.
            </param>
            <returns>
            The item budget available to be spend.
            </returns>
        </member>
        <member name="M:Zelda.Status.StatusCalc.GetItemBudgetUsed(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates the item budget used by an item, only taking into account the basic stats of the item.
            </summary>
            <param name="strength">The total strength of the item.</param>
            <param name="dexterity">The total dexterity of the item.</param>
            <param name="agility">The total agility of the item.</param>
            <param name="vitality">The total vitality of the item.</param>
            <param name="intelligence">The total intelligence of the item.</param>
            <param name="luck">The total luck of the item.</param>
            <returns>
            The calculated item budget.
            </returns>
        </member>
        <member name="M:Zelda.Status.StatusCalc.GetItemQualityMod(Zelda.Items.ItemQuality)">
            <summary>
            Gets the modifier value for the given ItemQuality.
            </summary>
            <remarks>
            This value is used to calculate the item-point Budget of an item.
            </remarks>
            <param name="quality">
            The ItemQuality to aquire the modification value for.
            </param>
            <returns>
            The modifier value for the given ItemQuality.
            </returns>
        </member>
        <member name="M:Zelda.Status.StatusCalc.GetItemQualityModExtra(Zelda.Items.ItemQuality)">
            <summary>
            Gets the extra modifier value for the given ItemQuality.
            </summary>
            <remarks>
            This value is used to calculate the item-point Budget of an item.
            </remarks>
            <param name="quality">
            The ItemQuality to aquire the extra modification value for.
            </param>
            <returns>
            The extra modifier value for the given ItemQuality.
            </returns>
        </member>
        <member name="M:Zelda.Status.StatusCalc.GetSlotMod(Zelda.Items.EquipmentSlot)">
            <summary>
            Gets a modifier value for the given <see cref="T:Zelda.Items.EquipmentSlot"/>.
            </summary>
            <remarks>
            This value is used to calculate the item budget available for a specific item.
            </remarks>
            <param name="slot">
            The EquipmentSlot to aquire the slot modifier value for.
            </param>
            <returns>
            The slot modifier value for the given EquipmentSlot.
            </returns>
        </member>
        <member name="M:Zelda.Status.StatusCalc.GetStatMod(Zelda.Status.Stat)">
            <summary>
            Gets the value of how much the specified stat costs in terms of item budget.
            </summary>
            <remarks>
            This value is used to calculate the item budget a stat costs.
            </remarks>
            <param name="stat">
            The related Stat.
            </param>
            <returns>
            The modifier value for the given Stat.
            </returns>
        </member>
        <member name="M:Zelda.Status.StatusCalc.GetNormalizedSpeed(Zelda.Items.WeaponType)">
            <summary>
            Gets the normalized weapon speed for the weapon of the given <see cref="T:Zelda.Items.WeaponType"/>.
            </summary>
            <param name="weaponType">
            The input WeaponType.
            </param>
            <returns>
            The normalized speed for the given WeaponType.
            </returns>
        </member>
        <member name="M:Zelda.Status.StatusCalc.ConvertAttackSpeedRating(System.Single,System.Int32)">
            <summary>
            Converts the given rating value into an actual modifying value.
            </summary>
            <param name="rating">
            The input rating value.
            </param>
            <param name="level">
            The level of the statable Entity that wants to use the rating value.
            </param>
            <returns>
            The actual converted value.
            </returns>
        </member>
        <member name="M:Zelda.Status.StatusCalc.GetAttackSpeed(System.Single,System.Int32,System.Single,System.Single,System.Int32)">
            <summary>
            Gets the final attack speed based on the given parameters.
            </summary>
            <param name="weaponSpeed">The speed of the player's weapon.</param>
            <param name="agility">The total agility of the player.</param>
            <param name="multiplier">The attack-speed multiplier value.</param>
            <param name="ratingValue">
            The attack speed rating value.
            </param>
            <param name="level">
            The level of the statable Entity.
            </param>
            <returns>The attack speed of the player.</returns>
        </member>
        <member name="M:Zelda.Status.StatusCalc.GetCastSpeedModifier(System.Int32,System.Single,System.Single,System.Int32)">
            <summary>
            Gets the cast speed modifier value of the player.
            </summary>
            <param name="dexterity">
            The total dexterity of the player.
            </param>
            <param name="ratingValue">
            The spell haste rating value.
            </param>
            <param name="percentualValue">
            The percentual speed modifier value.
            </param>
            <param name="level">
            The level of the player.
            </param>
            <returns>
            The cast speed modifier value.
            </returns>
        </member>
        <member name="M:Zelda.Status.StatusCalc.GetExperienceNeeded(System.Int32)">
            <summary>
            Gets the expierence needed for the specified level to levelup.
            </summary>
            <param name="level">
            The input level.
            </param>
            <returns>
            The experience required for the given level.
            </returns>
        </member>
        <member name="M:Zelda.Status.StatusCalc.GetExperienceRecursive(System.Int32)">
            <summary>
            Gets the expierence needed for the specified level to levelup.
            </summary>
            <param name="level">
            The input level.
            </param>
            <returns>
            The experience required for the given level.
            </returns>
        </member>
        <member name="M:Zelda.Status.StatusCalc.GetStatPointGainedForLevelUp(System.Int32)">
            <summary>
            Gets the amount of extra Stat Points one gains at the specified <paramref name="level"/>.
            </summary>
            <param name="level">
            The new level.
            </param>
            <returns>
            The number of stat points awarded at the next level.
            </returns>
        </member>
        <member name="M:Zelda.Status.StatusCalc.EstimateStatPointsGained(System.Int32)">
            <summary>
            Tries to estimate the number of stat points the player has got.
            </summary>
            <param name="level">
            The level of the player.
            </param>
            <returns>
            The number of stat points.
            </returns>
        </member>
        <member name="M:Zelda.Status.StatusCalc.GetStatPointsNeeded(System.Int32)">
            <summary>
            Gets the number of stat-points needed to increase the specified <paramref name="baseValue"/> by one.
            </summary>
            <param name="baseValue">
            The base value of the stat.
            </param>
            <returns>
            The amount of stat-points required.
            </returns>
        </member>
        <member name="M:Zelda.Status.StatusCalc.GetMagicFindExtra(System.Int32)">
            <summary>
            Gets the amount of additional Magic Find provided by Luck.
            </summary>
            <param name="luck">
            The total luck of the player.
            </param>
            <returns>
            The magic find value awarded by luck.
            </returns>
        </member>
        <member name="M:Zelda.Status.StatusCalc.GetMitigationFromArmor(System.Int32,System.Int32)">
            <summary>
            Gets the mitigation % the armor provides against an object with the specified level.
            </summary>
            <param name="targetArmor">
            The armor of the target.
            </param>
            <param name="attackerLevel">
            The level of the attacker.
            </param>
            <returns>
            The mitigation armor provides.
            </returns>
        </member>
        <member name="M:Zelda.Status.StatusCalc.GetAdditionalArmor(System.Int32)">
            <summary>
            Gets the additional armor provided by agility and luck.
            </summary>
            <param name="agility">The total agility of the player.</param>
            <returns>The additional armor.</returns>
        </member>
        <member name="M:Zelda.Status.StatusCalc.GetAdditionalBlockValue(System.Int32)">
            <summary>
            Gets the additional block value provided by vitality.
            </summary>
            <param name="strength">
            The total strength of the player.
            </param>
            <returns>
            The additional block value.
            </returns>
        </member>
        <member name="M:Zelda.Status.StatusCalc.GetArmorIgnoreMultiplier(System.Single,System.Single,System.Int32)">
            <summary>
            Calculates the armor ignore multiplier value.
            </summary>
            <param name="percentalValue">The percentual armor ignore value.</param>
            <param name="ratingValue">The rating armor ignore value.</param>
            <param name="level">The level of the player.</param>
            <returns>The calculated multiplier.</returns>
        </member>
        <member name="M:Zelda.Status.StatusCalc.ConvertArmorIgnoreRating(System.Single,System.Int32)">
            <summary>
            Converts armor ignore rating into armor ignore %.
            </summary>
            <param name="rating">The rating value.</param>
            <param name="level">The level of the player.</param>
            <returns>The coverted value.</returns>
        </member>
        <member name="M:Zelda.Status.StatusCalc.ConvertRating(System.Single,System.Int32)">
            <summary>
            Converts the given rating value into a fixed value.
            </summary>
            <param name="rating">The rating value to convert.</param>
            <param name="level">The level of the entity.</param>
            <returns>The converted fixed ChanceToStatus value.</returns>
        </member>
        <member name="M:Zelda.Status.StatusCalc.GetMovementSpeed(System.Single,System.Int32,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Calculates the movement speed of an extended-statable/moveable ZeldaEntity.
            </summary>
            <param name="baseSpeed">The base movement speed.</param>
            <param name="agility">The total agility of the extended-statable entity.</param>
            <param name="addValue">The fixed value.</param>
            <param name="mulValue">The multiplicative value.</param>
            <param name="ratingValue">The rating value.</param>
            <param name="level">The level of the entity.</param>
            <returns>
            The movement speed.
            </returns>
        </member>
        <member name="M:Zelda.Status.StatusCalc.GetMovementSpeed(System.Single,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Calculates the movement speed of a statable/moveable ZeldaEntity.
            </summary>
            <param name="baseSpeed">The base movement speed.</param>
            <param name="addValue">The fixed value.</param>
            <param name="mulValue">The multiplicative value.</param>
            <param name="ratingValue">The rating value.</param>
            <param name="level">The level of the entity.</param>
            <returns>
            The movement speed.
            </returns>
        </member>
        <member name="M:Zelda.Status.StatusCalc.ConvertResistRating(System.Single,System.Int32)">
            <summary>
            Converts the given resistance rating value into the actual chance to resist.
            </summary>
            <param name="rating">The input resist rating value.</param>
            <param name="level">The level of the statable entity.</param>
            <returns>The chance to resist the given rating provides.</returns>
        </member>
        <member name="M:Zelda.Status.StatusCalc.GetChanceToBeResisted(System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Gets the chance for magical attacks to be resisted.
            </summary>
            <param name="fixedValue">
            The fixed chance to be resisted.
            </param>
            <param name="ratingValue">
            The rating value that is converted into a fixed chance.
            </param>
            <param name="multiplicativeValue">
            The multiplier that is applied to the result.
            </param>
            <param name="level">
            The level of the entity.
            </param>
            <returns>
            The final additional chance for spells to not be resisted.
            </returns>
        </member>
        <member name="M:Zelda.Status.StatusCalc.GetChanceToResist(System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Gets the chance to resist a magical attack.
            </summary>
            <param name="fixedValue">The fixed resist chance.</param>
            <param name="ratingValue">The resist rating value.</param>
            <param name="multiplicativeValue">The multiplicator value to apply.</param>
            <param name="level">The level of the statable entity.</param>
            <returns>The final chance to resist the given rating provides.</returns>
        </member>
        <member name="M:Zelda.Status.StatusCalc.ConvertRating(System.Single,Zelda.Status.ChanceToStatus,System.Int32)">
            <summary>
            Converts the given <see cref="T:Zelda.Status.ChanceToStatus"/> rating value into a fixed value.
            </summary>
            <param name="rating">The rating value to convert.</param>
            <param name="stat">The related ChanceToStatus.</param>
            <param name="level">The level of the entity.</param>
            <returns>The converted fixed ChanceToStatus value.</returns>
        </member>
        <member name="M:Zelda.Status.StatusCalc.GetChanceToDodge(System.Int32,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Gets the chance to dodge melee and ranged attacks in %.
            </summary>
            <param name="agility">The total agility of the statable entity.</param>
            <param name="fixedValue">The additive/fixed extra dodge chance.</param>
            <param name="multiplier">The percental extra dodge chance.</param>
            <param name="ratingValue">The dodge rating value.</param>
            <param name="level">The level of the statable entity.</param>
            <returns>
            The total chance to dodge.
            </returns>
        </member>
        <member name="M:Zelda.Status.StatusCalc.GetChanceToParry(System.Int32,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Gets the chance to parry melee attacks in %.
            </summary>
            <param name="strength">The total strength of the statable entity.</param>
            <param name="fixedValue">The additive/fixed extra parry chance.</param>
            <param name="multiplier">The percental extra parry chance.</param>
            <param name="ratingValue">The parry rating value.</param>
            <param name="level">The level of the statable entity.</param>
            <returns>
            The chance to parry.
            </returns>
        </member>
        <member name="M:Zelda.Status.StatusCalc.GetChanceToCrit(System.Int32,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Gets the chance to get a critical hit in %.
            </summary>
            <param name="luck">The total luck of the player.</param>
            <param name="fixedValue">The additive extra crit chance.</param>
            <param name="multiplier">The multiplicative extra crit chance multiplier value.</param>
            <param name="ratingValue">The dodge rating value.</param>
            <param name="level">The level of the statable entity.</param>
            <returns>The total crit chance.</returns>
        </member>
        <member name="M:Zelda.Status.StatusCalc.GetChanceToMiss(System.Int32,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Gets the chance to miss in %.
            </summary>
            <param name="dexterity">The total dexterity of the StatusObject.</param>
            <param name="fixedExtraChance">The additive extra hit chance.</param>
            <param name="multiplier">The multiplicative hit chance multiplier value.</param>
            <param name="ratingValue">The hit rating value.</param>
            <param name="level">The level of the player.</param>
            <returns>
            The chance for the player to miss.
            </returns>
        </member>
        <member name="M:Zelda.Status.StatusCalc.GetChanceToPierce(System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Calculates the chance for ranged projectiles to pierce through enemies.
            </summary>
            <param name="fixedValue">The additive modifier value.</param>
            <param name="multiplier">The multiplcative modifier value.</param>
            <param name="ratingValue">The rating value that gets converted into a fixed increase.</param>
            <param name="level">The level of the player.</param>
            <returns>The total chance to pierce.</returns>
        </member>
        <member name="M:Zelda.Status.StatusCalc.GetChanceToBlock(System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Gets the chance to block melee and ranged attacks in %.
            </summary>
            <param name="fixedValue">
            The additive/fixed extra block chance chance.
            </param>
            <param name="multiplier">
            The percental extra block chance.
            </param>
            <param name="ratingValue">
            The block chance rating value.
            </param>
            <param name="level">
            The level of the statable entity.
            </param>
            <returns>
            The total chance to dodge.
            </returns>
        </member>
        <member name="M:Zelda.Status.StatusCalc.GetChanceToBeCrit(System.Int32,System.Single)">
            <summary>
            Gets the chance to be crit, not taking into account the crit chance of the attacker.
            </summary>
            <param name="vitality">The total vitality of the player.</param>
            <param name="fixedValue">The fixed modifier value (from items/talents).</param>
            <returns>The chance to be crit that gets added to the attackers crit chance.</returns>
        </member>
        <member name="M:Zelda.Status.StatusCalc.GetChanceToBeHit(System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Gets the chance to be hit, not taking into account the hit chance of the attacker.
            </summary>
            <param name="fixedValue">The fixed modifier value (from items/talents).</param>
            <param name="percentValue">The multiplier modifier value (from items/talents).</param>
            <param name="ratingValue">The rating modifier value (from items/talents).</param>
            <param name="level">
            The level of the player.
            </param>
            <returns>
            <returns>
            The chance to be hit that gets added to the attackers crit chance.</returns>
            </returns>
        </member>
        <member name="M:Zelda.Status.StatusCalc.GetCriticalDamageBonusModifier(System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Gets the Critical Damage Bonus Modifier value.
            </summary>
            <param name="baseModifier">
            The fixed base value.
            </param>
            <param name="percentalValue">
            The fixed percental modifier value.
            </param>
            <param name="ratingValue">
            The rating value.
            </param>
            <param name="level">
            The level of the statable ZeldaEntity.
            </param>
            <returns>
            The Critical Damage Bonus Modifier.
            </returns>
        </member>
        <member name="M:Zelda.Status.StatusCalc.GetMinimumMeleeDamageIncrease(System.Int32,System.Int32,System.Single)">
            <summary>
            Gets the increase of (minimum) Melee Damage provided by the given Stats.
            </summary>
            <param name="strength">The total strength of the player.</param>
            <param name="dexterity">The total dexterty of the player</param>
            <param name="attackSpeed">The melee attack speed of the player.</param>
            <returns>The minimum melee damage increase.</returns>s
        </member>
        <member name="M:Zelda.Status.StatusCalc.GetMaximumMeleeDamageIncrease(System.Int32,System.Int32,System.Single)">
            <summary>
            Gets the increase of (maximum) Melee Damage provided by the given Stats.
            </summary>
            <param name="strength">The total strength of the player.</param>
            <param name="dexterity">The total dexterty of the player</param>
            <param name="attackSpeed">The melee attack speed of the player.</param>
            <returns>The maximum melee damage increase.</returns>
        </member>
        <member name="M:Zelda.Status.StatusCalc.GetMinimumRangedDamageIncrease(System.Int32,System.Single)">
            <summary>
            Gets the increase of (minimum) Ranged Damage provided by the given Stats.
            </summary>
            <param name="dexterity">
            The total dexterity.
            </param>
            <param name="attackSpeed">
            The base attack speed of the ranged-weapon.
            </param>
            <returns>The minumum ranged damage increase.</returns>
        </member>
        <member name="M:Zelda.Status.StatusCalc.GetMaximumRangedDamageIncrease(System.Int32,System.Int32,System.Single)">
            <summary>
            Gets the increase of (maximum) Ranged Damage provided by the given Stats.
            </summary>
            <param name="dexterity">
            The total dexterity.
            </param>
            <param name="agility">
            The total agility.
            </param>
            <param name="attackSpeed">
            The base attack speed of the ranged-weapon.
            </param>
            <returns>The maximum ranged damage increase.</returns>
        </member>
        <member name="M:Zelda.Status.StatusCalc.GetMinimumMagicDamageIncrease(System.Int32)">
            <summary>
            Gets the increase of (minimum) Magic Damage provided by the given Stats.
            </summary>
            <param name="intelligence">The total intelligence of the player.</param>
            <returns>The minimum magic damage increase.</returns>
        </member>
        <member name="M:Zelda.Status.StatusCalc.GetMaximumMagicDamageIncrease(System.Int32)">
            <summary>
            Gets the increase of (maximum) Magic Damage provided by the given Stats.
            </summary>
            <param name="intelligence">The total intelligence of the player.</param>
            <returns>The maximum magic damage increase.</returns>
        </member>
        <member name="M:Zelda.Status.StatusCalc.GetTotalLife(System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            Calculates the total life of a PlayerObject.
            </summary>
            <param name="level">The level of the player.</param>
            <param name="vitality">The total vitality of the player.</param>
            <param name="fixedIncrease">The fixed life increase.</param>
            <param name="multiplier">The percental life increase.</param>
            <returns>The total life of the player.</returns>
        </member>
        <member name="M:Zelda.Status.StatusCalc.GetLifeFromLevel(System.Int32)">
            <summary>
            Gets the life given for free each level-up.
            </summary>
            <param name="level">
            The level of the player.
            </param>
            <returns>
            The life given for free.
            </returns>
        </member>
        <member name="M:Zelda.Status.StatusCalc.GetBaseMana(System.Int32)">
            <summary>
            Calculates the base mana pool of the extended statable ZeldaEntity.
            </summary>
            <param name="level">
            The level of the player.
            </param>
            <returns>
            The base mana of the player.
            </returns>
        </member>
        <member name="M:Zelda.Status.StatusCalc.GetTotalMana(System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            Calculates the total mana pool of the player.
            </summary>
            <param name="baseMana">The base mana of the player.</param>
            <param name="intelligence">The total intelligence.</param>
            <param name="fixedIncrease">The fixed mana increase.</param>
            <param name="multiplier">The percental mana increase.</param>
            <returns> The total mana of the player.</returns>
        </member>
        <member name="M:Zelda.Status.StatusCalc.GetLifeRegen(System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            Calculates the amount of life regenerated each tick.
            </summary>
            <param name="vitality">
            The total amount of vitality.
            </param>
            <param name="totalLife">
            The total amount of life.
            </param>
            <param name="fixedIncrease">
            The fixed value.
            </param>
            <param name="multiplier">
            The multiplier value.
            </param>
            <returns>
            The life regenerated each tick.
            </returns>
        </member>
        <member name="M:Zelda.Status.StatusCalc.GetManaRegen(System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            Calculates the amount of mana regenerated each tick.
            </summary>
            <param name="intelligence">
            The total amount of intelligence.
            </param>
            <param name="totalMana">
            The total amount of mana.
            </param>
            <param name="fixedIncrease">
            The fixed value.
            </param>
            <param name="multiplier">
            The multiplier value.
            </param>
            <returns>
            The mana regenerated each tick.
            </returns>
        </member>
        <member name="M:Zelda.Status.StatusCalc.GetLifePotionEffectiviness(System.Int32,System.Single)">
            <summary>
            Calculates the total effectiviness bonus the player
            gets for life potions.
            </summary>
            <param name="vitality">
            The total vitality of the player.
            </param>
            <param name="baseEffectiviness">
            The base effectiviness value of the player.
            </param>
            <returns>
            The effectiviness value for life potions.
            </returns>
        </member>
        <member name="M:Zelda.Status.StatusCalc.GetManaPotionEffectiviness(System.Int32,System.Single)">
            <summary>
            Calculates the total effectiviness bonus the player
            gets for mana potions.
            </summary>
            <param name="intelligence">
            The total intelligence of the player.
            </param>
            <param name="baseEffectiviness">
            The base effectiviness value of the player.
            </param>
            <returns>
            The effectiviness value for mana potions.
            </returns>
        </member>
        <member name="T:Zelda.Story.ZeldaIncident">
            <summary>
            Represents a single 'event' that is placed on a ZeldaTimeline.
            </summary>
        </member>
        <member name="M:Zelda.Story.ZeldaIncident.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Story.ZeldaIncident.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="T:Zelda.Story.ZeldaStoryboard">
            <summary>
            Combines multiple independent ZeldaTimelines to lie on a single master timeline.
            </summary>
        </member>
        <member name="P:Zelda.Story.ZeldaStoryboard.Timelines">
            <summary>
            Gets the ZeldaTimeline that this ZeldaStoryboard contains.
            </summary>
        </member>
        <member name="M:Zelda.Story.ZeldaStoryboard.SerializeHeader(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Story.ZeldaStoryboard.SerializeBody(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Story.ZeldaStoryboard.DeserializeHeader(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Story.ZeldaStoryboard.DeserializeBody(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Story.ZeldaStoryboard.GetTimelineAt(System.Int32)">
            <summary>
            Gets the timeline at the specified zero-based index.
            </summary>
            <param name="index">
            The zero-based index of the Timeline to get.
            </param>
            <returns>
            The requested Timeline.
            </returns>
        </member>
        <member name="T:Zelda.Story.ZeldaTimeline">
            <summary>
            Represents a single independent row of Incidents.
            </summary>
        </member>
        <member name="P:Zelda.Story.ZeldaTimeline.Incidents">
            <summary>
            Gets the incidents this ZeldaTimeline contains.
            </summary>
        </member>
        <member name="M:Zelda.Story.ZeldaTimeline.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Story.ZeldaTimeline.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="T:Zelda.Talents.ArmorTalent">
            <summary>
            A <see cref="T:Zelda.Talents.Talent"/> which increases the armor of the player by a specific value.
            This is an abstract 'helper' class.
            </summary>
        </member>
        <member name="M:Zelda.Talents.ArmorTalent.GetDescription(System.Int32)">
            <summary>
            Gets the description of this Talent for
            the specified talent level.
            </summary>
            <param name="level">
            The level of the talent to get the description for.
            </param>
            <returns>
            The localized description of this Talent for the specified talent level.
            </returns>
        </member>
        <member name="M:Zelda.Talents.ArmorTalent.#ctor(System.String,Atom.Xna.Sprite,System.Int32,Zelda.Status.StatusManipType,System.Int32,Zelda.Talents.TalentTree,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Talents.ArmorTalent"/> class.
            </summary>
            <param name="localizedName">
            The localized name of the talent.
            </param>
            <param name="symbol">
            The symbol of the Talent.
            </param>
            <param name="maximumLevel">
            The maximum number of TalentPoints the Player can invest into the talent.
            </param>
            <param name="manipulationType">The manip type of the armor increase effect.</param>
            <param name="amountPerLevel">The amount of armor increase per talent level.</param>
            <param name="tree">
            The TalentTree that 'owns' the new Talent.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Talents.ArmorTalent.Initialize">
            <summary>
            Initializes this ArmorTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.ArmorTalent.Uninitialize">
            <summary>
            Uninitializes this ArmorTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.ArmorTalent.Refresh">
            <summary>
            Refreshes the strength of this ArmorTalent.
            </summary>
        </member>
        <member name="F:Zelda.Talents.ArmorTalent.amountPerLevel">
            <summary>
            Stores the amount of armor this ArmorTalent provides per talent-level.
            </summary>
        </member>
        <member name="F:Zelda.Talents.ArmorTalent.manipulationType">
            <summary>
            Defines how the value of ArmorEffect is interpreted.
            </summary>
        </member>
        <member name="F:Zelda.Talents.ArmorTalent.effect">
            <summary>
            Identifies the status effect appplied by this ArmorTalent.
            </summary>
        </member>
        <member name="F:Zelda.Talents.ArmorTalent.aura">
            <summary>
            Identifies the PermanentAura that holds the status effect this ArmorTalent applies.
            </summary>
        </member>
        <member name="T:Zelda.Talents.ChanceToStatusTalent">
            <summary>
            A <see cref="T:Zelda.Talents.Talent"/> which increases any of the chance to statuses of the player by a specific value.
            This is an abstract 'helper' class.
            </summary>
        </member>
        <member name="M:Zelda.Talents.ChanceToStatusTalent.GetDescription(System.Int32)">
            <summary>
            Gets the description of this Talent for
            the specified talent level.
            </summary>
            <param name="level">
            The level of the talent to get the description for.
            </param>
            <returns>
            The localized description of this Talent for the specified talent level.
            </returns>
        </member>
        <member name="M:Zelda.Talents.ChanceToStatusTalent.#ctor(System.String,Atom.Xna.Sprite,Zelda.Status.ChanceToStatus,System.Int32,Zelda.Status.StatusManipType,System.Int32,Zelda.Talents.TalentTree,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Talents.ChanceToStatusTalent"/> class.
            </summary>
            <param name="localizedName">
            The localized name of the talent.
            </param>
            <param name="symbol">
            The symbol of the Talent.
            </param>
            <param name="statusType">
            The <see cref="T:Zelda.Status.ChanceToStatus"/> the new ChanceToStatusTalent manipulates.
            </param>
            <param name="amountPerLevel">
            The status-value the new ChanceToStatusTalent provides per level.
            </param>
            <param name="manipulationType">
            States how the status-value should be interpreted.
            </param>
            <param name="maximumLevel">
            The maximum number of TalentPoints the Player can invest into the talent.
            </param>
            <param name="tree">
            The TalentTree that 'owns' the new Talent.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Talents.ChanceToStatusTalent.Initialize">
            <summary>
            Initializes this ChanceToStatusTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.ChanceToStatusTalent.Uninitialize">
            <summary>
            Uninitializes this ChanceToStatusTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.ChanceToStatusTalent.Refresh">
            <summary>
            Refreshes the strength of this ChanceToStatusTalent.
            </summary>
        </member>
        <member name="F:Zelda.Talents.ChanceToStatusTalent.statusType">
            <summary>
            States what <see cref="T:Zelda.Status.ChanceToStatus"/> this ChanceToStatusTalent manipulates.
            </summary>
        </member>
        <member name="F:Zelda.Talents.ChanceToStatusTalent.amountPerLevel">
            <summary>
            States how much of the ChanceToStatus this ChanceToStatusTalent provides per talent level.
            </summary>
        </member>
        <member name="F:Zelda.Talents.ChanceToStatusTalent.manipulationType">
            <summary>
            States how the status value of this ChanceToStatusTalent is interpreted.
            </summary>
        </member>
        <member name="F:Zelda.Talents.ChanceToStatusTalent.effect">
            <summary>
            Identifies the ChanceToStatusEffect this ChanceToStatusTalent provides.
            </summary>
        </member>
        <member name="F:Zelda.Talents.ChanceToStatusTalent.aura">
            <summary>
            Identifies the PermanentAura that holds the StatusValueEffect this ChanceToStatusTalent provides.
            </summary>
        </member>
        <member name="T:Zelda.Talents.Classes.CharacterClass">
            <summary>
            Represents the character class of the player.
            </summary>
            <remarks>
            The player becomes a specific class by simply investing into
            the four talent trees: Melee, Ranged, Magic and Support.
            <para>
            Each of those trees is divided into levels.
            Based on those levels the current class is choosen.
            </para>
            </remarks>
        </member>
        <member name="P:Zelda.Talents.Classes.CharacterClass.Key">
            <summary>
            Gets the CharacterClassKey that uniquely identifies this CharacterClass.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Classes.CharacterClass.LocalizedName">
            <summary>
            Gets the (localized) name of this CharacterClass.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Classes.CharacterClass.LocalizedHardcoreName">
            <summary>
            Gets the (localized) name of this CharacterClass in HC.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Classes.CharacterClass.#ctor(Zelda.Talents.Classes.CharacterClassKey,System.String,System.String)">
            <summary>
            Initializes a new instance of the CharacterClass class.
            </summary>
            <param name="key">
            The CharacterClassKey that uniquely identifies the new CharacterClass.
            </param>
            <param name="localizedName">
            The (localized) name of the new CharacterClass.
            </param>
            <param name="localizedHardcoreName">
            The (localized) name of the new CharacterClass in HC.
            </param>
        </member>
        <member name="F:Zelda.Talents.Classes.CharacterClass.key">
            <summary>
            Stores the CharacterClassKey that uniquely identifies this CharacterClass.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Classes.CharacterClass.localizedName">
            <summary>
            Stores the (localized) name of this CharacterClass.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Classes.CharacterClass.localizedHardcoreName">
            <summary>
            Stores the (localized) name of this CharacterClass.
            </summary>
        </member>
        <member name="T:Zelda.Talents.Classes.CharacterClassKey">
            <summary>
            Enumerates all <see cref="T:Zelda.Talents.Classes.CharacterClass"/>es of the game.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Classes.CharacterClassKey.Archer">
            <summary> </summary>
        </member>
        <member name="F:Zelda.Talents.Classes.CharacterClassKey.Assassin">
            <summary> </summary>
        </member>
        <member name="F:Zelda.Talents.Classes.CharacterClassKey.BalancedWarrior">
            <summary> </summary>
        </member>
        <member name="F:Zelda.Talents.Classes.CharacterClassKey.EnragedAssassin">
            <summary> </summary>
        </member>
        <member name="F:Zelda.Talents.Classes.CharacterClassKey.EnragedMeleeSharpshooter">
            <summary> </summary>
        </member>
        <member name="F:Zelda.Talents.Classes.CharacterClassKey.EnragedSharpshooter">
            <summary> </summary>
        </member>
        <member name="F:Zelda.Talents.Classes.CharacterClassKey.Jedi">
            <summary> </summary>
        </member>
        <member name="F:Zelda.Talents.Classes.CharacterClassKey.Knight">
            <summary> </summary>
        </member>
        <member name="F:Zelda.Talents.Classes.CharacterClassKey.MasterSharpshooter">
            <summary> </summary>
        </member>
        <member name="F:Zelda.Talents.Classes.CharacterClassKey.MasterSwordsman">
            <summary> </summary>
        </member>
        <member name="F:Zelda.Talents.Classes.CharacterClassKey.MeleeRanger">
            <summary> </summary>
        </member>
        <member name="F:Zelda.Talents.Classes.CharacterClassKey.Novice">
            <summary> </summary>
        </member>
        <member name="F:Zelda.Talents.Classes.CharacterClassKey.RangedFighter">
            <summary> </summary>
        </member>
        <member name="F:Zelda.Talents.Classes.CharacterClassKey.Ranger">
            <summary> </summary>
        </member>
        <member name="F:Zelda.Talents.Classes.CharacterClassKey.Rogue">
            <summary> </summary>
        </member>
        <member name="F:Zelda.Talents.Classes.CharacterClassKey.Sharpshooter">
            <summary> </summary>
        </member>
        <member name="F:Zelda.Talents.Classes.CharacterClassKey.SwiftKnight">
            <summary> </summary>
        </member>
        <member name="F:Zelda.Talents.Classes.CharacterClassKey.SwiftMasterAssassin">
            <summary> </summary>
        </member>
        <member name="F:Zelda.Talents.Classes.CharacterClassKey.SwiftMasterSwordsman">
            <summary> </summary>
        </member>
        <member name="F:Zelda.Talents.Classes.CharacterClassKey.SwiftWarrior">
            <summary> </summary>
        </member>
        <member name="F:Zelda.Talents.Classes.CharacterClassKey.Swordsman">
            <summary> </summary>
        </member>
        <member name="F:Zelda.Talents.Classes.CharacterClassKey.Warrior">
            <summary> </summary>
        </member>
        <member name="F:Zelda.Talents.Classes.CharacterClassKey.Apprentice">
            <summary> </summary>
        </member>
        <member name="F:Zelda.Talents.Classes.CharacterClassKey.Mage">
            <summary> </summary>
        </member>
        <member name="F:Zelda.Talents.Classes.CharacterClassKey.Wizard">
            <summary> </summary>
        </member>
        <member name="F:Zelda.Talents.Classes.CharacterClassKey.Warlock">
            <summary> </summary>
        </member>
        <member name="F:Zelda.Talents.Classes.CharacterClassKey.ApprenticeOfWinds">
            <summary> </summary>
        </member>
        <member name="F:Zelda.Talents.Classes.CharacterClassKey.MageOfWinds">
            <summary> </summary>
        </member>
        <member name="F:Zelda.Talents.Classes.CharacterClassKey.WizardOfWinds">
            <summary> </summary>
        </member>
        <member name="F:Zelda.Talents.Classes.CharacterClassKey.__Count__">
            <summary>
            The total number of entries in the CharacterClassKey enumeration.
            </summary>
        </member>
        <member name="T:Zelda.Talents.Classes.CharacterClassList">
            <summary>
            Stores all known <see cref="T:Zelda.Talents.Classes.CharacterClass"/>es; sorted by their CharacterClassKey.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Classes.CharacterClassList.#ctor">
            <summary>
            Initializes a new instance of the CharacterClassList class.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Classes.CharacterClassList.GetClass(Zelda.Talents.Classes.CharacterClassKey)">
            <summary>
            Gets the CharacterClass with the specified CharacterClassKey.
            </summary>
            <param name="key">
            The CharacterClassKey that uniquely identifies the CharacterClass to get.
            </param>
            <returns>
            The requested CharacterClass.
            </returns>
        </member>
        <member name="M:Zelda.Talents.Classes.CharacterClassList.Build(Zelda.Talents.Classes.CharacterClassKey)">
            <summary>
            Builds the CharacterClass for the specified CharacterClassKey.
            </summary>
            <param name="key">
            The CharacterClassKey that uniquely identifies the CharacterClass to create.
            </param>
            <returns>
            The newly created CharacterClass.
            </returns>
        </member>
        <member name="F:Zelda.Talents.Classes.CharacterClassList.classes">
            <summary>
            All CharacterClasses, sorted by their CharacterClassKey.
            </summary>
        </member>
        <member name="T:Zelda.Talents.Classes.CharacterClassTalentKey">
            <summary>
            Represents the key that uniquely identifies a CharacterClass.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Classes.CharacterClassTalentKey.Melee">
            <summary>
            Gets the melee level of the class that is associated with this CharacterClassTalentKey.
            </summary>
            <value>A value between 0 and 5.</value>
        </member>
        <member name="P:Zelda.Talents.Classes.CharacterClassTalentKey.Ranged">
            <summary>
            Gets the ranged level of the class that is associated with this CharacterClassTalentKey.
            </summary>
            <value>A value between 0 and 5.</value>
        </member>
        <member name="P:Zelda.Talents.Classes.CharacterClassTalentKey.Magic">
            <summary>
            Gets the magic level of the class that is associated with this CharacterClassTalentKey.
            </summary>
            <value>A value between 0 and 5.</value>
        </member>
        <member name="P:Zelda.Talents.Classes.CharacterClassTalentKey.Support">
            <summary>
            Gets the support level of the class that is associated with this CharacterClassTalentKey.
            </summary>
            <value>A value between 0 and 5.</value>
        </member>
        <member name="M:Zelda.Talents.Classes.CharacterClassTalentKey.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the CharacterClassTalentKey struct.
            </summary>
            <param name="melee">
            The melee level of the class associated with the new CharacterClassTalentKey.
            </param>
            <param name="ranged">
            The ranged level of the class associated with the new CharacterClassTalentKey.
            </param>
            <param name="magic">
            The magic level of the class associated with the new CharacterClassTalentKey.
            </param>
            <param name="support">
            The support level of the class associated with the new CharacterClassTalentKey.
            </param>
        </member>
        <member name="M:Zelda.Talents.Classes.CharacterClassTalentKey.Equals(System.Object)">
            <summary>
            Indicates whether this CharacterClassTalentKey is equal to another Object.
            </summary>
            <param name="obj">
            The Object to compare with this CharacterClassTalentKey.
            </param>
            <returns>
            true if this CharacterClassKey is equal to the other Object;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Talents.Classes.CharacterClassTalentKey.Equals(Zelda.Talents.Classes.CharacterClassTalentKey)">
            <summary>
            Indicates whether this CharacterClassTalentKey is equal to another CharacterClassTalentKey.
            </summary>
            <param name="other">
            The CharacterClassTalentKey to compare with this CharacterClassTalentKey.
            </param>
            <returns>
            true if this CharacterClassTalentKey is equal to the other CharacterClassTalentKey;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Talents.Classes.CharacterClassTalentKey.GetHashCode">
            <summary>
            Gets the hashcode of this CharacterClassTalentKey.
            </summary>
            <returns>
            The hashcode.
            </returns>
        </member>
        <member name="F:Zelda.Talents.Classes.CharacterClassTalentKey.melee">
            <summary>
            The melee level of the class that is associated with this CharacterClassTalentKey.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Classes.CharacterClassTalentKey.ranged">
            <summary>
            The ranged level of the class that is associated with this CharacterClassTalentKey.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Classes.CharacterClassTalentKey.magic">
            <summary>
            The magic level of the class that is associated with this CharacterClassTalentKey.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Classes.CharacterClassTalentKey.support">
            <summary>
            The support level of the class that is associated with this CharacterClassTalentKey.
            </summary>
        </member>
        <member name="T:Zelda.Talents.Classes.CharacterClassTalentMap">
            <summary>
            Maps <see cref="T:Zelda.Talents.Classes.CharacterClassTalentKey"/>s onto <see cref="T:Zelda.Talents.Classes.CharacterClass"/>es.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Classes.CharacterClassTalentMap.#ctor(Zelda.Talents.Classes.CharacterClassList)">
            <summary>
            Initializes a new instance of the CharacterClassTalentMap class.
            </summary>
            <param name="classList">
            The list that contains all CharacterClasses.
            </param>
        </member>
        <member name="M:Zelda.Talents.Classes.CharacterClassTalentMap.TryGet(Zelda.Talents.Classes.CharacterClassTalentKey)">
            <summary>
            Tries to get the CharacterClass that is associated with the specified CharacterClassTalentKey.
            </summary>
            <param name="talentKey">
            The CharacterClassTalentKey that maps onto the CharacterClass to get.
            </param>
            <returns>
            The requested CharacterClass; 
            or null.
            </returns>
        </member>
        <member name="M:Zelda.Talents.Classes.CharacterClassTalentMap.Map(System.Int32,System.Int32,System.Int32,Zelda.Talents.Classes.CharacterClassKey)">
            <summary>
            Maps the specified CharacterClassTalentKey onto the CharacterClass for this CharacterClassMap.
            </summary>
            <remarks>
            All support levels are mapped onto the same class.
            </remarks>
            <param name="meleeLevel">
            The level of melee tree that wraps onto the specified CharacterClass.
            </param>
            <param name="rangedLevel">
            The level of ranged tree that wraps onto the specified CharacterClass.
            </param>
            <param name="magicLevel">
            The level of magic tree that wraps onto the specified CharacterClass.
            </param>
            <param name="characterClass">
            The CharacterClass that should be added.
            </param>
        </member>
        <member name="M:Zelda.Talents.Classes.CharacterClassTalentMap.Map(System.Int32,System.Int32,System.Int32,System.Int32,Zelda.Talents.Classes.CharacterClass)">
            <summary>
            Maps the specified CharacterClassTalentKey onto the CharacterClass for this CharacterClassMap.
            </summary>
            <param name="meleeLevel">
            The level of melee tree that wraps onto the specified CharacterClass.
            </param>
            <param name="rangedLevel">
            The level of ranged tree that wraps onto the specified CharacterClass.
            </param>
            <param name="magicLevel">
            The level of magic tree that wraps onto the specified CharacterClass.
            </param>
            <param name="supportLevel">
            The level of support tree that wraps onto the specified CharacterClass.
            </param>
            <param name="characterClass">
            The CharacterClass that should be added.
            </param>
        </member>
        <member name="M:Zelda.Talents.Classes.CharacterClassTalentMap.Map(Zelda.Talents.Classes.CharacterClassTalentKey,Zelda.Talents.Classes.CharacterClass)">
            <summary>
            Maps the specified CharacterClassTalentKey onto the CharacterClass for this CharacterClassMap.
            </summary>
            <param name="key">
            The key the class should be mapped on.
            </param>
            <param name="class">
            The CharacterClass that should be added.
            </param>
        </member>
        <member name="F:Zelda.Talents.Classes.CharacterClassTalentMap.map">
            <summary>
            The dictionary that maps CharacterClassTalentKeys onto CharacterClasses.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Classes.CharacterClassTalentMap.classList">
            <summary>
            Identifies the list that contains all CharacterClasses.
            </summary>
        </member>
        <member name="T:Zelda.Talents.Classes.ClassResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Classes.ClassResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Classes.ClassResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Classes.ClassResources.CN_Apprentice">
            <summary>
              Looks up a localized string similar to Apprentice.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Classes.ClassResources.CN_ApprenticeOfWinds">
            <summary>
              Looks up a localized string similar to Apprentice of Winds.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Classes.ClassResources.CN_Archer">
            <summary>
              Looks up a localized string similar to Archer.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Classes.ClassResources.CN_Assassin">
            <summary>
              Looks up a localized string similar to Assassin.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Classes.ClassResources.CN_Assassin_HC">
            <summary>
              Looks up a localized string similar to Blood Assassin.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Classes.ClassResources.CN_BalancedWarrior">
            <summary>
              Looks up a localized string similar to Bladebard.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Classes.ClassResources.CN_BalancedWarrior_HC">
            <summary>
              Looks up a localized string similar to Evil Bladebard.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Classes.ClassResources.CN_EnragedAssassin">
            <summary>
              Looks up a localized string similar to Goron Assassin.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Classes.ClassResources.CN_EnragedMeleeSharpshooter">
            <summary>
              Looks up a localized string similar to Goron Hunter.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Classes.ClassResources.CN_EnragedSharpshooter">
            <summary>
              Looks up a localized string similar to Hunter.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Classes.ClassResources.CN_EnragedSharpshooter_HC">
            <summary>
              Looks up a localized string similar to Hyrule Ranger.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Classes.ClassResources.CN_Hexblade">
            <summary>
              Looks up a localized string similar to Hexblade.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Classes.ClassResources.CN_Hexblade_HC">
            <summary>
              Looks up a localized string similar to Blood-Hexblade.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Classes.ClassResources.CN_HexSpellthief">
            <summary>
              Looks up a localized string similar to Hexspellthief.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Classes.ClassResources.CN_HexSpellthief_HC">
            <summary>
              Looks up a localized string similar to Blood-Hexspellthief.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Classes.ClassResources.CN_Jedi">
            <summary>
              Looks up a localized string similar to Jedi.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Classes.ClassResources.CN_Knight">
            <summary>
              Looks up a localized string similar to Knight.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Classes.ClassResources.CN_Knight_HC">
            <summary>
              Looks up a localized string similar to Warblade.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Classes.ClassResources.CN_Mage">
            <summary>
              Looks up a localized string similar to Mage.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Classes.ClassResources.CN_MageOfWinds">
            <summary>
              Looks up a localized string similar to Mage of Winds.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Classes.ClassResources.CN_MasterSharpshooter">
            <summary>
              Looks up a localized string similar to Master Sharpshooter.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Classes.ClassResources.CN_MasterSharpshooter_HC">
            <summary>
              Looks up a localized string similar to Darkshooter.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Classes.ClassResources.CN_MasterSwordsman">
            <summary>
              Looks up a localized string similar to Master Swordsman.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Classes.ClassResources.CN_MasterSwordsman_HC">
            <summary>
              Looks up a localized string similar to Guard of Hyrule.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Classes.ClassResources.CN_MeleeRanger">
            <summary>
              Looks up a localized string similar to Scout.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Classes.ClassResources.CN_MeleeRanger_HC">
            <summary>
              Looks up a localized string similar to Bladescout.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Classes.ClassResources.CN_Novice">
            <summary>
              Looks up a localized string similar to Novice.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Classes.ClassResources.CN_RangedFighter">
            <summary>
              Looks up a localized string similar to Hyrule Scout.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Classes.ClassResources.CN_RangedFighter_HC">
            <summary>
              Looks up a localized string similar to Scoutblade.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Classes.ClassResources.CN_Ranger">
            <summary>
              Looks up a localized string similar to Ranger.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Classes.ClassResources.CN_Ranger_HC">
            <summary>
              Looks up a localized string similar to Stalker.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Classes.ClassResources.CN_Rogue">
            <summary>
              Looks up a localized string similar to Rogue.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Classes.ClassResources.CN_Sharpshooter">
            <summary>
              Looks up a localized string similar to Sharpshooter.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Classes.ClassResources.CN_Spellthief">
            <summary>
              Looks up a localized string similar to Spellthief.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Classes.ClassResources.CN_Spellthief_HC">
            <summary>
              Looks up a localized string similar to Blood-Spellthief.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Classes.ClassResources.CN_SwiftKnight">
            <summary>
              Looks up a localized string similar to Warknight.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Classes.ClassResources.CN_SwiftKnight_HC">
            <summary>
              Looks up a localized string similar to Blood-Knight.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Classes.ClassResources.CN_SwiftMasterAssassin">
            <summary>
              Looks up a localized string similar to Warmaster Assassin.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Classes.ClassResources.CN_SwiftMasterSwordsman">
            <summary>
              Looks up a localized string similar to Warmaster Swordsman.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Classes.ClassResources.CN_SwiftWarrior">
            <summary>
              Looks up a localized string similar to Swashbuckler.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Classes.ClassResources.CN_SwiftWarrior_HC">
            <summary>
              Looks up a localized string similar to Bloodbuckler.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Classes.ClassResources.CN_Swordsman">
            <summary>
              Looks up a localized string similar to Swordsman.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Classes.ClassResources.CN_Warlock">
            <summary>
              Looks up a localized string similar to Warlock.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Classes.ClassResources.CN_Warlock_HC">
            <summary>
              Looks up a localized string similar to Dread Warlock.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Classes.ClassResources.CN_Warrior">
            <summary>
              Looks up a localized string similar to Warrior.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Classes.ClassResources.CN_Wizard">
            <summary>
              Looks up a localized string similar to Wizard.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Classes.ClassResources.CN_Wizard_HC">
            <summary>
              Looks up a localized string similar to Arch-Wizard.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Classes.ClassResources.CN_WizardOfWinds">
            <summary>
              Looks up a localized string similar to Wizard of Winds.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Classes.ClassResources.CN_WizardOfWinds_HC">
            <summary>
              Looks up a localized string similar to Arch-Wizard of Winds.
            </summary>
        </member>
        <member name="T:Zelda.Talents.Magic.AppliedImpactResearchTalent">
            <summary>
            Increases the maximum number of new Firewhirls
            a Firewhirls can split into upon impact by 1/2/3.
            </summary>
            <seealso cref="T:Zelda.Talents.Magic.ImpactTheoryTalent"/>
        </member>
        <member name="M:Zelda.Talents.Magic.AppliedImpactResearchTalent.GetAdditionalSplits(System.Int32)">
            <summary>
            Gets the number of maximum additional times the AppliedImpactResearchTalent
            allows Whirlwind to split into new Whirlwinds.
            </summary>
            <param name="level">
            The level of the talent.
            </param>
            <returns>
            The number of additional splits.
            </returns>
        </member>
        <member name="M:Zelda.Talents.Magic.AppliedImpactResearchTalent.GetDescription(System.Int32)">
            <summary>
            Gets the description of this Talent for
            the specified talent level.
            </summary>
            <param name="level">
            The level of the talent to get the description for.
            </param>
            <returns>
            The localized description of this Talent for the specified talent level.
            </returns>
        </member>
        <member name="P:Zelda.Talents.Magic.AppliedImpactResearchTalent.AdditionalSplits">
            <summary>
            Gets the number of additional new Whirlwinds a Whirlwind
            can split if the player has invested into AppliedImpactResearchTalent.
            </summary>
            <value>
            The chance to proc in %.
            </value>
        </member>
        <member name="M:Zelda.Talents.Magic.AppliedImpactResearchTalent.#ctor(Zelda.Talents.TalentTree,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Talents.Magic.AppliedImpactResearchTalent"/> class.
            </summary>
            <param name="tree">
            The TalentTree that owns the AppliedImpactResearchTalent.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Talents.Magic.AppliedImpactResearchTalent.SetupNetwork">
            <summary>
            Setups the connections of this AppliedImpactResearchTalent with the other Talents in the TalentTree.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Magic.AppliedImpactResearchTalent.Initialize">
            <summary>
            Initializes this AppliedImpactResearchTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Magic.AppliedImpactResearchTalent.Uninitialize">
            <summary>
            Uninitializes this AppliedImpactResearchTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Magic.AppliedImpactResearchTalent.Refresh">
            <summary>
            Refreshes the strength of this AppliedImpactResearchTalent.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Magic.AppliedImpactResearchTalent.impactTheoryTalent">
            <summary>
            Identifies the ImpactTheoryTalent which gets improved by this AppliedImpactResearchTalent.
            </summary>
        </member>
        <member name="T:Zelda.Talents.Magic.CorrosiveFireTalent">
            <summary>
            Firewhirl also burns the target for 20%/30% to 30%/40%
            fire damage over 6 seconds.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Magic.CorrosiveFireTalent.Duration">
            <summary>
            The duration of the burn effect.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Magic.CorrosiveFireTalent.TickCount">
            <summary>
            The number of damage ticks.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Magic.CorrosiveFireTalent.GetMinimumDamageModifier(System.Int32)">
            <summary>
            Gets the minimum damage modifier of the corrosive fire effect.
            </summary>
            <param name="level">
            The level of the talent.
            </param>
            <returns>
            The minimum damage modifier.
            </returns>
        </member>
        <member name="M:Zelda.Talents.Magic.CorrosiveFireTalent.GetMaximumDamageModifier(System.Int32)">
            <summary>
            Gets the maximum damage modifier of the corrosive fire effect.
            </summary>
            <param name="level">
            The level of the talent.
            </param>
            <returns>
            The maximum damage modifier.
            </returns>
        </member>
        <member name="P:Zelda.Talents.Magic.CorrosiveFireTalent.MinimumDamageModifier">
            <summary>
            Gets the minimum damage modifier of the corrosive fire effect.
            </summary>
            <returns>
            The minimum damage modifier.
            </returns>
        </member>
        <member name="P:Zelda.Talents.Magic.CorrosiveFireTalent.MaximumDamageModifier">
            <summary>
            Gets the maximum damage modifier of the corrosive fire effect.
            </summary>
            <returns>
            The maximum damage modifier.
            </returns>
        </member>
        <member name="M:Zelda.Talents.Magic.CorrosiveFireTalent.GetDescription(System.Int32)">
            <summary>
            Gets the description of this Talent for
            the specified talent level.
            </summary>
            <param name="level">
            The level of the talent to get the description for.
            </param>
            <returns>
            The localized description of this Talent for the specified talent level.
            </returns>
        </member>
        <member name="M:Zelda.Talents.Magic.CorrosiveFireTalent.#ctor(Zelda.Talents.TalentTree,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Talents.Magic.CorrosiveFireTalent"/> class.
            </summary>
            <param name="tree">
            The TalentTree that owns the CorrosiveFireTalent.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Talents.Magic.CorrosiveFireTalent.SetupNetwork">
            <summary>
            Setups the connections of this CorrosiveFireTalent with the other Talents in the TalentTree.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Magic.CorrosiveFireTalent.Initialize">
            <summary>
            Initializes this CorrosiveFireTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Magic.CorrosiveFireTalent.Uninitialize">
            <summary>
            Uninitializes this CorrosiveFireTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Magic.CorrosiveFireTalent.Refresh">
            <summary>
            Refreshes the strength of this CorrosiveFireTalent.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Magic.CorrosiveFireTalent.firewhirlTalent">
            <summary>
            Identifies the FirewhirlTalent which gets improved by this CorrosiveFireTalent.
            </summary>
        </member>
        <member name="T:Zelda.Talents.Magic.FirevortexTalent">
            <summary>
            Casts a vortex of fire that gains 5/7/10% in size and 
            strength every 0.5 seconds. Sucks nearby enemies into it.
            0.8 second cast time. 8 seconds cooldown.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Magic.FirevortexTalent.Cooldown">
            <summary>
            The cooldown of Fire Vortex (in seconds).
            </summary>
        </member>
        <member name="F:Zelda.Talents.Magic.FirevortexTalent.CastTime">
            <summary>
            The cast time of Fire Vortex.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Magic.FirevortexTalent.ManaCostOfBaseMana">
            <summary>
            The mana cost of Fire Vortex, based on base mana.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Magic.FirevortexTalent.ManaCostOfTotalMana">
            <summary>
            The mana cost of Fire Vortex.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Magic.FirevortexTalent.TimeBetweenVortexPowerups">
            <summary>
            The time (in seconds) it takes before a Firevortex increases
            in strength.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Magic.FirevortexTalent.GetPowerAndSizeModifierIncreasePerSecond(System.Int32)">
            <summary>
            Gets the size and power increase a Fire Vortex receives
            every second.
            </summary>
            <param name="level">
            The level of the vortex.
            </param>
            <returns>
            The increase in percent per second.
            </returns>
        </member>
        <member name="P:Zelda.Talents.Magic.FirevortexTalent.ScalingFactorOnPowerUp">
            <summary>
            Gets the scaling factor applied when a FireVortex powers-up.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Magic.FirevortexTalent.DamageIncreaseOnPowerUp">
            <summary>
            Gets the damage modifier increase applied when a FireVortex powers-up.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Magic.FirevortexTalent.GetDescription(System.Int32)">
            <summary>
            Gets the description of this Talent for
            the specified talent level.
            </summary>
            <param name="level">
            The level of the talent to get the description for.
            </param>
            <returns>
            The localized description of this Talent for the specified talent level.
            </returns>
        </member>
        <member name="M:Zelda.Talents.Magic.FirevortexTalent.#ctor(Zelda.Talents.TalentTree,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Talents.Magic.FirevortexTalent"/> class.
            </summary>
            <param name="tree">
            The TalentTree that owns the new FirevortexTalent.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Talents.Magic.FirevortexTalent.SetupNetwork">
            <summary>
            Setups the connections of this FireVortexTalent with the other Talents in the TalentTree.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Magic.FirevortexTalent.CreateSkill">
            <summary>
            Creates the Skill object of this FirevortexTalent.
            </summary>
            <remarks>
            The actual skill objects are only created when really required.
            </remarks>
            <returns>
            The newly created instance of the Skill.
            </returns>
        </member>
        <member name="T:Zelda.Talents.Magic.FirewallTalent">
            <summary>
            Each Firewall consists of 3 individual pillars that deal minor damage
            but push back the enemy.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Magic.FirewallTalent.Cooldown">
            <summary>
            The base cooldown of Firewall (in seconds).
            </summary>
        </member>
        <member name="F:Zelda.Talents.Magic.FirewallTalent.ManaCostOfBaseMana">
            <summary>
            The mana cost of the Firewall talent.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Magic.FirewallTalent.ManaCostOfTotalMana">
            <summary>
            The additional mana cost of the Firewall talent.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Magic.FirewallTalent.CastTime">
            <summary>
            The cast time of Firewall
            </summary>
        </member>
        <member name="F:Zelda.Talents.Magic.FirewallTalent.TimesCastableBeforeCooldown">
            <summary>
            States how often Firewall can be cast before it goes on cooldown.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Magic.FirewallTalent.PushFactor">
            <summary>
            The factor applied to enemy movement speed to calculate the push force.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Magic.FirewallTalent.GetMinimumDamageModifier(System.Int32)">
            <summary>
            Gets the minimum damage modifier of Firewall of the given level.
            </summary>
            <param name="level">
            The level of the talent.
            </param>
            <returns>
            The cast time for the given talent level.
            </returns>
        </member>
        <member name="M:Zelda.Talents.Magic.FirewallTalent.GetMaximumDamageModifier(System.Int32)">
            <summary>
            Gets the maximum damage modifier of Firewall of the given level.
            </summary>
            <param name="level">
            The level of the talent.
            </param>
            <returns>
            The cast time for the given talent level.
            </returns>
        </member>
        <member name="P:Zelda.Talents.Magic.FirewallTalent.MinumumDamageModifier">
            <summary>
            Gets the minimum damage modifier of Firewall.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Magic.FirewallTalent.MaximumDamageModifier">
            <summary>
            Gets the maximum damage modifier of Firewall.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Magic.FirewallTalent.GetDescription(System.Int32)">
            <summary>
            Gets the description of this Talent for
            the specified talent level.
            </summary>
            <param name="level">
            The level of the talent to get the description for.
            </param>
            <returns>
            The localized description of this Talent for the specified talent level.
            </returns>
        </member>
        <member name="M:Zelda.Talents.Magic.FirewallTalent.#ctor(Zelda.Talents.TalentTree,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Talents.Magic.FirewallTalent"/> class.
            </summary>
            <param name="tree">
            The TalentTree that owns the new FirewallTalent.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Talents.Magic.FirewallTalent.SetupNetwork">
            <summary>
            Setups the connections of this FirewallTalent with the other Talents in the TalentTree.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Magic.FirewallTalent.CreateSkill">
            <summary>
            Creates the Skill object of this FirewallTalent.
            </summary>
            <remarks>
            The actual skill objects are only created when really required.
            </remarks>
            <returns>
            The newly created instance of the Skill.
            </returns>
        </member>
        <member name="T:Zelda.Talents.Magic.FirewhirlTalent">
            <summary>
            Firewhirl deals 103/106/109/112/115% to 105/110/115/120/125% fire damage.
            0.9/0.8/0.7/0.6/0.5 seconds cast time.
            4 seconds cooldown.
            </summary>
            <remarks>
            Firewhirl can be enhanced using the <see cref="T:Zelda.Talents.Magic.CorrosiveFireTalent"/>.
            </remarks>
        </member>
        <member name="F:Zelda.Talents.Magic.FirewhirlTalent.BaseCooldown">
            <summary>
            The base cooldown of Firewhirl (in seconds).
            </summary>
        </member>
        <member name="F:Zelda.Talents.Magic.FirewhirlTalent.ManaCostOfBaseMana">
            <summary>
            The mana cost of the Firewhirl talent.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Magic.FirewhirlTalent.ManaCostOfTotalMana">
            <summary>
            The additional mana cost of the Firewhirl talent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Magic.FirewhirlTalent.GetCastTime(System.Int32)">
            <summary>
            Gets the cast time of Firewhirl of the given level.
            </summary>
            <param name="level">
            The level of the talent.
            </param>
            <returns>
            The cast time for the given talent level.
            </returns>
        </member>
        <member name="M:Zelda.Talents.Magic.FirewhirlTalent.GetMinimumDamageModifier(System.Int32)">
            <summary>
            Gets the minimum damage modifier of Firewhirl of the given level.
            </summary>
            <param name="level">
            The level of the talent.
            </param>
            <returns>
            The cast time for the given talent level.
            </returns>
        </member>
        <member name="M:Zelda.Talents.Magic.FirewhirlTalent.GetMaximumDamageModifier(System.Int32)">
            <summary>
            Gets the maximum damage modifier of Firewhirl of the given level.
            </summary>
            <param name="level">
            The level of the talent.
            </param>
            <returns>
            The cast time for the given talent level.
            </returns>
        </member>
        <member name="P:Zelda.Talents.Magic.FirewhirlTalent.CastTime">
            <summary>
            Gets the cast time of Firewhirl.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Magic.FirewhirlTalent.Cooldown">
            <summary>
            Gets the cooldown of the Firewhirl skill.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Magic.FirewhirlTalent.MinumumDamageModifier">
            <summary>
            Gets the minimum damage modifier of Firewhirl.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Magic.FirewhirlTalent.MaximumDamageModifier">
            <summary>
            Gets the maximum damage modifier of Firewhirl.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Magic.FirewhirlTalent.GetDescription(System.Int32)">
            <summary>
            Gets the description of this Talent for
            the specified talent level.
            </summary>
            <param name="level">
            The level of the talent to get the description for.
            </param>
            <returns>
            The localized description of this Talent for the specified talent level.
            </returns>
        </member>
        <member name="M:Zelda.Talents.Magic.FirewhirlTalent.#ctor(Zelda.Talents.TalentTree,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Talents.Magic.FirewhirlTalent"/> class.
            </summary>
            <param name="tree">
            The TalentTree that owns the new FirewhirlTalent.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Talents.Magic.FirewhirlTalent.SetupNetwork">
            <summary>
            Setups the connections of this FirewhirlTalent with the other Talents in the TalentTree.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Magic.FirewhirlTalent.CreateSkill">
            <summary>
            Creates the Skill object of this FirewhirlTalent.
            </summary>
            <remarks>
            The actual skill objects are only created when really required.
            </remarks>
            <returns>
            The newly created instance of the Skill.
            </returns>
        </member>
        <member name="F:Zelda.Talents.Magic.FirewhirlTalent.swiftFightStyleTalent">
            <summary>
            Identifies the SwiftFightStyleTalent which reduces the cooldown of this FirewhirlTalent.
            </summary>
        </member>
        <member name="T:Zelda.Talents.Magic.FlamesOfPhlegethonTalent">
            <summary>
            Summons {0} wave(s) of fire directly from the underworld.
            Targets that are hit take {0}% to {1}% fire damage.
            {1} secs cooldown. {2} secs cast time.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Magic.FlamesOfPhlegethonTalent.Cooldown">
            <summary>
            The base cooldown of Flames of Phlegethon (in seconds).
            </summary>
        </member>
        <member name="F:Zelda.Talents.Magic.FlamesOfPhlegethonTalent.ManaCostOfBaseMana">
            <summary>
            The mana cost of the Flames of Phlegethon talent.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Magic.FlamesOfPhlegethonTalent.ManaCostOfTotalMana">
            <summary>
            The additional mana cost of the Flames of Phlegethon talent.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Magic.FlamesOfPhlegethonTalent.CastTime">
            <summary>
            The cast time of FlamesOfPhlegethon
            </summary>
        </member>
        <member name="M:Zelda.Talents.Magic.FlamesOfPhlegethonTalent.GetWaveCount(System.Int32)">
            <summary>
            Gets the number of waves that spawn.
            </summary>
            <param name="level">
            The level of the talent.
            </param>
            <returns>
            The number of waves.
            </returns>
        </member>
        <member name="P:Zelda.Talents.Magic.FlamesOfPhlegethonTalent.MinumumDamageModifier">
            <summary>
            Gets the minimum damage modifier of Flames of Phlegethon.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Magic.FlamesOfPhlegethonTalent.MaximumDamageModifier">
            <summary>
            Gets the maximum damage modifier of Flames of Phlegethon.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Magic.FlamesOfPhlegethonTalent.WaveCount">
            <summary>
            Gets the number of waves the Flames of Phlegethon consists of.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Magic.FlamesOfPhlegethonTalent.GetDescription(System.Int32)">
            <summary>
            Gets the description of this Talent for
            the specified talent level.
            </summary>
            <param name="level">
            The level of the talent to get the description for.
            </param>
            <returns>
            The localized description of this Talent for the specified talent level.
            </returns>
        </member>
        <member name="M:Zelda.Talents.Magic.FlamesOfPhlegethonTalent.#ctor(Zelda.Talents.TalentTree,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Talents.Magic.FlamesOfPhlegethonTalent"/> class.
            </summary>
            <param name="tree">
            The TalentTree that owns the new Flames of PhlegethonTalent.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Talents.Magic.FlamesOfPhlegethonTalent.SetupNetwork">
            <summary>
            Setups the connections of this Flames of PhlegethonTalent with the other Talents in the TalentTree.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Magic.FlamesOfPhlegethonTalent.CreateSkill">
            <summary>
            Creates the Skill object of this Flames of PhlegethonTalent.
            </summary>
            <remarks>
            The actual skill objects are only created when really required.
            </remarks>
            <returns>
            The newly created instance of the Skill.
            </returns>
        </member>
        <member name="T:Zelda.Talents.Magic.ImpactTheoryTalent">
            <summary>
            Impact Theory gives Firewhirl a 10/20/30% chance to split
            into atleast 4 new Firewhirls.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Magic.ImpactTheoryTalent.MinimumSplitCount">
            <summary>
            The minimum number of Firewhirls an existing Firewhirl that undergoes the
            Impact Theory effect has to split into.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Magic.ImpactTheoryTalent.MaximumBaseSplitCount">
            <summary>
            The base maximum number of Firewhirls an existing Firewhirl that undergoes the
            Impact Theory effect can split into.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Magic.ImpactTheoryTalent.Offset">
            <summary>
            The offset applied before an offspring Firewhirl is spawned.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Magic.ImpactTheoryTalent.RequiredTravelDistanceSquared">
            <summary>
            The distance a Firewhirl projectile must have travelled atleast
            before it can proc another Firewhirl. (squared, pixels)
            </summary>
        </member>
        <member name="F:Zelda.Talents.Magic.ImpactTheoryTalent.MaximumNumberOfContinuousSplits">
            <summary>
            The maximum number of times a firewhirl can continuously split.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Magic.ImpactTheoryTalent.GetProcChance(System.Int32)">
            <summary>
            Gets the chance Whirlwind can proc the Impact Theory effect.
            </summary>
            <param name="level">
            The level of the talent.
            </param>
            <returns>
            The chance to proc in %.
            </returns>
        </member>
        <member name="P:Zelda.Talents.Magic.ImpactTheoryTalent.ProcChance">
            <summary>
            Gets the chance Whirlwind can proc the Impact Theory efect.
            </summary>
            <value>
            The chance to proc in %.
            </value>
        </member>
        <member name="M:Zelda.Talents.Magic.ImpactTheoryTalent.GetDescription(System.Int32)">
            <summary>
            Gets the description of this Talent for
            the specified talent level.
            </summary>
            <param name="level">
            The level of the talent to get the description for.
            </param>
            <returns>
            The localized description of this Talent for the specified talent level.
            </returns>
        </member>
        <member name="M:Zelda.Talents.Magic.ImpactTheoryTalent.#ctor(Zelda.Talents.TalentTree,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Talents.Magic.ImpactTheoryTalent"/> class.
            </summary>
            <param name="tree">
            The TalentTree that owns the ImpactTheoryTalent.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Talents.Magic.ImpactTheoryTalent.SetupNetwork">
            <summary>
            Setups the connections of this ImpactTheoryTalent with the other Talents in the TalentTree.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Magic.ImpactTheoryTalent.Initialize">
            <summary>
            Initializes this ImpactTheoryTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Magic.ImpactTheoryTalent.Uninitialize">
            <summary>
            Uninitializes this ImpactTheoryTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Magic.ImpactTheoryTalent.RefreshMaximumSplitCount">
            <summary>
            Refreshes the maximum number of new Whirlwinds a Whirlwind can
            split upon impact.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Magic.ImpactTheoryTalent.GetNumberOfSplits(Atom.Math.RandMT)">
            <summary>
            Gets the number of Firewhirls the next Firewhirl should split.
            </summary>
            <param name="rand">
            A random number generator.
            </param>
            <returns>
            The number of splits.
            </returns>
        </member>
        <member name="M:Zelda.Talents.Magic.ImpactTheoryTalent.Refresh">
            <summary>
            Refreshes the strength of this ImpactTheoryTalent.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Magic.ImpactTheoryTalent.maximumSplitCount">
            <summary>
            The cached maximum number of sub-Whirlwinds a Whirlwind can split into.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Magic.ImpactTheoryTalent.firewhirlTalent">
            <summary>
            Identifies the FirewhirlTalent which gets improved by this ImpactTheoryTalent.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Magic.ImpactTheoryTalent.appliedImpactResearchTalent">
            <summary>
            Identifies the AppliedImpactResearchTalent which improves this ImpactTheoryTalent.
            </summary>
        </member>
        <member name="T:Zelda.Talents.Magic.MagicalBalanceTalent">
            <summary>
            The <see cref="T:Zelda.Talents.Magic.MagicalBalanceTalent"/> increases the bonus a critical spell attack
            has over a normal attack by 3/7/10%.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Magic.MagicalBalanceTalent.GetCriticalDamageBonus(System.Int32)">
            <summary>
            Returns the critical damage bonus provided by the MagicalBalanceTalent.
            </summary>
            <param name="level">
            The level of the talent.
            </param>
            <returns>
            The critical damage bonus for the given talent <paramref name="level"/>.
            </returns>
        </member>
        <member name="M:Zelda.Talents.Magic.MagicalBalanceTalent.GetDescription(System.Int32)">
            <summary>
            Gets the description of this Talent for
            the specified talent level.
            </summary>
            <param name="level">
            The level of the talent to get the description for.
            </param>
            <returns>
            The localized description of this Talent for the specified talent level.
            </returns>
        </member>
        <member name="M:Zelda.Talents.Magic.MagicalBalanceTalent.#ctor(Zelda.Talents.TalentTree,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Talents.Magic.MagicalBalanceTalent"/> class.
            </summary>
            <param name="tree">
            The TalentTree that owns the new MagicalBalanceTalent.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Talents.Magic.MagicalBalanceTalent.SetupNetwork">
            <summary>
            Setups the talent and its connections with the other Talents in the TalentTree.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Magic.MagicalBalanceTalent.Initialize">
            <summary>
            Initializes this MagicalBalanceTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Magic.MagicalBalanceTalent.Uninitialize">
            <summary>
            Uninitializes this MagicalBalanceTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Magic.MagicalBalanceTalent.Refresh">
            <summary>
            Refreshes the strength of this MagicalBalanceTalent.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Magic.MagicalBalanceTalent.effect">
            <summary>
            Identifies the passive effect this MagicalBalanceTalent provides.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Magic.MagicalBalanceTalent.aura">
            <summary>
            Identifies the PermanentAura that holds the passive StatusEffects this MagicalBalanceTalent provides.
            </summary>
        </member>
        <member name="T:Zelda.Talents.Magic.MagicTrainingTalent">
            <summary>
            Defines the root talent of the Magic sub-TalentTree.
            Increases Intelligence by 1 per level.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Magic.MagicTrainingTalent.#ctor(Zelda.Talents.TalentTree,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Talents.Magic.MagicTrainingTalent"/> class.
            </summary>
            <param name="tree">
            The TalentTree that owns the MagicTrainingTalent.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Talents.Magic.MagicTrainingTalent.SetupNetwork">
            <summary>
            Setups the connections of this MagicTrainingTalent with the other Talents of the TalentTree.
            </summary>
        </member>
        <member name="T:Zelda.Talents.Magic.PiercingFireTalent">
            <summary>
            'Piercing Fire' increases chance to crit with Firewall and
            Flames of Phlegethon by 3% / 7% / 10%.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Magic.PiercingFireTalent.GetCritChanceIncrease(System.Int32)">
            <summary>
            
            </summary>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="M:Zelda.Talents.Magic.PiercingFireTalent.GetDescription(System.Int32)">
            <summary>
            Gets the description of this Talent for
            the specified talent level.
            </summary>
            <param name="level">
            The level of the talent to get the description for.
            </param>
            <returns>
            The localized description of this Talent for the specified talent level.
            </returns>
        </member>
        <member name="P:Zelda.Talents.Magic.PiercingFireTalent.CritChanceIncrease">
            <summary>
            Gets the crit increase this PiercingFireTalent provides to the FirewallSkill and 
            FlamesOfPhlegethonSkill.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Magic.PiercingFireTalent.#ctor(Zelda.Talents.TalentTree,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Talents.Magic.PiercingFireTalent"/> class.
            </summary>
            <param name="tree">
            The TalentTree that owns the PiercingFireTalent.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Talents.Magic.PiercingFireTalent.SetupNetwork">
            <summary>
            Setups the connections of this PiercingFireTalent with the other Talents in the TalentTree.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Magic.PiercingFireTalent.Initialize">
            <summary>
            Initializes this PiercingFireTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Magic.PiercingFireTalent.Uninitialize">
            <summary>
            Uninitializes this PiercingFireTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Magic.PiercingFireTalent.Refresh">
            <summary>
            Refreshes this PiercingFireTalent.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Magic.PiercingFireTalent.firewallTalent">
            <summary>
            Identifies the FirewallTalent which gets improved by this PiercingFireTalent.
            </summary>
        </member>
        <member name="T:Zelda.Talents.Magic.PyromaniaTalent">
            <summary>
            Reduces the cooldown of all offensive Fire spells
            by 10/20/30/40/50% for 15 seconds.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Magic.PyromaniaTalent.Duration">
            <summary>
            The duration of the Pyromania effect.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Magic.PyromaniaTalent.Cooldown">
            <summary>
            The cooldown of the Pyromania skill.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Magic.PyromaniaTalent.GetCooldownReductionInPercent(System.Int32)">
            <summary>
            Gets the cooldown reduction in % provided by the Pyromana effect
            for the given talent level.
            </summary>
            <param name="level">
            The level of the talent.
            </param>
            <returns>
            The reduction in percent.
            </returns>
        </member>
        <member name="M:Zelda.Talents.Magic.PyromaniaTalent.GetAffectedSkillTalents">
            <summary>
            Gets the SkillTalents that are affected by the PyromaniaTalent.
            </summary>
            <returns>
            An list of SkillTalent whose skill cooldowns are affected
            by the PyromaniaTalent.
            </returns>
        </member>
        <member name="M:Zelda.Talents.Magic.PyromaniaTalent.GetDescription(System.Int32)">
            <summary>
            Gets the description of this Talent for
            the specified talent level.
            </summary>
            <param name="level">
            The level of the talent to get the description for.
            </param>
            <returns>
            The localized description of this Talent for the specified talent level.
            </returns>
        </member>
        <member name="P:Zelda.Talents.Magic.PyromaniaTalent.CooldownReductionInPercent">
            <summary>
            Gets the cooldown reduction provided in percent by the Pyromania effect.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Magic.PyromaniaTalent.#ctor(Zelda.Talents.TalentTree,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Talents.Magic.PyromaniaTalent"/> class.
            </summary>
            <param name="tree">
            The TalentTree that owns the RazorWindsTalent.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Talents.Magic.PyromaniaTalent.SetupNetwork">
            <summary>
            Setups the connections between this PyromaniaTalent and the other talents
            in the TalentTree.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Magic.PyromaniaTalent.CreateSkill">
            <summary>
            Creates the <see cref="T:Zelda.Skills.Skill"/> object of this SkillTalent.
            </summary>
            <remarks>
            The actual skill objects are only created when really required.
            </remarks>
            <returns>
            The newly created instance of the Skill.
            </returns>
        </member>
        <member name="T:Zelda.Talents.Magic.RazorWindsTalent">
            <summary>
            You learn to control the winds around a Firevortex.
            Increases the chance of the vortex
            to pierce through a target by 30/40/50/60/70%.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Magic.RazorWindsTalent.GetPiercingChance(System.Int32)">
            <summary>
            Gets the chance of Firevortex to pierce its target.
            </summary>
            <param name="level">
            The level of the talent.
            </param>
            <returns>
            The chance ot pierce in %.
            </returns>
        </member>
        <member name="P:Zelda.Talents.Magic.RazorWindsTalent.FirevortexPiercingChance">
            <summary>
            Gets the chance of Firevortex that it pierces its target and continues travelling.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Magic.RazorWindsTalent.GetDescription(System.Int32)">
            <summary>
            Gets the description of this Talent for
            the specified talent level.
            </summary>
            <param name="level">
            The level of the talent to get the description for.
            </param>
            <returns>
            The localized description of this Talent for the specified talent level.
            </returns>
        </member>
        <member name="M:Zelda.Talents.Magic.RazorWindsTalent.#ctor(Zelda.Talents.TalentTree,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Talents.Magic.RazorWindsTalent"/> class.
            </summary>
            <param name="tree">
            The TalentTree that owns the RazorWindsTalent.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Talents.Magic.RazorWindsTalent.SetupNetwork">
            <summary>
            Setups the connections of this RazorWindsTalent with the other Talents in the TalentTree.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Magic.RazorWindsTalent.Initialize">
            <summary>
            Initializes this RazorWindsTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Magic.RazorWindsTalent.Uninitialize">
            <summary>
            Uninitializes this RazorWindsTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Magic.RazorWindsTalent.Refresh">
            <summary>
            Refreshes the strength of this RazorWindsTalent.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Magic.RazorWindsTalent.firevortexTalent">
            <summary>
            Identifies the FirevortexTalent which gets improved by this RazorWindsTalent.
            </summary>
        </member>
        <member name="T:Zelda.Talents.Melee.BashTalent">
            <summary>
            The BashTalent provides the player access to the BashSkill.
            <para>
            Bash is a massive single strike which does increased damage.
            It costs mana and has a cooldown.
            </para>
            </summary>
        </member>
        <member name="F:Zelda.Talents.Melee.BashTalent.FixedDamageIncreasePerLevel">
            <summary>
            The fixed damage increase provided by Bash based on the level of the talent.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Melee.BashTalent.MultiplicativeDamageIncreasePerLevel">
            <summary>
            The multiplicative damage increase provided by Bash based on the level of the talent.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Melee.BashTalent.ManaNeededPoBM">
            <summary>
            The mana needed per point of base mana.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Melee.BashTalent.BaseCooldown">
            <summary>
            The base cooldown of the Bash Attack.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Melee.BashTalent.GetDescription(System.Int32)">
            <summary>
            Gets the description of this Talent for
            the specified talent level.
            </summary>
            <param name="level">
            The level of the talent to get the description for.
            </param>
            <returns>
            The localized description of this Talent for the specified talent level.
            </returns>
        </member>
        <member name="P:Zelda.Talents.Melee.BashTalent.DamageMultiplier">
            <summary>
            Gets the damage multiplier the talent provides to the Bash Attack.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Melee.BashTalent.FixedDamageIncrease">
            <summary>
            Gets the fixed damage increase the talent provides to the Bash Attack.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Melee.BashTalent.Cooldown">
            <summary>
            Gets the cooldown of the Bash attack in seconds.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Melee.BashTalent.#ctor(Zelda.Talents.TalentTree,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Talents.Melee.BashTalent"/> class.
            </summary>
            <param name="tree">
            The TalentTree that owns the new BashTalent.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Talents.Melee.BashTalent.SetupNetwork">
            <summary>
            Setups the connections of this BashTalent with the other Talents in the TalentTree.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Melee.BashTalent.CreateSkill">
            <summary>
            Creates the Skill object of the SkillTalent.
            </summary>
            <remarks>
            The actual skill objects are only created when really required.
            </remarks>
            <returns>
            The newly created instance of the Skill.
            </returns>
        </member>
        <member name="F:Zelda.Talents.Melee.BashTalent.swiftFightStyleTalent">
            <summary>
            Identifies the SwiftFightStyleTalent that improvides this BashTalent.
            </summary>
        </member>
        <member name="T:Zelda.Talents.Melee.BattleAwarenessTalent">
            <summary>
            The BattleAwarenessTalent increases the chance for the player to parry enemy attacks
            by 1/2/3/4/5% + 2/4/6/8/10% total.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Melee.BattleAwarenessTalent.FixedParryPerLevel">
            <summary>
            The fixed parry chance increase per talent level.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Melee.BattleAwarenessTalent.PercentualParryPerLevel">
            <summary>
            The percentual parry chance increase per talent level.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Melee.BattleAwarenessTalent.GetDescription(System.Int32)">
            <summary>
            Gets the description of this Talent for
            the specified talent level.
            </summary>
            <param name="level">
            The level of the talent to get the description for.
            </param>
            <returns>
            The localized description of this Talent for the specified talent level.
            </returns>
        </member>
        <member name="M:Zelda.Talents.Melee.BattleAwarenessTalent.#ctor(Zelda.Talents.TalentTree,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Talents.Melee.BattleAwarenessTalent"/> class.
            </summary>
            <param name="tree">
            The TalentTree that owns the new BattleAwarenessTalent.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Talents.Melee.BattleAwarenessTalent.SetupNetwork">
            <summary>
            Setups the connections of this BattleAwarenessTalent with the other Talents in the TalentTree.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Melee.BattleAwarenessTalent.Initialize">
            <summary>
            Initializes this BattleAwarenessTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Melee.BattleAwarenessTalent.Uninitialize">
            <summary>
            Uninitializes this BattleAwarenessTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Melee.BattleAwarenessTalent.Refresh">
            <summary>
            Refreshes the strenght of this BattleAwarenessTalent.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Melee.BattleAwarenessTalent.fixedEffect">
            <summary>
            Identifies the ChanceToStatusEffect this BattleAwarenessTalent provides.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Melee.BattleAwarenessTalent.percentualEffect">
            <summary>
            Identifies the ChanceToStatusEffect this BattleAwarenessTalent provides.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Melee.BattleAwarenessTalent.aura">
            <summary>
            Identifies the PermanentAura that holds the StatusValueEffect this BattleAwarenessTalent provides.
            </summary>
        </member>
        <member name="T:Zelda.Talents.Melee.BattleShoutTalent">
            <summary>
            The BattleShoutTalent provides the player access to the BattleShoutSkill.
            <para>
            Battle Shout increases strength by (at level 5) 25% + 5 for  60 seconds.
            Cooldown 120 seconds.
            </para>
            </summary>
        </member>
        <member name="F:Zelda.Talents.Melee.BattleShoutTalent.FixedStrengthIncreasePerLevel">
            <summary>
            The fixed strength increase provided by Battle Shout based on the level of the talent.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Melee.BattleShoutTalent.MultiplicativeStrengthIncreasePerLevel">
            <summary>
            The multiplicative strength increase provided by Battle Shout based on the level of the talent.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Melee.BattleShoutTalent.Cooldown">
            <summary>
            The cooldown of Battle Shout.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Melee.BattleShoutTalent.Duration">
            <summary>
            The duration of Battle Shout.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Melee.BattleShoutTalent.GetDescription(System.Int32)">
            <summary>
            Gets the description of this Talent for
            the specified talent level.
            </summary>
            <param name="level">
            The level of the talent to get the description for.
            </param>
            <returns>
            The localized description of this Talent for the specified talent level.
            </returns>
        </member>
        <member name="P:Zelda.Talents.Melee.BattleShoutTalent.StrengthMultiplier">
            <summary>
            Gets the strength multiplier the talent provides to the Bash Attack.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Melee.BattleShoutTalent.FixedStrengthIncrease">
            <summary>
            Gets the fixed damage increase the talent provides to the Bash Attack.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Melee.BattleShoutTalent.#ctor(Zelda.Talents.TalentTree,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Talents.Melee.BattleShoutTalent"/> class.
            </summary>
            <param name="tree">
            The TalentTree that owns the new BattleShoutTalent.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Talents.Melee.BattleShoutTalent.SetupNetwork">
            <summary>
            Setups the connections of this BattleShoutTalent with the other Talents in the TalentTree.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Melee.BattleShoutTalent.CreateSkill">
            <summary>
            Creates the Skill object of this BattleShoutTalent.
            </summary>
            <remarks>
            The actual skill objects are only created when really required.
            </remarks>
            <returns>
            The newly created instance of the Skill.
            </returns>
        </member>
        <member name="T:Zelda.Talents.Melee.BladestormTalent">
            <summary>
            The BladestormTalent provides the player with the BladestormSkill.
            <para>
            The player goes nuts after using Whirlwind, 
            turning for another X times, dealing (MeleeDamage x Y%) 
            non-parry nor dodgeable damage.
            Compared to Whirlwind movement is allowed with a speed penality of Z%.
            </para>
            </summary>
        </member>
        <member name="F:Zelda.Talents.Melee.BladestormTalent.Cooldown">
            <summary>
            The base cooldown of the Skill.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Melee.BladestormTalent.TimeUseableAfterWhirlwind">
            <summary>
            The timeframe after using Whirlwind in which Bladestorm can be used.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Melee.BladestormTalent.MovementSpeedReduction">
            <summary>
            The movement speed reduction applied to the player while Bladestorm is active.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Melee.BladestormTalent.ManaNeededPoBM">
            <summary>
            The mana needed per point of base mana to use the Skill.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Melee.BladestormTalent.GetTurns(System.Int32)">
            <summary>
            Gets the duration in seconds the Bladestorm is active.
            </summary>
            <param name="level">
            The level of the talent.
            </param>
            <returns>
            The duration in seconds.
            </returns>
        </member>
        <member name="P:Zelda.Talents.Melee.BladestormTalent.Turns">
            <summary>
            Gets the number of 'whirlwind' turns the Bladestorm consists of.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Melee.BladestormTalent.DamageMultiplier">
            <summary>
            Gets the damage multiplier of the Bladestorm attack.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Melee.BladestormTalent.GetDescription(System.Int32)">
            <summary>
            Gets the description of this Talent for
            the specified talent level.
            </summary>
            <param name="level">
            The level of the talent to get the description for.
            </param>
            <returns>
            The localized description of this Talent for the specified talent level.
            </returns>
        </member>
        <member name="M:Zelda.Talents.Melee.BladestormTalent.#ctor(Zelda.Talents.TalentTree,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Talents.Melee.BladestormTalent"/> class.
            </summary>
            <param name="tree">
            The TalentTree that owns the new BladestormTalent.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Talents.Melee.BladestormTalent.SetupNetwork">
            <summary>
            Setups the connections of this BladestormTalent with the other Talents in the TalentTree.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Melee.BladestormTalent.CreateSkill">
            <summary>
            Creates the Skill object of this BladestormTalent.
            </summary>
            <remarks>
            The actual skill objects are only created when really required.
            </remarks>
            <returns>
            The newly created instance of the Skill.
            </returns>
        </member>
        <member name="F:Zelda.Talents.Melee.BladestormTalent.whirlwindTalent">
            <summary>
            Identifies the WhirlwindTalent that modifies the power of the Bladestorm.
            </summary>
        </member>
        <member name="T:Zelda.Talents.Melee.CounterAttackTalent">
            <summary>
            The CounterAttackTalent provides the player the CounterAttackSkill.
            <para>
            Counter Attack gets useable for 5 seconds after parrying an attack.
            It hits the enemy for MeleeDamage + 11%/22%/33% damage.
            </para>
            </summary>
        </member>
        <member name="F:Zelda.Talents.Melee.CounterAttackTalent.Cooldown">
            <summary>
            The cooldown of the CounterAttackSkill in seconds.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Melee.CounterAttackTalent.UseableTime">
            <summary>
            The time the CounterAttackSkill is useable for after parrying (in seconds).
            </summary>
        </member>
        <member name="F:Zelda.Talents.Melee.CounterAttackTalent.DamageIncreasePerLevel">
            <summary>
            The damage increase in percent per talent level.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Melee.CounterAttackTalent.DamageIncreaseMultiplier">
            <summary>
            Gets the damage increase provided by the CounterAttackTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Melee.CounterAttackTalent.GetDescription(System.Int32)">
            <summary>
            Gets the description of this Talent for
            the specified talent level.
            </summary>
            <param name="level">
            The level of the talent to get the description for.
            </param>
            <returns>
            The localized description of this Talent for the specified talent level.
            </returns>
        </member>
        <member name="M:Zelda.Talents.Melee.CounterAttackTalent.#ctor(Zelda.Talents.TalentTree,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Talents.Melee.CounterAttackTalent"/> class.
            </summary>
            <param name="tree">
            The TalentTree that owns the new CounterAttackTalent.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Talents.Melee.CounterAttackTalent.SetupNetwork">
            <summary>
            Setups the connections of this CounterAttackTalent with the other Talents in the TalentTree.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Melee.CounterAttackTalent.CreateSkill">
            <summary>
            Creates the Skill object of this ParryStrikeTalent.
            </summary>
            <remarks>
            The actual skill objects are only created when really required.
            </remarks>
            <returns>
            The newly created instance of the Skill.
            </returns>
        </member>
        <member name="T:Zelda.Talents.Melee.DoubleAttackTalent">
            <summary>
            The Double Attack Talent gives the player a 5/10/15% chance 
            to attack twice on a normal melee attack.
            The effect can proc off of itself.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Melee.DoubleAttackTalent.ProcChancePerLevel">
            <summary>
            The chance to proc the Double Attack effect per talent point.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Melee.DoubleAttackTalent.GetDescription(System.Int32)">
            <summary>
            Gets the description of this Talent for
            the specified talent level.
            </summary>
            <param name="level">
            The level of the talent to get the description for.
            </param>
            <returns>
            The localized description of this Talent for the specified talent level.
            </returns>
        </member>
        <member name="M:Zelda.Talents.Melee.DoubleAttackTalent.#ctor(Zelda.Talents.TalentTree,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Talents.Melee.DoubleAttackTalent"/> class.
            </summary>
            <param name="tree">
            The TalentTree that owns the DoubleAttackTalent.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Talents.Melee.DoubleAttackTalent.SetupNetwork">
            <summary>
            Setups the connections of this ImprovedBashTalent with the other Talents in the TalentTree.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Melee.DoubleAttackTalent.Initialize">
            <summary>
            Initializes this DoubleAttackTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Melee.DoubleAttackTalent.Uninitialize">
            <summary>
            Uninitializes this DoubleAttackTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Melee.DoubleAttackTalent.Refresh">
            <summary>
            Refreshes the strength of this DoubleAttackTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Melee.DoubleAttackTalent.OnDefaultMeleeStrike(System.Object,Zelda.Status.CombatEventArgs)">
            <summary>
            Called when the player has managed to hit an enemy with his default attack.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The CombatEventArgs that contains the event data.</param>
        </member>
        <member name="F:Zelda.Talents.Melee.DoubleAttackTalent.procChance">
            <summary>
            Stores the chance the Double Attack effect can proc.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Melee.DoubleAttackTalent.damageMethod">
            <summary>
            The damage method used to calculate the damage inflicted by the Double Attack.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Melee.DoubleAttackTalent.rand">
            <summary>
            A random number generator.
            </summary>
        </member>
        <member name="T:Zelda.Talents.Melee.EnrageTalent">
            <summary>
            The Enrage talent gives the player a 
            X% chance to enrage after getting hit or crit by an attack.
            Increases damage dealt by 20% for 10 seconds. Can't trigger while active.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Melee.EnrageTalent.ChanceToTriggerByLevel">
            <summary>
            The chance to trigger the effect by level.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Melee.EnrageTalent.MeleeDamageIncrease">
            <summary>
            The damage increase
            </summary>
        </member>
        <member name="F:Zelda.Talents.Melee.EnrageTalent.Duration">
            <summary>
            The duration of the effect once active.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Melee.EnrageTalent.GetDescription(System.Int32)">
            <summary>
            Gets the description of this Talent for
            the specified talent level.
            </summary>
            <param name="level">
            The level of the talent to get the description for.
            </param>
            <returns>
            The localized description of this Talent for the specified talent level.
            </returns>
        </member>
        <member name="M:Zelda.Talents.Melee.EnrageTalent.#ctor(Zelda.Talents.TalentTree,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Talents.Melee.EnrageTalent"/> class.
            </summary>
            <param name="tree">
            The TalentTree that owns the new EnrageTalent.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Talents.Melee.EnrageTalent.SetupNetwork">
            <summary>
            Setups the connections of this EnrageTalent with the other Talents in the TalentTree.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Melee.EnrageTalent.Initialize">
            <summary>
            Initializes this EnrageTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Melee.EnrageTalent.Uninitialize">
            <summary>
            Uninitializes this EnrageTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Melee.EnrageTalent.Refresh">
            <summary>
            Refreshes the strength of this EnrageTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Melee.EnrageTalent.OnAttacked(System.Object,Zelda.Entities.Components.AttackEventArgs)">
            <summary>
            Called when the player gets hit or crit by any attack.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The AttackEventArgs that contains the event data.</param>
        </member>
        <member name="M:Zelda.Talents.Melee.EnrageTalent.ShouldProc(Zelda.Status.Damage.DamageTypeInfo)">
            <summary>
            Gets a value indicating whether the Enrage effect
            should proc.
            </summary>
            <param name="damageTypeInfo">
            An DamageTypeInfo that descripes the damage inflicted onto the player.
            </param>
            <returns>
            true if the effect should proc;
            otherwise false.
            </returns>
        </member>
        <member name="F:Zelda.Talents.Melee.EnrageTalent.chanceToTrigger">
            <summary>
            Stores the chance to trigger the effect.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Melee.EnrageTalent.effect">
            <summary>
            The effect that is applied by the EnrageTalent.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Melee.EnrageTalent.aura">
            <summary>
            The aura that holds the effect that is applied by the EnrageTalent.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Melee.EnrageTalent.rand">
            <summary>
            A random number generator.
            </summary>
        </member>
        <member name="T:Zelda.Talents.Melee.FrenzyTalent">
            <summary>
            The FrenzyTalent provides the player to gain the Frenzy effect 
            when they crit with any melee attack.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Melee.FrenzyTalent.FrenzyEffectDuration">
            <summary>
            The duration of the frenzy effect.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Melee.FrenzyTalent.GetSpeed(System.Int32)">
            <summary>
            Gets the speed increase provided by the Frenzy effect.
            </summary>
            <param name="level">The level of the talent.</param>
            <returns>The speed increase.</returns>
        </member>
        <member name="M:Zelda.Talents.Melee.FrenzyTalent.GetDescription(System.Int32)">
            <summary>
            Gets the description of this Talent for
            the specified talent level.
            </summary>
            <param name="level">
            The level of the talent to get the description for.
            </param>
            <returns>
            The localized description of this Talent for the specified talent level.
            </returns>
        </member>
        <member name="M:Zelda.Talents.Melee.FrenzyTalent.#ctor(Zelda.Talents.TalentTree,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Talents.Melee.FrenzyTalent"/> class.
            </summary>
            <param name="tree">
            The TalentTree that owns the new FrenzyTalent.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Talents.Melee.FrenzyTalent.SetupNetwork">
            <summary>
            Setups the connections of this FrenzyTalent with other Talents in the TalentTree.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Melee.FrenzyTalent.Initialize">
            <summary>
            Initializes this FrenzyTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Melee.FrenzyTalent.Uninitialize">
            <summary>
            Uninitializes this FrenzyTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Melee.FrenzyTalent.Refresh">
            <summary>
            Refreshes the strength of this FrenzyTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Melee.FrenzyTalent.OnCriticalMeleeStrike(Zelda.Status.Statable)">
            <summary>
            Gets called when the player crits with a melee attack.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
        </member>
        <member name="F:Zelda.Talents.Melee.FrenzyTalent.effect">
            <summary>
            The AttackSpeedEffect that gets applied by Frenzy.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Melee.FrenzyTalent.aura">
            <summary>
            The TimedAura that holds the AttackSpeedEffect that gets applied by Frenzy.
            </summary>
        </member>
        <member name="T:Zelda.Talents.Melee.FrustrationTalent">
            <summary>
            The player turns his frustration into anger;
            <para>
            increasing chance to get a Double Attack by 20/40/60%.
            In his anger the player has a 25% chance to hit himself.
            Can't proc off of itself.
            1 minute duration, 5 minutes cooldown.
            </para>
            </summary>
        </member>
        <member name="F:Zelda.Talents.Melee.FrustrationTalent.ProcChancePerLevel">
            <summary>
            The chance to get a double attack.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Melee.FrustrationTalent.SelfHitChance">
            <summary>
            The chance for the player to hit himself.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Melee.FrustrationTalent.SelfHitDamageMultiplier">
            <summary>
            The damage multiplier applied to self-inflicted damage while under the Frustration effect.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Melee.FrustrationTalent.Duration">
            <summary>
            The duration of the Frustration effect.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Melee.FrustrationTalent.Cooldown">
            <summary>
            The cooldown of the Frustration skill.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Melee.FrustrationTalent.ManaNeededPoBM">
            <summary>
            The mana needed per point of base mana.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Melee.FrustrationTalent.GetDescription(System.Int32)">
            <summary>
            Gets the description of this Talent for
            the specified talent level.
            </summary>
            <param name="level">
            The level of the talent to get the description for.
            </param>
            <returns>
            The localized description of this Talent for the specified talent level.
            </returns>
        </member>
        <member name="M:Zelda.Talents.Melee.FrustrationTalent.#ctor(Zelda.Talents.TalentTree,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Talents.Melee.FrustrationTalent"/> class.
            </summary>
            <param name="tree">
            The TalentTree that owns the new FrustrationTalent.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Talents.Melee.FrustrationTalent.SetupNetwork">
            <summary>
            Setups the connections of this FrustrationTalent with the other Talents in the TalentTree.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Melee.FrustrationTalent.CreateSkill">
            <summary>
            Creates the Skill object of the SkillTalent.
            </summary>
            <remarks>
            The actual skill objects are only created when really required.
            </remarks>
            <returns>
            The newly created instance of the Skill.
            </returns>
        </member>
        <member name="T:Zelda.Talents.Melee.FurorTalent">
            <summary>
            The FurorTalent provides the player with the Furor skill.
            <para>
            Furor increases melee attack speed by 15%/30%/45% for 10 seconds.
            </para>
            </summary>
        </member>
        <member name="F:Zelda.Talents.Melee.FurorTalent.SpeedIncreasePerLevel">
            <summary>
            The ranged speed increase provided by Furor for each talent level.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Melee.FurorTalent.Duration">
            <summary>
            The duration of Furor in seconds.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Melee.FurorTalent.Cooldown">
            <summary>
            The cooldown of the Furor skill.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Melee.FurorTalent.GetDescription(System.Int32)">
            <summary>
            Gets the description of this Talent for
            the specified talent level.
            </summary>
            <param name="level">
            The level of the talent to get the description for.
            </param>
            <returns>
            The localized description of this Talent for the specified talent level.
            </returns>
        </member>
        <member name="P:Zelda.Talents.Melee.FurorTalent.SpeedIncrease">
            <summary>
            Gets the speed increase provided by the Furor skill.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Melee.FurorTalent.#ctor(Zelda.Talents.TalentTree,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Talents.Melee.FurorTalent"/> class.
            </summary>
            <param name="tree">
            The TalentTree that owns the new FurorTalent.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Talents.Melee.FurorTalent.SetupNetwork">
            <summary>
            Setups the connections of this FurorTalent with the other Talents of the TalentTree.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Melee.FurorTalent.CreateSkill">
            <summary>
            Creates the Skill object of this FurorTalent.
            </summary>
            <remarks>
            The actual skill objects are only created when really required.
            </remarks>
            <returns>
            The newly created instance of the Skill.
            </returns>
        </member>
        <member name="T:Zelda.Talents.Melee.ImprovedBashTalent">
            <summary>
            'Improved Bash' is a passive talent that increases
            the chance to crit with Bash by 5% per point invested
            for a total of 15%.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Melee.ImprovedBashTalent.CritIncreasePerLevel">
            <summary>
            The crit increase 'Improved Bash' provides to Bash per talent point.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Melee.ImprovedBashTalent.GetDescription(System.Int32)">
            <summary>
            Gets the description of this Talent for
            the specified talent level.
            </summary>
            <param name="level">
            The level of the talent to get the description for.
            </param>
            <returns>
            The localized description of this Talent for the specified talent level.
            </returns>
        </member>
        <member name="P:Zelda.Talents.Melee.ImprovedBashTalent.BashCritIncrease">
            <summary>
            Gets the crit increase this ImprovedBashTalent provides for the BashSkill.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Melee.ImprovedBashTalent.#ctor(Zelda.Talents.TalentTree,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Talents.Melee.ImprovedBashTalent"/> class.
            </summary>
            <param name="tree">
            The TalentTree that owns the ImprovedBashTalent.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Talents.Melee.ImprovedBashTalent.SetupNetwork">
            <summary>
            Setups the connections of this ImprovedBashTalent with the other Talents in the TalentTree.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Melee.ImprovedBashTalent.Initialize">
            <summary>
            Initializes this ImprovedBashTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Melee.ImprovedBashTalent.Uninitialize">
            <summary>
            Uninitializes this ImprovedBashTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Melee.ImprovedBashTalent.Refresh">
            <summary>
            Refreshes this ImprovedBashTalent.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Melee.ImprovedBashTalent.bashTalent">
            <summary>
            Identifies the BashTalent which gets improved by this ImprovedBashTalent.
            </summary>
        </member>
        <member name="T:Zelda.Talents.Melee.MeleeTrainingTalent">
            <summary>
            Defines the root talent of the Melee sub-TalentTree.
            Increases Strength by 1 per level.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Melee.MeleeTrainingTalent.#ctor(Zelda.Talents.TalentTree,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Talents.Melee.MeleeTrainingTalent"/> class.
            </summary>
            <param name="tree">
            The TalentTree that owns the MeleeTrainingTalent.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Talents.Melee.MeleeTrainingTalent.SetupNetwork">
            <summary>
            Setups the connections of this MeleeTrainingTalent with the other Talents of the TalentTree.
            </summary>
        </member>
        <member name="T:Zelda.Talents.Melee.PushingAttackTalent">
            <summary>
            The PushingAttackTalent provides the player the PushingAttackSkill.
            <para>
            Pushing Attack pushes the enemy away with full power dealing MeleeDamage,
            increasing pushing power by X to Y.
            </para>
            </summary>
        </member>
        <member name="F:Zelda.Talents.Melee.PushingAttackTalent.Cooldown">
            <summary>
            The cooldown of the attack in seconds.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Melee.PushingAttackTalent.BasePushingPower">
            <summary>
            The base pushing power of the PushingAttack,
            not considering in the level of the talent.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Melee.PushingAttackTalent.PushingPowerMinimumPerLevel">
            <summary>
            The minimum pushing power increase per level.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Melee.PushingAttackTalent.PushingPowerMaximumPerLevel">
            <summary>
            The maximum pushing power increase per level.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Melee.PushingAttackTalent.GetDescription(System.Int32)">
            <summary>
            Gets the description of this Talent for
            the specified talent level.
            </summary>
            <param name="level">
            The level of the talent to get the description for.
            </param>
            <returns>
            The localized description of this Talent for the specified talent level.
            </returns>
        </member>
        <member name="P:Zelda.Talents.Melee.PushingAttackTalent.PushingPowerMinimum">
            <summary>
            Gets the minimum pushing power of the Pushing Attack.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Melee.PushingAttackTalent.PushingPowerMaximum">
            <summary>
            Gets the maximum pushing power of the Pushing Attack.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Melee.PushingAttackTalent.#ctor(Zelda.Talents.TalentTree,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Talents.Melee.PushingAttackTalent"/> class.
            </summary>
            <param name="tree">
            The TalentTree that owns the new PushingAttackTalent.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Talents.Melee.PushingAttackTalent.SetupNetwork">
            <summary>
            Setups the connections of this PushingAttackTalent with the other Talents in the TalentTree.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Melee.PushingAttackTalent.CreateSkill">
            <summary>
            Creates the Skill object of this PushingAttackTalent.
            </summary>
            <remarks>
            The actual skill objects are only created when really required.
            </remarks>
            <returns>
            The newly created instance of the Skill.
            </returns>
        </member>
        <member name="T:Zelda.Talents.Melee.QuickStrikeTalent">
            <summary>
            The QuickStrikeTalent learns the QuickStrikeSkill.
            <para>
            Requires a Dagger to be used!
            </para>
            <para>
            Swiftly strikes at the enemy dealing MeleeDamage. 
            Can proc Double Attack. Cooldown of {0} seconds.
            </para>
            </summary>
        </member>
        <member name="F:Zelda.Talents.Melee.QuickStrikeTalent.ManaNeededPoBM">
            <summary>
            The mana needed per point of base mana.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Melee.QuickStrikeTalent.GetDescription(System.Int32)">
            <summary>
            Gets the description of this Talent for
            the specified talent level.
            </summary>
            <param name="level">
            The level of the talent to get the description for.
            </param>
            <returns>
            The localized description of this Talent for the specified talent level.
            </returns>
        </member>
        <member name="P:Zelda.Talents.Melee.QuickStrikeTalent.Cooldown">
            <summary>
            Gets the damage multiplier the talent provides to the Bash Attack.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Melee.QuickStrikeTalent.GetCooldown(System.Int32)">
            <summary>
            Gets the cooldown of the Quick Strike attack.
            </summary>
            <param name="level">
            The level of the talent.
            </param>
            <returns>
            The cooldown in seconds.
            </returns>
        </member>
        <member name="M:Zelda.Talents.Melee.QuickStrikeTalent.#ctor(Zelda.Talents.TalentTree,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Talents.Melee.QuickStrikeTalent"/> class.
            </summary>
            <param name="tree">
            The TalentTree that owns the new QuickStrikeTalent.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Talents.Melee.QuickStrikeTalent.SetupNetwork">
            <summary>
            Setups the connections of this BashTalent with the other Talents in the TalentTree.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Melee.QuickStrikeTalent.CreateSkill">
            <summary>
            Creates the Skill object of the SkillTalent.
            </summary>
            <remarks>
            The actual skill objects are only created when really required.
            </remarks>
            <returns>
            The newly created instance of the Skill.
            </returns>
        </member>
        <member name="F:Zelda.Talents.Melee.QuickStrikeTalent.swiftFightStyleTalent">
            <summary>
            Identifies the SwiftFightStyleTalent that improves this QuickStrikeTalent.
            </summary>
        </member>
        <member name="T:Zelda.Talents.Melee.RecoverWoundsTalent">
            <summary>
            The <see cref="T:Zelda.Talents.Melee.RecoverWoundsTalent"/> provides the player
            the RecoverWoundsSkill.
            <para>
            Recover Wounds increases Life Regeneration 
            by 100% per talent-level for a total of 300%.
            </para>
            </summary>
        </member>
        <member name="F:Zelda.Talents.Melee.RecoverWoundsTalent.Duration">
            <summary>
            The duration of the Increased Life Regneration effect
            provided by the skill.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Melee.RecoverWoundsTalent.Cooldown">
            <summary>
            The cooldown of the RecoverWoundsSkill.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Melee.RecoverWoundsTalent.LifeRegenIncreasePerLevel">
            <summary>
            The life regeneration increase in % provided by the Talent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Melee.RecoverWoundsTalent.GetDescription(System.Int32)">
            <summary>
            Gets the description of this Talent for
            the specified talent level.
            </summary>
            <param name="level">
            The level of the talent to get the description for.
            </param>
            <returns>
            The localized description of this Talent for the specified talent level.
            </returns>
        </member>
        <member name="P:Zelda.Talents.Melee.RecoverWoundsTalent.LifeRegenerationIncrease">
            <summary>
            Gets the Life Regeneration increase provided by the effect of the RecoverWoundsSkill.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Melee.RecoverWoundsTalent.#ctor(Zelda.Talents.TalentTree,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Talents.Melee.RecoverWoundsTalent"/> class.
            </summary>
            <param name="tree">
            The TalentTree that owns the new RecoverWoundsTalent.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Talents.Melee.RecoverWoundsTalent.SetupNetwork">
            <summary>
            Setups the connections of this RecoverWoundsTalent with the other Talents of the TalentTree.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Melee.RecoverWoundsTalent.CreateSkill">
            <summary>
            Creates the Skill object of the RecoverWoundsTalent.
            </summary>
            <remarks>
            The actual skill objects are only created when really required.
            </remarks>
            <returns>
            The newly created instance of the Skill.
            </returns>
        </member>
        <member name="T:Zelda.Talents.Melee.RevitalizingStrikesTalent">
            <summary>
            The RevitalizingStrikesTalent gives a 15% chance on physical melee or 
            ranged attack to heal self for 15/20/25% of damage done.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Melee.RevitalizingStrikesTalent.FixedProcChance">
            <summary>
            States the chance for the Revitalizing Strikes effect
            to proc on a melee or ranged attack in percent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Melee.RevitalizingStrikesTalent.GetDamageToHealingMultiplier(System.Int32)">
            <summary>
            Gets the multiplier that is applied to damage done to
            get healing done by the Revitalizing Strikes.
            </summary>
            <param name="level">
            The level of the talent.
            </param>
            <returns>
            The multiplier that convert damage -> healing.
            </returns>
        </member>
        <member name="M:Zelda.Talents.Melee.RevitalizingStrikesTalent.GetDescription(System.Int32)">
            <summary>
            Gets the description of this Talent for
            the specified talent level.
            </summary>
            <param name="level">
            The level of the talent to get the description for.
            </param>
            <returns>
            The localized description of this Talent for the specified talent level.
            </returns>
        </member>
        <member name="M:Zelda.Talents.Melee.RevitalizingStrikesTalent.#ctor(Zelda.Talents.TalentTree,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Talents.Melee.RevitalizingStrikesTalent"/> class.
            </summary>
            <param name="tree">
            The TalentTree that owns the new RevitalizingStrikesTalent.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Talents.Melee.RevitalizingStrikesTalent.SetupNetwork">
            <summary>
            Setups the Talent's TalentRequirements, following Talents and any additional components.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Melee.RevitalizingStrikesTalent.Initialize">
            <summary>
            Initializes this RevitalizingStrikesTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Melee.RevitalizingStrikesTalent.Uninitialize">
            <summary>
            Initializes this RevitalizingStrikesTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Melee.RevitalizingStrikesTalent.Refresh">
            <summary>
            Refreshes the strength of this RevitalizingStrikesTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Melee.RevitalizingStrikesTalent.OnAttackUsed(System.Object,Zelda.Entities.Components.AttackEventArgs)">
            <summary>
            Called when the player has used any attack.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
            <param name="e">
            The AttackEventArgs that contain the event data.
            </param>
        </member>
        <member name="M:Zelda.Talents.Melee.RevitalizingStrikesTalent.TryProc(Zelda.Attacks.AttackDamageResult)">
            <summary>
            Gets a value indicating whether the Revitalizing Strikes
            effect has procced.
            </summary>
            <param name="damageResult">
            The result of the attack which might proc the effect.
            </param>
            <returns>
            true if it has procced;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Talents.Melee.RevitalizingStrikesTalent.Proc(System.Int32)">
            <summary>
            Procs the Revitalizing Strikes effect; healing the player.
            </summary>
            <param name="damageDone">
            The amount of damage that has been done.
            </param>
        </member>
        <member name="M:Zelda.Talents.Melee.RevitalizingStrikesTalent.GetAmountHealed(System.Int32)">
            <summary>
            Converts damage done of the player into self healing
            given by the Revitalizing Strikes effect.
            </summary>
            <param name="damageDone">
            The damage that has been done.
            </param>
            <returns>
            The self healing the player should receive.
            </returns>
        </member>
        <member name="M:Zelda.Talents.Melee.RevitalizingStrikesTalent.ApplyHealing(System.Int32)">
            <summary>
            Heals the player that owns this RevitalizingStrikesTalent
            for the specified <paramref name="amount"/>.
            </summary>
            <param name="amount">
            The amount to heal.
            </param>
        </member>
        <member name="M:Zelda.Talents.Melee.RevitalizingStrikesTalent.CanProc(Zelda.Attacks.AttackDamageResult@)">
            <summary>
            Gets a value indicating whether damage descriped by the specified
            <see cref="T:Zelda.Status.Damage.DamageTypeInfo"/> instance can proc the Revitalizing Strikes
            effect.
            </summary>
            <param name="damageResult">
            The result of the attack which might proc the effect.
            </param>
            <returns>
            true if theoretically the Revitalizing Strikes effect could proc;
            otherwise false.
            </returns>
        </member>
        <member name="F:Zelda.Talents.Melee.RevitalizingStrikesTalent.damageToHealingMultiplier">
            <summary>
            The multiplier value that converts a damage done into self healing received.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Melee.RevitalizingStrikesTalent.rand">
            <summary>
            A random number generator.
            </summary>
        </member>
        <member name="T:Zelda.Talents.Melee.ShieldBlockTalent">
            <summary>
            The ShieldBlockTalent provides the player access to the ShieldBlockSkill.
            <para>
            Shield Block increases Chance to Block by 10/20/30 for 15 seconds. 
            60 seconds cooldown.
            </para>
            </summary>
        </member>
        <member name="F:Zelda.Talents.Melee.ShieldBlockTalent.Cooldown">
            <summary>
            The cooldown of the Shield Block skill.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Melee.ShieldBlockTalent.Duration">
            <summary>
            The duration of the Battle Shout skill.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Melee.ShieldBlockTalent.GetBlockChanceIncrease(System.Int32)">
            <summary>
            Gets the fixed Block Chance increase the Shield Block skill provides
            at the given level.
            </summary>
            <param name="level">The level of the Talent.</param>
            <returns>
            The increased block chance.
            </returns>
        </member>
        <member name="M:Zelda.Talents.Melee.ShieldBlockTalent.GetDescription(System.Int32)">
            <summary>
            Gets the description of this Talent for
            the specified talent level.
            </summary>
            <param name="level">
            The level of the talent to get the description for.
            </param>
            <returns>
            The localized description of this Talent for the specified talent level.
            </returns>
        </member>
        <member name="P:Zelda.Talents.Melee.ShieldBlockTalent.BlockChanceIncrease">
            <summary>
            Gets the fixed Block Chance increase the Shield Block skill provides.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Melee.ShieldBlockTalent.#ctor(Zelda.Talents.TalentTree,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Talents.Melee.ShieldBlockTalent"/> class.
            </summary>
            <param name="tree">
            The TalentTree that owns the new ShieldBlockTalent.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Talents.Melee.ShieldBlockTalent.SetupNetwork">
            <summary>
            Setups the connections of this ShieldBlockTalent with the other Talents in the TalentTree.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Melee.ShieldBlockTalent.CreateSkill">
            <summary>
            Creates the Skill object of this ShieldBlockTalent.
            </summary>
            <remarks>
            The actual skill objects are only created when really required.
            </remarks>
            <returns>
            The newly created instance of the Skill.
            </returns>
        </member>
        <member name="T:Zelda.Talents.Melee.ShieldBreakerTalent">
            <summary>
            The <see cref="T:Zelda.Talents.Melee.ShieldBreakerTalent"/> provides the player
            the ShieldBreakerSkill.
            <para>
            You build up strength in your swords arm after blocking an attack.
            Unleashes MeleeDmg + BlockValue * ({0} * Block Points)% damage. 
            1 Block Point is awarded for each block; lasting 15 seconds. 
            5 Block Points maximum.
            </para>
            </summary>
        </member>
        <member name="F:Zelda.Talents.Melee.ShieldBreakerTalent.BlockPointDuration">
            <summary>
            The time in seconds block points last until the vanish completely.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Melee.ShieldBreakerTalent.MaximumBlockPoints">
            <summary>
            The maximum number of block points the player can have at a time.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Melee.ShieldBreakerTalent.Cooldown">
            <summary>
            The cooldown of the ShieldBreakerSkill.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Melee.ShieldBreakerTalent.ManaNeededPoBM">
            <summary>
            The mana needed to use this skill per point of base mana.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Melee.ShieldBreakerTalent.BlockValueMultiplierPerBlockPoint">
            <summary>
            Gets the BlockValue multiplier applied per block point.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Melee.ShieldBreakerTalent.GetDescription(System.Int32)">
            <summary>
            Gets the description of this Talent for
            the specified talent level.
            </summary>
            <param name="level">
            The level of the talent to get the description for.
            </param>
            <returns>
            The localized description of this Talent for the specified talent level.
            </returns>
        </member>
        <member name="M:Zelda.Talents.Melee.ShieldBreakerTalent.#ctor(Zelda.Talents.TalentTree,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Talents.Melee.ShieldBreakerTalent"/> class.
            </summary>
            <param name="tree">
            The TalentTree that owns the new ShieldBreakerTalent.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Talents.Melee.ShieldBreakerTalent.SetupNetwork">
            <summary>
            Setups the connections of this ShieldBreakerTalent with the other Talents of the TalentTree.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Melee.ShieldBreakerTalent.GetBlockValueMultiplierPerBlockPoint(System.Int32)">
            <summary>
            Gets the BlockValue multiplier used to convert BlockValue into actual damage
            for the given talent level.
            </summary>
            <param name="level">The level of the talent.</param>
            <returns>
            The multiplier value.
            </returns>
        </member>
        <member name="M:Zelda.Talents.Melee.ShieldBreakerTalent.CreateSkill">
            <summary>
            Creates the Skill object of the ShieldBreakerTalent.
            </summary>
            <remarks>
            The actual skill objects are only created when really required.
            </remarks>
            <returns>
            The newly created instance of the Skill.
            </returns>
        </member>
        <member name="T:Zelda.Talents.Melee.ShieldMasteryTalent">
            <summary>
            The ShieldMasteryTalent increases Block Chance by 5/10/15% and Block Value by 15/25/35%.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Melee.ShieldMasteryTalent.GetPercentualBlockValue(System.Int32)">
            <summary>
            Gets the %-Block Value increase given by the ShieldMasteryTalent of the given level.
            </summary>
            <param name="level">The level of the talent.</param>
            <returns>The block chance in %.</returns>
        </member>
        <member name="M:Zelda.Talents.Melee.ShieldMasteryTalent.GetFixedBlockChance(System.Int32)">
            <summary>
            Gets the increased Chance to Block given by the ShieldMasteryTalent of the given level.
            </summary>
            <param name="level">The level of the talent.</param>
            <returns>The block chance in %.</returns>
        </member>
        <member name="M:Zelda.Talents.Melee.ShieldMasteryTalent.GetDescription(System.Int32)">
            <summary>
            Gets the description of this Talent for
            the specified talent level.
            </summary>
            <param name="level">
            The level of the talent to get the description for.
            </param>
            <returns>
            The localized description of this Talent for the specified talent level.
            </returns>
        </member>
        <member name="M:Zelda.Talents.Melee.ShieldMasteryTalent.#ctor(Zelda.Talents.TalentTree,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Talents.Melee.ShieldMasteryTalent"/> class.
            </summary>
            <param name="tree">
            The TalentTree that owns the new ShieldMasteryTalent.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Talents.Melee.ShieldMasteryTalent.SetupNetwork">
            <summary>
            Setups the connections of this ShieldMasteryTalent with the other Talents in the TalentTree.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Melee.ShieldMasteryTalent.Initialize">
            <summary>
            Initializes this ShieldMasteryTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Melee.ShieldMasteryTalent.Uninitialize">
            <summary>
            Uninitializes this ShieldMasteryTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Melee.ShieldMasteryTalent.Refresh">
            <summary>
            Refreshes the strength of this ShieldMasteryTalent.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Melee.ShieldMasteryTalent.fixedBlockChanceEffect">
            <summary>
            Identifies the ChanceToStatusEffect this ShieldMasteryTalent provides.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Melee.ShieldMasteryTalent.percentualBlockValueEffect">
            <summary>
            Identifies the BlockValueEffect this ShieldMasteryTalent provides.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Melee.ShieldMasteryTalent.aura">
            <summary>
            Identifies the PermanentAura that holds the StatusValueEffects this ShieldMasteryTalent provides.
            </summary>
        </member>
        <member name="T:Zelda.Talents.Melee.ShieldWallTalent">
            <summary>
            The ShieldWallTalent learns the player the ShieldWallSkill.
            <para>
            Reduces physical damage taken by 15/20/25%.
            As a penalty also reduces damage done
            by 10% and movement speed by 40%.
            </para>
            <para>
            Shield Wall doesn't cost Mana and is active until deactivated.
            </para>
            </summary>
        </member>
        <member name="F:Zelda.Talents.Melee.ShieldWallTalent.DamageDoneReducement">
            <summary>
            The damage done penality that is applied to the player when he uses the ShieldWall skill.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Melee.ShieldWallTalent.MovementSpeedReducement">
            <summary>
            The movement speed  penality that is applied to the player when he uses the ShieldWall skill.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Melee.ShieldWallTalent.Cooldown">
            <summary>
            The cooldown of the skill.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Melee.ShieldWallTalent.GetDamageTakenReducement(System.Int32)">
            <summary>
            Gets the damage taken reducement in % provided by the Shield Wall ability.
            </summary>
            <param name="level">
            The level of the talent.
            </param>
            <returns>
            The damage reduction in %.
            </returns>
        </member>
        <member name="M:Zelda.Talents.Melee.ShieldWallTalent.GetDescription(System.Int32)">
            <summary>
            Gets the description of this Talent for
            the specified talent level.
            </summary>
            <param name="level">
            The level of the talent to get the description for.
            </param>
            <returns>
            The localized description of this Talent for the specified talent level.
            </returns>
        </member>
        <member name="P:Zelda.Talents.Melee.ShieldWallTalent.DamageTakenReducement">
            <summary>
            Gets the damage taken reducement provided by the Shield Wall ability.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Melee.ShieldWallTalent.#ctor(Zelda.Talents.TalentTree,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Talents.Melee.ShieldWallTalent"/> class.
            </summary>
            <param name="tree">
            The TalentTree that owns the new ShieldWallTalent.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Talents.Melee.ShieldWallTalent.SetupNetwork">
            <summary>
            Setups the connections of this ShieldWallTalent with the other Talents in the TalentTree.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Melee.ShieldWallTalent.CreateSkill">
            <summary>
            Creates the Skill object of this ShieldWallTalent.
            </summary>
            <remarks>
            The actual skill objects are only created when really required.
            </remarks>
            <returns>
            The newly created instance of the Skill.
            </returns>
        </member>
        <member name="T:Zelda.Talents.Melee.ToughnessTalent">
            <summary>
            Toughness increases armor by 6% per level for a total of 30%. 
            </summary>
            <remarks>
            Armor decreases damage taken by physical attacks.
            </remarks>
        </member>
        <member name="F:Zelda.Talents.Melee.ToughnessTalent.ArmorIncrease">
            <summary>
            The armor increase in % provided by the talent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Melee.ToughnessTalent.#ctor(Zelda.Talents.TalentTree,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Talents.Melee.ToughnessTalent"/> class.
            </summary>
            <param name="tree">
            The TalentTree that owns the new ToughnessTalent.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Talents.Melee.ToughnessTalent.SetupNetwork">
            <summary>
            Setups this ToughnessTalent.
            </summary>
        </member>
        <member name="T:Zelda.Talents.Melee.VitalityTalent">
            <summary>
            The VitalityTalent provides a 7% Vitality increase per level;
            for a total increase of +35% Vitality.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Melee.VitalityTalent.VitalityIncreasePerLevel">
            <summary>
            States the vitality increase in % provided by the <see cref="T:Zelda.Talents.Melee.VitalityTalent"/>.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Melee.VitalityTalent.GetDescription(System.Int32)">
            <summary>
            Gets the description of this Talent for
            the specified talent level.
            </summary>
            <param name="level">
            The level of the talent to get the description for.
            </param>
            <returns>
            The localized description of this Talent for the specified talent level.
            </returns>
        </member>
        <member name="M:Zelda.Talents.Melee.VitalityTalent.#ctor(Zelda.Talents.TalentTree,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Talents.Melee.VitalityTalent"/> class.
            </summary>
            <param name="tree">
            The TalentTree that owns the new VitalityTalent.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Talents.Melee.VitalityTalent.SetupNetwork">
            <summary>
            Setups the connections of this VitalityTalent with the other Talents in the TalentTree.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Melee.VitalityTalent.Initialize">
            <summary>
            Initializes this VitalityTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Melee.VitalityTalent.Uninitialize">
            <summary>
            Uninitializes this VitalityTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Melee.VitalityTalent.Refresh">
            <summary>
            Refreshes the strength of this VitalityTalent.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Melee.VitalityTalent.effect">
            <summary>
            Identifies the StatEffect this VitalityTalent provides.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Melee.VitalityTalent.aura">
            <summary>
            Identifies the PermanentAura that holds the Status Effects this VitalityTalent provides.
            </summary>
        </member>
        <member name="T:Zelda.Talents.Melee.WhirlwindTalent">
            <summary>
            The WhirlwindTalent provides the player with the WhirlwindSkill.
            <para>
            Whirlwind is a powerful attack that needs to be charged up.
            After the charge is complete the player turns like a Whirlwind,
            hitting and pushing all enemies extremly hard. (40% increased damage)
            </para>
            </summary>
        </member>
        <member name="F:Zelda.Talents.Melee.WhirlwindTalent.DamageIncreaseInPercentPerLevel">
            <summary>
            The damage increase in % per talent level.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Melee.WhirlwindTalent.BaseCooldown">
            <summary>
            The base cooldown of the Skill.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Melee.WhirlwindTalent.CooldownReductionPerLevel">
            <summary>
            The cooldown reduction per talent level.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Melee.WhirlwindTalent.ManaNeededPoBM">
            <summary>
            The mana needed per point of base mana to use the Skill.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Melee.WhirlwindTalent.GetDescription(System.Int32)">
            <summary>
            Gets the description of this Talent for
            the specified talent level.
            </summary>
            <param name="level">
            The level of the talent to get the description for.
            </param>
            <returns>
            The localized description of this Talent for the specified talent level.
            </returns>
        </member>
        <member name="P:Zelda.Talents.Melee.WhirlwindTalent.DamageMultiplier">
            <summary>
            Gets the damage multiplier of the Whirlwind Attack.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Melee.WhirlwindTalent.Cooldown">
            <summary>
            Gets the cooldown of the Whirlwind Skill.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Melee.WhirlwindTalent.#ctor(Zelda.Talents.TalentTree,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Talents.Melee.WhirlwindTalent"/> class.
            </summary>
            <param name="tree">
            The TalentTree that owns the new WhirlwindTalent.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Talents.Melee.WhirlwindTalent.SetupNetwork">
            <summary>
            Setups the connections of this WhirlwindTalent with the other Talents in the TalentTree.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Melee.WhirlwindTalent.RefreshSkill">
            <summary>
            Refreshes the power of the Skill that is related to this SkillTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Melee.WhirlwindTalent.CreateSkill">
            <summary>
            Creates the Skill object of this WhirlwindTalent.
            </summary>
            <remarks>
            The actual skill objects are only created when really required.
            </remarks>
            <returns>
            The newly created instance of the Skill.
            </returns>
        </member>
        <member name="T:Zelda.Talents.Ranged.AgilityTrainingTalent">
            <summary>
            The AgilityTrainingTalent provides the player
            5% Agility increase per level for a total increase of +30% Vitality.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Ranged.AgilityTrainingTalent.AgilityIncreasePerLevel">
            <summary>
            The agility increase in % provided by the <see cref="T:Zelda.Talents.Ranged.AgilityTrainingTalent"/>.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Ranged.AgilityTrainingTalent.#ctor(Zelda.Talents.TalentTree,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Talents.Ranged.AgilityTrainingTalent"/> class.
            </summary>
            <param name="tree">
            The TalentTree that owns the new AgilityTrainingTalent.
            </param>
            <param name="serviceProvider">
            Provides fastaccess to game-related service.
            </param>
        </member>
        <member name="M:Zelda.Talents.Ranged.AgilityTrainingTalent.SetupNetwork">
            <summary>
            Setups the connections of this AgilityTrainingTalent with the other Talents in the TalentTree.
            </summary>
        </member>
        <member name="T:Zelda.Talents.Ranged.ArrowRushTalent">
            <summary>
            You gain a 6/9/12/15/18% chance to unleash a Multi Shot
            when you fire a normal arrow.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Ranged.ArrowRushTalent.GetChanceToProc(System.Int32)">
            <summary>
            Gets the chance for the Arrow Rush to proc at the given level.
            </summary>
            <param name="level">
            The level of the talent.
            </param>
            <returns>
            The chance to proc as a value from 0..100.
            </returns>
        </member>
        <member name="M:Zelda.Talents.Ranged.ArrowRushTalent.GetDescription(System.Int32)">
            <summary>
            Gets the description of this Talent for
            the specified talent level.
            </summary>
            <param name="level">
            The level of the talent to get the description for.
            </param>
            <returns>
            The localized description of this Talent for the specified talent level.
            </returns>
        </member>
        <member name="M:Zelda.Talents.Ranged.ArrowRushTalent.#ctor(Zelda.Talents.TalentTree,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Talents.Ranged.ArrowRushTalent"/> class.
            </summary>
            <param name="tree">
            The TalentTree that owns the new GoForTheHeadTalent.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Talents.Ranged.ArrowRushTalent.SetupNetwork">
            <summary>
            Setups the connections of this ArrowRushTalent with the other Talents of the TalentTree.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Ranged.ArrowRushTalent.Initialize">
            <summary>
            Initializes this ArrowRushTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Ranged.ArrowRushTalent.Uninitialize">
            <summary>
            Uninitializes this ArrowRushTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Ranged.ArrowRushTalent.GetNormalRangedSkill">
            <summary>
            Gets the NormalRangedAttackSkill of the player.
            </summary>
            <returns>
            The Skill that triggers the Arrow Rush effect.
            </returns>
        </member>
        <member name="M:Zelda.Talents.Ranged.ArrowRushTalent.OnNormalRangedSkillFired(Zelda.Skills.Skill)">
            <summary>
            Raised when the player has sucessfully fired the NormalRangedAttackSkill.
            </summary>
            <param name="skill">
            The skill that has been fired.
            </param>
        </member>
        <member name="M:Zelda.Talents.Ranged.ArrowRushTalent.Procs">
            <summary>
            Gets a value indicating whether the Arrow Rush Talent should proc
            now.
            </summary>
            <returns>
            true if it should fire the Multi Shot;
            or otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Talents.Ranged.ArrowRushTalent.FireMultiShot">
            <summary>
            Fires a MultiShot.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Ranged.ArrowRushTalent.Refresh">
            <summary>
            Refreshes the strength of this ArrowRushTalent.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Ranged.ArrowRushTalent.chance">
            <summary>
            Captures the current chance that the Arrow Rush effect 
            will proc when the player fires a normal arrow.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Ranged.ArrowRushTalent.multiShotTalent">
            <summary>
            Represents the talent that is used to fiire the Multi Shots. 
            </summary>
        </member>
        <member name="F:Zelda.Talents.Ranged.ArrowRushTalent.rand">
            <summary>
            A random number generator.
            </summary>
        </member>
        <member name="T:Zelda.Talents.Ranged.ArrowShowerTalent">
            <summary>
            The ArrowShowerTalent learns the player the ArrowShowerSkill.
            <para>
            'You fire one Multi Shot every X seconds for Y seconds.'
            </para>
            </summary>
        </member>
        <member name="F:Zelda.Talents.Ranged.ArrowShowerTalent.Cooldown">
            <summary>
            The time in seconds it takes for the attack to cooldown
            and be reuseable again.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Ranged.ArrowShowerTalent.ManaNeededPoBM">
            <summary>
            The mana needed per point of base mana.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Ranged.ArrowShowerTalent.TimeBetweenMultiShots">
            <summary>
            The time in seconds between two Multi Shots.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Ranged.ArrowShowerTalent.BaseAttackCount">
            <summary>
            The base number of multi shots.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Ranged.ArrowShowerTalent.AttackCountPerLevel">
            <summary>
            The number of
            </summary>
        </member>
        <member name="M:Zelda.Talents.Ranged.ArrowShowerTalent.GetDescription(System.Int32)">
            <summary>
            Gets the description of this Talent for
            the specified talent level.
            </summary>
            <param name="level">
            The level of the talent to get the description for.
            </param>
            <returns>
            The localized description of this Talent for the specified talent level.
            </returns>
        </member>
        <member name="P:Zelda.Talents.Ranged.ArrowShowerTalent.AttackCount">
            <summary>
            Gets the number of Multi Shots the Arrow Shower unleashes.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Ranged.ArrowShowerTalent.#ctor(Zelda.Talents.TalentTree,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Talents.Ranged.ArrowShowerTalent"/> class.
            </summary>
            <param name="tree">
            The TalentTree that owns the new ArrowShowerTalent.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Talents.Ranged.ArrowShowerTalent.SetupNetwork">
            <summary>
            Setups the connections of this ArrowShowerTalent with the other Talents of the TalentTree.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Ranged.ArrowShowerTalent.CreateSkill">
            <summary>
            Creates the Skill object of this ArrowShowerTalent.
            </summary>
            <remarks>
            The actual skill objects are only created when really required.
            </remarks>
            <returns>
            The newly created instance of the Skill.
            </returns>
        </member>
        <member name="T:Zelda.Talents.Ranged.DodgeTrainingTalent">
            <summary>
            The DodgeTrainingTalent increases the Chance To Dodge by 1% per talent level.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Ranged.DodgeTrainingTalent.#ctor(Zelda.Talents.TalentTree,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Talents.Ranged.DodgeTrainingTalent"/> class.
            </summary>
            <param name="tree">
            The TalentTree that owns the new DodgeTrainingTalent.
            </param>
            <param name="serviceProvider">
            Provides fastaccess to game-related service.
            </param>
        </member>
        <member name="M:Zelda.Talents.Ranged.DodgeTrainingTalent.SetupNetwork">
            <summary>
            Setups the connections of this DodgeTrainingTalent with the other Talents in the TalentTree.
            </summary>
        </member>
        <member name="T:Zelda.Talents.Ranged.FireBombChainTalent">
            <summary>
            The Bomb Chain talent allows the player to place more than one FireBomb before the cooldown is triggered.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Ranged.FireBombChainTalent.GlobalCooldown">
            <summary>
            The minimum time in seconds between bombs.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Ranged.FireBombChainTalent.ExtraBombsPerLevel">
            <summary>
            The number of extra bombs this FireBombChainTalent provides per level to the FireBombSkill.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Ranged.FireBombChainTalent.ExtraCooldownPerLevel">
            <summary>
            The number of seconds added to the cooldown for each talent level.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Ranged.FireBombChainTalent.ExtraBombs">
            <summary>
            Gets the number of extra bombs this FireBombChainTalent provides to the FireBombSkill.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Ranged.FireBombChainTalent.ExtraCooldown">
            <summary>
            The number of seconds added to the cooldown added to the FireBombSkill.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Ranged.FireBombChainTalent.ManaCostReductionPoBM">
            <summary>
            Gets the reduction of mana needed per point of base mana for each bomb.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Ranged.FireBombChainTalent.GetDescription(System.Int32)">
            <summary>
            Gets the description of this Talent for
            the specified talent level.
            </summary>
            <param name="level">
            The level of the talent to get the description for.
            </param>
            <returns>
            The localized description of this Talent for the specified talent level.
            </returns>
        </member>
        <member name="M:Zelda.Talents.Ranged.FireBombChainTalent.#ctor(Zelda.Talents.TalentTree,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Talents.Ranged.FireBombChainTalent"/> class.
            </summary>
            <param name="tree">
            The TalentTree that owns the new FireBombChainTalent.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Talents.Ranged.FireBombChainTalent.SetupNetwork">
            <summary>
            Setups the connections of this FireBombChainTalent with the other Talents of the TalentTree.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Ranged.FireBombChainTalent.Initialize">
            <summary>
            Initializes this FireBombChainTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Ranged.FireBombChainTalent.Uninitialize">
            <summary>
            Uninitializes this FireBombChainTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Ranged.FireBombChainTalent.Refresh">
            <summary>
            Refreshes the strength of this FireBombChainTalent.
            </summary>
        </member>
        <member name="T:Zelda.Talents.Ranged.FireBombTalent">
            <summary>
            The FireBombTalent provides the player access to the FireBombSkill.
            <para>
            Plants a bomb that deals (35/55/75% Ranged + 60% Magic) damage on explosion
            and knocks all hit targets away.
            </para>
            </summary>
        </member>
        <member name="F:Zelda.Talents.Ranged.FireBombTalent.Cooldown">
            <summary>
            The time in seconds it takes for the attack to cooldown
            and be reuseable again.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Ranged.FireBombTalent.ManaNeededPoBM">
            <summary>
            The mana needed per point of base mana.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Ranged.FireBombTalent.ExplosionRadius">
            <summary>
            The radius of the FireBomb's explosion.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Ranged.FireBombTalent.ExplosionPushingPower">
            <summary>
            The pushing power of the FireBomb's explosion.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Ranged.FireBombTalent.RangedDamageContributionPerLevel">
            <summary>
            The amount of damage that comes from ranged damage in %.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Ranged.FireBombTalent.BaseMagicDamageContribution">
            <summary>
            The amount of damage that comes from magic damage in %.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Ranged.FireBombTalent.GetRangedDamageContribution(System.Int32)">
            <summary>
            Gets the amount of damage that comes from ranged damage in %.
            </summary>
            <param name="level">The level of the talent.</param>
            <returns>
            The damage contribution from ranged damage.
            </returns>
        </member>
        <member name="P:Zelda.Talents.Ranged.FireBombTalent.RangedMagicDamageContribution">
            <summary>
            Gets the amount of damage that comes from ranged damage in %.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Ranged.FireBombTalent.MagicDamageContribution">
            <summary>
            Gets the amount of damage that comes from magic damage in %.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Ranged.FireBombTalent.GetDescription(System.Int32)">
            <summary>
            Gets the description of this Talent for
            the specified talent level.
            </summary>
            <param name="level">
            The level of the talent to get the description for.
            </param>
            <returns>
            The localized description of this Talent for the specified talent level.
            </returns>
        </member>
        <member name="M:Zelda.Talents.Ranged.FireBombTalent.#ctor(Zelda.Talents.TalentTree,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Talents.Ranged.FireBombTalent"/> class.
            </summary>
            <param name="tree">
            The TalentTree that owns the new FireBombTalent.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Talents.Ranged.FireBombTalent.SetupNetwork">
            <summary>
            Setups the connections of this FireBombTalent with the other Talents of the TalentTree.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Ranged.FireBombTalent.CreateSkill">
            <summary>
            Creates the Skill object of the FireBombTalent.
            </summary>
            <remarks>
            The actual skill objects are only created when really required.
            </remarks>
            <returns>
            The newly created instance of the Skill.
            </returns>
        </member>
        <member name="T:Zelda.Talents.Ranged.GoForTheHeadTalent">
            <summary>
            Provides a passive effect that increases chance to crit by (0,25% to 1,25%) for each ranged attack that hits.
            <para>
            This bonus chance is wiped when any attack crits.
            </para>
            </summary>
        </member>
        <member name="F:Zelda.Talents.Ranged.GoForTheHeadTalent.CritBonusPerHitPerLevel">
            <summary>
            The crit bonus that is added for each hit.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Ranged.GoForTheHeadTalent.GetDescription(System.Int32)">
            <summary>
            Gets the description of this Talent for
            the specified talent level.
            </summary>
            <param name="level">
            The level of the talent to get the description for.
            </param>
            <returns>
            The localized description of this Talent for the specified talent level.
            </returns>
        </member>
        <member name="M:Zelda.Talents.Ranged.GoForTheHeadTalent.#ctor(Zelda.Talents.TalentTree,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Talents.Ranged.GoForTheHeadTalent"/> class.
            </summary>
            <param name="tree">
            The TalentTree that owns the new GoForTheHeadTalent.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Talents.Ranged.GoForTheHeadTalent.SetupNetwork">
            <summary>
            Setups the connections of this GoForTheHeadTalent with the other Talents of the TalentTree.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Ranged.GoForTheHeadTalent.Initialize">
            <summary>
            Initializes this GoForTheHeadTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Ranged.GoForTheHeadTalent.Uninitialize">
            <summary>
            Uninitializes this GoForTheHeadTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Ranged.GoForTheHeadTalent.Refresh">
            <summary>
            Refreshes this GoForTheHeadTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Ranged.GoForTheHeadTalent.OnRangedHit(Zelda.Status.Statable)">
            <summary>
            Called when the player hits with any ranged ttack.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
        </member>
        <member name="M:Zelda.Talents.Ranged.GoForTheHeadTalent.OnCrit(Zelda.Status.Statable)">
            <summary>
            Called when the player crits with any attack.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
        </member>
        <member name="F:Zelda.Talents.Ranged.GoForTheHeadTalent.critBonusPerHit">
            <summary>
            The bonus crit the player gets for each ranged hit until he crits.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Ranged.GoForTheHeadTalent.hitCount">
            <summary>
            Stores the number of hits the player had without getting a crit.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Ranged.GoForTheHeadTalent.aura">
            <summary>
            The aura that contains the passive effect of the Talent.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Ranged.GoForTheHeadTalent.effect">
            <summary>
            The effect of the Talent.
            </summary>
        </member>
        <member name="T:Zelda.Talents.Ranged.HandEyeCoordinationTalent">
            <summary>
            Increases dexterity by 5%/10% of total agility.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Ranged.HandEyeCoordinationTalent.PercentageOfAgilityToDexterityPerLevel">
            <summary>
            The amount of agility that is converted into dexterity per talent level.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Ranged.HandEyeCoordinationTalent.GetDescription(System.Int32)">
            <summary>
            Gets the description of this Talent for
            the specified talent level.
            </summary>
            <param name="level">
            The level of the talent to get the description for.
            </param>
            <returns>
            The localized description of this Talent for the specified talent level.
            </returns>
        </member>
        <member name="M:Zelda.Talents.Ranged.HandEyeCoordinationTalent.#ctor(Zelda.Talents.TalentTree,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Talents.Ranged.HandEyeCoordinationTalent"/> class.
            </summary>
            <param name="tree">
            The TalentTree that owns the new HandEyeCoordinationTalent.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Talents.Ranged.HandEyeCoordinationTalent.SetupNetwork">
            <summary>
            Setups the connections of this HandEyeCoordinationTalent with the other Talents of the TalentTree.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Ranged.HandEyeCoordinationTalent.Initialize">
            <summary>
            Initializes this HandEyeCoordinationTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Ranged.HandEyeCoordinationTalent.Uninitialize">
            <summary>
            Uninitializes this HandEyeCoordinationTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Ranged.HandEyeCoordinationTalent.Refresh">
            <summary>
            Refreshes the strength of this HandEyeCoordinationTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Ranged.HandEyeCoordinationTalent.OnPlayerAgilityUpdated(System.Object,System.EventArgs)">
            <summary>
            Called when the total agility of the player has been updated.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The EventArgs that contains the event data.</param>
        </member>
        <member name="F:Zelda.Talents.Ranged.HandEyeCoordinationTalent.aura">
            <summary>
            The aura that contains the passive effect of the Talent.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Ranged.HandEyeCoordinationTalent.effect">
            <summary>
            The effect of the Talent.
            </summary>
        </member>
        <member name="T:Zelda.Talents.Ranged.HeadshotTalent">
            <summary>
            The HeadshotTalent provides the player with the HeadshotSkill.
            <para>
            Headshot is a swift ranged instant attack that can only be used
            after getting a critical ranged attack.
            </para>
            <para>
            You aim for the head after getting a critical attack,
            fireing a swift partially armor-piercing arrow that 
            has an improved chance to crit and pierce of 10/20/30%.
            </para>
            </summary>
        </member>
        <member name="F:Zelda.Talents.Ranged.HeadshotTalent.CritAndPierceChanceIncreasePerLevel">
            <summary>
            The chance to crit and pierce the Headshot attack has over
            a normal ranged attack per talent level.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Ranged.HeadshotTalent.TimeUseableAfterCrit">
            <summary>
            The time the Headshot attack can be used for after getting a crit.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Ranged.HeadshotTalent.Cooldown">
            <summary>
            The cooldown of the Headshot attack.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Ranged.HeadshotTalent.ManaNeededPoBM">
            <summary>
            The mana needed per point of base mana.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Ranged.HeadshotTalent.ArrowSpeedMultiplier">
            <summary>
            The multiplier used to calculate the speed of Headshot Arrow.
            </summary>
            <remarks>
            30% faster.
            </remarks>
        </member>
        <member name="F:Zelda.Talents.Ranged.HeadshotTalent.ArmorPiercingModifier">
            <summary>
            The armor piercing modifier value of a Headshot.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Ranged.HeadshotTalent.CritChanceIncrease">
            <summary>
            Gets the crit chance increase of a Headshot,
            compared to a normal ranged attack.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Ranged.HeadshotTalent.AdditionalPiercingChance">
            <summary>
            Gets the pierce chance increase of a Headshot,
            compared to a normal ranged attack.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Ranged.HeadshotTalent.GetDescription(System.Int32)">
            <summary>
            Gets the description of this Talent for
            the specified talent level.
            </summary>
            <param name="level">
            The level of the talent to get the description for.
            </param>
            <returns>
            The localized description of this Talent for the specified talent level.
            </returns>
        </member>
        <member name="M:Zelda.Talents.Ranged.HeadshotTalent.#ctor(Zelda.Talents.TalentTree,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Talents.Ranged.HeadshotTalent"/> class.
            </summary>
            <param name="tree">
            The TalentTree that owns the new HeadshotTalent.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Talents.Ranged.HeadshotTalent.SetupNetwork">
            <summary>
            Setups the connections of this HeadshotTalent with the other Talents of the TalentTree.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Ranged.HeadshotTalent.GetCritAndPierceChanceIncrease(System.Int32)">
            <summary>
            Calculates the crit chance increase of an Headshot, compared to a normal ranged attack.
            </summary>
            <param name="level">
            The level of the talent.
            </param>
            <returns>
            The crit chance increase in %.
            </returns>
        </member>
        <member name="M:Zelda.Talents.Ranged.HeadshotTalent.CreateSkill">
            <summary>
            Creates the Skill object of this HeadshotTalent.
            </summary>
            <remarks>
            The actual skill objects are only created when really required.
            </remarks>
            <returns>
            The newly created instance of the Skill.
            </returns>
        </member>
        <member name="T:Zelda.Talents.Ranged.ImprovedMultiShotTalent">
            <summary>
            The ImprovedMultiShotTalent reduces the cooldown
            of the MultiShotSkill by 2/4/6 seconds.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Ranged.ImprovedMultiShotTalent.CooldownReductionPerLevel">
            <summary>
            The cooldown reduction the ImprovedMultiShotTalent provides per level to the MultiShotSkill.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Ranged.ImprovedMultiShotTalent.CooldownReduction">
            <summary>
            Gets the cooldown reduction this ImprovedMultiShotTalent provides to the MultiShotSkill.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Ranged.ImprovedMultiShotTalent.GetDescription(System.Int32)">
            <summary>
            Gets the description of this Talent for
            the specified talent level.
            </summary>
            <param name="level">
            The level of the talent to get the description for.
            </param>
            <returns>
            The localized description of this Talent for the specified talent level.
            </returns>
        </member>
        <member name="M:Zelda.Talents.Ranged.ImprovedMultiShotTalent.#ctor(Zelda.Talents.TalentTree,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Talents.Ranged.ImprovedMultiShotTalent"/> class.
            </summary>
            <param name="tree">
            The TalentTree that owns the new ImprovedMultiShotTalent.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Talents.Ranged.ImprovedMultiShotTalent.SetupNetwork">
            <summary>
            Setups the connections of this ImprovedMultiShotTalent with the other Talents of the TalentTree.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Ranged.ImprovedMultiShotTalent.Initialize">
            <summary>
            Initializes this ImprovedMultiShotTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Ranged.ImprovedMultiShotTalent.Uninitialize">
            <summary>
            Uninitializes this ImprovedMultiShotTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Ranged.ImprovedMultiShotTalent.Refresh">
            <summary>
            Refreshes the strength of this ImprovedMultiShotTalent.
            </summary>
        </member>
        <member name="T:Zelda.Talents.Ranged.LightArrowTalent">
            <summary>
            The LightArrowTalent provides the player access to the LightArrowSkill.
            <para>
            The LightArrowSkill is an instant attack that does Light damage
            equal to (Ranged Damage + Fixed)*Multiplier.
            Each use takes up 10% of base mana.
            </para>
            </summary>
        </member>
        <member name="F:Zelda.Talents.Ranged.LightArrowTalent.BaseCooldown">
            <summary>
            The time in seconds it takes for the attack to cooldown
            and be reuseable again.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Ranged.LightArrowTalent.ManaNeededPoBM">
            <summary>
            The mana needed per point of base mana.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Ranged.LightArrowTalent.FixedDamageIncreasePerLevel">
            <summary>
            The fixed damage increase provided over a normal ranged attack.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Ranged.LightArrowTalent.MultiplicativeDamageIncreasePerLevel">
            <summary>
            The multiplicative damage increase provided over a normal ranged attack.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Ranged.LightArrowTalent.GetDescription(System.Int32)">
            <summary>
            Gets the description of this Talent for
            the specified talent level.
            </summary>
            <param name="level">
            The level of the talent to get the description for.
            </param>
            <returns>
            The localized description of this Talent for the specified talent level.
            </returns>
        </member>
        <member name="P:Zelda.Talents.Ranged.LightArrowTalent.Cooldown">
            <summary>
            Gets the cooldown of the Light Arrow attack.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Ranged.LightArrowTalent.DamageMultiplier">
            <summary>
            Gets the damage multiplier the talent provides to the Light Arrow Attack.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Ranged.LightArrowTalent.FixedDamageIncrease">
            <summary>
            Gets the fixed damage increase the talent provides to the Light Arrow Attack.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Ranged.LightArrowTalent.#ctor(Zelda.Talents.TalentTree,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Talents.Ranged.LightArrowTalent"/> class.
            </summary>
            <param name="tree">
            The TalentTree that owns the new LightArrowTalent.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Talents.Ranged.LightArrowTalent.SetupNetwork">
            <summary>
            Setups the connections of this LightArrowTalent with the other Talents of the TalentTree.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Ranged.LightArrowTalent.CreateSkill">
            <summary>
            Creates the Skill object of the LightArrowTalent.
            </summary>
            <remarks>
            The actual skill objects are only created when really required.
            </remarks>
            <returns>
            The newly created instance of the Skill.
            </returns>
        </member>
        <member name="F:Zelda.Talents.Ranged.LightArrowTalent.swiftFightStyleTalent">
            <summary>
            Identifies the SwiftFightStyleTalent that improves this Light Arrow Talent.
            </summary>
        </member>
        <member name="T:Zelda.Talents.Ranged.MultiShotTalent">
            <summary>
            The MultiShotTalent provides the player the MultiShotSkill.
            MultiShot is an instant attack that releases (3 + 1 per level) arrows at the same time.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Ranged.MultiShotTalent.DamageReduction">
            <summary>
            The damage reduction applied compared to a normal ranged attacks.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Ranged.MultiShotTalent.Cooldown">
            <summary>
            The time in seconds it takes for the attack to cooldown
            and be reuseable again.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Ranged.MultiShotTalent.ManaNeededPoBM">
            <summary>
            The mana needed per point of base mana.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Ranged.MultiShotTalent.BaseArrowCount">
            <summary>
            The number of arrows released as a base-line.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Ranged.MultiShotTalent.ArrowIncreasePerLevel">
            <summary>
            The number of arrows added to the attack for each talent-level.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Ranged.MultiShotTalent.GetDescription(System.Int32)">
            <summary>
            Gets the description of this Talent for
            the specified talent level.
            </summary>
            <param name="level">
            The level of the talent to get the description for.
            </param>
            <returns>
            The localized description of this Talent for the specified talent level.
            </returns>
        </member>
        <member name="P:Zelda.Talents.Ranged.MultiShotTalent.ArrowCount">
            <summary>
            Gets a value that represents the number of arrows released by the MultiShot attack.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Ranged.MultiShotTalent.#ctor(Zelda.Talents.TalentTree,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Talents.Ranged.MultiShotTalent"/> class.
            </summary>
            <param name="tree">
            The TalentTree that owns the new MultiShotTalent.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Talents.Ranged.MultiShotTalent.SetupNetwork">
            <summary>
            Setups the connections of this MultiShotTalent with the other Talents of the TalentTree.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Ranged.MultiShotTalent.CreateSkill">
            <summary>
            Creates the Skill object of this MultiShotTalent.
            </summary>
            <remarks>
            The actual skill objects are only created when really required.
            </remarks>
            <returns>
            The newly created instance of the Skill.
            </returns>
        </member>
        <member name="T:Zelda.Talents.Ranged.PiercingArrowsTalent">
            <summary>
            The PiercingArrowsTalent increases the chance 
            projectiles pierce through enemies.
            </summary>
            <remarks>
            The chance is increased by 3% per talent level.
            </remarks>
        </member>
        <member name="F:Zelda.Talents.Ranged.PiercingArrowsTalent.ChanceToPiereIncreasePerLevel">
            <summary>
            The chance to pierce with ranged attacks increase the Talent provides per talent level.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Ranged.PiercingArrowsTalent.GetDescription(System.Int32)">
            <summary>
            Gets the description of this Talent for
            the specified talent level.
            </summary>
            <param name="level">
            The level of the talent to get the description for.
            </param>
            <returns>
            The localized description of this Talent for the specified talent level.
            </returns>
        </member>
        <member name="M:Zelda.Talents.Ranged.PiercingArrowsTalent.#ctor(Zelda.Talents.TalentTree,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Talents.Ranged.PiercingArrowsTalent"/> class.
            </summary>
            <param name="tree">
            The TalentTree that owns the new PiercingArrowsTalent.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Talents.Ranged.PiercingArrowsTalent.SetupNetwork">
            <summary>
            Setups the connections of this PiercingArrowsTalent with the other Talents of the TalentTree.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Ranged.PiercingArrowsTalent.Initialize">
            <summary>
            Initializes this PiercingArrowsTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Ranged.PiercingArrowsTalent.Uninitialize">
            <summary>
            Uninitializes this PiercingArrowsTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Ranged.PiercingArrowsTalent.Refresh">
            <summary>
            Refreshes the strength of this PiercingArrowsTalent.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Ranged.PiercingArrowsTalent.effect">
            <summary>
            Identifies the ChanceToStatusEffect this PiercingArrowsTalent provides.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Ranged.PiercingArrowsTalent.aura">
            <summary>
            Identifies the PermanentAura that holds the Status Effects this PiercingArrowsTalent provides.
            </summary>
        </member>
        <member name="T:Zelda.Talents.Ranged.PoisonedShotTalent">
            <summary>
            The PoisonedShotTalent provides the Player with the PoisonedShotSkill.
            <para>
            PoisonedShot is a ranged attack that does 
            (RangedDamage * InstantDamagePenality) plus (RangedDamage*DamageOverTimeMultiplier)
            nature damage over time.
            The effect also slows down the enemy by X% per TalentLevel.
            </para>
            </summary>
        </member>
        <member name="F:Zelda.Talents.Ranged.PoisonedShotTalent.InstantDamagePenality">
            <summary>
            The damage penality of the instant damage part of the PoisonedShot attack.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Ranged.PoisonedShotTalent.MovementSlowingEffectPerLevel">
            <summary>
            The slowing effect applied to a poisoned target.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Ranged.PoisonedShotTalent.TickCount">
            <summary>
            The amount of 'ticks' the effect lasts.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Ranged.PoisonedShotTalent.TickTime">
            <summary>
            The time in seconds between two 'ticks'.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Ranged.PoisonedShotTalent.Duration">
            <summary>
            The duration of the effect in seconds.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Ranged.PoisonedShotTalent.Cooldown">
            <summary>
            The time in seconds it takes for the attack to cool down
            and be reuseable again.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Ranged.PoisonedShotTalent.ManaNeededPoBM">
            <summary>
            The mana needed per point of base mana to use the Skill.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Ranged.PoisonedShotTalent.GetDamageOverTimeMultiplier(System.Int32)">
            <summary>
            Gets the multiplier value that is applied to ranged damage to calculate
            the total Damage Over Time nature damage inflincted by Poisoned Shot.
            </summary>
            <param name="level">
            The level of the talent.
            </param>
            <returns>
            The multiplier value.
            </returns>
        </member>
        <member name="M:Zelda.Talents.Ranged.PoisonedShotTalent.GetDescription(System.Int32)">
            <summary>
            Gets the description of this Talent for
            the specified talent level.
            </summary>
            <param name="level">
            The level of the talent to get the description for.
            </param>
            <returns>
            The localized description of this Talent for the specified talent level.
            </returns>
        </member>
        <member name="P:Zelda.Talents.Ranged.PoisonedShotTalent.DamageOverTimeMultiplier">
            <summary>
            Gets the damage multiplier that is used to calculate 
            the DoneOverTime damage partof the PoisonedShot attack.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Ranged.PoisonedShotTalent.MovementSlowingEffect">
            <summary>
            Gets the movement slowing effect applied to a poisoned target.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Ranged.PoisonedShotTalent.#ctor(Zelda.Talents.TalentTree,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Talents.Ranged.PoisonedShotTalent"/> class.
            </summary>
            <param name="tree">
            The TalentTree that owns the new PoisonedShotTalent.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Talents.Ranged.PoisonedShotTalent.SetupNetwork">
            <summary>
            Setups the connections of this PoisonedShotTalent with the other Talents of the TalentTree.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Ranged.PoisonedShotTalent.CreateSkill">
            <summary>
            Creates the Skill object of this PoisonedShotTalent.
            </summary>
            <remarks>
            The actual skill objects are only created when really required.
            </remarks>
            <returns>
            The newly created instance of the Skill.
            </returns>
        </member>
        <member name="T:Zelda.Talents.Ranged.QuickHandsTalent">
            <summary>
            Increases attack speed and spell haste by 2.5%/5%.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Ranged.QuickHandsTalent.AttackSpeedIncreasePerLevel">
            <summary>
            The amount of attack speed increased per talent level.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Ranged.QuickHandsTalent.GetDescription(System.Int32)">
            <summary>
            Gets the description of this Talent for
            the specified talent level.
            </summary>
            <param name="level">
            The level of the talent to get the description for.
            </param>
            <returns>
            The localized description of this Talent for the specified talent level.
            </returns>
        </member>
        <member name="M:Zelda.Talents.Ranged.QuickHandsTalent.#ctor(Zelda.Talents.TalentTree,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Talents.Ranged.QuickHandsTalent"/> class.
            </summary>
            <param name="tree">
            The TalentTree that owns the new QuickHandsTalent.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Talents.Ranged.QuickHandsTalent.SetupNetwork">
            <summary>
            Setups the connections of this QuickHandsTalent with the other Talents of the TalentTree.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Ranged.QuickHandsTalent.Initialize">
            <summary>
            Initializes this QuickHandsTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Ranged.QuickHandsTalent.Uninitialize">
            <summary>
            Uninitializes this QuickHandsTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Ranged.QuickHandsTalent.Refresh">
            <summary>
            Refreshes the power of the QuickHandsTalent effect.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Ranged.QuickHandsTalent.aura">
            <summary>
            The aura that contains the passive effect of the Talent.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Ranged.QuickHandsTalent.attackSpeedEffect">
            <summary>
            The AttackSpeedEffect this QuickHandsTalent provides.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Ranged.QuickHandsTalent.spellHasteEffect">
            <summary>
            The SpellHasteEffect this QuickHandsTalent provides.
            </summary>
        </member>
        <member name="T:Zelda.Talents.Ranged.RangedTrainingTalent">
            <summary>
            Defines the root talent of the Ranged sub-TalenTree.
            Increases Dexterty by 1 per level.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Ranged.RangedTrainingTalent.#ctor(Zelda.Talents.TalentTree,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Talents.Ranged.RangedTrainingTalent"/> class.
            </summary>
            <param name="tree">
            The talent tree that owns the talent.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Talents.Ranged.RangedTrainingTalent.SetupNetwork">
            <summary>
            Setups the connections of this RangedTrainingTalent with the other Talents of the TalentTree.
            </summary>
        </member>
        <member name="T:Zelda.Talents.Ranged.RapidFireTalent">
            <summary>
            The RapidFireTalent provides the player with the Rapid Fire skill.
            <para>
            Rapid Fire increases chance to pierce by 10%/20%/30% and ranged attack speed by 15%/30%/45% for 24 seconds.
            </para>
            </summary>
        </member>
        <member name="F:Zelda.Talents.Ranged.RapidFireTalent.SpeedIncreasePerLevel">
            <summary>
            The ranged speed increase provided by Rapid Fire for each talent level.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Ranged.RapidFireTalent.PierceIncreasePerLevel">
            <summary>
            The ranged pierce increase provided by Rapid Fire for each talent level.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Ranged.RapidFireTalent.Duration">
            <summary>
            The duration of Rapid Fire in seconds.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Ranged.RapidFireTalent.Cooldown">
            <summary>
            The cooldown of the Rapid Fire skill.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Ranged.RapidFireTalent.ManaNeededPoBM">
            <summary>
            The mana needed per point of base mana.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Ranged.RapidFireTalent.GetDescription(System.Int32)">
            <summary>
            Gets the description of this Talent for
            the specified talent level.
            </summary>
            <param name="level">
            The level of the talent to get the description for.
            </param>
            <returns>
            The localized description of this Talent for the specified talent level.
            </returns>
        </member>
        <member name="P:Zelda.Talents.Ranged.RapidFireTalent.SpeedChanceIncrease">
            <summary>
            Gets the speed increase provided by the Rapid Fire skill.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Ranged.RapidFireTalent.PiercingChanceIncrease">
            <summary>
            Gets the piercing increase provided by the Rapid Fire skill.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Ranged.RapidFireTalent.#ctor(Zelda.Talents.TalentTree,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Talents.Ranged.RapidFireTalent"/> class.
            </summary>
            <param name="tree">
            The TalentTree that owns the new RapidFireTalent.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Talents.Ranged.RapidFireTalent.SetupNetwork">
            <summary>
            Setups the connections of this RapidFireTalent with the other Talents of the TalentTree.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Ranged.RapidFireTalent.CreateSkill">
            <summary>
            Creates the Skill object of this RapidFireTalent.
            </summary>
            <remarks>
            The actual skill objects are only created when really required.
            </remarks>
            <returns>
            The newly created instance of the Skill.
            </returns>
        </member>
        <member name="T:Zelda.Talents.Ranged.RogueWeaponMasteryTalent">
            <summary>
            Passively increases damage done with bows by 1/2/3% and damage done with daggery by 2/4/6%.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Ranged.RogueWeaponMasteryTalent.GetDamageIncreaseWithBows(System.Int32)">
            <summary>
            Gets the damage increase to bows this talent gives for the given level.
            </summary>
            <param name="level">
            The level of the talent.
            </param>
            <returns>
            The damage increase in %.
            </returns>
        </member>
        <member name="M:Zelda.Talents.Ranged.RogueWeaponMasteryTalent.GetDamageIncreaseWithDaggers(System.Int32)">
            <summary>
            Gets the damage increase to daggers this talent gives for the given level.
            </summary>
            <param name="level">
            The level of the talent.
            </param>
            <returns>
            The damage increase in %.
            </returns>
        </member>
        <member name="M:Zelda.Talents.Ranged.RogueWeaponMasteryTalent.GetDescription(System.Int32)">
            <summary>
            Gets the description of this Talent for
            the specified talent level.
            </summary>
            <param name="level">
            The level of the talent to get the description for.
            </param>
            <returns>
            The localized description of this Talent for the specified talent level.
            </returns>
        </member>
        <member name="M:Zelda.Talents.Ranged.RogueWeaponMasteryTalent.#ctor(Zelda.Talents.TalentTree,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Talents.Ranged.RogueWeaponMasteryTalent"/> class.
            </summary>
            <param name="tree">
            The TalentTree that owns the new RogueWeaponMasteryTalent.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Talents.Ranged.RogueWeaponMasteryTalent.SetupNetwork">
            <summary>
            Setups the connections of this RogueWeaponMasteryTalent with the other Talents of the TalentTree.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Ranged.RogueWeaponMasteryTalent.Initialize">
            <summary>
            Initializes this RogueWeaponMasteryTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Ranged.RogueWeaponMasteryTalent.Uninitialize">
            <summary>
            Uninitializes this RogueWeaponMasteryTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Ranged.RogueWeaponMasteryTalent.Refresh">
            <summary>
            Refreshes the strength of this RogueWeaponMasteryTalent.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Ranged.RogueWeaponMasteryTalent.aura">
            <summary>
            The aura that contains the passive effect of the Talent.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Ranged.RogueWeaponMasteryTalent.effectBow">
            <summary>
            The effect of the Talent.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Ranged.RogueWeaponMasteryTalent.effectDagger">
            <summary>
            The effect of the Talent.
            </summary>
        </member>
        <member name="T:Zelda.Talents.Ranged.SprintTalent">
            <summary>
            The SprintTalent provides the Player with the SprintSkill.
            Sprint increases the movement speed of the Player for a fixed amount of time.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Ranged.SprintTalent.MovementSpeedIncreasePerLevel">
            <summary>
            The movement speed increase the Talent provides per talent-level.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Ranged.SprintTalent.Cooldown">
            <summary>
            The time in seconds it takes for the Skill to cool down
            and be reuseable again.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Ranged.SprintTalent.Duration">
            <summary>
            The duration of the effect.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Ranged.SprintTalent.MovementSpeedIncrease">
            <summary>
            Gets the movement speed increase (in %) of Sprint provided by the Sprint Talent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Ranged.SprintTalent.GetDescription(System.Int32)">
            <summary>
            Gets the description of this Talent for
            the specified talent level.
            </summary>
            <param name="level">
            The level of the talent to get the description for.
            </param>
            <returns>
            The localized description of this Talent for the specified talent level.
            </returns>
        </member>
        <member name="M:Zelda.Talents.Ranged.SprintTalent.#ctor(Zelda.Talents.TalentTree,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Talents.Ranged.SprintTalent"/> class.
            </summary>
            <param name="tree">
            The TalentTree that owns the new SprintTalent.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Talents.Ranged.SprintTalent.SetupNetwork">
            <summary>
            Setups the talent and its connections with the other Talents of the TalentTree.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Ranged.SprintTalent.CreateSkill">
            <summary>
            Creates the Skill object of the SkillTalent.
            </summary>
            <remarks>
            The actual skill objects are only created when really required.
            </remarks>
            <returns>
            The newly created instance of the Skill.
            </returns>
        </member>
        <member name="T:Zelda.Talents.SkillTalent">
            <summary>
            Defines a <see cref="T:Zelda.Talents.Talent"/> that provides
            the player with a new <see cref="P:Zelda.Talents.SkillTalent.Skill"/>.
            </summary>
        </member>
        <member name="P:Zelda.Talents.SkillTalent.Skill">
            <summary>
            Gets the skill that is provided through the SkillTalent.
            </summary>
            <value>
            Is null until the SkillTalent is actully learned.
            </value>
        </member>
        <member name="P:Zelda.Talents.SkillTalent.SkillType">
            <summary>
            Gets the Type of the Skill learned by this SkillTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.SkillTalent.#ctor(System.String,Atom.Xna.Sprite,System.Int32,Zelda.Talents.TalentTree,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Talents.SkillTalent"/> class.
            </summary>
            <param name="localizedName">
            The localized name of the talent.
            </param>
            <param name="symbol">
            The symbol of the Talent.
            </param>
            <param name="maximumLevel">
            The maximum number of TalentPoints the Player can invest into the talent.
            </param>
            <param name="tree">
            The TalentTree that 'owns' the new Talent.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Talents.SkillTalent.CreateSkill">
            <summary>
            Creates the <see cref="P:Zelda.Talents.SkillTalent.Skill"/> object of this SkillTalent.
            </summary>
            <remarks>
            The actual skill objects are only created when really required.
            </remarks>
            <returns>
            The newly created instance of the Skill.
            </returns>
        </member>
        <member name="M:Zelda.Talents.SkillTalent.Initialize">
            <summary>
            Initializes this SkillTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.SkillTalent.Uninitialize">
            <summary>
            Uninitializes this SkillTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.SkillTalent.Refresh">
            <summary>
            Refreshes the strength of this SkillTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.SkillTalent.RefreshSkill">
            <summary>
            Refreshes the power of the <see cref="P:Zelda.Talents.SkillTalent.Skill"/> that is related to this SkillTalent.
            </summary>
        </member>
        <member name="F:Zelda.Talents.SkillTalent.skill">
            <summary>
            The skill that is provided through this SkillTalent.
            </summary>
        </member>
        <member name="T:Zelda.Talents.SkillTalent`1">
            <summary>
            Defines a <see cref="T:Zelda.Talents.Talent"/> that provides
            the player with a new <see cref="P:Zelda.Talents.SkillTalent`1.Skill"/>.
            </summary>
            <typeparam name="TSkill">
            The exact type of the skill provided
            by this SkillTalent.
            </typeparam>
        </member>
        <member name="P:Zelda.Talents.SkillTalent`1.Skill">
            <summary>
            Gets the skill that is provided through the SkillTalent{TSkill}.
            </summary>
        </member>
        <member name="P:Zelda.Talents.SkillTalent`1.SkillType">
            <summary>
            Gets the Type of the Skill learned by this SkillTalent{TSkill}.
            </summary>
        </member>
        <member name="M:Zelda.Talents.SkillTalent`1.#ctor(System.String,Atom.Xna.Sprite,System.Int32,Zelda.Talents.TalentTree,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Talents.SkillTalent`1"/> class.
            </summary>
            <param name="localizedName">
            The localized name of the talent.
            </param>
            <param name="symbol">
            The symbol of the Talent.
            </param>
            <param name="maximumLevel">
            The maximum number of TalentPoints the Player can invest into the talent.
            </param>
            <param name="tree">
            The TalentTree that 'owns' the new Talent.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Talents.SkillTalent`1.Initialize">
            <summary>
            Initializes this SkillTalent{TSkill}.
            </summary>
        </member>
        <member name="M:Zelda.Talents.SkillTalent`1.Uninitialize">
            <summary>
            Uninitializes this SkillTalent{TSkill}.
            </summary>
        </member>
        <member name="F:Zelda.Talents.SkillTalent`1.skill">
            <summary>
            The skill that is provided through this SkillTalent{TSkill}.
            </summary>
        </member>
        <member name="T:Zelda.Talents.StatRootTalent">
            <summary>
            Represents a <see cref="T:Zelda.Talents.Talent"/> which increases a <see cref="T:Zelda.Status.Stat"/> of the Player by a specific value.
            This is an abstract 'helper' class.
            </summary>
        </member>
        <member name="M:Zelda.Talents.StatRootTalent.GetFixedIncrease(System.Int32)">
            <summary>
            Gets the fixed stat increase given by this StatRootTalent for the given level.
            </summary>
            <param name="level">
            The level of the talent.
            </param>
            <returns>
            The fixed stat increase.
            </returns>
        </member>
        <member name="M:Zelda.Talents.StatRootTalent.GetPercentualIncrease(System.Int32)">
            <summary>
            Gets the percentual stat increase given by this StatRootTalent for the given level.
            </summary>
            <param name="level">
            The level of the talent.
            </param>
            <returns>
            The percentual stat increase.
            </returns>
        </member>
        <member name="M:Zelda.Talents.StatRootTalent.GetDescription(System.Int32)">
            <summary>
            Gets the description of this Talent for
            the specified talent level.
            </summary>
            <param name="level">
            The level of the talent to get the description for.
            </param>
            <returns>
            The localized description of this Talent for the specified talent level.
            </returns>
        </member>
        <member name="M:Zelda.Talents.StatRootTalent.#ctor(System.String,Atom.Xna.Sprite,Zelda.Status.Stat,Zelda.Talents.TalentTree,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Talents.StatRootTalent"/> class.
            </summary>
            <param name="localizedName">
            The localized name of the talent.
            </param>
            <param name="symbol">
            The symbol of the Talent.
            </param>
            <param name="stat">
            The stat the new StatRootTalent manipulates.
            </param>
            <param name="tree">
            The TalentTree that 'owns' the new Talent.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Talents.StatRootTalent.Initialize">
            <summary>
            Initializes this StatRootTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.StatRootTalent.Uninitialize">
            <summary>
            Uninitializes this StatRootTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.StatRootTalent.Refresh">
            <summary>
            Refreshes the strength of this StatRootTalent.
            </summary>
        </member>
        <member name="F:Zelda.Talents.StatRootTalent.stat">
            <summary>
            States what kind of stat this StatTalent modifies.
            </summary>
        </member>
        <member name="F:Zelda.Talents.StatRootTalent.fixedFffect">
            <summary>
            Identifies the StatusValueEffect that gets applied by this StatTalent.
            </summary>
        </member>
        <member name="F:Zelda.Talents.StatRootTalent.percentalEffect">
            <summary>
            Identifies the StatusValueEffect that gets applied by this StatTalent.
            </summary>
        </member>
        <member name="F:Zelda.Talents.StatRootTalent.aura">
            <summary>
            Identifies the PermanentAura that stores the StatusValueEffect applied by this StatTalent.
            </summary>
        </member>
        <member name="T:Zelda.Talents.StatTalent">
            <summary>
            Represents a <see cref="T:Zelda.Talents.Talent"/> which increases a <see cref="T:Zelda.Status.Stat"/> of the Player by a specific value.
            This is an abstract 'helper' class.
            </summary>
        </member>
        <member name="M:Zelda.Talents.StatTalent.GetDescription(System.Int32)">
            <summary>
            Gets the description of this Talent for
            the specified talent level.
            </summary>
            <param name="level">
            The level of the talent to get the description for.
            </param>
            <returns>
            The localized description of this Talent for the specified talent level.
            </returns>
        </member>
        <member name="M:Zelda.Talents.StatTalent.#ctor(System.String,Atom.Xna.Sprite,Zelda.Status.Stat,System.Single,Zelda.Status.StatusManipType,System.Int32,Zelda.Talents.TalentTree,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Talents.StatTalent"/> class.
            </summary>
            <param name="localizedName">
            The localized name of the talent.
            </param>
            <param name="symbol">
            The symbol of the Talent.
            </param>
            <param name="stat">
            The stat the new StatTalent manipulates.
            </param>
            <param name="amountPerLevel">
            The amount of the Stat provided for each Talent-Level.
            </param>
            <param name="manipType">
            Defines how the talent increases the Stat.
            </param>
            <param name="maximumLevel">
            The maximum number of TalentPoints the Player can invest into the talent.
            </param>
            <param name="tree">
            The TalentTree that 'owns' the new Talent.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Talents.StatTalent.Initialize">
            <summary>
            Initializes this StatTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.StatTalent.Uninitialize">
            <summary>
            Uninitializes this StatTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.StatTalent.Refresh">
            <summary>
            Refreshes the strength of this StatTalent.
            </summary>
        </member>
        <member name="F:Zelda.Talents.StatTalent.stat">
            <summary>
            States what kind of stat this StatTalent modifies.
            </summary>
        </member>
        <member name="F:Zelda.Talents.StatTalent.manipulationType">
            <summary>
            States how the status value is interpreted.
            </summary>
        </member>
        <member name="F:Zelda.Talents.StatTalent.amountPerLevel">
            <summary>
            States the amount this StatTalent increases the specified Stat per talent level.
            </summary>
        </member>
        <member name="F:Zelda.Talents.StatTalent.effect">
            <summary>
            Identifies the StatusValueEffect that gets applied by this StatTalent.
            </summary>
        </member>
        <member name="F:Zelda.Talents.StatTalent.aura">
            <summary>
            Identifies the PermanentAura that stores the StatusValueEffect applied by this StatTalent.
            </summary>
        </member>
        <member name="T:Zelda.Talents.Support.AngelEmbracementTalent">
            <summary>
            Gives a 5% chance when attacked to increase all Damage Done by 5/10%,
            Armor by 7.5/15% and Magic Find by 15/30% 
            for 12 seconds.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Support.AngelEmbracementTalent.DamageIncreaseInPercent">
            <summary>
            The damage increase the Angel Embracement gives when procced.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Support.AngelEmbracementTalent.ArmorIncreaseInPercent">
            <summary>
            The armor increase the Angel Embracement gives when procced.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Support.AngelEmbracementTalent.MagicFindIncreaseInPercent">
            <summary>
            The magic find increase the Angel Embracement gives when procced.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Support.AngelEmbracementTalent.Duration">
            <summary>
            The duration of the Angel Embracement effect.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Support.AngelEmbracementTalent.ProcChance">
            <summary>
            The chance for the Angel Embracement effect to get applied.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Support.AngelEmbracementTalent.GetDescription(System.Int32)">
            <summary>
            Gets the description of this Talent for
            the specified talent level.
            </summary>
            <param name="level">
            The level of the talent to get the description for.
            </param>
            <returns>
            The localized description of this Talent for the specified talent level.
            </returns>
        </member>
        <member name="M:Zelda.Talents.Support.AngelEmbracementTalent.#ctor(Zelda.Talents.TalentTree,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Talents.Support.AngelEmbracementTalent"/> class.
            </summary>
            <param name="tree">
            The TalentTree that owns the new AngelEmbracementTalent.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Talents.Support.AngelEmbracementTalent.SetupNetwork">
            <summary>
            Setups the talent and its connections with the other Talents in the TalentTree.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Support.AngelEmbracementTalent.Initialize">
            <summary>
            Initializes this LuckyBastardTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Support.AngelEmbracementTalent.Uninitialize">
            <summary>
            Uninitializes this LuckyBastardTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Support.AngelEmbracementTalent.Refresh">
            <summary>
            Refreshes the strength of this AngelEmbracementTalent talent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Support.AngelEmbracementTalent.OnAttacked(System.Object,Zelda.Entities.Components.AttackEventArgs)">
            <summary>
            Called when the player gets hit or crit by any attack.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The AttackedEventArgs that contains the event data.</param>
        </member>
        <member name="F:Zelda.Talents.Support.AngelEmbracementTalent.aura">
            <summary>
            Identifies the PermanentAura that holds the passive StatusEffects this AngelEmbracementTalent provides.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Support.AngelEmbracementTalent.damageEffect">
            <summary>
            The passive damage done effect the Angel Embracement provides.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Support.AngelEmbracementTalent.magicFindEffect">
            <summary>
            The passive magic find effect the Angel Embracement provides.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Support.AngelEmbracementTalent.armorEffect">
            <summary>
            The passive armor effect the Angel Embracement provides.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Support.AngelEmbracementTalent.rand">
            <summary>
            A random number generator.
            </summary>
        </member>
        <member name="T:Zelda.Talents.Support.ConcentrateOnTheFactsTalent">
            <summary>
            The ConcentrateOnTheFactsTalent provides the Player
            with an increased crit rate of 1% per talent level.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Support.ConcentrateOnTheFactsTalent.#ctor(Zelda.Talents.TalentTree,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Talents.Support.ConcentrateOnTheFactsTalent"/> class.
            </summary>
            <param name="tree">The TalentTree that owns the new ConcentrateOnTheFactsTalent.</param>
            <param name="serviceProvider">Provides fast access to game-related services.</param>
        </member>
        <member name="M:Zelda.Talents.Support.ConcentrateOnTheFactsTalent.SetupNetwork">
            <summary>
            Setups the connections of this Talent with the other Talents in the TalentTree.
            </summary>
        </member>
        <member name="T:Zelda.Talents.Support.CriticalBalanceTalent">
            <summary>
            The <see cref="T:Zelda.Talents.Support.CriticalBalanceTalent"/> increases the bonus a critical attack
            has over a normal attack by 3/7/10%.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Support.CriticalBalanceTalent.GetCriticalDamageBonus(System.Int32)">
            <summary>
            Returns the critical damage bonus provided by the Critical Balance Talent.
            </summary>
            <param name="level">
            The level of the talent.
            </param>
            <returns>
            The critical damage bonus for the given talent <paramref name="level"/>.
            </returns>
        </member>
        <member name="M:Zelda.Talents.Support.CriticalBalanceTalent.GetDescription(System.Int32)">
            <summary>
            Gets the description of this Talent for
            the specified talent level.
            </summary>
            <param name="level">
            The level of the talent to get the description for.
            </param>
            <returns>
            The localized description of this Talent for the specified talent level.
            </returns>
        </member>
        <member name="M:Zelda.Talents.Support.CriticalBalanceTalent.#ctor(Zelda.Talents.TalentTree,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Talents.Support.CriticalBalanceTalent"/> class.
            </summary>
            <param name="tree">
            The TalentTree that owns the new CriticalBalanceTalent.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Talents.Support.CriticalBalanceTalent.SetupNetwork">
            <summary>
            Setups the talent and its connections with the other Talents in the TalentTree.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Support.CriticalBalanceTalent.Initialize">
            <summary>
            Initializes this CriticalBalanceTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Support.CriticalBalanceTalent.Uninitialize">
            <summary>
            Uninitializes this CriticalBalanceTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Support.CriticalBalanceTalent.Refresh">
            <summary>
            Refreshes the strength of this CriticalBalanceTalent.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Support.CriticalBalanceTalent.effect">
            <summary>
            Identifies the passive effect this CriticalBalanceTalent provides.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Support.CriticalBalanceTalent.aura">
            <summary>
            Identifies the PermanentAura that holds the passive StatusEffects this CriticalBalanceTalent provides.
            </summary>
        </member>
        <member name="T:Zelda.Talents.Support.LuckyBastardTalent">
            <summary>
            The <see cref="T:Zelda.Talents.Support.LuckyBastardTalent"/> provides the Player
            with a passive effect that increases the chance to find
            rare items by 5%/10%/15%. (MF)
            </summary>
        </member>
        <member name="F:Zelda.Talents.Support.LuckyBastardTalent.PercentalMagicFindIncreasePerLevel">
            <summary>
            The percentage mana regeneration increase provided by the Talent per talent level.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Support.LuckyBastardTalent.GetDescription(System.Int32)">
            <summary>
            Gets the description of this Talent for
            the specified talent level.
            </summary>
            <param name="level">
            The level of the talent to get the description for.
            </param>
            <returns>
            The localized description of this Talent for the specified talent level.
            </returns>
        </member>
        <member name="M:Zelda.Talents.Support.LuckyBastardTalent.#ctor(Zelda.Talents.TalentTree,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Talents.Support.LuckyBastardTalent"/> class.
            </summary>
            <param name="tree">
            The TalentTree that owns the new LuckyBastardTalent.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Talents.Support.LuckyBastardTalent.SetupNetwork">
            <summary>
            Setups the talent and its connections with the other Talents in the TalentTree.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Support.LuckyBastardTalent.Initialize">
            <summary>
            Initializes this LuckyBastardTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Support.LuckyBastardTalent.Uninitialize">
            <summary>
            Uninitializes this LuckyBastardTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Support.LuckyBastardTalent.Refresh">
            <summary>
            Refreshes the strength of this LuckyBastardTalent.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Support.LuckyBastardTalent.effect">
            <summary>
            Identifies the passive effect this LuckyBastardTalent provides.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Support.LuckyBastardTalent.aura">
            <summary>
            Identifies the PermanentAura that holds the passive StatusEffects this LuckyBastardTalent provides.
            </summary>
        </member>
        <member name="T:Zelda.Talents.Support.ManaHullTalent">
            <summary>
            You gain a {0}% chance when attacked to
            surround yourself with a perfect hull of mana;
            regenerating {1}% of base mana over {2} seconds.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Support.ManaHullTalent.ChanceToProcWhenAttacked">
            <summary>
            The chance the Mana Hull effect procs when the player gets attacked.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Support.ManaHullTalent.RegenerationTime">
            <summary>
            The time the Mana Hull takes to apply its full effect.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Support.ManaHullTalent.TickCount">
            <summary>
            States how often the Mana Hull ticks to fully regenerate.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Support.ManaHullTalent.GetPercentageOfBaseManaRegenerated(System.Int32)">
            <summary>
            Gets the base mana regenerated in % by the Mana Hull effect.
            </summary>
            <param name="level">
            The level of the talent.
            </param>
            <returns>
            The amount of base mana regenerated.
            </returns>
        </member>
        <member name="M:Zelda.Talents.Support.ManaHullTalent.GetDescription(System.Int32)">
            <summary>
            Gets the description of this Talent for
            the specified talent level.
            </summary>
            <param name="level">
            The level of the talent to get the description for.
            </param>
            <returns>
            The localized description of this Talent for the specified talent level.
            </returns>
        </member>
        <member name="M:Zelda.Talents.Support.ManaHullTalent.#ctor(Zelda.Talents.TalentTree,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Talents.Support.ManaHullTalent"/> class.
            </summary>
            <param name="tree">
            The TalentTree that owns the ManaHullTalent.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Talents.Support.ManaHullTalent.SetupNetwork">
            <summary>
            Setups the talent and its connections with the other Talents in the TalentTree.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Support.ManaHullTalent.Initialize">
            <summary>
            Initializes this ManaHullTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Support.ManaHullTalent.Uninitialize">
            <summary>
            Uninitializes this ManaHullTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Support.ManaHullTalent.OnAttacked(System.Object,Zelda.Entities.Components.AttackEventArgs)">
            <summary>
            Called when the player got attacked.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The AttackedEventArgs that contain the event data.</param>
        </member>
        <member name="M:Zelda.Talents.Support.ManaHullTalent.ResetAndApplyAura">
            <summary>
            Resets the ManaRegenerationAura.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Support.ManaHullTalent.RefreshAura">
            <summary>
            Refreshes the effect the ManaRegenerationAura has.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Support.ManaHullTalent.Refresh">
            <summary>
            Refreshes the strength of this ManaHullTalent.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Support.ManaHullTalent.aura">
            <summary>
            The FixedManaRegenerationAura this ManaHullTalent uses to regeneretate
            the mana of the player.
            </summary>
        </member>
        <member name="T:Zelda.Talents.Support.MeditationTalent">
            <summary>
            The <see cref="T:Zelda.Talents.Support.MeditationTalent"/> provides the Player
            with a passive effect that increases Mana Regeneration
            by 2/4/6/8/10 and 3/6/9/12/15%.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Support.MeditationTalent.FixedManaRegenIncreasePerLevel">
            <summary>
            The fixed mana regeneration increase provided by the Talent per talent level.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Support.MeditationTalent.PercentalManaRegenIncreasePerLevel">
            <summary>
            The percentage mana regeneration increase provided by the Talent per talent level.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Support.MeditationTalent.GetDescription(System.Int32)">
            <summary>
            Gets the description of this Talent for
            the specified talent level.
            </summary>
            <param name="level">
            The level of the talent to get the description for.
            </param>
            <returns>
            The localized description of this Talent for the specified talent level.
            </returns>
        </member>
        <member name="M:Zelda.Talents.Support.MeditationTalent.#ctor(Zelda.Talents.TalentTree,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Talents.Support.MeditationTalent"/> class.
            </summary>
            <param name="tree">
            The TalentTree that owns the MeditationTalent.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Talents.Support.MeditationTalent.SetupNetwork">
            <summary>
            Setups the talent and its connections with the other Talents in the TalentTree.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Support.MeditationTalent.Initialize">
            <summary>
            Initializes this MeditationTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Support.MeditationTalent.Uninitialize">
            <summary>
            Uninitializes this MeditationTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Support.MeditationTalent.Refresh">
            <summary>
            Refreshes the strength of this MeditationTalent.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Support.MeditationTalent.effectFixed">
            <summary>
            Identifies the passive StatusEffects this MedidationTalent provides.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Support.MeditationTalent.effectPercental">
            <summary>
            Identifies the passive StatusEffects this MedidationTalent provides.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Support.MeditationTalent.aura">
            <summary>
            Identifies the PermanentAura that holds the passive StatusEffects this MeditationTalent provides.
            </summary>
        </member>
        <member name="T:Zelda.Talents.Support.PoisonMasteryTalent">
            <summary>
            The <see cref="T:Zelda.Talents.Support.PotionMasteryTalent"/> provides the Player
            with a passive effect that increases poison damage done by 15%/25%/35%.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Support.PoisonMasteryTalent.GetEffectiviness(System.Int32)">
            <summary>
            Gets the potion effectivines increase provided
            by this PotionMasteryTalent.
            </summary>
            <param name="talentLevel">
            The level of the talent.
            </param>
            <returns>
            The effectivines increase in percent.
            </returns>
        </member>
        <member name="M:Zelda.Talents.Support.PoisonMasteryTalent.GetDescription(System.Int32)">
            <summary>
            Gets the description of this Talent for
            the specified talent level.
            </summary>
            <param name="level">
            The level of the talent to get the description for.
            </param>
            <returns>
            The localized description of this Talent for the specified talent level.
            </returns>
        </member>
        <member name="M:Zelda.Talents.Support.PoisonMasteryTalent.#ctor(Zelda.Talents.TalentTree,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Talents.Support.PoisonMasteryTalent"/> class.
            </summary>
            <param name="tree">
            The TalentTree that owns the PotionMasteryTalent.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Talents.Support.PoisonMasteryTalent.SetupNetwork">
            <summary>
            Setups the talent and its connections with the other Talents in the TalentTree.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Support.PoisonMasteryTalent.Initialize">
            <summary>
            Initializes this PoisonMasteryTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Support.PoisonMasteryTalent.Uninitialize">
            <summary>
            Uninitializes this PoisonMasteryTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Support.PoisonMasteryTalent.Refresh">
            <summary>
            Refreshes the strength of this PoisonMasteryTalent.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Support.PoisonMasteryTalent.effect">
            <summary>
            Identifies the passive effect this PoisonMasteryTalent provides.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Support.PoisonMasteryTalent.aura">
            <summary>
            Identifies the PermanentAura that holds the passive StatusEffects this PoisonMasteryTalent provides.
            </summary>
        </member>
        <member name="T:Zelda.Talents.Support.PotionMasteryTalent">
            <summary>
            The <see cref="T:Zelda.Talents.Support.PotionMasteryTalent"/> provides the Player
            with a passive effect that increases the effectiviness
            of healing and mana potions by 10%/20%/30%.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Support.PotionMasteryTalent.GetEffectiviness(System.Int32)">
            <summary>
            Gets the potion effectivines increase provided
            by this PotionMasteryTalent.
            </summary>
            <param name="talentLevel">
            The level of the talent.
            </param>
            <returns>
            The effectivines increase in percent.
            </returns>
        </member>
        <member name="M:Zelda.Talents.Support.PotionMasteryTalent.GetDescription(System.Int32)">
            <summary>
            Gets the description of this Talent for
            the specified talent level.
            </summary>
            <param name="level">
            The level of the talent to get the description for.
            </param>
            <returns>
            The localized description of this Talent for the specified talent level.
            </returns>
        </member>
        <member name="M:Zelda.Talents.Support.PotionMasteryTalent.#ctor(Zelda.Talents.TalentTree,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Talents.Support.PotionMasteryTalent"/> class.
            </summary>
            <param name="tree">
            The TalentTree that owns the PotionMasteryTalent.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Talents.Support.PotionMasteryTalent.SetupNetwork">
            <summary>
            Setups the talent and its connections with the other Talents in the TalentTree.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Support.PotionMasteryTalent.Initialize">
            <summary>
            Initializes this PotionMasteryTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Support.PotionMasteryTalent.Uninitialize">
            <summary>
            Uninitializes this PotionMasteryTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Support.PotionMasteryTalent.Refresh">
            <summary>
            Refreshes the strength of this PotionMasteryTalent.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Support.PotionMasteryTalent.effectLife">
            <summary>
            Identifies the passive StatusEffects this PotionMasteryTalent provides.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Support.PotionMasteryTalent.effectMana">
            <summary>
            Identifies the passive StatusEffects this PotionMasteryTalent provides.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Support.PotionMasteryTalent.aura">
            <summary>
            Identifies the PermanentAura that holds the passive StatusEffects this PotionMasteryTalent provides.
            </summary>
        </member>
        <member name="T:Zelda.Talents.Support.RackingPainsTalent">
            <summary>
            You ensure that your enemy has to suffer greatly;
            by increasing the damage dealt with 
            Damage Over Time StatusEffects by 10%/20%.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Support.RackingPainsTalent.GetEffectiviness(System.Int32)">
            <summary>
            Gets the potion effectivines increase provided
            by this RackingPainsTalent.
            </summary>
            <param name="talentLevel">
            The level of the talent.
            </param>
            <returns>
            The effectivines increase in percent.
            </returns>
        </member>
        <member name="M:Zelda.Talents.Support.RackingPainsTalent.GetDescription(System.Int32)">
            <summary>
            Gets the description of this Talent for
            the specified talent level.
            </summary>
            <param name="level">
            The level of the talent to get the description for.
            </param>
            <returns>
            The localized description of this Talent for the specified talent level.
            </returns>
        </member>
        <member name="M:Zelda.Talents.Support.RackingPainsTalent.#ctor(Zelda.Talents.TalentTree,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Talents.Support.RackingPainsTalent"/> class.
            </summary>
            <param name="tree">
            The TalentTree that owns the RackingPainsTalent.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Talents.Support.RackingPainsTalent.SetupNetwork">
            <summary>
            Setups the talent and its connections with the other Talents in the TalentTree.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Support.RackingPainsTalent.Initialize">
            <summary>
            Initializes this RackingPainsTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Support.RackingPainsTalent.Uninitialize">
            <summary>
            Uninitializes this RackingPainsTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Support.RackingPainsTalent.Refresh">
            <summary>
            Refreshes the strength of this RackingPainsTalent.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Support.RackingPainsTalent.effect">
            <summary>
            Identifies the passive effect this RackingPainsTalent provides.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Support.RackingPainsTalent.aura">
            <summary>
            Identifies the PermanentAura that holds the passive StatusEffects this RackingPainsTalent provides.
            </summary>
        </member>
        <member name="T:Zelda.Talents.Support.SmoothedEmblazonmentTalent">
            <summary>
            The <see cref="T:Zelda.Talents.Support.SmoothedEmblazonmentTalent"/> increases the amount
            of stats Rings and Necklaces give to the Player
            by 4%/8%/12%.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Support.SmoothedEmblazonmentTalent.GetEffectiviness(System.Int32)">
            <summary>
            Gets the stat increase provided
            by the SmoothedEmblazonmentTalent.
            </summary>
            <param name="talentLevel">
            The level of the talent.
            </param>
            <returns>
            The increase in percent.
            </returns>
        </member>
        <member name="M:Zelda.Talents.Support.SmoothedEmblazonmentTalent.GetDescription(System.Int32)">
            <summary>
            Gets the description of this Talent for
            the specified talent level.
            </summary>
            <param name="level">
            The level of the talent to get the description for.
            </param>
            <returns>
            The localized description of this Talent for the specified talent level.
            </returns>
        </member>
        <member name="M:Zelda.Talents.Support.SmoothedEmblazonmentTalent.#ctor(Zelda.Talents.TalentTree,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Talents.Support.SmoothedEmblazonmentTalent"/> class.
            </summary>
            <param name="tree">
            The TalentTree that owns the SmoothedEmblazonmentTalent.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Talents.Support.SmoothedEmblazonmentTalent.SetupNetwork">
            <summary>
            Setups the talent and its connections with the other Talents in the TalentTree.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Support.SmoothedEmblazonmentTalent.Initialize">
            <summary>
            Initializes this SmoothedEmblazonmentTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Support.SmoothedEmblazonmentTalent.Uninitialize">
            <summary>
            Uninitializes this SmoothedEmblazonmentTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Support.SmoothedEmblazonmentTalent.Refresh">
            <summary>
            Refreshes this SmoothedEmblazonmentTalent.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Support.SmoothedEmblazonmentTalent.effectRings">
            <summary>
            Identifies the passive StatusEffects this SmoothedEmblazonmentTalent provides.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Support.SmoothedEmblazonmentTalent.effectNecklaces">
            <summary>
            Identifies the passive StatusEffects this SmoothedEmblazonmentTalent provides.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Support.SmoothedEmblazonmentTalent.aura">
            <summary>
            Identifies the PermanentAura that holds the passive StatusEffects this SmoothedEmblazonmentTalent provides.
            </summary>
        </member>
        <member name="T:Zelda.Talents.Support.SwiftFightStyleTalent">
            <summary>
            Reduces the cooldown of Bash and Light Arrow by 0.25/0.5 seconds
            and the cooldown of Quick Strike and Firewhirl by 0.1/0.2 seconds.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Support.SwiftFightStyleTalent.GetBashAndLightArrowCooldownReduction(System.Int32)">
            <summary>
            Gets the reduction in cooldown this SwiftFightStyleTalent provides
            to Bash and Light Arrow for the given level in seconds.
            </summary>
            <param name="level">
            The level of the talent.
            </param>
            <returns>
            The cooldown reduction in seconds.
            </returns>
        </member>
        <member name="M:Zelda.Talents.Support.SwiftFightStyleTalent.GetQuickStrikeAndFirewhirlCooldownReduction(System.Int32)">
            <summary>
            Gets the reduction in cooldown this SwiftFightStyleTalent provides
            to Quick Strike for the given level in seconds.
            </summary>
            <param name="level">
            The level of the talent.
            </param>
            <returns>
            The cooldown reduction in seconds.
            </returns>    
        </member>
        <member name="P:Zelda.Talents.Support.SwiftFightStyleTalent.BashCooldownReduction">
            <summary>
            Gets the cooldown reduction this SwiftFightStyleTalent provides for the BashSkill.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Support.SwiftFightStyleTalent.LightArrowCooldownReduction">
            <summary>
            Gets the cooldown reduction this SwiftFightStyleTalent provides for the LightArrowSkill.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Support.SwiftFightStyleTalent.QuickStrikeCooldownReduction">
            <summary>
            Gets the cooldown reduction this SwiftFightStyleTalent provides for the QuickStrikeSkill.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Support.SwiftFightStyleTalent.FirewhirlCooldownReduction">
            <summary>
            Gets the cooldown reduction this SwiftFightStyleTalent provides for the FirewhirlSkill.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Support.SwiftFightStyleTalent.GetDescription(System.Int32)">
            <summary>
            Gets the description of this Talent for
            the specified talent level.
            </summary>
            <param name="level">
            The level of the talent to get the description for.
            </param>
            <returns>
            The localized description of this Talent for the specified talent level.
            </returns>
        </member>
        <member name="M:Zelda.Talents.Support.SwiftFightStyleTalent.#ctor(Zelda.Talents.TalentTree,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Talents.Support.SwiftFightStyleTalent"/> class.
            </summary>
            <param name="tree">
            The TalentTree that owns the ImprovedBashTalent.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Talents.Support.SwiftFightStyleTalent.SetupNetwork">
            <summary>
            Setups the connections of this SwiftFightStyleTalent with the other Talents in the TalentTree.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Support.SwiftFightStyleTalent.Initialize">
            <summary>
            Initializes this SwiftFightStyleTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Support.SwiftFightStyleTalent.Uninitialize">
            <summary>
            Uninitializes this SwiftFightStyleTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Support.SwiftFightStyleTalent.Refresh">
            <summary>
            Refreshes the strength of this SwiftFightStyleTalent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Support.SwiftFightStyleTalent.RefreshCooldown(Zelda.Talents.SkillTalent)">
            <summary>
            Refreshes the cooldown of the given SkillTalent.
            </summary>
            <param name="talent">
            The talent to refresh.
            </param>
        </member>
        <member name="F:Zelda.Talents.Support.SwiftFightStyleTalent.bashTalent">
            <summary>
            Identifies the BashTalent which gets improved by this SwiftFightStyleTalent.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Support.SwiftFightStyleTalent.lightArrowTalent">
            <summary>
            Identifies the LightArrowTalent which gets improved by this SwiftFightStyleTalent.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Support.SwiftFightStyleTalent.quickStrikeTalent">
            <summary>
            Identifies the QuickStrikeTalent which gets improved by this SwiftFightStyleTalent.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Support.SwiftFightStyleTalent.firewhirlTalent">
            <summary>
            Identifies the FirewhirlTalent which gets improved by this SwiftFightStyleTalent.
            </summary>
        </member>
        <member name="T:Zelda.Talents.Talent">
            <summary>
            A talent is an improvement to the player's character.
            The player can aquire them by investing talent points,
            which he gets each level-up.
            <para>
            Every level 1 extra talent point,
            but on every 5th level 2 extra points
            and on every 10th level 3 extra points.s
            </para>
            <para>
            Talents come in two forms;
            passive Talents which are always active and
            active Talents which the Player has to active.
            These active Talents are also called Skills.
            </para>
            </summary>
        </member>
        <member name="E:Zelda.Talents.Talent.LevelChanged">
            <summary>
            Fired when the <see cref="P:Zelda.Talents.Talent.Level"/> of this Talent has changed.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Talent.Following">
            <summary>
            Gets the talent that follow this talent.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Talent.Level">
            <summary>
            Gets or sets the number of Talent Points the Player
            has invested into the Talent.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Talent.MaximumLevel">
            <summary>
            Gets the maximum possible number of Talent Points the Player
            can invest into the Talent.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Talent.LocalizedName">
            <summary>
            Gets the localized name of this <see cref="T:Zelda.Talents.Talent"/>.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Talent.Description">
            <summary>
            Gets the (localized) description of this <see cref="T:Zelda.Talents.Talent"/>.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Talent.Symbol">
            <summary>
            Gets the symbol that is displayed for the Talent.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Talent.Tree">
            <summary>
            Gets the TalentTree that 'owns' the <see cref="T:Zelda.Talents.Talent"/>.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Talent.Owner">
            <summary>
            Gets the owner of this <see cref="T:Zelda.Talents.Talent"/>.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Talent.Category">
            <summary>
            Gets the main category/tree under which this Talent is grouped.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Talent.Type">
            <summary>
            Gets the type of this Talent.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Talent.Statable">
            <summary>
            Gets the <see cref="T:Zelda.Status.ExtendedStatable"/> component
            of the PlayerEntity that owns this Talent.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Talent.AuraList">
            <summary>
            Gets the <see cref="T:Zelda.Status.AuraList"/>
            of the PlayerEntity that owns this Talent.
            </summary>
        </member>
        <member name="P:Zelda.Talents.Talent.ServiceProvider">
            <summary>
            Gets the <see cref="T:Zelda.IZeldaServiceProvider"/> object
            which provides type-safe access to game services.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Talent.#ctor(System.String,Atom.Xna.Sprite,System.Int32,Zelda.Talents.TalentTree,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Talents.Talent"/> class.
            </summary>
            <param name="localizedName">
            The localized name of the talent.
            </param>
            <param name="symbol">
            The symbol of the Talent.
            </param>
            <param name="maximumLevel">
            The maximum number of TalentPoints the Player can invest into the talent.
            </param>
            <param name="tree">
            The TalentTree that 'owns' the new Talent.
            </param>
            <param name="serviceProvider">
            Provides type-safe access to game services.
            </param>
        </member>
        <member name="M:Zelda.Talents.Talent.SetupNetwork">
            <summary>
            Setups the Talent's TalentRequirements, following Talents and any additional components.
            </summary>
            <remarks>
            SetTreeStructure has to be used within the method
            to actually set the data.
            </remarks>
        </member>
        <member name="M:Zelda.Talents.Talent.Initialize">
            <summary>
            Initializes this Talent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Talent.Uninitialize">
            <summary>
            Uninitializes this Talent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Talent.InitializeCore">
            <summary>
            Calls <see cref="M:Zelda.Talents.Talent.Initialize"/> if this Talent
            has not yet been initialized.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Talent.UninitializeCore">
            <summary>
            Calls <see cref="M:Zelda.Talents.Talent.Uninitialize"/> if this Talent
            has not yet been uninitialized.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Talent.SetTreeStructure(Zelda.Talents.TalentRequirement[],Zelda.Talents.Talent[])">
            <summary>
            Sets the fields that makeup the tree structure of this Talent.
            </summary>
            <param name="requirements">
            Descripes the talents this Talent requires.
            </param>
            <param name="followingTalents">
            The talents that follow this Talent (and also require this Talent).
            </param>
        </member>
        <member name="M:Zelda.Talents.Talent.Reset">
            <summary>
            Resets this Talent.
            </summary>
        </member>
        <member name="M:Zelda.Talents.Talent.Refresh">
            <summary>
            Refreshes the strength of this Talent
            based on the current level.
            </summary>
            <remarks>
            Iniitialize is ensured to be called before Refresh.
            </remarks>
        </member>
        <member name="M:Zelda.Talents.Talent.SetLevel(System.Int32)">
            <summary>
            Sets the level of this Talent.
            </summary>
            <param name="newLevel">
            The new level.
            </param>
            <exception cref="T:System.ArgumentException">
            If <paramref name="newLevel"/> is invalid.
            </exception>
        </member>
        <member name="M:Zelda.Talents.Talent.GainLevel">
            <summary>
            Increases the level of this Talent by one.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            If the Talent already has reached it maximum possible level.
            </exception>
        </member>
        <member name="M:Zelda.Talents.Talent.FulfillsRequirements">
            <summary>
            Gets a value indicating whether the requirments
            needed to invest into this Talent have bene fulfilled.
            </summary>
            <returns>
            Returns <see langword="true"/> if the player fulfills
            the requirements; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Zelda.Talents.Talent.FulfillsRequirementsWith(Zelda.Talents.Talent,System.Int32)">
            <summary>
            Gets a value indicating whether the requirments
            needed to invest into this Talent have bene fulfilled; if the given talent is changed to the given level.
            </summary>
            <param name="changedTalent">
            The talent that is beeing changed.
            </param>
            <param name="changedTalentLevel">
            The level the talent is beeing changed to.
            </param>
            <returns>
            Returns <see langword="true"/> if the player fulfills
            the requirements; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Zelda.Talents.Talent.GetFollowing(System.Int32)">
            <summary>
            Gets the following talent at the given zero-based index.
            </summary>
            <param name="index">The index of the talent to get.</param>
            <returns>
            The talent at the given index, or null if at that inde position is no Talent.
            </returns>
        </member>
        <member name="M:Zelda.Talents.Talent.GetRequirement(System.Int32)">
            <summary>
            Gets the TalentRequirement at the given zero-based index.
            </summary>
            <param name="index">The index of the talent to get.</param>
            <returns>
            The TalentRequirement at the given index, or null if at that index position is no TalentRequirement.
            </returns>
        </member>
        <member name="M:Zelda.Talents.Talent.GetRequirement(Zelda.Talents.Talent)">
            <summary>
            Gets the TalentRequirement of the Talent that requires the given <paramref name="requiredTalent"/>.
            </summary>
            <param name="requiredTalent">The talent that is required.</param>
            <returns>
            The TalentRequirement that corresponds to the given requiredTalent, or null if there is no such requirement.
            </returns>
        </member>
        <member name="M:Zelda.Talents.Talent.GetDescriptionSafe(System.Int32)">
            <summary>
            Gets the description of this Talent for
            the specified talent level.
            </summary>
            <param name="level">
            The level of the talent to get the description for.
            Is safely clamped into a valid value.
            </param>
            <returns>
            The localized description of this Talent for the specified talent level.
            </returns>
        </member>
        <member name="M:Zelda.Talents.Talent.GetDescription(System.Int32)">
            <summary>
            Gets the description of this Talent for
            the specified talent level.
            </summary>
            <param name="level">
            The level of the talent to get the description for.
            </param>
            <returns>
            The localized description of this Talent for the specified talent level.
            </returns>
        </member>
        <member name="F:Zelda.Talents.Talent.level">
            <summary> 
            The number of points the player invested into this Talent. 
            </summary>
        </member>
        <member name="F:Zelda.Talents.Talent.maximumLevel">
            <summary>
            The maximum number of points the player can invest into this Talent.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Talent.localizedName">
            <summary>
            The localized name of this <see cref="T:Zelda.Talents.Talent"/>.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Talent.symbol">
            <summary>
            The symbol that is displayed for this Talent.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Talent.requirements">
            <summary>
            The requirements the Player must fullfil to be able to invest into this <see cref="T:Zelda.Talents.Talent"/>.
            There can be up to three TalentRequirements per Talent.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Talent.followingTalents">
            <summary>
            The requirements the Player must fullfil to be able to invest into this <see cref="T:Zelda.Talents.Talent"/>.
            There can be up to three TalentRequirements per Talent.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Talent.isInitialized">
            <summary>
            States whether this Talent is currently initialized.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Talent.category">
            <summary>
            The main category/tree under which this Talent is grouped.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Talent.tree">
            <summary>
            The TalentTree that 'owns' this <see cref="T:Zelda.Talents.Talent"/>.
            </summary>
        </member>
        <member name="F:Zelda.Talents.Talent.serviceProvider">
            <summary>
            Provides fast access to game-related services.
            </summary>
        </member>
        <member name="T:Zelda.Talents.TalentRequirement">
            <summary>
            Defines a single requirement for a talent.
            </summary>
        </member>
        <member name="F:Zelda.Talents.TalentRequirement.RequiredTalent">
            <summary>
            The Talent that is required.
            </summary>
        </member>
        <member name="F:Zelda.Talents.TalentRequirement.RequiredTalentLevel">
            <summary>
            The minimum level the player must have of the required Talent.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentRequirement.IsFulfilled">
            <summary>
            Gets a value indicating whether this TalentRequirement is fulfilled.
            </summary>
        </member>
        <member name="M:Zelda.Talents.TalentRequirement.#ctor(Zelda.Talents.Talent,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Talents.TalentRequirement"/> class.
            </summary>
            <param name="requiredTalent">
            The Talent that is required.
            </param>
            <param name="requiredTalentLevel">
            The minimum level the player must have of the required Talent.
            </param>
        </member>
        <member name="M:Zelda.Talents.TalentRequirement.IsFulfilledAt(System.Int32)">
            <summary>
            Gets a value indicating whether the talent requirement
            would be fulfilled at the specified talentLevel.
            </summary>
            <param name="talentLevel">
            The level of the talent.
            </param>
            <returns>
            true if it is fulfilled;
            -or- otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Talents.TalentResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TD_AngelsEmbracement">
             <summary>
               Looks up a localized string similar to Gives a {0}% chance when attacked to increase
            damage done by {2}%, armor by {3}% 
            and magic-find by {4}% for {1} seconds..
             </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TD_AppliedImpactResearch">
             <summary>
               Looks up a localized string similar to Increases the maximum number of new Firewhirls
            a Firewhirl might split upon impact by {0}..
             </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TD_ArrowRush">
             <summary>
               Looks up a localized string similar to You gain a {0}% chance to unleash a Multi Shot
            when you shoot a normal arrow..
             </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TD_ArrowShower">
             <summary>
               Looks up a localized string similar to Unleashes a Multi Shot every {0} seconds
            for {1} seconds..
             </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TD_Bash">
             <summary>
               Looks up a localized string similar to Instantly bashes the enemy with full power.
            Does (MeleeDamage + {0}) x {1}% damage..
             </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TD_BattleAwareness">
             <summary>
               Looks up a localized string similar to By improving your battle awareness you
            increase your chance to parry melee attacks.
            (Parry + {0}) * {1}%.
             </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TD_BattleShout">
             <summary>
               Looks up a localized string similar to You roar to increase your valor.
            Increases (Strength + {0}) * {1}% for 60 seconds..
             </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TD_Bladestorm">
             <summary>
               Looks up a localized string similar to You go nuts after using Whirlwind, turning for
            another {0} times, dealing (MeleeDamage x {1}%) 
            non-parry nor dodgeable damage. {2} sec duration..
             </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TD_CorrosiveFire">
             <summary>
               Looks up a localized string similar to Firewhirl also burns the target for {0}% to {1}%
            fire damage over {2} seconds..
             </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TD_CounterAttack">
             <summary>
               Looks up a localized string similar to You counter your enemy with an un-parryable
            attack after parrying an attack yourself.
            Deals (MeleeDamage x {0}%). {1} seconds cooldown..
             </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TD_CriticalBalance">
             <summary>
               Looks up a localized string similar to You learn to keep your combat balance
            even in the most critical situations. 
            Increases damage done with critical attacks by {0}%..
             </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TD_DoubleAttack">
             <summary>
               Looks up a localized string similar to {0}% chance to attack twice instead of once
            on a normal melee attack. Can proc off of itself..
             </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TD_Enrage">
             <summary>
               Looks up a localized string similar to {0}% chance to enrage after getting attacked.
            Increases melee damage dealt
            by {1}% for {2} seconds..
             </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TD_FireBomb">
             <summary>
               Looks up a localized string similar to Plants a powerful bomb that deals
            ({0}% Ranged + {1}% Magic)
            fire area-damage..
             </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TD_FireBombChain">
             <summary>
               Looks up a localized string similar to Increases the number of bombs before the cooldown
            is triggered by {0}. Increases cooldown by {1} seconds.
            Reduces mana cost..
             </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TD_Firevortex">
             <summary>
               Looks up a localized string similar to Casts a vortex of fire that deals 100% fire damage and
            gains {0}% in size and strength every 0.5 seconds.
            Sucks nearby enemies into it. {1} seconds cast time.
            {2} seconds cooldown..
             </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TD_Firewall">
             <summary>
               Looks up a localized string similar to Casts a wall of fire next to you that deals {0}% to {1}% fire damage. 
            {2} secs cooldown after casting {3} times. {4} sec cast time. Pushback..
             </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TD_Firewhirl">
             <summary>
               Looks up a localized string similar to Casts a small whirl of fire that deals
            {0}% - {1}% fire damage.
            {2} secs cast time. {3} secs cooldown..
             </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TD_FlamesOfPhlegethon">
             <summary>
               Looks up a localized string similar to Summons {0} wave(s) of fire directly from the underworld.
            Targets that are hit take {1}% to {2}% fire damage.
            {3} secs cooldown. {4} secs cast time..
             </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TD_Frenzy">
             <summary>
               Looks up a localized string similar to You go frenzy after dealing a melee Crit.
            Increases melee attack speed by {0}%
            for {1} seconds..
             </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TD_Frustration">
             <summary>
               Looks up a localized string similar to Increases chance to get a Double Attack by {0}% for
            {1} seconds. But frustrated as you are there exists
            a {2}% chance to hit yourself for {3}% MeleeDamage..
             </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TD_Furor">
             <summary>
               Looks up a localized string similar to You show the true fury inside you,
            increasing melee attack speed
            by {0}% for {1} seconds..
             </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TD_GoForTheHead">
             <summary>
               Looks up a localized string similar to Increases chance to Crit by {0}
            each ranged hit.
            The bonus resets on the first crit..
             </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TD_HandEyeCoordination">
            <summary>
              Looks up a localized string similar to Increases Dexterity by {0}% of Agility..
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TD_Headshot">
             <summary>
               Looks up a localized string similar to You aim for the head after landing a critical hit,
            firing a swift partially armor-ignoring arrow that 
            has an improved chance to crit and pierce of {0}%..
             </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TD_ImpactTheory">
             <summary>
               Looks up a localized string similar to By studying the properties of matter you
            gain a {0}% chance for Firewhirl to split
            into {1} to {2} new Firewhirls upon impact..
             </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TD_ImprovedBash">
            <summary>
              Looks up a localized string similar to Increases chance to crit with Bash by {0}..
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TD_ImprovedMultiShot">
             <summary>
               Looks up a localized string similar to Reduces the cooldown of the Multi Shot skill
            by {0} seconds..
             </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TD_LightArrow">
             <summary>
               Looks up a localized string similar to Instantly releases a Light arrow.
            Does (RangedDamage + MagicDamage + {0}) x {1}%
            Light damage..
             </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TD_LuckyBastard">
            <summary>
              Looks up a localized string similar to Increases your Magic Find value by {0}%..
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TD_MagicalBalance">
             <summary>
               Looks up a localized string similar to You try to find the right balance
            between the different elements.
            Increases Critical Strike Bonus of all spells by {0}%..
             </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TD_ManaHull">
             <summary>
               Looks up a localized string similar to You gain a {0}% chance when attacked to
            surround yourself with a perfect hull of mana;
            regenerating {1}% of base mana over {2} seconds..
             </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TD_Meditation">
             <summary>
               Looks up a localized string similar to You improve your meditation techniques.
            Increases Mana Regeneration
            by {0} + {1}%..
             </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TD_MultiShot">
             <summary>
               Looks up a localized string similar to Instantly releases {0} arrows.
            Each arrow does {1}% RangedDamage..
             </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TD_PiercingArrows">
             <summary>
               Looks up a localized string similar to Increases the chance of arrows to
            pierce through the enemy by {0}%..
             </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TD_PiercingFire">
             <summary>
               Looks up a localized string similar to Increases the chance to crit with Firewall and
            Flames of Phlegethon by {0}%..
             </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TD_PoisonedShot">
             <summary>
               Looks up a localized string similar to Fires an arrow that deals (RangedDamage x {0}) instantly,
            ((Ranged + Magic)Damage x {1}) nature damage
            over {2} seconds; slowing the target by {3}%.
            {4} seconds cooldown..
             </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TD_PoisonMastery">
             <summary>
               Looks up a localized string similar to Studying the properties of poisoned herbs
            allows you to increase your damage done
            with poisons by {0}%..
             </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TD_PotionMastery">
             <summary>
               Looks up a localized string similar to Improves the effectiveness of healing and
            mana potions by {0}%..
             </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TD_PushingAttack">
             <summary>
               Looks up a localized string similar to Pushes the enemy, dealing MeleeDamage,
            with an increased pushing power of &apos;{0}&apos; to &apos;{1}&apos;..
             </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TD_Pyromania">
             <summary>
               Looks up a localized string similar to Reduces the cooldown of all offensive Fire spells
            by {0}% for {1} seconds. {2} seconds cooldown..
             </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TD_QuickHands">
            <summary>
              Looks up a localized string similar to Increases Attack Speed and Spell Haste by {0}%..
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TD_QuickStrike">
             <summary>
               Looks up a localized string similar to                  Requires a Dagger to be used!
            Swiftly strikes at the enemy dealing MeleeDamage. 
            Can proc Double Attack. Cooldown of {0} seconds..
             </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TD_RackingPains">
             <summary>
               Looks up a localized string similar to You ensure that your enemy has to suffer greatly;
            by increasing damage dealt with
            Damage Over Time effects by {0}%..
             </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TD_RapidFire">
             <summary>
               Looks up a localized string similar to By using your inner rage you increase
            your ranged attack speed by {0}% and your
            chance to pierce by {1}% for {2} seconds..
             </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TD_RazorWinds">
             <summary>
               Looks up a localized string similar to You learn to control the winds around a Firevortex.
            Increases the chance of the vortex
            to pierce through targets by {0}%..
             </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TD_RecoverWounds">
             <summary>
               Looks up a localized string similar to You recover from battle,
            increasing Life Regeneration by {0}%
            for {1} seconds..
             </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TD_RevitalizingStrikes">
             <summary>
               Looks up a localized string similar to You gain a {0}% chance on physical melee or
            ranged strike to heal self for {1}% of damage done..
             </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TD_RogueWeaponMastery">
             <summary>
               Looks up a localized string similar to You train your skills in the weapons of a rogue,
            increasing damage done with bows by {0}%
            and damage done with daggers by {1}%..
             </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TD_ShieldBlock">
             <summary>
               Looks up a localized string similar to Increases Chance to Block by {0} for {1} seconds.
            {2} seconds cooldown..
             </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TD_ShieldBreaker">
             <summary>
               Looks up a localized string similar to You build up strength in your sword arm after blocking an attack.
            Unleashes MeleeDmg + BlockValue * (100 + {0} * Block Points)% damage. 
            1 Block Point is awarded for each block; lasting {1} seconds. 
            {2} Block Points maximum. Ignores enemy armor..
             </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TD_ShieldMastery">
            <summary>
              Looks up a localized string similar to Increases Chance to Block by {0} and Block Value by {1}%..
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TD_ShieldWall">
             <summary>
               Looks up a localized string similar to Reduces physical damage taken by {0}%.
            As a penalty also reduces damage done
            by {1}% and movement speed by {2}%..
             </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TD_SmoothedEmblazonment">
             <summary>
               Looks up a localized string similar to You decide to always keep your jewelry shiny!
            Increases the amount of stats rings and
            necklaces give by {0}%..
             </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TD_Sprint">
             <summary>
               Looks up a localized string similar to Increases movement speed by {0}%
            for {1} seconds..
             </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TD_StatRoot">
            <summary>
              Looks up a localized string similar to Increases {0} by {1} + {2}%..
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TD_SwiftFightStyle">
             <summary>
               Looks up a localized string similar to You gain swiftness by adjusting your fight style.
            Reduces the cooldown of Bash and Light Arrow by {0} seconds
            and the cooldown of Quick Strike and Firewhirl by {1} seconds..
             </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TD_Vitality">
             <summary>
               Looks up a localized string similar to Hard training allows you to
            increase your Vitality by {0}%..
             </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TD_Whirlwind">
             <summary>
               Looks up a localized string similar to You spin with your sword, dealing
            (MeleeDamage x {0}%) non-parry nor dodgeable
            damage. {1} sec cooldown. {2} sec duration..
             </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TN_AgilityTraining">
            <summary>
              Looks up a localized string similar to Agility Training.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TN_AngelEmbracement">
            <summary>
              Looks up a localized string similar to Angel&apos;s Embracement.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TN_AppliedImpactResearch">
            <summary>
              Looks up a localized string similar to Applied Impact Research.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TN_ArrowRush">
            <summary>
              Looks up a localized string similar to Arrow Rush.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TN_ArrowShower">
            <summary>
              Looks up a localized string similar to Arrow Shower.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TN_Bash">
            <summary>
              Looks up a localized string similar to Bash.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TN_BattleAwareness">
            <summary>
              Looks up a localized string similar to Battle Awareness.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TN_BattleShout">
            <summary>
              Looks up a localized string similar to Battle Shout.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TN_Bladestorm">
            <summary>
              Looks up a localized string similar to Bladestorm.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TN_CorrosiveFire">
            <summary>
              Looks up a localized string similar to Corrosive Fire.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TN_CotF">
            <summary>
              Looks up a localized string similar to Concentrate on the Facts.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TN_CounterAttack">
            <summary>
              Looks up a localized string similar to Counter Attack.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TN_CriticalBalance">
            <summary>
              Looks up a localized string similar to Critical Balance.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TN_DodgeTraining">
            <summary>
              Looks up a localized string similar to Dodge Training.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TN_DoubleAttack">
            <summary>
              Looks up a localized string similar to Double Attack.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TN_Enrage">
            <summary>
              Looks up a localized string similar to Enrage.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TN_FireBomb">
            <summary>
              Looks up a localized string similar to Fire Bomb.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TN_FireBombChain">
            <summary>
              Looks up a localized string similar to Bomb Chain.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TN_Firevortex">
            <summary>
              Looks up a localized string similar to Firevortex.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TN_Firewall">
            <summary>
              Looks up a localized string similar to Firewall.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TN_Firewhirl">
            <summary>
              Looks up a localized string similar to Firewhirl.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TN_FlamesOfPhlegethon">
            <summary>
              Looks up a localized string similar to Flames of Phlegethon.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TN_Frenzy">
            <summary>
              Looks up a localized string similar to Frenzy.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TN_Frustration">
            <summary>
              Looks up a localized string similar to Frustration.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TN_Furor">
            <summary>
              Looks up a localized string similar to Furor.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TN_GoForTheHead">
            <summary>
              Looks up a localized string similar to Go for the Head.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TN_HandEyeCoordination">
            <summary>
              Looks up a localized string similar to Hand - Eye Coordination.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TN_Headshot">
            <summary>
              Looks up a localized string similar to Headshot.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TN_ImpactTheory">
            <summary>
              Looks up a localized string similar to Impact Theory.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TN_ImprovedBash">
            <summary>
              Looks up a localized string similar to Improved Bash.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TN_ImprovedMultiShot">
            <summary>
              Looks up a localized string similar to Improved Multi Shot.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TN_LightArrow">
            <summary>
              Looks up a localized string similar to Light Arrow.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TN_LuckyBastard">
            <summary>
              Looks up a localized string similar to Lucky Bastard.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TN_MagicalBalance">
            <summary>
              Looks up a localized string similar to Magical Balance.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TN_MagicTraining">
            <summary>
              Looks up a localized string similar to Magic Training.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TN_ManaHull">
            <summary>
              Looks up a localized string similar to Mana Hull.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TN_Meditation">
            <summary>
              Looks up a localized string similar to Meditation.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TN_MeleeTraining">
            <summary>
              Looks up a localized string similar to Melee Training.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TN_MultiShot">
            <summary>
              Looks up a localized string similar to Multi Shot.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TN_PiercingArrows">
            <summary>
              Looks up a localized string similar to Piercing Arrows.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TN_PiercingFire">
            <summary>
              Looks up a localized string similar to Piercing Fire.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TN_PoisonedShot">
            <summary>
              Looks up a localized string similar to Poisoned Shot.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TN_PoisonMastery">
            <summary>
              Looks up a localized string similar to Poison Mastery.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TN_PotionMastery">
            <summary>
              Looks up a localized string similar to Potion Mastery.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TN_PushingAttack">
            <summary>
              Looks up a localized string similar to Push.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TN_Pyromania">
            <summary>
              Looks up a localized string similar to Pyromania.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TN_QuickHands">
            <summary>
              Looks up a localized string similar to Quick Hands.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TN_QuickStrike">
            <summary>
              Looks up a localized string similar to Quick Strike.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TN_RackingPains">
            <summary>
              Looks up a localized string similar to Racking Pains.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TN_RangedTraining">
            <summary>
              Looks up a localized string similar to Ranged Training.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TN_RapidFire">
            <summary>
              Looks up a localized string similar to Rapid Fire.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TN_RazorWinds">
            <summary>
              Looks up a localized string similar to Razor Winds.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TN_RecoverWounds">
            <summary>
              Looks up a localized string similar to Recover Wounds.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TN_RevitalizingStrikes">
            <summary>
              Looks up a localized string similar to Revitalizing Strikes.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TN_RogueWeaponMastery">
            <summary>
              Looks up a localized string similar to Rogue Weapon Mastery.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TN_ShieldBlock">
            <summary>
              Looks up a localized string similar to Shield Block.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TN_ShieldBreaker">
            <summary>
              Looks up a localized string similar to Shield Breaker.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TN_ShieldMastery">
            <summary>
              Looks up a localized string similar to Shield Mastery.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TN_ShieldWall">
            <summary>
              Looks up a localized string similar to Shield Wall.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TN_SmoothedEmblazonment">
            <summary>
              Looks up a localized string similar to Smoothed Emblazonment.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TN_Sprint">
            <summary>
              Looks up a localized string similar to Sprint.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TN_SwiftFightStyle">
            <summary>
              Looks up a localized string similar to Swift Fight Style.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TN_Toughness">
            <summary>
              Looks up a localized string similar to Toughness.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TN_Vitality">
            <summary>
              Looks up a localized string similar to Vitality.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentResources.TN_Whirlwind">
            <summary>
              Looks up a localized string similar to Whirlwind.
            </summary>
        </member>
        <member name="T:Zelda.Talents.TalentTree">
            <summary>
            The TalentTree stores the talents of the player
            in a tree like structure.
            </summary>
            <remarks>
            <para>
            There are four roots that each spawn individual 'trees':
            </para>
            <para>
            Melee    - Contains melee talents.
            Ranged   - Contains ranged/rogue talents.
            Magic    - Contains magic talents.
            Support  - Contains talents that support the other three main trees.
            </para>
            This class can't be inherited.
            </remarks>
        </member>
        <member name="E:Zelda.Talents.TalentTree.TalentsChanged">
            <summary>
            Raised when anything about the Talents in this TalentTree has changed.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentTree.FreeTalentPoints">
            <summary>
            Gets the amount of free talent points the owner of the TalentTree has.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentTree.Owner">
            <summary>
            Gets the <see cref="T:Zelda.Entities.PlayerEntity"/> that owns the TalentTree.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentTree.MeleeRoot">
            <summary>
            Gets the root of the sub-tree that contains melee oriented talents.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentTree.RangedRoot">
            <summary>
            Gets the root of the sub-tree that contains ranged oriented talents.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentTree.MagicRoot">
            <summary>
            Gets the root of the sub-tree that contains magic oriented talents.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentTree.SupportRoot">
            <summary>
            Gets the root of the sub-tree that contains talents that support the other tree trees.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentTree.Class">
            <summary>
            Gets the CharacterClass the current configuration of this TalentTree is associated with.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentTree.Statistics">
            <summary>
            Gets the <see cref="T:Zelda.Talents.TalentTreeStatistics"/> of this TalentTree.
            </summary>
        </member>
        <member name="M:Zelda.Talents.TalentTree.#ctor(Zelda.Entities.PlayerEntity,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Talents.TalentTree"/> class.
            </summary>
            <param name="player">
            The PlayerEntity that owns the new TalentTree.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Talents.TalentTree.Setup(Zelda.IZeldaServiceProvider)">
            <summary>
            Setups this TalentTree.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Talents.TalentTree.AddTalent(Zelda.Talents.Talent)">
            <summary>
            Adds the given Talent to the dictionary of all known talents.
            </summary>
            <param name="talent">
            The Talent to add.
            </param>
        </member>
        <member name="M:Zelda.Talents.TalentTree.GetTalent(System.Type)">
            <summary>
            Tries to get the Talent of the given Type.
            </summary>
            <param name="type">
            The type of the talent to get.
            </param>
            <returns>
            The Talent of the requested Type.
            </returns>
        </member>
        <member name="M:Zelda.Talents.TalentTree.GetTalent``1">
            <summary>
            Tries to get the Talent of the given Type.
            </summary>
            <typeparam name="T">
            The type of the talent to get.
            </typeparam>
            <returns>
            The Talent of the requested Type.
            </returns>
        </member>
        <member name="M:Zelda.Talents.TalentTree.InvestInto(System.Type)">
            <summary>
            Tries to invest one talent point into the Talent of the given Type.
            </summary>
            <param name="type">
            The type of the talent to invest in.
            </param>
            <returns>Whether any point was invested into the talent.</returns>
        </member>
        <member name="M:Zelda.Talents.TalentTree.GainTalentPointsOnLevelUp">
            <summary>
            Increases the amount of free talent points based on the new level of the Player.
            This is called on a levelup.
            </summary>
        </member>
        <member name="M:Zelda.Talents.TalentTree.Reset">
            <summary>
            Resets the talents that the player has learned so far.
            </summary>
        </member>
        <member name="M:Zelda.Talents.TalentTree.OnTalentChanged">
            <summary>
            Raises the TalentsChanged event.
            </summary>
        </member>
        <member name="M:Zelda.Talents.TalentTree.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes/Writes the data of this <see cref="T:Zelda.Talents.TalentTree"/> 
            to the given System.IO.BinaryWriter.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Talents.TalentTree.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes/Reads the data of this <see cref="T:Zelda.Talents.TalentTree"/> 
            to the given System.IO.BinaryReader.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Talents.TalentTree.AnalyzeInvestmentCorrectness">
            <summary>
            Analyzes the correctness of the talent tree investments of the player.
            This is required to be run when loading the TalentTree.
            </summary>
        </member>
        <member name="F:Zelda.Talents.TalentTree.freeTalentPoints">
            <summary>
            The number of free talent points.
            </summary>
        </member>
        <member name="F:Zelda.Talents.TalentTree.player">
            <summary>
            The Player that owns the <see cref="T:Zelda.Talents.TalentTree"/>.
            </summary>
        </member>
        <member name="F:Zelda.Talents.TalentTree.meleeRoot">
            <summary>
            The root of the sub-tree that contains melee oriented talents.
            </summary>
        </member>
        <member name="F:Zelda.Talents.TalentTree.rangedRoot">
            <summary>
            The root of the sub-tree that contains ranged oriented talents.
            </summary>
        </member>
        <member name="F:Zelda.Talents.TalentTree.magicRoot">
            <summary>
            The root of the sub-tree that contains magic oriented talents.
            </summary>
        </member>
        <member name="F:Zelda.Talents.TalentTree.supportRoot">
            <summary>
            The root of the sub-tree that contains talents that support the other tree trees.
            </summary>
        </member>
        <member name="F:Zelda.Talents.TalentTree.talents">
            <summary>
            All available talents sorted by their Type.
            </summary>
        </member>
        <member name="F:Zelda.Talents.TalentTree.log">
            <summary>
            Provides a mechanism that allows logging of information.
            </summary>
        </member>
        <member name="F:Zelda.Talents.TalentTree.statistics">
            <summary>
            Captures statistics about this TalentTree.
            </summary>
        </member>
        <member name="T:Zelda.Talents.TalentTreeStatistics">
            <summary>
            Captures statistics about a <see cref="T:Zelda.Talents.TalentTree"/>.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentTreeStatistics.Class">
            <summary>
            Gets the CharacterClass that is associated with the current
            configuration of the TalenTree.
            </summary>
            <value>
            Might be null.
            </value>
        </member>
        <member name="P:Zelda.Talents.TalentTreeStatistics.MeleeLevel">
            <summary>
            Gets the 'level' of the melee talent tree.
            </summary>
            <value>
            A value between 0 and 5 representing how many points have
            been invested into the tree relative to the total amount of points.
            </value>
        </member>
        <member name="P:Zelda.Talents.TalentTreeStatistics.RangedLevel">
            <summary>
            Gets the 'level' of the ranged talent tree.
            </summary>
            <value>
            A value between 0 and 5 representing how many points have
            been invested into the tree relative to the total amount of points.
            </value>
        </member>
        <member name="P:Zelda.Talents.TalentTreeStatistics.MagicLevel">
            <summary>
            Gets the 'level' of the magic talent tree.
            </summary>
            <value>
            A value between 0 and 5 representing how many points have
            been invested into the tree relative to the total amount of points.
            </value>
        </member>
        <member name="P:Zelda.Talents.TalentTreeStatistics.SupportLevel">
            <summary>
            Gets the 'level' of the support talent tree.
            </summary>
            <value>
            A value between 0 and 5 representing how many points have
            been invested into the tree relative to the total amount of points.
            </value>
        </member>
        <member name="P:Zelda.Talents.TalentTreeStatistics.InvestedPointsMelee">
            <summary>
            Gets the number of talent points the player has invested into the melee sub TalentTree.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentTreeStatistics.InvestedPointsRanged">
            <summary>
            Gets the number of talent points the player has invested into the ranged sub TalentTree.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentTreeStatistics.InvestedPointsMagic">
            <summary>
            Gets the number of talent points the player has invested into the magic sub TalentTree.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentTreeStatistics.InvestedPointsSupport">
            <summary>
            Gets the number of talent points the player has invested into the support sub TalentTree.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentTreeStatistics.TotalInvestedPoints">
            <summary>
            Gets the total number of talent points the player has invested so far.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentTreeStatistics.TotalsPointsMelee">
            <summary>
            Gets the number of talent points the player may invest into the melee sub TalentTree.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentTreeStatistics.TotalsPointsRanged">
            <summary>
            Gets the number of talent points the player may invest into the ranged sub TalentTree.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentTreeStatistics.TotalsPointsMagic">
            <summary>
            Gets the number of talent points the player may invest into the magic sub TalentTree.
            </summary>
        </member>
        <member name="P:Zelda.Talents.TalentTreeStatistics.TotalsPointsSupport">
            <summary>
            Gets the number of talent points the player may invest into the support sub TalentTree.
            </summary>
        </member>
        <member name="M:Zelda.Talents.TalentTreeStatistics.#ctor(Zelda.Talents.TalentTree)">
            <summary>
            Initializes a new instance of the TalentTreeStatistics class.
            </summary>
            <param name="talentTree">
            The <see cref="T:Zelda.Talents.TalentTree"/> whose statistics are captured by the new TalentTreeStatistics.
            </param>
        </member>
        <member name="M:Zelda.Talents.TalentTreeStatistics.#ctor(Zelda.Talents.TalentTree,Zelda.Talents.Classes.CharacterClassTalentMap)">
            <summary>
            Initializes a new instance of the TalentTreeStatistics class.
            </summary>
            <param name="talentTree">
            The <see cref="T:Zelda.Talents.TalentTree"/> whose statistics are captured by the new TalentTreeStatistics.
            </param>
            <param name="classMap">
            The map that maps talent point investment onto CharacterClasses.
            </param>
        </member>
        <member name="M:Zelda.Talents.TalentTreeStatistics.OnTalentsChanged(System.Object,System.EventArgs)">
            <summary>
            Called when any of the Talent in the TalentTree has changed.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
            <param name="e">
            The System.EventArgs that contain the event data.
            </param>
        </member>
        <member name="M:Zelda.Talents.TalentTreeStatistics.UpdateClass">
            <summary>
            Updates the CharacterClass based on the current configuration of the TalentTree.
            </summary>
        </member>
        <member name="M:Zelda.Talents.TalentTreeStatistics.GetTotalPoints(Zelda.Talents.Talent)">
            <summary>
            Gets the number of points the player can invest
            into the given talent and all talents that follow it.
            </summary>
            <param name="talent">
            The talent to traverse.
            </param>
            <returns>
            The number of points the player can invest
            into the given talent and all talents that follow it.
            </returns>
        </member>
        <member name="M:Zelda.Talents.TalentTreeStatistics.GetInvestedPoints(Zelda.Talents.Talent)">
            <summary>
            Gets the number of points the player has invested
            into the given talent and all talents that follow it.
            </summary>
            <param name="talent">
            The talent to traverse.
            </param>
            <returns>
            The number of points the player has invested
            into the given talent and all talents that follow it.
            </returns>  
        </member>
        <member name="M:Zelda.Talents.TalentTreeStatistics.AnalyzeInvestedPoints">
            <summary>
            Reanylzes the number of points the player has invested
            into the individual sub TalentTrees.
            </summary>
        </member>
        <member name="M:Zelda.Talents.TalentTreeStatistics.GetLevel(System.Single)">
            <summary>
            Gets the level of talent sub tree given the ratio of invested points to total points.
            </summary>
            <param name="talentRatio">
            The ratio of invested points to total points.
            </param>
            <returns>
            The level of the talent tree; a value from 0 to 5.
            </returns>
        </member>
        <member name="F:Zelda.Talents.TalentTreeStatistics.classMap">
            <summary>
            Maps talent point investment onto CharacterClasses.
            </summary>
        </member>
        <member name="F:Zelda.Talents.TalentTreeStatistics.totalsPointsMelee">
            <summary>
            The total number of points in the various talent sub-trees.
            </summary>
        </member>
        <member name="F:Zelda.Talents.TalentTreeStatistics.totalsPointsRanged">
            <summary>
            The total number of points in the various talent sub-trees.
            </summary>
        </member>
        <member name="F:Zelda.Talents.TalentTreeStatistics.totalsPointsMagic">
            <summary>
            The total number of points in the various talent sub-trees.
            </summary>
        </member>
        <member name="F:Zelda.Talents.TalentTreeStatistics.totalsPointsSupport">
            <summary>
            The total number of points in the various talent sub-trees.
            </summary>
        </member>
        <member name="F:Zelda.Talents.TalentTreeStatistics.talentTree">
            <summary>
            Identifies the <see cref="T:Zelda.Talents.TalentTree"/> whose statistics are captured by this TalentTreeStatistics.
            </summary>
        </member>
        <member name="T:Zelda.Talents.TalentType">
            <summary>
            Enumerates the types of talents.
            </summary>
        </member>
        <member name="F:Zelda.Talents.TalentType.None">
            <summary>
            If the type has not been set or is unknown.
            </summary>
        </member>
        <member name="F:Zelda.Talents.TalentType.Active">
            <summary>
            An active talent requires the player to do something; e.g. trigger a skill.
            </summary>
        </member>
        <member name="F:Zelda.Talents.TalentType.Passive">
            <summary>
            A passive talent is active without the player having to do anything actively.
            </summary>
        </member>
        <member name="T:Zelda.ActionTileId">
            <summary>
            Enumerates the different action tile ids used in the game.
            </summary>
        </member>
        <member name="F:Zelda.ActionTileId.Invalid">
            <summary>
            An invalid ActionTileId.
            </summary>
        </member>
        <member name="F:Zelda.ActionTileId.Normal">
            <summary>
            An normal ActionTileId, nothing special happens here.
            </summary>
        </member>
        <member name="F:Zelda.ActionTileId.Solid">
            <summary>
            A solid ActionTileId, solid objects get blocked by these.
            </summary>
        </member>
        <member name="F:Zelda.ActionTileId.SolidNotAffectingFlying">
            <summary>
            A solid tile, which doesn't affect flying entities (such as arrows, magical bolts or the fairy).
            </summary>
        </member>
        <member name="F:Zelda.ActionTileId.SolidForAll">
            <summary>
            A solid tile, which is solid FOR ALL objects, even 'ghost like' ones that have IsSolid set to false.
            </summary>
        </member>
        <member name="F:Zelda.ActionTileId.WaterSwimable">
            <summary>
            A water tile, where if possible, the object can swim in.
            </summary>
        </member>
        <member name="F:Zelda.ActionTileId.WaterWalkable">
            <summary>
            A water tile, any object can walk in it.
            </summary>
        </member>
        <member name="F:Zelda.ActionTileId.FloorUp">
            <summary>
            When triggered the object moves one TileMapFloor up.
            </summary>
        </member>
        <member name="F:Zelda.ActionTileId.FloorDown">
            <summary>
            When triggered the object moves one TileMapFloor down.
            </summary>
        </member>
        <member name="F:Zelda.ActionTileId.FallUnsafe">
            <summary>
            An unsafe tile, the object 'falls' down.
            </summary>
        </member>
        <member name="T:Zelda.DefaultTileHandler">
            <summary>
            Defines the default implementations of the <see cref="T:Zelda.IZeldaTileHandler"/> interface.
            This class can't be inherited.
            </summary>
        </member>
        <member name="F:Zelda.DefaultTileHandler.Instance">
            <summary>
            Receives the instance of the <see cref="T:Zelda.DefaultTileHandler"/> class.
            </summary>
        </member>
        <member name="M:Zelda.DefaultTileHandler.#ctor">
            <summary>
            Prevents a default instance of the DefaultTileHandler class from being created.
            </summary>
        </member>
        <member name="M:Zelda.DefaultTileHandler.IsWalkable(System.Int32,Zelda.Entities.Components.Moveable)">
            <summary>
            Receives a value that indicates whether 
            the specified caller can walk over the tile 
            with the specifies id.
            </summary>
            <param name="id">The id of the tile.</param>
            <param name="caller">The caller of the IZeldaTileHandler.</param>
            <returns>
            true if the caller can walk over the tile with the given id;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.DefaultTileHandler.IsWalkable(System.Int32)">
            <summary>
            Gets a value indicating whether -by default-
            the specified id would be considered
            a walkable tile id.
            </summary>
            <param name="id">
            The id of the tile to check.
            </param>
            <returns>
            true if it is walkable;
            -or- otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.DefaultTileHandler.Handle(System.Int32,System.Int32,System.Int32,Zelda.Entities.Components.Moveable)">
            <summary>
            Handles the tile at the given position and with the given id for the given caller.
            </summary>
            <param name="x">The position on the x-axis of the tile to handle (in tilespace).</param>
            <param name="y">The position on the y-axis of the tile to handle (in tilespace).</param>
            <param name="id">The id of the tile.</param>
            <param name="caller">The caller that wants a tile to be handled.</param>
            <returns>
            true if to stop handling tiles;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.FlyingTileHandler">
            <summary>
            Defines the <see cref="T:Zelda.IZeldaTileHandler"/> for ranged entities, such as Projectiles.
            This class can't be inherited.
            </summary>
        </member>
        <member name="F:Zelda.FlyingTileHandler.Instance">
            <summary>
            Receives the instance of the <see cref="T:Zelda.FlyingTileHandler"/> class.
            </summary>
        </member>
        <member name="M:Zelda.FlyingTileHandler.#ctor">
            <summary>
            Prevents a default instance of the RangedTileHandler class from being created.
            </summary>
        </member>
        <member name="M:Zelda.FlyingTileHandler.IsWalkable(System.Int32,Zelda.Entities.Components.Moveable)">
            <summary>
            Receives a value that indicates whether 
            the specified caller can walk over the tile 
            with the specifies id.
            </summary>
            <param name="id">The id of the tile.</param>
            <param name="caller">The caller of the IZeldaTileHandler.</param>
            <returns>
            true if the caller can walk over the tile with the given id;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.FlyingTileHandler.IsWalkableByDefault(Zelda.ActionTileId)">
            <summary>
            Receives a value that indicates whether 
            a caller would be able to walk over the tile 
            with the specifies id by deafult.
            </summary>
            <param name="id">The id of the tile.</param>
            <returns>
            true if a caller could walk over the tile with the given id by default;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.FlyingTileHandler.Handle(System.Int32,System.Int32,System.Int32,Zelda.Entities.Components.Moveable)">
            <summary>
            Handles the tile at the given position and with the given id for the given caller.
            </summary>
            <param name="x">The position on the x-axis of the tile to handle (in tilespace).</param>
            <param name="y">The position on the y-axis of the tile to handle (in tilespace).</param>
            <param name="id">The id of the tile.</param>
            <param name="caller">The caller that wants a tile to be handled.</param>
            <returns>
            true if to stop handling tiles;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.IZeldaFloorDrawable">
            <summary>
            Specifies the interface of a drawable object which is part of a floor, 
            such as a TileMapFloor.
            </summary>
        </member>
        <member name="P:Zelda.IZeldaFloorDrawable.SecondaryDrawOrder">
            <summary>
            Gets the secondary draw order value of this IZeldaFloorDrawable.
            </summary>
            <value>
            This value is used as a secondary sorting-value that is
            used when the RelativeDrawOrder of two IZeldaFloorDrawable is equal.
            </value>
        </member>
        <member name="M:Zelda.IZeldaFloorDrawable.PreDraw(Zelda.ZeldaDrawContext)">
            <summary>
            Called before drawing anything is drawn.
            </summary>
            <param name="drawContext">
            The current ZeldaDrawContext.
            </param>
        </member>
        <member name="T:Zelda.IZeldaTileHandler">
            <summary>
            Descripes the interface of an object that 
            handles interaction with a TileMapFloor's ActionLayer.
            </summary>
        </member>
        <member name="T:Zelda.StaticRangedTileHandler">
            <summary>
            Defines the <see cref="T:Zelda.IZeldaTileHandler"/> for 'unmoveable' ranged entities.
            This class can't be inherited.
            </summary>
        </member>
        <member name="F:Zelda.StaticRangedTileHandler.Instance">
            <summary>
            Receives the instance of the <see cref="T:Zelda.StaticRangedTileHandler"/> class.
            </summary>
        </member>
        <member name="M:Zelda.StaticRangedTileHandler.#ctor">
            <summary>
            Prevents a default instance of the StaticRangedTileHandler class from being created.
            </summary>
        </member>
        <member name="M:Zelda.StaticRangedTileHandler.IsWalkable(System.Int32,Zelda.Entities.ZeldaEntity)">
            <summary>
            Receives a value that indicates whether 
            the specified caller can walk over the tile 
            with the specifies id.
            </summary>
            <param name="id">The id of the tile.</param>
            <param name="caller">The caller of the IZeldaTileHandler.</param>
            <returns>
            true if the caller can walk over the tile with the given id;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.StaticRangedTileHandler.Handle(System.Int32,System.Int32,System.Int32,Zelda.Entities.ZeldaEntity)">
            <summary>
            Handles the tile at the given position and with the given id for the given caller.
            </summary>
            <param name="x">The position on the x-axis of the tile to handle (in tilespace).</param>
            <param name="y">The position on the y-axis of the tile to handle (in tilespace).</param>
            <param name="id">The id of the tile.</param>
            <param name="caller">The caller that wants a tile to be handled.</param>
            <returns>
            true if to stop handling tiles;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.ZeldaTileMapFloorTag">
            <summary>
            Defines the tag which is applied to every TileMapFloor in a scene.
            </summary>
        </member>
        <member name="P:Zelda.ZeldaTileMapFloorTag.PathSearcher">
            <summary>
            Gets or sets the <see cref="T:Atom.AI.AStarTilePathSearcher"/> associated with the TileMapFloor.
            </summary>
        </member>
        <member name="P:Zelda.ZeldaTileMapFloorTag.VisibleDrawables">
            <summary>
            Gets the list of  <see cref="T:Zelda.IZeldaFloorDrawable"/>s that are visible on the TileMapFloor.
            </summary>
        </member>
        <member name="M:Zelda.ZeldaTileMapFloorTag.SortVisibleDrawables">
            <summary>
            Sorts the VisibleDrawables list of this <see cref="T:Zelda.ZeldaTileMapFloorTag"/>.
            </summary>
        </member>
        <member name="M:Zelda.ZeldaTileMapFloorTag.ClearVisibleDrawables">
            <summary>
            Cleares the VisibleDrawables list of this <see cref="T:Zelda.ZeldaTileMapFloorTag"/>.
            </summary>
        </member>
        <member name="M:Zelda.ZeldaTileMapFloorTag.Create(Atom.Scene.Tiles.TileMapFloor)">
            <summary>
            Creates a new <see cref="T:Zelda.ZeldaTileMapFloorTag"/> for the given <see cref="T:Atom.Scene.Tiles.TileMapFloor"/>.
            </summary>
            <param name="floor">
            The TileMapFloor whose ZeldaTileMapFloorTag should be created.
            </param>
            <returns>
            A newly created ZeldaTileMapFloorTag.
            </returns>
        </member>
        <member name="M:Zelda.ZeldaTileMapFloorTag.CreatePathSearcher(Atom.Scene.Tiles.TileMapFloor)">
            <summary>
            Creates a new Atom.AI.AStarTilePathSearcher that is responsible for finding
            paths on the action layer of the specified TileMapFloor.
            </summary>
            <param name="floor">
            The TileMapFloor whose AStarTilePathSearcher should be created.
            </param>
            <returns>
            The newly created AStarTilePathSearcher; 
            or null if none is required.
            </returns>
        </member>
        <member name="M:Zelda.ZeldaTileMapFloorTag.CompareDrawablesOnSameFloor(Zelda.IZeldaFloorDrawable,Zelda.IZeldaFloorDrawable)">
            <summary>
            Compares two IFloorDrawables that are on the same TileMapFloor.
            </summary>
            <param name="x">The first IFloorDrawable.</param>
            <param name="y">The second IFloorDrawable.</param>
            <returns>
            Less than 0: x is below y.
            Equals 0: x equals y.
            Greater than 0: x above y.
            </returns>
        </member>
        <member name="F:Zelda.ZeldaTileMapFloorTag.visibleDrawables">
            <summary>
            the list of <see cref="T:Zelda.IZeldaFloorDrawable"/>s that
            are visible on the TileMapFloor.
            </summary>
        </member>
        <member name="T:Zelda.Trading.IMerchant">
            <summary>
            An IMerchant sells various Items to the player.
            </summary>
        </member>
        <member name="P:Zelda.Trading.IMerchant.LocalizedName">
            <summary>
            Gets the localized name of this IMerchant.
            </summary>
        </member>
        <member name="P:Zelda.Trading.IMerchant.SellList">
            <summary>
            Gets the <see cref="T:Zelda.Trading.IMerchantSellList"/> that provides access to the <see cref="T:Zelda.Trading.MerchantItem"/> s this IMerchant sells.
            </summary>
        </member>
        <member name="P:Zelda.Trading.IMerchant.Faction">
            <summary>
            Gets or sets the <see cref="P:Zelda.Trading.IMerchant.Faction"/> this IMerchant is part of.
            </summary>
        </member>
        <member name="M:Zelda.Trading.IMerchant.GetAvailableItems(Zelda.Entities.PlayerEntity)">
            <summary>
            Gets the MerchantItems that available to be bought
            by the given PlayerEntity.
            </summary>
            <param name="buyer">
            The player that wishes to buy MerchantItems.
            </param>
            <returns>
            The available MerchantItems.
            </returns>
        </member>
        <member name="M:Zelda.Trading.IMerchant.GetDiscountModifier(Zelda.Entities.PlayerEntity)">
            <summary>
            Gets the discount the given PlayerEntity would get when
            buying items at this IMerchant.
            </summary>
            <param name="buyer">
            The player that wishes to buy MerchantItems.
            </param>
            <returns>
            The multiplier that should be applied to the sell price of an item.
            </returns>
        </member>
        <member name="T:Zelda.Trading.IMerchantSellList">
            <summary>
            Represents the list of <see cref="T:Zelda.Trading.MerchantItem"/> an <see cref="T:Zelda.Trading.IMerchant"/> has
            available for sale.
            </summary>
        </member>
        <member name="P:Zelda.Trading.IMerchantSellList.Merchant">
            <summary>
            Gets the <see cref="T:Zelda.Trading.IMerchant"/> that owns this IMerchantSellList.
            </summary>
        </member>
        <member name="P:Zelda.Trading.IMerchantSellList.Items">
            <summary>
            Gets the <see cref="T:Zelda.Trading.MerchantItem"/>s that are part of this IMerchantSellList.
            </summary>
        </member>
        <member name="M:Zelda.Trading.IMerchantSellList.GetAvailable(Zelda.Entities.PlayerEntity)">
            <summary>
            Gets all <see cref="T:Zelda.Trading.MerchantItem"/>s that are available to be sold to the
            specified PlayerEntity.
            </summary>
            <param name="buyer">
            The potential buyer.
            </param>
            <returns>
            The MerchantItem that might be sold.
            </returns>
        </member>
        <member name="M:Zelda.Trading.IMerchantSellList.ReadyUp">
            <summary>
            Makes sure that this IMerchantSellList is ready to be used.
            </summary>
        </member>
        <member name="T:Zelda.Trading.Merchant">
            <summary>
            A Merchant sells various Items to the player.
            </summary>
        </member>
        <member name="P:Zelda.Trading.Merchant.LocalizedName">
            <summary>
            Gets the localized name of this Merchant.
            </summary>
        </member>
        <member name="P:Zelda.Trading.Merchant.SellList">
            <summary>
            Gets the <see cref="T:Zelda.Trading.IMerchantSellList"/> that provides access to the <see cref="T:Zelda.Trading.MerchantItem"/> s this Merchant sells.
            </summary>
        </member>
        <member name="M:Zelda.Trading.Merchant.#ctor">
            <summary>
            Initializes a new instance of the Merchant class.
            </summary>
        </member>
        <member name="M:Zelda.Trading.Merchant.Use(Zelda.Entities.PlayerEntity)">
            <summary>
            Tries to use this IUseable object.
            </summary>
            <param name="user">
            The object which tries to use this IUseable.
            </param>
            <returns>
            true if this IUseable object has been used;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Trading.Merchant.HasItemsToSellFor(Zelda.Entities.PlayerEntity)">
            <summary>
            Gets a value indicating whether the given PlayerEntity
            can buy any item from this Merchant.
            </summary>
            <param name="user">
            The player that wishes to buy MerchantItems.
            </param>
            <returns>
            true if any items can be bought;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Trading.Merchant.GetAvailableItems(Zelda.Entities.PlayerEntity)">
            <summary>
            Gets the MerchantItems that available to be bought
            by the given PlayerEntity.
            </summary>
            <param name="buyer">
            The player that wishes to buy MerchantItems.
            </param>
            <returns>
            The available MerchantItems.
            </returns>
        </member>
        <member name="M:Zelda.Trading.Merchant.ReadyUpItems">
            <summary>
            Prepares this Merchant for serving items to the player.
            </summary>
        </member>
        <member name="M:Zelda.Trading.Merchant.GetDiscountModifier(Zelda.Entities.PlayerEntity)">
            <summary>
            Gets the discount the given PlayerEntity would get when
            buying items at this IMerchant.
            </summary>
            <param name="buyer">
            The player that wishes to buy MerchantItems.
            </param>
            <returns>
            The multiplier that should be applied to the sell price of an item.
            </returns>
        </member>
        <member name="M:Zelda.Trading.Merchant.GetMerchantWindowService">
            <summary>
            Gets the <see cref="T:Zelda.Trading.UI.IMerchantWindowService"/> object.
            </summary>
            <returns>
            The UI.IMerchantWindowService object.
            </returns>
        </member>
        <member name="F:Zelda.Trading.Merchant.localizedName">
            <summary>
            The localizable name of this Merchant.
            </summary>
        </member>
        <member name="F:Zelda.Trading.Merchant.sellList">
            <summary>
            The list of items this Merchant sells.
            </summary>
        </member>
        <member name="T:Zelda.Trading.Merchant.ReaderWriter">
            <summary>
            Defines the <see cref="T:Zelda.Entities.IEntityReaderWriter"/> for <see cref="T:Zelda.Trading.Merchant"/> entities.
            </summary>
        </member>
        <member name="M:Zelda.Trading.Merchant.ReaderWriter.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Trading.Merchant.ReaderWriter"/> class.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services. 
            </param>
        </member>
        <member name="M:Zelda.Trading.Merchant.ReaderWriter.Serialize(Zelda.Trading.Merchant,Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the given entity using the given <see cref="T:System.IO.BinaryWriter"/>.
            </summary>
            <param name="entity">
            The entity to serialize.
            </param>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Trading.Merchant.ReaderWriter.Deserialize(Zelda.Trading.Merchant,Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data in the given <see cref="T:System.IO.BinaryWriter"/> to initialize
            the given ZeldaEntity.
            </summary>
            <param name="entity">
            The ZeldaEntity to initialize.
            </param>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="T:Zelda.Trading.MerchantItem">
            <summary>
            Represents an item that an <see cref="T:Zelda.Trading.IMerchant"/> is selling
            </summary>
        </member>
        <member name="E:Zelda.Trading.MerchantItem.Sold">
            <summary>
            Raised when this MerchantItem has been sold.
            </summary>
        </member>
        <member name="T:Zelda.Trading.MerchantItem.ItemInstanceCreationMode">
            <summary>
            Enumerates the different ways an ItemInstance for this MerchantItem is created.
            </summary>
        </member>
        <member name="F:Zelda.Trading.MerchantItem.ItemInstanceCreationMode.Default">
            <summary>
            By default ItemInstances don't have any affixes.
            </summary>
        </member>
        <member name="F:Zelda.Trading.MerchantItem.ItemInstanceCreationMode.AllowAffixes">
            <summary>
            Allows the ItemInstance to have affixes.
            </summary>
        </member>
        <member name="P:Zelda.Trading.MerchantItem.Item">
            <summary>
            Gets or sets the Item that is encapulsated by this MerchantItem.
            </summary>
        </member>
        <member name="P:Zelda.Trading.MerchantItem.RubiesWorth">
            <summary>
            Gets how much the <see cref="P:Zelda.Trading.MerchantItem.Item"/> is worth.
            </summary>
        </member>
        <member name="P:Zelda.Trading.MerchantItem.ItemInstance">
            <summary>
            Gets the ItemInstance that has been created for this MerchantItem.
            </summary>
        </member>
        <member name="P:Zelda.Trading.MerchantItem.Price">
            <summary>
            Gets or sets the number of rubees the <see cref="P:Zelda.Trading.MerchantItem.Item"/>
            costs.
            </summary>
        </member>
        <member name="P:Zelda.Trading.MerchantItem.MinimumReputation">
            <summary>
            Gets or sets the minimum required reputation level for this MerchantItem
            to be buyable.
            </summary>
        </member>
        <member name="P:Zelda.Trading.MerchantItem.InitialStockCount">
            <summary>
            Gets or sets the initial number of items a merchant has in stock
            when he initially opens his store.
            </summary>
        </member>
        <member name="P:Zelda.Trading.MerchantItem.CreationMode">
            <summary>
            Gets or sets how the ItemInstance of this MerchantItem is created.
            </summary>
        </member>
        <member name="P:Zelda.Trading.MerchantItem.StockCount">
            <summary>
            Gets the number of items the merchant currently has in stock.
            </summary>
        </member>
        <member name="P:Zelda.Trading.MerchantItem.RestockMethod">
            <summary>
            Gets or sets the <see cref="T:Zelda.Trading.Restocking.IRestockMethod"/> used by the IMerchant
            that owns this MerchantItem to restock it.
            </summary>
        </member>
        <member name="P:Zelda.Trading.MerchantItem.Merchant">
            <summary>
            Gets the <see cref="T:Zelda.Trading.IMerchant"/> that owns this MerchantItem.
            </summary>
        </member>
        <member name="P:Zelda.Trading.MerchantItem.Identifier">
            <summary>
            Gets the string that uniquely identifies this MerchantItem.
            </summary>
        </member>
        <member name="P:Zelda.Trading.MerchantItem.RestockDataStorage">
            <summary>
            Gets or sets the <see cref="T:Zelda.Saving.Storage.IStorage"/> that holds data saved about
            the current state of the restocking process to the save file.
            </summary>
        </member>
        <member name="M:Zelda.Trading.MerchantItem.#ctor(Zelda.Trading.IMerchant)">
            <summary>
            Initializes a new instance of the MerchantItem class.
            </summary>
            <param name="merchant">
            The IMerchant that owns the new MerchantItem.
            </param>
        </member>
        <member name="M:Zelda.Trading.MerchantItem.GetFinalPrice(Zelda.Entities.PlayerEntity)">
            <summary>
            Gets the final price the given buyer has to pay for this MerchantItem.
            </summary>
            <param name="buyer">
            The entity that wants to buy this MerchantItem.
            </param>
            <returns>
            The number of rubies the buyer has to buy; after substracting discount.
            </returns>
        </member>
        <member name="M:Zelda.Trading.MerchantItem.SellTo(Zelda.Entities.PlayerEntity)">
            <summary>
            Sells this MerchantItem to the given buyer.
            </summary>
            <param name="buyer">
            The entity that wants to buy this MerchantItem.
            </param>
            <returns>
            The ItemInstance that has been sold;
            or null if no item has been sold.
            </returns>
        </member>
        <member name="M:Zelda.Trading.MerchantItem.CanSellTo(Zelda.Entities.PlayerEntity)">
            <summary>
            Gets a value indicating whether this MerchantItem
            could potentially be sold to the given buyer.
            </summary>
            <param name="buyer">
            The entity that wants to buy this MerchantItem.
            </param>
            <returns>
            true if it could be sold;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Trading.MerchantItem.HasRequiredReputation(Zelda.Entities.PlayerEntity)">
            <summary>
            Gets a value indicating whether the given potential buyer
            has the required reputation to buy this MerchantItem.
            </summary>
            <param name="buyer">
            The entity that wants to buy this MerchantItem.
            </param>
            <returns>
            true if the required reputation level is fulfilled;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Trading.MerchantItem.HasRequiredReputation(Zelda.Factions.ReputationLevel)">
            <summary>
            Gets a value indicating whether the given <see cref="T:Zelda.Factions.ReputationLevel"/>
            is enough to be able to buy this MerchantItem.
            </summary>
            <param name="reputationLevel">
            The ReputationLevel of the buyer towards the IMerchant.
            </param>
            <returns>
            true if the required reputation level is fulfilled;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Trading.MerchantItem.HasRequiredRubies(Zelda.Entities.PlayerEntity)">
            <summary>
            Gets a value indicating whether the given potential buyer
            has enough rubies to buy this MerchantItem.
            </summary>
            <param name="buyer">
            The ReputationLevel of the buyer towards the IMerchant.
            </param>
            <returns>
            true if the required reputation level is fulfilled;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Trading.MerchantItem.CreateItemInstanceIfRequired">
            <summary>
            Creates the <see cref="P:Zelda.Trading.MerchantItem.ItemInstance"/>; if required.
            </summary>
        </member>
        <member name="M:Zelda.Trading.MerchantItem.CreateItemInstance">
            <summary>
            Creates the <see cref="P:Zelda.Trading.MerchantItem.ItemInstance"/> depending on the current <see cref="P:Zelda.Trading.MerchantItem.CreationMode"/>.
            </summary>
        </member>
        <member name="M:Zelda.Trading.MerchantItem.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Trading.MerchantItem.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Trading.MerchantItem.OnMerchantAddedToScene(System.Object,Zelda.ZeldaScene)">
            <summary>
            Called when the Merchant that owns this <see cref="T:Zelda.Trading.MerchantItem"/>
            got added to a ZeldaScene.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
            <param name="scene">
            The related ZeldaScene.
            </param>
        </member>
        <member name="M:Zelda.Trading.MerchantItem.ReceiveDataStorage(Zelda.Saving.SceneStatus)">
            <summary>
            Receives the StockCount IntegerStorage from the SceneStatus.
            </summary>
            <param name="sceneStatus">
            The current status of the ZeldaScene.
            </param>
        </member>
        <member name="M:Zelda.Trading.MerchantItem.GetDataStorageIdentifier">
            <summary>
            Gets the identifier that is used to store the StockCount in the
            save file.
            </summary>
            <returns>
            The unique indifier.
            </returns>
        </member>
        <member name="M:Zelda.Trading.MerchantItem.DeserializeRestockMode(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the RestockMode.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Trading.MerchantItem.ToString">
            <summary>
            Overridden to return the name of the underlying Item.
            </summary>
            <returns>
            The name of the underlying item.
            </returns>
        </member>
        <member name="F:Zelda.Trading.MerchantItem._initialStockCount">
            <summary>
            The storage field of the InitialStockCount property.
            </summary>
        </member>
        <member name="F:Zelda.Trading.MerchantItem._restockMethod">
            <summary>
            The storage field of the <see cref="P:Zelda.Trading.MerchantItem.RestockMethod"/> property.
            </summary>
        </member>
        <member name="F:Zelda.Trading.MerchantItem.merchant">
            <summary>
            The storage field of the <see cref="P:Zelda.Trading.MerchantItem.Merchant"/> property.
            </summary>
        </member>
        <member name="F:Zelda.Trading.MerchantItem.dataStorage">
            <summary>
            The place in which the data that is saved within the SaveFile is stored.
            </summary>
        </member>
        <member name="F:Zelda.Trading.MerchantItem.serviceProvider">
            <summary>
            Provides fast access to game-related services.
            </summary>
        </member>
        <member name="T:Zelda.Trading.MerchantItem.MerchantItemStorage">
            <summary>
            Defines the storage place for the data that is saved
            within the SaveFile for a MerchantItem.
            </summary>
        </member>
        <member name="P:Zelda.Trading.MerchantItem.MerchantItemStorage.StockCount">
            <summary>
            Gets or sets the number of items the Merchant has currently in stock
            of this MerchantItem.
            </summary>
        </member>
        <member name="P:Zelda.Trading.MerchantItem.MerchantItemStorage.ItemInstance">
            <summary>
            Gets or sets the ItemInstance that is currently sold for this MerchantItem.
            </summary>
        </member>
        <member name="P:Zelda.Trading.MerchantItem.MerchantItemStorage.RestockDataStorage">
            <summary>
            Gets or sets the <see cref="T:Zelda.Saving.Storage.IStorage"/> that holds data saved about
            the current state of the restocking process to the save file.
            </summary>
        </member>
        <member name="M:Zelda.Trading.MerchantItem.MerchantItemStorage.SerializeStorage(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this IStorage.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Trading.MerchantItem.MerchantItemStorage.SerializeItemInstance(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the <see cref="P:Zelda.Trading.MerchantItem.MerchantItemStorage.ItemInstance"/> data field.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Trading.MerchantItem.MerchantItemStorage.MustSerializeItemInstance">
            <summary>
            Gets a value indicating whether the <see cref="P:Zelda.Trading.MerchantItem.MerchantItemStorage.ItemInstance"/> must be
            serialized into this IStorage.
            </summary>
            <returns>
            true if the ItemInstance should be serialized (into the SaveFile);
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Trading.MerchantItem.MerchantItemStorage.SerializeRestockDataStorage(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data stored in the <see cref="P:Zelda.Trading.MerchantItem.MerchantItemStorage.RestockDataStorage"/>.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Trading.MerchantItem.MerchantItemStorage.DeserializeStorage(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this IStorage.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Trading.MerchantItem.MerchantItemStorage.DeserializeItemInstance(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the ItemInstance.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Trading.MerchantItem.MerchantItemStorage.DeserializeRestockDataStorage(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the RestockDataStorage.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="T:Zelda.Trading.MerchantSellList">
            <summary>
            Represents the list of items an <see cref="T:Zelda.Trading.IMerchant"/> has
            available for sale.
            This class can't be inherited.
            </summary>
        </member>
        <member name="P:Zelda.Trading.MerchantSellList.Merchant">
            <summary>
            Gets the <see cref="T:Zelda.Trading.IMerchant"/> that owns this MerchantSellList.
            </summary>
        </member>
        <member name="P:Zelda.Trading.MerchantSellList.Items">
            <summary>
            Gets the internal list of MerchantItems the IMerchant that owns this MerchantSellList sells.
            </summary>
            <remarks>
            This property is exposed for design-time support.
            </remarks>
        </member>
        <member name="M:Zelda.Trading.MerchantSellList.#ctor(Zelda.Trading.IMerchant)">
            <summary>
            Initializes a new instance of the MerchantSellList class.
            </summary>
            <param name="merchant">
            The IMerchant that owns the new MerchantSellList.
            </param>
        </member>
        <member name="M:Zelda.Trading.MerchantSellList.GetAvailable(Zelda.Entities.PlayerEntity)">
            <summary>
            Gets the <see cref="T:Zelda.Trading.MerchantItem"/>s that have are currently
            available to be bought by the given potential buyer.
            </summary>
            <param name="buyer">
            The potential buyer.
            </param>
            <returns>
            The available MerchantItems.
            </returns>
        </member>
        <member name="M:Zelda.Trading.MerchantSellList.GetAvailable(Zelda.Factions.ReputationLevel)">
            <summary>
            Gets the <see cref="T:Zelda.Trading.MerchantItem"/>s that have are currently
            available to be bought at the given ReputationLevel.
            </summary>
            <param name="reputationLevel">
            The ReputationLevel of the potential buyer.
            </param>
            <returns>
            The available MerchantItems.
            </returns>
        </member>
        <member name="M:Zelda.Trading.MerchantSellList.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Trading.MerchantSellList.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Trading.MerchantSellList.ReadyUp">
            <summary>
            Creates the ItemInstances of the MerchantItems in this MerchantSellList;
            if required.
            </summary>
        </member>
        <member name="F:Zelda.Trading.MerchantSellList.merchant">
            <summary>
            The IMerchant that owns this MerchantSellList.
            </summary>
        </member>
        <member name="F:Zelda.Trading.MerchantSellList.items">
            <summary>
            The internal list of MerchantItems.
            </summary>
        </member>
        <member name="T:Zelda.Trading.Restocking.AfterWorldTimeAndOnCreationRestockMethod">
            <summary>
            Defines an <see cref="T:Zelda.Trading.Restocking.IRestockMethod"/> that composes the <see cref="T:Zelda.Trading.Restocking.OnMerchantCreatedRestockMethod"/> and 
            the <see cref="P:Zelda.Trading.Restocking.AfterWorldTimeAndOnCreationRestockMethod.AfterWorldTimeRestockMethod"/>.
            </summary>
        </member>
        <member name="P:Zelda.Trading.Restocking.AfterWorldTimeAndOnCreationRestockMethod.OnCreationRestockMethod">
            <summary>
            Gets the IRestockMethod that restocks the MerchantItem when the Merchant is created.
            </summary>
        </member>
        <member name="P:Zelda.Trading.Restocking.AfterWorldTimeAndOnCreationRestockMethod.AfterWorldTimeRestockMethod">
            <summary>
            Gets the IRestockMethod that restocks the MerchantItem after a certain amount of time.
            </summary>
        </member>
        <member name="M:Zelda.Trading.Restocking.AfterWorldTimeAndOnCreationRestockMethod.Hook(Zelda.Trading.MerchantItem)">
            <summary>
            Hooks this IRestockMode up with the given MerchantItem.
            </summary>
            <param name="merchantItem">
            The IMerchant this IRestockMode should hook up with.
            </param>
        </member>
        <member name="M:Zelda.Trading.Restocking.AfterWorldTimeAndOnCreationRestockMethod.Unhook">
            <summary>
            Unhooks this IRestockMode.
            </summary>
        </member>
        <member name="M:Zelda.Trading.Restocking.AfterWorldTimeAndOnCreationRestockMethod.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Trading.Restocking.AfterWorldTimeAndOnCreationRestockMethod.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Trading.Restocking.AfterWorldTimeAndOnCreationRestockMethod.onCreatedMethod">
            <summary>
            Identifies the IRestockMethod that restocks the MerchantItem when the Merchant is created.
            </summary>
        </member>
        <member name="F:Zelda.Trading.Restocking.AfterWorldTimeAndOnCreationRestockMethod.afterWorldTimeMethod">
            <summary>
            Identifies the IRestockMethod that restocks the MerchantItem after a certain amount of time.
            </summary>
        </member>
        <member name="T:Zelda.Trading.Restocking.AfterWorldTimeRestockMethod">
            <summary>
            Defines an <see cref="T:Zelda.Trading.Restocking.IRestockMethod"/> that restocks the MerchantItem
            after a fixed amount of world-wide gametime.
            </summary>
        </member>
        <member name="T:Zelda.Trading.Restocking.AfterWorldTimeRestockMethod.RestockTriggerMode">
            <summary>
            Enumerates the different ways this AfterWorldTimeRestockMethod
            actually triggers.
            </summary>
        </member>
        <member name="F:Zelda.Trading.Restocking.AfterWorldTimeRestockMethod.RestockTriggerMode.WhenStockIsEmpty">
            <summary>
            States that the ITimer should be started
            when the complete stock of the MerchantItem 
            has been sold.
            </summary>
        </member>
        <member name="F:Zelda.Trading.Restocking.AfterWorldTimeRestockMethod.RestockTriggerMode.OnItemSold">
            <summary>
            States that the ITimer should be started
            Deferredly after an item has been sold.
            </summary>
        </member>
        <member name="T:Zelda.Trading.Restocking.AfterWorldTimeRestockMethod.RestockTimerType">
            <summary>
            Enumerates the different kind of timers this
            AfterWorldTimeRestockMethod supports.
            </summary>
        </member>
        <member name="F:Zelda.Trading.Restocking.AfterWorldTimeRestockMethod.RestockTimerType.Normal">
            <summary>
            A normal ITimer is used.
            </summary>
        </member>
        <member name="F:Zelda.Trading.Restocking.AfterWorldTimeRestockMethod.RestockTimerType.Unsaved">
            <summary>
            The ITimer is not saved to the WorldStatus.
            </summary>
        </member>
        <member name="P:Zelda.Trading.Restocking.AfterWorldTimeRestockMethod.Time">
            <summary>
            Gets or sets the time in game seconds that must pass
            after this IRestockMethod has been triggered until
            the MerchantTime gets restocked.
            </summary>
        </member>
        <member name="P:Zelda.Trading.Restocking.AfterWorldTimeRestockMethod.TimeInMinutes">
            <summary>
            Gets or sets the time in game minutes that must pass
            after this IRestockMethod has been triggered until
            the MerchantTime gets restocked.
            </summary>
        </member>
        <member name="P:Zelda.Trading.Restocking.AfterWorldTimeRestockMethod.TriggerMode">
            <summary>
            Gets or sets the <see cref="T:Zelda.Trading.Restocking.AfterWorldTimeRestockMethod.RestockTriggerMode"/> used by this AfterWorldTimeRestockMethod.
            </summary>
        </member>
        <member name="P:Zelda.Trading.Restocking.AfterWorldTimeRestockMethod.TimerType">
            <summary>
            Gets or sets the <see cref="T:Zelda.Trading.Restocking.AfterWorldTimeRestockMethod.RestockTimerType"/> used by this AfterWorldTimeRestockMethod.
            </summary>
        </member>
        <member name="P:Zelda.Trading.Restocking.AfterWorldTimeRestockMethod.IsTimerActive">
            <summary>
            Gets or sets a value indicating whether an timer is currently
            active.
            </summary>
        </member>
        <member name="M:Zelda.Trading.Restocking.AfterWorldTimeRestockMethod.OnHooked(Zelda.Trading.MerchantItem)">
            <summary>
            Called when this RestockMethod has been hooked up with the given MerchantItem.
            </summary>
            <param name="merchantItem">
            The related MerchantItem.
            </param>
        </member>
        <member name="M:Zelda.Trading.Restocking.AfterWorldTimeRestockMethod.RestockIfTimerHasPreviouslyRunOut">
            <summary>
            Restocks the MerchantItem if the Timer has run out while
            the Merchant wasn't actually loaded-up.
            </summary>
        </member>
        <member name="M:Zelda.Trading.Restocking.AfterWorldTimeRestockMethod.HasTimerPreviouslyRunOut">
            <summary>
            Gets a value indicating whether the Timer has run out while
            the Merchant wasn't actually loaded-up.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zelda.Trading.Restocking.AfterWorldTimeRestockMethod.OnUnhooked(Zelda.Trading.MerchantItem)">
            <summary>
            Called when this RestockMethod has been unhooked from the given MerchantItem.
            </summary>
            <param name="merchantItem">
            The related MerchantItem.
            </param>
        </member>
        <member name="M:Zelda.Trading.Restocking.AfterWorldTimeRestockMethod.OnItemSold(System.Object,System.EventArgs)">
            <summary>
            Gets called when an item has been sold.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
            <param name="e">
            The EventArgs that contain the event data.
            </param>
        </member>
        <member name="M:Zelda.Trading.Restocking.AfterWorldTimeRestockMethod.ShouldStartTimerOnItemSold">
            <summary>
            Gets a value indicating whether an ITimer should
            be started after an item has been sold.
            </summary>
            <returns>
            true if the timer should be started;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Trading.Restocking.AfterWorldTimeRestockMethod.StartTimer">
            <summary>
            Stats a new ITimer that when ended restocks the MerchantItem.
            </summary>
        </member>
        <member name="M:Zelda.Trading.Restocking.AfterWorldTimeRestockMethod.CreateTimer">
            <summary>
            Creates a new Timer for this AfterWorldTimeRestockMethod.
            </summary>
            <returns>
            A new ITimer.
            </returns>
        </member>
        <member name="M:Zelda.Trading.Restocking.AfterWorldTimeRestockMethod.OnTimerEnded(Zelda.Timing.ITimer)">
            <summary>
            Called when the ITimer has ended.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
        </member>
        <member name="M:Zelda.Trading.Restocking.AfterWorldTimeRestockMethod.GetWorldTimerMap">
            <summary>
            Tries to get the TimerMap that holds all ITimers
            that are updated world-wide.
            </summary>
            <returns>
            The requested TimerMap; or null.
            </returns>
        </member>
        <member name="M:Zelda.Trading.Restocking.AfterWorldTimeRestockMethod.GetTimerIdentifier">
            <summary>
            Gets the string that uniquely identifies the timer for
            this AfterWorldTimeRestockMethod.
            </summary>
            <returns>
            Gets the string that uniquely identifies the Timer 
            in the SaveFile used by this AfterWorldTimeRestockMethod.
            </returns>
        </member>
        <member name="M:Zelda.Trading.Restocking.AfterWorldTimeRestockMethod.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Trading.Restocking.AfterWorldTimeRestockMethod.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Trading.Restocking.AfterWorldTimeRestockMethod.TryGetExistingTimer">
            <summary>
            Tries to get the ITimer that has been previously created 
            and has not ended just yet.
            </summary>
        </member>
        <member name="M:Zelda.Trading.Restocking.AfterWorldTimeRestockMethod.GetCreateStateStorage">
            <summary>
            Gets (and creates) the <see cref="T:Zelda.Trading.Restocking.AfterWorldTimeRestockMethod.RestockStateStorage"/> of this AfterWorldTimeRestockMethod.
            </summary>
            <returns>
            The RestockStateStorage that should be used by this AfterWorldTimeRestockMethod
            to store data that is persisted into the SaveFile.
            </returns>
        </member>
        <member name="F:Zelda.Trading.Restocking.AfterWorldTimeRestockMethod.timer">
            <summary>
            Identifies the ITimer that when ended restocks the MerchantItem.
            </summary>
        </member>
        <member name="F:Zelda.Trading.Restocking.AfterWorldTimeRestockMethod.worldStatusProvider">
            <summary>
            Provides a mechanism that allows to receive the current <see cref="T:Zelda.Saving.WorldStatus"/>.
            </summary>
        </member>
        <member name="T:Zelda.Trading.Restocking.AfterWorldTimeRestockMethod.RestockStateStorage">
            <summary>
            Defines the IStorage in which data about the state of this AferWorldTimeRestockMethod
            is saved.
            </summary>
        </member>
        <member name="P:Zelda.Trading.Restocking.AfterWorldTimeRestockMethod.RestockStateStorage.IsTimerActive">
            <summary>
            Gets or sets a value indicating whether the timer
            was active while saving this DataStorage.
            </summary>
        </member>
        <member name="M:Zelda.Trading.Restocking.AfterWorldTimeRestockMethod.RestockStateStorage.SerializeStorage(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this IStorage.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Trading.Restocking.AfterWorldTimeRestockMethod.RestockStateStorage.DeserializeStorage(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this IStorage.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="T:Zelda.Trading.Restocking.Design.RestockMethodEditor">
            <summary>
            Implements an <see cref="T:Zelda.Design.BaseZeldaObjectCreationEditor"/> that provides a mechanism that
            allows the user to create instances of the <see cref="T:Zelda.Trading.Restocking.IRestockMethod"/> interface.
            </summary>
        </member>
        <member name="M:Zelda.Trading.Restocking.Design.RestockMethodEditor.GetTypes">
            <summary>
            Gets the types of the objects that can be created by this StatusEffectEditor.
            </summary>
            <returns>
            The list of types.
            </returns>
        </member>
        <member name="F:Zelda.Trading.Restocking.Design.RestockMethodEditor.types">
            <summary>
            The list of Types a RestockModeEditor can create.
            </summary>
        </member>
        <member name="T:Zelda.Trading.Restocking.Design.RestockerEditor">
            <summary>
            Implements an <see cref="T:Zelda.Design.BaseZeldaObjectCreationEditor"/> that provides a mechanism that
            allows the user to create instances of the <see cref="T:Zelda.Trading.Restocking.IRestocker"/> interface.
            </summary>
        </member>
        <member name="M:Zelda.Trading.Restocking.Design.RestockerEditor.GetTypes">
            <summary>
            Gets the types of the objects that can be created by this StatusEffectEditor.
            </summary>
            <returns>
            The list of types.
            </returns>
        </member>
        <member name="F:Zelda.Trading.Restocking.Design.RestockerEditor.types">
            <summary>
            The list of types the RestockerEditor can create.
            </summary>
        </member>
        <member name="T:Zelda.Trading.Restocking.Design.RestockRequirementEditor">
            <summary>
            Implements an <see cref="T:Zelda.Design.BaseZeldaObjectCreationEditor"/> that provides a mechanism that
            allows the user to create instances of the <see cref="T:Zelda.Trading.Restocking.IRestockRequirement"/> interface.
            </summary>
        </member>
        <member name="M:Zelda.Trading.Restocking.Design.RestockRequirementEditor.GetTypes">
            <summary>
            Gets the types of the objects that can be created by this StatusEffectEditor.
            </summary>
            <returns>
            The list of types.
            </returns>
        </member>
        <member name="F:Zelda.Trading.Restocking.Design.RestockRequirementEditor.types">
            <summary>
            The list of Types the RestockRequirementEditor can create.
            </summary>
        </member>
        <member name="T:Zelda.Trading.Restocking.IRestockMethod">
            <summary>
            Provides a mechanism that restocks a <see cref="T:Zelda.Trading.MerchantItem"/>
            after a certain event occurred.
            </summary>
        </member>
        <member name="M:Zelda.Trading.Restocking.IRestockMethod.Hook(Zelda.Trading.MerchantItem)">
            <summary>
            Hooks this IRestockMode up with the given MerchantItem.
            </summary>
            <param name="merchantItem">
            The IMerchant this IRestockMode should hook up with.
            </param>
        </member>
        <member name="M:Zelda.Trading.Restocking.IRestockMethod.Unhook">
            <summary>
            Unhooks this IRestockMode.
            </summary>
        </member>
        <member name="T:Zelda.Trading.Restocking.OnMerchantCreatedRestockMethod">
            <summary>
            Defines an <see cref="T:Zelda.Trading.Restocking.IRestockMethod"/> that restocks a
            <see cref="T:Zelda.Trading.MerchantItem"/> when the IMerchant that owns it
            has been added to a ZeldaScene.
            </summary>
        </member>
        <member name="M:Zelda.Trading.Restocking.OnMerchantCreatedRestockMethod.OnHooked(Zelda.Trading.MerchantItem)">
            <summary>
            Called when this RestockMethod has been hooked up with the given MerchantItem.
            </summary>
            <param name="merchantItem">
            The related MerchantItem.
            </param>
        </member>
        <member name="M:Zelda.Trading.Restocking.OnMerchantCreatedRestockMethod.OnUnhooked(Zelda.Trading.MerchantItem)">
            <summary>
            Called when this RestockMethod has been unhooked from the given MerchantItem.
            </summary>
            <param name="merchantItem">
            The related MerchantItem.
            </param>
        </member>
        <member name="M:Zelda.Trading.Restocking.OnMerchantCreatedRestockMethod.OnMerchantAddedToScene(System.Object,Zelda.ZeldaScene)">
            <summary>
            Called when the Merchant that owns the <see cref="T:Zelda.Trading.MerchantItem"/>
            this IRestockMethod got hooked onto got added to a ZeldaScene.
            </summary>
            <param name="sender">
            The sender of the event.
            </param>
            <param name="scene">
            The related ZeldaScene.
            </param>
        </member>
        <member name="T:Zelda.Trading.Restocking.RestockMethod">
            <summary>
            Defines a base implementation of the IRestockMethod interface.
            </summary>
        </member>
        <member name="P:Zelda.Trading.Restocking.RestockMethod.Restocker">
            <summary>
            Gets or sets the <see cref="T:Zelda.Trading.Restocking.IRestocker"/> this RestockMethod uses.
            </summary>
        </member>
        <member name="P:Zelda.Trading.Restocking.RestockMethod.RestockRequirement">
            <summary>
            Gets or sets the <see cref="T:Zelda.Trading.Restocking.IRestockRequirement"/> that must be fulfilled for this RestockMethod to
            restock the MerchantItem.
            </summary>
        </member>
        <member name="P:Zelda.Trading.Restocking.RestockMethod.MerchantItem">
            <summary>
            Gets the <see cref="P:Zelda.Trading.Restocking.RestockMethod.MerchantItem"/> this RestockMethod has been
            hooked up with.
            </summary>
        </member>
        <member name="M:Zelda.Trading.Restocking.RestockMethod.Hook(Zelda.Trading.MerchantItem)">
            <summary>
            Hooks this IRestockMode up with the given MerchantItem.
            </summary>
            <param name="merchantItem">
            The IMerchant this IRestockMode should hook up with.
            </param>
        </member>
        <member name="M:Zelda.Trading.Restocking.RestockMethod.Unhook">
            <summary>
            Unhooks this IRestockMode.
            </summary>
        </member>
        <member name="M:Zelda.Trading.Restocking.RestockMethod.OnHooked(Zelda.Trading.MerchantItem)">
            <summary>
            Called when this RestockMethod has been hooked up with the given MerchantItem.
            </summary>
            <param name="merchantItem">
            The related MerchantItem.
            </param>
        </member>
        <member name="M:Zelda.Trading.Restocking.RestockMethod.OnUnhooked(Zelda.Trading.MerchantItem)">
            <summary>
            Called when this RestockMethod has been unhooked from the given MerchantItem.
            </summary>
            <param name="merchantItem">
            The related MerchantItem.
            </param>
        </member>
        <member name="M:Zelda.Trading.Restocking.RestockMethod.Restock">
            <summary>
            Restocks the MerchantItem this RestockMethod has been hooked up with;
            using the set <see cref="P:Zelda.Trading.Restocking.RestockMethod.Restocker"/>.
            </summary>
        </member>
        <member name="M:Zelda.Trading.Restocking.RestockMethod.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Trading.Restocking.RestockMethod.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Trading.Restocking.RestockMethod.VerifyHookedUp">
            <summary>
            Verifies that this RestockMethod is currently hooked up.
            </summary>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="F:Zelda.Trading.Restocking.RestockMethod.merchantItem">
            <summary>
            Identifies the MerchantItem this RestockMethod is currently hooked on.
            </summary>
        </member>
        <member name="T:Zelda.Trading.Restocking.ByOneButLimitToInitialRestocker">
            <summary>
            Implements an <see cref="T:Zelda.Trading.Restocking.IRestocker"/> that increases
            the stock count of a MerchantItem by 1, to a maximum
            of the InitialStockCount.
            </summary>
        </member>
        <member name="M:Zelda.Trading.Restocking.ByOneButLimitToInitialRestocker.Restock(Zelda.Trading.MerchantItem)">
            <summary>
            Restocks the given MerchantItem.
            </summary>
            <param name="item">
            The MerchantItem to restock.
            </param>
        </member>
        <member name="M:Zelda.Trading.Restocking.ByOneButLimitToInitialRestocker.Zelda#Saving#ISaveable#Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Trading.Restocking.ByOneButLimitToInitialRestocker.Zelda#Saving#ISaveable#Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="T:Zelda.Trading.Restocking.ByOneRestocker">
            <summary>
            Implements an <see cref="T:Zelda.Trading.Restocking.IRestocker"/> that increases
            the stock count of a MerchantItem by 1.
            </summary>
        </member>
        <member name="M:Zelda.Trading.Restocking.ByOneRestocker.Restock(Zelda.Trading.MerchantItem)">
            <summary>
            Restocks the given MerchantItem.
            </summary>
            <param name="item">
            The MerchantItem to restock.
            </param>
        </member>
        <member name="M:Zelda.Trading.Restocking.ByOneRestocker.Zelda#Saving#ISaveable#Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Trading.Restocking.ByOneRestocker.Zelda#Saving#ISaveable#Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="T:Zelda.Trading.Restocking.IRestocker">
            <summary>
            Provides a merchism to restock a <see cref="T:Zelda.Trading.MerchantItem"/>.
            </summary>
        </member>
        <member name="M:Zelda.Trading.Restocking.IRestocker.Restock(Zelda.Trading.MerchantItem)">
            <summary>
            Restocks the given MerchantItem.
            </summary>
            <param name="item">
            The MerchantItem to restock.
            </param>
        </member>
        <member name="T:Zelda.Trading.Restocking.ToInitialRestocker">
            <summary>
            Implements an <see cref="T:Zelda.Trading.Restocking.IRestocker"/> that sets
            the restock count of the MerchantItem to the initial stock count.
            </summary>
        </member>
        <member name="M:Zelda.Trading.Restocking.ToInitialRestocker.Restock(Zelda.Trading.MerchantItem)">
            <summary>
            Restocks the given MerchantItem.
            </summary>
            <param name="item">
            The MerchantItem to restock.
            </param>
        </member>
        <member name="M:Zelda.Trading.Restocking.ToInitialRestocker.Zelda#Saving#ISaveable#Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Trading.Restocking.ToInitialRestocker.Zelda#Saving#ISaveable#Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="T:Zelda.Trading.Restocking.ToSpecficRestocker">
            <summary>
            Implements an <see cref="T:Zelda.Trading.Restocking.IRestocker"/> that sets
            the restock count of the MerchantItem to the initial stock count.s
            </summary>
        </member>
        <member name="P:Zelda.Trading.Restocking.ToSpecficRestocker.Stock">
            <summary>
            Gets or sets the stock will be restocked to.
            </summary>
        </member>
        <member name="M:Zelda.Trading.Restocking.ToSpecficRestocker.Restock(Zelda.Trading.MerchantItem)">
            <summary>
            Restocks the given MerchantItem.
            </summary>
            <param name="item">
            The MerchantItem to restock.
            </param>
        </member>
        <member name="M:Zelda.Trading.Restocking.ToSpecficRestocker.Zelda#Saving#ISaveable#Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Trading.Restocking.ToSpecficRestocker.Zelda#Saving#ISaveable#Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Trading.Restocking.ToSpecficRestocker.stock">
            <summary>
            Represents the storage field of the Stock property.
            </summary>
        </member>
        <member name="T:Zelda.Trading.Restocking.IRestockRequirement">
            <summary>
            Provides a mechanism for receiving a value that indicates whether a MerchantItem
            is allowed to be restocked.
            </summary>
        </member>
        <member name="M:Zelda.Trading.Restocking.IRestockRequirement.IsFulfilled(Zelda.Trading.MerchantItem)">
            <summary>
            Gets a value indicating whether this IRestockRequirement has been fulfilled.
            </summary>
            <param name="item">
            The MerchantItem that is about to be restock.
            </param>
            <returns>
            true if the restocking process is allowed to continue;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Trading.Restocking.SharedChestHasSpecificTierRestockRequirement">
            <summary>
            Implements an <see cref="T:Zelda.Trading.Restocking.IRestockRequirement"/> that requires the <see cref="T:Zelda.Items.SharedChest"/>
            to have a specific <see cref="T:Zelda.Items.SharedChestTier"/>.
            </summary>
        </member>
        <member name="P:Zelda.Trading.Restocking.SharedChestHasSpecificTierRestockRequirement.ExpectedTier">
            <summary>
            Gets or sets the <see cref="T:Zelda.Items.SharedChestTier"/> the <see cref="T:Zelda.Items.SharedChest"/> is expected to have
            for the MerchantItem to be restocked.
            </summary>
        </member>
        <member name="M:Zelda.Trading.Restocking.SharedChestHasSpecificTierRestockRequirement.Setup(Zelda.IZeldaServiceProvider)">
            <summary>
            Setups this SharedChestHasSpecificTierRestockRequirement.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Trading.Restocking.SharedChestHasSpecificTierRestockRequirement.IsFulfilled(Zelda.Trading.MerchantItem)">
            <summary>
            Gets a value indicating whether this IRestockRequirement has been fulfilled.
            </summary>
            <param name="item">
            The MerchantItem that is about to be restock.
            </param>
            <returns>
            true if the restocking process is allowed to continue;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Trading.Restocking.SharedChestHasSpecificTierRestockRequirement.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Trading.Restocking.SharedChestHasSpecificTierRestockRequirement.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Trading.Restocking.SharedChestHasSpecificTierRestockRequirement.chestProvider">
            <summary>
            Provides access to the <see cref="T:Zelda.Items.SharedChest"/>.
            </summary>
        </member>
        <member name="T:Zelda.Trading.UI.IMerchantWindowService">
            <summary>
            Provides a mechanism that allows the player to
            interact with the offerings of an IMerchant.
            </summary>
        </member>
        <member name="M:Zelda.Trading.UI.IMerchantWindowService.Show(Zelda.Trading.IMerchant,Zelda.Entities.PlayerEntity)">
            <summary>
            Shows the UIElement responsible for allowing the
            player to interact with the offerings of the given IMerchant.
            </summary>
            <param name="merchant">
            The <see cref="T:Zelda.Trading.IMerchant"/> whose offerings should be presented
            to the buyer.
            </param>
            <param name="buyer">
            The entity that wants to buy from the merchant.
            </param>
            <returns>
            true if the window has been opened;
            otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.UI.Dialog">
            <summary>
            Represents a simple one-way dialog.
            </summary>
        </member>
        <member name="E:Zelda.UI.Dialog.Ended">
            <summary>
            Fired when this dialog has ended.
            </summary>
        </member>
        <member name="E:Zelda.UI.Dialog.Canceled">
            <summary>
            Fired when this dialog has been canceled.
            </summary>
        </member>
        <member name="P:Zelda.UI.Dialog.Text">
            <summary>
            Gets the <see cref="P:Zelda.UI.Dialog.Text"/> storage object
            that manages the text displayed in this <see cref="T:Zelda.UI.Dialog"/>.
            </summary>
        </member>
        <member name="M:Zelda.UI.Dialog.#ctor">
            <summary>
            Initializes a new instance of the Dialog class.
            </summary>
        </member>
        <member name="M:Zelda.UI.Dialog.Setup(Zelda.IZeldaServiceProvider)">
            <summary>
            Setups this Dialog.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.UI.Dialog.Show(System.String)">
            <summary>
            Enables this <see cref="T:Zelda.UI.Dialog"/> to show the given <paramref name="text"/>.
            </summary>
            <param name="text">
            The text to show.
            </param>
        </member>
        <member name="M:Zelda.UI.Dialog.DisableDialog">
            <summary>
            Disables this <see cref="T:Zelda.UI.Dialog"/>.
            </summary>
        </member>
        <member name="M:Zelda.UI.Dialog.HandleKeyInput(Microsoft.Xna.Framework.Input.KeyboardState@,Microsoft.Xna.Framework.Input.KeyboardState@)">
            <summary>
            Handles keyboard input related to this Dialog UIElement.
            </summary>
            <param name="keyState">The current state of the keyboard.</param>
            <param name="oldKeyState">The state of the keyboard one frame ago.</param>
        </member>
        <member name="M:Zelda.UI.Dialog.TriggerNextDialogState">
            <summary>
            Handles the case of the uses pressing the Space key 
            while this Dialog element is focused.
            </summary>
        </member>
        <member name="M:Zelda.UI.Dialog.HandleInputEscapeKey">
            <summary>
            Handles the case of the uses pressing the Escape key 
            while this Dialog element is focused.
            </summary>
        </member>
        <member name="M:Zelda.UI.Dialog.PlaySample(System.String)">
            <summary>
            Helper method that plays the audio-sample with the given name.
            </summary>
            <param name="name">
            The name of the sample to play.
            </param>
        </member>
        <member name="M:Zelda.UI.Dialog.OnAdded(Atom.Xna.UI.UserInterface)">
            <summary>
            Called when this Dialog UIElement has been added to the given <see cref="T:Atom.Xna.UI.UserInterface"/>.
            </summary>
            <param name="userInterface">
            The related UserInterface.
            </param>
        </member>
        <member name="M:Zelda.UI.Dialog.OnRemoved(Atom.Xna.UI.UserInterface)">
            <summary>
            Called when this Dialog UIElement has been removed from the given <see cref="T:Atom.Xna.UI.UserInterface"/>.
            </summary>
            <param name="userInterface">
            The related UserInterface.
            </param>
        </member>
        <member name="M:Zelda.UI.Dialog.OnDraw(Atom.Xna.ISpriteDrawContext)">
            <summary>
            Called when this Dialog is drawing itself.
            </summary>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.Dialog.OnUpdate(Atom.IUpdateContext)">
            <summary>
            Called when this Dialog is updating itself.
            </summary>
            <param name="updateContext">
            The current IUpdateContext.
            </param>
        </member>
        <member name="F:Zelda.UI.Dialog.textField">
            <summary>
            The TextField that manages all rendering logic.
            </summary>
        </member>
        <member name="F:Zelda.UI.Dialog.serviceProvider">
            <summary>
            Provides fast access to game-related services.
            </summary>
        </member>
        <member name="T:Zelda.UI.DialogTextField">
            <summary>
            Defines the <see cref="T:Atom.Xna.UI.Controls.TextField"/> UI control
            that is used to display a simple one-way dialog.
            </summary>
        </member>
        <member name="P:Zelda.UI.DialogTextField.SpriteReachedBlockEnd">
            <summary>
            Gets or sets the sprite shown when the <see cref="P:Atom.Xna.UI.Controls.TextField.Text"/>
            has reached the end of the current block.
            </summary>
        </member>
        <member name="P:Zelda.UI.DialogTextField.SpriteReachedEnd">
            <summary>
            Gets or sets the sprite shown when the <see cref="P:Atom.Xna.UI.Controls.TextField.Text"/>
            has reached the end.
            </summary>
        </member>
        <member name="M:Zelda.UI.DialogTextField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.UI.DialogTextField"/> class.
            </summary>
        </member>
        <member name="M:Zelda.UI.DialogTextField.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.UI.DialogTextField"/> class.
            </summary>
            <param name="name">The name of the new <see cref="T:Zelda.UI.DialogTextField"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="name"/> is null.
            </exception>
        </member>
        <member name="M:Zelda.UI.DialogTextField.OnDraw(Atom.Xna.ISpriteDrawContext)">
            <summary>
            Called when this DialogTextField is drawing itself.
            </summary>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.DialogTextField.DrawTextReachedEnd(Atom.Xna.ISpriteDrawContext)">
            <summary>
            Draws an indicator that the text-field has reached the end.
            </summary>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.DialogTextField.DrawReachedEndOfBlock(Atom.Xna.ISpriteDrawContext)">
            <summary>
            Draws an indicator that the text-field has reached the end of a text block.
            </summary>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="T:Zelda.UI.FullBlendInOutUIElement">
            <summary>
            Defines an UIElement that can be used to blend the game in/out
            using a black overlay.
            This class can't be inherited.
            </summary>
        </member>
        <member name="M:Zelda.UI.FullBlendInOutUIElement.#ctor">
            <summary>
            Initializes a new instance of the FullBlendInOutUIElement class.
            </summary>
        </member>
        <member name="M:Zelda.UI.FullBlendInOutUIElement.Setup(Zelda.IZeldaServiceProvider)">
            <summary>
            Setups this Dialog.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.UI.FullBlendInOutUIElement.StartBlending(System.Single,System.Boolean,System.Boolean)">
            <summary>
            Tells this FullBlendInOutUIElement to start a new fullscreen blending operation.
            </summary>
            <param name="time">
            The time it should take to blend the screen in/out.
            </param>
            <param name="isBlendingIn">
            States whether this FullBlendInOutUIElement is blending in or out.
            </param>
            <param name="disableOnEnd">
            States whether this FullBlendInOutUIElement automatically disables itself
            when the blending effect has ended.
            </param>
        </member>
        <member name="M:Zelda.UI.FullBlendInOutUIElement.StartBlending(System.Single,System.Boolean,System.Boolean,System.EventHandler)">
            <summary>
            Tells this FullBlendInOutUIElement to start a new fullscreen blending operation.
            </summary>
            <param name="time">
            The time it should take to blend the screen in/out.
            </param>
            <param name="isBlendingIn">
            States whether this FullBlendInOutUIElement is blending in or out.
            </param>
            <param name="disableOnEnd">
            States whether this FullBlendInOutUIElement automatically disables itself
            when the blending effect has ended.
            </param>
            <param name="endedOrReplaced">
            The event handler that gets invoked when the blending operation has been completed;
            or replaced by another blending operation.
            </param>
        </member>
        <member name="M:Zelda.UI.FullBlendInOutUIElement.Reset">
            <summary>
            Resets this FullBlendInOutUIElement.
            </summary>
        </member>
        <member name="M:Zelda.UI.FullBlendInOutUIElement.OnDraw(Atom.Xna.ISpriteDrawContext)">
            <summary>
            Called when this FullBlendInOutUIElement is drawing itself.
            </summary>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.FullBlendInOutUIElement.GetAlpha">
            <summary>
            Gets the alpha value used when drawing this FullBlendInOutUIElement.
            </summary>
            <returns>
            A value between 0 and 255.
            </returns>
        </member>
        <member name="M:Zelda.UI.FullBlendInOutUIElement.GetRatio">
            <summary>
            Gets the ratio between that specifies the
            current position in the blending operation.
            </summary>
            <returns>
            A value between 0 and 1.
            </returns>
        </member>
        <member name="M:Zelda.UI.FullBlendInOutUIElement.OnUpdate(Atom.IUpdateContext)">
            <summary>
            Called when this FullBlendInOutUIElement is updating itself.
            </summary>
            <param name="updateContext">
            The current IUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.UI.FullBlendInOutUIElement.OnEnded">
            <summary>
            Gets called when the blending operation has completed.
            </summary>
        </member>
        <member name="F:Zelda.UI.FullBlendInOutUIElement.isBlendingIn">
            <summary>
            States whether this FullBlendInOutUIElement is blending in or out.
            </summary>
        </member>
        <member name="F:Zelda.UI.FullBlendInOutUIElement.disableOnEnd">
            <summary>
            States whether this FullBlendInOutUIElement automatically disables itself
            when the blending effect has ended.
            </summary>
        </member>
        <member name="F:Zelda.UI.FullBlendInOutUIElement.time">
            <summary>
            The time (in seconds) left until the blending effect ends.
            </summary>
        </member>
        <member name="F:Zelda.UI.FullBlendInOutUIElement.timeEnd">
            <summary>
            The time (in seconds) the total blending effect takes to execute.
            </summary>
        </member>
        <member name="F:Zelda.UI.FullBlendInOutUIElement.isActive">
            <summary>
            States whether a blending operation is currently active.
            </summary>
        </member>
        <member name="F:Zelda.UI.FullBlendInOutUIElement.endedOrReplaced">
            <summary>
            Raised when the blending operation has ended or been replaced.
            </summary>
        </member>
        <member name="T:Zelda.UI.IInventoryService">
            <summary>
            Provides a mechanism for opening/closing the UI for the various Inventory implementations.
            </summary>
        </member>
        <member name="M:Zelda.UI.IInventoryService.Open``1">
            <summary>
            Opens the inventory of the specified type.
            </summary>
            <typeparam name="TInventory">
            The exact type of the Inventory to open.
            </typeparam>
        </member>
        <member name="M:Zelda.UI.IInventoryService.Close``1">
            <summary>
            Closes the inventory of the specified type.
            </summary>
            <typeparam name="TInventory">
            The exact type of the Inventory to open.
            </typeparam>
        </member>
        <member name="T:Zelda.UI.IItemInfoVisualizer">
            <summary>
            Provides a mechanism for visualizing the information the player needs to know about an Item.
            </summary>
        </member>
        <member name="M:Zelda.UI.IItemInfoVisualizer.Draw(Zelda.UI.ItemInfoVisualizationDrawContext)">
            <summary>
            Draws the specified ItemInstance at the given position and depth.
            </summary>
            <param name="context">
            Encapsulates all draw and configuration data required for this operation.
            </param>
        </member>
        <member name="M:Zelda.UI.IItemInfoVisualizer.ResetCache">
            <summary>
            Resets the internaly cached visualizations of items.
            </summary>
        </member>
        <member name="T:Zelda.UI.Items.ItemInfoDisplay">
            <summary>
            Enables the visualization of any <see cref="P:Zelda.UI.Items.ItemInfoDisplay.ItemInstance"/>.
            This class can't be inherited.
            </summary>
        </member>
        <member name="P:Zelda.UI.Items.ItemInfoDisplay.ItemInstance">
            <summary>
            Gets or sets the <see cref="P:Zelda.UI.Items.ItemInfoDisplay.ItemInstance"/> whose ItemInfo gets visualized by this ItemInfoDisplay.
            </summary>
        </member>
        <member name="P:Zelda.UI.Items.ItemInfoDisplay.Player">
            <summary>
            Gets or sets the <see cref="T:Zelda.Entities.PlayerEntity"/> that wants to see the item info.
            </summary>
        </member>
        <member name="P:Zelda.UI.Items.ItemInfoDisplay.Alpha">
            <summary>
            Gets the alpha color of the ItemInfoDisplay.
            </summary>
        </member>
        <member name="M:Zelda.UI.Items.ItemInfoDisplay.#ctor(Zelda.UI.IItemInfoVisualizer)">
            <summary>
            Initializes a new instance of the ItemInfoDisplay class.
            </summary>
            <param name="itemInfoVisualizer">
            The <see cref="T:Zelda.UI.IItemInfoVisualizer"/> that provides a mechanism to draw
            the Item information.
            </param>
        </member>
        <member name="M:Zelda.UI.Items.ItemInfoDisplay.OnDraw(Atom.Xna.ISpriteDrawContext)">
            <summary>
            Called when this ItemInfoDisplay is drawing itself.
            </summary>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.Items.ItemInfoDisplay.OnUpdate(Atom.IUpdateContext)">
            <summary>
            Called when this ItemInfoDisplay is updating itself.
            </summary>
            <param name="updateContext">
            The current IUpdateContext.
            </param>
        </member>
        <member name="F:Zelda.UI.Items.ItemInfoDisplay.visualizer">
            <summary>
            Provides a mechanism that allows the drawing of the exact information 
            that descripes what an Item does.
            </summary>
        </member>
        <member name="P:Zelda.UI.ItemInfoVisualizationDrawContext.PositionX">
            <summary>
            The position of the upper-left corner on the x-axis.
            Might be modified to make the visualization to fit on the screen.
            </summary>
        </member>
        <member name="P:Zelda.UI.ItemInfoVisualizationDrawContext.PositionY">
            <summary>
            The position of the upper-left corner on the y-axis.
            Might be modified to make the visualization to fit on the screen.
            </summary>
        </member>
        <member name="P:Zelda.UI.ItemInfoVisualizationDrawContext.Depth">
            <summary>
            The depth to start drawing at.
            </summary>
        </member>
        <member name="P:Zelda.UI.ItemInfoVisualizationDrawContext.Alpha">
            <summary>
            The alpha color. 1=fully visible.
            </summary>
        </member>
        <member name="P:Zelda.UI.ItemInfoVisualizationDrawContext.ItemInstance">
            <summary>
            The instance of the Item to draw.
            </summary>
        </member>
        <member name="P:Zelda.UI.ItemInfoVisualizationDrawContext.Statable">
            <summary>
            The ExtendedStatable component of the entity that owns the given itemInstance.
            </summary>
        </member>
        <member name="P:Zelda.UI.ItemInfoVisualizationDrawContext.DrawContext">
            <summary>
            The current ZeldaDrawContext.
            </summary>
        </member>
        <member name="T:Zelda.UI.TextBlockSplitter">
            <summary>
            Defines a <see cref="T:Atom.Xna.UI.ITextBlockSplitter"/> that splits text 
            so that it stay inside a specific area.
            </summary>
        </member>
        <member name="M:Zelda.UI.TextBlockSplitter.#ctor(Atom.Xna.Fonts.IFont,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.UI.TextBlockSplitter"/> class.
            </summary>
            <param name="font">The font which is later used to render the text.</param>
            <param name="maximumAllowedWidth">
            The maximum allowed width one text block row is allowed to have.
            </param>
        </member>
        <member name="M:Zelda.UI.TextBlockSplitter.Split(System.String)">
            <summary>
            Splits the specified text string.
            </summary>
            <param name="text">
            The text to split. Can be null.
            </param>
            <returns>
            The split text block; or null.
            </returns>
        </member>
        <member name="M:Zelda.UI.TextBlockSplitter.SplitIntoLines(System.String)">
            <summary>
            Splits the specified text string into lines.
            </summary>
            <param name="text">
            The text to split. Is not null.
            </param>
            <returns>
            The list of lines.
            </returns>
        </member>
        <member name="F:Zelda.UI.TextBlockSplitter.maximumAllowedWidth">
            <summary>
            The maximum allowed width one text block row is allowed to have.
            </summary>
        </member>
        <member name="F:Zelda.UI.TextBlockSplitter.font">
            <summary>
            The font to use to find out how long a single word is.
            </summary>
        </member>
        <member name="F:Zelda.UI.TextBlockSplitter.delimeters">
            <summary>
            Additional delimeters which can be used to split the text further.
            </summary>
        </member>
        <member name="T:Zelda.UI.UIColors">
            <summary>
            Static class that contains shared color constants used in the UserInterface.
            </summary>
        </member>
        <member name="F:Zelda.UI.UIColors.PositiveDark">
            <summary>
            The first color used for positive 'events' and UI elements.
            </summary>
        </member>
        <member name="F:Zelda.UI.UIColors.PositiveLight">
            <summary>
            The secondary color used for positive 'events' and UI elements.
            </summary>
        </member>
        <member name="F:Zelda.UI.UIColors.PositiveBright">
            <summary>
            The secondary color used for positive 'events' and UI elements.
            </summary>
        </member>
        <member name="F:Zelda.UI.UIColors.NegativeDark">
            <summary>
            The first color used for negative 'events' and UI elements.
            </summary>
        </member>
        <member name="F:Zelda.UI.UIColors.NegativeLight">
            <summary>
            The secondary color used for negative 'events' and UI elements.
            </summary>
        </member>
        <member name="F:Zelda.UI.UIColors.NegativeBright">
            <summary>
            The secondary color used for negative 'events' and UI elements.
            </summary>
        </member>
        <member name="F:Zelda.UI.UIColors.LightWindowBackground">
            <summary>
            Specifies the color of the rectangle that is drawn in the background of
            an IngameWindow.
            </summary>
        </member>
        <member name="F:Zelda.UI.UIColors.WindowTitleBackground">
            <summary>
            Specifies the color of the rectangle that is drawn in the background of
            title of an IngameWindow.
            </summary>
        </member>
        <member name="F:Zelda.UI.UIColors.DarkWindowBackground">
            <summary>
            Specifies the color of the rectangle that is drawn in the background of
            an IngameWindow.
            </summary>
        </member>
        <member name="F:Zelda.UI.UIColors.Cooldown">
            <summary>
            Specifies the color used to visualize a Cooldown.
            </summary>
        </member>
        <member name="F:Zelda.UI.UIColors.RequirementNotFulfilled">
            <summary>
            Specifies the color used to tell that a requirement is not fulfilled.
            </summary>
        </member>
        <member name="F:Zelda.UI.UIColors.MarkedButton">
            <summary>
            Specifies the color used by temp. highlighted buttons.
            </summary>
        </member>
        <member name="F:Zelda.UI.UIColors.DefaultUpperRowButton">
            <summary>
            Specifies the color used by the buttons in the upper title bar in ingame windows.
            </summary>
        </member>
        <member name="M:Zelda.UI.UIColors.Get(Zelda.Items.ItemQuality)">
            <summary>
            Gets the color of the given <see cref="T:Zelda.Items.ItemQuality"/>.
            </summary>
            <param name="itemQuality">
            The enumeration to get the associated Color for.
            </param>
            <returns>
            The associated Color.
            </returns>
        </member>
        <member name="T:Zelda.UI.UIFonts">
            <summary>
            Static class that allows access to the IFont assets used in the UserInterface.
            </summary>
        </member>
        <member name="P:Zelda.UI.UIFonts.Tahoma7">
            <summary>
            Gets the "Tahoma, size 7" font asset.
            </summary>
        </member>
        <member name="P:Zelda.UI.UIFonts.Tahoma9">
            <summary>
            Gets the "Tahoma, size 9" font asset.
            </summary>
        </member>
        <member name="P:Zelda.UI.UIFonts.Tahoma10">
            <summary>
            Gets the "Tahoma, size 10" font asset.
            </summary>
        </member>
        <member name="P:Zelda.UI.UIFonts.Tahoma14">
            <summary>
            Gets the "Tahoma, size 14" font asset.
            </summary>
        </member>
        <member name="P:Zelda.UI.UIFonts.TahomaBold8">
            <summary>
            Gets the "bold Tahoma, size 8" font asset.
            </summary>
        </member>
        <member name="P:Zelda.UI.UIFonts.TahomaBold10">
            <summary>
            Gets the "bold Tahoma, size 10" font asset.
            </summary>
        </member>
        <member name="P:Zelda.UI.UIFonts.TahomaBold11">
            <summary>
            Gets the "bold Tahoma, size 11" font asset.
            </summary>
        </member>
        <member name="P:Zelda.UI.UIFonts.VerdanaBold11">
            <summary>
            Gets the "bold Verdana, size 11" font asset.
            </summary>
        </member>
        <member name="M:Zelda.UI.UIFonts.Load(Atom.Xna.Fonts.IFontLoader)">
            <summary>
            Loads the font assets that are used in the UI.
            </summary>
            <param name="fontLoader">
            Provides a mechanism for loading IFont assets.
            </param>
        </member>
        <member name="T:Zelda.UI.ZeldaScrollBar">
            <summary>
            Represents a <see cref="T:Atom.Xna.UI.Controls.ScrollBar"/> that is used in the Zelda game..
            </summary>
        </member>
        <member name="M:Zelda.UI.ZeldaScrollBar.#ctor">
            <summary>
            Initializes a new instance of the ZeldaScrollBar class.
            </summary>
        </member>
        <member name="M:Zelda.UI.ZeldaScrollBar.OnDraw(Atom.Xna.ISpriteDrawContext)">
            <summary>
            Called when this ZeldaScrollBar is drawing itself.
            </summary>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.ZeldaScrollBar.DrawSlider(Zelda.ZeldaDrawContext)">
            <summary>
            Draws the slider area of this ZeldaScrollBar.
            </summary>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="M:Zelda.UI.ZeldaScrollBar.DrawThumb(Zelda.ZeldaDrawContext)">
            <summary>
            Draws the thumb of this ZeldaScrollBar.
            </summary>
            <param name="drawContext">
            The current ISpriteDrawContext.
            </param>
        </member>
        <member name="T:Zelda.UI.ZeldaUIElement">
            <summary>
            Represents an <see cref="T:Atom.Xna.UI.UIElement"/> that is part of a <see cref="T:Zelda.UI.ZeldaUserInterface"/>.
            </summary>
            <remarks>
            There is no ground-breaking difference in inheriting
            from <see cref="T:Atom.Xna.UI.UIElement"/> or <see cref="T:Zelda.UI.ZeldaUIElement"/>.
            Both will work just fine.
            </remarks>
        </member>
        <member name="P:Zelda.UI.ZeldaUIElement.Owner">
            <summary>
            Gets the <see cref="T:Zelda.UI.ZeldaUserInterface"/> that owns this <see cref="T:Zelda.UI.ZeldaUIElement"/>.
            </summary>
        </member>
        <member name="M:Zelda.UI.ZeldaUIElement.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.UI.ZeldaUIElement"/> class.
            </summary>
            <param name="name">
            The name of the new <see cref="T:Zelda.UI.ZeldaUIElement"/>.
            </param> 
        </member>
        <member name="M:Zelda.UI.ZeldaUIElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.UI.ZeldaUIElement"/> class.
            </summary>
        </member>
        <member name="T:Zelda.UI.ZeldaUserInterface">
            <summary>
            Represents the <see cref="T:Atom.Xna.UI.UserInterface"/> used by the Zelda game.
            This class can't be inherited.
            </summary>
        </member>
        <member name="P:Zelda.UI.ZeldaUserInterface.Dialog">
            <summary>
            Gets the <see cref="P:Zelda.UI.ZeldaUserInterface.Dialog"/> object used by this <see cref="T:Zelda.UI.ZeldaUserInterface"/>.
            </summary>
            <remarks>
            Usually there is only one Dialog active at a time.
            </remarks>
        </member>
        <member name="P:Zelda.UI.ZeldaUserInterface.BlendElement">
            <summary>
            Gets the <see cref="T:Zelda.UI.FullBlendInOutUIElement"/> object used by this <see cref="T:Zelda.UI.ZeldaUserInterface"/>.
            </summary>
        </member>
        <member name="P:Zelda.UI.ZeldaUserInterface.Scene">
            <summary>
            Gets or sets the <see cref="T:Zelda.ZeldaScene"/> this ZeldaUserInterface is currently related to.
            </summary>
        </member>
        <member name="P:Zelda.UI.ZeldaUserInterface.ScalingFactor">
            <summary>
            Gets or sets the scaling factor applied to the
            mouse position.
            </summary>
        </member>
        <member name="P:Zelda.UI.ZeldaUserInterface.ViewOffset">
            <summary>
            Gets or sets the number of the pixels on the x and y-axis
            for which the output image is moved before rendering
            it to the screen.
            </summary>
        </member>
        <member name="M:Zelda.UI.ZeldaUserInterface.#cctor">
            <summary>
            Initializes static members of the ZeldaUserInterface class.
            </summary>
        </member>
        <member name="M:Zelda.UI.ZeldaUserInterface.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ZeldaUserInterface class.
            </summary>
            <param name="providesDialog">
            States whether the new ZeldaUserInterface provides access to a <see cref="P:Zelda.UI.ZeldaUserInterface.Dialog"/>.
            </param>
        </member>
        <member name="M:Zelda.UI.ZeldaUserInterface.Setup(Zelda.IZeldaServiceProvider)">
            <summary>
            Setups this <see cref="T:Zelda.UI.ZeldaUserInterface"/>.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.UI.ZeldaUserInterface.GetService(System.Type)">
            <summary>
            Tries to get the service of the specified type.
            </summary>
            <param name="serviceType">
            The type of service object to get.
            </param>
            <returns>
            The requested service object; or null.
            </returns>
        </member>
        <member name="M:Zelda.UI.ZeldaUserInterface.GetCurrentMouseState">
            <summary>
            Overwritten to take into account to current ScalingFactor applied
            when drawing the actual image of the game.
            </summary>
            <returns>
            The current state of the Mouse that will get cached.
            </returns>
        </member>
        <member name="M:Zelda.UI.ZeldaUserInterface.ShouldHandleInput">
            <summary>
            Gets a value indicating whether this UserInterface should
            be currentl handle input from the user. Can be overwritten to customize.
            </summary>
            <returns>
            true if the game has focus;
            otherwise false.
            </returns>
        </member>
        <member name="F:Zelda.UI.ZeldaUserInterface.game">
            <summary>
            Identifies the xna game object that holds information about whether
            the game is currently focused.
            </summary>
        </member>
        <member name="F:Zelda.UI.ZeldaUserInterface.dialog">
            <summary>
            The <see cref="P:Zelda.UI.ZeldaUserInterface.Dialog"/> object used by this <see cref="T:Zelda.UI.ZeldaUserInterface"/>.
            </summary>
        </member>
        <member name="F:Zelda.UI.ZeldaUserInterface.blendElement">
            <summary>
            The <see cref="T:Zelda.UI.FullBlendInOutUIElement"/> object used by this <see cref="T:Zelda.UI.ZeldaUserInterface"/>.
            </summary>
        </member>
        <member name="T:Zelda.Waypoints.Design.ZeldaPathEditor">
            <summary>
            Implements an <see cref="T:Atom.Design.BaseItemSelectionEditor`1"/> that allows the user
            to selects a ZeldaPath of the current ZeldaScene.
            </summary>
        </member>
        <member name="M:Zelda.Waypoints.Design.ZeldaPathEditor.GetSelectableItems">
            <summary>
            Gets the ZeldaPaths of the current ZeldaScene.
            </summary>
            <returns>
            The ZeldaPaths the user is allowed to select.
            </returns>
        </member>
        <member name="T:Zelda.Waypoints.WaypointPathFollower">
            <summary>
            
            </summary>
        </member>
        <member name="E:Zelda.Waypoints.WaypointPathFollower.WaypointReached">
            <summary>
            Raised when the entity that currently uses this WaypointPathFollower
            has reached a Waypoint.
            </summary>
        </member>
        <member name="E:Zelda.Waypoints.WaypointPathFollower.EndReached">
            <summary>
            Raised when the entity has reached the end of the Path.
            </summary>
        </member>
        <member name="P:Zelda.Waypoints.WaypointPathFollower.IsLooping">
            <summary>
            Gets or sets a value indicating whether when the entity has reached the end of the
            path it should start over at the first Waypoint.
            </summary>
            <remarks>
            This works only on circular paths.
            </remarks>
        </member>
        <member name="P:Zelda.Waypoints.WaypointPathFollower.IsActive">
            <summary>
            Gets or sets a value indicating whether the entity is actively following the path.
            </summary>
        </member>
        <member name="M:Zelda.Waypoints.WaypointPathFollower.#ctor">
            <summary>
            Initializes a new instance of the WaypointPathFollower class.
            </summary>
        </member>
        <member name="M:Zelda.Waypoints.WaypointPathFollower.Setup(Zelda.Entities.IMoveableEntity,Zelda.Waypoints.ZeldaPath)">
            <summary> 
            Setups this <see cref="T:Zelda.Waypoints.WaypointPathFollower"/> for a new following task.
            </summary>
            <param name="entity">
            The IMoveableEntity that should follow the path.
            </param>
            <param name="path">
            The path to follow.
            </param>
        </member>
        <member name="M:Zelda.Waypoints.WaypointPathFollower.SetTilePath(Atom.Scene.Tiles.TilePath)">
            <summary>
            
            </summary>
            <param name="tilePath"></param>
        </member>
        <member name="M:Zelda.Waypoints.WaypointPathFollower.FindPathFromCurrentLocationTo(Zelda.Waypoints.ZeldaWaypoint)">
            <summary>
            Attempts to find a path from the current location of the entity to the specified ZeldaWaypoint.
            </summary>
            <param name="waypoint">
            The Waypoint to move towards.
            </param>
            <returns>
            The TilePath that has been found.
            </returns>
        </member>
        <member name="M:Zelda.Waypoints.WaypointPathFollower.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this WaypointPathFollower.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Waypoints.WaypointPathFollower.OnTilePathEndReached">
            <summary>
            
            </summary>
        </member>
        <member name="M:Zelda.Waypoints.WaypointPathFollower.SelectNextWaypoint">
            <summary>
            
            </summary>
        </member>
        <member name="M:Zelda.Waypoints.WaypointPathFollower.FollowCurrentSegment">
            <summary>
            
            </summary>
        </member>
        <member name="T:Zelda.Waypoints.ZeldaPath">
            <summary>
            Represents a <see cref="T:Atom.Waypoints.Path"/> used by the Zelda game.
            </summary>
        </member>
        <member name="P:Zelda.Waypoints.ZeldaPath.Owner">
            <summary>
            Gets the <see cref="T:Zelda.Waypoints.ZeldaWaypointMap"/> that owns this ZeldaPath.
            </summary>
        </member>
        <member name="P:Zelda.Waypoints.ZeldaPath.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Zelda.Waypoints.ZeldaWaypoint"/> at the specified zero-based index.
            </summary>
            <param name="index">
            The zero-based index of the ZeldaWaypoint to get.
            </param>
            <returns>
            The requested ZeldaWaypoint.
            </returns>
        </member>
        <member name="M:Zelda.Waypoints.ZeldaPath.#ctor(Zelda.Waypoints.ZeldaWaypointMap)">
            <summary>
            Initializes a new instance of the ZeldaPath class.
            </summary>
            <param name="owner">
            The <see cref="T:Zelda.Waypoints.ZeldaWaypointMap"/> that owns the new ZeldaPath.
            </param>
        </member>
        <member name="F:Zelda.Waypoints.ZeldaPath.owner">
            <summary>
            The <see cref="T:Zelda.Waypoints.ZeldaWaypointMap"/> that owns this ZeldaPath.
            </summary>
        </member>
        <member name="T:Zelda.Waypoints.ZeldaPathSegment">
            <summary>
            Represents a <see cref="T:Atom.Waypoints.PathSegment"/> in a <see cref="T:Zelda.Waypoints.ZeldaWaypointMap"/>.
            </summary>
        </member>
        <member name="P:Zelda.Waypoints.ZeldaPathSegment.TileDistance">
            <summary>
            Gets the distance of this ZeldaPathSegment on the tile-level.
            </summary>
        </member>
        <member name="M:Zelda.Waypoints.ZeldaPathSegment.#ctor(Atom.Waypoints.ITilePathSegmentPathBuildService)">
            <summary>
            Initializes a new instance of the ZeldaPathSegment class.
            </summary>
            <param name="pathBuildService">
            Provides a mechanism for building the underlying TilePath of this TilePathSegment.
            </param>
        </member>
        <member name="M:Zelda.Waypoints.ZeldaPathSegment.OnTilePathBuild(Atom.Scene.Tiles.TilePath)">
            <summary>
            Called when the TilePath underlying this TilePathSegment has been build.
            </summary>
            <param name="tilePath">
            The TilePath that has been build.
            </param>
        </member>
        <member name="M:Zelda.Waypoints.ZeldaPathSegment.MeasureTilePathLength(Atom.Scene.Tiles.TilePath)">
            <summary>
            Measures the length of the specified TilePath.
            </summary>
            <param name="tilePath">
            The input TilePath.
            </param>
            <returns>
            The length of specified TilePath in pixels.
            </returns>
        </member>
        <member name="M:Zelda.Waypoints.ZeldaPathSegment.UpdateWeight">
            <summary>
            Updates the Weight of this ZeldaPathSegment.
            </summary>
        </member>
        <member name="T:Zelda.Waypoints.ZeldaPathSegmentTileHandler">
            <summary>
            Implements the ITileHandler{object} that is used to create the TilePaths that connect two Waypoints.
            </summary>
        </member>
        <member name="F:Zelda.Waypoints.ZeldaPathSegmentTileHandler.Instance">
            <summary>
            Represents the singleton instance of the ZeldaPathSegmentTileHandler class.
            </summary>
        </member>
        <member name="M:Zelda.Waypoints.ZeldaPathSegmentTileHandler.Handle(System.Int32,System.Int32,System.Int32,System.Object)">
            <summary>
            Handles the action.
            </summary>
            <param name="x">
            The x-coordinate of the tile (in tile-space).
            </param>
            <param name="y">
            The y-coordinate of the tile (in tile-space).
            </param>
            <param name="id">
            The id of the action.
            </param>
            <param name="caller">
            The object that created the event.
            </param>
            <returns>
            Returns <see lamg="true"/> if to stop handling actions; 
            otherwise <see lamg="false"/>.
            </returns>
        </member>
        <member name="M:Zelda.Waypoints.ZeldaPathSegmentTileHandler.IsWalkable(System.Int32,System.Object)">
            <summary>
            Returns whether the specified tile is walkable by the specified caller.
            </summary>
            <param name="id">
            The id of the action.
            </param>
            <param name="caller">
            The object to test for.</param>
            <returns>
            Returns <see lamg="true"/> if the tile with the given <paramref name="id"/> is walkable; 
            otherwise <see lamg="false"/>.
            </returns>
        </member>
        <member name="T:Zelda.Waypoints.ZeldaWaypoint">
            <summary>
            Represents a Waypoint used in the Zelda game.
            </summary>
        </member>
        <member name="M:Zelda.Waypoints.ZeldaWaypoint.#ctor">
            <summary>
            Initializes a new instance of the ZeldaWaypoint class.
            </summary>
        </member>
        <member name="M:Zelda.Waypoints.ZeldaWaypoint.GetPathSegmentTo(Zelda.Waypoints.ZeldaWaypoint)">
            <summary>
            Gets the PathSegment that directly connects this Waypoint with the specified Waypoint.
            </summary>
            <param name="waypoint">
            The Waypoint to compare to.
            </param>
            <returns>
            true if the Waypoints are connected; otherwise false.
            </returns>
        </member>
        <member name="T:Zelda.Waypoints.ZeldaWaypointGraphDataFactory">
            <summary>
            Implements an <see cref="T:Atom.Math.Graph.IGraphDataFactory`2"/> for the WaypointGraph that
            works underlying the ZeldaWaypointMap.
            </summary>
        </member>
        <member name="M:Zelda.Waypoints.ZeldaWaypointGraphDataFactory.#ctor(Zelda.ZeldaScene)">
            <summary>
            Initializes a new instance of the ZeldaWaypointGraphDataFactory class.
            </summary>
            <param name="scene">
            The scene that contains the ZeldaWaypointMap.
            </param>
        </member>
        <member name="M:Zelda.Waypoints.ZeldaWaypointGraphDataFactory.BuildVertexData">
            <summary>
            Builds the TVertexData stored in a <see cref="T:Atom.Math.Graph.Vertex`2"/>.
            </summary>
            <returns>
            The TVertexData that will be assigned to the Vertex{TVertexData, TEdgeData}.
            </returns>
        </member>
        <member name="M:Zelda.Waypoints.ZeldaWaypointGraphDataFactory.BuildEdgeData">
            <summary>
            Builds the TEdgeData stored in a <see cref="T:Atom.Math.Graph.Edge`2"/>.
            </summary>
            <returns>
            The TEdgeData that will be assigned to the Edge{TVertexData, TEdgeData}.
            </returns>
        </member>
        <member name="F:Zelda.Waypoints.ZeldaWaypointGraphDataFactory.pathBuildService">
            <summary>
            Provides a mechanism for building the underlying TilePath of this TilePathSegment.
            </summary>
        </member>
        <member name="T:Zelda.Waypoints.ZeldaWaypointMap">
            <summary>
            Represents a WaypointMap that is part of a specific ZeldaScene.
            </summary>
            <summary>
            Contains the <see cref="T:Zelda.Waypoints.ZeldaWaypointMap.ReaderWriter"/> class.
            </summary>
        </member>
        <member name="E:Zelda.Waypoints.ZeldaWaypointMap.PathAdded">
            <summary>
            Raised when a new <see cref="T:Zelda.Waypoints.ZeldaPath"/> has been added to this ZeldaWaypointMap.
            </summary>
        </member>
        <member name="E:Zelda.Waypoints.ZeldaWaypointMap.PathRemoved">
            <summary>
            Raised when a new <see cref="T:Zelda.Waypoints.ZeldaPath"/> has been removed from this ZeldaWaypointMap.
            </summary>
        </member>
        <member name="P:Zelda.Waypoints.ZeldaWaypointMap.Scene">
            <summary>
            Gets the <see cref="T:Zelda.ZeldaScene"/> this ZeldaWaypointMap contains.
            </summary>
        </member>
        <member name="P:Zelda.Waypoints.ZeldaWaypointMap.Paths">
            <summary>
            Gets the <see cref="T:Zelda.Waypoints.ZeldaPath"/>s that are part of this ZeldaWaypointMap.
            </summary>
        </member>
        <member name="P:Zelda.Waypoints.ZeldaWaypointMap.PathCount">
            <summary>
            Gets the number of <see cref="T:Zelda.Waypoints.ZeldaPath"/>s this ZeldawaypointMap contains.
            </summary>
        </member>
        <member name="M:Zelda.Waypoints.ZeldaWaypointMap.#ctor(Zelda.ZeldaScene)">
            <summary>
            Initializes a new instance of the ZeldaWaypointMap class.
            </summary>
            <param name="scene">
            The scene that owns the new ZeldaWaypointMap.
            </param>
        </member>
        <member name="M:Zelda.Waypoints.ZeldaWaypointMap.Initialize">
            <summary>
            Initializes this ZeldaWaypointMap.
            </summary>
        </member>
        <member name="M:Zelda.Waypoints.ZeldaWaypointMap.AddPath">
            <summary>
            Adds a new, empty, Path to this ZeldaWaypointMap.
            </summary>
            <returns>
            The newly created ZeldaPath.
            </returns>
        </member>
        <member name="M:Zelda.Waypoints.ZeldaWaypointMap.RemovePath(Zelda.Waypoints.ZeldaPath)">
            <summary>
            Attempts to remove the specified Path from this ZeldaWaypointMap.
            </summary>
            <param name="path">
            The Path to remove.
            </param>
            <returns>
            true if it has been removed;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Waypoints.ZeldaWaypointMap.GetPathAt(System.Int32)">
            <summary>
            Gets the <see cref="T:Zelda.Waypoints.ZeldaPath"/> at the specified zero-based index.
            </summary>
            <param name="index">
            The zero-based index of the path to get.
            </param>
            <returns>
            The requested Path.
            </returns>
        </member>
        <member name="M:Zelda.Waypoints.ZeldaWaypointMap.GetPath(System.String)">
            <summary>
            Attempts to get the ZeldaPath with the specified name.
            </summary>
            <param name="name">
            The name that uniquely identifies the path to get.
            </param>
            <returns>
            The requested path;
            or null if it does not exist.
            </returns>
        </member>
        <member name="F:Zelda.Waypoints.ZeldaWaypointMap.scene">
            <summary>
            The scene that owns this ZeldaWaypointMap.
            </summary>
        </member>
        <member name="F:Zelda.Waypoints.ZeldaWaypointMap.paths">
            <summary>
            The <see cref="T:Zelda.Waypoints.ZeldaPath"/>s that are part of this ZeldaWaypointMap.
            </summary>
        </member>
        <member name="T:Zelda.Waypoints.ZeldaWaypointMap.ReaderWriter">
            <summary>
            Defines the IObjectReaderWriter for the ZeldaWaypointMap class.
            </summary>
        </member>
        <member name="M:Zelda.Waypoints.ZeldaWaypointMap.ReaderWriter.Serialize(Zelda.Waypoints.ZeldaWaypointMap,Atom.Storage.ISerializationContext)">
            <summary>
            Serializes the given object using the given ISerializationContext.
            </summary>
            <param name="object">
            The object to serialize.
            </param>
            <param name="context">
            The context that provides everything required for the serialization process.
            </param>
        </member>
        <member name="M:Zelda.Waypoints.ZeldaWaypointMap.ReaderWriter.SerializeWaypoints(Zelda.Waypoints.ZeldaWaypointMap,Atom.Storage.ISerializationContext)">
            <summary>
            Serializes the Waypoints of the given ZeldaWaypointMap using the given ISerializationContext.
            </summary>
            <param name="waypointMap">
            The object to serialize.
            </param>
            <param name="context">
            The context that provides everything required for the serialization process.
            </param>
        </member>
        <member name="M:Zelda.Waypoints.ZeldaWaypointMap.ReaderWriter.SerializeSegments(Zelda.Waypoints.ZeldaWaypointMap,Atom.Storage.ISerializationContext)">
            <summary>
            Serializes the PathSegments of the given ZeldaWaypointMap using the given ISerializationContext.
            </summary>
            <param name="waypointMap">
            The object to serialize.
            </param>
            <param name="context">
            The context that provides everything required for the serialization process.
            </param>
        </member>
        <member name="M:Zelda.Waypoints.ZeldaWaypointMap.ReaderWriter.SerializePaths(Zelda.Waypoints.ZeldaWaypointMap,Atom.Storage.ISerializationContext)">
            <summary>
            Serializes the Paths of the given ZeldaWaypointMap using the given ISerializationContext.
            </summary>
            <param name="waypointMap">
            The object to serialize.
            </param>
            <param name="context">
            The context that provides everything required for the serialization process.
            </param>
        </member>
        <member name="M:Zelda.Waypoints.ZeldaWaypointMap.ReaderWriter.Deserialize(Zelda.Waypoints.ZeldaWaypointMap,Atom.Storage.IDeserializationContext)">
            <summary>
            Deserializes the given object using the given IDeserializationContext.
            </summary>
            <param name="object">
            The object to deserialize.
            </param>
            <param name="context">
            The context that provides everything required for the deserialization process.
            </param>
        </member>
        <member name="M:Zelda.Waypoints.ZeldaWaypointMap.ReaderWriter.DeserializeWaypoints(Zelda.Waypoints.ZeldaWaypointMap,Atom.Storage.IDeserializationContext)">
            <summary>
            Deserializes the Waypoints of the given ZeldaWaypointMap.
            </summary>
            <param name="waypointMap">
            The ZeldaWaypointMap to deserialize.
            </param>
            <param name="context">
            The context that provides everything required for the deserialization process.
            </param>
        </member>
        <member name="M:Zelda.Waypoints.ZeldaWaypointMap.ReaderWriter.DeserializeSegments(Zelda.Waypoints.ZeldaWaypointMap,Atom.Storage.IDeserializationContext)">
            <summary>
            Deserializes the PathSegments of the given ZeldaWaypointMap.
            </summary>
            <param name="waypointMap">
            The ZeldaWaypointMap to deserialize.
            </param>
            <param name="context">
            The context that provides everything required for the deserialization process.
            </param>
        </member>
        <member name="M:Zelda.Waypoints.ZeldaWaypointMap.ReaderWriter.DeserializePaths(Zelda.Waypoints.ZeldaWaypointMap,Atom.Storage.IDeserializationContext)">
            <summary>
            Deserializes the Paths of the given ZeldaWaypointMap.
            </summary>
            <param name="waypointMap">
            The ZeldaWaypointMap to deserialize.
            </param>
            <param name="context">
            The context that provides everything required for the deserialization process.
            </param>
        </member>
        <member name="T:Zelda.Weather.Creators.AmbientRainStormCreator">
            <summary>
            Defines an <see cref="T:Zelda.Weather.IWeatherCreator"/> that creates
            stormy rainy weather (sound only).
            </summary>
        </member>
        <member name="M:Zelda.Weather.Creators.AmbientRainStormCreator.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Weather.Creators.AmbientRainStormCreator"/> class.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="serviceProvider"/> is null.
            </exception>
        </member>
        <member name="M:Zelda.Weather.Creators.AmbientRainStormCreator.CreateWeather(Zelda.Weather.IWeatherMachine)">
            <summary>
            Creates a new instance of the IWeather this IWeatherCreator creates.
            </summary>
            <param name="weatherMachine">
            The IWeatherMachine for which the IWeather should be created for.
            </param>
            <returns> 
            The <see cref="T:Zelda.Weather.IWeather"/> instances that make up the weather.
            </returns>
        </member>
        <member name="T:Zelda.Weather.Creators.BaseWeatherCreator">
            <summary>
            Defines the abstract base class of all <see cref="T:Zelda.Weather.IWeatherCreator"/> objects.
            </summary>
        </member>
        <member name="M:Zelda.Weather.Creators.BaseWeatherCreator.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Weather.Creators.BaseWeatherCreator"/> class.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="serviceProvider"/> is null.
            </exception>
        </member>
        <member name="P:Zelda.Weather.Creators.BaseWeatherCreator.Rand">
            <summary>
            Gets a random number generator.
            </summary>
        </member>
        <member name="P:Zelda.Weather.Creators.BaseWeatherCreator.ServiceProvider">
            <summary>
            Gets an object that provides fast access to game-related services.
            </summary>
        </member>
        <member name="M:Zelda.Weather.Creators.BaseWeatherCreator.CreateWeather(Zelda.Weather.IWeatherMachine)">
            <summary>
            Creates a new instance of the IWeather this IWeatherCreator creates.
            </summary>
            <param name="weatherMachine">
            The IWeatherMachine for which the IWeather should be created for.
            </param>
            <returns> 
            The <see cref="T:Zelda.Weather.IWeather"/> instances that make up the weather.
            </returns>
        </member>
        <member name="F:Zelda.Weather.Creators.BaseWeatherCreator.serviceProvider">
            <summary>
            Provides fast access to game-related services.
            </summary>
        </member>
        <member name="T:Zelda.Weather.Creators.Design.WeatherCreatorTypeNameEditor">
            <summary>
            Defines an UITypeEditor that lets the user select the type-name of a weather creator.
            </summary>
        </member>
        <member name="M:Zelda.Weather.Creators.Design.WeatherCreatorTypeNameEditor.GetFinalValue(Atom.Design.NameableObjectWrapper{System.Type})">
            <summary>
            Gets the final value that is returned by this SongTypeNameEditor.
            </summary>
            <param name="selectedItem">
            The object the used has selected.
            </param>
            <returns>
            The object that is returned from the SongTypeNameEditor.
            </returns>
        </member>
        <member name="M:Zelda.Weather.Creators.Design.WeatherCreatorTypeNameEditor.GetTypes">
            <summary>
            Gets the types that the user can select in this SongTypeNameEditor.
            </summary>
            <returns>
            The types the user can select.
            </returns>
        </member>
        <member name="F:Zelda.Weather.Creators.Design.WeatherCreatorTypeNameEditor.types">
            <summary>
            The types the user can select in this SongTypeNameEditor.
            </summary>
        </member>
        <member name="T:Zelda.Weather.Creators.FogCreator">
            <summary>
            Defines an <see cref="T:Zelda.Weather.IWeatherCreator"/> that creates
            foggy weather.
            </summary>
        </member>
        <member name="F:Zelda.Weather.Creators.FogCreator.DefaultTextureName">
            <summary>
            States the name of the texture that is loaded by default by this FogCreator.
            </summary>
        </member>
        <member name="P:Zelda.Weather.Creators.FogCreator.Texture">
            <summary>
            Gets or sets the texture that is used to visualize
            the fog.
            </summary>
        </member>
        <member name="M:Zelda.Weather.Creators.FogCreator.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Weather.Creators.FogCreator"/> class.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="serviceProvider"/> is null.
            </exception>
        </member>
        <member name="M:Zelda.Weather.Creators.FogCreator.#ctor(System.String,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Weather.Creators.FogCreator"/> class.
            </summary>
            <param name="textureAssetName">
            The name of the fog texture.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="serviceProvider"/> is null.
            </exception>
        </member>
        <member name="M:Zelda.Weather.Creators.FogCreator.CreateWeather(Zelda.Weather.IWeatherMachine)">
            <summary>
            Creates a new instance of the IWeather this IWeatherCreator creates.
            </summary>
            <param name="weatherMachine">
            The IWeatherMachine for which the IWeather should be created for.
            </param>
            <returns> 
            The <see cref="T:Zelda.Weather.IWeather"/> instances that make up the weather.
            </returns>
        </member>
        <member name="T:Zelda.Weather.Creators.FogNoiseCreator">
            <summary>
            Represents an <see cref="T:Zelda.Weather.IWeatherCreator"/> that creates foggy and
            noisy IWeather at the same time. 
            This class can't be inherited
            </summary>
        </member>
        <member name="P:Zelda.Weather.Creators.FogNoiseCreator.Fog">
            <summary>
            Gets the <see cref="T:Zelda.Weather.Creators.FogCreator"/> that creates the foggy IWeather of this FogNoiseCreator.
            </summary>
        </member>
        <member name="P:Zelda.Weather.Creators.FogNoiseCreator.Noise">
            <summary>
            Gets the <see cref="T:Zelda.Weather.Creators.NoiseCreator"/> that creates the noisy IWeather of this FogNoiseCreator.
            </summary>
        </member>
        <member name="M:Zelda.Weather.Creators.FogNoiseCreator.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Weather.Creators.FogNoiseCreator"/> class.
            </summary>   
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="serviceProvider"/> is null.
            </exception>
        </member>
        <member name="F:Zelda.Weather.Creators.FogNoiseCreator.fogCreator">
            <summary>
            The <see cref="T:Zelda.Weather.Creators.FogCreator"/> that creates the foggy IWeather of this FogNoiseCreator.
            </summary>
        </member>
        <member name="F:Zelda.Weather.Creators.FogNoiseCreator.noiseCreator">
            <summary>
            The <see cref="T:Zelda.Weather.Creators.NoiseCreator"/> that creates the noisy IWeather of this FogNoiseCreator.
            </summary>
        </member>
        <member name="T:Zelda.Weather.Creators.IWeatherCreatorMap">
            <summary>
            Stores and provides access to the IWeatherCreators that are known to the game.
            </summary>
        </member>
        <member name="M:Zelda.Weather.Creators.IWeatherCreatorMap.Find(System.Type)">
            <summary>
            Tries to get the <see cref="T:Zelda.Weather.IWeatherCreator"/> of the given <see cref="T:System.Type"/>.
            </summary>
            <param name="type">
            The type of the IWeatherCreator to receive.
            </param>
            <returns>
            The IWeatherCreator instance;
            or null if this IWeatherCreatorMap doesn't contain an IWeatherCreator of the Type.
            </returns>
        </member>
        <member name="M:Zelda.Weather.Creators.IWeatherCreatorMap.Find``1">
            <summary>
            Tries to get the <see cref="T:Zelda.Weather.IWeatherCreator"/> of the given <see cref="T:System.Type"/>.
            </summary>
            <typeparam name="T">
            The type of the IWeatherCreator to receive.
            </typeparam>
            <returns>
            The IWeatherCreator instance;
            or null if this IWeatherCreatorMap doesn't contain an IWeatherCreator of the Type.
            </returns>
        </member>
        <member name="M:Zelda.Weather.Creators.IWeatherCreatorMap.GetRandom(Atom.Math.IRand)">
            <summary>
            Randomly pics an IWeatherCreator from this IWeatherCreatorMap.
            </summary>
            <param name="rand">
            A random number generator.
            </param>
            <returns>
            A randomly picked IWeatherCreator.
            </returns>
        </member>
        <member name="T:Zelda.Weather.Creators.LinearEffectWeatherCreator">
            <summary>
            Represents an <see cref="T:Zelda.Weather.IWeatherCreator"/> that creates an <see cref="T:Zelda.Weather.IWeather"/> that
            is based on <see cref="T:Zelda.Weather.LinearEffectWeather"/>.
            </summary>
        </member>
        <member name="P:Zelda.Weather.Creators.LinearEffectWeatherCreator.MinimumTime">
            <summary>
            Gets or sets the minimum time the IWeather created
            by this LinearEffectWeatherCreator will last.
            </summary>
        </member>
        <member name="P:Zelda.Weather.Creators.LinearEffectWeatherCreator.MaximumTime">
            <summary>
            Gets or sets the maximum time the IWeather created 
            by this LinearEffectWeatherCreator will last.
            </summary>
        </member>
        <member name="P:Zelda.Weather.Creators.LinearEffectWeatherCreator.MinimumSpeed">
            <summary>
            Gets or sets the minimum speed this LinearEffectWeatherCreator scrolls at.
            </summary>
        </member>
        <member name="P:Zelda.Weather.Creators.LinearEffectWeatherCreator.MaximumSpeed">
            <summary>
            Gets or sets the maximum speed this LinearEffectWeatherCreator scrolls at.
            </summary>
        </member>
        <member name="P:Zelda.Weather.Creators.LinearEffectWeatherCreator.MinimumDensity">
            <summary>
            Gets or sets the minumum density of this IWeather created by this FogCreator.
            </summary>
        </member>
        <member name="P:Zelda.Weather.Creators.LinearEffectWeatherCreator.MaximumDensity">
            <summary>
            Gets or sets the maximum density of this IWeather created by this FogCreator.
            </summary>
        </member>
        <member name="P:Zelda.Weather.Creators.LinearEffectWeatherCreator.MaximumDensityStartFactor">
            <summary>
            Gets or sets the factor that is used to calculate the starting time
            of the maximum density region.
            </summary>
        </member>
        <member name="P:Zelda.Weather.Creators.LinearEffectWeatherCreator.MaximumDensityEndFactor">
            <summary>
            Gets or sets the factor that is used to calculate the ending time
            of the maximum density region.
            </summary>
        </member>
        <member name="M:Zelda.Weather.Creators.LinearEffectWeatherCreator.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Weather.Creators.LinearEffectWeatherCreator"/> class.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="serviceProvider"/> is null.
            </exception>
        </member>
        <member name="M:Zelda.Weather.Creators.LinearEffectWeatherCreator.GetSpeed">
            <summary>
            Helper method that gets the scroll speed of the next IWeather
            created by this LinearEffectWeatherCreator.
            </summary>
            <returns>
            The speed value; in [<see cref="P:Zelda.Weather.Creators.LinearEffectWeatherCreator.MinimumSpeed"/>; <see cref="P:Zelda.Weather.Creators.LinearEffectWeatherCreator.MaximumSpeed"/>].
            </returns>
        </member>
        <member name="M:Zelda.Weather.Creators.LinearEffectWeatherCreator.GetDensity">
            <summary>
            Helper method that gets the density of the next IWeather
            created by this LinearEffectWeatherCreator.
            </summary>
            <returns>
            The density value; in [<see cref="P:Zelda.Weather.Creators.LinearEffectWeatherCreator.MinimumDensity"/>; <see cref="P:Zelda.Weather.Creators.LinearEffectWeatherCreator.MaximumDensity"/>].
            </returns>
        </member>
        <member name="M:Zelda.Weather.Creators.LinearEffectWeatherCreator.GetTime(Zelda.Weather.IWeatherMachine)">
            <summary>
            Helper method that gets the duration in seconds the next IWeather
            created by this LinearEffectWeatherCreator lasts.
            </summary>
            <param name="weatherMachine">
            The IWeatherMachine for which the new IWeather is created.
            </param>
            <returns>
            The duration in seconds.
            </returns>
        </member>
        <member name="M:Zelda.Weather.Creators.LinearEffectWeatherCreator.GetTime(Zelda.IngameDateTime)">
            <summary>
            Helper method that gets the duration in seconds the next IWeather
            created by this LinearEffectWeatherCreator lasts.
            </summary>
            <param name="ingameDateTime">
            The object that encapsulates the flow of date and time.
            </param>
            <returns>
            The duration in seconds.
            </returns>
        </member>
        <member name="T:Zelda.Weather.Creators.MistCreator">
            <summary>
            Defines an <see cref="T:Zelda.Weather.IWeatherCreator"/> that creates
            mist weather. This class can't be inherited.
            </summary>
        </member>
        <member name="M:Zelda.Weather.Creators.MistCreator.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Weather.Creators.MistCreator"/> class.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="serviceProvider"/> is null.
            </exception>
        </member>
        <member name="M:Zelda.Weather.Creators.MistCreator.GetFogColor">
            <summary>
            Generates the color of the next mist effect.
            </summary>
        </member>
        <member name="T:Zelda.Weather.Creators.MultiWeatherCreator">
            <summary>
            Represents an <see cref="T:Zelda.Weather.IWeatherCreator"/> that creates <see cref="T:Zelda.Weather.IWeather"/> by
            merging the IWeather created by multiple other IWeatherCreators.
            </summary>
        </member>
        <member name="M:Zelda.Weather.Creators.MultiWeatherCreator.#ctor(System.Int32,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Weather.Creators.MultiWeatherCreator"/> class.
            </summary>
            <param name="creatorCapacity">
            The initial number of IWeatherCreators that this MultiWeatherCreator may contain.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="serviceProvider"/> is null.
            </exception>
        </member>
        <member name="M:Zelda.Weather.Creators.MultiWeatherCreator.CreateWeather(Zelda.Weather.IWeatherMachine)">
            <summary>
            Creates a new instance of the IWeather this IWeatherCreator creates.
            </summary>
            <param name="weatherMachine">
            The IWeatherMachine for which the IWeather should be created for.
            </param>
            <returns> 
            The <see cref="T:Zelda.Weather.IWeather"/> instances that make up the weather.
            </returns>
        </member>
        <member name="M:Zelda.Weather.Creators.MultiWeatherCreator.AddCreator(Zelda.Weather.IWeatherCreator)">
            <summary>
            Adds the given <see cref="T:Zelda.Weather.IWeatherCreator"/> to this <see cref="T:Zelda.Weather.Creators.MultiWeatherCreator"/>;
            adding the IWeather created by it to the list of IWeather created by this MultiWeatherCreator.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="creator"/> is null.
            </exception>
            <param name="creator">
            The IWeatherCreator to add.
            </param>
        </member>
        <member name="F:Zelda.Weather.Creators.MultiWeatherCreator.creators">
            <summary>
            The list of IWeatherCreators that individually create the IWeather of this MultiWeatherCreator.
            </summary>
        </member>
        <member name="T:Zelda.Weather.Creators.NoiseCreator">
            <summary>
            Defines an <see cref="T:Zelda.Weather.IWeatherCreator"/> that creates noisy weather.
            </summary>
        </member>
        <member name="M:Zelda.Weather.Creators.NoiseCreator.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Weather.Creators.NoiseCreator"/> class.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="serviceProvider"/> is null.
            </exception>
        </member>
        <member name="M:Zelda.Weather.Creators.NoiseCreator.CreateWeather(Zelda.Weather.IWeatherMachine)">
            <summary>
            Creates a new instance of the IWeather this IWeatherCreator creates.
            </summary>
            <param name="weatherMachine">
            The IWeatherMachine for which the IWeather should be created for.
            </param>
            <returns> 
            The <see cref="T:Zelda.Weather.IWeather"/> instances that make up the weather.
            </returns>
        </member>
        <member name="F:Zelda.Weather.Creators.NoiseCreator.deviceService">
            <summary>
            Provides access to the Microsoft.Xna.Framework.Graphics.GraphicsDevice.
            </summary>
        </member>
        <member name="F:Zelda.Weather.Creators.NoiseCreator.effectLoader">
            <summary>
            Provides a mechanism that allows loading of effect asserts.
            </summary>
        </member>
        <member name="T:Zelda.Weather.Creators.IWeatherCreatorProvider">
            <summary>
            Provides a mechanism that allows receiving an IWeatherCreator.
            </summary>
        </member>
        <member name="M:Zelda.Weather.Creators.IWeatherCreatorProvider.GetCreator(Zelda.Weather.IWeatherMachine)">
            <summary>
            Gets an IWeatherCreator
            </summary>
            <param name="weatherMachine">
            The IWeatherMachine that wants to create some IWeather using the requested IWeatherCreator.
            </param>
            <returns>
            The requested IWeatherCreator; or null.
            </returns>
        </member>
        <member name="T:Zelda.Weather.Creators.MonthBasedRandomWeatherCreatorProvider">
            <summary>
            Implements an IWeatherCreatorProvider that based on the current ingame month
            randomly chooses an IWeatherCreator.
            </summary>
        </member>
        <member name="M:Zelda.Weather.Creators.MonthBasedRandomWeatherCreatorProvider.#ctor(Zelda.Weather.Creators.IWeatherCreatorMap,Atom.Math.IRand)">
            <summary>
            Initializes a new instance of the MonthBasedRandomWeatherCreatorProvider class.
            </summary>
            <param name="creators">
            Provides access to all known IWeaterCreators.
            </param>
            <param name="rand">
            A random number generator.
            </param>
        </member>
        <member name="M:Zelda.Weather.Creators.MonthBasedRandomWeatherCreatorProvider.CreateWeatherHats(Atom.Math.IRand)">
            <summary>
            Creates the array of IWeatherCreator Hats which are responsible
            for choosing the random weather; based on the current ingame month.
            </summary>
            <param name="rand">
            A random number generator.
            </param>
            <returns>
            A new array of uninitialized IWeatherCreator hats; sorted by month.
            </returns>
        </member>
        <member name="M:Zelda.Weather.Creators.MonthBasedRandomWeatherCreatorProvider.SetupEuropeanWeather">
            <summary>
            Setups this MonthBasedRandomWeatherCreatorProvider to create european-like IWeather.
            </summary>
        </member>
        <member name="M:Zelda.Weather.Creators.MonthBasedRandomWeatherCreatorProvider.GetCreator(Zelda.Weather.IWeatherMachine)">
            <summary>
            Gets an IWeatherCreator from this MonthBasedRandomWeatherCreatorProvider.
            </summary>
            <param name="weatherMachine">
            The IWeatherMachine that wants to receive an IWeatherCreator.
            </param>
            <returns>
            An IWeatherCreator instance; or null.
            </returns>
        </member>
        <member name="M:Zelda.Weather.Creators.MonthBasedRandomWeatherCreatorProvider.GetMonth(Zelda.Weather.IWeatherMachine)">
            <summary>
            Gets the current ingame month for the specified IWeatherMachine.
            </summary>
            <param name="weatherMachine">
            The IWeatherMachine that controls the IWeather.
            </param>
            <returns>
            The current month; a value from 0 to 11.
            </returns>
        </member>
        <member name="F:Zelda.Weather.Creators.MonthBasedRandomWeatherCreatorProvider.weatherHats">
            <summary>
            The list (sorted by month) of IWeatherCreator Hats.
            </summary>
            <remarks>
            An IWeatherCreator Hat is used to randomly receive the current weather in the scene.
            </remarks>
        </member>
        <member name="F:Zelda.Weather.Creators.MonthBasedRandomWeatherCreatorProvider.creators">
            <summary> 
            Provides access to all known IWeatherCreators.
            </summary>
        </member>
        <member name="T:Zelda.Weather.Creators.RainCreator">
            <summary>
            Defines an <see cref="T:Zelda.Weather.IWeatherCreator"/> that creates
            rainy weather.
            </summary>
        </member>
        <member name="M:Zelda.Weather.Creators.RainCreator.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Weather.Creators.RainCreator"/> class.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="serviceProvider"/> is null.
            </exception>
        </member>
        <member name="M:Zelda.Weather.Creators.RainCreator.CreateWeather(Zelda.Weather.IWeatherMachine)">
            <summary>
            Creates a new instance of the IWeather this IWeatherCreator creates.
            </summary>
            <param name="weatherMachine">
            The IWeatherMachine for which the IWeather should be created for.
            </param>
            <returns> 
            The <see cref="T:Zelda.Weather.IWeather"/> instances that make up the weather.
            </returns>
        </member>
        <member name="T:Zelda.Weather.Creators.RainStormCreator">
            <summary>
            Defines an <see cref="T:Zelda.Weather.IWeatherCreator"/> that creates
            stormy rainy weather.
            </summary>
        </member>
        <member name="M:Zelda.Weather.Creators.RainStormCreator.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Weather.Creators.RainStormCreator"/> class.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="serviceProvider"/> is null.
            </exception>
        </member>
        <member name="M:Zelda.Weather.Creators.RainStormCreator.CreateWeather(Zelda.Weather.IWeatherMachine)">
            <summary>
            Creates a new instance of the IWeather this IWeatherCreator creates.
            </summary>
            <param name="weatherMachine">
            The IWeatherMachine for which the IWeather should be created for.
            </param>
            <returns> 
            The <see cref="T:Zelda.Weather.IWeather"/> instances that make up the weather.
            </returns>
        </member>
        <member name="T:Zelda.Weather.Creators.SnowCreator">
            <summary>
            Defines an <see cref="T:Zelda.Weather.IWeatherCreator"/> that creates
            <see cref="T:Zelda.Weather.SnowyWeather"/>.
            </summary>
        </member>
        <member name="M:Zelda.Weather.Creators.SnowCreator.#ctor(Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Weather.Creators.SnowCreator"/> class.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="serviceProvider"/> is null.
            </exception>
        </member>
        <member name="M:Zelda.Weather.Creators.SnowCreator.CreateWeather(Zelda.Weather.IWeatherMachine)">
            <summary>
            Creates a new instance of the IWeather this IWeatherCreator creates.
            </summary>
            <param name="weatherMachine">
            The IWeatherMachine for which the IWeather should be created for.
            </param>
            <returns> 
            The <see cref="T:Zelda.Weather.IWeather"/> instances that make up the weather.
            </returns>
        </member>
        <member name="T:Zelda.Weather.Creators.WeatherCreatorMap">
            <summary>
            Stores and provides access to the IWeatherCreators that are known to the game.
            </summary>
        </member>
        <member name="M:Zelda.Weather.Creators.WeatherCreatorMap.GetRandom(Atom.Math.IRand)">
            <summary>
            Randomly pics an IWeatherCreator from this WeatherCreatorMap.
            </summary>
            <param name="rand">
            A random number generator.
            </param>
            <returns>
            A randomly picked IWeatherCreator.
            </returns>
        </member>
        <member name="M:Zelda.Weather.Creators.WeatherCreatorMap.AddDefault(Zelda.IZeldaServiceProvider)">
            <summary>
            Adds the default IWeatherCreators to this WeatherCreatorMap.
            </summary>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Weather.Creators.WeatherCreatorMap.Add(Zelda.Weather.IWeatherCreator)">
            <summary>
            Adds the specified <see cref="T:Zelda.Weather.IWeatherCreator"/> to this WeatherCreatorMap.
            </summary>
            <param name="creator"> 
            The <see cref="T:Zelda.Weather.IWeatherCreator"/> to add.
            </param>
        </member>
        <member name="M:Zelda.Weather.Creators.WeatherCreatorMap.Find(System.Type)">
            <summary>
            Tries to get the <see cref="T:Zelda.Weather.IWeatherCreator"/> of the given <see cref="T:System.Type"/>.
            </summary>
            <param name="type">
            The type of the IWeatherCreator to receive.
            </param>
            <returns>
            The IWeatherCreator instance;
            or null if this WeatherCreatorMap doesn't contain an IWeatherCreator of the Type.
            </returns>
        </member>
        <member name="M:Zelda.Weather.Creators.WeatherCreatorMap.Find``1">
            <summary>
            Tries to get the <see cref="T:Zelda.Weather.IWeatherCreator"/> of the given <see cref="T:System.Type"/>.
            </summary>
            <typeparam name="T">
            The type of the IWeatherCreator to receive.
            </typeparam>
            <returns>
            The IWeatherCreator instance;
            or null if this WeatherCreatorMap doesn't contain an IWeatherCreator of the Type.
            </returns>
        </member>
        <member name="F:Zelda.Weather.Creators.WeatherCreatorMap.creators">
            <summary> 
            The dictionary containing all IWeatherCreators, sorted by type.
            </summary>
        </member>
        <member name="T:Zelda.Weather.AmbientRainWeather">
            <summary>
            Represents the ambient sound effects that surrounds rainy <see cref="T:Zelda.Weather.IWeather"/>.
            This class can't be inherited.
            </summary>
        </member>
        <member name="F:Zelda.Weather.AmbientRainWeather.RainSampleName">
            <summary>
            The name of the rain sound sample.
            </summary>
        </member>
        <member name="F:Zelda.Weather.AmbientRainWeather.ThunderSampleName">
            <summary>
            The name of the thunder sound sample.
            </summary>
        </member>
        <member name="P:Zelda.Weather.AmbientRainWeather.TimeBetweenThunders">
            <summary>
            Sets the time-range between two thunders.
            </summary>
        </member>
        <member name="M:Zelda.Weather.AmbientRainWeather.#ctor(Zelda.Weather.IWeatherMachine)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Weather.AmbientRainWeather"/> class.
            </summary>
            <param name="weatherMachine">
            The IWeatherMachine that has triggered the new RainyWeather.
            </param>
        </member>
        <member name="M:Zelda.Weather.AmbientRainWeather.Setup(System.Single,System.Single,System.Single,System.Single,Zelda.IZeldaServiceProvider)">
            <summary>
            Setups this RainAmbientSoundWeather.
            </summary>
            <param name="totalTime">
            The total this RainAmbientSoundWeather should last.
            </param>
            <param name="maxDensityEffect">
            The effect value at the peak of the RainyWeather.
            </param>
            <param name="startMaxDensityTime">
            The time (in seconds) on the time table of this RainyWeather the <paramref name="maxDensityEffect"/>
            is set as the current effect value.
            </param>
            <param name="endMaxDensityTime">
            The time (in seconds) on the time table of this RainyWeather the <paramref name="maxDensityEffect"/>
            is not set as the current effect value anymore.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Weather.AmbientRainWeather.LoadRainSample(Atom.Fmod.AudioSystem)">
            <summary>
            Loads the RainSample that is playing in the background 
            while this RainyWeather is active.
            </summary>
            <param name="audioSystem">
            The AudioSystem that should be used to load the sample.
            </param>
        </member>
        <member name="M:Zelda.Weather.AmbientRainWeather.LoadThunderSample(Atom.Fmod.AudioSystem)">
            <summary>
            Loads the ThunderSample that is occasionally played
            while this RainyWeather is active.
            </summary>
            <param name="audioSystem">
            The AudioSystem that should be used to load the sample.
            </param>
        </member>
        <member name="M:Zelda.Weather.AmbientRainWeather.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this RainyWeather.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Weather.AmbientRainWeather.UpdateThunder(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates the thunder sound logic.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Weather.AmbientRainWeather.PlayThunder">
            <summary>
            Starts to play a thunder at a random position.
            </summary>
        </member>
        <member name="M:Zelda.Weather.AmbientRainWeather.GetRandomThunderPosition">
            <summary>
            Gets the position of the thunder.
            </summary>
            <returns>
            A random center position.
            </returns>
        </member>
        <member name="M:Zelda.Weather.AmbientRainWeather.GetPlayerPosition">
            <summary>
            Gets the position of the player in world-space.
            </summary>
            <returns>
            The center position of the player.
            </returns>
        </member>
        <member name="M:Zelda.Weather.AmbientRainWeather.GetRandomThunderDirection">
            <summary>
            Gets the direction from the player to the thunder source.
            </summary>
            <returns>
            A random direction vector.
            </returns>
        </member>
        <member name="M:Zelda.Weather.AmbientRainWeather.GetRandomThunderDistance">
            <summary>
            Gets the distance the thunder is away.
            </summary>
            <returns>
            A random distance.
            </returns>
        </member>
        <member name="M:Zelda.Weather.AmbientRainWeather.RandomizeTimeUntilNextThunder">
            <summary>
            Randomizes the value of the timeUntilNextThunder field
            based on the timeBetweenThunders setting.
            </summary>
        </member>
        <member name="M:Zelda.Weather.AmbientRainWeather.UpdateRainSample(System.Single)">
            <summary>
            Updates the volume of the rain sample.
            </summary>
            <param name="linearEffect">
            The current strength of this RainyWeather.
            </param>
        </member>
        <member name="M:Zelda.Weather.AmbientRainWeather.Start">
            <summary>
            Starts this RainyWeather.
            </summary>
        </member>
        <member name="M:Zelda.Weather.AmbientRainWeather.Stop(System.Boolean)">
            <summary>
            Stops this RainyWeather.
            </summary>
            <param name="informWeatherMachine">
            States whether the <see cref="T:Zelda.Weather.WeatherMachine"/> that owns this IWeather
            should be informed that this IWeather has stopped.
            </param>
        </member>
        <member name="M:Zelda.Weather.AmbientRainWeather.StartPlayingRainSample">
            <summary>
            Starts playing the rain sample.
            </summary>
        </member>
        <member name="M:Zelda.Weather.AmbientRainWeather.StopPlayingRainSample">
            <summary>
            Stops playing the rain sample.
            </summary>
        </member>
        <member name="M:Zelda.Weather.AmbientRainWeather.Pause">
            <summary>
            Pauses this RainyWeather.
            </summary>
        </member>
        <member name="M:Zelda.Weather.AmbientRainWeather.Unpause">
            <summary>
            Unpauses this RainyWeather.
            </summary>
        </member>
        <member name="F:Zelda.Weather.AmbientRainWeather.rainSound">
            <summary>
            The sound sample that gets played in the background while rainy weather is active.
            </summary>
        </member>
        <member name="F:Zelda.Weather.AmbientRainWeather.rainChannel">
            <summary>
            The sound channel that is playing the rainSound.
            </summary>
        </member>
        <member name="F:Zelda.Weather.AmbientRainWeather.thunderSound">
            <summary>
            The thunder sample that gets occasionally played.
            </summary>
        </member>
        <member name="F:Zelda.Weather.AmbientRainWeather.timeBetweenThunders">
            <summary>
            Stores the time range between two thunders.
            </summary>
        </member>
        <member name="F:Zelda.Weather.AmbientRainWeather.timeUntilNextThunder">
            <summary>
            The time until the next thunder.
            </summary>
        </member>
        <member name="F:Zelda.Weather.AmbientRainWeather.rand">
            <summary>
            A random number generator.
            </summary>
        </member>
        <member name="T:Zelda.Weather.BaseWeather">
            <summary>
            Defines the abstract base class of all <see cref="T:Zelda.Weather.IWeather"/> objects.
            </summary>
        </member>
        <member name="M:Zelda.Weather.BaseWeather.#ctor(Zelda.Weather.IWeatherMachine)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Weather.BaseWeather"/> class.
            </summary>
            <param name="weatherMachine">
            The IWeatherMachine that has triggered the new BaseWeather.
            </param>
        </member>
        <member name="M:Zelda.Weather.BaseWeather.Setup(System.Single)">
            <summary>
            Setups this BaseWeather.
            </summary>
            <param name="totalTime">
            The total time this IWeather should last.
            </param>
        </member>
        <member name="P:Zelda.Weather.BaseWeather.TimeLeft">
            <summary>
            Gets the time (in seconds) left until this IWeather stopps.
            </summary>
        </member>
        <member name="P:Zelda.Weather.BaseWeather.TotalTime">
            <summary>
            Gets the total time (in seconds) this IWeather lasts.
            </summary>
        </member>
        <member name="P:Zelda.Weather.BaseWeather.Scene">
            <summary>
            Gets the <see cref="T:Zelda.ZeldaScene"/> this IWeather is part of.
            </summary>
        </member>
        <member name="P:Zelda.Weather.BaseWeather.WeatherMachine">
            <summary>
            Gets the IWeatherMachine that owns this BaseWeather.
            </summary>
        </member>
        <member name="M:Zelda.Weather.BaseWeather.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this IWeather.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Weather.BaseWeather.Start">
            <summary>
            Starts this IWeather.
            </summary>
        </member>
        <member name="M:Zelda.Weather.BaseWeather.Stop(System.Boolean)">
            <summary>
            Stops this IWeather.
            </summary>
            <param name="informWeatherMachine">
            States whether the <see cref="P:Zelda.Weather.BaseWeather.WeatherMachine"/> that owns this IWeather
            should be informed that this IWeather has stopped.
            </param>
        </member>
        <member name="M:Zelda.Weather.BaseWeather.Reset">
            <summary>
            Resets the state of this IWeather.
            </summary>
        </member>
        <member name="F:Zelda.Weather.BaseWeather.totalTime">
            <summary>
            States the total time this IWeather lasts.
            </summary>
        </member>
        <member name="F:Zelda.Weather.BaseWeather.time">
            <summary>
            States the time this IWeather has left until it gets removed.
            </summary>
        </member>
        <member name="F:Zelda.Weather.BaseWeather.scene">
            <summary>
            Identifies the ZeldaScene that owns this IWeather.
            </summary>
        </member>
        <member name="F:Zelda.Weather.BaseWeather.weatherMachine">
            <summary>
            Identifies the weather machine that has triggered this IWeather.
            </summary>
        </member>
        <member name="T:Zelda.Weather.FoggyWeather">
            <summary>
            Represents foggy <see cref="T:Zelda.Weather.IWeather"/>.
            This class can't be inherited.
            </summary>
        </member>
        <member name="P:Zelda.Weather.FoggyWeather.Color">
            <summary>
            Gets or sets the color of the fog effect.
            </summary>
        </member>
        <member name="M:Zelda.Weather.FoggyWeather.#ctor(Zelda.Weather.IWeatherMachine)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Weather.FoggyWeather"/> class.
            </summary>
            <param name="weatherMachine">
            The WeatherMachine that has triggered the new FoggyWeather.
            </param>
        </member>
        <member name="M:Zelda.Weather.FoggyWeather.Setup(Microsoft.Xna.Framework.Graphics.Texture2D,Atom.Math.Vector2,Atom.Math.Vector2,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Setups this FoggyWeather.
            </summary>
            <param name="texture">
            The texture that contains the scrollable fog image.
            </param>
            <param name="scroll">
            The starting scroll value of the overlay.
            </param>
            <param name="scrollSpeed">
            The fog movement speed of this FoggyWeather. 
            </param>
            <param name="totalTime">
            The total this FoggyWeather should last.
            </param>
            <param name="maxDensityEffect">
            The effect value at the peak of the FoggyWeather.
            </param>
            <param name="startMaxDensityTime">
            The time (in seconds) on the time table of this FoggyWeather the <paramref name="maxDensityEffect"/>
            is set as the current effect value.
            </param>
            <param name="endMaxDensityTime">
            The time (in seconds) on the time table of this FoggyWeather the <paramref name="maxDensityEffect"/>
            is not set as the current effect value anymore.
            </param>
        </member>
        <member name="M:Zelda.Weather.FoggyWeather.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this FoggyWeather.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Weather.FoggyWeather.Start">
            <summary>
            Starts this FoggyWeather.
            </summary>
        </member>
        <member name="M:Zelda.Weather.FoggyWeather.Stop(System.Boolean)">
            <summary>
            Stops this FoggyWeather.
            </summary>
            <param name="informWeatherMachine">
            States whether the <see cref="T:Zelda.Weather.WeatherMachine"/> that owns this IWeather
            should be informed that this IWeather has stopped.
            </param>
        </member>
        <member name="F:Zelda.Weather.FoggyWeather.fogOverlay">
            <summary>
            The ScrollingTextureOverlay that is used to visualize this FoggyWeather.
            </summary>
        </member>
        <member name="T:Zelda.Weather.LinearEffectWeather">
            <summary>
            Represents an <see cref="T:Zelda.Weather.IWeather"/> whos effect changes 
            linearily based on its duration.
            </summary>
        </member>
        <member name="M:Zelda.Weather.LinearEffectWeather.#ctor(Zelda.Weather.IWeatherMachine)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Weather.LinearEffectWeather"/> class.
            </summary>
            <param name="weatherMachine">
            The IWeatherMachine that has triggered the new LinearEffectWeather.
            </param>
        </member>
        <member name="M:Zelda.Weather.LinearEffectWeather.Setup(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Setups this LinearEffectWeather.
            </summary>
            <param name="totalTime">
            The total time this IWeather should last.
            </param>
            <param name="startEffect">
            The effect value at the start of the LinearEffectWeather.
            </param>
            <param name="maxEffect">
            The effect value at the peak of the LinearEffectWeather.
            </param>
            <param name="endEffect">
            The effect value at the end of the LinearEffectWeather.
            </param>
            <param name="startMaxEffectTime">
            The time (in seconds) on the time table of this LinearEffectWeather the <paramref name="maxEffect"/>
            is set as the current effect value.
            </param>
            <param name="endMaxEffectTime">
            The time (in seconds) on the time table of this LinearEffectWeather the <paramref name="maxEffect"/>
            is not set as the current effect value anymore.
            </param>
        </member>
        <member name="M:Zelda.Weather.LinearEffectWeather.GetLinearEffect">
            <summary>
            Receives the current effect value of this LinearEffectWeather.
            </summary>
            <remarks>
            The value returned by this method is used to control this LinearEffectWeather.
            </remarks>
            <returns>
            The current effect value.
            </returns>
        </member>
        <member name="F:Zelda.Weather.LinearEffectWeather.startEffect">
            <summary>
            States the effect value based on a specific point on the time table.
            </summary>
        </member>
        <member name="F:Zelda.Weather.LinearEffectWeather.maxEffect">
            <summary>
            States the effect value based on a specific point on the time table.
            </summary>
        </member>
        <member name="F:Zelda.Weather.LinearEffectWeather.endEffect">
            <summary>
            States the effect value based on a specific point on the time table.
            </summary>
        </member>
        <member name="F:Zelda.Weather.LinearEffectWeather.startMaxEffectTime">
            <summary>
            The points on the time table where the maximum effect is active.
            </summary>
        </member>
        <member name="F:Zelda.Weather.LinearEffectWeather.endMaxEffectTime">
            <summary>
            The points on the time table where the maximum effect is active.
            </summary>
        </member>
        <member name="F:Zelda.Weather.LinearEffectWeather.cachedFirstPartTime">
            <summary>
            Cached this.TotalTime - startMaxEffectTime
            </summary>
        </member>
        <member name="T:Zelda.Weather.NoisyWeather">
            <summary>
            Represents foggy <see cref="T:Zelda.Weather.IWeather"/> that uses a NoiseOverlay.
            This class can't be inherited.
            </summary>
        </member>
        <member name="M:Zelda.Weather.NoisyWeather.#ctor(Zelda.Weather.IWeatherMachine)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Weather.NoisyWeather"/> class.
            </summary>
            <param name="weatherMachine">
            The IWeatherMachine that has triggered the new NoisyWeather.
            </param>
        </member>
        <member name="M:Zelda.Weather.NoisyWeather.Setup(Atom.Xna.Effects.IEffectLoader,Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService,Atom.Math.Vector2,Atom.Math.Vector2,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Setups this NoisyWeather.
            </summary>
            <param name="effectLoader">
            Provides a mechanism that allows loading of effect asserts.
            </param>
            <param name="deviceService">
            Provides access to the Microsoft.Xna.Framework.Graphics.GraphicsDevice.
            </param>
            <param name="scrollSpeed">
            The fog movement speed of this NoisyWeather. 
            </param>
            <param name="scrollDirection">
            The direction the noise is scrolling.
            </param>
            <param name="totalTime">
            The total this NoisyWeather should last.
            </param>
            <param name="maxDensityEffect">
            The effect value at the peak of the NoisyWeather.
            </param>
            <param name="startMaxDensityTime">
            The time (in seconds) on the time table of this NoisyWeather the <paramref name="maxDensityEffect"/>
            is set as the current effect value.
            </param>
            <param name="endMaxDensityTime">
            The time (in seconds) on the time table of this NoisyWeather the <paramref name="maxDensityEffect"/>
            is not set as the current effect value anymore.
            </param>
        </member>
        <member name="M:Zelda.Weather.NoisyWeather.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this NoisyWeather.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Weather.NoisyWeather.Start">
            <summary>
            Starts this NoisyWeather.
            </summary>
        </member>
        <member name="M:Zelda.Weather.NoisyWeather.Stop(System.Boolean)">
            <summary>
            Stops this NoisyWeather.
            </summary>
            <param name="informWeatherMachine">
            States whether the <see cref="T:Zelda.Weather.WeatherMachine"/> that owns this IWeather
            should be informed that this IWeather has stopped.
            </param>
        </member>
        <member name="M:Zelda.Weather.NoisyWeather.Dispose">
            <summary>
            Disposes this NoisyWeather.
            </summary>
        </member>
        <member name="F:Zelda.Weather.NoisyWeather.noiseOverlay">
            <summary>
            The NoiseOverlay that is used to visualize this NoisyWeather.
            </summary>
        </member>
        <member name="T:Zelda.Weather.RainyWeather">
            <summary>
            Represents rainy <see cref="T:Zelda.Weather.IWeather"/>.
            This class can't be inherited.
            </summary>
        </member>
        <member name="M:Zelda.Weather.RainyWeather.#ctor(Zelda.Weather.IWeatherMachine)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Weather.RainyWeather"/> class.
            </summary>
            <param name="weatherMachine">
            The IWeatherMachine that has triggered the new RainyWeather.
            </param>
        </member>
        <member name="M:Zelda.Weather.RainyWeather.Setup(System.Single,System.Single,System.Single,System.Single,Zelda.IZeldaServiceProvider)">
            <summary>
            Setups this RainyWeather.
            </summary>
            <param name="totalTime">
            The total this RainyWeather should last.
            </param>
            <param name="maxDensityEffect">
            The effect value at the peak of the RainyWeather.
            </param>
            <param name="startMaxDensityTime">
            The time (in seconds) on the time table of this RainyWeather the <paramref name="maxDensityEffect"/>
            is set as the current effect value.
            </param>
            <param name="endMaxDensityTime">
            The time (in seconds) on the time table of this RainyWeather the <paramref name="maxDensityEffect"/>
            is not set as the current effect value anymore.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Weather.RainyWeather.Start">
            <summary>
            Starts this RainyWeather.
            </summary>
        </member>
        <member name="M:Zelda.Weather.RainyWeather.Stop(System.Boolean)">
            <summary>
            Stops this RainyWeather.
            </summary>
            <param name="informWeatherMachine">
            States whether the <see cref="T:Zelda.Weather.WeatherMachine"/> that owns this IWeather
            should be informed that this IWeather has stopped.
            </param>
        </member>
        <member name="F:Zelda.Weather.RainyWeather.effect">
            <summary>
            The ParticleEffect that spawns the individual Particles.
            </summary>
        </member>
        <member name="F:Zelda.Weather.RainyWeather.effectOverlay">
            <summary>
            The ScrollingParticleEffectOverlay that is used to visualize this RainyWeather.
            </summary>
        </member>
        <member name="T:Zelda.Weather.SnowyWeather">
            <summary>
            Represents snowy <see cref="T:Zelda.Weather.IWeather"/>.
            This class can't be inherited.
            </summary>
        </member>
        <member name="F:Zelda.Weather.SnowyWeather.SnowSampleName">
            <summary>
            The name of the snow sound sample.
            </summary>
        </member>
        <member name="M:Zelda.Weather.SnowyWeather.#ctor(Zelda.Weather.IWeatherMachine)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Weather.SnowyWeather"/> class.
            </summary>
            <param name="weatherMachine">
            The IWeatherMachine that has triggered the new SnowyWeather.
            </param>
        </member>
        <member name="M:Zelda.Weather.SnowyWeather.Setup(System.Single,System.Single,System.Single,System.Single,Zelda.IZeldaServiceProvider)">
            <summary>
            Setups this SnowyWeather.
            </summary>
            <param name="totalTime">
            The total this SnowyWeather should last.
            </param>
            <param name="maxDensityEffect">
            The effect value at the peak of the SnowyWeather.
            </param>
            <param name="startMaxDensityTime">
            The time (in seconds) on the time table of this SnowyWeather the <paramref name="maxDensityEffect"/>
            is set as the current effect value.
            </param>
            <param name="endMaxDensityTime">
            The time (in seconds) on the time table of this SnowyWeather the <paramref name="maxDensityEffect"/>
            is not set as the current effect value anymore.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Weather.SnowyWeather.LoadSnowSample(Atom.Fmod.AudioSystem)">
            <summary>
            Loads the SnowSample that is playing in the background 
            while this SnowyyWeather is active.
            </summary>
            <param name="audioSystem">
            The AudioSystem that should be used to load the sample.
            </param>
        </member>
        <member name="M:Zelda.Weather.SnowyWeather.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this SnowyWeather.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Weather.SnowyWeather.UpdateSnowSample(System.Single)">
            <summary>
            Updates the volume of the snow sample.
            </summary>
            <param name="linearEffect">
            The current strength of this SnowyWeather.
            </param>
        </member>
        <member name="M:Zelda.Weather.SnowyWeather.Start">
            <summary>
            Starts this SnowyWeather.
            </summary>
        </member>
        <member name="M:Zelda.Weather.SnowyWeather.Stop(System.Boolean)">
            <summary>
            Stops this SnowyWeather.
            </summary>
            <param name="informWeatherMachine">
            States whether the <see cref="T:Zelda.Weather.WeatherMachine"/> that owns this IWeather
            should be informed that this IWeather has stopped.
            </param>
        </member>
        <member name="M:Zelda.Weather.SnowyWeather.StartPlayingSnowSample">
            <summary>
            Starts playing the snow sample.
            </summary>
        </member>
        <member name="M:Zelda.Weather.SnowyWeather.StopPlayingSnowSample">
            <summary>
            Stops playing the snow sample.
            </summary>
        </member>
        <member name="M:Zelda.Weather.SnowyWeather.Pause">
            <summary>
            Pauses this SnowyWeather.
            </summary>
        </member>
        <member name="M:Zelda.Weather.SnowyWeather.Unpause">
            <summary>
            Unpauses this SnowyWeather.
            </summary>
        </member>
        <member name="F:Zelda.Weather.SnowyWeather.effect">
            <summary>
            The ParticleEffect that spawns the individual Particles.
            </summary>
        </member>
        <member name="F:Zelda.Weather.SnowyWeather.effectOverlay">
            <summary>
            The ScrollingParticleEffectOverlay that is used to visualize this SnowyWeather.
            </summary>
        </member>
        <member name="F:Zelda.Weather.SnowyWeather.snowSound">
            <summary>
            The sound sample that gets played in the background while snowy weather is active.
            </summary>
        </member>
        <member name="F:Zelda.Weather.SnowyWeather.snowChannel">
            <summary>
            The sound channel that is playing the snowSound.
            </summary>
        </member>
        <member name="T:Zelda.Weather.IPauseableWeather">
            <summary>
            Represents an IWeather that can be paused/unpaused.
            </summary>
            <remarks>
            All currently active IPauseableWeather is paused/unpaused when a SceneChange occurrs.
            <para/>
            </remarks>
        </member>
        <member name="M:Zelda.Weather.IPauseableWeather.Pause">
            <summary>
            Pauses this IPauseableWeather.
            </summary>
        </member>
        <member name="M:Zelda.Weather.IPauseableWeather.Unpause">
            <summary>
            Unpauses this IPauseableWeather.
            </summary>
        </member>
        <member name="T:Zelda.Weather.IWeather">
            <summary> 
            Defines the interface of an object that simulates an ingame 'weather'.
            </summary>
        </member>
        <member name="M:Zelda.Weather.IWeather.Start">
            <summary>
            Starts this <see cref="T:Zelda.Weather.IWeather"/>.
            </summary>
        </member>
        <member name="M:Zelda.Weather.IWeather.Stop(System.Boolean)">
            <summary>
            Stops this <see cref="T:Zelda.Weather.IWeather"/>.
            </summary>
            <param name="informWeatherMachine">
            States whether the <see cref="T:Zelda.Weather.WeatherMachine"/> that owns this IWeather
            should be informed that this IWeather has stopped.
            </param>
        </member>
        <member name="M:Zelda.Weather.IWeather.Reset">
            <summary>
            Resets the state of this <see cref="T:Zelda.Weather.IWeather"/>.
            </summary>
        </member>
        <member name="T:Zelda.Weather.IWeatherCreator">
            <summary>
            Defines a mechanism that allows creation of new <see cref="T:Zelda.Weather.IWeather"/> of a specific type.
            </summary>
        </member>
        <member name="M:Zelda.Weather.IWeatherCreator.CreateWeather(Zelda.Weather.IWeatherMachine)">
            <summary>
            Creates a new instance of the IWeather this IWeatherCreator creates.
            </summary>
            <param name="weatherMachine">
            The IWeatherMachine for which the IWeather should be created for.
            </param>
            <returns>
            The <see cref="T:Zelda.Weather.IWeather"/> instances that make up the weather.
            </returns>
        </member>
        <member name="T:Zelda.Weather.IWeatherMachine">
            <summary>
            Controls the current IWeather in a ZeldaScene.
            </summary>
        </member>
        <member name="P:Zelda.Weather.IWeatherMachine.Scene">
            <summary>
            Gets the ZeldaScene whose IWeather is controlled by this IWeatherMachine.
            </summary>
        </member>
        <member name="P:Zelda.Weather.IWeatherMachine.Settings">
            <summary>
            Gets the <see cref="T:Zelda.Weather.IWeatherMachineSettings"/> of this IWeatherMachine.
            </summary>
        </member>
        <member name="M:Zelda.Weather.IWeatherMachine.OnWeatherStopped(Zelda.Weather.IWeather)">
            <summary>
            Called when an IWeather related to this IWeatherMachine has stopped.
            </summary>
            <param name="weather">
            The IWeather that has stopped.
            </param>
        </member>
        <member name="T:Zelda.Weather.IWeatherMachineSettings">
            <summary>
            Provides access to the settings used by a <see cref="T:Zelda.Weather.WeatherMachine"/> to create new IWeather.
            </summary>
        </member>
        <member name="P:Zelda.Weather.IWeatherMachineSettings.RainSettings">
            <summary>
            Gets or sets the IEmitterSettings that is applied to rain.
            </summary>
        </member>
        <member name="P:Zelda.Weather.IWeatherMachineSettings.SnowSettings">
            <summary>
            Gets or sets the IEmitterSettings that is applied to snow.
            </summary>
        </member>
        <member name="T:Zelda.Weather.WeatherMachineSettings">
            <summary>
            Encapsulates the settings used by a <see cref="T:Zelda.Weather.WeatherMachine"/> to create new IWeather.
            </summary>
        </member>
        <member name="P:Zelda.Weather.WeatherMachineSettings.RainSettings">
            <summary>
            Gets or sets the IEmitterSettings that are applied to rain.
            </summary>
        </member>
        <member name="P:Zelda.Weather.WeatherMachineSettings.SnowSettings">
            <summary>
            Gets or sets the IEmitterSettings that are applied to snow.
            </summary>
        </member>
        <member name="M:Zelda.Weather.WeatherMachineSettings.#ctor(Zelda.Weather.IWeatherMachineSettings)">
            <summary>
            Initializes a new instance of the WeatherMachineSettings class.
            </summary>
            <param name="defaultSettings">
            The settings that the new WeatherMachineSettings should copy.
            </param>
        </member>
        <member name="M:Zelda.Weather.WeatherMachineSettings.Serialize(Zelda.Saving.IZeldaSerializationContext)">
            <summary>
            Serializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the serialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="M:Zelda.Weather.WeatherMachineSettings.Deserialize(Zelda.Saving.IZeldaDeserializationContext)">
            <summary>
            Deserializes the data required to descripe this ISaveable.
            </summary>
            <param name="context">
            The context under which the deserialization process takes place.
            Provides access to required objects.
            </param>
        </member>
        <member name="F:Zelda.Weather.WeatherMachineSettings.rainSettings">
            <summary>
            The IEmitterSettings that are applied to new rainy IWeather.
            </summary>
        </member>
        <member name="F:Zelda.Weather.WeatherMachineSettings.snowSettings">
            <summary>
            The IEmitterSettings that are applied to new snowy IWeather.
            </summary>
        </member>
        <member name="F:Zelda.Weather.WeatherMachineSettings.DefaultRainSettings">
            <summary>
            Stores the default settings used by rainy IWeather.
            </summary>
        </member>
        <member name="F:Zelda.Weather.WeatherMachineSettings.DefaultSnowSettings">
            <summary>
            Stores the default settings used by snowy IWeather.
            </summary>
        </member>
        <member name="T:Zelda.Weather.WeatherMachine">
            <summary>
            The WeatherMachine manages the creation and updating of the <see cref="T:Zelda.Weather.IWeather"/> in a <see cref="T:Zelda.ZeldaScene"/>.
            </summary>
        </member>
        <member name="P:Zelda.Weather.WeatherMachine.IsActivated">
            <summary>
            Gets or sets a value indicating whether this WeatherMachine is currently activated.
            </summary>
        </member>
        <member name="P:Zelda.Weather.WeatherMachine.Scene">
            <summary>
            Gets the ZeldaScene whose IWeather is controlled by this WeatherMachine.
            </summary>
        </member>
        <member name="P:Zelda.Weather.WeatherMachine.Settings">
            <summary>
            Gets the <see cref="T:Zelda.Weather.IWeatherMachineSettings"/> of this WeatherMachine.
            </summary>
        </member>
        <member name="P:Zelda.Weather.WeatherMachine.HasActiveWeather">
            <summary>
            Gets a value indicating whether any weather effect is currently active.
            </summary>
        </member>
        <member name="M:Zelda.Weather.WeatherMachine.#ctor(Zelda.ZeldaScene,Zelda.IZeldaServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.Weather.WeatherMachine"/> class.
            </summary>
            <param name="scene">
            The ZeldaScene that owns the new <see cref="T:Zelda.Weather.WeatherMachine"/>.
            </param>
            <param name="serviceProvider">
            Provides fast access to game-related services.
            </param>
        </member>
        <member name="M:Zelda.Weather.WeatherMachine.CreateCreatorProvider(Zelda.Weather.Creators.IWeatherCreatorMap,Atom.Math.IRand)">
            <summary>
            Creates the IWeatherCreatorProvider to be used by the WeatherMachine.
            </summary>
            <param name="creators">
            The IWeatherCreatorMap that contains all the IWeatherCreators used by the new IWeatherCreatorProvider.
            </param>
            <param name="rand">
            A random number generator.
            </param>
            <returns>
            The IWeatherCreatorProvider to use.
            </returns>
        </member>
        <member name="M:Zelda.Weather.WeatherMachine.Update(Zelda.ZeldaUpdateContext)">
            <summary>
            Updates this <see cref="T:Zelda.Weather.WeatherMachine"/>.
            </summary>
            <param name="updateContext">
            The current ZeldaUpdateContext.
            </param>
        </member>
        <member name="M:Zelda.Weather.WeatherMachine.SetWeather``1">
            <summary>
            Sets the IWeather of this WeatherMachine to the IWeather created by the IWeatherCreator
            of the specified <typeparamref name="TWeatherCreator"/>.
            </summary>
            <typeparam name="TWeatherCreator">
            The type of the <see cref="T:Zelda.Weather.IWeatherCreator"/> to use.
            </typeparam>
            <returns>
            Returns true if the weather could be set;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Weather.WeatherMachine.SetWeather(System.Type)">
            <summary>
            Sets the IWeather of this WeatherMachine to the IWeather created by the IWeatherCreator
            of the given <paramref name="creatorType"/>.
            </summary>
            <param name="creatorType"> 
            The type of the <see cref="T:Zelda.Weather.IWeatherCreator"/> to use.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="creatorType"/> is null.
            </exception>
            <returns>
            Returns true if the weather could be set;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Weather.WeatherMachine.AddWeather(System.Type)">
            <summary>
            Adds the IWeather created by the IWeatherCreator
            of the given <paramref name="creatorType"/> to this WeatherMachine.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="creatorType"/> is null.
            </exception>
            <exception cref="T:Atom.NotFoundException">
            If the IWeatherCreator of the given <paramref name="creatorType"/>
            was not present in this WeatherMachine.
            </exception>
            <param name="creatorType"> 
            The type of the <see cref="T:Zelda.Weather.IWeatherCreator"/> to use.
            </param>
            <returns>
            Returns true if the Weather was successfully added;
            otherwise false.
            </returns>
        </member>
        <member name="M:Zelda.Weather.WeatherMachine.AddWeather(Zelda.Weather.IWeatherCreator)">
            <summary>
            Adds the IWeather created by the specified IWeatherCreator to this WeatherMachine.
            </summary>
            <param name="creator">
            The IWeatherCreator to create the IWeather with.
            </param>
        </member>
        <member name="M:Zelda.Weather.WeatherMachine.CreateNewWeather">
            <summary>
            Creates a new random IWeather effect,
            based on the current ingame month.
            </summary>
        </member>
        <member name="M:Zelda.Weather.WeatherMachine.NotifySceneChange(Zelda.ChangeType)">
            <summary>
            Notifies this WeatherMachine that a scene change has occured.
            </summary>
            <param name="changeType">
            States whether the current scene has changed away or to its current scene.
            </param>
        </member>
        <member name="M:Zelda.Weather.WeatherMachine.PauseCurrentWeather">
            <summary>
            Pauses the currently active IWeather.
            </summary>
            <seealso cref="T:Zelda.Weather.IPauseableWeather"/>
        </member>
        <member name="M:Zelda.Weather.WeatherMachine.UnpauseCurrentWeather">
            <summary>
            Unpauses the currently active IWeather.
            </summary>
            <seealso cref="T:Zelda.Weather.IPauseableWeather"/>
        </member>
        <member name="M:Zelda.Weather.WeatherMachine.SetRandomWeather(Atom.Math.RandMT)">
            <summary>
            Tells this WeatherMachine to change to some random Weather.
            </summary>
            <param name="rand">
            A random number generator.
            </param>
        </member>
        <member name="M:Zelda.Weather.WeatherMachine.StopCurrentWeather">
            <summary>
            Immidiately removes all of the current IWeather simulated by this WeatherMachine.
            </summary>
        </member>
        <member name="M:Zelda.Weather.WeatherMachine.OnWeatherStopped(Zelda.Weather.IWeather)">
            <summary>
            Gets called when an <see cref="T:Zelda.Weather.IWeather"/> has been stopped for this WeatherMachine.
            </summary>
            <param name="weather">
            The related IWeather instance.
            </param>
        </member>
        <member name="M:Zelda.Weather.WeatherMachine.RequestWeatherChange">
            <summary>
            Notifies this WeatherMachine that a change in IWeather is required.
            </summary>
        </member>
        <member name="F:Zelda.Weather.WeatherMachine.currentWeather">
            <summary>
            The list of currently active <see cref="T:Zelda.Weather.IWeather"/> StatusEffects.
            </summary>
        </member>
        <member name="F:Zelda.Weather.WeatherMachine.isNewWeatherRequested">
            <summary>
            States whether this WeatherMachine is going to create a new IWeather soon.
            </summary>
        </member>
        <member name="F:Zelda.Weather.WeatherMachine.timeToNextWeatherCreation">
            <summary>
            The time (in seconds) left until this WeatherMachine is
            going to create a new IWeather based on the current IWeatherCreator Hat.
            </summary>
            <remarks>
            This value is only relevant when isUpdatingNewWeather is true.
            </remarks>
        </member>
        <member name="F:Zelda.Weather.WeatherMachine.isActivated">
            <summary>
            States whether this WeatherMachine is currently activated.
            </summary>
        </member>
        <member name="F:Zelda.Weather.WeatherMachine.creatorMap">
            <summary> 
            Provides access to all known IWeatherCreators.
            </summary>
        </member>
        <member name="F:Zelda.Weather.WeatherMachine.creatorProvider">
            <summary>
            Provides a mechanism that is used to get the IWeatherCreator
            that should be used when creating new IWeather.
            </summary>
        </member>
        <member name="F:Zelda.Weather.WeatherMachine.scene">
            <summary>
            Identifies the <see cref="T:Zelda.ZeldaScene"/> that owns this WeatherMachine.
            </summary>
        </member>
        <member name="F:Zelda.Weather.WeatherMachine.settings">
            <summary>
            Encapsulates the settings this WeatherMachine and its IWeatherCreators use to create new IWeather.
            </summary>
        </member>
        <member name="F:Zelda.Weather.WeatherMachine.serviceProvider">
            <summary>
            Provides fast access to game-related services.
            </summary>
        </member>
        <member name="F:Zelda.Weather.WeatherMachine.DefaultWeatherCreatorProvider">
            <summary>
            Caches the IWeatherCreatorProvider that is used by default.
            </summary>
        </member>
        <member name="T:Zelda.ZeldaDrawContext">
            <summary>
            Defines the <see cref="T:Atom.IDrawContext"/> used by the game.
            This class can't be inherited.
            </summary>
        </member>
        <member name="P:Zelda.ZeldaDrawContext.Camera">
            <summary>
            Gets the currently active <see cref="T:Zelda.Entities.ZeldaCamera"/>.
            </summary>
        </member>
        <member name="M:Zelda.ZeldaDrawContext.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.ZeldaDrawContext"/> class.
            </summary>
            <param name="device">
            The XNA graphics device.
            </param>
        </member>
        <member name="T:Zelda.ZeldaUpdateContext">
            <summary>
            Defines the <see cref="T:Atom.IUpdateContext"/> used by the game.
            </summary>
        </member>
        <member name="P:Zelda.ZeldaUpdateContext.IsPaused">
            <summary>
            Gets or sets a value indicating whether the game is currently paused.
            </summary>
        </member>
        <member name="P:Zelda.ZeldaUpdateContext.IsMainUpdate">
            <summary>
            Gets a value indicating whether the current update is a main update;
            or a silent behind the scene update.
            </summary>
            <remarks>
            The last inactive scene is updated using non-main updates for a specific time before is really 'expire'.
            This is used to simulate a continous world.
            </remarks>
        </member>
        <member name="P:Zelda.ZeldaUpdateContext.IsRunningSlowly">
            <summary>
            Gets a value indicating whether the game is currently running slowly.
            </summary>
        </member>
        <member name="M:Zelda.ZeldaUpdateContext.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Zelda.ZeldaUpdateContext"/> class.
            </summary>
            <param name="isMainUpdate">
            States whether updates done under the new ZeldaUpdateContext are main updates;
            or a silent behind the scene updates.
            </param>
        </member>
        <member name="F:Zelda.ZeldaUpdateContext.isMainUpdate">
            <summary>
            States whether updates done under this ZeldaUpdateContext are main updates;
            or a silent behind the scene updates.
            </summary>
        </member>
        <member name="T:Atom.Xna.Effects.PostProcess.DebugBloom">
            <summary>
            Implements a non-HDR bloom post-process effect.
            </summary>
        </member>
        <member name="T:Atom.Xna.Effects.PostProcess.DebugBloom.IntermediateBuffer">
            <summary>
            Enumerates what kind of intermediate buffers are shown
            that make up the Bloom effect.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.PostProcess.DebugBloom.IntermediateBuffer.PreBloom">
            <summary>
            The buffer before any bloom effect is applied.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.PostProcess.DebugBloom.IntermediateBuffer.BlurredHorizontally">
            <summary>
            The buffer that contains the horizontally blurred scene.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.PostProcess.DebugBloom.IntermediateBuffer.BlurredBothWays">
            <summary>
            The buffer that contains the horizontally and vertically blurred scene.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.PostProcess.DebugBloom.IntermediateBuffer.FinalResult">
            <summary>
            The buffer that contains the result of the Bloom effect.
            </summary>
        </member>
        <member name="P:Atom.Xna.Effects.PostProcess.DebugBloom.ShowBuffer">
            <summary>
            Gets or sets what buffers of the Bloom effect are shown.
            </summary>
        </member>
        <member name="P:Atom.Xna.Effects.PostProcess.DebugBloom.Settings">
            <summary>
            Gets or sets the settings used by this Bloom effect.
            </summary>
        </member>
        <member name="M:Atom.Xna.Effects.PostProcess.DebugBloom.#ctor(Atom.Xna.Effects.IEffectLoader,Atom.Xna.IRenderTarget2DFactory,Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)">
            <summary>
            Initializes a new instance of the Bloom class.
            </summary>        
            <param name="effectLoader">
            Provides a mechanism that allows loading of effect assets.
            </param>
            <param name="renderTargetFactory">
            Provides a mechanism that allows the creation of render targets.
            </param>
            <param name="deviceService">
            Provides access to the <see cref="T:Microsoft.Xna.Framework.Graphics.GraphicsDevice"/>.
            </param>
        </member>
        <member name="M:Atom.Xna.Effects.PostProcess.DebugBloom.LoadContent">
            <summary>
            Loads the content required by this Bloom effect.
            </summary>
        </member>
        <member name="M:Atom.Xna.Effects.PostProcess.DebugBloom.PostProcess(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.RenderTarget2D,Atom.Xna.IXnaDrawContext)">
            <summary>
            Applies this IPostProcessEffect.
            </summary>
            <param name="sourceTexture">
            The texture to post-process.
            </param>
            <param name="result">
            The RenderTarget to which to render the result of this PostProcessEffect.
            </param>
            <param name="drawContext">
            The context under which the drawing operation occurrs.
            </param>
        </member>
        <member name="M:Atom.Xna.Effects.PostProcess.DebugBloom.DrawQuad(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.RenderTarget2D,Microsoft.Xna.Framework.Graphics.Effect,Atom.Xna.Effects.PostProcess.DebugBloom.IntermediateBuffer)">
            <summary>
            Helper for drawing a texture into a rendertarget, using
            a custom shader to apply postprocessing effects.
            </summary>
            <param name="texture">
            The texture to draw.
            </param>
            <param name="renderTarget">
            The target of the drawing operation.
            </param>
            <param name="effect">
            The effect to apply when drawing the texture.
            </param>
            <param name="currentBuffer">
            States what buffer currently is drawn using this DrawQuad operation.
            </param>
        </member>
        <member name="M:Atom.Xna.Effects.PostProcess.DebugBloom.DrawQuad(Microsoft.Xna.Framework.Graphics.Texture2D,System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.Effect,Atom.Xna.Effects.PostProcess.DebugBloom.IntermediateBuffer)">
            <summary>
            Helper for drawing a texture into the current rendertarget,
            using a custom shader to apply postprocessing effects.
            </summary>
            <param name="texture">
            The texture to draw.
            </param>
            <param name="width">
            The width of the quad.
            </param>
            <param name="height">
            The height of the quad.
            </param>
            <param name="effect">
            The effect to apply when drawing the texture.
            </param>
            <param name="currentBuffer">
            States what buffer currently is drawn using this DrawQuad operation.
            </param>
        </member>
        <member name="M:Atom.Xna.Effects.PostProcess.DebugBloom.SetBlurEffectParameters(System.Single,System.Single)">
            <summary>
            Computes sample weightings and texture coordinate offsets
            for one pass of a separable gaussian blur filter.
            </summary>
        </member>
        <member name="M:Atom.Xna.Effects.PostProcess.DebugBloom.ComputeGaussian(System.Single)">
            <summary>
            Evaluates a single point on the gaussian falloff curve.
            Used for setting up the blur filter weightings.
            </summary>
            <param name="n">
            The index of the entry to calculate.
            </param>
            <returns>
            The gaussian value for the specified index and
            current blurring settings.
            </returns>
        </member>
        <member name="M:Atom.Xna.Effects.PostProcess.DebugBloom.DisposeUnmanagedResources">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:Atom.Xna.Effects.PostProcess.DebugBloom.DisposeManagedResources">
            <summary>
            Releases all managed resources.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.PostProcess.DebugBloom.spriteBatch">
            <summary>
            The SpriteBatch that is used to draw the individual buffers
            of this Bloom effect.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.PostProcess.DebugBloom.bloomExtractEffect">
            <summary>
            The effect that is used to extract the area to bloom.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.PostProcess.DebugBloom.bloomCombineEffect">
            <summary>
            The effect that is used to combine the input scene with the extracted bloom.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.PostProcess.DebugBloom.gaussianBlurEffect">
            <summary>
            The effect that is used to blur the bloomed result.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.PostProcess.DebugBloom.parameterWeights">
            <summary>
            The parameter that sets the blurring weights.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.PostProcess.DebugBloom.parameterOffsets">
            <summary>
            The parameter that sets the blurring offsets.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.PostProcess.DebugBloom.parameterBloomThreshold">
            <summary>
            The parameter that sets the bloom treshold of this bloom effect.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.PostProcess.DebugBloom.parameterBloomIntensity">
            <summary>
            The parameter that sets the bloom intensity of this bloom effect.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.PostProcess.DebugBloom.parameterBaseIntensity">
            <summary>
            The parameter that sets the base intensity of this bloom effect.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.PostProcess.DebugBloom.parameterBloomSaturation">
            <summary>
            The parameter that sets the bloom saturation of this bloom effect.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.PostProcess.DebugBloom.parameterBaseSaturation">
            <summary>
            The parameter that sets the base saturation of this bloom effect.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.PostProcess.DebugBloom.renderTarget1">
            <summary>
            The second render target that is used when rendering this Bloom effect.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.PostProcess.DebugBloom.renderTarget2">
            <summary>
            The first render target that is used when rendering this Bloom effect.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.PostProcess.DebugBloom.settings">
            <summary>
            The current settings used by this Bloom effect.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.PostProcess.DebugBloom.showBuffer">
            <summary>
            States what buffer this Bloom effect outputs to the screen.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.PostProcess.DebugBloom.device">
            <summary>
            The GraphicsDevice used to draw this Bloom effect.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.PostProcess.DebugBloom.effectLoader">
            <summary>
            Provides a mechanism that loads Effects.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.PostProcess.DebugBloom.renderTargetFactory">
            <summary>
            Provides a mechanism that creates new RenderTargets.
            </summary>
        </member>
        <member name="F:Atom.Xna.Effects.PostProcess.DebugBloom.deviceService">
            <summary>
            Provides access to the Xna GraphicsDevice.
            </summary>
        </member>
    </members>
</doc>
