<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Atom</name>
    </assembly>
    <members>
        <member name="T:Atom.Anonymous">
            <summary>
            Contains static helper methods related to anonymous types.
            </summary>
        </member>
        <member name="M:Atom.Anonymous.CreateList``1(System.Func{``0})">
             <summary>
             Creates a new IList{a'} of the given anonymous type.
             </summary>
             <example>
             <code>
             var list = Anonymous.CreateList( 
                 () => new { Name = default( string ), Id = default( int ) }
             );
            
             list.Add( new { Name = "Meow", Id = 123 } );
             list.Add( new { Name = "Cat", Id = 555 } );
             list.Add( new { Name = "Dies", Id = -1 } ); 
             </code>
             </example>
             <typeparam name="T">
             The type of the list. This is inferred.
             </typeparam>
             <param name="template">
             The function that returns schema object that descripes the anonymous type.
             </param>
             <returns>
             The newly created IList{a'}.
             </returns>
        </member>
        <member name="T:Atom.ChangedValue`1">
            <summary>
            Defines a container that stores information on the change of a value.
            </summary>
            <remarks>
            These are no <see cref="T:System.EventArgs"/> because of perfomance reasons.
            </remarks>
            <typeparam name="T">
            The type of the value beeing changed.
            </typeparam>
        </member>
        <member name="P:Atom.ChangedValue`1.OldValue">
            <summary>
            Gets the old value.
            </summary>
            <value>The old value; before the change.</value>
        </member>
        <member name="P:Atom.ChangedValue`1.NewValue">
            <summary>
            Gets the new value.
            </summary>
            <value>The new value; after the change.</value>
        </member>
        <member name="M:Atom.ChangedValue`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.ChangedValue`1"/> struct.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Atom.ChangedValue`1.GetHashCode">
            <summary>
            Returns the hash code of this <see cref="T:Atom.ChangedValue`1"/> instance.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Atom.ChangedValue`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is
            equal to this <see cref="T:Atom.ChangedValue`1"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to test this instance against.</param>
            <returns>true if they are equal; otherwise false.</returns>
        </member>
        <member name="M:Atom.ChangedValue`1.Equals(Atom.ChangedValue{`0})">
            <summary>
            Determines whether the specified <see cref="T:Atom.ChangedValue`1"/> is
            equal to this <see cref="T:Atom.ChangedValue`1"/>.
            </summary>
            <param name="other">The <see cref="T:Atom.ChangedValue`1"/> to test this instance against.</param>
            <returns>true if they are equal; otherwise false.</returns>
        </member>
        <member name="M:Atom.ChangedValue`1.op_Equality(Atom.ChangedValue{`0},Atom.ChangedValue{`0})">
            <summary>
            Returns whether the specified <see cref="T:Atom.ChangedValue`1"/> instances are equal.
            </summary>
            <param name="left">The <see cref="T:Atom.ChangedValue`1"/> instance on the left side of the equation.</param>
            <param name="right">The <see cref="T:Atom.ChangedValue`1"/> instance on the right side of the equation.</param>
            <returns>true if they are equal; otherwise false.</returns>
        </member>
        <member name="M:Atom.ChangedValue`1.op_Inequality(Atom.ChangedValue{`0},Atom.ChangedValue{`0})">
            <summary>
            Returns whether the specified <see cref="T:Atom.ChangedValue`1"/> instances are not equal.
            </summary>
            <param name="left">The <see cref="T:Atom.ChangedValue`1"/> instance on the left side of the equation.</param>
            <param name="right">The <see cref="T:Atom.ChangedValue`1"/> instance on the right side of the equation.</param>
            <returns>true if they are not equal; otherwise false.</returns>
        </member>
        <member name="M:Atom.ChangedValue`1.ToString">
            <summary> 
            Returns a string representation of this <see cref="T:Atom.ChangedValue`1"/>.
            </summary>
            <returns>
            A human readable string representation of this <see cref="T:Atom.ChangedValue`1"/>.
            </returns>
        </member>
        <member name="F:Atom.ChangedValue`1.oldValue">
            <summary>
            The old value; before the change.
            </summary>
        </member>
        <member name="F:Atom.ChangedValue`1.newValue">
            <summary>
            The new value; after the change.
            </summary>
        </member>
        <member name="T:Atom.Collections.ArrayUtilities">
            <summary>
            Provides static array-related utility methods.
            </summary>
        </member>
        <member name="M:Atom.Collections.ArrayUtilities.CreateMultiDimensional``1(System.Int32,System.Int32,``0[])">
            <summary>
            Creates a multi-dimensional array that contains the same elements as the 
            given an one-dimensional array of elements and the size of the array to create.
            </summary>
            <typeparam name="T">
            The type of the elements the arrays contain.
            </typeparam>
            <param name="rows">
            The number of rows the new multi-dimensional array should have.
            </param>
            <param name="columns">
            The number of columns the new multi-dimensional array should have.
            </param>
            <param name="elements">
            The values that should be copied over into the new multi dimensional array.
            </param>
            <returns>
            The newly created multi-dimensional array.
            </returns>
        </member>
        <member name="M:Atom.Collections.ArrayUtilities.RemoveAt``1(``0[]@,System.Int32)">
            <summary>
            Removes the array element at the given <paramref name="index"/>.
            </summary>
            <typeparam name="T">
            The type of the elements the arrays contain.
            </typeparam>
            <param name="array">
            The array to manipulate.
            </param>
            <param name="index">
            The zero-based index of the element to remove.
            </param>
        </member>
        <member name="M:Atom.Collections.ArrayUtilities.InsertAt``1(``0[]@,System.Int32,``0)">
            <summary>
            Insters an <paramref name="item"/> at the given zero-based <paramref name="index"/> into the given <paramref name="array"/>.
            </summary>
            <typeparam name="T">
            The type of the elements the arrays contain.
            </typeparam>
            <param name="array">
            The array to manipulate.
            </param>
            <param name="index">
            The zero-based index into the array.
            </param>
            <param name="item">
            The item to insert.
            </param>
        </member>
        <member name="T:Atom.Collections.Association`2">
            <summary>
            The Association performs the same function as a <see cref="T:System.Collections.Generic.KeyValuePair`2"/>,
            but allows the <see cref="P:Atom.Collections.Association`2.Key"/> and <see cref="P:Atom.Collections.Association`2.Value"/> properties to be written to
            and is a reference type.
            </summary>
            <typeparam name="TKey">The type of the key for the association.</typeparam>
            <typeparam name="TValue">The type of the value for the association.</typeparam>
        </member>
        <member name="P:Atom.Collections.Association`2.Key">
            <summary>
            Gets or sets the key of this <see cref="T:Atom.Collections.Association`2"/>.
            </summary>
            <value>
            The key that is associated to the <see cref="P:Atom.Collections.Association`2.Value"/>.
            </value>
        </member>
        <member name="P:Atom.Collections.Association`2.Value">
            <summary>
            Gets or sets the value of this <see cref="T:Atom.Collections.Association`2"/>.
            </summary>
            <value>
            The value that is associated to the <see cref="P:Atom.Collections.Association`2.Key"/>.
            </value>
        </member>
        <member name="M:Atom.Collections.Association`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Collections.Association`2"/> class.
            </summary>
            <param name="key">
            The key that is associated to the <paramref name="value"/>.
            </param>
            <param name="value">
            The value that is associated to the <paramref name="key"/>.
            </param>
        </member>
        <member name="M:Atom.Collections.Association`2.ToKeyValuePair">
            <summary>
            Construct a KeyValuePair{TKey, TValue} object from this Association{TKey, TValue}.
            </summary>
            <returns>A key value pair representation of this <see cref="T:Atom.Collections.Association`2"/>.</returns>
        </member>
        <member name="M:Atom.Collections.Association`2.GetHashCode">
            <summary>
            Returns the hash code of the Association&lt;TKey, TValue&gt;.
            </summary>
            <returns> The compined hashcode of all objects. </returns>
        </member>
        <member name="M:Atom.Collections.Association`2.ToString">
            <summary> 
            Returns a string representation of this <see cref="T:Atom.Collections.Association`2"/>.
            </summary>
            <returns>
            A string in the format "Association( {0} -> {1} )".
            </returns>
        </member>
        <member name="T:Atom.Collections.Comparers.AssociationKeyComparer`2">
            <summary>
            Defines a comparer for comparing keys using the <see cref="T:Atom.Collections.Association`2"/> class.
            This class can't be inherited.
            </summary>
            <typeparam name="TKey">The type of the key for the association. Must inherit from <see cref="T:System.IComparable"/>. </typeparam>
            <typeparam name="TValue">The type of the value for the association.</typeparam>
        </member>
        <member name="M:Atom.Collections.Comparers.AssociationKeyComparer`2.Compare(Atom.Collections.Association{`0,`1},Atom.Collections.Association{`0,`1})">
            <summary>
            Compares two Associations and returns a value indicating whether one is less than,
            equal to, or greater than the other.
            </summary>
            <param name="x">The first Association{Key, TValue} to compare.</param>
            <param name="y">The second Association{Key, TValue} to compare.</param>
            <returns>
            Value Condition Less than zero x is less than y. 
            Zero x equals y.
            Greater than zero x is greater than y.
            </returns>
        </member>
        <member name="T:Atom.Collections.Comparers.ReverseComparer`1">
            <summary>
            A comparer that wraps the IComparer interface to reproduce the opposite comparison result.
            This class can't be inherited.
            </summary>
            <typeparam name="T">
            The type of the item the comparer can compare.
            </typeparam>
        </member>
        <member name="P:Atom.Collections.Comparers.ReverseComparer`1.Comparer">
            <summary>
            Gets or sets the comparer used in this instance.
            </summary>
            <value>The comparer.</value>
        </member>
        <member name="M:Atom.Collections.Comparers.ReverseComparer`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Collections.Comparers.ReverseComparer`1"/> class.
            </summary>
        </member>
        <member name="M:Atom.Collections.Comparers.ReverseComparer`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Collections.Comparers.ReverseComparer`1"/> class.
            </summary>
            <param name="comparer">
            The comparer to reverse.
            </param>
        </member>
        <member name="M:Atom.Collections.Comparers.ReverseComparer`1.Compare(`0,`0)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            Less than zero, if x is less than y.
            Zero if x equals y.
            Greater than zero if x is greater than y.
            </returns>
        </member>
        <member name="F:Atom.Collections.Comparers.ReverseComparer`1.comparer">
            <summary>
            The comparer that is reversed by this ReverseComparer.
            </summary>
        </member>
        <member name="T:Atom.Collections.Comparers.TupleItem1Comparer`2">
            <summary>
            A comparer for comparing the first object of <see cref="T:System.Tuple`2"/>s.
            </summary>
            <typeparam name="TFirst">
            The type of the first object.
            </typeparam>
            <typeparam name="TSecond">
            The type of the second object.
            </typeparam>
        </member>
        <member name="M:Atom.Collections.Comparers.TupleItem1Comparer`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Collections.Comparers.TupleItem1Comparer`2"/> class.
            </summary>
        </member>
        <member name="M:Atom.Collections.Comparers.TupleItem1Comparer`2.Compare(System.Tuple{`0,`1},System.Tuple{`0,`1})">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            Value Condition Less than zerox is less than y.Zerox equals y.Greater than zerox is greater than y.
            </returns>
        </member>
        <member name="T:Atom.Collections.Comparers.TupleItem2Comparer`2">
            <summary>
            A comparer for comparing the second object of <see cref="T:System.Tuple`2"/>s.
            This is a sealed class.
            </summary>
            <typeparam name="TFirst">
            The type of the first object.
            </typeparam>
            <typeparam name="TSecond">
            The type of the second object.
            </typeparam>
        </member>
        <member name="M:Atom.Collections.Comparers.TupleItem2Comparer`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Collections.Comparers.TupleItem2Comparer`2"/> class.
            </summary>
        </member>
        <member name="M:Atom.Collections.Comparers.TupleItem2Comparer`2.Compare(System.Tuple{`0,`1},System.Tuple{`0,`1})">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            Value Condition Less than zerox is less than y.Zerox equals y.Greater than zerox is greater than y.
            </returns>
        </member>
        <member name="T:Atom.Collections.ArrayExtensions">
            <summary>
            Defines extension methods for arrays.
            </summary>
        </member>
        <member name="M:Atom.Collections.ArrayExtensions.ElementsEqual``1(``0[],``0[])">
            <summary>
            Gets a value indicating whether the elements of the specified arrays are equal; 
            using the default EqualityComparer{T}.
            </summary>
            <typeparam name="T">
            The type of the elements the arrays contain.
            </typeparam>
            <param name="array">
            The first array.
            </param>
            <param name="otherArray">
            The second sequence.
            </param>
            <returns>
            true if the elements are equal;
            otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Collections.ArrayExtensions.ElementsEqual``1(``0[],``0[],System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Gets a value indicating whether the elements of the specified arrays are equal; 
            using the default EqualityComparer{T}.s
            </summary>
            <typeparam name="T">
            The type of the elements the arrays contain.
            </typeparam>
            <param name="array">
            The first array.
            </param>
            <param name="otherArray">
            The second sequence.
            </param>
            <param name="comparer">
            The IEqualityComparer{T} that should be used when comparing elements of the given arrays.
            </param>
            <returns>
            true if the elements are equal;
            otherwise false.
            </returns>
        </member>
        <member name="T:Atom.Collections.CollectionExtensions">
            <summary>
            Defines extension methods for the ICollection{T} interface.
            </summary>
        </member>
        <member name="M:Atom.Collections.CollectionExtensions.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the specified elements to the end of the System.Collections.Generic.ICollection&lt;T&gt;.
            </summary>
            <typeparam name="T">
            The type of elements in the collection.
            </typeparam>
            <param name="collection">
            The collection to which items should be added.
            </param>
            <param name="items"> 
            The elements that should be added to the end of the ICollection&lt;T&gt;.
            </param>
        </member>
        <member name="M:Atom.Collections.CollectionExtensions.Replace``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Replaces the items in the specified collections with the specified items.
            </summary>
            <typeparam name="T">
            The type of elements in the collection.
            </typeparam>
            <param name="collection">
            The collection to modify.
            </param>
            <param name="items">
            The items the collection should contain.
            </param>
        </member>
        <member name="T:Atom.Collections.EnumerableExtensions">
            <summary>
            Defines extension methods for the IEnumerable{T} interface.
            </summary>
        </member>
        <member name="M:Atom.Collections.EnumerableExtensions.Concat``3(System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2})">
            <summary>
            Concatenates two sequences.
            </summary>
            <typeparam name="TDestination">
            The type of the elements in the destination sequence.
            </typeparam>
            <typeparam name="TFirst">
            The type of the elements in the first sequence.
            </typeparam>
            <typeparam name="TSecond">
            The type of the elements in the second sequence.
            </typeparam>
            <param name="first">
            The first sequence to concatenate.
            </param>
            <param name="second">
            The sequence to concatenate to the first sequence.
            </param>
            <returns>
            An System.Collections.Generic.IEnumerable{TDestination} that contains the
            concatenated elements of the two input sequences.
            </returns>
        </member>
        <member name="M:Atom.Collections.EnumerableExtensions.Concat``3(System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Converter{``1,``0},System.Converter{``2,``0})">
            <summary>
            Concatenates two sequences.
            </summary>
            <typeparam name="TDestination">
            The type of the elements in the destination sequence.
            </typeparam>
            <typeparam name="TFirst">
            The type of the elements in the first sequence.
            </typeparam>
            <typeparam name="TSecond">
            The type of the elements in the second sequence.
            </typeparam>
            <param name="first">
            The first sequence to concatenate.
            </param>
            <param name="second">
            The sequence to concatenate to the first sequence.
            </param>
            <param name="firstConverter">
            The converter that should be used to convert items of type TFirst to TDestination.
            </param>
            <param name="secondConverter">
            The converter that should be used to convert items of type TSecond to TDestination.
            </param>
            <returns>
            An System.Collections.Generic.IEnumerable{TDestination} that contains the
            concatenated elements of the two input sequences.
            </returns>
        </member>
        <member name="M:Atom.Collections.EnumerableExtensions.Cast``2(System.Collections.Generic.IEnumerable{``0},System.Converter{``0,``1})">
            <summary>
            Conveters the elements of the specified sequence into another sequence.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the source sequence.
            </typeparam>
            <typeparam name="TResult">
            The type of the elements in the resulting sequence.
            </typeparam>
            <param name="sequence">
            The input sequence.
            </param>
            <param name="converter">
            The conversion method used to convert every single element.
            </param>
            <returns>
            A new sequence containing the converted elements of the source sequence.
            </returns>
        </member>
        <member name="M:Atom.Collections.EnumerableExtensions.CreateFittingList``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates a new List{T} that can hold all elements of the given sequence.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the source sequence.
            </typeparam>
            <typeparam name="TResult">
            The type of the elements in the resulting list.
            </typeparam>
            <param name="sequence">
            The input sequence.
            </param>
            <returns>
            A new, empty, List{TResult}.
            </returns>
        </member>
        <member name="M:Atom.Collections.EnumerableExtensions.HasDistinctElements``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets a value indicating whether the specified sequence contains
            only distinct elements using the <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/>
            </summary>
            <typeparam name="T">
            The type of the elements.
            </typeparam>
            <param name="sequence">
            The input sequence of elements.
            </param>
            <returns>
            true if all values in the specified sequence are different;
            otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Collections.EnumerableExtensions.HasDistinctElements``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Gets a value indicating whether the specified sequence contains
            only distinct elements.
            </summary>
            <typeparam name="T">
            The type of the elements.
            </typeparam>
            <param name="sequence">
            The input sequence of elements.
            </param>
            <param name="comparer">
            The IEqualityComparer{T} that should be used.
            </param>
            <returns>
            true if all values in the specified sequence are different;
            otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Collections.EnumerableExtensions.ElementsEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets a value indicating whether the specified sequences are equal; 
            using the default EqualityComparer{T}.
            </summary>
            <typeparam name="T">
            The type of the elements in the sequences.
            </typeparam>
            <param name="sequence">
            The first sequence.
            </param>
            <param name="otherSequence">
            The second sequence.
            </param>
            <returns>
            true if the elements are equal;
            otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Collections.EnumerableExtensions.ElementsEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Gets a value indicating whether the specified sequences are equal; 
            using the specified IEqualityComparer{T}.
            </summary>
            <typeparam name="T">
            The type of the elements in the sequences.
            </typeparam>
            <param name="sequence">
            The first sequence.
            </param>
            <param name="otherSequence">
            The second sequence.
            </param>
            <param name="comparer">
            The comparer to use.
            </param>
            <returns>
            true if the elements are equal;
            otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Collections.EnumerableExtensions.Contains``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether a sequence contains all elements of another sequence
            by using the default equality comparer.
            </summary>
            <typeparam name="T">
            The type of elements in the sequence.
            </typeparam>
            <param name="source">
            A sequence in which locate the values.
            </param>
            <param name="elements">
            A sequence of values to locate.
            </param>
            <returns>
            true if the specified source sequence contains all elements of the specified sequence;
            otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Collections.EnumerableExtensions.ContainsAny``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether a sequence contains any of the elements of another sequence
            by using the default equality comparer.
            </summary>
            <typeparam name="T">
            The type of elements in the sequence.
            </typeparam>
            <param name="source">
            A sequence in which locate the values.
            </param>
            <param name="elements">
            A sequence of values to locate.
            </param>
            <returns>
            true if the specified source sequence contains all elements of the specified sequence;
            otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Collections.EnumerableExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Gets the zero-based index of element that fulfills the specified <paramref name="predicate"/>.
            </summary>
            <typeparam name="T">
            The type of the elements in the sequence.
            </typeparam>
            <param name="sequence">
            The input sequence.
            </param>
            <param name="predicate">
            The predicate to check for.
            </param>
            <returns>
            The zero-based index of the element that first fulfills the specified predicate;
            -or- -1 if no element has fulfilled the predicate.
            </returns>
        </member>
        <member name="M:Atom.Collections.EnumerableExtensions.AtLeast``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Predicate{``0})">
            <summary>
            Verifies that the given predicate holds atleast <paramref name="count"/> times over this <paramref name="sequence"/>.
            </summary>
            <typeparam name="T">
            The type of the elements to query over.
            </typeparam>
            <param name="sequence">
            The sequence to query.
            </param>
            <param name="count">
            The minimum number of times the predicate must hold.
            </param>
            <param name="predicate">
            The predicate to verify.
            </param>
            <returns>
            True if the predicate holds atleast count times; -or- otherwise false.
            </returns>
        </member>
        <member name="T:Atom.Collections.ListExtensions">
            <summary>
            Defines extension methods for the IList{T} interface.
            </summary>
        </member>
        <member name="M:Atom.Collections.ListExtensions.SwapItems``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            Swaps the items at the given zero-based indices of this IList{T}.
            </summary>
            <typeparam name="T">
            The type of elements in the list.
            </typeparam>
            <param name="list">
            The list to modify.
            </param>
            <param name="indexA">
            The zero-based index of the first element to swap.
            </param>
            <param name="indexB">
            The zero-based index of the second element to swap.
            </param>
        </member>
        <member name="M:Atom.Collections.ListExtensions.AsReadOnly``1(System.Collections.Generic.IList{``0})">
            <summary>
            Returns a read-only instance of this <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <typeparam name="T">
            The type of elements in the list.
            </typeparam>
            <param name="list">
            The list to wrap.
            </param>
            <returns>
            A new read-only instance of this <see cref="T:System.Collections.Generic.IList`1"/>.
            </returns>
        </member>
        <member name="T:Atom.Collections.FastMultiMap`2">
            <summary>
            Represents a dictionary that maps keys onto lists of elements.
            </summary>
            <remarks>
            The FastMultiMap exposes some implementation details and provides less flexability
            compared to the <see cref="T:Atom.Collections.MultiMap`2"/> class.
            In exchange the amount of virtual function calls are reduced/eleminated.
            </remarks>
            <typeparam name="TKey">
            The type of the key that is associated with a list of elements.
            </typeparam>
            <typeparam name="TElement">
            The type of elements.
            </typeparam>
        </member>
        <member name="P:Atom.Collections.FastMultiMap`2.Count">
            <summary>
            Gets the number of key/value association pairs in this FastMultiMap&lt;TKey,TElement&gt;.
            </summary>
            <value>
            The number of key/value association pairs in this FastMultiMap&lt;TKey,TElement&gt;.
            </value>
        </member>
        <member name="P:Atom.Collections.FastMultiMap`2.Item(`0)">
            <summary>
            Gets the elements that are associated with the given <paramref name="key"/>.
            </summary>
            <param name="key">
            The key of the desired sequence of values.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/> sequence of values 
            indexed by the specified key.
            </returns>
        </member>
        <member name="M:Atom.Collections.FastMultiMap`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Collections.FastMultiMap`2"/> class.
            </summary>
        </member>
        <member name="M:Atom.Collections.FastMultiMap`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Collections.FastMultiMap`2"/> class.
            </summary>
            <param name="capacity">
            The initial number of elements the new FastMultiMap{TKey, TElement} can contain.
            </param>
        </member>
        <member name="M:Atom.Collections.FastMultiMap`2.Add(`0,`1)">
            <summary>
            Adds the specified <paramref name="value"/> under the specified <paramref name="key"/>
            to this FastMultiMap{TKey, TElement}.
            </summary>
            <param name="key">
            The key the specified <paramref name="value"/> should be associated with.
            </param>
            <param name="value">
            The value to add to this FastMultiMap{TKey, TElement}.
            </param>
        </member>
        <member name="M:Atom.Collections.FastMultiMap`2.Remove(`0,`1)">
            <summary>
            Tries to remove the specified key/value pair from this FastMultiMap{TKey, TElement}.
            </summary>
            <param name="key">
            The key that is associated with the specified <paramref name="value"/>.
            </param>
            <param name="value">
            The value to remove.
            </param>
            <returns>
            true if the specified key/value pair was removed from this FastMultiMap{TKey, TElement};
            otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Collections.FastMultiMap`2.TryGet(`0,System.Collections.Generic.List{`1}@)">
            <summary>
            Gets the elements that are associated with the specified <paramref name="key"/>.
            </summary>
            <param name="key">
            The key to lookup.
            </param>
            <param name="elements">
            When this method returns, contains the elements associated
            with the specified <paramref name="key"/>.
            </param>
            <returns>
            true if there exists any element under the specified <paramref name="key"/>;
            otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Collections.FastMultiMap`2.Atom#Collections#IMultiMap{TKey,TElement}#TryGet(`0,System.Collections.Generic.IEnumerable{`1}@)">
            <summary>
            Gets the elements that are associated with the specified <paramref name="key"/>.
            </summary>
            <param name="key">
            The key to lookup.
            </param>
            <param name="elements">
            When this method returns, contains the elements associated
            with the specified <paramref name="key"/>.
            </param>
            <returns>
            true if there exists any element under the specified <paramref name="key"/>;
            otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Collections.FastMultiMap`2.Contains(`0,`1)">
            <summary>
            Gets a value indicating whether this FastMultiMap{TKey, TElement} 
            contains the specified value with the specified key.
            </summary>
            <param name="key">
            The key to locate.
            </param>
            <param name="value">
            The value that is associated with the specified <paramref name="key"/> to locate.
            </param>
            <returns>
            true if this FastMultiMap{TKey, TElement} contains the specified key/value;
            otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Collections.FastMultiMap`2.Contains(`0)">
            <summary>
            Gets a value indicating whether a List exists for the 
            specified <paramref name="key"/> in this FastMultiMap{TKey, TElement}.
            </summary>
            <param name="key">
            The key to search for in this FastMultiMap{TKey, TElement}.
            </param>
            <returns>
            true if key is in this MultiMap; otherwise, false.
            </returns>
        </member>
        <member name="M:Atom.Collections.FastMultiMap`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the lists of this FastMultiMap.
            </summary>
            <returns>
            A new IEnumerator.
            </returns>
        </member>
        <member name="M:Atom.Collections.FastMultiMap`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the lists of this FastMultiMap.
            </summary>
            <returns>
            A new IEnumerator.
            </returns>
        </member>
        <member name="F:Atom.Collections.FastMultiMap`2.dictionary">
            <summary>
            The dictionary of elements.
            </summary>
        </member>
        <member name="T:Atom.Collections.Hat`1">
            <summary>
            A <see cref="T:Atom.Collections.Hat`1"/> is a collection of weighted items.
            </summary>
            <typeparam name="T"> 
            The type of the items to be stored in the hat.
            </typeparam>
        </member>
        <member name="F:Atom.Collections.Hat`1.DefaultItemId">
            <summary>
            The default Id of items stored in the <see cref="T:Atom.Collections.Hat`1"/>.
            </summary>
        </member>
        <member name="F:Atom.Collections.Hat`1.DefaultWeightModifier">
            <summary>
            The default weight modifier of items stored in the <see cref="T:Atom.Collections.Hat`1"/>.
            </summary>
        </member>
        <member name="P:Atom.Collections.Hat`1.Count">
            <summary>
            Gets a value that represents the number of HatEntries 
            that have been inserted into this <see cref="T:Atom.Collections.Hat`1"/>.
            </summary>
            <value>
            The number of elements actually contained in the Hat{T}.
            </value>
        </member>
        <member name="P:Atom.Collections.Hat`1.TotalWeight">
            <summary>
            Gets the total weight of all items in the <see cref="T:Atom.Collections.Hat`1"/>.
            </summary>
            <value>
            A value that represents the total weight contained in the Hat{T}.
            </value>
        </member>
        <member name="P:Atom.Collections.Hat`1.Item(System.Int32)">
            <summary>
            Gets a reference to the <see cref="T:Atom.Collections.HatEntry`1"/> at the given <paramref name="index"/>.
            </summary>
            <param name="index">
            The index of the <see cref="T:Atom.Collections.HatEntry`1"/> to get.
            </param>
            <returns>
            The HatEntry{T} at the given <paramref name="index"/>.
            </returns>
        </member>
        <member name="M:Atom.Collections.Hat`1.#ctor(Atom.Math.IRand,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Collections.Hat`1"/> class.
            </summary>
            <param name="rand">
            The random number generator the new Hat{T} should use.
            </param>
            <param name="capacity">
            The initial capacity of the <see cref="T:Atom.Collections.Hat`1"/>.
            </param>
        </member>
        <member name="M:Atom.Collections.Hat`1.#ctor(Atom.Math.IRand)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Collections.Hat`1"/> class.
            </summary>
            <param name="rand">
            The random number generator the new Hat{T} should use.
            </param>
        </member>
        <member name="M:Atom.Collections.Hat`1.Get">
            <summary>
            Randomly picks out one item from the <see cref="T:Atom.Collections.Hat`1"/>.
            Items with greater weight have a higher chance to be picked.
            </summary>
            <returns>
            An item that has been randomly (based on item weight) picked out of the Hat{T}.
            </returns>
        </member>
        <member name="M:Atom.Collections.Hat`1.SetWeightModifier(System.Int32,System.Single)">
            <summary>
            Sets the weight modifier of all <see cref="T:Atom.Collections.HatEntry`1"/>ies
            that share the given <paramref name="id"/>.
            Entries that have HasIndividualModifier set to true are excluded. 
            </summary>
            <param name="id"> The id of the items to set the modifier for. </param>
            <param name="modifier"> The new modifier. </param>
        </member>
        <member name="M:Atom.Collections.Hat`1.Insert(`0,System.Single)">
            <summary>
            Inserts a new item into the <see cref="T:Atom.Collections.Hat`1"/>,
            which has the <see cref="F:Atom.Collections.Hat`1.DefaultItemId"/>, <see cref="F:Atom.Collections.Hat`1.DefaultWeightModifier"/> and
            has an individual weight modifier.
            </summary>
            <param name="item">
            The actual item. Can be null.
            </param>
            <param name="weight">
            The weight of the entry. May not be a negative value.
            </param>
            <returns>
            The newly inserted HatEntry{T}.
            </returns>
        </member>
        <member name="M:Atom.Collections.Hat`1.Insert(`0,System.Single,System.Int32)">
            <summary>
            Inserts a new item into the <see cref="T:Atom.Collections.Hat`1"/>,
            which has the <see cref="F:Atom.Collections.Hat`1.DefaultWeightModifier"/>.
            </summary>
            <param name="item">
            The actual item. Can be null.
            </param>
            <param name="weight">
            The weight of the entry. May not be a negative value.
            </param>
            <param name="id">
            The Id of the item. 
            Ids can be used to create 'item groups' by applying the same Id
            to the items that should make up a group.
            </param>
            <returns>
            The newly inserted HatEntry{T}.
            </returns>
        </member>
        <member name="M:Atom.Collections.Hat`1.Insert(`0,System.Single,System.Int32,System.Single,System.Boolean)">
            <summary>
            Inserts a new item into the <see cref="T:Atom.Collections.Hat`1"/>.
            </summary>
            <param name="item">
            The actual item. Can be null.
            </param>
            <param name="weight">
            The weight of the entry. May not be a negative value.
            </param>
            <param name="id">
            The Id of the item. 
            Ids can be used to create 'item groups' by applying the same Id
            to the items that should make up a group.
            </param>
            <param name="weightModifier">
            A modifier value which is applied to the <paramref name="weight"/> of the item
            to create the final weight value. May not be a negative value.
            </param>
            <param name="hasIndividualModifier">
            States whether the <paramref name="weightModifier"/> of the item
            is individual. If this value is true the <paramref name="weightModifier"/>
            won't be changed by operations which affect items that share the same id.
            </param>
            <returns>
            The newly inserted HatEntry{T}.
            </returns>
        </member>
        <member name="M:Atom.Collections.Hat`1.RemoveEntry(Atom.Collections.HatEntry{`0})">
            <summary>
            Removes the given <see cref="T:Atom.Collections.HatEntry`1"/> from the <see cref="T:Atom.Collections.Hat`1"/>.
            </summary>
            <param name="entry">
            The <see cref="T:Atom.Collections.HatEntry`1"/> to remove.
            </param>
            <returns>
            Returns true if it has been removed; 
            otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Collections.Hat`1.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:Atom.Collections.HatEntry`1"/> at the given <paramref name="index"/>
            from the <see cref="T:Atom.Collections.Hat`1"/>.
            </summary>
            <param name="index">
            The index of the <see cref="T:Atom.Collections.HatEntry`1"/> to remove.
            </param>
        </member>
        <member name="M:Atom.Collections.Hat`1.Remove(`0)">
            <summary>
            Removes the first occurence of given <paramref name="item"/>
            from the <see cref="T:Atom.Collections.Hat`1"/>.
            </summary>
            <param name="item">
            The item to remove.
            </param>
            <returns>
            Returns true if it has been removed;
            otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Collections.Hat`1.Remove(`0,System.Int32)">
            <summary>
            Removes the first occurence of given <paramref name="item"/> 
            that has the given <paramref name="id"/>
            from the <see cref="T:Atom.Collections.Hat`1"/>.
            </summary>
            <param name="item">
            The item to remove.
            </param>
            <param name="id">
            The id the item has to have to be removed.
            </param>
            <returns>
            Returns true if the given <paramref name="item"/> has been removed; 
            therwise false.
            </returns>
        </member>
        <member name="M:Atom.Collections.Hat`1.Clear">
            <summary>
            Removes all items from the <see cref="T:Atom.Collections.Hat`1"/>.
            </summary>
        </member>
        <member name="M:Atom.Collections.Hat`1.GetEnumerator">
            <summary>
            Receives an enumerates that iterates over the entries in this <see cref="T:Atom.Collections.Hat`1"/>.
            </summary>
            <returns>The new enumerator.</returns>
        </member>
        <member name="M:Atom.Collections.Hat`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Receives an enumerates that iterates over the entries in this <see cref="T:Atom.Collections.Hat`1"/>.
            </summary>
            <returns>The new enumerator.</returns>
        </member>
        <member name="F:Atom.Collections.Hat`1.totalWeight">
            <summary>
            The total weight of the <see cref="T:Atom.Collections.Hat`1"/>.
            </summary>
        </member>
        <member name="F:Atom.Collections.Hat`1.items">
            <summary>
            The items within the <see cref="T:Atom.Collections.Hat`1"/>.
            </summary>
        </member>
        <member name="F:Atom.Collections.Hat`1.rand">
            <summary>
            The random number generator to use.
            </summary>
        </member>
        <member name="T:Atom.Collections.HatEntry`1">
            <summary>
            Represents a single entry in a <see cref="T:Atom.Collections.Hat`1"/>.
            This class can't be inherited.
            </summary>
            <typeparam name="T"> 
            The type of the data stored in the HatEntry.
            </typeparam>
        </member>
        <member name="P:Atom.Collections.HatEntry`1.Data">
            <summary>
            Gets the data stores in the <see cref="T:Atom.Collections.HatEntry`1"/>.
            </summary>
            <value>
            The data this <see cref="T:Atom.Collections.HatEntry`1"/> contains.
            </value>
        </member>
        <member name="P:Atom.Collections.HatEntry`1.Id">
            <summary>
            Gets the id associated with this <see cref="T:Atom.Collections.HatEntry`1"/> .
            </summary>
            <remarks>
            Id's don't have to be unique. Non-unique id's can
            be used to set the weightModifier of all entries that
            share the same id to the same value.
            </remarks>
            <value>The id of the <see cref="T:Atom.Collections.HatEntry`1"/>.</value>
        </member>
        <member name="P:Atom.Collections.HatEntry`1.OriginalWeight">
            <summary>
            Gets the original weight of the <see cref="T:Atom.Collections.HatEntry`1"/> ,
            before any modifiers.
            </summary>
            <value>The original weight of the <see cref="T:Atom.Collections.HatEntry`1"/>.</value>
        </member>
        <member name="P:Atom.Collections.HatEntry`1.Weight">
            <summary>
            Gets the final weight of the <see cref="T:Atom.Collections.HatEntry`1"/>,
            after taking into account the current <see cref="P:Atom.Collections.HatEntry`1.WeightModifier"/>.
            </summary>
            <value>The final weight of the <see cref="T:Atom.Collections.HatEntry`1"/>.</value>
        </member>
        <member name="P:Atom.Collections.HatEntry`1.WeightModifier">
            <summary>
            Gets or sets the weight modifier value of the <see cref="T:Atom.Collections.HatEntry`1"/> .
            </summary>
            <exception cref="T:System.ArgumentException">
            Set: If the given value is negative.
            </exception>
            <value>The weight modifier of the <see cref="T:Atom.Collections.HatEntry`1"/>.</value>
        </member>
        <member name="P:Atom.Collections.HatEntry`1.HasIndividualModifier">
            <summary>
            Gets or sets a value indicating whether the <see cref="P:Atom.Collections.HatEntry`1.WeightModifier"/> is
            individual to all others. 
            </summary>
            <value>
            If true the <see cref="P:Atom.Collections.HatEntry`1.WeightModifier"/> of the <see cref="T:Atom.Collections.HatEntry`1"/> will not be shared 
            by entries that have the same <see cref="P:Atom.Collections.HatEntry`1.Id"/>. 
            </value>
        </member>
        <member name="P:Atom.Collections.HatEntry`1.Owner">
            <summary>
            Gets the <see cref="T:Atom.Collections.Hat`1"/> that owns the <see cref="T:Atom.Collections.HatEntry`1"/>.
            </summary>
            <value>
            The <see cref="T:Atom.Collections.Hat`1"/> that owns the <see cref="T:Atom.Collections.HatEntry`1"/>.
            </value>
        </member>
        <member name="M:Atom.Collections.HatEntry`1.#ctor(Atom.Collections.Hat{`0},`0,System.Int32,System.Single,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Collections.HatEntry`1"/> class.
            </summary>
            <param name="owner">
            The Hat that owns the new HatEntry.
            </param>
            <param name="data">
            The data stored within the new HatEntry.
            </param>
            <param name="id">
            The id of the new HatEntry.
            </param>
            <param name="originalWeight">
            The weight of the new HatEntry, before applying any modifiers.
            </param>
            <param name="weightModifier">
            The modifier applied to the HatEntry's originalWeight.
            </param>
            <param name="hasIndividualModifier">
            States whether the <paramref name="weightModifier"/> of the new HatEntry is individual;
            even if the <paramref name="id"/> dictates that it is not.
            </param>
        </member>
        <member name="F:Atom.Collections.HatEntry`1.weight">
            <summary>
            The final weight of the <see cref="T:Atom.Collections.HatEntry`1"/> .
            </summary>
        </member>
        <member name="F:Atom.Collections.HatEntry`1.weightModifier">
            <summary>
            The weight modifier value of the <see cref="T:Atom.Collections.HatEntry`1"/> .
            </summary>
        </member>
        <member name="F:Atom.Collections.HatEntry`1.owner">
            <summary>
            The <see cref="T:Atom.Collections.Hat`1"/> that owns the <see cref="T:Atom.Collections.HatEntry`1"/> .
            </summary>
        </member>
        <member name="F:Atom.Collections.HatEntry`1.id">
            <summary>
            The id associated to the <see cref="T:Atom.Collections.HatEntry`1"/> .
            </summary>
        </member>
        <member name="F:Atom.Collections.HatEntry`1.data">
            <summary>
            The data in the <see cref="T:Atom.Collections.HatEntry`1"/> .
            </summary>
        </member>
        <member name="F:Atom.Collections.HatEntry`1.origWeight">
            <summary>
            The original weight of the <see cref="T:Atom.Collections.HatEntry`1"/> ,
            before any modifiers.
            </summary>
        </member>
        <member name="T:Atom.Collections.Heap`1">
            <summary>
            Represents a simple heap of items.
            </summary>
            <seealso cref="P:Atom.Collections.Heap`1.HeapType"/>
            <typeparam name="T">
            The type of item stored in the Heap{T}.
            </typeparam>
        </member>
        <member name="P:Atom.Collections.Heap`1.HeapType">
            <summary>
            Gets the type of heap represented by this instance.
            </summary>
            <value>The type of heap.</value>
        </member>
        <member name="P:Atom.Collections.Heap`1.Root">
            <summary>
            Gets the smallest item in the heap (located at the root).
            </summary>
            <value>
            The smallest or greatest value of this Heap{T}; depending on its <see cref="P:Atom.Collections.Heap`1.HeapType"/>.
            </value>
        </member>
        <member name="P:Atom.Collections.Heap`1.Comparer">
            <summary>
            Gets the IComparer{T} that is used to compare the objects stored in this IHeap{T}.
            </summary>
        </member>
        <member name="P:Atom.Collections.Heap`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <value>The number of elements contained in the <see cref="T:System.Collections.ICollection"></see>.</value>
        </member>
        <member name="P:Atom.Collections.Heap`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
            <value>
            Always returns <c>false</c>.
            </value>
        </member>
        <member name="M:Atom.Collections.Heap`1.#ctor(Atom.Collections.HeapType)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Collections.Heap`1"/> class.
            </summary>
            <param name="type">
            The type of new Heap.
            </param>
        </member>
        <member name="M:Atom.Collections.Heap`1.#ctor(Atom.Collections.HeapType,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Collections.Heap`1"/> class.
            </summary>
            <param name="type">
            The type of new Heap.
            </param>
            <param name="capacity">
            The initial number of objects the new Heap can store.
            </param>
        </member>
        <member name="M:Atom.Collections.Heap`1.#ctor(Atom.Collections.HeapType,System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Collections.Heap`1"/> class.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="comparer"/> is null.
            </exception>
            <param name="type">
            The type of new Heap.
            </param>
            <param name="comparer">
            The comparer the new Heap should use.
            </param>
        </member>
        <member name="M:Atom.Collections.Heap`1.#ctor(Atom.Collections.HeapType,System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Collections.Heap`1"/> class.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="comparer"/> is null.
            </exception>
            <param name="type">
            The type of new Heap.
            </param>
            <param name="capacity">
            The initial number of objects the new Heap can store.
            </param>
            <param name="comparer">
            The comparer the new Heap should use.
            </param>
        </member>
        <member name="M:Atom.Collections.Heap`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:Atom.Collections.Heap`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:Atom.Collections.Heap`1"/>.</param>
        </member>
        <member name="M:Atom.Collections.Heap`1.Contains(`0)">
            <summary>
            Determines whether this <see cref="T:Atom.Collections.Heap`1"/> contains the specified <paramref name="item"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:Atom.Collections.Heap`1"/>.</param>
            <returns>
            Returns <c>true</c> if item is found in the <see cref="T:Atom.Collections.Heap`1"/>;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Atom.Collections.Heap`1.Pop">
            <summary>
            Removes and returns the item at the root of this Heap{T}.
            </summary>
            <returns>
            The smallest or greatest value of this Heap{T}; depending on its <see cref="P:Atom.Collections.Heap`1.HeapType"/>.
            </returns>
        </member>
        <member name="M:Atom.Collections.Heap`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:Atom.Collections.Heap`1"/> to an <see cref="T:System.Array"></see>, 
            starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or-arrayIndex is equal to or greater than the length of array.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"></see> is greater than the available space from arrayIndex to the end of the destination array.-or-TriangleType T cannot be cast automatically to the type of the destination array.</exception>
        </member>
        <member name="M:Atom.Collections.Heap`1.Clear">
            <summary>
            Clears all the objects in this instance.
            </summary>
        </member>
        <member name="M:Atom.Collections.Heap`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Atom.Collections.Heap`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the items of the heap.
            </summary>
            <returns>An enumerator for enumerating though the colleciton.</returns>
        </member>
        <member name="M:Atom.Collections.Heap`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
            <summary>
            This operation is not supported.
            </summary>
            <param name="item">This parameter is not used.</param>
            <exception cref="T:System.NotSupportedException"></exception>
            <returns>This method never returns.</returns>
        </member>
        <member name="F:Atom.Collections.Heap`1.heapType">
            <summary>
            The type of this Heap{T}.
            </summary>
        </member>
        <member name="F:Atom.Collections.Heap`1.data">
            <summary>
            The internal list that stores the actual data stored in this Heap{T}.
            </summary>
        </member>
        <member name="F:Atom.Collections.Heap`1.comparer">
            <summary>
            The IComparer that is used when sorting.
            </summary>
        </member>
        <member name="T:Atom.Collections.HeapType">
            <summary>
            Enumerates the different types of a <see cref="T:Atom.Collections.Heap`1"/>.
            </summary>
        </member>
        <member name="F:Atom.Collections.HeapType.Minimum">
            <summary>
            The smallest item is kept at the root of the Heap.
            </summary>
        </member>
        <member name="F:Atom.Collections.HeapType.Maximum">
            <summary>
            The largest item is kept at the root of the Heap.
            </summary>
        </member>
        <member name="T:Atom.Collections.IHeap`1">
            <summary>
            Represents a heap of items.
            </summary>
            <seealso cref="P:Atom.Collections.IHeap`1.HeapType"/>
            <typeparam name="T">
            The type of item stored in the IHeap{T}.
            </typeparam>
        </member>
        <member name="P:Atom.Collections.IHeap`1.HeapType">
            <summary>
            Gets the <see cref="P:Atom.Collections.IHeap`1.HeapType"/> of this IHeap{T}.
            </summary>
        </member>
        <member name="P:Atom.Collections.IHeap`1.Root">
            <summary>
            Gets the item at the root of this IHeap{T}.
            </summary>
            <value>
            The smallest or greatest value of this Heap{T}; depending on its <see cref="P:Atom.Collections.IHeap`1.HeapType"/>.
            </value>
        </member>
        <member name="P:Atom.Collections.IHeap`1.Comparer">
            <summary>
            Gets the IComparer{T} that is used to compare the objects stored in this IHeap{T}.
            </summary>
        </member>
        <member name="M:Atom.Collections.IHeap`1.Pop">
            <summary>
            Removes and returns the item at the root of this Heap{T}.
            </summary>
            <returns>
            The smallest or greatest value of this Heap{T}; depending on its <see cref="P:Atom.Collections.IHeap`1.HeapType"/>.
            </returns>
        </member>
        <member name="T:Atom.Collections.IHeapContract`1">
            <summary>
            Defines the contracts for the IHeap{T} interface.
            </summary>
            <typeparam name="T">
            The type of item stored in the IHeap{T}.
            </typeparam>
        </member>
        <member name="P:Atom.Collections.IHeapContract`1.HeapType">
            <summary>
            Gets the <see cref="P:Atom.Collections.IHeapContract`1.HeapType"/> of this IHeap{T}.
            </summary>
        </member>
        <member name="P:Atom.Collections.IHeapContract`1.Root">
            <summary>
            Gets the item at the root of this IHeap{T}.
            </summary>
            <value>
            The smallest or greatest value of this Heap{T}; depending on its <see cref="P:Atom.Collections.IHeapContract`1.HeapType"/>.
            </value>
        </member>
        <member name="P:Atom.Collections.IHeapContract`1.Comparer">
            <summary>
            Gets the IComparer{T} that is used to compare the objects stored in this IHeap{T}.
            </summary>
        </member>
        <member name="M:Atom.Collections.IHeapContract`1.Pop">
            <summary>
            Removes and returns the item at the root of this Heap{T}.
            </summary>
            <returns>
            The smallest or greatest value of this Heap{T}; depending on its <see cref="P:Atom.Collections.IHeapContract`1.HeapType"/>.
            </returns>
        </member>
        <member name="T:Atom.Collections.IMultiMap`2">
            <summary>
            Represents a generic collection that maps keys onto multiple values.
            </summary>
            <typeparam name="TKey">
            The type of the key that identifies a group of elements.
            </typeparam>
            <typeparam name="TElement">
            The type of the elements stored in the IMultiMap.
            </typeparam>
        </member>
        <member name="M:Atom.Collections.IMultiMap`2.Add(`0,`1)">
            <summary>
            Adds the specified <paramref name="value"/> under the specified <paramref name="key"/>
            to this IMultiMap{TKey, TElement}.
            </summary>
            <param name="key">
            The key the specified <paramref name="value"/> should be associated with.
            </param>
            <param name="value">
            The value to add to this IMultiMap{TKey, TElement}.
            </param>
        </member>
        <member name="M:Atom.Collections.IMultiMap`2.Remove(`0,`1)">
            <summary>
            Tries to remove the specified key/value pair from this IMultiMap{TKey, TElement}.
            </summary>
            <param name="key">
            The key that is associated with the specified <paramref name="value"/>.
            </param>
            <param name="value">
            The value to remove.
            </param>
            <returns>
            true if the specified key/value pair was removed from this IMultiMap{TKey, TElement};
            otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Collections.IMultiMap`2.TryGet(`0,System.Collections.Generic.IEnumerable{`1}@)">
            <summary>
            Gets the elements that are associated with the specified <paramref name="key"/>.
            </summary>
            <param name="key">
            The key to lookup.
            </param>
            <param name="elements">
            When this method returns, contains the elements associated
            with the specified <paramref name="key"/>.
            </param>
            <returns>
            true if there exists any element under the specified <paramref name="key"/>;
            otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Collections.IMultiMap`2.Contains(`0,`1)">
            <summary>
            Gets a value indicating whether this IMultiMap{TKey, TElement}
            contains the specified value with the specified key.
            </summary>
            <param name="key">
            The key to locate.
            </param>
            <param name="value">
            The value that is associated with the specified <paramref name="key"/> to locate.
            </param>
            <returns>
            true if this IMultiMap{TKey, TElement} contains the specified key/value;
            otherwise false.
            </returns>
        </member>
        <member name="T:Atom.Collections.IMutableGrouping`2">
            <summary>
            Represents a collection of objects that have a common key.
            </summary>
            <typeparam name="TKey">
            The type of the key of the IMutableGrouping{TKey, TElement}.
            </typeparam>
            <typeparam name="TElement">
            The type of the values in the IMutableGrouping{TKey, TElement}.
            </typeparam>
        </member>
        <member name="T:Atom.Collections.MultiMap`2">
            <summary>
            Represents a dictionary that maps keys onto lists of elements.
            </summary>
            <typeparam name="TKey">
            The type of the key that is associated with a list of elements.
            </typeparam>
            <typeparam name="TElement">
            The type of elements.
            </typeparam>
            <content>
            Defines the default IMutableGrouping{TKey, TElement} implementation
            used by the MultiMap{TKey, TElement} class.
            </content>
        </member>
        <member name="P:Atom.Collections.MultiMap`2.Count">
            <summary>
            Gets the number of key/value association pairs in this MultiMap&lt;TKey,TElement&gt;.
            </summary>
            <value>
            The number of key/value association pairs in this MultiMap&lt;TKey,TElement&gt;.
            </value>
        </member>
        <member name="P:Atom.Collections.MultiMap`2.Item(`0)">
            <summary>
            Gets the elements that are associated with the given <paramref name="key"/>.
            </summary>
            <param name="key">
            The key of the desired sequence of values.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/> sequence of values 
            indexed by the specified key.
            </returns>
        </member>
        <member name="M:Atom.Collections.MultiMap`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Collections.MultiMap`2"/> class.
            </summary>
        </member>
        <member name="M:Atom.Collections.MultiMap`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Collections.MultiMap`2"/> class.
            </summary>
            <param name="capacity">
            The initial number of elements the new MultiMap can contain.
            </param>
        </member>
        <member name="M:Atom.Collections.MultiMap`2.TryGet(`0,System.Collections.Generic.IEnumerable{`1}@)">
            <summary>
            Gets the elements that are associated with the specified <paramref name="key"/>.
            </summary>
            <param name="key">
            The key to lookup.
            </param>
            <param name="elements">
            When this method returns, contains the elements associated
            with the specified <paramref name="key"/>.
            </param>
            <returns>
            true if there exists an IMutableGrouping{TKey, TElement} that corresponds to the specified <paramref name="key"/>;
            otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Collections.MultiMap`2.Contains(`0,`1)">
            <summary>
            Gets a value indicating whether this MultiMap{TKey, TElement} contains
            the specified key/value pair.
            </summary>
            <param name="key">
            The key to locate.
            </param>
            <param name="value">
            The value that is associated with the specified <paramref name="key"/> to locate.
            </param>
            <returns>
            true if this IMultiMap{TKey, TElement} contains the specified key/value;
            otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Collections.MultiMap`2.Contains(`0)">
            <summary>
            Gets a value indicating whether an IMutableGrouping exists for the 
            specified <paramref name="key"/> in this MultiMap{TKey, TElement}.
            </summary>
            <param name="key">
            The key to search for in this MultiMap{TKey, TElement}.
            </param>
            <returns>
            true if key is in this MultiMap; otherwise, false.
            </returns>
        </member>
        <member name="M:Atom.Collections.MultiMap`2.Add(`0,`1)">
            <summary>
            Adds the specified <paramref name="value"/> under the specified <paramref name="key"/>
            to this MultiMap{TKey, TElement}.
            </summary>
            <param name="key">
            The key the specified <paramref name="value"/> should be associated with.
            </param>
            <param name="value">
            The value to add to this MultiMap{TKey, TElement}.
            </param>
        </member>
        <member name="M:Atom.Collections.MultiMap`2.Remove(`0,`1)">
            <summary>
            Tries to remove the specified key/value pair from this MultiMap{TKey, TElement}.
            </summary>
            <param name="key">
            The key that is associated with the specified <paramref name="value"/>.
            </param>
            <param name="value">
            The value to remove.
            </param>
            <returns>
            true if the specified key/value pair was removed from this MultiMap{TKey, TElement};
            otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Collections.MultiMap`2.CreateGrouping(`0)">
            <summary>
            Creates a new <see cref="T:Atom.Collections.IMutableGrouping`2"/> for the
            specified <paramref name="key"/>.
            </summary>
            <param name="key">
            The key to create a new grouping for.
            </param>
            <returns>
            A newly created IMutableGrouping{TKey, TElement}.
            </returns>
        </member>
        <member name="M:Atom.Collections.MultiMap`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the IGroupings that are associated with this MultiMap.
            </summary>
            <returns>
            A new IEnumerator.
            </returns>
        </member>
        <member name="M:Atom.Collections.MultiMap`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the IGroupings that are associated with this MultiMap.
            </summary>
            <returns>
            A new IEnumerator.
            </returns>
        </member>
        <member name="F:Atom.Collections.MultiMap`2.dictionary">
            <summary>
            The dictionary of elements.
            </summary>
        </member>
        <member name="T:Atom.Collections.MultiMap`2.Grouping">
            <summary>
            Defines the default implementation of the <see cref="T:Atom.Collections.IMutableGrouping`2"/> interface
            that is used by the MultiMap{TKey, TElement} class.
            </summary>
        </member>
        <member name="P:Atom.Collections.MultiMap`2.Grouping.Key">
            <summary>
            Gets the key that is associated with this Grouping.
            </summary>
        </member>
        <member name="P:Atom.Collections.MultiMap`2.Grouping.Count">
            <summary>
            Gets the number of elements in this Grouping.
            </summary>
        </member>
        <member name="P:Atom.Collections.MultiMap`2.Grouping.IsReadOnly">
            <summary>
            Gets a value indicating whether this Grouping is read-only.
            </summary>
            <value>Always returns false.</value>
        </member>
        <member name="M:Atom.Collections.MultiMap`2.Grouping.#ctor(`0)">
            <summary>
            Initializes a new instance of the Grouping class.
            </summary>
            <param name="key">
            The key the new Grouping is associated with.
            </param>
        </member>
        <member name="M:Atom.Collections.MultiMap`2.Grouping.Add(`1)">
            <summary>
            Adds the specified <paramref name="element"/> to this IMutableGrouping{Tkey, TElement}.
            </summary>
            <param name="element">
            The element to add.
            </param>
        </member>
        <member name="M:Atom.Collections.MultiMap`2.Grouping.Remove(`1)">
            <summary>
            Tries to remove the specified <paramref name="element"/>
            from this IMutableGrouping{Tkey, TElement}.
            </summary>
            <param name="element">
            The element to remove.
            </param>
            <returns>
            true if the specified element was removed;
            otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Collections.MultiMap`2.Grouping.Contains(`1)">
            <summary>
            Gets a value indicating whether this Grouping contains the specified <paramref name="element"/>.
            </summary>
            <param name="element">
            The element to look for.
            </param>
            <returns>
            true if this grouping contains the specified element;
            otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Collections.MultiMap`2.Grouping.Clear">
            <summary>
            Removes all elements from this Grouping.
            </summary>
        </member>
        <member name="M:Atom.Collections.MultiMap`2.Grouping.CopyTo(`1[],System.Int32)">
            <summary>
            Copies this entire Grouping to a compatible one-dimensional
            rray, starting at the specified index of the target array.
            </summary>
            <param name="array">
            The one-dimensional System.Array that is the destination of the elements in this Grouping.
            </param>
            <param name="arrayIndex">
            The zero-based index in array at which copying begins.
            </param>
        </member>
        <member name="M:Atom.Collections.MultiMap`2.Grouping.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the item associated with this Grouping.
            </summary>
            <returns>
            A new IEnumerator.
            </returns>
        </member>
        <member name="M:Atom.Collections.MultiMap`2.Grouping.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the item associated with this Grouping.
            </summary>
            <returns>
            A new IEnumerator.
            </returns>
        </member>
        <member name="F:Atom.Collections.MultiMap`2.Grouping.key">
            <summary>
            The key this grouping is associated with.
            </summary>
        </member>
        <member name="F:Atom.Collections.MultiMap`2.Grouping.items">
            <summary>
            The list that holds the items that are part of this Grouping.
            </summary>
        </member>
        <member name="T:Atom.Collections.NonNullList`1">
            <summary>
            Represents a <see cref="T:Atom.Collections.PreconditionedList`1"/> that requires its items to be non-null.
            </summary>
            <typeparam name="T">
            The type of the items in the list.
            </typeparam>
        </member>
        <member name="M:Atom.Collections.NonNullList`1.#ctor">
            <summary>
            Initializes a new instance of the NonNullList{T} class.
            </summary>
        </member>
        <member name="M:Atom.Collections.NonNullList`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Initializes a new instance of the NonNullList{T} class.
            </summary>
            <param name="list">
            The IList{T} the new NonNullList{T} uses internally.
            </param>
        </member>
        <member name="M:Atom.Collections.NonNullList`1.ObjectInvariant">
            <summary>
            Defines the object invariant of the NonNullList class.
            </summary>
        </member>
        <member name="M:Atom.Collections.NonNullList`1.NonNullPredicate(`0)">
            <summary>
            The predicate that must hold true for every element of the NonNullList class.
            </summary>
            <param name="item">
            The item to verify.
            </param>
            <returns>
            true if the predicate holds;
            otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Collections.NonNullList`1.GetPredicateFailedErrorMessage(`0)">
            <summary>
            Gets the error message that is shown when adding or inserting an item
            into this NonNullList{T} does not fulfill its predicate.
            </summary>
            <param name="item">
            The item that was attempted to be added or inserted.
            </param>
            <returns>
            The error message.
            </returns>
        </member>
        <member name="T:Atom.Collections.ObjectMatrix`1">
            <summary>
            Represents a matrix of objects of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">
            The type of elements in the object matrix.
            </typeparam>
        </member>
        <member name="P:Atom.Collections.ObjectMatrix`1.ColumnCount">
            <summary>
            Gets or sets the number of columns this <see cref="T:Atom.Collections.ObjectMatrix`1"/> has.
            </summary>
            <value>
            The number of columns this <see cref="T:Atom.Collections.ObjectMatrix`1"/> has.
            </value>
        </member>
        <member name="P:Atom.Collections.ObjectMatrix`1.RowCount">
            <summary>
            Gets or sets the number of rows this <see cref="T:Atom.Collections.ObjectMatrix`1"/> has.
            </summary>
            <value>
            The number of rows this <see cref="T:Atom.Collections.ObjectMatrix`1"/> has.
            </value>
        </member>
        <member name="P:Atom.Collections.ObjectMatrix`1.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the value at the specified 
            <paramref name="row"/> and <paramref name="column"/>.
            </summary>
            <param name="row">
            The zero-based index of the row.
            </param>
            <param name="column">
            The zero-based index of the column.
            </param>
            <returns>The value at the specified position.</returns>
        </member>
        <member name="P:Atom.Collections.ObjectMatrix`1.IsSquare">
            <summary>
            Gets a value indicating whether this Matrix is a square Matrix.
            </summary>
            <remarks>
            A <see cref="T:Atom.Collections.ObjectMatrix`1"/> is square if
            its <see cref="P:Atom.Collections.ObjectMatrix`1.RowCount"/> is equals to its <see cref="P:Atom.Collections.ObjectMatrix`1.ColumnCount"/>.
            </remarks>
            <value>
            Returns <c>true</c> if this matrix is square; 
            otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Atom.Collections.ObjectMatrix`1.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Collections.ObjectMatrix`1"/> class.
            </summary>
            <param name="rowCount">
            The number of rows the new ObjectMatrix should have.
            </param>
            <param name="columnCount">
            The number of columns the new ObjectMatrix should have.
            </param>
            <exception cref="T:System.ArgumentException">
            If <paramref name="rowCount"/> or <paramref name="columnCount"/> is less than or equal 0.
            </exception>
        </member>
        <member name="M:Atom.Collections.ObjectMatrix`1.#ctor(`0[0:,0:])">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Collections.ObjectMatrix`1"/> class.
            </summary>
            <param name="elements">
            The elements of the new ObjectMatrix{T}.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="elements"/> is null.
            </exception>
        </member>
        <member name="M:Atom.Collections.ObjectMatrix`1.#ctor(Atom.Collections.ObjectMatrix{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Collections.ObjectMatrix`1"/> class.
            </summary>
            <param name="matrix">
            The existing ObjectMatrix{T} that should be cloned.
            </param>
        </member>
        <member name="M:Atom.Collections.ObjectMatrix`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> 
            Initializes a new instance of the <see cref="T:Atom.Collections.ObjectMatrix`1"/> class; and
            sets values of the new <see cref="T:Atom.Collections.ObjectMatrix`1"/> to the
            values specified by the <see cref="T:System.Runtime.Serialization.SerializationInfo"/>.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds
            the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that 
            contains contextual information about the source or destination.
            Can be null.
            </param>
        </member>
        <member name="M:Atom.Collections.ObjectMatrix`1.Initialize(System.Int32,System.Int32)">
            <summary>
            Used to initialize a new instance of the ObjectMatrix class.
            </summary>
            <param name="rowCount">
            The number of rows the ObjectMatrix should have.
            </param>
            <param name="columnCount">
            The number of columns the ObjectMatrix should have.
            </param>
        </member>
        <member name="M:Atom.Collections.ObjectMatrix`1.InterchangeRows(System.Int32,System.Int32)">
            <summary>
            Interchanges/swaps two rows of this ObjectMatrix{T}.
            </summary>
            <param name="firstRow">
            The zero-based index of the first row.
            </param>
            <param name="secondRow">
            The zero-based index of the second row.
            </param>
        </member>
        <member name="M:Atom.Collections.ObjectMatrix`1.InterchangeColumns(System.Int32,System.Int32)">
            <summary>
            Interchanges/swaps two columns of this ObjectMatrix{T}.
            </summary>
            <param name="firstColumn">
            The zero-based index of the first column.
            </param>
            <param name="secondColumn">
            The zero-based index of the second column.
            </param>
        </member>
        <member name="M:Atom.Collections.ObjectMatrix`1.GetIndex(System.Int32,System.Int32)">
            <summary>
            Gets the index into the private data array
            for the given row/column.
            </summary>
            <param name="row">
            The row of the element to get.
            </param>
            <param name="column">
            The column of the element to get.
            </param>
            <returns>
            The corresponding index into the data array.
            </returns>
        </member>
        <member name="M:Atom.Collections.ObjectMatrix`1.GetSubMatrix(System.Int32,System.Int32)">
            <summary>
            Gets a sub matrix of this <see cref="T:Atom.Collections.ObjectMatrix`1"/>.
            </summary>
            <param name="rowCount">
            The row count.
            </param>
            <param name="columnCount">
            The column count.
            </param>
            <returns>
            A sub matrix of the current matrix.
            </returns>
        </member>
        <member name="M:Atom.Collections.ObjectMatrix`1.GetSubMatrix(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets a sub matrix of this <see cref="T:Atom.Collections.ObjectMatrix`1"/>.
            </summary>
            <param name="rowStart">The row start.</param>
            <param name="columnStart">The column start.</param>
            <param name="rowCount">The row count.</param>
            <param name="columnCount">The column count.</param>
            <returns>
            A sub matrix of the current matrix.
            </returns>
        </member>
        <member name="M:Atom.Collections.ObjectMatrix`1.GetRow(System.Int32)">
            <summary>
            Gets the row at the specified zero-based index.
            </summary>
            <param name="row">
            The zero-based index of the row to get.
            </param>
            <returns>
            An array containing the values of the requested row.
            </returns>
        </member>
        <member name="M:Atom.Collections.ObjectMatrix`1.GetColumn(System.Int32)">
            <summary>
            Gets the column at the specified zero-based index.
            </summary>
            <param name="column">
            The zero-based index of the column to get.
            </param>
            <returns>
            An array containing the values of the requested column.
            </returns>
        </member>
        <member name="M:Atom.Collections.ObjectMatrix`1.SetSubMatrix(System.Int32,System.Int32,Atom.Collections.ObjectMatrix{`0})">
            <summary>
            Sets the sub matrix at the given position.
            </summary>
            <param name="rowStart">
            The row start.
            </param>
            <param name="columnStart">
            The column start.
            </param>
            <param name="subMatrix">
            The matrix to set at the given position.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="subMatrix"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            If <paramref name="rowStart"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            If <paramref name="columnStart"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If <paramref name="rowStart"/> plus RowCount of the subMatrix is greater thn RowCount.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If <paramref name="columnStart"/> plus ColumnCount of the subMatrix is greater than ColumnCount.
            </exception>
        </member>
        <member name="M:Atom.Collections.ObjectMatrix`1.SetSubMatrix(System.Int32,System.Int32,System.Int32,System.Int32,Atom.Collections.ObjectMatrix{`0})">
            <summary>
            Sets the sub matrix at the given position.
            </summary>
            <param name="rowStart">
            The row start.
            </param>
            <param name="columnStart">
            The column start.
            </param>
            <param name="rowCount">
            The number of rows to set.
            </param>
            <param name="columnCount">
            The number of columns to set.
            </param>
            <param name="subMatrix">
            The matrix to set at the given position.
            </param>
        </member>
        <member name="M:Atom.Collections.ObjectMatrix`1.SetRow(System.Int32,`0[])">
            <summary>
            Sets the to specified row to contain the specified elements.
            </summary>
            <param name="row">
            The zero-based index of the row that should be modified.
            </param>
            <param name="elements">
            The elements to set.
            </param>
        </member>
        <member name="M:Atom.Collections.ObjectMatrix`1.SetColumn(System.Int32,`0[])">
            <summary>
            Sets the to specified column to contain the specified elements.
            </summary>
            <param name="column">
            The zero-based index of the column that should be modified.
            </param>
            <param name="elements">
            The elements to set.
            </param>
        </member>
        <member name="M:Atom.Collections.ObjectMatrix`1.AddRow">
            <summary>
            Adds a single row to the matrix.
            </summary>
        </member>
        <member name="M:Atom.Collections.ObjectMatrix`1.AddRow(`0[])">
            <summary>
            Adds a single row to this ObjectMatrix{T}, and populates the values
            accordingly.
            </summary>
            <param name="values">
            The values to populate the new row with.
            </param>
        </member>
        <member name="M:Atom.Collections.ObjectMatrix`1.AddRows(System.Int32)">
            <summary>
            Adds the specified number of rows to this ObjectMatrix{T}.
            </summary>
            <param name="count">
            The number of rows to add.
            </param>
        </member>
        <member name="M:Atom.Collections.ObjectMatrix`1.AddColumn">
            <summary>
            Adds a single column to this ObjectMatrix{T}.
            </summary>    
        </member>
        <member name="M:Atom.Collections.ObjectMatrix`1.AddColumn(`0[])">
            <summary>
            Adds a single row to the matrix, and populates the values
            accordingly.
            </summary>
            <param name="values">The values to populate the row with.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="values"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The length of <paramref name="values"/> is greater than <see cref="P:Atom.Collections.ObjectMatrix`1.RowCount"/>.</exception>
        </member>
        <member name="M:Atom.Collections.ObjectMatrix`1.AddColumns(System.Int32)">
            <summary>
            Adds the specified number of rows to this ObjectMatrix{T}.
            </summary>
            <param name="count">
            The number of columns to add.
            </param>   
        </member>
        <member name="M:Atom.Collections.ObjectMatrix`1.Resize(System.Int32,System.Int32)">
            <summary>
            Resizes this ObjectMatrix{T} to the specified size.
            </summary>
            <param name="newRowCount">
            The new number of rows this ObjectMatrix{T} should have.
            </param>
            <param name="newColumnCount">
            The new number of columns this ObjectMatrix{T} should have.
            </param>
        </member>
        <member name="M:Atom.Collections.ObjectMatrix`1.DeleteRow(System.Int32)">
            <summary>
            Deletes the row from this ObjectMatrix{T}.
            </summary>
            <param name="row">
            The index of the row to delete.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If the given <paramref name="row"/> index is out of valid range.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            If there exists only one row.
            </exception>
        </member>
        <member name="M:Atom.Collections.ObjectMatrix`1.DeleteColumn(System.Int32)">
            <summary>
            Deletes the column from this ObjectMatrix{T}.
            </summary>
            <param name="column">
            The index of the column to delete.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If the given <paramref name="column"/> index is out of valid range.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            If there exists only one column.
            </exception>
        </member>
        <member name="M:Atom.Collections.ObjectMatrix`1.Find(`0,System.Int32@,System.Int32@)">
            <summary>
            Tries to find the first occurence of the specified <paramref name="element"/>
            using the <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/>
            </summary>
            <param name="element">
            The element to find.
            </param>
            <param name="row">
            When this method returns will contain the zero-based row index of the element; if found.
            </param>
            <param name="column">
            When this method returns will contain the zero-based column index of the element; if found.
            </param>
            <returns>
            true if the element was found; 
            otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Collections.ObjectMatrix`1.Find(`0,System.Int32@,System.Int32@,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Tries to find the first occurence of the specified <paramref name="element"/>
            using the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <param name="element">
            The element to find.
            </param>
            <param name="row">
            When this method returns will contain the zero-based row index of the element if found;
            otherwise if not found -1.
            </param>
            <param name="column">
            When this method returns will contain the zero-based column index of the element if found;
            otherwise if not found -1.
            </param>
            <param name="comparer">
            The comparer that should be used to compare the elements of this
            ObjectMatrix{T} with the specified <paramref name="element"/>.
            </param>
            <returns>
            true if the element was found; 
            otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Collections.ObjectMatrix`1.Equals(System.Object)">
            <summary>
            Returns whether the specified <see cref="T:System.Object"/>
            is equal to this <see cref="T:Atom.Collections.ObjectMatrix`1"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to test against. Can be null.
            </param>
            <returns>
            Returns true if the specified <see cref="T:System.Object"/> is equal to this <see cref="T:Atom.Collections.ObjectMatrix`1"/>;
            otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Collections.ObjectMatrix`1.Equals(Atom.Collections.ObjectMatrix{`0})">
            <summary>
            Returns whether the specified <see cref="T:Atom.Collections.ObjectMatrix`1"/>
            is equal to this <see cref="T:Atom.Collections.ObjectMatrix`1"/>.
            </summary>
            <param name="other">
            The <see cref="T:Atom.Collections.ObjectMatrix`1"/> to test against. Can be null.
            </param>
            <returns>
            Returns true if the specified <see cref="T:Atom.Collections.ObjectMatrix`1"/> is equal to 
            this <see cref="T:Atom.Collections.ObjectMatrix`1"/>; otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Collections.ObjectMatrix`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            with the data needed to serialize the <see cref="T:Atom.Collections.ObjectMatrix`1"/>.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            to populate with data.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the given <paramref name="info"/> is null.
            </exception>
            <param name="context"> 
            The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>)
            for this serialization. Can be null.
            </param>
        </member>
        <member name="M:Atom.Collections.ObjectMatrix`1.GetEnumerator">
            <summary>
            Gets an enumerator that iterates over all elements of the <see cref="T:Atom.Collections.ObjectMatrix`1"/>.
            </summary>
            <returns>An enumerator.</returns>
        </member>
        <member name="M:Atom.Collections.ObjectMatrix`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator that iterates over all elements of the <see cref="T:Atom.Collections.ObjectMatrix`1"/>.
            </summary>
            <returns>An enumerator.</returns>
        </member>
        <member name="M:Atom.Collections.ObjectMatrix`1.GetHashCode">
            <summary>
            Returns the hash code of this <see cref="T:Atom.Collections.ObjectMatrix`1"/> instance.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Atom.Collections.ObjectMatrix`1.ToString">
            <summary>
            Returns a humen-readable representation of the <see cref="T:Atom.Collections.ObjectMatrix`1"/>.
            </summary>
            <returns>A string representing this ObjectMatrix.</returns>
        </member>
        <member name="M:Atom.Collections.ObjectMatrix`1.Clone">
            <summary>
            Creates a clone of this ObjectMatrix{T}.
            </summary>
            <returns>
            The cloned ObjectMatrix{T}.
            </returns>
        </member>
        <member name="F:Atom.Collections.ObjectMatrix`1.columnCount">
            <summary>
            The number of columns in the matrix.
            </summary>
        </member>
        <member name="F:Atom.Collections.ObjectMatrix`1.rowCount">
            <summary>
            The number of rows in the matrix.
            </summary>
        </member>
        <member name="F:Atom.Collections.ObjectMatrix`1.data">
            <summary>
            The data of the matrix.
            </summary>
        </member>
        <member name="T:Atom.Collections.Pooling.IPooledObject`1">
            <summary>
            Associates an object with a <see cref="T:Atom.Collections.Pooling.PoolNode`1"/>
            </summary>
            <seealso cref="T:Atom.Collections.Pooling.Pool`1"/>
            <typeparam name="T">
            The type of the object beeing pooled.
            </typeparam>
        </member>
        <member name="P:Atom.Collections.Pooling.IPooledObject`1.PoolNode">
            <summary>
            Gets or sets the <see cref="T:Atom.Collections.Pooling.PoolNode`1"/> this IPooledObject{T} is associated with.
            </summary>
        </member>
        <member name="T:Atom.Collections.Pooling.IPooledObjectWrapper`1">
            <summary>
            Represents an <see cref="T:Atom.Collections.Pooling.IPooledObject`1"/> that
            wraps the concept of pooling around another Object.
            </summary>
            <typeparam name="T">
            The type of the pooled Object.
            </typeparam>
            <seealso cref="T:Atom.Collections.Pooling.Pool`1"/>
        </member>
        <member name="P:Atom.Collections.Pooling.IPooledObjectWrapper`1.PooledObject">
            <summary>
            Gets the Object this PooledObjectWrapper{T} wraps around.
            </summary>
        </member>
        <member name="T:Atom.Collections.Pooling.Pool`1">
            <summary>
            Represents a pool of available items that can be removed as needed
            and returned when finished.
            </summary>
            <typeparam name="T">
            The type of the items the Pool stores.
            The type must have a public paramterless constructor.
            </typeparam>
        </member>
        <member name="P:Atom.Collections.Pooling.Pool`1.IsFixedSize">
            <summary>
            Gets or sets a value indicating whether this Pool{T}
            is of fixed size; and as such doesn't resize itself when required.
            </summary>
            <value>
            The default value is false.
            </value>
        </member>
        <member name="P:Atom.Collections.Pooling.Pool`1.AvailableCount">
            <summary>
            Gets the number of available items in the Pool{T}.
            </summary>
            <remarks>
            Retrieving this property is an O(1) operation.
            </remarks>
            <value>
            The number of items that are currently available in the Pool{T}.
            </value>
        </member>
        <member name="P:Atom.Collections.Pooling.Pool`1.ActiveCount">
            <summary>
            Gets the number of active items in the Pool{T}.
            </summary>
            <remarks>
            Retrieving this property is an O(1) operation.
            </remarks>
            <value>
            The number of items that are currently used by the Pool.
            </value>
        </member>
        <member name="P:Atom.Collections.Pooling.Pool`1.Capacity">
            <summary>
            Gets the total number of items in the Pool{T}.
            </summary>
            <remarks>
            Retrieving this property is an O(1) operation.
            </remarks>
            <value>
            The number of items that the Pool can handle.
            </value>
        </member>
        <member name="P:Atom.Collections.Pooling.Pool`1.ActiveNodes">
            <summary>
            Gets an enumerator that iterates through the active nodes 
            in the Pool{T}.
            </summary>
            <remarks>
            This method is an O(n) operation, 
            where n is Capacity divided by ActiveCount. 
            </remarks>
            <value>
            A new enumerator over the active items in the Pool.
            </value>
        </member>
        <member name="P:Atom.Collections.Pooling.Pool`1.AllNodes">
            <summary>
            Gets an enumerator that iterates through all of the nodes 
            in the Pool.
            </summary>
            <remarks>
            This method is an O(1) operation. 
            </remarks>
            <value>
            A new enumerator over all items in the Pool{T}.
            </value>
        </member>
        <member name="M:Atom.Collections.Pooling.Pool`1.#ctor(System.Int32,Atom.Collections.Pooling.PooledObjectCreator{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Collections.Pooling.Pool`1"/> class.
            </summary>
            <remarks>
            No actual nodes are added by the Pool{T}. Consider using <see cref="M:Atom.Collections.Pooling.Pool`1.AddNodes(System.Int32)"/> after creating the Pool.
            </remarks>
            <param name="initialCapacity">
            The total number of items the new Pool{T} can contain without having to re-allocate memory.
            </param>
            <param name="creator">
            The method that creates and initializes new <typeparamref name="T"/>-Items for the new Pool{T}.
            </param>
        </member>
        <member name="M:Atom.Collections.Pooling.Pool`1.Create(System.Int32,Atom.Collections.Pooling.PooledObjectCreator{`0})">
            <summary>
            Creates a new Pool{T} that contains <paramref name="initialSize"/> pre-allocated <see cref="T:Atom.Collections.Pooling.PoolNode`1"/>s.
            </summary>
            <param name="initialSize">
            The initial number of  <see cref="T:Atom.Collections.Pooling.PoolNode`1"/>s to pre-allocate.
            </param>
            <param name="creator">
            The method that creates and initializes new <typeparamref name="T"/>-Items for the new Pool{T}.
            </param>
            <returns>
            The newly created Pool{T}.
            </returns>
        </member>
        <member name="M:Atom.Collections.Pooling.Pool`1.ObjectInvariant">
            <summary>
            Defines the conditions that should hold true on each instance of a class
            whenever that object is visible to a client.
            </summary>
        </member>
        <member name="M:Atom.Collections.Pooling.Pool`1.Clear">
            <summary>
            Makes all items in the Pool available.
            </summary>
            <remarks>
            This method is an O(n) operation, where n is Capacity.
            </remarks>
        </member>
        <member name="M:Atom.Collections.Pooling.Pool`1.Get">
            <summary>
            Removes an available item from the Pool and makes it active.
            </summary>
            <remarks>
            This method is an O(1) operation, unless the Pool must be resized.
            </remarks>
            <returns>
            The node that is removed from the available Pool; 
            or null if there are no available nodes and Pool is of fixed size (<seealso cref="P:Atom.Collections.Pooling.Pool`1.IsFixedSize"/>).
            </returns>
        </member>
        <member name="M:Atom.Collections.Pooling.Pool`1.Return(Atom.Collections.Pooling.PoolNode{`0})">
            <summary>
            Returns the given active <see cref="T:Atom.Collections.Pooling.PoolNode`1"/> to 
            the list of available nodes of this Pool{T}
            </summary>
            <remarks>
            This method is an O(1) operation.
            </remarks>
            <param name="node">
            The node to return to this Pool{T}.
            </param>
            <exception cref="T:System.ArgumentException">
            The node being returned is not owned by this Pool{T}.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The node being returned was not active.
            This probably means the node was previously returned.
            </exception>
        </member>
        <member name="M:Atom.Collections.Pooling.Pool`1.GetEnumerator">
            <summary>
            Gets an enumerator that iterates through the active items 
            of this Pool.
            </summary>
            <returns>
            A new enumerator that iterates through the active items 
            of this Pool.
            </returns>
            <remarks>
            This method is an O(n) operation, 
            where n is Capacity divided by ActiveCount. 
            </remarks>
        </member>
        <member name="M:Atom.Collections.Pooling.Pool`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator that iterates through the active items 
            of this Pool.
            </summary>
            <returns>
            A new enumerator that iterates through the active items 
            of this Pool.
            </returns>
        </member>
        <member name="M:Atom.Collections.Pooling.Pool`1.AddNodes(System.Int32)">
            <summary>
            Adds the specified number of <see cref="T:Atom.Collections.Pooling.PoolNode`1"/>s to this Pool{T}.
            </summary>
            <param name="count">
            The number of nodes to add.
            </param>
        </member>
        <member name="M:Atom.Collections.Pooling.Pool`1.AddNewNode">
            <summary>
            Adds a new <see cref="T:Atom.Collections.Pooling.PoolNode`1"/> to this Pool{T},
            and as such resizing the Pool.
            </summary>
        </member>
        <member name="M:Atom.Collections.Pooling.Pool`1.OnCreated(Atom.Collections.Pooling.PoolNode{`0})">
            <summary>
            Called when the given <see cref="T:Atom.Collections.Pooling.PoolNode`1"/> has been created
            for this Pool{T}.
            </summary>
            <param name="node">
            The PoolNode{T} that has just been created.
            </param>
        </member>
        <member name="F:Atom.Collections.Pooling.Pool`1.creator">
            <summary>
            The method that is used to create new Objects for this Pool{T}.
            </summary>
        </member>
        <member name="F:Atom.Collections.Pooling.Pool`1.pool">
            <summary>
            The pool of item nodes.
            </summary>
        </member>
        <member name="F:Atom.Collections.Pooling.Pool`1.available">
            <summary>
            The queue of available item node indices.
            </summary>
        </member>
        <member name="T:Atom.Collections.Pooling.PooledObjectCreator`1">
            <summary>
            Provides a mechanism to create an Object used within a <see cref="T:Atom.Collections.Pooling.Pool`1"/>.
            </summary>
            <typeparam name="T">
            The type of the object created.
            Is not required to implement the <see cref="T:Atom.Collections.Pooling.IPooledObject`1"/> interface.
            </typeparam>
            <returns>
            The object which has been created. Should not be null.
            </returns>
        </member>
        <member name="T:Atom.Collections.Pooling.PooledObjectWrapper`1">
            <summary>
            Defines an <see cref="T:Atom.Collections.Pooling.IPooledObject`1"/> that wraps 
            the concept of pooling around another Object.
            </summary>
            <seealso cref="T:Atom.Collections.Pooling.Pool`1"/>
            <remarks>
            This allows to seperate the concept of pooling from the
            implementation of an object.
            </remarks>
            <typeparam name="T">
            The type of the pooled Object.
            </typeparam>
        </member>
        <member name="P:Atom.Collections.Pooling.PooledObjectWrapper`1.PoolNode">
            <summary>
            Gets or sets the PoolNode{IPooledObjectWrapper{T}} which
            is associated with this PooledObjectWrapper{T}.
            </summary>
        </member>
        <member name="M:Atom.Collections.Pooling.PooledObjectWrapper`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the PooledObjectWrapper class.
            </summary>
            <param name="pooledObject">
            The object this PooledObjectWrapper wraps around.
            </param>
        </member>
        <member name="P:Atom.Collections.Pooling.PooledObjectWrapper`1.PooledObject">
            <summary>
            Gets the Object this PooledObjectWrapper{T} wraps around.
            </summary>
        </member>
        <member name="F:Atom.Collections.Pooling.PooledObjectWrapper`1.pooledObject">
            <summary>
            Stores the Object this PooledObjectWrapper{T} wraps around.
            </summary>
        </member>
        <member name="T:Atom.Collections.Pooling.PoolNode`1">
            <summary>
            Represents an entry in the <see cref="T:Atom.Collections.Pooling.Pool`1"/> collection.
            This class can't be inherited.
            </summary>
            <typeparam name="T">
            The type of the item the PoolNode stores.
            </typeparam>
        </member>
        <member name="P:Atom.Collections.Pooling.PoolNode`1.Item">
            <summary>
            Gets the item stored in this PoolNode{T}.
            </summary>
            <value>The item this PoolNode{T} contains.</value>
        </member>
        <member name="P:Atom.Collections.Pooling.PoolNode`1.IsActive">
            <summary>
            Gets a value indicating whether this PoolNode{T} is currently
            used by the application and as such is not available for reuse.
            </summary>
            <value>
            Retirms true if this PoolNode{T} is currently
            used by the application;
            or otherwise false if the application may re.use the pool.
            </value>
        </member>
        <member name="P:Atom.Collections.Pooling.PoolNode`1.Pool">
            <summary>
            Gets the <see cref="T:Atom.Collections.Pooling.Pool`1"/> that owns this PoolNode{T}.
            </summary>
            <value>
            The <see cref="T:Atom.Collections.Pooling.Pool`1"/> that owns this PoolNode{T}.
            </value>
        </member>
        <member name="P:Atom.Collections.Pooling.PoolNode`1.NodeIndex">
            <summary>
            Gets the index of this PoolNode{T} into its parent Pool{T}.
            </summary>
        </member>
        <member name="M:Atom.Collections.Pooling.PoolNode`1.#ctor(`0,System.Int32,Atom.Collections.Pooling.Pool{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Collections.Pooling.PoolNode`1"/> class.
            </summary>
            <param name="item">
            The item that is stored in the new PoolNode{T}.
            </param>
            <param name="nodeIndex">
            The the index of the new PoolNode{T} into its parent <paramref name="pool"/>.
            </param>
            <param name="pool">
            The <see cref="T:Atom.Collections.Pooling.Pool`1"/> that owns the new PoolNode{T}.
            </param>
        </member>
        <member name="M:Atom.Collections.Pooling.PoolNode`1.ObjectInvariant">
            <summary>
            Defines the conditions that should hold true on each instance of a class
            whenever that object is visible to a client.
            </summary>
             [ContractInvariantMethod]
        </member>
        <member name="F:Atom.Collections.Pooling.PoolNode`1.item">
            <summary>
            The item that is stored in this PoolNode{T}.
            </summary>
        </member>
        <member name="F:Atom.Collections.Pooling.PoolNode`1.nodeIndex">
            <summary>
            Used internally to track which entry in the Pool{T} is associated with this PoolNode{T}.
            </summary>
        </member>
        <member name="F:Atom.Collections.Pooling.PoolNode`1.pool">
            <summary>
            Reference to the pool that owns the Node.
            </summary>
        </member>
        <member name="T:Atom.Collections.Pooling.WrappingPool`1">
            <summary>
            Represents a Pool that stores <see cref="T:Atom.Collections.Pooling.IPooledObjectWrapper`1"/>s instead
            of directly storing <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">
            The type of the items the Pool stores within its <see cref="T:Atom.Collections.Pooling.IPooledObjectWrapper`1"/>s.
            </typeparam>
        </member>
        <member name="M:Atom.Collections.Pooling.WrappingPool`1.#ctor(System.Int32,Atom.Collections.Pooling.PooledObjectCreator{Atom.Collections.Pooling.IPooledObjectWrapper{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Collections.Pooling.WrappingPool`1"/> class.
            </summary>
            <param name="initialSize">
            The total number of items the new WrappingPool{T} initially contains.
            </param>
            <param name="creator">
            The method that creates and initializes new items for the new WrappingPool{T}.
            </param>
        </member>
        <member name="M:Atom.Collections.Pooling.WrappingPool`1.OnCreated(Atom.Collections.Pooling.PoolNode{Atom.Collections.Pooling.IPooledObjectWrapper{`0}})">
            <summary>
            Called when the given PoolNode{IPooledObjectWrapper{T}} has been created
            for this WrappingPool{T}.
            </summary>
            <param name="node">
            The PoolNode{IPooledObjectWrapper{T}} that has just been created.
            This value is never null.
            </param>
        </member>
        <member name="T:Atom.Collections.PreconditionedList`1">
            <summary>
            Represents a <see cref="T:Atom.Collections.RedirectingList`1"/> that requires items added or inserted into
            the list to fulfill a <see cref="T:System.Predicate`1"/>.
            </summary>
            <typeparam name="T">
            The type of the items in the list.
            </typeparam>
        </member>
        <member name="P:Atom.Collections.PreconditionedList`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <exception cref="T:System.ArgumentException">
            If the specified item does not fulfill the predicate of this PreconditionedList{T}.
            </exception>
            <param name="index">
            The zero-based index of the element to get or set.
            </param>
            <returns>
            The element at the specified index.
            </returns>
        </member>
        <member name="M:Atom.Collections.PreconditionedList`1.#ctor(System.Predicate{`0})">
            <summary>
            Initializes a new instance of the PreconditionedList{T} class.
            </summary>
            <param name="predicate">
            The predicate that must be true for an element allowed to be inserted
            or added to the new PreconditionedList{T}.
            </param>
        </member>
        <member name="M:Atom.Collections.PreconditionedList`1.#ctor(System.Predicate{`0},System.Collections.Generic.IList{`0})">
            <summary>
            Initializes a new instance of the PreconditionedList{T} class.
            </summary>
            <param name="predicate">
            The predicate that must be true for an element allowed to be inserted
            or added to the new PreconditionedList{T}.
            </param>
            <param name="list">
            The IList{T} the new PreconditionedList{T} uses internally.
            Existing items are -not- validated by the specified <paramref name="predicate"/>.
            </param>
        </member>
        <member name="M:Atom.Collections.PreconditionedList`1.Add(`0)">
            <summary>
            Adds the specified item to this PreconditionedList{T}.
            </summary>
            <exception cref="T:System.ArgumentException">
            If the specified item does not fulfill the predicate of this PreconditionedList{T}.
            </exception>
            <param name="item">
            The item to add.
            </param>
        </member>
        <member name="M:Atom.Collections.PreconditionedList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts the specified item into this PreconditionedList{T}.
            </summary>
            <exception cref="T:System.ArgumentException">
            If the specified item does not fulfill the predicate of this PreconditionedList{T}.
            </exception>
            <param name="index">
            The zero-based index where the item should be inserted.
            </param>
            <param name="item">
            The item to insert.
            </param>
        </member>
        <member name="M:Atom.Collections.PreconditionedList`1.OnPredicateFailed(`0,System.String)">
            <summary>
            Called when the predicate has returned false upon examining an item.
            </summary>
            <exception cref="T:System.ArgumentException">
            By default an exception is thrown.
            </exception>
            <param name="item">
            The item that has been examined.
            </param>
            <param name="argumentName">
            The name of the argument from which the value has been received.
            </param>
        </member>
        <member name="M:Atom.Collections.PreconditionedList`1.GetPredicateFailedErrorMessage(`0)">
            <summary>
            Gets the error message that is shown when adding or inserting an item
            into this PreconditionedList{T} does not fulfill its predicate.
            </summary>
            <param name="item">
            The item that was attempted to be added or inserted.
            </param>
            <returns>
            The error message.
            </returns>
        </member>
        <member name="F:Atom.Collections.PreconditionedList`1.predicate">
            <summary>
            The predicate that must be true for an element allowed to be inserted
            or added to this PreconditionedList{T}.
            </summary>        
        </member>
        <member name="T:Atom.Collections.RedirectingList`1">
            <summary>
            Represents an list of items that uses another list to 
            actually store the elements.
            </summary>
            <remarks>
            This class implements both IList{T}, ICollection{T} and
            their non-generic counter-parts.
            The other aspect of this class is that all inseration and deletion
            methods are virtual and as such overwriteable.
            </remarks>
            <typeparam name="T">
            The type of the items in the list.
            </typeparam>
        </member>
        <member name="P:Atom.Collections.RedirectingList`1.List">
            <summary>
            Gets the list this RedirectingList{T} uses internally.
            </summary>
        </member>
        <member name="M:Atom.Collections.RedirectingList`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Collections.RedirectingList`1"/> class.
            </summary>
            <param name="list">
            The list the new RedirectingList{T} should redirect all calls to.
            </param>
        </member>
        <member name="M:Atom.Collections.RedirectingList`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Collections.RedirectingList`1"/> class.
            </summary>
        </member>
        <member name="M:Atom.Collections.RedirectingList`1.ObjectInvariant">
            <summary>
            Defines the contract invariant that always holds true.
            </summary>
        </member>
        <member name="M:Atom.Collections.RedirectingList`1.Cast(System.Object)">
            <summary>
            Casts the specified object to T.
            </summary>
            <remarks>
            Used by the various IList and ICollection methods.
            </remarks>
            <param name="value">
            The input value.
            </param>
            <returns>
            The casted output value.
            </returns>
        </member>
        <member name="M:Atom.Collections.RedirectingList`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the System.Collections.Generic.IList{T}.
            </summary>
            <param name="item">
            The object to locate in the System.Collections.Generic.IList{T}.
            </param>
            <returns>
            The index of item if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:Atom.Collections.RedirectingList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the System.Collections.Generic.IList{T} at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert into the System.Collections.Generic.IList{T}.</param>
        </member>
        <member name="M:Atom.Collections.RedirectingList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the System.Collections.Generic.IList{T} item at the specified index.
            </summary>
            <param name="index"> The zero-based index of the item to remove.</param>
        </member>
        <member name="P:Atom.Collections.RedirectingList`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">
            The zero-based index of the element to get or set.
            </param>
            <returns>
            The element at the specified index.
            </returns>
        </member>
        <member name="M:Atom.Collections.RedirectingList`1.Add(`0)">
            <summary>
            Adds an item to the System.Collections.Generic.ICollection{T}.
            </summary>
            <param name="item">
            The object to add to the System.Collections.Generic.ICollection{T}.
            </param>
        </member>
        <member name="M:Atom.Collections.RedirectingList`1.Clear">
            <summary>
            Removes all items from the System.Collections.Generic.ICollection{T}.
            </summary>
        </member>
        <member name="M:Atom.Collections.RedirectingList`1.Contains(`0)">
            <summary>
            Determines whether the System.Collections.Generic.ICollection{T} contains a specific value.
            </summary>
            <param name="item">
            The object to locate in the System.Collections.Generic.ICollection{T}.
            </param>
            <returns>
            true if item is found in the System.Collections.Generic.ICollection{T}>;
            otherwise, false.
            </returns>
        </member>
        <member name="M:Atom.Collections.RedirectingList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the System.Collections.Generic.ICollection{T} to an
            System.Array, starting at a particular System.Array index.
            </summary>
            <param name="array">
            The one-dimensional System.Array that is the destination of the elements
            copied from System.Collections.Generic.ICollection{T}. The System.Array must
            have zero-based indexing.
            </param>
            <param name="arrayIndex">
            The zero-based index in array at which copying begins.
            </param>
        </member>
        <member name="P:Atom.Collections.RedirectingList`1.Count">
            <summary>
            Gets the number of elements contained in the System.Collections.Generic.ICollection{T}.
            </summary>
        </member>
        <member name="P:Atom.Collections.RedirectingList`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the System.Collections.Generic.ICollection{T} is read-only.
            </summary>
        </member>
        <member name="M:Atom.Collections.RedirectingList`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the System.Collections.Generic.ICollection{T}.
            </summary>
            <param name="item">
            The object to remove from the System.Collections.Generic.ICollection{T}.
            </param>
            <returns>
            true if item was successfully removed from the System.Collections.Generic.ICollection{T};
            otherwise, false. This method also returns false if item is not found in
            the original System.Collections.Generic.ICollection{T}.
            </returns>
        </member>
        <member name="M:Atom.Collections.RedirectingList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A System.Collections.Generic.IEnumerator{T} that can be used to iterate through
            the collection.
            </returns>
        </member>
        <member name="M:Atom.Collections.RedirectingList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A System.Collections.Generic.IEnumerator that can be used to iterate through
            the collection.
            </returns>
        </member>
        <member name="F:Atom.Collections.RedirectingList`1.list">
            <summary>
            The list this RedirectingList{T} is redirecting all calls to.
            </summary>
        </member>
        <member name="T:Atom.Collections.SortableList`1">
            <summary>
            The <see cref="T:Atom.Collections.SortableList`1"/> keeps itself sorted,
            using either a specified <see cref="T:System.Collections.Generic.IComparer`1"/> or the
            <see cref="T:System.IComparable"/>/<see cref="T:System.IComparable`1"/> implementation
            of an object.
            </summary>
            <typeparam name="T">
            The type of the items to store inside the list.
            </typeparam>
        </member>
        <member name="P:Atom.Collections.SortableList`1.IsSorted">
            <summary> 
            Gets a value indicating whether this <see cref="T:Atom.Collections.SortableList`1"/> is currently sorted. 
            </summary>
            <value>
            Returns <see langword="true"/> if this SortableList{T} is currently sorted;
            otherwise false.
            </value>
        </member>
        <member name="P:Atom.Collections.SortableList`1.KeepSorted">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Atom.Collections.SortableList`1"/> should 
            keep itself sorted all the time. 
            </summary>
            <remarks>
            When adding many new items it may be wise to set this value to false
            for the duration of adding new items.
            </remarks>
            <value>The default value is true.</value>
        </member>
        <member name="P:Atom.Collections.SortableList`1.AllowDuplicates">
            <summary>
            Gets or sets a value indicating whether to allow duplicate items in this <see cref="T:Atom.Collections.SortableList`1"/>.
            </summary>
            <value>The default value is true.</value>
        </member>
        <member name="P:Atom.Collections.SortableList`1.Count">
            <summary>
            Gets the amount of items in this <see cref="T:Atom.Collections.SortableList`1"/>.
            </summary>
            <value>
            The number of elements actually contained in the SortableList{T}.
            </value>
        </member>
        <member name="P:Atom.Collections.SortableList`1.Item(System.Int32)">
            <summary>
            Gets or sets item at the specified <paramref name="index"/>.
            </summary>
            <param name="index"> The index of the item. </param>
            <returns> The item at the specified index. </returns>
        </member>
        <member name="P:Atom.Collections.SortableList`1.Capacity">
            <summary>
            Gets or sets the total number of elements the internal 
            data structure can hold without resizing.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            </exception>
            <value>
            The number of elements that the <see cref="T:Atom.Collections.SortableList`1"/> can contain before resizing is required.
            </value>
        </member>
        <member name="P:Atom.Collections.SortableList`1.Minimum">
            <summary>
            Gets the minimum item in this <see cref="T:Atom.Collections.SortableList`1"/>.
            </summary>
            <value>The minimum item in this <see cref="T:Atom.Collections.SortableList`1"/>.</value>
        </member>
        <member name="P:Atom.Collections.SortableList`1.IndexOfMinimum">
            <summary>
            Gets the index of the object of the list whose value is minimum.
            </summary>
            <value>The index of the minimum object in the list.</value>
        </member>
        <member name="P:Atom.Collections.SortableList`1.Maximum">
            <summary>
            Gets the maximum item in this <see cref="T:Atom.Collections.SortableList`1"/>.
            </summary>
            <value>
            The maximum item in this <see cref="T:Atom.Collections.SortableList`1"/>.
            </value>
        </member>
        <member name="P:Atom.Collections.SortableList`1.IndexOfMaximum">
            <summary>
            Gets the index of the object of the list whose value is maximum.
            </summary>
            <value>The index of the maximum object in the list.</value>
        </member>
        <member name="M:Atom.Collections.SortableList`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Collections.SortableList`1"/> class.
            Since no IComparer is provided here, added <typeparamref name="T"/> must implement the IComparer interface.
            </summary>
        </member>
        <member name="M:Atom.Collections.SortableList`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Collections.SortableList`1"/> class.
            </summary>
            <exception cref="T:System.ArgumentException">
            If <Tparamref name="T"/> doesn't implement <see cref="T:System.IComparable`1"/> and is not <see cref="T:System.Object"/>.
            </exception>
            <param name="capacity"> The initial number of items the <see cref="T:Atom.Collections.SortableList`1"/> can contain. </param>
        </member>
        <member name="M:Atom.Collections.SortableList`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Collections.SortableList`1"/> class.
            </summary>
            <exception cref="T:System.ArgumentException">
            If <paramref name="comparer"/> is null: If <Tparamref name="T"/> doesn't implement <see cref="T:System.IComparable`1"/> and is not <see cref="T:System.Object"/>.
            </exception>
            <param name="comparer"> The comparer to use for sorthing this <see cref="T:Atom.Collections.SortableList`1"/>. </param>
        </member>
        <member name="M:Atom.Collections.SortableList`1.#ctor(System.Collections.Generic.IComparer{`0},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Collections.SortableList`1"/> class.
            </summary>
            <exception cref="T:System.ArgumentException">
            If <paramref name="comparer"/> is null: If <Tparamref name="T"/> doesn't implement <see cref="T:System.IComparable`1"/> and is not <see cref="T:System.Object"/>.
            </exception>
            <param name="comparer"> The comparer to use for sorthing this <see cref="T:Atom.Collections.SortableList`1"/>. </param>
            <param name="capacity"> The initial number of items the <see cref="T:Atom.Collections.SortableList`1"/> can contain. </param>
        </member>
        <member name="M:Atom.Collections.SortableList`1.Sort">
            <summary>
            Sorts this <see cref="T:Atom.Collections.SortableList`1"/>.
            Does nothing if already sorted.
            </summary>
        </member>
        <member name="M:Atom.Collections.SortableList`1.LimitOccurrencesOf(`0,System.Int32)">
            <summary>
            Limits the number of occurences of the specified <paramref name="item"/>.
            </summary>
            <param name="item">
            The item to limit.
            </param>
            <param name="amountToKeep">
            The maximum number of items to keep.
            </param>
        </member>
        <member name="M:Atom.Collections.SortableList`1.RemoveDuplicates">
            <summary>
            Removes all duplicate items from this <see cref="T:Atom.Collections.SortableList`1"/>.
            </summary>
        </member>
        <member name="M:Atom.Collections.SortableList`1.Contains(`0)">
            <summary>
            Returns whether this <see cref="T:Atom.Collections.SortableList`1"/> contains the specified <paramref name="item"/>.
            </summary>
            <param name="item"> The item to test. </param>
            <returns>True if it contains the item, otherwise false. </returns>
        </member>
        <member name="M:Atom.Collections.SortableList`1.IndexOf(`0)">
            <summary>
            Returns the index of the specified <paramref name="item"/> in this <see cref="T:Atom.Collections.SortableList`1"/>.
            </summary>
            <param name="item"> The item to get the index of. </param>
            <returns>
            A positive value if found,
            a negative value if not found.
            </returns>
        </member>
        <member name="M:Atom.Collections.SortableList`1.IndexOf(`0,System.Collections.Generic.IEqualityComparer{`0})">
            <summary> Returns the index of the specified item. </summary>
            <exception cref="T:System.ArgumentNullException"> If <paramref name="comparer"/> is null. </exception>
            <param name="item">The object to locate.</param>
            <param name="comparer">Equality function to use for the search.</param>
            <returns>The index of the item if found, -1 if not found. </returns>
        </member>
        <member name="M:Atom.Collections.SortableList`1.IndexOf(`0,System.Int32)">
            <summary>
            Returns the index of the specified <paramref name="item"/> in this <see cref="T:Atom.Collections.SortableList`1"/>.
            </summary>
            <param name="item"> The item to get the index of. </param>
            <param name="startIndex">The zero-based starting index of the search. </param>
            <returns>
            A positive value if found,
            a negative value if not found.
            </returns>
        </member>
        <member name="M:Atom.Collections.SortableList`1.Add(`0)">
            <summary>
            Adds the specified <paramref name="item"/> to this <see cref="T:Atom.Collections.SortableList`1"/>.
            </summary>
            <param name="item"> The item to add. </param>
            <returns> The index of the added item. </returns>
        </member>
        <member name="M:Atom.Collections.SortableList`1.AddRange(System.Collections.Generic.ICollection{`0})">
            <summary>
            Adds the elements of the specified collection to this <see cref="T:Atom.Collections.SortableList`1"/>.
            </summary>
            <param name="items"> The items to add. </param>
        </member>
        <member name="M:Atom.Collections.SortableList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts the specified <paramref name="item"/> at the specified <paramref name="index"/>.
            </summary>
            <param name="index">The zero-based index at which the <paramref name="item"/> should be inserted.</param>
            <param name="item">The item to insert.</param>  
            <exception cref="T:System.InvalidOperationException">
            If <see cref="P:Atom.Collections.SortableList`1.KeepSorted"/> is set to true. 
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> 
            If the specified <paramref name="index"/> is out of range.
            </exception>
            <exception cref="T:System.ArgumentException">
            If <see cref="P:Atom.Collections.SortableList`1.AllowDuplicates"/> is true and the list already contains the specified item.
            </exception>
        </member>
        <member name="M:Atom.Collections.SortableList`1.InsertRange(System.Int32,System.Collections.Generic.ICollection{`0})">
            <summary>
            Adds the elements of the specified collection to this <see cref="T:Atom.Collections.SortableList`1"/>
            at the specified <paramref name="index"/>.
            </summary>
            <param name="index">
            The index to start adding at.
            </param>
            <param name="items">
            The items to add.
            </param>
        </member>
        <member name="M:Atom.Collections.SortableList`1.Clear">
            <summary>
            Removes all elements from this <see cref="T:Atom.Collections.SortableList`1"/>.
            </summary>
        </member>
        <member name="M:Atom.Collections.SortableList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified <paramref name="index"/>.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"> If the specified <paramref name="index"/> is invalid. </exception>
            <param name="index"> The index of the item to remove. </param>
        </member>
        <member name="M:Atom.Collections.SortableList`1.GetHashCode">
            <summary>
            Returns the hash-code of this instance.
            </summary>
            <returns>The hash-code.</returns>
        </member>
        <member name="M:Atom.Collections.SortableList`1.ToString">
            <summary>
            Returns a string representation of this <see cref="T:Atom.Collections.SortableList`1"/> instance.
            </summary>
            <returns>A string representation of this <see cref="T:Atom.Collections.SortableList`1"/> instance.</returns>
        </member>
        <member name="M:Atom.Collections.SortableList`1.Equals(Atom.Collections.SortableList{`0})">
            <summary>
            Determines whether all elements of this <see cref="T:Atom.Collections.SortableList`1"/> are
            equal to the specified <see cref="T:Atom.Collections.SortableList`1"/>.
            </summary>
            <param name="other">The other SortableList to compare against.</param>
            <returns>
            Returns <see langword="true"/> if the lists are equal;
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Collections.SortableList`1.Equals(System.Object)">
            <summary>
            Determines whether all elements of this <see cref="T:Atom.Collections.SortableList`1"/> are
            equal to the specified Object.
            </summary>
            <param name="obj">
            The object to compare to.
            </param>
            <returns>
            Returns <see langword="true"/> if they are equal;
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Collections.SortableList`1.Clone">
            <summary>
            Returns a clone of this SortableList{T} instance.
            </summary>
            <returns>
            The cloned SortableList{T}.
            </returns>
        </member>
        <member name="M:Atom.Collections.SortableList`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <summary>
            Adds the specified <paramref name="item"/> to this <see cref="T:Atom.Collections.SortableList`1"/>.
            </summary>
            <param name="item"> The item to add. </param>
        </member>
        <member name="M:Atom.Collections.SortableList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of this <see cref="T:Atom.Collections.SortableList`1"/> to the specified <paramref name="array"/>
            starting at the specified <paramref name="arrayIndex"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            If <paramref name="arrayIndex"/> is equal to or greater than the length of array.-or-The number
            of elements in the source SortavbleList{T} is greater than
            the available space from arrayIndex to the end of the destination array.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If the specified <paramref name="arrayIndex"/> is invalid.
            </exception>
            <param name="array">
            The one-dimensional System.Array that is the destination of the elements
            copied from SortableList{T}. The System.Array must have zero-based indexing.
            </param>
            <param name="arrayIndex">
            The zero-based index in array at which copying begins.
            </param>
        </member>
        <member name="P:Atom.Collections.SortableList`1.IsReadOnly">
            <summary>
            Gets a value indicating whether from this collection can only be readen.
            </summary>
            <value>Always returns <see langword="false"/>.</value>
        </member>
        <member name="M:Atom.Collections.SortableList`1.Remove(`0)">
            <summary>
            Removes the first occurence of the specified <paramref name="item"/>.
            </summary>
            <param name="item"> The item to remove. </param>
            <returns>
            Returns <see langword="true"/> if the given <paramref name="item"/> has been removed;
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Collections.SortableList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates over through this <see cref="T:Atom.Collections.SortableList`1"/>.
            </summary>
            <returns>A new IEnumerator{T} over the items in this SortableList{T}.</returns>
        </member>
        <member name="M:Atom.Collections.SortableList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates over through this <see cref="T:Atom.Collections.SortableList`1"/>.
            </summary>
            <returns>A new IEnumerator{T} over the items in this SortableList{T}.</returns>
        </member>
        <member name="F:Atom.Collections.SortableList`1.list">
            <summary> 
            The internal list that is kept sorted. 
            </summary>
        </member>
        <member name="F:Atom.Collections.SortableList`1.comparer">
            <summary> 
            The comparer used for sorting. May be null.
            </summary>
        </member>
        <member name="F:Atom.Collections.SortableList`1.useObjectComparer">
            <summary> 
            States whether to use the ICompareable interface of the objects for comparing.
            </summary>
        </member>
        <member name="T:Atom.Collections.SortableList`1.ObjectComparer">
            <summary>
            Implements an <see cref="T:System.Collections.Generic.IComparer`1"/>
            that is used when the user doesn't specifiy
            a comparer.
            </summary>
        </member>
        <member name="M:Atom.Collections.SortableList`1.ObjectComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Collections.SortableList`1.ObjectComparer"/> class.
            </summary>
        </member>
        <member name="M:Atom.Collections.SortableList`1.ObjectComparer.Compare(`0,`0)">
            <summary>
            Compares the objects.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            Value Condition 
            Less than zero x is less than y.
            Zero x equals y.
            Greater than zero x is greater than y.
            </returns>
        </member>
        <member name="T:Atom.Components.Component">
            <summary>
            Defines an abstract base implement of the <see cref="T:Atom.Components.IComponent"/> interface,
            representing an abstraction of specific functionality that is owned by an <see cref="T:Atom.Components.IEntity"/>.
            </summary>
        </member>
        <member name="P:Atom.Components.Component.Owner">
            <summary>
            Gets or sets the <see cref="T:Atom.Components.IEntity"/> that owns this <see cref="T:Atom.Components.Component"/>.
            </summary>
            <remarks>
            Components are supposed to be added or removed using
            the <see cref="T:Atom.Components.IEntityComponentCollection"/>, not this property.
            </remarks>
            <value>
            The Entity that owns this Component.
            </value>
        </member>
        <member name="P:Atom.Components.Component.IsEnabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Atom.Components.Component"/> is enabled or disabled.
            </summary>
            <remarks>
            Override this property to handle toggling manually.
            </remarks>
            <value>The default value is true.</value>
        </member>
        <member name="M:Atom.Components.Component.#ctor">
            <summary>
            Initializes a new instance of the Component class.
            </summary>
        </member>
        <member name="M:Atom.Components.Component.Initialize">
            <summary>
            Called when this IComponent has been successfully attached to an <see cref="T:Atom.Components.IEntity"/>.
            </summary>
            <remarks>
            <see cref="M:Atom.Components.Component.InitializeBindings"/> should be used to get any IComponents
            this IComponent depends on.
            </remarks>
        </member>
        <member name="M:Atom.Components.Component.InitializeBindings">
            <summary>
            Called when an IComponent has been removed or added to the <see cref="T:Atom.Components.IEntity"/> that owns this IComponent.
            Override this method to receive IComponents this IComponent depends on.
            </summary>
        </member>
        <member name="M:Atom.Components.Component.Update(Atom.IUpdateContext)">
            <summary>
            Called when the game has determined that logic needs to be processed.
            Override this method to add logic specific code.
            This is a no-op and must not be called by the sub-class.
            </summary>
            <param name="updateContext">
            The current update context.
            </param>
        </member>
        <member name="M:Atom.Components.Component.PreUpdate(Atom.IUpdateContext)">
            <summary>
            Gets called before <see cref="M:Atom.Components.Component.Update(Atom.IUpdateContext)"/> is called.
            This is a no-op and must not be called by the sub-class.
            </summary>
            <param name="updateContext">
            The current IUpdateContext.
            </param>
        </member>
        <member name="F:Atom.Components.Component.owner">
            <summary>
            The <see cref="T:Atom.Components.IEntity"/> that owns this <see cref="T:Atom.Components.Component"/>.
            </summary>
        </member>
        <member name="F:Atom.Components.Component.isEnabled">
            <summary>
            States whether this <see cref="T:Atom.Components.Component"/> is currently enabled.
            </summary>
        </member>
        <member name="T:Atom.Components.ComponentNotFoundException">
            <summary> 
            The exception that is thrown when an <see cref="T:Atom.Components.IComponent"/> could not be found.
            </summary>
        </member>
        <member name="M:Atom.Components.ComponentNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Components.ComponentNotFoundException"/> class.
            </summary>
        </member>
        <member name="M:Atom.Components.ComponentNotFoundException.#ctor(System.Type)">
            <summary> 
            Initializes a new instance of the <see cref="T:Atom.Components.ComponentNotFoundException"/> class and sets
            the error message automatically.
            </summary>
            <param name="componentType">
            The type of the Component.
            </param>
        </member>
        <member name="M:Atom.Components.ComponentNotFoundException.#ctor(System.String)">
            <summary> 
            Initializes a new instance of the <see cref="T:Atom.Components.ComponentNotFoundException"/> class and sets
            the error message to the specified <see cref="T:System.String"/>.
            </summary>
            <param name="message"> The message that describes the error. </param>
        </member>
        <member name="M:Atom.Components.ComponentNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Components.ComponentNotFoundException"/> class 
            with a specified error message and a reference 
            to the inner exception that is the cause of this exception.
            </summary>
            <param name="message"> The message that describes the error. </param>
            <param name="innerException"> The exception that is cause of the new <see cref="T:Atom.Components.ComponentNotFoundException"/>. </param>
        </member>
        <member name="M:Atom.Components.ComponentNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> 
            Initializes a new instance of the <see cref="T:Atom.Components.ComponentNotFoundException"/> class, and
            passes the specified <see cref="T:System.Runtime.Serialization.SerializationInfo"/> and
            <see cref="T:System.Runtime.Serialization.StreamingContext"/> to the <see cref="T:System.Exception"/> constructor.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds
            the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that 
            contains contextual information about the source or destination.
            </param>
        </member>
        <member name="T:Atom.Components.Entity">
            <summary>
            By aggregating <see cref="T:Atom.Components.IComponent"/>s an Entity can loosely expose behaviour.
            </summary>
            <remarks>
            By using composition over inheritance one can archive more flexible object models.
            </remarks>
        </member>
        <member name="P:Atom.Components.Entity.Name">
            <summary>
            Gets or sets the name that (usually) uniquely identifies this Entity.
            </summary>
            <value>
            The default value is null.
            </value>
        </member>
        <member name="P:Atom.Components.Entity.Components">
            <summary>
            Gets the <see cref="T:Atom.Components.IEntityComponentCollection"/> that contains the <see cref="T:Atom.Components.IComponent"/>s
            this Entity is composed of.
            </summary>
        </member>
        <member name="M:Atom.Components.Entity.#ctor">
            <summary>
            Initializes a new instance of the Entity class, that 
            uses the <see cref="T:Atom.Components.EntityComponentCollection"/> with a default capacity of 5.
            </summary>
        </member>
        <member name="M:Atom.Components.Entity.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the Entity class, that 
            uses the <see cref="T:Atom.Components.EntityComponentCollection"/> with the given <paramref name="capacity"/>.
            </summary>
            <param name="capacity">
            The initial number of <see cref="T:Atom.Components.IComponent"/>s this Entity may contain
            without reallocating memory.
            </param>
        </member>
        <member name="M:Atom.Components.Entity.#ctor(Atom.Components.IEntityComponentCollection)">
            <summary>
            Initializes a new instance of the Entity class.
            </summary>
            <param name="components">
            The IEntityComponentCollection that is injected into the new Entity.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="components"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the given <see cref="T:Atom.Components.IEntityComponentCollection"/> is already owned by another <see cref="T:Atom.Components.Entity"/>.
            </exception>
        </member>
        <member name="M:Atom.Components.Entity.Update(Atom.IUpdateContext)">
            <summary>
            Updates this Entity and all the <see cref="T:Atom.Components.IComponent"/>s it is composed of.
            </summary>
            <param name="updateContext">
            The current IUpdateContext.
            </param>
        </member>
        <member name="M:Atom.Components.Entity.PreUpdate(Atom.IUpdateContext)">
            <summary>
            Pre-updates this Entity and all the <see cref="T:Atom.Components.IComponent"/>s it is composed of.
            </summary>
            <param name="updateContext">
            The current IUpdateContext.
            </param>
        </member>
        <member name="F:Atom.Components.Entity.components">
            <summary>
            The <see cref="T:Atom.Components.IEntityComponentCollection"/> that contains the
            <see cref="T:Atom.Components.IComponent"/>s this Entity is composed of.
            </summary>
        </member>
        <member name="T:Atom.Components.EntityComponentCollection">
            <summary>
            Represents a list of <see cref="T:Atom.Components.IComponent"/>s that compose an <see cref="T:Atom.Components.IEntity"/>.
            This class can't be inherited.
            </summary>
        </member>
        <member name="E:Atom.Components.EntityComponentCollection.Added">
            <summary>
            Raised when an <see cref="T:Atom.Components.IComponent"/> has been added to this EntityComponentCollection.
            </summary>
        </member>
        <member name="E:Atom.Components.EntityComponentCollection.Removed">
            <summary>
            Raised when an <see cref="T:Atom.Components.IComponent"/> has been removed from this EntityComponentCollection.
            </summary>
        </member>
        <member name="P:Atom.Components.EntityComponentCollection.Owner">
            <summary>
            Gets the <see cref="T:Atom.Components.IEntity"/> that owns this EntityComponentCollection.
            </summary>
            <value>
            The <see cref="T:Atom.Components.IEntity"/> that owns this EntityComponentCollection.
            </value>
        </member>
        <member name="P:Atom.Components.EntityComponentCollection.IsReadOnly">
            <summary>
            Gets or sets a value indicating whether this EntityComponentCollection is read-only.
            </summary>
            <value>If this value is <see langword="true"/> then this EntityComponentCollection can't be modified.</value>
        </member>
        <member name="P:Atom.Components.EntityComponentCollection.BindingNotificationEnabled">
            <summary>
            Gets or sets a value indicating whether this EntityComponentCollection
            notifies its <see cref="T:Atom.Components.IComponent"/>s by calling <see cref="M:Atom.Components.IComponent.InitializeBindings"/>
            when an <see cref="T:Atom.Components.IComponent"/> gets added or removed.
            </summary>
            <remarks>
            It may be useful to temporarily disable notification for perfomance reasons.
            For example before adding a punch of <see cref="T:Atom.Components.IComponent"/>s. 
            </remarks>
            <value>The default value is true.</value>
        </member>
        <member name="P:Atom.Components.EntityComponentCollection.Item(System.Type)">
            <summary>
            Receives a <see cref="T:Atom.Components.IComponent"/> by exact <see cref="T:System.Type"/> key.
            </summary>
            <param name="key">The type of IComponent to get.</param>
            <returns>
            The requested <see cref="T:Atom.Components.IComponent"/> or null if not found.
            </returns>
        </member>
        <member name="P:Atom.Components.EntityComponentCollection.Count">
            <summary>
            Gets the number of <see cref="T:Atom.Components.IComponent"/>s in this <see cref="T:Atom.Components.EntityComponentCollection"/>.
            </summary>
            <value>The number of <see cref="T:Atom.Components.IComponent"/>s in this <see cref="T:Atom.Components.EntityComponentCollection"/>.</value>
        </member>
        <member name="M:Atom.Components.EntityComponentCollection.#ctor(Atom.Components.IEntity,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Components.EntityComponentCollection"/> class.
            </summary>
            <param name="owner">
            The <see cref="T:Atom.Components.IEntity"/> that owns the new EntityComponentCollection.
            </param>
            <param name="capacity">
            The initial number of <see cref="T:Atom.Components.IComponent"/>s the new EntityComponentCollection
            will be able to store without needing to reallocate memory.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="owner"/> is null.
            </exception>
        </member>
        <member name="M:Atom.Components.EntityComponentCollection.Add(Atom.Components.IComponent)">
            <summary>
            Adds the specified <see cref="T:Atom.Components.IComponent"/> to this <see cref="T:Atom.Components.EntityComponentCollection"/>.
            </summary>
            <param name="component">
            The IComponent to add.
            </param>
            <exception cref="T:System.InvalidOperationException">
            If this EntityComponentCollection is read-only.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="component"/> is null
            </exception>
            <exception cref="T:System.ArgumentException">
            If this EntityComponentCollection already contains an <see cref="T:Atom.Components.IComponent"/> of the given type.
            </exception>
        </member>
        <member name="M:Atom.Components.EntityComponentCollection.AddRange(System.Collections.Generic.IEnumerable{Atom.Components.IComponent})">
            <summary>
            Adds the specified <see cref="T:Atom.Components.IComponent"/>s to this IEntityComponentCollection.
            </summary>
            <param name="components">
            The <see cref="T:Atom.Components.IComponent"/>s to add.
            </param>
        </member>
        <member name="M:Atom.Components.EntityComponentCollection.Remove``1">
            <summary>
            Removes the first occurence of a <see cref="T:Atom.Components.IComponent"/> of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">
            The type of <see cref="T:Atom.Components.IComponent"/> to remove.
            </typeparam>
            <returns>
            Returns <see langword="true"/> if the <see cref="T:Atom.Components.Component"/> has been removed;
            otherwise <see langword="false"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If this EntityComponentCollection is read-only.
            </exception>
        </member>
        <member name="M:Atom.Components.EntityComponentCollection.Remove(Atom.Components.IComponent)">
            <summary>
            Tries to remove the specified <see cref="T:Atom.Components.IComponent"/> from this IEntityComponentCollection.
            </summary>
            <param name="component">
            The <see cref="T:Atom.Components.IComponent"/> to remove.
            </param>
            <returns>
            Returns <see langword="true"/> if the <see cref="T:Atom.Components.Component"/> has been removed;
            otherwise <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If the specified <see cref="T:Atom.Components.IComponent"/> is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            If this IEntityComponentCollection is read-only.
            </exception>
        </member>
        <member name="M:Atom.Components.EntityComponentCollection.Get``1">
            <summary>
            Tries to get the <see cref="T:Atom.Components.IComponent"/> of the specified Type.
            </summary>
            <typeparam name="T">
            The type of the <see cref="T:Atom.Components.IComponent"/> to get.
            </typeparam>
            <remarks>
            This method searches only for the exact specified type.
            This method has a complexity of O(1).
            <code>
            components.Add( new TheComponent() ); 
            Get&lt;TheComponent&gt;;  // This will receive the IComponent.
            Get&lt;ITheComponent&gt;; // Try to receive base interface/class - this will FAIL!
            </code> 
            You must use Find for more complex IComponent searches.
            </remarks>
            <returns>
            The requested IComponent; 
            or null if there exists no IComponent of the specified Type.
            </returns>
        </member>
        <member name="M:Atom.Components.EntityComponentCollection.Find``1">
            <summary>
            Finds the first occurence of an <see cref="T:Atom.Components.IComponent"/> of type <typeparamref name="T"/>.
            </summary>
            <remarks>
            This operation has a complexity of O(N), there N is the number of components present in the collection.
            </remarks>
            <typeparam name="T">The type of <see cref="T:Atom.Components.IComponent"/> to find.</typeparam>
            <returns>
            The found <see cref="T:Atom.Components.IComponent"/>;
            or null if no matching <see cref="T:Atom.Components.IComponent"/> could be found in this IEntityComponentCollection.
            </returns>
        </member>
        <member name="M:Atom.Components.EntityComponentCollection.FindAll``1">
            <summary>
            Finds all <see cref="T:Atom.Components.IComponent"/>s that are of type <typeparamref name="T"/> or implement it.
            </summary>
            <typeparam name="T">
            The type of <see cref="T:Atom.Components.IComponent"/>s to find.
            </typeparam>
            <returns>
            A list of <see cref="T:Atom.Components.IComponent"/>s that are of type <typeparamref name="T"/> or implement it.
            </returns>
        </member>
        <member name="M:Atom.Components.EntityComponentCollection.Contains``1">
            <summary>
            Determines whether this <see cref="T:Atom.Components.EntityComponentCollection"/> contains 
            a <see cref="T:Atom.Components.IComponent"/> of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">
            The type of <see cref="T:Atom.Components.IComponent"/>s to find.
            </typeparam>
            <returns>
            Returns <see langword="true"/> if this EntityComponentCollection
            contains a <see cref="T:Atom.Components.IComponent"/> of type <typeparamref name="T"/>;
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Components.EntityComponentCollection.Contains(System.Type)">
            <summary>
            Determines whether this EntityComponentCollection contains 
            a <see cref="T:Atom.Components.IComponent"/> of the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="componentType">
            The type of component to look for.
            </param>
            <returns>
            Returns <see langword="true"/> if this EntityComponentCollection contains 
            a <see cref="T:Atom.Components.Component"/> of the specified <see cref="T:System.Type"/>;
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Components.EntityComponentCollection.Contains(Atom.Components.IComponent)">
            <summary>
            Determines whether this <see cref="T:Atom.Components.EntityComponentCollection"/> contains the specified <see cref="T:Atom.Components.IComponent"/>.
            </summary>
            <param name="component">
            The <see cref="T:Atom.Components.IComponent"/> to look for.
            </param>
            <returns>
            Returns <see langword="true"/> if this <see cref="T:Atom.Components.EntityComponentCollection"/> 
            contains the specified <see cref="T:Atom.Components.IComponent"/>; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Components.EntityComponentCollection.Clear">
            <summary>
            Removes all <see cref="T:Atom.Components.IComponent"/>s from this <see cref="T:Atom.Components.EntityComponentCollection"/>.
            </summary>
        </member>
        <member name="M:Atom.Components.EntityComponentCollection.GetEnumerator">
            <summary>
            Gets an enumerator that iterates over the <see cref="N:Atom.Components"/>
            of this <see cref="T:Atom.Components.EntityComponentCollection"/>.
            </summary>
            <returns>
            A new enumerator.
            </returns>
        </member>
        <member name="M:Atom.Components.EntityComponentCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator that iterates over the <see cref="N:Atom.Components"/>
            of this <see cref="T:Atom.Components.EntityComponentCollection"/>.
            </summary>
            <returns>
            A new enumerator.
            </returns>
        </member>
        <member name="M:Atom.Components.EntityComponentCollection.Update(Atom.IUpdateContext)">
            <summary>
            Updates the <see cref="T:Atom.Components.IComponent"/>s of this EntityComponentCollection.
            </summary>
            <param name="updateContext">
            The current IUpdateContext.
            </param>
        </member>
        <member name="M:Atom.Components.EntityComponentCollection.PreUpdate(Atom.IUpdateContext)">
            <summary>
            Pre-updates the <see cref="T:Atom.Components.IComponent"/>s of this EntityComponentCollection.
            </summary>
            <param name="updateContext">
            The current IUpdateContext.
            </param>
        </member>
        <member name="M:Atom.Components.EntityComponentCollection.BeginSetup">
            <summary>
            Begins the region in which <see cref="T:Atom.Components.IComponent"/>s are added to this IEntityComponentCollection.
            </summary>
        </member>
        <member name="M:Atom.Components.EntityComponentCollection.EndSetup">
            <summary>
            Ends the setup process initiated by BeginSetup.
            </summary>
        </member>
        <member name="M:Atom.Components.EntityComponentCollection.InitializeBindings">
            <summary>
            Initialize the bindings between components in this EntityComponentCollection
            by calling <see cref="M:Atom.Components.IComponent.InitializeBindings"/> 
            if <see cref="P:Atom.Components.EntityComponentCollection.BindingNotificationEnabled"/> is true.
            </summary>
        </member>
        <member name="M:Atom.Components.EntityComponentCollection.OnComponentAdded(Atom.Components.IComponent)">
            <summary>
            Raises the ComponentAdded event.
            </summary>
            <param name="component">
            The IComponent that was added.
            </param>
        </member>
        <member name="M:Atom.Components.EntityComponentCollection.OnComponentRemoved(Atom.Components.IComponent)">
            <summary>
            Raises the ComponentRemoved event.
            </summary>
            <param name="component">
            The IComponent that was removed.
            </param>
        </member>
        <member name="F:Atom.Components.EntityComponentCollection.owner">
            <summary>
            Identifies the <see cref="T:Atom.Components.IEntity"/> that owns this EntityComponentCollection.
            </summary>
        </member>
        <member name="F:Atom.Components.EntityComponentCollection.dictionary">
            <summary>
            The components that compose the <see cref="T:Atom.Components.IEntity"/>, sorted by their type.
            </summary>
        </member>
        <member name="F:Atom.Components.EntityComponentCollection.components">
            <summary>
            The collection that contains the components that compose this <see cref="T:Atom.Components.Entity"/>.
            </summary>
        </member>
        <member name="F:Atom.Components.EntityComponentCollection._bindingNotificationEnabled">
            <summary>
            States whether this EntityComponentCollection notifies its <see cref="T:Atom.Components.IComponent"/>s 
            by calling <see cref="M:Atom.Components.IComponent.InitializeBindings"/> when an <see cref="T:Atom.Components.IComponent"/> 
            gets added or removed.
            </summary>
        </member>
        <member name="F:Atom.Components.EntityComponentCollection.isBindingRefreshRequired">
            <summary>
            States whether this EntityComponentCollection should update the bindings between its <see cref="T:Atom.Components.IComponent"/>s.
            </summary>
            <remarks>
            This field is modified by the <see cref="P:Atom.Components.EntityComponentCollection.BindingNotificationEnabled"/> property.
            </remarks>
        </member>
        <member name="T:Atom.Components.IComponent">
            <summary>
            An IComponent represents an abstraction of specific functionality
            that is owned by an <see cref="T:Atom.Components.IEntity"/>.
            </summary>
        </member>
        <member name="P:Atom.Components.IComponent.Owner">
            <summary>
            Gets or sets the <see cref="T:Atom.Components.IEntity"/> that owns this IComponent.
            </summary>
            <remarks>
            IComponents are supposed to be added or removed using
            the <see cref="T:Atom.Components.IEntityComponentCollection"/>, not this property.
            </remarks>
            <value>
            The <see cref="T:Atom.Components.IEntity"/> that owns this IComponent.
            </value>
        </member>
        <member name="P:Atom.Components.IComponent.IsEnabled">
            <summary>
            Gets or sets a value indicating whether this IComponent is enabled or disabled.
            </summary>
            <value>The default value is true.</value>
        </member>
        <member name="M:Atom.Components.IComponent.Initialize">
            <summary>
            Called when this IComponent has been successfully attached to an <see cref="T:Atom.Components.IEntity"/>.
            </summary>
            <remarks>
            <see cref="M:Atom.Components.IComponent.InitializeBindings"/> should be used to get any IComponents
            this IComponent depends on.
            </remarks>
        </member>
        <member name="M:Atom.Components.IComponent.InitializeBindings">
            <summary>
            Called when an IComponent has been removed or added to the <see cref="T:Atom.Components.IEntity"/> that owns this IComponent.
            Override this method to receive IComponents this IComponent depends on.
            </summary>
        </member>
        <member name="T:Atom.Components.IEntity">
            <summary>
            By aggregating <see cref="T:Atom.Components.IComponent"/>s an IEntity can loosely dynamic behaviour.
            </summary>
            <remarks>
            By using composition over inheritance one can archive more flexible object models.
            </remarks>
        </member>
        <member name="P:Atom.Components.IEntity.Components">
            <summary>
            Gets the <see cref="T:Atom.Components.IEntityComponentCollection"/> that contains the <see cref="T:Atom.Components.IComponent"/>s
            this IEntity is composed of.
            </summary>
        </member>
        <member name="T:Atom.Components.IEntityComponentCollection">
            <summary>
            Encapsulates the list of <see cref="T:Atom.Components.IComponent"/>s that compose an <see cref="T:Atom.Components.IEntity"/>.
            </summary>
        </member>
        <member name="E:Atom.Components.IEntityComponentCollection.Added">
            <summary>
            Raised when an <see cref="T:Atom.Components.IComponent"/> has been added to this IEntityComponentCollection.
            </summary>
        </member>
        <member name="E:Atom.Components.IEntityComponentCollection.Removed">
            <summary>
            Raised when an <see cref="T:Atom.Components.IComponent"/> has been removed from this IEntityComponentCollection.
            </summary>
        </member>
        <member name="P:Atom.Components.IEntityComponentCollection.Owner">
            <summary>
            Gets the <see cref="T:Atom.Components.IEntity"/> that owns this IEntityComponentCollection.
            </summary>
            <value>
            The <see cref="T:Atom.Components.IEntity"/> that owns this IEntityComponentCollection.
            </value>
        </member>
        <member name="P:Atom.Components.IEntityComponentCollection.IsReadOnly">
            <summary>
            Gets or sets a value indicating whether this IEntityComponentCollection is read-only.
            </summary>
            <value>
            This IEntityComponentCollection can't be modified if this property has been set to <see langword="true"/>.
            The default value is false.
            </value>
        </member>
        <member name="P:Atom.Components.IEntityComponentCollection.Count">
            <summary>
            Gets the number of <see cref="T:Atom.Components.IComponent"/>s in this <see cref="T:Atom.Components.IEntityComponentCollection"/>.
            </summary>
            <value>The number of <see cref="T:Atom.Components.IComponent"/>s in this <see cref="T:Atom.Components.IEntityComponentCollection"/>.</value>
        </member>
        <member name="P:Atom.Components.IEntityComponentCollection.BindingNotificationEnabled">
            <summary>
            Gets or sets a value indicating whether this IEntityComponentCollection
            notifies its <see cref="T:Atom.Components.IComponent"/>s by calling <see cref="M:Atom.Components.IComponent.InitializeBindings"/>
            when an <see cref="T:Atom.Components.IComponent"/> gets added or removed.
            </summary>
            <remarks>
            It may be useful to temporarily disable notification for perfomance reasons.
            For example before adding a punch of <see cref="T:Atom.Components.IComponent"/>s. 
            </remarks>
            <value>The default value is true.</value>
        </member>
        <member name="P:Atom.Components.IEntityComponentCollection.Item(System.Type)">
            <summary>
            Gets a <see cref="T:Atom.Components.IComponent"/> by exact <see cref="T:System.Type"/> key.
            </summary>
            <param name="key">The type of component to get.</param>
            <returns>
            The requested <see cref="T:Atom.Components.IComponent"/> or null if not found.
            </returns>
        </member>
        <member name="M:Atom.Components.IEntityComponentCollection.BeginSetup">
            <summary>
            Begins the region in which <see cref="T:Atom.Components.IComponent"/>s are added to this IEntityComponentCollection.
            </summary>
        </member>
        <member name="M:Atom.Components.IEntityComponentCollection.EndSetup">
            <summary>
            Ends the setup process initiated by BeginSetup.
            </summary>
        </member>
        <member name="M:Atom.Components.IEntityComponentCollection.Get``1">
            <summary>
            Tries to get the <see cref="T:Atom.Components.IComponent"/> of the specified Type.
            </summary>
            <typeparam name="T">
            The type of the <see cref="T:Atom.Components.IComponent"/> to get.
            </typeparam>
            <remarks>
            This method searches only for the exact specified type.
            This method has a complexity of O(1).
            <code>
            components.Add( new TheComponent() ); 
            Get&lt;TheComponent&gt;;  // This will receive the component.
            Get&lt;ITheComponent&gt;; // Try to receive base interface/class - this will FAIL!
            </code> 
            You must use Find for more complex component searches.
            </remarks>
            <returns>
            The requested <see cref="T:Atom.Components.IComponent"/>; 
            or null if there exists no <see cref="T:Atom.Components.IComponent"/> of the specified type <typeparamref name="T"/>.
            </returns>
        </member>
        <member name="M:Atom.Components.IEntityComponentCollection.Find``1">
            <summary>
            Finds the first occurence of an <see cref="T:Atom.Components.IComponent"/> of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of <see cref="T:Atom.Components.IComponent"/> to find.</typeparam>
            <returns>
            The found <see cref="T:Atom.Components.IComponent"/>;
            or null if no matching <see cref="T:Atom.Components.IComponent"/> could be found in this IEntityComponentCollection.
            </returns>
        </member>
        <member name="M:Atom.Components.IEntityComponentCollection.FindAll``1">
            <summary>
            Finds all <see cref="T:Atom.Components.IComponent"/>s that are of type <typeparamref name="T"/> or implement it.
            </summary>
            <typeparam name="T">
            The type of <see cref="T:Atom.Components.IComponent"/>s to find.
            </typeparam>
            <returns>
            A list of <see cref="T:Atom.Components.IComponent"/>s that are of type <typeparamref name="T"/> or implement it.
            </returns>
        </member>
        <member name="M:Atom.Components.IEntityComponentCollection.Contains``1">
            <summary>
            Determines whether this IEntityComponentCollection contains 
            a <see cref="T:Atom.Components.IComponent"/> of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">
            The type of <see cref="T:Atom.Components.IComponent"/>s to find.
            </typeparam>
            <returns>
            Returns <see langword="true"/> if this EntityComponentCollection
            contains a <see cref="T:Atom.Components.Component"/> of type <typeparamref name="T"/>;
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Components.IEntityComponentCollection.Contains(System.Type)">
            <summary>
            Determines whether this IEntityComponentCollection contains 
            a <see cref="T:Atom.Components.IComponent"/> of the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="componentType">
            The type of component to look for.
            </param>
            <returns>
            Returns <see langword="true"/> if this IEntityComponentCollection contains 
            a <see cref="T:Atom.Components.Component"/> of the specified <see cref="T:System.Type"/>;
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Components.IEntityComponentCollection.Contains(Atom.Components.IComponent)">
            <summary>
            Determines whether this <see cref="T:Atom.Components.IEntityComponentCollection"/> contains the specified <see cref="T:Atom.Components.IComponent"/>.
            </summary>
            <param name="component">
            The <see cref="T:Atom.Components.IComponent"/> to look for.
            </param>
            <returns>
            Returns <see langword="true"/> if this <see cref="T:Atom.Components.IEntityComponentCollection"/> 
            contains the specified <see cref="T:Atom.Components.IComponent"/>; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atom.Components.IEntityComponentCollection.Add(Atom.Components.IComponent)">
            <summary>
            Adds the specified <see cref="T:Atom.Components.IComponent"/> to this IEntityComponentCollection.
            </summary>
            <param name="component">
            The <see cref="T:Atom.Components.IComponent"/> to add.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the <paramref name="component"/> is null
            </exception>
            <exception cref="T:System.InvalidOperationException">
            If this IEntityComponentCollection is read-only.
            </exception>
        </member>
        <member name="M:Atom.Components.IEntityComponentCollection.AddRange(System.Collections.Generic.IEnumerable{Atom.Components.IComponent})">
            <summary>
            Adds the specified <see cref="T:Atom.Components.IComponent"/>s to this IEntityComponentCollection.
            </summary>
            <param name="components">
            The <see cref="T:Atom.Components.IComponent"/>s to add.
            </param>
        </member>
        <member name="M:Atom.Components.IEntityComponentCollection.Remove``1">
            <summary>
            Removes the first occurence of a <see cref="T:Atom.Components.IComponent"/> of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">
            The type of <see cref="T:Atom.Components.IComponent"/> to remove.
            </typeparam>
            <returns>
            Returns <see langword="true"/> if the <see cref="T:Atom.Components.Component"/> has been removed;
            otherwise <see langword="false"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If this IEntityComponentCollection is read-only.
            </exception>
        </member>
        <member name="M:Atom.Components.IEntityComponentCollection.Remove(Atom.Components.IComponent)">
            <summary>
            Tries to remove the specified <see cref="T:Atom.Components.IComponent"/> from this IEntityComponentCollection.
            </summary>
            <param name="component">
            The <see cref="T:Atom.Components.IComponent"/> to remove.
            </param>
            <returns>
            Returns <see langword="true"/> if the <see cref="T:Atom.Components.IComponent"/> has been removed;
            otherwise <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If the specified <see cref="T:Atom.Components.IComponent"/> is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            If this IEntityComponentCollection is read-only.
            </exception>
        </member>
        <member name="M:Atom.Components.IEntityComponentCollection.Clear">
            <summary>
            Removes all IComponents from this IEntityComponentCollection.
            </summary>
        </member>
        <member name="T:Atom.Configuration.Config">
            <summary>
            Represents an abstract base class of a configuration class.
            </summary>
            <example>
            <code>
            public class MyConfig : Config
            {
                [ConfigProperty(DefaultValue = 1024)]
                public int Width
                {
                    get;
                    set;
                }
                
                [ConfigProperty(DefaultValue = "", StorageName = "name")]
                public string FirstName
                {
                    get;
                    set;
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Atom.Configuration.Config.#ctor(Atom.Configuration.IConfigStore)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Configuration.Config"/> class,
            which uses a <see cref="T:Atom.Configuration.ConfigPropertySearcher"/> and a <see cref="T:Atom.TypeStringConverter"/>.
            </summary>
            <param name="store">
            The store that manages loading and saving the configuration data.
            </param>
        </member>
        <member name="M:Atom.Configuration.Config.#ctor(Atom.Configuration.IConfigStore,Atom.Configuration.IConfigPropertySearcher,Atom.IStringConverter)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Configuration.Config"/> class.
            </summary>
            <param name="store">
            The store that manages loading and saving the configuration data.
            </param>
            <param name="propertySearcher">
            Provides a mechanism for searching the configuration properties of a Type.
            </param>
            <param name="converter">
            Provides a mechanism that converts between configuration properties and string values that
            are stored in the IConfigStore.
            </param>
        </member>
        <member name="M:Atom.Configuration.Config.Load">
            <summary>
            Loads the data stored in the <see cref="T:Atom.Configuration.IConfigStore"/> into this <see cref="T:Atom.Configuration.Config"/>.
            </summary>
        </member>
        <member name="M:Atom.Configuration.Config.FindConfigProperties">
            <summary>
            Finds the configuration properties that have been defined on the sub-(classes) of this Config.
            </summary>
            <returns>
            The configuration properties that have been found.
            </returns>
        </member>
        <member name="M:Atom.Configuration.Config.LoadDefaults">
            <summary>
            Loads the default values of the config properties.
            </summary>
        </member>
        <member name="M:Atom.Configuration.Config.LoadDefaults(System.Collections.Generic.IEnumerable{System.Tuple{System.Reflection.PropertyInfo,Atom.Configuration.IConfigPropertyAttribute}})">
            <summary>
            Loads the default values of the config properties.
            </summary>
            <param name="properties">
            The configuration properties this type has.
            </param>
        </member>
        <member name="M:Atom.Configuration.Config.LoadFromStore(System.Collections.Generic.IEnumerable{System.Tuple{System.Reflection.PropertyInfo,Atom.Configuration.IConfigPropertyAttribute}})">
            <summary>
            Loads the data stored in the <see cref="T:Atom.Configuration.IConfigStore"/> into this <see cref="T:Atom.Configuration.Config"/>.
            </summary>
            <param name="properties">
            The configuration properties this type has.
            </param>
        </member>
        <member name="M:Atom.Configuration.Config.SetPropertyValue(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Sets the values of the specified property to the specified value.
            </summary>
            <param name="property">
            The PropertyInfo that descripes the property to set.
            </param>
            <param name="value">
            The value to set the property to.
            </param>
        </member>
        <member name="M:Atom.Configuration.Config.ParseValue(System.String,System.Type)">
            <summary>
            Converts the specified string into an object of the specified type.
            </summary>
            <param name="valueString">
            The input string to convert.
            </param>
            <param name="propertyType">
            The output type.
            </param>
            <returns>
            The converted output value.
            </returns>
        </member>
        <member name="M:Atom.Configuration.Config.GetStorageName(System.Tuple{System.Reflection.PropertyInfo,Atom.Configuration.IConfigPropertyAttribute})">
            <summary>
            Gets the name under which the specified configuration property is stored.
            </summary>
            <param name="property">
            The configuration property to query.
            </param>
            <returns>
            The string that identifies the specified configuration property in the IConfigStore.
            </returns>
        </member>
        <member name="M:Atom.Configuration.Config.Save">
            <summary>
            Saves this Config to the <see cref="T:Atom.Configuration.IConfigStore"/>.
            </summary>
        </member>
        <member name="M:Atom.Configuration.Config.SerializeProperties">
            <summary>
            Serializes the properties stored in this Config instance
            into a storeable format.
            </summary>
            <returns>
            The properties that have been serialized.
            </returns>
        </member>
        <member name="F:Atom.Configuration.Config.store">
            <summary>
            The store that manages loading and saving the configuration data.
            </summary>
        </member>
        <member name="F:Atom.Configuration.Config.propertySearcher">
            <summary>
            Provides a mechanism for searching the configuration properties of a Type.
            </summary>
        </member>
        <member name="F:Atom.Configuration.Config.converter">
            <summary>
            Provides a mechanism that converts between configuration properties and string values that
            are stored in the IConfigStore.
            </summary>
        </member>
        <member name="T:Atom.Configuration.ConfigPropertyAttribute">
            <summary>
            Marks a property to be part of the configuration.
            </summary>
        </member>
        <member name="P:Atom.Configuration.ConfigPropertyAttribute.DefaultValue">
            <summary>
            Gets or sets the default value of the property.
            </summary>
        </member>
        <member name="P:Atom.Configuration.ConfigPropertyAttribute.StorageName">
            <summary>
            Gets or sets the (optional) name under which the property is stored.
            </summary>
        </member>
        <member name="P:Atom.Configuration.ConfigPropertyAttribute.Comment">
            <summary>
            Gets or sets the (optional) comment that is associated with the property.
            </summary>
        </member>
        <member name="T:Atom.Configuration.ConfigPropertySearcher">
            <summary>
            Implements a mechanism that finds all configuration properties of a type.
            </summary>
        </member>
        <member name="M:Atom.Configuration.ConfigPropertySearcher.Search(System.Type)">
            <summary>
            Finds the configuation properties of the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="type">
            The type to query.
            </param>
            <returns>
            The properties that have been found.
            </returns>
        </member>
        <member name="M:Atom.Configuration.ConfigPropertySearcher.GetConfigAttribute(System.Reflection.PropertyInfo)">
            <summary>
            Attempts to locate an attribute that implements the <see cref="T:Atom.Configuration.IConfigPropertyAttribute"/> by searching the
            specified <see cref="T:System.Reflection.PropertyInfo"/>.
            </summary>
            <param name="propertyInfo">
            The <see cref="T:System.Reflection.PropertyInfo"/> to query.
            </param>
            <returns>
            The IConfigPropertyAttribute that has been located; -or- if null if it does not exist.
            </returns>
        </member>
        <member name="T:Atom.Configuration.IConfig">
            <summary>
            Provides a mechanism for loading and saving configurations.
            </summary>
        </member>
        <member name="M:Atom.Configuration.IConfig.Load">
            <summary>
            Loads the data stored in the <see cref="T:Atom.Configuration.IConfigStore"/> into this <see cref="T:Atom.Configuration.Config"/>.
            </summary>
        </member>
        <member name="M:Atom.Configuration.IConfig.LoadDefaults">
            <summary>
            Loads the default values of the config properties.
            </summary>
        </member>
        <member name="M:Atom.Configuration.IConfig.Save">
            <summary>
            Saves this Config to the <see cref="T:Atom.Configuration.IConfigStore"/>.
            </summary>
        </member>
        <member name="T:Atom.Configuration.IConfigPropertyAttribute">
            <summary>
            Represents the data that is attached to a property
            to make it configurable.
            </summary>
        </member>
        <member name="P:Atom.Configuration.IConfigPropertyAttribute.DefaultValue">
            <summary>
            Gets or sets the default value of the property.
            </summary>
        </member>
        <member name="P:Atom.Configuration.IConfigPropertyAttribute.StorageName">
            <summary>
            Gets or sets the (optional) name under which the property is stored.
            </summary>
        </member>
        <member name="P:Atom.Configuration.IConfigPropertyAttribute.Comment">
            <summary>
            Gets or sets the (optional) comment that is associated with the property.
            </summary>
        </member>
        <member name="T:Atom.Configuration.IConfigPropertySearcher">
            <summary>
            Provides a mechanism that finds all configuration properties of a type.
            </summary>
        </member>
        <member name="M:Atom.Configuration.IConfigPropertySearcher.Search(System.Type)">
            <summary>
            Finds the configuation properties of the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="type">
            The type to query.
            </param>
            <returns>
            The properties that have been found.
            </returns>
        </member>
        <member name="T:Atom.Configuration.IConfigStore">
            <summary>
            Manages saving and loading of configuration properties.
            </summary>
        </member>
        <member name="M:Atom.Configuration.IConfigStore.Load">
            <summary>
            Gets the properties that have been saved, by loading them from this IConfigStore.
            </summary>
            <returns>
            The properties that this IConfigStore contains; where the first strings
            represents the name of the property and the second string the value of the property.
            </returns>
        </member>
        <member name="M:Atom.Configuration.IConfigStore.Save(System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String,Atom.Configuration.IConfigPropertyAttribute}})">
            <summary>
            Saves the specified properties to this IConfigStore.
            </summary>
            <param name="properties">
            The properties to save in this IConfigStore; where the first string
            represents the name of the property and the second string the value of the property.
            </param>
        </member>
        <member name="T:Atom.Configuration.PlainTextConfigStore">
            <summary>
            Implements an <see cref="T:Atom.Configuration.IConfigStore"/> that stores properties
            within a text file.
            </summary>
            <remarks>
            Format:
            -----------
            name : value
            one property per line.
            ------------
            #comment
            width: 1000
            height: 1200
            name: Gomez
            </remarks>
        </member>
        <member name="F:Atom.Configuration.PlainTextConfigStore.Comment">
            <summary>
            The character that identifies a line to contain a comment.
            </summary>
        </member>
        <member name="F:Atom.Configuration.PlainTextConfigStore.Seperator">
            <summary>
            The character that seperates the name of a property and the value of a property: "name : value"
            </summary>
        </member>
        <member name="M:Atom.Configuration.PlainTextConfigStore.#ctor(System.String,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the PlainTextConfigStore class.
            </summary>
            <param name="fileName">
            The full path of the text file to contains the configuration.
            </param>
            <param name="encoding">
            The encoding to use when reading or writing the store.
            </param>
        </member>
        <member name="M:Atom.Configuration.PlainTextConfigStore.Load">
            <summary>
            Gets the properties that have been saved, by loading them from this IConfigStore.
            </summary>
            <returns>
            The properties that this IConfigStore contains; where the first string
            represents the name of the property and the second string the value of the property.
            </returns>
        </member>
        <member name="M:Atom.Configuration.PlainTextConfigStore.ReadLines">
            <summary>
            Reads all configuration lines from the text file.
            </summary>
            <returns>
            The lines that have been read.
            </returns>
        </member>
        <member name="M:Atom.Configuration.PlainTextConfigStore.Save(System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String,Atom.Configuration.IConfigPropertyAttribute}})">
            <summary>
            Saves the specified properties to this IConfigStore.
            </summary>
            <param name="properties">
            The properties to save in this IConfigStore; where the first string
            represents the name of the property and the second string the value of the property.
            </param>
        </member>
        <member name="M:Atom.Configuration.PlainTextConfigStore.WriteLines(System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String,Atom.Configuration.IConfigPropertyAttribute}})">
            <summary>
            Converts the specified properties into a sequence of strings.
            </summary>
            <param name="properties">
            The properties to save in this IConfigStore; where the first string
            represents the name of the property and the second string the value of the property.
            </param>
            <returns>
            The properties that are written into the file.
            </returns>
        </member>
        <member name="F:Atom.Configuration.PlainTextConfigStore.fileName">
            <summary>
            The full path of the text file to contains the configuration.
            </summary>
        </member>
        <member name="F:Atom.Configuration.PlainTextConfigStore.encoding">
            <summary>
            The encoding to use when reading or writing the store.
            </summary>
        </member>
        <member name="T:Atom.Design.Descriptors.FieldPropertyDescriptor">
            <summary>
            Defines a <see cref="T:System.ComponentModel.PropertyDescriptor"/> that provides an abstraction of a field on a class.
            This class can't be inherited.
            </summary>
        </member>
        <member name="P:Atom.Design.Descriptors.FieldPropertyDescriptor.PropertyType">
            <summary>
            Gets the type of the field wrapped by the <see cref="T:Atom.Design.Descriptors.FieldPropertyDescriptor"/>.
            </summary>
            <value>A System.Type that represents the type of the field.</value>
        </member>
        <member name="M:Atom.Design.Descriptors.FieldPropertyDescriptor.#ctor(System.Reflection.FieldInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Design.Descriptors.FieldPropertyDescriptor"/> class.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            If the given FieldInfo is null.
            </exception>
            <param name="field">
            The <see cref="T:System.Reflection.FieldInfo"/> that descripes the field wrapped by the FieldPropertyDescriptor.
            </param>
        </member>
        <member name="M:Atom.Design.Descriptors.FieldPropertyDescriptor.GetValue(System.Object)">
            <summary>
            Returns the value of the field.
            </summary>
            <param name="component">
            The object whose field value will be returned.
            </param>
            <returns>
            The value of a field for a given component.
            </returns>
        </member>
        <member name="M:Atom.Design.Descriptors.FieldPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value of the field.
            </summary>
            <param name="component">The object whose field value will be set.</param>
            <param name="value">The value to assign.</param>
        </member>
        <member name="F:Atom.Design.Descriptors.FieldPropertyDescriptor.field">
            <summary>
            The field information.
            </summary>
        </member>
        <member name="T:Atom.Design.Descriptors.MemberPropertyDescriptor">
            <summary>
            Provides an abstraction of a member on a class.
            </summary>
        </member>
        <member name="P:Atom.Design.Descriptors.MemberPropertyDescriptor.ComponentType">
            <summary>
            Gets the type of the comonent descriped by the MemberPropertyDescriptor.
            </summary>
            <value>A System.Type that represents the type of the member.</value>
        </member>
        <member name="P:Atom.Design.Descriptors.MemberPropertyDescriptor.IsReadOnly">
            <summary>
            Gets a value indicating whether the MemberPropertyDescriptor is read-only.
            </summary>
            <value>
            Always returns false.
            </value>
        </member>
        <member name="M:Atom.Design.Descriptors.MemberPropertyDescriptor.#ctor(System.Reflection.MemberInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Design.Descriptors.MemberPropertyDescriptor"/> class.
            </summary>
            <exception cref="T:System.ArgumentException">
            If the given MemberInfo is null.
            </exception>
            <param name="member">
            The MemberInfo object that descripes the wrapped member.
            </param>
        </member>
        <member name="M:Atom.Design.Descriptors.MemberPropertyDescriptor.Equals(System.Object)">
            <summary>
            Overridden to return whether the given Object is equal to the <see cref="T:Atom.Design.Descriptors.MemberPropertyDescriptor"/>.
            </summary>
            <param name="obj">
            The object to compare with.
            </param>
            <returns>
            Returns true if they are equal; otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Design.Descriptors.MemberPropertyDescriptor.GetHashCode">
            <summary>
            Overriden to return the hash-code of the wrapped member.
            </summary>
            <returns>
            The hash-code of this MemberPropertyDescriptor.
            </returns>
        </member>
        <member name="M:Atom.Design.Descriptors.MemberPropertyDescriptor.CanResetValue(System.Object)">
            <summary>
            Gets whether the value can be reset.
            </summary>
            <param name="component">
            This value is not used.
            </param>
            <returns>
            Always returns false.
            </returns>
        </member>
        <member name="M:Atom.Design.Descriptors.MemberPropertyDescriptor.ResetValue(System.Object)">
            <summary>
            This method is overridden to-do nothing.
            </summary>
            <param name="component">
            This value is not used.
            </param>
        </member>
        <member name="M:Atom.Design.Descriptors.MemberPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <summary>
            Returns whether the value should be serialized.
            </summary>
            <param name="component">This value is not used.</param>
            <returns>
            Always returns true.
            </returns>
        </member>
        <member name="F:Atom.Design.Descriptors.MemberPropertyDescriptor.member">
            <summary>
            Stores the member information of the abstracted property.
            </summary>
        </member>
        <member name="T:Atom.Design.Descriptors.PropertyPropertyDescriptor">
            <summary>
            Defines a <see cref="T:System.ComponentModel.PropertyDescriptor"/> that provides an abstraction of a property on a class.
            This class can't be inherited.
            </summary>
        </member>
        <member name="P:Atom.Design.Descriptors.PropertyPropertyDescriptor.PropertyType">
            <summary>
            Gets the type of the property wrapped by the <see cref="T:Atom.Design.Descriptors.PropertyPropertyDescriptor"/>.
            </summary>
            <value>A System.Type that represents the type of the property.</value>
        </member>
        <member name="P:Atom.Design.Descriptors.PropertyPropertyDescriptor.IsReadOnly">
            <summary>
            Gets a value indicating whether the PropertyPropertyDescriptor is read-only.
            </summary>
            <value>
            True if the underlying property is read-only; otherwise false.
            </value>
        </member>
        <member name="M:Atom.Design.Descriptors.PropertyPropertyDescriptor.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Design.Descriptors.PropertyPropertyDescriptor"/> class.
            </summary>
            <exception cref="T:System.ArgumentException">
            If the given PropertyInfo is null.
            </exception>
            <param name="property">
            The <see cref="T:System.Reflection.PropertyInfo"/> that descripes the property wrapped by the PropertyPropertyDescriptor.
            </param>
        </member>
        <member name="M:Atom.Design.Descriptors.PropertyPropertyDescriptor.GetValue(System.Object)">
            <summary>
            Returns the value of the property.
            </summary>
            <param name="component">The object whose property value will be returned.</param>
            <returns>The requested value.</returns>
        </member>
        <member name="M:Atom.Design.Descriptors.PropertyPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value of the property.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            If the property is read-only.
            </exception>
            <param name="component">The object whose property value will be set.</param>
            <param name="value">The value to assign.</param>
        </member>
        <member name="F:Atom.Design.Descriptors.PropertyPropertyDescriptor.property">
            <summary>
            Contains information about the abstracted property.
            </summary>
        </member>
        <member name="T:Atom.Design.IItemSelectionDialog`1">
            <summary>
            Provides a mechanism that allows the user to select one or more nameable items of type <typeparamref name="TItem"/>.
            </summary>
            <typeparam name="TItem">
            The type of the nameable items the user can select in the IItemSelectionDialog{TItem}.
            </typeparam>
        </member>
        <member name="P:Atom.Design.IItemSelectionDialog`1.SelectedItem">
            <summary>
            Gets or sets the item that the user has selected.
            </summary>
        </member>
        <member name="P:Atom.Design.IItemSelectionDialog`1.SelectedItems">
            <summary>
            Gets the items that the user has selected.
            </summary>
        </member>
        <member name="P:Atom.Design.IItemSelectionDialog`1.AllowMultipleSelection">
            <summary>
            Gets or sets a value indicating whether the user should
            be allowed to select multiple items.
            </summary>
            <value>
            The default value is false;
            </value>
        </member>
        <member name="M:Atom.Design.IItemSelectionDialog`1.ShowDialog">
            <summary>
            Shows this IItemSelectionDialog{TItem}
            </summary>
            <returns>
            true if the user has selected an item;
            -or- false if the user has canceled the operatioon. 
            </returns>
        </member>
        <member name="T:Atom.Design.IItemSelectionDialogFactory">
            <summary>
            Provides a machanism for creating IItemSelectionDialog{TIem} instances.
            </summary>
        </member>
        <member name="M:Atom.Design.IItemSelectionDialogFactory.Build``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates a new IItemSelectionDialog{TItem} that allows the user
            to select the specified items.
            </summary>
            <typeparam name="TItem">
            The type of the nameable items the user can select in the IItemSelectionDialog{TItem}.
            </typeparam>
            <param name="items">
            The items the user might select.
            </param>
            <returns>
            The newly created IItemSelectionDialog{TItem}.
            </returns>
        </member>
        <member name="T:Atom.Design.NameableObjectWrapper`1">
            <summary>
            Represents an object that wraps around another object, adding naming support to it.
            </summary>
            <typeparam name="TObject">
            The type of the object that is wrapped.
            </typeparam>
        </member>
        <member name="P:Atom.Design.NameableObjectWrapper`1.Name">
            <summary>
            Gets the name of the object.
            </summary>
        </member>
        <member name="P:Atom.Design.NameableObjectWrapper`1.Object">
            <summary>
            Gets the actual object this NameableObjectWrapper{TObject} wraps around.
            </summary>
        </member>
        <member name="M:Atom.Design.NameableObjectWrapper`1.#ctor(`0,System.Func{`0,System.String})">
            <summary>
            Initializes a new instance of the NameableObjectWrapper{TObject} class.
            </summary>
            <param name="obj">
            The actual object the new NameableObjectWrapper{TObject} wraps around.
            </param>
            <param name="nameMapper">
            The map function the new NameableObjectWrapper{TObject} uses to receive the name of the object.
            </param>
        </member>
        <member name="M:Atom.Design.NameableObjectWrapper`1.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object.
            </summary>
            <param name="obj">
            An object to compare with this object.
            </param>
            <returns>
            true if the current object is equal to the other parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Atom.Design.NameableObjectWrapper`1.Equals(Atom.Design.NameableObjectWrapper{`0})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">
            An object to compare with this object.
            </param>
            <returns>
            true if the current object is equal to the other parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Atom.Design.NameableObjectWrapper`1.GetHashCode">
            <summary>
            Gets the hashcode of this NameableObjectWrapper{TObject} instance.
            </summary>
            <returns>
            The hashcode.
            </returns>
        </member>
        <member name="M:Atom.Design.NameableObjectWrapper`1.ToString">
            <summary>
            Overriden to return the Name this NameableObjectWrapper{TObject} provides.
            </summary>
            <returns>
            The <see cref="P:Atom.Design.NameableObjectWrapper`1.Name"/> this NameableObjectWrapper{TObject} provides.
            </returns>
        </member>
        <member name="F:Atom.Design.NameableObjectWrapper`1.obj">
            <summary>
            The actual object this NameableObjectWrapper{TObject} wraps around.
            </summary>
        </member>
        <member name="F:Atom.Design.NameableObjectWrapper`1.nameMapper">
            <summary>
            The map function that is used to receive the name of the object.
            </summary>
        </member>
        <member name="T:Atom.Design.BaseObjectPropertyWrapper">
            <summary>
            Represents an abstract base implementation of the <see cref="T:Atom.Design.IObjectPropertyWrapper"/> interface.
            </summary>
        </member>
        <member name="E:Atom.Design.BaseObjectPropertyWrapper.PropertyChanged">
            <summary>
            Fired when any property of this IObjectPropertyWrapper has changed.
            </summary>
            <remarks>
            Properties that wish to support binding, such as in Windows Presentation Foundation,
            must notify the user that they have change.
            </remarks>
        </member>
        <member name="P:Atom.Design.BaseObjectPropertyWrapper.WrappedObject">
            <summary>
            Gets or sets the object this <see cref="T:Atom.Design.IObjectPropertyWrapper"/> wraps around.
            </summary>
            <exception cref="T:System.ArgumentException">
            If the type of the given value is not compatible with 
            the <see cref="P:Atom.Design.BaseObjectPropertyWrapper.WrappedType"/> of this IObjectPropertyWrapper.
            </exception>
            <value>
            The actual data object this IObjectPropertyWrapper wraps around.
            </value>
        </member>
        <member name="P:Atom.Design.BaseObjectPropertyWrapper.WrappedType">
            <summary>
            Gets the <see cref="T:System.Type"/> this <see cref="T:Atom.Design.IObjectPropertyWrapper"/> wraps around.
            </summary>
        </member>
        <member name="M:Atom.Design.BaseObjectPropertyWrapper.Clone">
            <summary>
            Returns a clone of this <see cref="T:Atom.Design.IObjectPropertyWrapper"/>.
            </summary>
            <remarks>
            The <see cref="P:Atom.Design.BaseObjectPropertyWrapper.WrappedObject"/> is not cloned, only the IObjectPropertyWrapper.
            </remarks>
            <returns>
            The cloned IObjectPropertyWrapper.
            </returns>
        </member>
        <member name="M:Atom.Design.BaseObjectPropertyWrapper.System#ICloneable#Clone">
            <summary>
            Returns a clone of this <see cref="T:Atom.Design.IObjectPropertyWrapper"/>.
            </summary>
            <remarks>
            The <see cref="P:Atom.Design.BaseObjectPropertyWrapper.WrappedObject"/> is not cloned, only the IObjectPropertyWrapper.
            </remarks>
            <returns>
            The cloned IObjectPropertyWrapper.
            </returns>
        </member>
        <member name="M:Atom.Design.BaseObjectPropertyWrapper.OnPropertyChanged(System.String)">
            <summary>
            Raises the <see cref="E:Atom.Design.BaseObjectPropertyWrapper.PropertyChanged"/> event.
            </summary>
            <param name="propertyName">
            The name of the property whose value has changed.
            </param>
        </member>
        <member name="F:Atom.Design.BaseObjectPropertyWrapper.wrappedObject">
            <summary>
            The object this <see cref="T:Atom.Design.IObjectPropertyWrapper"/> wraps around.
            </summary>
        </member>
        <member name="T:Atom.Design.BaseObjectPropertyWrapper`1">
            <summary>
            Represents an abstract base implementation of the <see cref="T:Atom.Design.IObjectPropertyWrapper"/> interface.
            </summary>
            <typeparam name="TObject">
            The type of the object that is beeing wrapped by this IObjectPropertyWrapper.
            </typeparam>
        </member>
        <member name="P:Atom.Design.BaseObjectPropertyWrapper`1.WrappedObject">
            <summary>
            Gets or sets the object this <see cref="T:Atom.Design.IObjectPropertyWrapper"/> wraps around.
            </summary>
            <value>
            The actual data object this IObjectPropertyWrapper wraps around.
            </value>
        </member>
        <member name="P:Atom.Design.BaseObjectPropertyWrapper`1.WrappedType">
            <summary>
            Gets the <see cref="T:System.Type"/> this <see cref="T:Atom.Design.IObjectPropertyWrapper"/> wraps around.
            </summary>
            <value>
            The type of the object this IObjectPropertyWrapper wraps around; <typeparamref name="TObject"/>.
            </value>
        </member>
        <member name="T:Atom.Design.IObjectPropertyWrapper">
            <summary>
            Exposes the properties of an <see cref="T:System.Object"/> by wrapping around it,
            adding additional behaviour and metadata.
            </summary>
            <remarks>
            An object property wrapper is used to extend the properties of an existing object.
            This is useful when an object is supposed to be bound to a PropertyGrid.
            <para>
            By binding the PropertyGrid to an IObjectPropertyWrapper instead of an actual Object
            one can easily add metadata (such as DisplayNameAttribute, DescriptionAttribute, EditorAttribute, ..),
            additional behaviour, and choose exactly what properties to expose to the PropertyGrid.
            </para>
            This also pulls all design-time related metadata, away from the object, to the IObjectPropertyWrapper.
            </remarks>
        </member>
        <member name="P:Atom.Design.IObjectPropertyWrapper.WrappedObject">
            <summary>
            Gets or sets the object this <see cref="T:Atom.Design.IObjectPropertyWrapper"/> wraps around.
            </summary>
            <exception cref="T:System.ArgumentException">
            If the type of the given value is not compatible with 
            the <see cref="P:Atom.Design.IObjectPropertyWrapper.WrappedType"/> of this IObjectPropertyWrapper.
            </exception>
            <value>The object this IObjectPropertyWrapper wraps around.</value>
        </member>
        <member name="P:Atom.Design.IObjectPropertyWrapper.WrappedType">
            <summary>
            Gets the <see cref="T:System.Type"/> this <see cref="T:Atom.Design.IObjectPropertyWrapper"/> wraps around.
            </summary>
            <value>The Type of the object this IObjectPropertyWrapper wraps around.</value>
        </member>
        <member name="T:Atom.Design.IObjectPropertyWrapperFactory">
            <summary>
            Provides a mechanism that allows the central creation of <see cref="T:Atom.Design.IObjectPropertyWrapper"/>s.
            </summary>
        </member>
        <member name="M:Atom.Design.IObjectPropertyWrapperFactory.ReceiveWrapper(System.Object)">
            <summary>
            Receives an <see cref="T:Atom.Design.IObjectPropertyWrapper"/> for the given <see cref="T:System.Object"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            If the given <paramref name="obj"/> is null.
            </exception>
            <param name="obj">
            The object to receive an IObjectPropertyWrapper for.
            </param>
            <returns>
            The initialized IObjectPropertyWrapper for the given Object,
            or null if there exists no IObjectPropertyWrapper for the requested type.
            </returns>
        </member>
        <member name="M:Atom.Design.IObjectPropertyWrapperFactory.ReceiveWrapperOrObject(System.Object)">
            <summary>
            Receives an <see cref="T:Atom.Design.IObjectPropertyWrapper"/> for the given <see cref="T:System.Object"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            If the given <paramref name="obj"/> is null.
            </exception>
            <param name="obj">
            The object to receive an IObjectPropertyWrapper for.
            </param>
            <returns>
            The initialized IObjectPropertyWrapper for the given Object,
            or the original object if there exists no IObjectPropertyWrapper for the given type.
            </returns>
        </member>
        <member name="M:Atom.Design.IObjectPropertyWrapperFactory.GetObjectTypes">
            <summary>
            Gets the types of the objects this IObjectPropertyWrapperFactory
            provides an <see cref="T:Atom.Design.IObjectPropertyWrapper"/> for.
            </summary>
            <returns>A new array that contains the types.</returns>
        </member>
        <member name="M:Atom.Design.IObjectPropertyWrapperFactory.RegisterWrapper(Atom.Design.IObjectPropertyWrapper)">
            <summary>
            Registers the given <see cref="T:Atom.Design.IObjectPropertyWrapper"/> at this IObjectPropertyWrapperFactory.
            </summary>
            <param name="wrapper">
            The wrapper to register.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the given <paramref name="wrapper"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the <paramref name="wrapper"/> already has been registered.
            </exception>
        </member>
        <member name="M:Atom.Design.IObjectPropertyWrapperFactory.UnregisterWrapper(System.Type)">
            <summary>
            Unregisters the <see cref="T:Atom.Design.IObjectPropertyWrapper"/> for the given <see cref="T:System.Type"/>
            from this IObjectPropertyWrapperFactory
            </summary>
            <param name="type">
            The type of the object the wrapper to unregister wraps around.
            </param>
            <returns>
            Returns true when the <see cref="T:Atom.Design.IObjectPropertyWrapper"/> for the given <see cref="T:System.Type"/> has been removed;
            otherwise false.
            </returns>
        </member>
        <member name="T:Atom.Design.ObjectPropertyWrapperFactory">
            <summary>
            Implements a factory that is responsible of creating <see cref="T:Atom.Design.IObjectPropertyWrapper"/>s.
            </summary>
        </member>
        <member name="M:Atom.Design.ObjectPropertyWrapperFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Design.ObjectPropertyWrapperFactory"/> class.
            </summary>
        </member>
        <member name="M:Atom.Design.ObjectPropertyWrapperFactory.ReceiveWrapper(System.Object)">
            <summary>
            Receives an <see cref="T:Atom.Design.IObjectPropertyWrapper"/> for the given <see cref="T:System.Object"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            If the given <paramref name="obj"/> is null.
            </exception>
            <param name="obj">
            The object to receive an IObjectPropertyWrapper for.
            </param>
            <returns>
            The initialized IObjectPropertyWrapper for the given Object,
            or null if there exists no IObjectPropertyWrapper for the requested type.
            </returns>
        </member>
        <member name="M:Atom.Design.ObjectPropertyWrapperFactory.ReceiveWrapperOrObject(System.Object)">
            <summary>
            Receives an <see cref="T:Atom.Design.IObjectPropertyWrapper"/> for the given <see cref="T:System.Object"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            If the given <paramref name="obj"/> is null.
            </exception>
            <param name="obj">
            The object to receive an IObjectPropertyWrapper for.
            </param>
            <returns>
            The initialized IObjectPropertyWrapper for the given Object,
            or the original object if there exists no IObjectPropertyWrapper for the given type.
            </returns>
        </member>
        <member name="M:Atom.Design.ObjectPropertyWrapperFactory.GetObjectTypes">
            <summary>
            Gets the types of the objects this <see cref="T:Atom.Design.ObjectPropertyWrapperFactory"/>
            provides an <see cref="T:Atom.Design.IObjectPropertyWrapper"/> for.
            </summary>
            <returns>A new array that contains the types.</returns>
        </member>
        <member name="M:Atom.Design.ObjectPropertyWrapperFactory.RegisterWrapper(Atom.Design.IObjectPropertyWrapper)">
            <summary>
            Registers the given <see cref="T:Atom.Design.IObjectPropertyWrapper"/> at this <see cref="T:Atom.Design.ObjectPropertyWrapperFactory"/>.
            </summary>
            <param name="wrapper">
            The wrapper to register.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the given <paramref name="wrapper"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the <paramref name="wrapper"/> already has been registered.
            </exception>
        </member>
        <member name="M:Atom.Design.ObjectPropertyWrapperFactory.UnregisterWrapper(System.Type)">
            <summary>
            Unregisters the <see cref="T:Atom.Design.IObjectPropertyWrapper"/> for the given <see cref="T:System.Type"/>
            from this <see cref="T:Atom.Design.ObjectPropertyWrapperFactory"/>.
            </summary>
            <param name="type">
            The type of the object the wrapper to unregister wraps around.
            </param>
            <returns>
            Returns true when the <see cref="T:Atom.Design.IObjectPropertyWrapper"/> for the given <see cref="T:System.Type"/> has been removed;
            otherwise false.
            </returns>
        </member>
        <member name="F:Atom.Design.ObjectPropertyWrapperFactory.wrappers">
            <summary>
            Stores the IObjectPropertyWrappers, sorted by the type they wrap.
            </summary>
        </member>
        <member name="T:Atom.Diagnostics.BaseLog">
            <summary>
            Defines an abstract base implementation of the <see cref="T:Atom.Diagnostics.ILog"/> interface.
            </summary>
        </member>
        <member name="P:Atom.Diagnostics.BaseLog.MessageFilter">
            <summary>
            Gets or sets the ILogFilter that is used to filter the messages
            that are actually logged.
            </summary>
        </member>
        <member name="P:Atom.Diagnostics.BaseLog.DefaultSeverity">
            <summary>
            Gets the default <see cref="T:Atom.Diagnostics.LogSeverities"/> messages are logged as.
            </summary>
            <value>
            The default value is <see cref="F:Atom.Diagnostics.LogSeverities.Info"/>.
            </value>
        </member>
        <member name="M:Atom.Diagnostics.BaseLog.#ctor">
            <summary>
            Initializes a new instance of the BaseLog class.
            </summary>
        </member>
        <member name="M:Atom.Diagnostics.BaseLog.Write(System.String)">
            <summary>
            Writes the given message to this BaseLog using the <see cref="P:Atom.Diagnostics.BaseLog.DefaultSeverity"/>.
            </summary>
            <param name="message">
            The message to log.
            </param>
        </member>
        <member name="M:Atom.Diagnostics.BaseLog.WriteLine(System.String)">
            <summary>
            Writes the given message, followed by a new line, to 
            this BaseLog using the <see cref="P:Atom.Diagnostics.BaseLog.DefaultSeverity"/>.
            </summary>
            <param name="message">
            The message to log.
            </param>
        </member>
        <member name="M:Atom.Diagnostics.BaseLog.WriteLine">
            <summary>
            Writes a new empty line to this ILog with the <see cref="P:Atom.Diagnostics.BaseLog.DefaultSeverity"/>.
            </summary>
        </member>
        <member name="M:Atom.Diagnostics.BaseLog.Write(Atom.Diagnostics.LogSeverities,System.String)">
            <summary>
            Writes the given message to this BaseLog using
            the given <see cref="T:Atom.Diagnostics.LogSeverities"/>.
            </summary>
            <param name="severity">
            The <see cref="T:Atom.Diagnostics.LogSeverities"/> of the <paramref name="message"/>.
            </param>
            <param name="message">
            The message to log.
            </param>
        </member>
        <member name="M:Atom.Diagnostics.BaseLog.WriteLine(Atom.Diagnostics.LogSeverities,System.String)">
            <summary>
            Writes the given message, followed by a new line, to 
            this BaseLog using the given <see cref="T:Atom.Diagnostics.LogSeverities"/>.
            </summary>
            <param name="severity">
            The <see cref="T:Atom.Diagnostics.LogSeverities"/> of the <paramref name="message"/>.
            </param>
            <param name="message">
            The message to log.
            </param>
        </member>
        <member name="M:Atom.Diagnostics.BaseLog.ActuallyWrite(Atom.Diagnostics.LogSeverities,System.String)">
            <summary>
            Writes the given message to this BaseLog using
            the given <see cref="T:Atom.Diagnostics.LogSeverities"/>.
            </summary>
            <remarks>
            Messages that should not be logged have already been filtered by <see cref="M:Atom.Diagnostics.BaseLog.IsNotLogged(Atom.Diagnostics.LogSeverities,System.String)"/>
            when this method is called.
            </remarks>
            <param name="severity">
            The <see cref="T:Atom.Diagnostics.LogSeverities"/> of the <paramref name="message"/>.
            </param>
            <param name="message">
            The message to log.
            </param>
        </member>
        <member name="M:Atom.Diagnostics.BaseLog.ActuallyWriteLine(Atom.Diagnostics.LogSeverities,System.String)">
            <summary>
            Writes the given message, followed by a new line, to 
            this BaseLog using the given <see cref="T:Atom.Diagnostics.LogSeverities"/>.
            </summary>
            <remarks>
            Messages that should not be logged have already been filtered by <see cref="M:Atom.Diagnostics.BaseLog.IsNotLogged(Atom.Diagnostics.LogSeverities,System.String)"/>
            when this method is called.
            </remarks>
            <param name="severity">
            The <see cref="T:Atom.Diagnostics.LogSeverities"/> of the <paramref name="message"/>.
            </param>
            <param name="message">
            The message to log.
            </param>
        </member>
        <member name="M:Atom.Diagnostics.BaseLog.IsNotLogged(Atom.Diagnostics.LogSeverities,System.String)">
            <summary>
            Gets a value indicating whether the message of the given <see cref="T:Atom.Diagnostics.LogSeverities"/>
            is not logged by this BaseLog.
            </summary>
            <param name="severity">
            The <see cref="T:Atom.Diagnostics.LogSeverities"/> of the message.
            </param>
            <param name="message">
            The message to filter.
            </param>
            <returns>
            Returns <see langword="true"/> if the message is not supposed to be logged;
            or otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Atom.Diagnostics.ConsoleLog">
            <summary>
            Provides a mechanism to write string messages to the <see cref="T:System.Console"/>.
            </summary>
        </member>
        <member name="M:Atom.Diagnostics.ConsoleLog.ActuallyWrite(Atom.Diagnostics.LogSeverities,System.String)">
            <summary>
            Writes the given message to the console using
            the given <see cref="T:Atom.Diagnostics.LogSeverities"/>.
            </summary>
            <param name="severity">
            The <see cref="T:Atom.Diagnostics.LogSeverities"/> of the <paramref name="message"/>.
            </param>
            <param name="message">
            The message to log.
            </param>
        </member>
        <member name="M:Atom.Diagnostics.ConsoleLog.ActuallyWriteLine(Atom.Diagnostics.LogSeverities,System.String)">
            <summary>
            Writes the given message, followed by a new line, to 
            the console using the given <see cref="T:Atom.Diagnostics.LogSeverities"/>.
            </summary>
            <param name="severity">
            The <see cref="T:Atom.Diagnostics.LogSeverities"/> of the <paramref name="message"/>.
            </param>
            <param name="message">
            The message to log.
            </param>
        </member>
        <member name="M:Atom.Diagnostics.ConsoleLog.WriteLine">
            <summary>
            Writes a new empty line to this ConsoleLog.
            </summary>
        </member>
        <member name="T:Atom.Diagnostics.Contracts.Contract">
            <summary>
            Allows checking of class contracts.
            </summary>
            <remarks>
            Quick implementation since I've had to remove the unsupported Microsoft Code Contracts.
            </remarks>
        </member>
        <member name="M:Atom.Diagnostics.Contracts.Contract.NotNull``1(``0,System.String)">
            <summary>
            Checks whether the given obejct is not null.
            </summary>
            <param name="obj">
            The object that should not be null.
            </param>
            <param name="argumentName">
            The anme of the argument.
            </param>
        </member>
        <member name="M:Atom.Diagnostics.Contracts.Contract.Requires(System.Boolean,System.String)">
            <summary>
            Checks whether the given condition is met.
            </summary>
            <param name="condition">
            The condition that must be true.
            </param>
            <param name="message">
            The message to output if the condition is not met. (optional)
            </param>
        </member>
        <member name="M:Atom.Diagnostics.Contracts.Contract.Requires``1(System.Boolean,System.String)">
            <summary>
            Checks whether the given condition is met.
            </summary>
            <typeparam name="TException">
            The exception type to throw if the condition is not met.
            </typeparam>
            <param name="condition">
            The condition that must be true.
            </param>
            <param name="message">
            The message to output if the condition is not met. (optional)
            </param>
        </member>
        <member name="M:Atom.Diagnostics.Contracts.Contract.ForAll``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Checks whether the given condition is met for all item.
            </summary>
        </member>
        <member name="M:Atom.Diagnostics.Contracts.Contract.Invariant(System.Boolean)">
            <summary>
            Checks whether the given invariant condition is met.
            </summary>
            <param name="invariant">
            The invariant that must be true.
            </param>
        </member>
        <member name="T:Atom.Diagnostics.Contracts.PureAttribute">
            <summary>
            Marks a method as pure.
            </summary>
            <remarks>
            This class was added since we had to remove the now unsupported Microsoft Code Contracts.
            </remarks>
        </member>
        <member name="T:Atom.Diagnostics.FileLog">
            <summary>
            Provides a mechanism to log string messages into a text file.
            This class can't be inherited.
            </summary>
        </member>
        <member name="M:Atom.Diagnostics.FileLog.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Diagnostics.FileLog"/> class,
            using <see cref="P:System.Text.Encoding.Default"/>. 
            </summary>
            <remarks>
            If there is already a file at the specified <paramref name="name"/> the file will be 
            overriden if it is not readonly. Other processes are allowed to open the file of this
            <see cref="T:Atom.Diagnostics.FileLog"/> to read its content at any time. The file uses <see cref="P:System.Text.Encoding.Default"/>.
            </remarks>
            <param name="name"> 
            The name of the file to write. Can be an actual path such as
            @"Misc/MyLog.log" or just a file-name: "MyLog.log".
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the specified <paramref name="name"/> is null.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The specified path is invalid, (for example, it is on an unmapped drive).
            </exception>
            <exception cref="T:System.NotSupportedException"> <paramref name="name"/> is in an invalid format. </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="name"/> is a zero-length string, contains only white space,
            or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>.
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length.
            For example, on Windows-based platforms, paths must be less than 248 characters, 
            and file names must be less than 260 characters.
            </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            path specified a file that is read-only.-or- This operation is not supported on the current platform.
            -or- path specified a directory.-or- The caller does not have the required permission. 
            </exception>
        </member>
        <member name="M:Atom.Diagnostics.FileLog.#ctor(System.String,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Diagnostics.FileLog"/> class.
            </summary>
            <remarks>
            If there is already a file at the specified <paramref name="name"/> the file will be 
            overriden if it is not readonly. Other processes are allowed to open the file of this
            <see cref="T:Atom.Diagnostics.FileLog"/> to read its content at any time. The file uses <see cref="P:System.Text.Encoding.Default"/>.
            </remarks>
            <param name="name"> 
            The name of the file to write. Can be an actual path such as
            @"Misc/MyLog.log" or just a file-name: "MyLog.log".
            </param>
            <param name="encoding">
            The encoding to use for the underlying file-stream.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the specified <paramref name="name"/> is null.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The specified path is invalid, (for example, it is on an unmapped drive).
            </exception>
            <exception cref="T:System.NotSupportedException"> <paramref name="name"/> is in an invalid format. </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="name"/> is a zero-length string, contains only white space,
            or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>.
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length.
            For example, on Windows-based platforms, paths must be less than 248 characters, 
            and file names must be less than 260 characters.
            </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            path specified a file that is read-only.-or- This operation is not supported on the current platform.
            -or- path specified a directory.-or- The caller does not have the required permission. 
            </exception>
        </member>
        <member name="M:Atom.Diagnostics.FileLog.CreateTextWriter(System.String,System.Text.Encoding)">
            <summary>
            Creates a new <see cref="T:System.IO.TextWriter"/> that is used to write to the underlying file.
            </summary>
            <param name="name"> 
            The name of the file to write to.
            </param>
            <param name="encoding">
            The encoding to use for the underlying file-stream.
            </param>
            <returns>
            The newly created TextWriter.
            </returns>
        </member>
        <member name="T:Atom.Diagnostics.Filters.ILogFilter">
            <summary>
            Provides a mechanism to filter <see cref="T:Atom.Diagnostics.ILog"/> messages.
            </summary>
        </member>
        <member name="M:Atom.Diagnostics.Filters.ILogFilter.Filters(Atom.Diagnostics.LogSeverities,System.String)">
            <summary>
            Gets whether the specified log message is filtered by this SeverityLogFilter.
            </summary>
            <param name="severity">
            The severity of the message.
            </param>
            <param name="message">
            The actual message.
            </param>
            <returns>
            true if the message is filtered;
            otherwise false.
            </returns>
        </member>
        <member name="T:Atom.Diagnostics.Filters.SeverityLogFilter">
            <summary>
            Implements an <see cref="T:Atom.Diagnostics.Filters.ILogFilter"/> that filters by the
            severity of the message.
            </summary>
            <seealso cref="T:Atom.Diagnostics.LogSeverities"/>
        </member>
        <member name="P:Atom.Diagnostics.Filters.SeverityLogFilter.Allowed">
            <summary>
            Gets or sets the <see cref="T:Atom.Diagnostics.LogSeverities"/> that aren't filtered by this SeverityLogFilter.
            </summary>
            <value>
            Is <see cref="F:Atom.Diagnostics.LogSeverities.All"/> by default; allowing all messages to pass.
            </value>
        </member>
        <member name="M:Atom.Diagnostics.Filters.SeverityLogFilter.Filters(Atom.Diagnostics.LogSeverities,System.String)">
            <summary>
            Gets whether the specified log message is filtered by this SeverityLogFilter.
            </summary>
            <param name="severity">
            The severity of the message.
            </param>
            <param name="message">
            The actual message.
            </param>
            <returns>
            true if the message is filtered;
            otherwise false.
            </returns>
        </member>
        <member name="M:Atom.Diagnostics.Filters.SeverityLogFilter.Allow(Atom.Diagnostics.LogSeverities)">
            <summary>
            Tells this SeverityLogFilter to not filter messages with the specified LogSeverity.
            </summary>
            <param name="severity">
            The sevarity to allow.
            </param>
        </member>
        <member name="M:Atom.Diagnostics.Filters.SeverityLogFilter.Disallow(Atom.Diagnostics.LogSeverities)">
            <summary>
            Tells this SeverityLogFilter to filter messages with the specified LogSeverity.
            </summary>
            <param name="severity">
            The sevarity to not allow.
            </param>
        </member>
        <member name="F:Atom.Diagnostics.Filters.SeverityLogFilter.allowed">
            <summary>
            Stores the <see cref="T:Atom.Diagnostics.LogSeverities"/> that aren't filtered by this SeverityLogFilter.
            </summary>
        </member>
        <member name="T:Atom.Diagnostics.ILog">
            <summary>
            Provides a mechanism to log string messages.
            </summary>
        </member>
        <member name="P:Atom.Diagnostics.ILog.DefaultSeverity">
            <summary>
            Gets the default <see cref="T:Atom.Diagnostics.LogSeverities"/> messages are logged as.
            </summary>
            <value>
            The default value is <see cref="F:Atom.Diagnostics.LogSeverities.Info"/>.
            </value>
        </member>
        <member name="M:Atom.Diagnostics.ILog.Write(System.String)">
            <summary>
            Writes the given message to this ILog using the <see cref="P:Atom.Diagnostics.ILog.DefaultSeverity"/>.
            </summary>
            <param name="message">
            The message to log.
            </param>
        </member>
        <member name="M:Atom.Diagnostics.ILog.Write(Atom.Diagnostics.LogSeverities,System.String)">
            <summary>
            Writes the given message to this ILog using
            the given <see cref="T:Atom.Diagnostics.LogSeverities"/>.
            </summary>
            <param name="severity">
            The <see cref="T:Atom.Diagnostics.LogSeverities"/> of the <paramref name="message"/>.
            </param>
            <param name="message">
            The message to log.
            </param>
        </member>
        <member name="M:Atom.Diagnostics.ILog.WriteLine">
            <summary>
            Writes a new empty line to this ILog with the <see cref="P:Atom.Diagnostics.ILog.DefaultSeverity"/>.
            </summary>
        </member>
        <member name="M:Atom.Diagnostics.ILog.WriteLine(System.String)">
            <summary>
            Writes the given message, followed by a new line, to 
            this ILog using the <see cref="P:Atom.Diagnostics.ILog.DefaultSeverity"/>.
            </summary>
            <param name="message">
            The message to log.
            </param>
        </member>
        <member name="M:Atom.Diagnostics.ILog.WriteLine(Atom.Diagnostics.LogSeverities,System.String)">
            <summary>
            Writes the given message, followed by a new line, to 
            this ILog using the given <see cref="T:Atom.Diagnostics.LogSeverities"/>.
            </summary>
            <param name="severity">
            The <see cref="T:Atom.Diagnostics.LogSeverities"/> of the <paramref name="message"/>.
            </param>
            <param name="message">
            The message to log.
            </param>
        </member>
        <member name="T:Atom.Diagnostics.ILogProvider">
            <summary>
            Provides a mechanism to receive an <see cref="T:Atom.Diagnostics.ILog"/> object
            that can be used for logging.
            </summary>
        </member>
        <member name="P:Atom.Diagnostics.ILogProvider.Log">
            <summary>
            Gets the <see cref="T:Atom.Diagnostics.ILog"/> object.
            </summary>
            <value>
            The <see cref="T:Atom.Diagnostics.ILog"/> object this ILogService provides.
            </value>
        </member>
        <member name="T:Atom.Diagnostics.LogExtensions">
            <summary>
            Defines <see cref="T:Atom.Diagnostics.ILog"/> related extension methods.
            </summary>
        </member>
        <member name="M:Atom.Diagnostics.LogExtensions.Write(Atom.Diagnostics.ILog,Atom.Diagnostics.LogSeverities,System.String,System.Object[])">
            <summary>
            Writes a message by compositing the given string <paramref name="format"/> 
            with the given object <paramref name="args"/> to this BaseLog using
            the given <see cref="T:Atom.Diagnostics.LogSeverities"/>.
            </summary>
            <param name="log">
            The <see cref="T:Atom.Diagnostics.ILog"/> to write to.
            </param>
            <param name="severity">
            The <see cref="T:Atom.Diagnostics.LogSeverities"/> of the composed message.
            </param>
            <param name="format">
            A composite format string.
            </param>
            <param name="args">
            An System.Object array containing zero or more objects to format.
            </param>
        </member>
        <member name="M:Atom.Diagnostics.LogExtensions.WriteLine(Atom.Diagnostics.ILog,Atom.Diagnostics.LogSeverities,System.String,System.Object[])">
            <summary>
            Writes a message, followed by a new line, by compositing the 
            given string <paramref name="format"/> with the given object <paramref name="args"/> 
            to this BaseLog using the given <see cref="T:Atom.Diagnostics.LogSeverities"/>.
            </summary>
            <param name="log">
            The <see cref="T:Atom.Diagnostics.ILog"/> to write to.
            </param>
            <param name="severity">
            The <see cref="T:Atom.Diagnostics.LogSeverities"/> of the composed message.
            </param>
            <param name="format">
            A composite format string.
            </param>
            <param name="args">
            An System.Object array containing zero or more objects to format.
            </param>
        </member>
        <member name="M:Atom.Diagnostics.LogExtensions.Write(Atom.Diagnostics.ILog,System.String,System.Object[])">
            <summary>
            Writes a message by compositing the given string <paramref name="format"/> 
            with the given object <paramref name="args"/> to this <see cred="ILog"/> using
            the default <see cref="T:Atom.Diagnostics.LogSeverities"/> of this ILog.
            </summary>
            <param name="log">
            The <see cref="T:Atom.Diagnostics.ILog"/> to write to.
            </param>
            <param name="format">
            A composite format string.
            </param>
            <param name="args">
            An System.Object array containing zero or more objects to format.
            </param>
        </member>
        <member name="M:Atom.Diagnostics.LogExtensions.WriteLine(Atom.Diagnostics.ILog,System.String,System.Object[])">
            <summary>
            Writes a message, followed by a new line, by compositing the 
            given string <paramref name="format"/> with the given object <paramref name="args"/> 
            to this <see cred="ILog"/> using the default <see cref="T:Atom.Diagnostics.LogSeverities"/> of this ILog.
            </summary>
            <param name="log">
            The <see cref="T:Atom.Diagnostics.ILog"/> to write to.
            </param>
            <param name="format">
            A composite format string.
            </param>
            <param name="args">
            An System.Object array containing zero or more objects to format.
            </param>
        </member>
        <member name="M:Atom.Diagnostics.LogExtensions.Write``1(Atom.Diagnostics.ILog,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Writes the specified <paramref name="enumerable"/> into the <paramref name="log"/>
            by calling ToString() on every element, using the default <see cref="T:Atom.Diagnostics.LogSeverities"/> of this ILog.
            </summary>
            <typeparam name="T"> 
            The type of the elements stored in the array. 
            </typeparam>
            <param name="log">
            The log to write to.
            </param>
            <param name="enumerable">
            The elements to write into the log. 
            The enumerable and any of its elements can be null
            (An empty entry is written if an element is null).
            </param>
        </member>
        <member name="M:Atom.Diagnostics.LogExtensions.WriteLine``1(Atom.Diagnostics.ILog,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Writes the specified <paramref name="enumerable"/> into the <paramref name="log"/>
            by calling ToString() on every element and adding a new line after each,
            using the default <see cref="T:Atom.Diagnostics.LogSeverities"/> of this ILog.
            </summary>
            <typeparam name="T"> 
            The type of the elements stored in the array. 
            </typeparam>
            <param name="log">
            The log to write to.
            </param>
            <param name="enumerable">
            The enumerable to write into the log. 
            The enumerable and any of its elements can be null
            (An empty line is written if an element is null).
            </param>
        </member>
        <member name="M:Atom.Diagnostics.LogExtensions.Write``1(Atom.Diagnostics.ILog,Atom.Diagnostics.LogSeverities,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Writes the specified <paramref name="enumerable"/> into the <paramref name="log"/>
            by calling ToString() on every element.
            </summary>
            <typeparam name="T"> 
            The type of the elements stored in the array. 
            </typeparam>
            <param name="log">
            The log to write to.
            </param>
            <param name="severity">
            The <see cref="T:Atom.Diagnostics.LogSeverities"/> of the message.
            </param>
            <param name="enumerable">
            The elements to write into the log. 
            The enumerable and any of its elements can be null
            (An empty entry is written if an element is null).
            </param>
        </member>
        <member name="M:Atom.Diagnostics.LogExtensions.WriteLine``1(Atom.Diagnostics.ILog,Atom.Diagnostics.LogSeverities,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Writes the specified <paramref name="enumerable"/> into the <paramref name="log"/>
            by calling ToString() on every element and adding a new line after each.
            </summary>
            <typeparam name="T"> 
            The type of the elements stored in the array. 
            </typeparam>
            <param name="log">
            The log to write to.
            </param>
            <param name="severity">
            The <see cref="T:Atom.Diagnostics.LogSeverities"/> of the message.
            </param>
            <param name="enumerable">
            The enumerable to write into the log. 
            The enumerable and any of its elements can be null
            (An empty line is written if an element is null).
            </param>
        </member>
        <member name="M:Atom.Diagnostics.LogExtensions.Contains(Atom.Diagnostics.LogSeverities,Atom.Diagnostics.LogSeverities)">
            <summary>
            Gets a value indicating whether given given <paramref name="severities"/>
            are (partially) contained by this <see cref="T:Atom.Diagnostics.LogSeverities"/>.
            </summary>
            <param name="severities">
            This LogSeverity.
            </param>
            <param name="severitiesToCheck">
            The LogSeverity to check for.
            </param>
            <returns>
            Returns <see langword="true"/> if the given LogSeverities are set in this LogSeverity;
            or otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Atom.Diagnostics.LogProvider">
            <summary>
            Implements a mechanism to receive an <see cref="T:Atom.Diagnostics.ILog"/> object
            that can be used for logging.
            </summary>
        </member>
        <member name="P:Atom.Diagnostics.LogProvider.Log">
            <summary>
            Gets the <see cref="T:Atom.Diagnostics.ILog"/> object this LogProvider provides.
            </summary>
            <value>
            The <see cref="T:Atom.Diagnostics.ILog"/> object this ILogService provides.
            </value>
        </member>
        <member name="M:Atom.Diagnostics.LogProvider.#ctor(Atom.Diagnostics.ILog)">
            <summary>
            Initializes a new instance of the LogProvider class.
            </summary>
            <param name="log">
            The ILog object the new LogProvider provides.
            </param>
        </member>
        <member name="F:Atom.Diagnostics.LogProvider.log">
            <summary>
            The <see cref="T:Atom.Diagnostics.ILog"/> object this LogProvider provides.
            </summary>
        </member>
        <member name="T:Atom.Diagnostics.LogSeverities">
            <summary>
            Enumerates the different types of log severities,
            as related to the <see cref="T:Atom.Diagnostics.ILog"/> interface.
            </summary>
        </member>
        <member name="F:Atom.Diagnostics.LogSeverities.None">
            <summary>
            Represents no LogSeverity.
            </summary>
        </member>
        <member name="F:Atom.Diagnostics.LogSeverities.Info">
            <summary>
            Represents a severity that relates to information messages.
            </summary>
        </member>
        <member name="F:Atom.Diagnostics.LogSeverities.Debug">
            <summary>
            Represents a severity that relates to debug-related log messages.
            </summary>
        </member>
        <member name="F:Atom.Diagnostics.LogSeverities.Warning">
            <summary>
            Represents a severity that relates to warning log messages.
            </summary>
        </member>
        <member name="F:Atom.Diagnostics.LogSeverities.Error">
            <summary>
            Represents a severity that relates to error log messages.
            </summary>
        </member>
        <member name="F:Atom.Diagnostics.LogSeverities.Fatal">
            <summary>
            Represents a severity that relates to fatal log messages.
            </summary>
        </member>
        <member name="F:Atom.Diagnostics.LogSeverities.All">
            <summary>
            Represents all LogSeverities at the same time.
            </summary>
        </member>
        <member name="T:Atom.Diagnostics.MultiLog">
            <summary>
            Provides a mechanism that allows writing to multiple <see cref="T:Atom.Diagnostics.ILog"/> 
            instances at the same time. This class can't be inherited.
            </summary>
        </member>
        <member name="P:Atom.Diagnostics.MultiLog.Count">
            <summary>
            Gets the number of <see cref="T:Atom.Diagnostics.ILog"/>s that listen to this MultiLog.
            </summary>
        </member>
        <member name="M:Atom.Diagnostics.MultiLog.WriteLine">
            <summary>
            Writes a new empty line to each ILog that has been attached to this MultiLog.
            </summary>
        </member>
        <member name="M:Atom.Diagnostics.MultiLog.ActuallyWrite(Atom.Diagnostics.LogSeverities,System.String)">
            <summary>
            Writes the given message to each ILog that has been attached to this MultiLog using
            the given <see cref="T:Atom.Diagnostics.LogSeverities"/>.
            </summary>
            <param name="severity">
            The <see cref="T:Atom.Diagnostics.LogSeverities"/> of the <paramref name="message"/>.
            </param>
            <param name="message">
            The message to log.
            </param>
        </member>
        <member name="M:Atom.Diagnostics.MultiLog.ActuallyWriteLine(Atom.Diagnostics.LogSeverities,System.String)">
            <summary>
            Writes the given message, followed by a new line,
            to each ILog that has been attached to this MultiLog
            using the given <see cref="T:Atom.Diagnostics.LogSeverities"/>.
            </summary>
            <param name="severity">
            The <see cref="T:Atom.Diagnostics.LogSeverities"/> of the <paramref name="message"/>.
            </param>
            <param name="message">
            The message to log.
            </param>
        </member>
        <member name="M:Atom.Diagnostics.MultiLog.Add(Atom.Diagnostics.ILog)">
            <summary>
            Adds the given <see cref="T:Atom.Diagnostics.ILog"/> to the list of logs
            that listen to this MultiLog.
            </summary>
            <param name="item">
            The ILog to add.
            </param>
        </member>
        <member name="M:Atom.Diagnostics.MultiLog.Remove(Atom.Diagnostics.ILog)">
            <summary>
            Tries to remove the given <see cref="T:Atom.Diagnostics.ILog"/> from the list 
            of logs that listen to this MultiLog.
            </summary>
            <param name="item">
            The ILog to remove.
            </param>
            <returns>
            Returns true if item was successfully removed from this MultiLog; 
            otherwise, false.
            </returns>
        </member>
        <member name="M:Atom.Diagnostics.MultiLog.Clear">
            <summary>
            Removes all <see cref="T:Atom.Diagnostics.ILog"/>s that listen to this MultiLog.
            </summary>
        </member>
        <member name="M:Atom.Diagnostics.MultiLog.Contains(Atom.Diagnostics.ILog)">
            <summary> 
            Determines whether this MultiLog contains a specific value.
            </summary>
            <param name="item">
            The ILog to locate in this MultiLog. 
            </param>
            <returns>
            Returns true if the given <see cref="T:Atom.Diagnostics.ILog"/> listens to this MultiLog;
            otherwise false.
            </returns>
        </member>
        <member name="P:Atom.Diagnostics.MultiLog.System#Collections#Generic#IList{Atom#Diagnostics#ILog}#Item(System.Int32)">
            <summary>
            Gets or sets the ILog at the given index.
            </summary>
            <param name="index">
            The zero-based index of the ILog to get or sets.
            </param>
            <returns>
            The ILog at the given zero-based index.
            </returns>
        </member>
        <member name="M:Atom.Diagnostics.MultiLog.System#Collections#Generic#IList{Atom#Diagnostics#ILog}#IndexOf(Atom.Diagnostics.ILog)">
            <summary>
            Determines the index of a specific item in the underlying System.Collections.Generic.IList{T}.
            </summary>
            <param name="item">
            The object to locate in the underlying System.Collections.Generic.IList{T}.
            </param>
            <returns>
            The index of item if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:Atom.Diagnostics.MultiLog.System#Collections#Generic#IList{Atom#Diagnostics#ILog}#Insert(System.Int32,Atom.Diagnostics.ILog)">
            <summary>
             Inserts an item to the underlying System.Collections.Generic.IList{T} at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert into the underlying System.Collections.Generic.IList{T}.</param>
        </member>
        <member name="M:Atom.Diagnostics.MultiLog.System#Collections#Generic#IList{Atom#Diagnostics#ILog}#RemoveAt(System.Int32)">
            <summary>
            Removes the System.Collections.Generic.IList{T} item at the specified index.
            </summary>
            <param name="index">
            The zero-based index of the item to remove.
            </param>
        </member>
        <member name="M:Atom.Diagnostics.MultiLog.System#Collections#Generic#ICollection{Atom#Diagnostics#ILog}#CopyTo(Atom.Diagnostics.ILog[],System.Int32)">
            <summary>
            Copies the elements of the underlying System.Collections.Generic.ICollection{T} to an 
            System.Array, starting at a particular System.Array index.
            </summary>
            <param name="array">
            The one-dimensional System.Array that is the destination of the elements
            copied from System.Collections.Generic.ICollection{T}. The System.Array must
            have zero-based indexing.
            </param>
            <param name="arrayIndex">
            The zero-based index in array at which copying begins.
            </param>
        </member>
        <member name="P:Atom.Diagnostics.MultiLog.System#Collections#Generic#ICollection{Atom#Diagnostics#ILog}#IsReadOnly">
            <summary>
            Gets a value indicating whether the MultiLog is read-only.
            </summary>
        </member>
        <member name="M:Atom.Diagnostics.MultiLog.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the list of <see cref="T:Atom.Diagnostics.ILog"/>s that listen to this MultiLog.
            </summary>
            <returns>
            An IEnumerator{ILog} that can be used to iterate through this MultiLog.
            </returns>
        </member>
        <member name="M:Atom.Diagnostics.MultiLog.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the list of <see cref="T:Atom.Diagnostics.ILog"/>s that listen to this MultiLog.
            </summary>
            <returns>
            An IEnumerator that can be used to iterate through this MultiLog.
            </returns>
        </member>
        <member name="F:Atom.Diagnostics.MultiLog.listeners">
            <summary>
            The list of <see cref="T:Atom.Diagnostics.ILog"/>s that listen to this MultiLog.
            </summary>
        </member>
        <member name="T:Atom.Diagnostics.TextWriterLog">
            <summary>
            Provides a mechanism to log string messages to a <see cref="T:System.IO.TextWriter"/>.
            </summary>
        </member>
        <member name="P:Atom.Diagnostics.TextWriterLog.Writer">
            <summary>
            Gets the TextWriter into which the messages written to this TextWriterLog are re-directed.
            </summary>
        </member>
        <member name="M:Atom.Diagnostics.TextWriterLog.#ctor(System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Diagnostics.TextWriterLog"/> class.
            </summary>
        </member>
        <member name="M:Atom.Diagnostics.TextWriterLog.Finalize">
            <summary>
            Finalizes an instance of the TextWriterLog class, releasing all unmanaged resources.
            </summary>
        </member>
        <member name="M:Atom.Diagnostics.TextWriterLog.Dispose">
            <summary>
            Releases all managed resources of this <see cref="T:Atom.Diagnostics.TextWriterLog"/>. Further calls
            to methods of this object will result in an exception.
            </summary>
        </member>
        <member name="M:Atom.Diagnostics.TextWriterLog.Dispose(System.Boolean)">
            <summary>
            Releases all resources this IDisposable object has aquired.
            </summary>
            <param name="releaseManaged">
            States whether managed resources should be disposed.
            </param>
        </member>
        <member name="M:Atom.Diagnostics.TextWriterLog.ActuallyWrite(Atom.Diagnostics.LogSeverities,System.String)">
            <summary>
            Writes the given message to this TextWriterLog using
            the given <see cref="T:Atom.Diagnostics.LogSeverities"/>.
            </summary>
            <param name="severity">
            The <see cref="T:Atom.Diagnostics.LogSeverities"/> of the <paramref name="message"/>.
            </param>
            <param name="message">
            The message to log.
            </param>
        </member>
        <member name="M:Atom.Diagnostics.TextWriterLog.ActuallyWriteLine(Atom.Diagnostics.LogSeverities,System.String)">
            <summary>
            Writes the given message, followed by a new line, to 
            this TextWriterLog using the given <see cref="T:Atom.Diagnostics.LogSeverities"/>.
            </summary>
            <param name="severity">
            The <see cref="T:Atom.Diagnostics.LogSeverities"/> of the <paramref name="message"/>.
            </param>
            <param name="message">
            The message to log.
            </param>
        </member>
        <member name="F:Atom.Diagnostics.TextWriterLog.writer">
            <summary>
            The TextWriter into which the messages written to this TextWriterLog are re-directed.
            </summary>
        </member>
        <member name="T:Atom.Diagnostics.TraceLog">
            <summary>
            Provides a mechanism to write string messages to the <see cref="T:System.Diagnostics.Trace"/>.
            </summary>
        </member>
        <member name="M:Atom.Diagnostics.TraceLog.ActuallyWrite(Atom.Diagnostics.LogSeverities,System.String)">
            <summary>
            Writes the given message to the trace using
            the given <see cref="T:Atom.Diagnostics.LogSeverities"/>.
            </summary>
            <param name="severity">
            The <see cref="T:Atom.Diagnostics.LogSeverities"/> of the <paramref name="message"/>.
            </param>
            <param name="message">
            The message to log.
            </param>
        </member>
        <member name="M:Atom.Diagnostics.TraceLog.ActuallyWriteLine(Atom.Diagnostics.LogSeverities,System.String)">
            <summary>
            Writes the given message, followed by a new line, to 
            the trace using the given <see cref="T:Atom.Diagnostics.LogSeverities"/>.
            </summary>
            <param name="severity">
            The <see cref="T:Atom.Diagnostics.LogSeverities"/> of the <paramref name="message"/>.
            </param>
            <param name="message">
            The message to log.
            </param>
        </member>
        <member name="T:Atom.ErrorStrings">
            <summary>
              Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
            </summary>
        </member>
        <member name="P:Atom.ErrorStrings.ResourceManager">
            <summary>
              Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
            </summary>
        </member>
        <member name="P:Atom.ErrorStrings.Culture">
            <summary>
              Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
              Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
            </summary>
        </member>
        <member name="P:Atom.ErrorStrings.AnUnhandledExceptionOccurred">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die An unhandled exception has occurred. ähnelt.
            </summary>
        </member>
        <member name="P:Atom.ErrorStrings.ArgumentsMayNotBeEqual">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die The specified arguments may not be equal. ähnelt.
            </summary>
        </member>
        <member name="P:Atom.ErrorStrings.ArrayLengthOutOfValidRange">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die The length of the array is out of valid range. ähnelt.
            </summary>
        </member>
        <member name="P:Atom.ErrorStrings.ArrayLengthOutOfValidRange1">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die The length of the array is out of valid range. ähnelt.
            </summary>
        </member>
        <member name="P:Atom.ErrorStrings.AttemptToReturnInActiveNode">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Attempted to return an inactive Node to the Atom.Collections.Pool. ähnelt.
            </summary>
        </member>
        <member name="P:Atom.ErrorStrings.CantInsertItemIntoSortableListIfKeepSortedIsTrue">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die It&apos;s not allowed to insert an item into the SortableList if KeepSorted is true. ähnelt.
            </summary>
        </member>
        <member name="P:Atom.ErrorStrings.ComponentCollectionIsReadOnly">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die The IEntityComponentCollection is read-only. As such this operation is invalid. ähnelt.
            </summary>
        </member>
        <member name="P:Atom.ErrorStrings.ComponentWasNotFound">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die The component of type &apos;{0}&apos; could not be found. ähnelt.
            </summary>
        </member>
        <member name="P:Atom.ErrorStrings.CriticalUnhandledExceptionHasOccurred">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die A critical unhandled exception has occurred. ähnelt.
            </summary>
        </member>
        <member name="P:Atom.ErrorStrings.EntityAlreadyAddedToScene">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die The entity &apos;{0}&apos; already has been added to a scene. ähnelt.
            </summary>
        </member>
        <member name="P:Atom.ErrorStrings.EntityComponentCollectionIsOwnedByDifferentEntity">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die The given IEntityComponentCollection is not owned by this Entity. This is invalid. ähnelt.
            </summary>
        </member>
        <member name="P:Atom.ErrorStrings.EntityIsRequiredToHaveComponentType">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die The entity is required to have a component of type {0}. ähnelt.
            </summary>
        </member>
        <member name="P:Atom.ErrorStrings.EntityNotPartOfAScene">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die The entity &apos;{0}&apos; is currently not part of any scene. ähnelt.
            </summary>
        </member>
        <member name="P:Atom.ErrorStrings.Error">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Error ähnelt.
            </summary>
        </member>
        <member name="P:Atom.ErrorStrings.ExpectedDifferentNumberOfElementsInStringXSeparatedByYGotZInsteadOfW">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Expected different number of elements in the string &apos;{0}&apos; separated by &apos;{1}&apos;. Got &apos;{2}&apos; instead of &apos;{3}&apos;. ähnelt.
            </summary>
        </member>
        <member name="P:Atom.ErrorStrings.Information">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Information ähnelt.
            </summary>
        </member>
        <member name="P:Atom.ErrorStrings.InvalidInternalNodeIndex">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Invalid Node. The node&apos;s internal node index is out of range. ähnelt.
            </summary>
        </member>
        <member name="P:Atom.ErrorStrings.InvalidNodePoolMismatch">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Invalid Node. The  Pool of the Atom.Collections.PoolNode doesn&apos;t equal this Pool. ähnelt.
            </summary>
        </member>
        <member name="P:Atom.ErrorStrings.InvalidOperationHeapIsEmpty">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die The Heap is empty. This is invalid for this operation. ähnelt.
            </summary>
        </member>
        <member name="P:Atom.ErrorStrings.InvalidStringFormatXWithSeparatorY">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Invalid string format. Expected a string in the format &apos;{0}&apos;, separated by &apos;{1}&apos;. ähnelt.
            </summary>
        </member>
        <member name="P:Atom.ErrorStrings.InvalidStringXFormatYWithSeparatorZ">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die The string &apos;{0}&apos; has an invalid format. The expected format &apos;{1}&apos;, separated by &apos;{2}&apos;. ähnelt.
            </summary>
        </member>
        <member name="P:Atom.ErrorStrings.ItemDoesNotFulfillPredicate">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die The item does not fulfill the predicate. ähnelt.
            </summary>
        </member>
        <member name="P:Atom.ErrorStrings.ListAlreadyConstainsSpecifiedItem">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die The list already contains the specified item. ähnelt.
            </summary>
        </member>
        <member name="P:Atom.ErrorStrings.MatrixDeleteOnlyColumn">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Can&apos;t delete the last column of the Matrix. ähnelt.
            </summary>
        </member>
        <member name="P:Atom.ErrorStrings.MatrixDeleteOnlyRow">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Can&apos;t delete the last row of the Matrix. ähnelt.
            </summary>
        </member>
        <member name="P:Atom.ErrorStrings.MaybeHasNoValue">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die This Maybe{T} instance has no value. ähnelt.
            </summary>
        </member>
        <member name="P:Atom.ErrorStrings.MissingInformation">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Missing Information ähnelt.
            </summary>
        </member>
        <member name="P:Atom.ErrorStrings.NotEnoughSpaceInSourceArray">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die The source array must have at least as many elements as the specified size. ähnelt.
            </summary>
        </member>
        <member name="P:Atom.ErrorStrings.NotEnoughSpaceInTargetArray">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die There is not enough space in the targeted array. ähnelt.
            </summary>
        </member>
        <member name="P:Atom.ErrorStrings.ObjectXDoesntImplementY">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die The object {0} doesn&apos;t implement &apos;{1}&apos;. This is required. ähnelt.
            </summary>
        </member>
        <member name="P:Atom.ErrorStrings.ParsingGivenStringXNotEnoughEntriesExpectedYHasZ">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die An error has occurred while parsing the given string &apos;{0}&apos;. Not enough entries. Expected &apos;{1}&apos;. Has &apos;{2}&apos;. ähnelt.
            </summary>
        </member>
        <member name="P:Atom.ErrorStrings.ServiceXNotFound">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die The service {0} could not be found. ähnelt.
            </summary>
        </member>
        <member name="P:Atom.ErrorStrings.SpecifiedEnumerableContainsNoElements">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die The specified IEnumerable doesn&apos;t contain any elements. This is required. ähnelt.
            </summary>
        </member>
        <member name="P:Atom.ErrorStrings.SpecifiedIndexIsInvalid">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die The specified index is invalid. ähnelt.
            </summary>
        </member>
        <member name="P:Atom.ErrorStrings.SpecifiedIndexIsOutOfValidRange">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die The specified index is out of valid range. ähnelt.
            </summary>
        </member>
        <member name="P:Atom.ErrorStrings.SpecifiedItemIsNull">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die The specified item is null. ähnelt.
            </summary>
        </member>
        <member name="P:Atom.ErrorStrings.SpecifiedValueIsInvalid">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die The specified value is invalid. ähnelt.
            </summary>
        </member>
        <member name="P:Atom.ErrorStrings.SpecifiedValueIsNaN">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die The specified value is Not a Number. This is invalid for this operation. ähnelt.
            </summary>
        </member>
        <member name="P:Atom.ErrorStrings.SpecifiedValueIsNegative">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die The specified value is negative. This is invalid for this operation. ähnelt.
            </summary>
        </member>
        <member name="P:Atom.ErrorStrings.SpecifiedValueIsZero">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die The specified value is zero. This is invalid for this operation. ähnelt.
            </summary>
        </member>
        <member name="P:Atom.ErrorStrings.SpecifiedValueIsZeroOrNegative">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die The specified value is zero or negative. This is invalid for this operation. ähnelt.
            </summary>
        </member>
        <member name="P:Atom.ErrorStrings.SpecifiedValueMustBeWithinRangeZeroOne">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die The specified value must be within the range zero .. one. ähnelt.
            </summary>
        </member>
        <member name="P:Atom.ErrorStrings.TheUnderlyingPropertyIsReadOnly">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die The underlying property is read-only. As such the value of the property can&apos;t be changed. ähnelt.
            </summary>
        </member>
        <member name="P:Atom.ErrorStrings.TypeHasNoPublicConstructors">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die The type &apos;{0}&apos; has no public constructors. This is required. ähnelt.
            </summary>
        </member>
        <member name="P:Atom.ErrorStrings.TypeHasNoPublicConstructorWithParameters">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die The type &apos;{0}&apos; has no public constructor with &apos;{1}&apos; parameters. This is required. ähnelt.
            </summary>
        </member>
        <member name="P:Atom.ErrorStrings.TypeNotSupportedByPropertyWrapper">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die The Type of the given Object is not supported by this IObjectPropertyWrapper. ähnelt.
            </summary>
        </member>
        <member name="P:Atom.ErrorStrings.TypeXDoesntImplementY">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die The type {0} doesn&apos;t implement &apos;{1}&apos;. This is required. ähnelt.
            </summary>
        </member>
        <member name="P:Atom.ErrorStrings.UnhandledExceptionHasOccurred">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die An unhandled exception has occurred. ähnelt.
            </summary>
        </member>
        <member name="P:Atom.ErrorStrings.VersionXOfTypeYIsNotSupportedExpectedZ">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Version &apos;{0}&apos; of type {1} is not supported. Expected &apos;{2}&apos;. ähnelt.
            </summary>
        </member>
        <member name="P:Atom.ErrorStrings.VersionXOfTypeYIsNotSupportedExpectedZToW">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Version &apos;{0}&apos; of type {1} is not supported. Expected &apos;{2} to {3}&apos;. ähnelt.
            </summary>
        </member>
        <member name="T:Atom.EventHandlerExtensions">
            <summary>
            Static class that contains extension methods for EventHandlers.
            </summary>
        </member>
        <member name="M:Atom.EventHandlerExtensions.Raise(System.EventHandler,System.Object,System.EventArgs)">
            <summary>
            Raises this EventHandler.
            </summary>
            <param name="eventHandler">
            The EventHandler to raise. Is allowed to be null.
            </param>
            <param name="sender">
            The source of the event.
            </param>
            <param name="e">
            The EventArgs that contain the event data.
            </param>
        </member>
        <member name="M:Atom.EventHandlerExtensions.Raise(System.EventHandler,System.Object)">
            <summary>
            Raises this EventHandler with <see cref="F:System.EventArgs.Empty"/>.
            </summary>
            <param name="eventHandler">
            The EventHandler to raise. Is allowed to be null.
            </param>
            <param name="sender">
            The source of the event.
            </param>
        </member>
        <member name="M:Atom.EventHandlerExtensions.Raise``1(Atom.SimpleEventHandler{``0},``0)">
            <summary>
            Raises this <see cref="T:Atom.SimpleEventHandler`1"/>.
            </summary>
            <typeparam name="TSender">
            The type of the object that raises the event.
            </typeparam>
            <param name="eventHandler">
            The SimpleEventHandler{TSender} to raise. Is allowed to be null.
            </param>
            <param name="sender">
            The source of the event.
            </param>
        </member>
        <member name="M:Atom.EventHandlerExtensions.Raise``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
            Raises this <see cref="T:System.EventHandler`1"/>.
            </summary>
            <typeparam name="TEventArgs">
            The type of the event data generated by the event.
            </typeparam>
            <param name="eventHandler">
            The EventHandler{TEventArgs} to raise. Is allowed to be null.
            </param>
            <param name="sender">
            The source of the event.
            </param>
            <param name="e">
            The EventArgs that contain the event data.
            </param>
        </member>
        <member name="M:Atom.EventHandlerExtensions.Raise``1(Atom.RelaxedEventHandler{``0},System.Object,``0)">
            <summary>
            Raises this <see cref="T:Atom.RelaxedEventHandler`1"/>.
            </summary>
            <typeparam name="TEventArgs">
            The type of the event data generated by the event.
            </typeparam>
            <param name="eventHandler">
            The RelaxedEventHandler{TEventArgs} to raise. Is allowed to be null.
            </param>
            <param name="sender">
            The source of the event.
            </param>
            <param name="e">
            The EventArgs that contain the event data.
            </param>
        </member>
        <member name="M:Atom.EventHandlerExtensions.Raise``2(Atom.RelaxedEventHandler{``0,``1},``0,``1)">
            <summary>
            Raises this <see cref="T:Atom.RelaxedEventHandler`2"/>.
            </summary>
            <typeparam name="TSender">
            The type of the object that raises the event.
            </typeparam>
            <typeparam name="TEventArgs">
            The type of the event data generated by the event.
            </typeparam>
            <param name="eventHandler">
            The RelaxedEventHandler{TSender, TEventArgs} to raise. Is allowed to be null.
            </param>
            <param name="sender">
            The source of the event.
            </param>
            <param name="e">
            The EventArgs that contain the event data.
            </param>
        </member>
        <member name="T:Atom.ExceptionExtensions">
            <summary>
            Defines extension methods for the <see cref="T:System.Exception"/> class.
            </summary>
        </member>
        <member name="M:Atom.ExceptionExtensions.PreserveStackTrace(System.Exception)">
            <summary>
            Preserves the stack trace of the given Exception;
            even if it is rethrown.
            </summary>
            <param name="ex">
            The exception which stack trace should be preserved.
            </param>
        </member>
        <member name="M:Atom.ExceptionExtensions.GetInternalPreserveStackTraceMethod">
            <summary>
            Uses reflection to return the internal InternalPreserveStackTrace method of the Exception class.
            </summary>
            <returns>
            The reflected method.
            </returns>
        </member>
        <member name="F:Atom.ExceptionExtensions.InternalPreserveStackTrace">
            <summary>
            An action delegate that caches the internal InternalPreserveStackTrace method of the Exception class.
            </summary>
        </member>
        <member name="T:Atom.InvalidExtensionException">
            <summary> 
            The exception that is thrown when an (file) extension is invalid.
            </summary>
        </member>
        <member name="M:Atom.InvalidExtensionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.InvalidExtensionException"/> class.
            </summary>
        </member>
        <member name="M:Atom.InvalidExtensionException.#ctor(System.String)">
            <summary> 
            Initializes a new instance of the <see cref="T:Atom.InvalidExtensionException"/> class and sets
            the error message to the specified <see cref="T:System.String"/>.
            </summary>
            <param name="message">
            The message that describes the error.
            </param>
        </member>
        <member name="M:Atom.InvalidExtensionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.InvalidExtensionException"/> class 
            with a specified error message and a reference 
            to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">
            The message that describes the error.
            </param>
            <param name="innerException">
            The exception that is cause of the new <see cref="T:Atom.InvalidExtensionException"/>.
            </param>
        </member>
        <member name="M:Atom.InvalidExtensionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> 
            Initializes a new instance of the <see cref="T:Atom.InvalidExtensionException"/> class, and
            passes the specified <see cref="T:System.Runtime.Serialization.SerializationInfo"/> and
            <see cref="T:System.Runtime.Serialization.StreamingContext"/> to the <see cref="T:System.Exception"/> constructor.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds
            the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that 
            contains contextual information about the source or destination.
            </param>
        </member>
        <member name="T:Atom.InvalidVersionException">
            <summary> 
            The exception that is thrown when version is invalid.
            </summary>
            <remarks>
            <see cref="M:Atom.ThrowHelper.InvalidVersion(System.Int32,System.Int32,System.Type)"/> and its variations
            can be used to make throwing this exception easier.
            </remarks>
        </member>
        <member name="M:Atom.InvalidVersionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.InvalidVersionException"/> class.
            </summary>
        </member>
        <member name="M:Atom.InvalidVersionException.#ctor(System.String)">
            <summary> 
            Initializes a new instance of the <see cref="T:Atom.InvalidVersionException"/> class and sets
            the error message to the specified <see cref="T:System.String"/>.
            </summary>
            <param name="message"> The message that describes the error. </param>
        </member>
        <member name="M:Atom.InvalidVersionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.InvalidVersionException"/> class 
            with a specified error message and a reference 
            to the inner exception that is the cause of this exception.
            </summary>
            <param name="message"> The message that describes the error. </param>
            <param name="innerException"> The exception that is cause of the new <see cref="T:Atom.InvalidVersionException"/>. </param>
        </member>
        <member name="M:Atom.InvalidVersionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> 
            Initializes a new instance of the <see cref="T:Atom.InvalidVersionException"/> class, and
            passes the specified <see cref="T:System.Runtime.Serialization.SerializationInfo"/> and
            <see cref="T:System.Runtime.Serialization.StreamingContext"/> to the <see cref="T:System.Exception"/> constructor.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds
            the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that 
            contains contextual information about the source or destination.
            </param>
        </member>
        <member name="T:Atom.NotFoundException">
            <summary> 
            The exception that is thrown when something couldn't be found.
            </summary>
        </member>
        <member name="M:Atom.NotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.NotFoundException"/> class.
            </summary>
        </member>
        <member name="M:Atom.NotFoundException.#ctor(System.String)">
            <summary> 
            Initializes a new instance of the <see cref="T:Atom.NotFoundException"/> class and sets
            the error message to the specified <see cref="T:System.String"/>.
            </summary>
            <param name="message"> The message that describes the error. </param>
        </member>
        <member name="M:Atom.NotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.NotFoundException"/> class 
            with a specified error message and a reference 
            to the inner exception that is the cause of this exception.
            </summary>
            <param name="message"> The message that describes the error. </param>
            <param name="innerException"> The exception that is cause of the new <see cref="T:Atom.NotFoundException"/>. </param>
        </member>
        <member name="M:Atom.NotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> 
            Initializes a new instance of the <see cref="T:Atom.NotFoundException"/> class, and
            passes the specified <see cref="T:System.Runtime.Serialization.SerializationInfo"/> and
            <see cref="T:System.Runtime.Serialization.StreamingContext"/> to the <see cref="T:System.Exception"/> constructor.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds
            the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that 
            contains contextual information about the source or destination.
            </param>
        </member>
        <member name="T:Atom.ServiceNotFoundException">
            <summary> 
            The exception that is thrown when a Service could not be found.
            </summary>
        </member>
        <member name="P:Atom.ServiceNotFoundException.ServiceType">
            <summary>
            Gets the type of the service which could not be found - if set.
            </summary>
            <value>The type of the service which could not be found - if set.</value>
        </member>
        <member name="M:Atom.ServiceNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.ServiceNotFoundException"/> class.
            </summary>
        </member>
        <member name="M:Atom.ServiceNotFoundException.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.ServiceNotFoundException"/> class.
            </summary>
            <param name="serviceType">
            The type of the service which could not be found.
            </param>
        </member>
        <member name="M:Atom.ServiceNotFoundException.#ctor(System.String,System.Type)">
            <summary> 
            Initializes a new instance of the <see cref="T:Atom.ServiceNotFoundException"/> class and sets
            the error message to the specified <see cref="T:System.String"/>.
            </summary>
            <param name="message"> The message that describes the error. </param>
            <param name="serviceType">
            The type of the service which could not be found.
            </param>
        </member>
        <member name="M:Atom.ServiceNotFoundException.#ctor(System.String,System.Type,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.ServiceNotFoundException"/> class 
            with a specified error message and a reference 
            to the inner exception that is the cause of this exception.
            </summary>
            <param name="message"> The message that describes the error. </param>
            <param name="serviceType">
            The type of the service which could not be found.
            </param>
            <param name="innerException">
            The exception that is cause of the new <see cref="T:Atom.ServiceNotFoundException"/>.
            </param>
        </member>
        <member name="M:Atom.ServiceNotFoundException.#ctor(System.String)">
            <summary> 
            Initializes a new instance of the <see cref="T:Atom.ServiceNotFoundException"/> class and sets
            the error message to the specified <see cref="T:System.String"/>.
            </summary>
            <param name="message"> The message that describes the error. </param>
        </member>
        <member name="M:Atom.ServiceNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.ServiceNotFoundException"/> class 
            with a specified error message and a reference 
            to the inner exception that is the cause of this exception.
            </summary>
            <param name="message"> The message that describes the error. </param>
            <param name="innerException"> The exception that is cause of the new <see cref="T:Atom.ServiceNotFoundException"/>. </param>
        </member>
        <member name="M:Atom.ServiceNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> 
            Initializes a new instance of the <see cref="T:Atom.ServiceNotFoundException"/> class, and
            passes the specified <see cref="T:System.Runtime.Serialization.SerializationInfo"/> and
            <see cref="T:System.Runtime.Serialization.StreamingContext"/> to the <see cref="T:System.Exception"/> constructor.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds
            the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that 
            contains contextual information about the source or destination.
            </param>
        </member>
        <member name="M:Atom.ServiceNotFoundException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the System.Runtime.Serialization.SerializationInfo
            with information about the exception.
            </summary>
            <param name="info">
            The System.Runtime.Serialization.SerializationInfo that holds the serialized
            object data about the exception being thrown.
            </param>
            <param name="context">
            The System.Runtime.Serialization.StreamingContext that contains contextual
            information about the source or destination.
            </param>
            <exception cref="T:System.ArgumentNullException">
            The info parameter is a null reference (Nothing in Visual Basic).
            </exception>
        </member>
        <member name="M:Atom.ServiceNotFoundException.GetMessage(System.Type)">
            <summary>
            Gets the message to show for the given <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">
            The type of the service that was not found.
            </param>
            <returns>
            A human-readable error message string.
            </returns>
        </member>
        <member name="F:Atom.ServiceNotFoundException.serviceType">
            <summary>
            Represents the storage field of the <see cref="P:Atom.ServiceNotFoundException.ServiceType"/> property.
            </summary>
        </member>
        <member name="T:Atom.ThrowHelper">
            <summary>
            Defines static methods that make it easier to throw exceptions.
            </summary>
        </member>
        <member name="M:Atom.ThrowHelper.InvalidVersion(System.Int32,System.Int32,System.Type)">
            <summary>
            Throws an <see cref="T:Atom.InvalidVersionException"/> when the given <paramref name="version"/> 
            is not equal to the given <paramref name="expectedVersion"/>.
            </summary>
            <param name="version">
            The version.
            </param>
            <param name="expectedVersion">
            The expected version.
            </param>
            <param name="type">
            The type the version is related to.
            </param>
            <exception cref="T:Atom.InvalidVersionException">
            If the <paramref name="version"/> is not equal to the <paramref name="expectedVersion"/>.
            </exception>
        </member>
        <member name="M:Atom.ThrowHelper.InvalidVersion(System.Int32,System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:Atom.InvalidVersionException"/> when the given <paramref name="version"/> 
            is not equal to the given <paramref name="expectedVersion"/>.
            </summary>
            <param name="version">
            The version.
            </param>
            <param name="expectedVersion">
            The expected version.
            </param>
            <param name="typeName">
            The name of the type the version is related to.
            </param>
            <exception cref="T:Atom.InvalidVersionException">
            If the <paramref name="version"/> is not equal to the <paramref name="expectedVersion"/>.
            </exception>
        </member>
        <member name="M:Atom.ThrowHelper.InvalidVersion(System.Int32,System.Int32,System.Int32,System.Type)">
            <summary>
            Throws an <see cref="T:Atom.InvalidVersionException"/>
            when the given <paramref name="version"/> is not vailid.
            </summary>
            <param name="version">
            The version.
            </param>
            <param name="expectedVersionStart">
            The start range of allowed versions.
            </param>
            <param name="expectedVersionEnd">
            The end range of allowed versions.
            </param>
            <param name="type">
            The type the version is related to.
            </param>
            <exception cref="T:Atom.InvalidVersionException">
            If the <paramref name="version"/> is not greater equal to <paramref name="expectedVersionStart"/> and
            lesser equal to <paramref name="expectedVersionEnd"/>.
            </exception>
        </member>
        <member name="M:Atom.ThrowHelper.InvalidVersion(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:Atom.InvalidVersionException"/>
            when the given <paramref name="version"/> is not valid.
            </summary>
            <param name="version">
            The version.
            </param>
            <param name="expectedVersionStart">
            The start range of allowed versions.
            </param>
            <param name="expectedVersionEnd">
            The end range of allowed versions.
            </param>
            <param name="typeName">
            The name of the type the version is related to.
            </param>
            <exception cref="T:Atom.InvalidVersionException">
            If the <paramref name="version"/> is not greater equal to <paramref name="expectedVersionStart"/> and
            lesser equal to <paramref name="expectedVersionEnd"/>.
            </exception>
        </member>
        <member name="M:Atom.ThrowHelper.IfComponentNull``1(``0)">
            <summary>
            Throws an exception if the specifies Component is null.
            </summary>
            <typeparam name="TComponent">
            The type of the component to verify.
            </typeparam>
            <param name="component">
            The component to verify.
            </param>
        </member>
        <member name="M:Atom.ThrowHelper.IfServiceNull``1(``0)">
            <summary>
            Throws an <see cref="T:Atom.ServiceNotFoundException"/> if the specified <paramref name="service"/> is null.
            </summary>
            <typeparam name="TService">
            The type of the service to verify.
            </typeparam>
            <param name="service">
            The service to verify.
            </param>
        </member>
        <member name="M:Atom.ThrowHelper.IfServiceNull``1(``0,System.String)">
            <summary>
            Throws an <see cref="T:Atom.ServiceNotFoundException"/> if the specified <paramref name="service"/> is null.
            </summary>
            <typeparam name="TService">
            The type of the service to verify.
            </typeparam>
            <param name="service">
            The service to verify.
            </param>
            <param name="message">
            The additional message to display.
            </param>
        </member>
        <member name="T:Atom.ICultureSensitiveToStringProvider">
            <summary>
            Provides a mechanism that allows to receive a
            culture-sensitive string representation of the object.
            </summary>
        </member>
        <member name="M:Atom.ICultureSensitiveToStringProvider.ToString(System.IFormatProvider)">
            <summary>
            Returns a human-readable version of the object
            using culture sensitive formatting.
            </summary>
            <param name="formatProvider">
            Provides access to culture sensitive formatting information.
            </param>
            <returns>
            A string that represents this object.
            </returns>
        </member>
        <member name="T:Atom.GlobalServices">
            <summary>
            Provides access to globally accessable services.
            </summary>
        </member>
        <member name="P:Atom.GlobalServices.Container">
            <summary>
            Gets or sets the object which stores the globally accessable services.
            </summary>
            <value>A reference to the ServiceContainer object managed by the GlobalServices class.</value>
        </member>
        <member name="M:Atom.GlobalServices.GetService``1">
            <summary>
            Gets the requested service.
            </summary>
            <typeparam name="TService">
            The type of the service to receive.
            </typeparam>
            <exception cref="T:Atom.ServiceNotFoundException">
            If the service could not be found.
            </exception>
            <returns>
            The requested service.
            </returns>
        </member>
        <member name="M:Atom.GlobalServices.GetService``1(System.String)">
            <summary>
            Gets the requested service.
            </summary>
            <typeparam name="TService">
            The type of the service to receive.
            </typeparam>
            <exception cref="T:Atom.ServiceNotFoundException">
            If the service could not be found.
            </exception>
            <param name="errorMessage">
            The error message to display when the service could not be found.
            </param>
            <returns>
            The requested service.
            </returns>
        </member>
        <member name="M:Atom.GlobalServices.TryGetService(System.Type)">
            <summary>
            Tries to get the requested service.
            </summary>
            <param name="service">The type of the service to get.</param>
            <returns>
            An instance of the service if it could be found, 
            or null if it could not be found.
            </returns>
        </member>
        <member name="M:Atom.GlobalServices.TryGetService``1">
            <summary>
            Tries to get the requested service.
            </summary>
            <typeparam name="TService">
            The type of the service to receive.
            </typeparam>
            <returns>
            An instance of the service if it could be found, 
            or null if it could not be found.
            </returns>
        </member>
        <member name="M:Atom.GlobalServices.TryLog(System.String)">
            <summary>
            Helpers method that tries to find an <see cref="T:Atom.Diagnostics.ILogProvider"/>
            to log the given <paramref name="message"/>.
            </summary>
            <param name="message">
            The message to log.
            </param>
        </member>
        <member name="F:Atom.GlobalServices.container">
            <summary>
            The container object.
            </summary>
        </member>
        <member name="T:Atom.HashCodeBuilder">
            <summary>
            Provides an mechanism that allows the creation of
            hashcodes that exist of multiple independent objects
            of the same type.
            </summary>
        </member>
        <member name="M:Atom.HashCodeBuilder.Append``1(``0)">
            <summary>
            Appends the hashcode of the specified Object to this HashCodeBuilder.
            </summary>
            <typeparam name="T">
            The type of the object to append.
            </typeparam>
            <param name="obj">
            The object to append. Can be null.
            </param>
        </member>
        <member name="M:Atom.HashCodeBuilder.AppendStruct``1(``0)">
            <summary>
            Appends the hashcode of the specified structure to this HashCodeBuilder.
            </summary>
            <typeparam name="T">
            The type of the structure to append.
            </typeparam>
            <param name="obj">
            The structure to append.
            </param>
        </member>
        <member name="M:Atom.HashCodeBuilder.AppendHashCode(System.Int32)">
            <summary>
            Appends the specified hashcode to this HashCodeBuilder.
            </summary>
            <param name="hashCode">
            The hashcode to append.
            </param>
        </member>
        <member name="M:Atom.HashCodeBuilder.GetHashCode">
            <summary>
            Gets the hashcode that has been calculated by this HashCodeBuilder{T}.
            </summary>
            <returns>
            The current hashcode.
            </returns>
        </member>
        <member name="F:Atom.HashCodeBuilder.hash">
            <summary>
            Stores the hashcode that has been build up
            so far using this HashCodeBuilder{T}. 
            </summary>
        </member>
        <member name="T:Atom.IConverter`2">
            <summary>
            Provides a mechanism for converting values between two types.
            </summary>
            <typeparam name="Source">
            The first type.
            </typeparam>
            <typeparam name="Target">
            The second type.
            </typeparam>
        </member>
        <member name="M:Atom.IConverter`2.ConvertTo(`0)">
            <summary>
            Attempts to convert the given <typeparamref name="Source"/> value into
            the <typeparamref name="Target"/> value.
            </summary>
            <param name="value">
            The input <typeparamref name="Source"/> value.
            </param>
            <returns>
            The output <typeparamref name="Target"/> value.
            </returns>
        </member>
        <member name="M:Atom.IConverter`2.ConvertFrom(`1)">
            <summary>
            Attempts to convert the given <typeparamref name="Target"/> value into
            the <typeparamref name="Source"/> value.
            </summary>
            <param name="value">
            The input <typeparamref name="Target"/> value.
            </param>
            <returns>
            The output <typeparamref name="Source"/> value.
            </returns>
        </member>
        <member name="T:Atom.IDrawable">
            <summary>
            Provides the mechanism of drawing an object.
            </summary>
        </member>
        <member name="M:Atom.IDrawable.Draw(Atom.IDrawContext)">
            <summary>
            Draws this IDrawable.
            </summary>
            <param name="drawContext">
            The current <see cref="T:Atom.IDrawContext"/>.
            </param>
        </member>
        <member name="T:Atom.IDrawContext">
            <summary>
            Provides information about the current context an object is draw in.
            </summary>
            <remarks>
            Usually an IDrawContext is passed to the Draw method of various objects.
            </remarks>
            <seealso cref="T:Atom.IDrawable"/>
        </member>
        <member name="T:Atom.IIsDisposable">
            <summary>
            Defines a method to release allocated resources, and receive
            a value indicating whether this has been done.
            </summary>
        </member>
        <member name="P:Atom.IIsDisposable.IsDisposed">
            <summary>
            Gets a value indicating whether this <see cref="T:System.IDisposable"/> object
            has been disposed.
            </summary>
        </member>
        <member name="T:Atom.INameable">
            <summary>
            Provides a merchanism to get or sets the name of the object.
            </summary>
        </member>
        <member name="P:Atom.INameable.Name">
            <summary>
            Gets or sets the name of the named object.
            </summary>
            <value>The (usually unique) name of the object.</value>
        </member>
        <member name="T:Atom.IOwnedBy">
            <summary>
            Represents an object that is owned by another object.
            </summary>
        </member>
        <member name="P:Atom.IOwnedBy.Owner">
            <summary>
            Gets or sets the object that owns this object.
            </summary>
        </member>
        <member name="T:Atom.IOwnedBy`1">
            <summary>
            Represents an object that is owned by another object.
            </summary>
            <typeparam name="TOwner">
            The type of the owner.
            </typeparam>
        </member>
        <member name="P:Atom.IOwnedBy`1.Owner">
            <summary>
            Gets or sets the object that owns this object.
            </summary>
        </member>
        <member name="T:Atom.IPreUpdateable">
            <summary>
            Provides the mechanism of updating an object
            before another update.
            </summary>
            <remarks>
            Usually objects that implement the <see cref="T:Atom.IUpdateable"/> interface 
            may also implement the <see cref="T:Atom.IPreUpdateable"/> interface;
            but not the other way around.
            </remarks>
            <seealso cref="T:Atom.IUpdateable"/>
        </member>
        <member name="M:Atom.IPreUpdateable.PreUpdate(Atom.IUpdateContext)">
            <summary>
            Updates this IUpdateable.
            </summary>
            <param name="updateContext">
            The current <see cref="T:Atom.IUpdateContext"/>.
            </param>
        </member>
        <member name="T:Atom.IReadOnlyNameable">
            <summary>
            Provides a merchanism to get the name of the object.
            </summary>
        </member>
        <member name="P:Atom.IReadOnlyNameable.Name">
            <summary>
            Gets the name name of the object.
            </summary>
            <value>The (usually unique) name of the object.</value>
        </member>
        <member name="T:Atom.IUpdateable">
            <summary>
            Provides the mechanism of updating an object.
            </summary>
            <seealso cref="T:Atom.IPreUpdateable"/>
        </member>
        <member name="M:Atom.IUpdateable.Update(Atom.IUpdateContext)">
            <summary>
            Updates this IUpdateable.
            </summary>
            <param name="updateContext">
            The current <see cref="T:Atom.IUpdateContext"/>.
            </param>
        </member>
        <member name="T:Atom.IUpdateContext">
            <summary>
            Provides information about the current context an object is updated in.
            </summary>
            <remarks>
            Usually an IUpdateContext is passed to the Update method of various objects.
            </remarks>
            <seealso cref="T:Atom.IUpdateable"/>
            <seealso cref="T:Atom.IPreUpdateable"/>
        </member>
        <member name="P:Atom.IUpdateContext.FrameTime">
            <summary>
            Gets the time the last frame took to execute (in seconds).
            </summary>
            <value>
            The time the last frame took to execute (in seconds).
            </value>
        </member>
        <member name="T:Atom.IOUtilities">
            <summary>
            Defines static I/O-related utility methods.
            </summary>
        </member>
        <member name="M:Atom.IOUtilities.CopyStream(System.IO.Stream,System.IO.Stream)">
            <summary>
            Copies the complete content of the given <paramref name="input"/> <see cref="T:System.IO.Stream"/>
            into the given <paramref name="output"/> <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="input">
            The source stream.
            </param>
            <param name="output">
            The target stream.
            </param>
        </member>
        <member name="T:Atom.IStringConverter">
            <summary>
            Provides a mechanism for converting values to and from strings.
            </summary>
        </member>
        <member name="M:Atom.IStringConverter.ConvertToString(System.Object)">
            <summary>
            Attempts to convert the given source object into a string.
            </summary>
            <param name="value">
            The input source value.
            </param>
            <returns>
            The output value.
            </returns>
        </member>
        <member name="M:Atom.IStringConverter.ConvertFromString(System.String,System.Type)">
            <summary>
            Attempts to convert the given target string value into
            the a source value.
            </summary>
            <param name="value">
            The input target value, encoded in a string.
            </param>
            <param name="targetType">
            The type the target value encodes.
            </param>
            <returns>
            The output source value.
            </returns>
        </member>
        <member name="T:Atom.ITypeActivator">
            <summary>
            Provides a mechanism that creates new objects given a type name.
            </summary>
        </member>
        <member name="M:Atom.ITypeActivator.CreateInstance(System.String)">
            <summary>
            Creates an instance of the type with the given typeName.
            </summary>
            <param name="typeName">
            The name that uniquely identifies the type to initiate.
            </param>
            <returns>
            The object that has been created.
            </returns>
        </member>
        <member name="T:Atom.ManagedDisposable">
            <summary>
            Represents an abstract base class that implements the IDisposable pattern.
            </summary>
            <seealso cref="T:Atom.UnmanagedDisposable"/>
        </member>
        <member name="P:Atom.ManagedDisposable.IsDisposed">
            <summary>
            Gets a value indicating whether this <see cref="T:System.IDisposable"/> object
            has been disposed.
            </summary>
        </member>
        <member name="M:Atom.ManagedDisposable.#ctor">
            <summary>
            Initializes a new instance of the ManagedDisposable class.
            </summary>
        </member>
        <member name="M:Atom.ManagedDisposable.Dispose">
            <summary>
            Immediately releases all managed and unmanaged resources this IDisposable object
            has aquired.
            </summary>
        </member>
        <member name="M:Atom.ManagedDisposable.Dispose(System.Boolean)">
            <summary>
            Releases all resources this IDisposable object has aquired.
            </summary>
            <param name="releaseManaged">
            States whether managed resources should be disposed.
            </param>
        </member>
        <member name="M:Atom.ManagedDisposable.DisposeManagedResources">
            <summary>
            Releases all managed resources.
            </summary>
        </member>
        <member name="M:Atom.ManagedDisposable.DisposeUnmanagedResources">
            <summary>
            Releases all unmanaged resources. Umanaged resources are disposed before managed resources.
            </summary>
        </member>
        <member name="M:Atom.ManagedDisposable.ThrowIfDisposed">
            <summary>
            Throws a new <see cref="T:System.ObjectDisposedException"/> if this ManagedDisposable object has
            been disposed.
            </summary>
        </member>
        <member name="F:Atom.ManagedDisposable.disposeState">
            <summary>
            Stores whether the resources of IDisposable object have been released.
            </summary>
        </member>
        <member name="T:Atom.Math.IRand">
            <summary>
            Provides a mechanism to receive various pseudo-random numbers.
            </summary>
            <remarks>
            The default constructor of an object implementing this interface
            should seed itself with the current time.
            </remarks>
        </member>
        <member name="P:Atom.Math.IRand.RandomBoolean">
            <summary>
            Gets a random boolean state value.
            </summary>
            <value>
            Returns <see langword="true"/> 50% of the time,
            and <see langword="false"/> the other 50%.
            </value>
        </member>
        <member name="P:Atom.Math.IRand.RandomInteger">
            <summary>
            Gets a random number in the interval [0,0x7fffffff].
            </summary>
            <value>A random integer.</value>
        </member>
        <member name="P:Atom.Math.IRand.RandomSingle">
            <summary>
            Gets a random number in the interval [0.0, 1.0].
            </summary>
            <value>A random single-precision floating point value.</value>
        </member>
        <member name="P:Atom.Math.IRand.RandomDouble">
            <summary>
            Gets a random number in the interval [0.0, 1.0].
            </summary>
            <value>A random double-precision floating point value.</value>
        </member>
        <member name="P:Atom.Math.IRand.RandomDecimal">
            <summary>
            Gets a random number in the interval [0.0, 1.0].
            </summary>
            <value>A random decimal value.</value>
        </member>
        <member name="T:Atom.Math.RandListExtensions">
            <summary>
            Defines extension methods related to randomly selecting elements from IList{T}s.
            </summary>
        </member>
        <member name="M:Atom.Math.RandListExtensions.RandomOrDefault``1(System.Collections.Generic.IList{``0},Atom.Math.IRand)">
            <summary>
            Gets a random element of the given collection.
            </summary>
            <typeparam name="T">
            The type of element in the list.
            </typeparam>
            <param name="list">
            The list to query.
            </param>
            <param name="rand">
            The random number generator to use.
            </param>
            <returns>
            A random item from the given list or the default value of T if the given list is empty.
            </returns>
        </member>
        <member name="T:Atom.Math.RandRangeExtensions">
            <summary>
            Defines extension methods for the <see cref="T:Atom.Math.IRand"/> interface
            that make it easier to get a random value within a specific range.
            </summary>
        </member>
        <member name="M:Atom.Math.RandRangeExtensions.RandomRange(Atom.Math.IRand,System.Int32,System.Int32)">
            <summary>
            Returns a random integer within the specified range.
            </summary>
            <param name="rand">The random number generator to use.</param>
            <param name="minimumValue"> The lower bound. </param>
            <param name="maximumValue"> The upper bound. </param>
            <exception cref="T:System.OverflowException">If an overflow has occured.</exception>
            <returns> 
            A random integer greater than or equal to <c>minimumValue</c>, and less than
            or equal to <c>maximumValue</c>. 
            </returns>
        </member>
        <member name="M:Atom.Math.RandRangeExtensions.RandomRange(Atom.Math.IRand,System.Int64,System.Int64)">
            <summary>
            Returns a random long integer within the specified range.
            </summary>
            <param name="rand">The random number generator to use.</param>
            <param name="minimumValue"> The lower bound. </param>
            <param name="maximumValue"> The upper bound. </param>
            <exception cref="T:System.OverflowException">If an overflow has occured.</exception>
            <returns> 
            A random integer greater than or equal to <c>minimumValue</c>, and less than
            or equal to <c>maximumValue</c>. 
            </returns>
        </member>
        <member name="M:Atom.Math.RandRangeExtensions.RandomRange(Atom.Math.IRand,System.UInt32,System.UInt32)">
            <summary>
            Returns a random integer within the specified range.
            </summary>
            <exception cref="T:System.OverflowException">If an overflow has occured.</exception>
            <param name="rand">The random number generator to use.</param>
            <param name="minimumValue"> The lower bound. </param>
            <param name="maximumValue"> The upper bound. </param>
            <returns> 
            A random integer greater than or equal to <c>minimumValue</c>, and less than
            or equal to <c>maximumValue</c>. 
            </returns>
        </member>
        <member name="M:Atom.Math.RandRangeExtensions.RandomRange(Atom.Math.IRand,System.Single,System.Single)">
            <summary>
            Returns a random floating point value within the specified range.
            </summary>
            <param name="rand">The random number generator to use.</param>
            <param name="minimumValue"> The lower bound. </param>
            <param name="maximumValue"> The upper bound. </param>
            <returns>
            A random single-precision floating-point greater than or equal to <c>minimumValue</c>, and less than
            or equal to <c>maximumValue</c>. 
            </returns>
        </member>
        <member name="M:Atom.Math.RandRangeExtensions.RandomRange(Atom.Math.IRand,System.Double,System.Double)">
            <summary>
            Returns a random floating point value within the specified range.
            </summary>
            <param name="rand">The random number generator to use.</param>
            <param name="minimumValue"> The lower bound. </param>
            <param name="maximumValue"> The upper bound. </param>
            <returns> 
            A random double-precision floating-point value greater than or equal to <c>minimumValue</c>, and less than
            or equal to <c>maximumValue</c>. 
            </returns>
        </member>
        <member name="M:Atom.Math.RandRangeExtensions.RandomRange(Atom.Math.IRand,System.Decimal,System.Decimal)">
            <summary>
            Returns a random floating point value within the specified range.
            </summary>
            <param name="rand">The random number generator to use.</param>
            <param name="minimumValue"> The lower bound. </param>
            <param name="maximumValue"> The upper bound. </param>
            <returns> 
            A random decimal greater than or equal to <c>minimumValue</c>, and less than
            or equal to <c>maximumValue</c>.
            </returns>
        </member>
        <member name="M:Atom.Math.RandRangeExtensions.UncheckedRandomRange(Atom.Math.IRand,System.Single,System.Single)">
            <summary>
            Returns a random floating point value within the specified range,
            doesn't check whether the given minimumValue and maximumValue are in the right order of minimumValue &lt;= maximumValue.
            </summary>
            <param name="rand">The random number generator to use.</param>
            <param name="minimumValue"> The lower bound. </param>
            <param name="maximumValue"> The upper bound. </param>
            <returns>
            A random integer greater than or equal to <c>minimumValue</c>, and less than
            or equal to <c>maximumValue</c>. 
            </returns>
        </member>
        <member name="M:Atom.Math.RandRangeExtensions.UncheckedRandomRange(Atom.Math.IRand,System.Int32,System.Int32)">
            <summary>
            Returns a random floating point value within the specified range,
            doesn't check whether the given minimumValue and maximumValue are in the right order of minimumValue &lt;= maximumValue.
            </summary>
            <param name="rand">The random number generator to use.</param>
            <param name="minimumValue"> The lower bound. </param>
            <param name="maximumValue"> The upper bound. </param>
            <returns>
            A random integer greater than or equal to <c>minimumValue</c>, and less than
            or equal to <c>maximumValue</c>. 
            </returns>
        </member>
        <member name="T:Atom.Maybe">
            <summary>
            Provides static utility method for the <see cref="T:Atom.Maybe`1"/> structure.
            </summary>
        </member>
        <member name="M:Atom.Maybe.None``1">
            <summary>
            Gets an instance of the Maybe monad that contains "No Value".
            </summary>
            <typeparam name="T">
            The type of the value.
            </typeparam>
            <returns>
            The instance of the Maybe monad.
            </returns>
        </member>
        <member name="M:Atom.Maybe.Some``1(``0)">
            <summary>
            Gets an instance of the Maybe monad that contains
            the specified <paramref name="value"/>.
            </summary>
            <typeparam name="T">
            The type of the value.
            </typeparam>
            <param name="value">
            The value that the new instance of the Maybe monad
            should have.
            </param>
            <returns>
            The instance of the Maybe monad.
            </returns>
        </member>
        <member name="T:Atom.Maybe`1">
            <summary>
            Represents an inmutable value that might or might not have any value.
            </summary>
            <typeparam name="T">
            The type of the actual value.
            </typeparam>
        </member>
        <member name="F:Atom.Maybe`1.None">
            <summary>
            Represents an empty instance of type <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="P:Atom.Maybe`1.Value">
            <summary>
            Gets the underlying value, if it is available.
            </summary>
        </member>
        <member name="P:Atom.Maybe`1.HasValue">
            <summary>
            Gets a value indicating whether this instance has value.
            </summary>
            <value>
            <c>true</c> if this instance has value; otherwise, 
            <c>false</c>.
            </value>
        </member>
        <member name="M:Atom.Maybe`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the Maybe{T} structure.
            </summary>
            <param name="value">
            The actual value.
            </param>
        </member>
        <member name="M:Atom.Maybe`1.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object.
            </summary>
            <param name="obj">
            An object to compare with this object.
            </param>
            <returns>
            true if the current object is equal to the other parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Atom.Maybe`1.Equals(Atom.Maybe{`0})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">
            An object to compare with this object.
            </param>
            <returns>
            true if the current object is equal to the other parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Atom.Maybe`1.GetHashCode">
            <summary>
            Returns the hashcode of this Maybe{T} instance.
            </summary>
            <returns>
            The hashcode.
            </returns>
        </member>
        <member name="F:Atom.Maybe`1.value">
            <summary>
            Represents the storage field of the <see cref="P:Atom.Maybe`1.Value"/> property.
            </summary>
        </member>
        <member name="F:Atom.Maybe`1.hasValue">
            <summary>
            Represents the storage field of the <see cref="P:Atom.Maybe`1.HasValue"/> property.
            </summary>
        </member>
        <member name="T:Atom.NameOf`1">
            <summary>
            Implements a fluid operator that receives the
            name of various elements of a type.
            </summary>
            <typeparam name="T">
            The type to inspect.
            </typeparam>
        </member>
        <member name="M:Atom.NameOf`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Gets the name of a property of the type <typeparamref name="T"/>.
            </summary>
            <example>
            <code>
            string name = NameOf&lt;String&gt;.Property( e => e.Length );
            Assert.Equal( "Length", name );
            </code>
            </example>
            <typeparam name="TProperty">
            The type of the property.
            </typeparam>
            <param name="expression">
            The expression that returns the property.
            </param>
            <returns>
            The name of the property.
            </returns>
        </member>
        <member name="T:Atom.Patterns.Provider.DirectObjectProvider`1">
            <summary>
            Represents an <see cref="T:Atom.IObjectProvider`1"/> that provides an object
            specified upon construction.
            </summary>
            <typeparam name="TObject"></typeparam>
        </member>
        <member name="M:Atom.Patterns.Provider.DirectObjectProvider`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the DirectObjectProvider{TObject} class.
            </summary>
            <param name="obj">
            The object the new DirectObjectProvider{TObject} provides.
            </param>
        </member>
        <member name="M:Atom.Patterns.Provider.DirectObjectProvider`1.TryResolve">
            <summary>
            Attempts to get the object this IObjectProvider{TObject}
            provides.
            </summary>
            <returns>
            The object this IObjectProvider{TObject} provides;
            -or- null if this IObjectProvider{TObject} does not provide any object at the moment.
            </returns>
        </member>
        <member name="F:Atom.Patterns.Provider.DirectObjectProvider`1.obj">
            <summary>
            The object this DirectObjectProvider{TObject} provides.
            </summary>
        </member>
        <member name="T:Atom.Patterns.Provider.IObjectProviderContainerRegistrar">
            <summary>
            Provides a mechanism for receiving and registering <see cref="T:Atom.IObjectProvider`1"/> instances.
            </summary>
        </member>
        <member name="M:Atom.Patterns.Provider.IObjectProviderContainerRegistrar.Register``1(Atom.IObjectProvider{``0})">
            <summary>
            Registers the specified IObjectProvider for the specified <typeparamref name="TObject"/>
            </summary>
            <typeparam name="TObject">
            The type of object for which an IObjectProvider should be registered.
            </typeparam>
            <param name="provider">
            The provider to register.
            </param>
        </member>
        <member name="T:Atom.Patterns.Provider.LambdaObjectProvider`1">
            <summary>
            Implements an <see cref="T:Atom.IObjectProvider`1"/> that delegates the resolving
            of the object into delegate / lambda function.
            </summary>
            <typeparam name="TObject">
            The type of the object this IObjectProvider{TObject} provides.
            </typeparam>
        </member>
        <member name="M:Atom.Patterns.Provider.LambdaObjectProvider`1.#ctor(System.Func{`0})">
            <summary>
            Initializes a new instance of the LambdaObjectProvider class.
            </summary>
            <param name="lambda">
            The function that is used to resolve the object.
            </param>
        </member>
        <member name="M:Atom.Patterns.Provider.LambdaObjectProvider`1.#ctor(System.Func{Atom.IObjectProviderContainer,`0},Atom.IObjectProviderContainer)">
            <summary>
            Initializes a new instance of the LambdaObjectProvider class.
            </summary>
            <param name="lambda">
            The function that is used to resolve the object.
            </param>
            <param name="container">
            The container that can be used by the lambda to further resolve different objects.
            </param>
        </member>
        <member name="M:Atom.Patterns.Provider.LambdaObjectProvider`1.TryResolve">
            <summary>
            Gets the object this IObjectProvider{TObject}.
            </summary>
            <returns>
            The object this IObjectProvider{TObject} provides.
            </returns>
        </member>
        <member name="F:Atom.Patterns.Provider.LambdaObjectProvider`1.lambda">
            <summary>
            The function that is used to resolve the object.
            </summary>
        </member>
        <member name="F:Atom.Patterns.Provider.LambdaObjectProvider`1.container">
            <summary>
            The container that can be used by the lambda to further resolve different objects.
            </summary>
        </member>
        <member name="T:Atom.Patterns.Provider.ObjectProviderContainer">
            <summary>
            Implements a mechanism for receiving and registering <see cref="T:Atom.IObjectProvider`1"/> instances.
            </summary>
        </member>
        <member name="M:Atom.Patterns.Provider.ObjectProviderContainer.TryGetObjectProvider(System.Type)">
            <summary>
            Attempts to receive the IObjectProvider for the specified object type.
            </summary>
            <param name="type">
            The type of object for which an IObjectProvider should be requested.
            </param>
            <returns>
            The associated IObjectProvider; -or- null if no IObjectProvider has been registered
            at this IObjectProviderContainer for the specified <see cref="T:System.Type"/>.
            </returns>
        </member>
        <member name="M:Atom.Patterns.Provider.ObjectProviderContainer.Register``1(Atom.IObjectProvider{``0})">
            <summary>
            Registers the specified IObjectProvider for the specified <typeparamref name="TObject"/>
            </summary>
            <typeparam name="TObject">
            The type of object for which an IObjectProvider should be registered.
            </typeparam>
            <param name="provider">
            The provider to register.
            </param>
        </member>
        <member name="F:Atom.Patterns.Provider.ObjectProviderContainer.map">
            <summary>
            The dictionary that maps object types onto IObjectProviders.
            </summary>
        </member>
        <member name="T:Atom.Patterns.Visitor.CountingVisitor`1">
            <summary>
            An <see cref="T:Atom.Patterns.Visitor.IVisitor`1"/> that counts the items it visits.
            This class can't be inherited.
            </summary>
            <typeparam name="T">
            The type of items that can be visited by this visitor.
            </typeparam>
        </member>
        <member name="P:Atom.Patterns.Visitor.CountingVisitor`1.HasCompleted">
            <summary>
            Gets a value indicating whether this CountingVisitor{T} is done performing its work.
            </summary>
            <value>
            Always return <see langword="false"/>.
            </value>
        </member>
        <member name="P:Atom.Patterns.Visitor.CountingVisitor`1.Count">
            <summary>
            Gets the number of items that have been visited by this CountingVisitor{T}.
            </summary>
            <value>
            The number of items that have been visited.
            </value>
        </member>
        <member name="M:Atom.Patterns.Visitor.CountingVisitor`1.Visit(`0)">
            <summary>
            Visits the specified object.
            </summary>
            <param name="obj">The object to visit.</param>
        </member>
        <member name="M:Atom.Patterns.Visitor.CountingVisitor`1.Reset">
            <summary>
            Resets the number of items that have been
            visited by this CountingVisitor{T}.
            </summary>
        </member>
        <member name="F:Atom.Patterns.Visitor.CountingVisitor`1.count">
            <summary>
            The number of items that have been visited by this CountingVisitor{T}.
            </summary>
        </member>
        <member name="T:Atom.Patterns.Visitor.EmptyVisitor`1">
            <summary>
            Represents an <see cref="T:Atom.Patterns.Visitor.IVisitor`1"/> that does absolutely nothing.
            This class can't be inherited.
            </summary>
            <typeparam name="T">
            The type of items visitable by the visitor.
            </typeparam>
            <remarks>
            The <see cref="P:Atom.Patterns.Visitor.EmptyVisitor`1.Instance"/> property can be used to avoid creation.
            </remarks>
        </member>
        <member name="P:Atom.Patterns.Visitor.EmptyVisitor`1.Instance">
            <summary>
            Gets the singleton instance of the <see cref="T:Atom.Patterns.Visitor.EmptyVisitor`1"/> class.
            </summary>
        </member>
        <member name="M:Atom.Patterns.Visitor.EmptyVisitor`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Patterns.Visitor.EmptyVisitor`1"/> class.
            </summary>
        </member>
        <member name="P:Atom.Patterns.Visitor.EmptyVisitor`1.HasCompleted">
            <summary>
            Gets a value indicating whether this IVisitor{T} is done performing it's work..
            </summary>
            <value>
            Always returns <see langword="false"/>.
            </value>
        </member>
        <member name="M:Atom.Patterns.Visitor.EmptyVisitor`1.Visit(`0)">
            <summary>
            Visits the specified object.
            </summary>
            <param name="obj">The object to visit.</param>
        </member>
        <member name="F:Atom.Patterns.Visitor.EmptyVisitor`1.instance">
            <summary>
            The generic static instance of the <see cref="T:Atom.Patterns.Visitor.EmptyVisitor`1"/> class.
            </summary>
        </member>
        <member name="T:Atom.Patterns.Visitor.InOrderVisitor`1">
            <summary>
            Represents an <see cref="T:Atom.Patterns.Visitor.IOrderedVisitor`1"/> that redirects calls <see cref="M:Atom.Patterns.Visitor.IOrderedVisitor`1.VisitInOrder(`0)"/> calls
            to another <see cref="T:Atom.Patterns.Visitor.IVisitor`1"/>.
            This class can't be inherited.
            </summary>
            <typeparam name="T"> The type of items that can be visited by this visitor. </typeparam>
        </member>
        <member name="M:Atom.Patterns.Visitor.InOrderVisitor`1.#ctor(Atom.Patterns.Visitor.IVisitor{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Patterns.Visitor.InOrderVisitor`1"/> class.
            </summary>
            <param name="visitor">
            The IVisitor{T} the new InOrderVisitor{T} redirects calls to.
            </param>
        </member>
        <member name="M:Atom.Patterns.Visitor.InOrderVisitor`1.VisitPostOrder(`0)">
            <summary>
            Has been overriden to do nothing.
            </summary>
            <param name="obj">
            The object to visit.
            </param>
        </member>
        <member name="M:Atom.Patterns.Visitor.InOrderVisitor`1.VisitPreOrder(`0)">
            <summary>
            Has been overriden to do nothing.
            </summary>
            <param name="obj">
            The object to visit.
            </param>
        </member>
        <member name="T:Atom.Patterns.Visitor.IOrderedVisitor`1">
            <summary>
            Represents a visitor that visits objects in order (PreOrder, PostOrder, or InOrder).
            </summary>
            <typeparam name="T">
            The type of items that can be visited by this IOrderedVisitor{T}.
            </typeparam>
        </member>
        <member name="P:Atom.Patterns.Visitor.IOrderedVisitor`1.HasCompleted">
            <summary>
            Gets a value indicating whether this OrderedVisitor{T} is done visiting.
            </summary>
            <value>Whether the underlying <see cref="P:Atom.Patterns.Visitor.IOrderedVisitor`1.Visitor"/> has completed.</value>
        </member>
        <member name="P:Atom.Patterns.Visitor.IOrderedVisitor`1.Visitor">
            <summary>
            Gets the <see cref="T:Atom.Patterns.Visitor.IVisitor`1"/> this OrderedVisitor{T} uses internally.
            </summary>
            <value>The <see cref="T:Atom.Patterns.Visitor.IVisitor`1"/> this OrderedVisitor{T} uses internally.</value>
        </member>
        <member name="M:Atom.Patterns.Visitor.IOrderedVisitor`1.VisitPreOrder(`0)">
            <summary>
            Visits the given object in pre-order.
            </summary>
            <param name="obj">
            The object to virst.
            </param>
        </member>
        <member name="M:Atom.Patterns.Visitor.IOrderedVisitor`1.VisitPostOrder(`0)">
            <summary>
            Visits the given object in post-order.
            </summary>
            <param name="obj">
            The object to virst.
            </param>
        </member>
        <member name="M:Atom.Patterns.Visitor.IOrderedVisitor`1.VisitInOrder(`0)">
            <summary>
            Visits the given object in order.
            </summary>
            <param name="obj">
            The object to virst.
            </param>
        </member>
        <member name="T:Atom.Patterns.Visitor.IVisitor`1">
            <summary>
            The main interface of the visitor pattern - an <see cref="T:Atom.Patterns.Visitor.IVisitor`1"/> gets called
            on all elements of a group of objects, doing defined work. 
            A simple example would be the summing up of all intagers in a list of intagers
            by visiting all intagers in the list.
            </summary>
            <remarks>
            The framework defines multiple enhanced versions of the build-in collections
            to enable support to the Visitor pattern.
            </remarks>
            <typeparam name="T">
            The type of items visitable by the visitor.
            </typeparam>
        </member>
        <member name="P:Atom.Patterns.Visitor.IVisitor`1.HasCompleted">
            <summary>
            Gets a value indicating whether this <see cref="T:Atom.Patterns.Visitor.IVisitor`1"/> instance is done performing its work.
            </summary>
            <value>
            Returns <see langword="true"/> if this instance is done;
            otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="M:Atom.Patterns.Visitor.IVisitor`1.Visit(`0)">
            <summary>
            Visits the specified object.
            </summary>
            <param name="obj">
            The object to visit.
            </param>
        </member>
        <member name="T:Atom.Patterns.Visitor.OrderedVisitor`1">
            <summary>
            Implements a visitor that visits objects in order (PreOrder, PostOrder, or InOrder).
            </summary>
            <remarks>
            Used primarily as a base class for Visitors specializing in a specific order type.
            </remarks>
            <typeparam name="T">
            The type of items that can be visited by this OrderedVisitor{T}.
            </typeparam>
        </member>
        <member name="P:Atom.Patterns.Visitor.OrderedVisitor`1.HasCompleted">
            <summary>
            Gets a value indicating whether this OrderedVisitor{T} is done visiting.
            </summary>
            <value>Whether the underlying <see cref="P:Atom.Patterns.Visitor.OrderedVisitor`1.Visitor"/> has completed.</value>
        </member>
        <member name="P:Atom.Patterns.Visitor.OrderedVisitor`1.Visitor">
            <summary>
            Gets the <see cref="T:Atom.Patterns.Visitor.IVisitor`1"/> this OrderedVisitor{T} uses internally.
            </summary>
            <value>The <see cref="T:Atom.Patterns.Visitor.IVisitor`1"/> this OrderedVisitor{T} uses internally.</value>
        </member>
        <member name="M:Atom.Patterns.Visitor.OrderedVisitor`1.#ctor(Atom.Patterns.Visitor.IVisitor{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Patterns.Visitor.OrderedVisitor`1"/> class.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="visitor"/> is null.
            </exception>
            <param name="visitor">
            The visitor to use when visiting the object.
            </param>
        </member>
        <member name="M:Atom.Patterns.Visitor.OrderedVisitor`1.VisitPreOrder(`0)">
            <summary>
            Visits the given object in pre-order.
            </summary>
            <param name="obj">
            The object to virst.
            </param>
        </member>
        <member name="M:Atom.Patterns.Visitor.OrderedVisitor`1.VisitPostOrder(`0)">
            <summary>
            Visits the given object in post-order.
            </summary>
            <param name="obj">
            The object to virst.
            </param>
        </member>
        <member name="M:Atom.Patterns.Visitor.OrderedVisitor`1.VisitInOrder(`0)">
            <summary>
            Visits the given object in order.
            </summary>
            <param name="obj">
            The object to virst.
            </param>
        </member>
        <member name="F:Atom.Patterns.Visitor.OrderedVisitor`1.visitor">
            <summary>
            The <see cref="T:Atom.Patterns.Visitor.IVisitor`1"/> this OrderedVisitor{T} uses internally.
            </summary>
        </member>
        <member name="T:Atom.Patterns.Visitor.PostOrderVisitor`1">
            <summary>
            Represents an <see cref="T:Atom.Patterns.Visitor.IOrderedVisitor`1"/> that redirects calls <see cref="M:Atom.Patterns.Visitor.IOrderedVisitor`1.VisitPostOrder(`0)"/> calls
            to another <see cref="T:Atom.Patterns.Visitor.IVisitor`1"/>.
            This class can't be inherited.
            </summary>
            <typeparam name="T">
            The type of items that can be visited by this visitor.
            </typeparam>
        </member>
        <member name="M:Atom.Patterns.Visitor.PostOrderVisitor`1.#ctor(Atom.Patterns.Visitor.IVisitor{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Patterns.Visitor.PostOrderVisitor`1"/> class.
            </summary>
            <param name="visitor">
            The IVisitor{T} the new PostOrderVisitor{T} redirects calls to.
            </param>
        </member>
        <member name="M:Atom.Patterns.Visitor.PostOrderVisitor`1.VisitInOrder(`0)">
            <summary>
            Has been overriden to do nothing.
            </summary>
            <param name="obj">
            The object to visit.
            </param>
        </member>
        <member name="M:Atom.Patterns.Visitor.PostOrderVisitor`1.VisitPreOrder(`0)">
            <summary>
            Has been overriden to do nothing.
            </summary>
            <param name="obj">
            The object to visit.
            </param>
        </member>
        <member name="T:Atom.Patterns.Visitor.PreOrderVisitor`1">
            <summary>
            Represents an <see cref="T:Atom.Patterns.Visitor.IOrderedVisitor`1"/> that redirects calls <see cref="M:Atom.Patterns.Visitor.IOrderedVisitor`1.VisitPreOrder(`0)"/> calls
            to another <see cref="T:Atom.Patterns.Visitor.IVisitor`1"/>.
            This class can't be inherited.
            </summary>
            <typeparam name="T">
            The type of items that can be visited by this visitor.
            </typeparam>
        </member>
        <member name="M:Atom.Patterns.Visitor.PreOrderVisitor`1.#ctor(Atom.Patterns.Visitor.IVisitor{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Patterns.Visitor.PreOrderVisitor`1"/> class.
            </summary>
            <param name="visitor">
            The IVisitor{T} the new PreOrderVisitor{T} redirects calls to.
            </param>
        </member>
        <member name="M:Atom.Patterns.Visitor.PreOrderVisitor`1.VisitInOrder(`0)">
            <summary>
            Has been overriden to do nothing.
            </summary>
            <param name="obj">
            The object to visit.
            </param>
        </member>
        <member name="M:Atom.Patterns.Visitor.PreOrderVisitor`1.VisitPostOrder(`0)">
            <summary>
            Has been overriden to do nothing.
            </summary>
            <param name="obj">
            The object to visit.
            </param>
        </member>
        <member name="T:Atom.Patterns.Visitor.TrackingVisitor`1">
            <summary>
            A visitor that tracks (stores) objects in the order they were visited.
            Handy for demonstrating and testing different ordered visits implementations on
            data structures. This class can't be inherited.
            </summary>
            <typeparam name="T">
            The type of objects to be visited.
            </typeparam>
        </member>
        <member name="P:Atom.Patterns.Visitor.TrackingVisitor`1.HasCompleted">
            <summary>
            Gets a value indicating whether this instance is done performing its work.
            </summary>
            <value>
            Always returns <see langword="false"/>.
            </value>
        </member>
        <member name="P:Atom.Patterns.Visitor.TrackingVisitor`1.TrackingList">
            <summary>
            Gets the reference of the list that contains the objects
            this <see cref="T:Atom.Patterns.Visitor.TrackingVisitor`1"/> has visisted.
            </summary>
            <value>The tracking list.</value>        
        </member>
        <member name="M:Atom.Patterns.Visitor.TrackingVisitor`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Patterns.Visitor.TrackingVisitor`1"/> class.
            </summary>
        </member>
        <member name="M:Atom.Patterns.Visitor.TrackingVisitor`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Atom.Patterns.Visitor.TrackingVisitor`1"/> class.
            </summary>
            <param name="initialCapacity">
            The initial number of elements the new <see cref="T:Atom.Patterns.Visitor.TrackingVisitor`1"/> can contain.
            </param>
        </member>
        <member name="M:Atom.Patterns.Visitor.TrackingVisitor`1.Visit(`0)">
            <summary>
            Visits the specified object.
            </summary>
            <param name="obj">
            The object to visit.
            </param>
        </member>
        <member name="F:Atom.Patterns.Visitor.TrackingVisitor`1.tracks">
            <summary>
            The list that is internally used by this TrackingVisitor{T} 
            to keep track of the items that have been visited.
            </summary>
        </member>
        <member name="T:Atom.Patterns.Visitor.VisitorExtensions">
            <summary>
            Provides static extension methods that make the work with <see cref="T:Atom.Patterns.Visitor.IVisitor`1"/>s easier.
            </summary>
        </member>
        <member name="M:Atom.Patterns.Visitor.VisitorExtensions.Visit``1(System.Collections.Generic.IEnumerable{``0},Atom.Patterns.Visitor.IVisitor{``0})">
            <summary>
            Accepts the given <see cref="T:Atom.Patterns.Visitor.IVisitor`1"/> to visit elements of this <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            until the <see cref="P:Atom.Patterns.Visitor.IVisitor`1.HasCompleted"/> or all elements have been visited.
            </summary>
            <typeparam name="T">
            The type of items to visit.
            </typeparam>
            <param name="collection">
            The collection whose items to accept. 
            </param>
            <param name="visitor">
            The visitor to use.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="visitor"/> is null.
            </exception>
        </member>
        <member name="M:Atom.Patterns.Visitor.VisitorExtensions.Visit(System.Collections.IEnumerable,Atom.Patterns.Visitor.IVisitor{System.Object})">
            <summary>
            Accepts the given <see cref="T:Atom.Patterns.Visitor.IVisitor`1"/> to visit elements of this <see cref="T:System.Collections.IEnumerable"/>
            until the <see cref="P:Atom.Patterns.Visitor.IVisitor`1.HasCompleted"/> or all elements have been visited.
            </summary>
            <param name="collection">
            The collection whose items to accept. 
            </param>
            <param name="visitor">
            The visitor to use.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="visitor"/> is null.
            </exception>
        </member>
        <member name="T:Atom.IObjectProvider`1">
            <summary>
            Provides a simple mechanism for receiving an object of a specific type.
            </summary>
            <typeparam name="TObject">
            The type of the object this IObjectProvider{TObject} provides.
            </typeparam>
        </member>
        <member name="M:Atom.IObjectProvider`1.TryResolve">
            <summary>
            Attempts to get the object this IObjectProvider{TObject}
            provides.
            </summary>
            <returns>
            The object this IObjectProvider{TObject} provides;
            -or- null if this IObjectProvider{TObject} does not provide any object at the moment.
            </returns>
        </member>
        <member name="T:Atom.IObjectProviderContainer">
            <summary>
            Provides a mechanism for receiving <see cref="T:Atom.IObjectProvider`1"/> instances.
            </summary>
        </member>
        <member name="M:Atom.IObjectProviderContainer.TryGetObjectProvider(System.Type)">
            <summary>
            Attempts to receive the IObjectProvider for the specified object type.
            </summary>
            <param name="type">
            The type of object for which an IObjectProvider should be requested.
            </param>
            <returns>
            The associated IObjectProvider; -or- null if no IObjectProvider has been registered
            at this IObjectProviderContainer for the specified <see cref="T:System.Type"/>.
            </returns>
        </member>
        <member name="T:Atom.ObjectProviderExtensions">
            <summary>
            Defines extension methods for the <see cref="T:Atom.IObjectProvider`1"/>,
            <see cref="T:Atom.IObjectProviderContainer"/> and <see cref="T:Atom.Patterns.Provider.IObjectProviderContainerRegistrar"/> interfacse.
            </summary>
        </member>
        <member name="M:Atom.ObjectProviderExtensions.TryGetObjectProvider``1(Atom.IObjectProviderContainer)">
            <summary>
            Attempts to receive the IObjectProvider for the specified object type.
            </summary>
            <typeparam name="TObject">
            The type of object for which an IObjectProvider should be requested.
            </typeparam>
            <returns>
            The associated IObjectProvider; -or- null if no IObjectProvider has been registered
            at this IObjectProviderContainer for the specified <typeparamref name="TObject"/>.
            </returns>
        </member>
        <member name="M:Atom.ObjectProviderExtensions.Resolve``1(Atom.IObjectProvider{``0})">
            <summary>
            Gets the object this IObjectProvider{TObject}.
            </summary>
            <exception cref="T:Atom.ServiceNotFoundException">
            If no object could be resolved.
            </exception>
            <param name="provider">
            The IObjectProvider to resolve the object on.
            </param>
            <returns>
            The object this IObjectProvider{TObject} provides.
            </returns>
        </member>
        <member name="M:Atom.ObjectProviderExtensions.GetObjectProvider``1(Atom.IObjectProviderContainer)">
            <summary>
            Gets the IObjectProvider for the specified object type.
            </summary>
            <exception cref="T:Atom.ServiceNotFoundException">
            If no IObjectProvider{TObject} has been registered.
            </exception>
            <typeparam name="TObject">
            The type of object for which an IObjectProvider should be requested.
            </typeparam>
            <returns>
            The associated IObjectProvider.
            </returns>
        </member>
        <member name="M:Atom.ObjectProviderExtensions.Resolve``1(Atom.IObjectProviderContainer)">
            <summary>
            Attempts to directly resolve the object of the specified type.
            </summary>
            <exception cref="T:Atom.ServiceNotFoundException">
            If no IObjectProvider{TObject} could be found or if the IObjectProvider{TObject} didn't return an object.
            </exception>
            <typeparam name="TObject">
            The type of the object to resolve.
            </typeparam>
            <param name="container">
            The IObjectProviderContainer that contains the IObjectProvider that resolves the object.
            </param>
            <returns>
            The requested object.
            </returns>
        </member>
        <member name="M:Atom.ObjectProviderExtensions.TryResolve(Atom.IObjectProviderContainer,System.Type)">
            <summary>
            Attempts to directly resolve the object of the specified type.
            </summary>
            <param name="container">
            The IObjectProviderContainer that contains the IObjectProvider that resolves the object.
            </param>
            <param name="type">
            The type of the object to resolve.
            </param>
            <returns>
            The requested object
            -or- null if the object could not be resolved.
            </returns>
        </member>
        <member name="M:Atom.ObjectProviderExtensions.TryResolve``1(Atom.IObjectProviderContainer)">
            <summary>
            Attempts to directly resolve the object of the specified type.
            </summary>
            <typeparam name="TObject">
            The type of the object to resolve.
            </typeparam>
            <param name="container">
            The IObjectProviderContainer that contains the IObjectProvider that resolves the object.
            </param>
            <returns>
            The requested object
            -or- null if the object could not be resolved.
            </returns>
        </member>
        <member name="M:Atom.ObjectProviderExtensions.Register``1(Atom.Patterns.Provider.IObjectProviderContainerRegistrar,System.Func{``0})">
            <summary>
            Registers a new LambdaObjectProvider{TObject} at this IObjectProviderContainerRegistrar that
            uses the specified lambda to resolve the object.
            </summary>
            <typeparam name="TObject">
            The type of object for which an IObjectProvider should be registered.
            </typeparam>
            <param name="container">
            The IObjectProviderContainerRegistrar that stores the IObjectProviders.
            </param>
            <param name="lambda">
            The lambda to register.
            </param>
        </member>
        <member name="M:Atom.ObjectProviderExtensions.Register``1(Atom.Patterns.Provider.IObjectProviderContainerRegistrar,System.Func{Atom.IObjectProviderContainer,``0})">
            <summary>
            Registers a new LambdaObjectProvider{TObject} at this IObjectProviderContainerRegistrar that
            uses the specified lambda to resolve the object.
            </summary>
            <typeparam name="TObject">
            The type of object for which an IObjectProvider should be registered.
            </typeparam>
            <param name="container">
            The IObjectProviderContainerRegistrar that stores the IObjectProviders.
            </param>
            <param name="lambda">
            The lambda to register.
            </param>
        </member>
        <member name="T:Atom.ReflectionExtensions">
            <summary>
            Provides reflection related extension methods.
            </summary>
        </member>
        <member name="M:Atom.ReflectionExtensions.GetConstantValue``1(System.Type,System.String)">
            <summary>
            Attempts to get the value of a public constant or static field of type <typeparamref name="TConstant"/>
            on the specified class that has the specified <paramref name="constantName"/>.
            </summary>
            <typeparam name="TConstant">
            The type of the constant.
            </typeparam>
            <param name="type">
            The type of the class that contains the definition of the constant.
            </param>
            <param name="constantName">
            The name of the constant to locate.
            </param>
            <returns>
            The value of teh constant or nothing.
            </returns>
        </member>
        <member name="M:Atom.ReflectionExtensions.GetTypeName(System.Type)">
            <summary>
            Receives the type name of the given <see cref="T:System.Type"/>,
            aka. "FullName, AssemblyName". Which can be used to create
            the given type using "Activator.CreateInstance( Type.GetType( typeName ) )"
            in the case that the type has a paramterless public constructor.
            </summary>
            <param name="type">
            The type for which to get the typename for.
            </param>
            <returns>
            The typename that uniquely identifies the given <paramref name="type"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="type"/> is null.
            </exception>
        </member>
        <member name="M:Atom.ReflectionExtensions.Implements(System.Type,System.Type)">
            <summary>
            Gets a value indicating whether this <see cref="T:System.Type"/> implements another other <see cref="T:System.Type"/>.
            </summary>
            <param name="thisType">The type that is supposed to implement the other type.</param>
            <param name="type">The type that is supposed to be implemented.</param>
            <returns>
            Returns true if <paramref name="thisType"/> implements the given <paramref name="type"/>;
            otherwise false.
            </returns>
        </member>
        <member name="M:Atom.ReflectionExtensions.GetBestMatchingConstructor(System.Type,System.Object[])">
            <summary>
            Tries the find the best matching constructor of the <see cref="T:System.Type"/>
            that match the specified requirements.
            </summary>
            <remarks>
            Remember that the best matching constructor may still have an invalid signature.
            </remarks>
            <param name="type">
            The type to investigate.
            </param>
            <param name="parameters">
            The paramters the constructor should have.
            </param>
            <returns>
            The best matching constructor.
            </returns>
            <exception cref="T:System.ArgumentException">
            If the <see cref="T:System.Type"/> has no public constructor
            with as many parameters as required.
            </exception>
        </member>
        <member name="M:Atom.ReflectionExtensions.GetConstructors(System.Type)">
            <summary>
            Gets the constructors associated with the given Type.
            </summary>
            <param name="type">
            The input type.
            </param>
            <returns>
            The public constructors of the given Type.
            </returns>
        </member>
        <member name="M:Atom.ReflectionExtensions.GetConstructorsWithMatchingParameterCount(System.Type,System.Object[],System.Reflection.ConstructorInfo[])">
            <summary>
            Gets the public constructors of the given Type that have the required number of paramters.
            </summary>
            <param name="type">
            The input type.
            </param>
            <param name="parameters">
            The parameters passed to the constructor.
            </param>
            <param name="constructors">
            The array of public constructors associated with the given input type.
            </param>
            <exception cref="T:System.ArgumentException">
            If the <see cref="T:System.Type"/> has no public constructor
            with as many parameters as required.
            </exception>
            <returns>
            The list of all matching constructors.
            </returns>
        </member>
        <member name="M:Atom.ReflectionExtensions.GetBestMatchingConstructor(System.Collections.Generic.List{System.Reflection.ConstructorInfo},System.Object[])">
            <summary>
            Gets the constructor that matches the given parameters the best.
            </summary>
            <param name="countMatches">
            The list of constructors that have a matching number of parameters.
            </param>
            <param name="parameters">
            The parameters to the constructor.
            </param>
            <returns>
            The best matching constructor.
            </returns>
        </member>
        <member name="T:Atom.RelaxedEventHandler`1">
            <summary>
            Defines an <see cref="T:System.EventHandler`1"/> that allows 
            the usage of EventArgs that don't inherit from <see cref="T:System.EventArgs"/>.
            </summary>
            <typeparam name="TEventArgs">
            The type of the event data generated by the event.
            </typeparam>
            <param name="sender">
            The source of the event.
            </param>
            <param name="e">
            The event arguments of type <typeparamref name="TEventArgs"/>.
            </param>
        </member>
        <member name="T:Atom.RelaxedEventHandler`2">
            <summary>
            Defines a fully typesafe <see cref="T:System.EventHandler`1"/> that allows 
            the usage of EventArgs that don't inherit from <see cref="T:System.EventArgs"/>.
            </summary>
            <typeparam name="TSender">
            The type of the object that raises the event.
            </typeparam>
            <typeparam name="TEventArgs">
            The type of the event data generated by the event.
            </typeparam>
            <param name="sender">
            The source of the event.
            </param>
            <param name="e">
            The event arguments of type <typeparamref name="TEventArgs"/>.
            </param>
        </member>
        <member name="T:Atom.ServiceContainerExtensions">
            <summary>
            Defines extension methods for the <see cref="T:System.ComponentModel.Design.IServiceContainer"/> interface.
            </summary>
        </member>
        <member name="M:Atom.ServiceContainerExtensions.AddService``1(System.ComponentModel.Design.IServiceContainer,``0)">
            <summary>
            Adds the specified service to the IServiceContainer.
            </summary>
            <typeparam name="TService">
            The type to add the service under.
            </typeparam>
            <param name="container">
            The container to modify.
            </param>
            <param name="service">
            The service to add.
            </param>
        </member>
        <member name="T:Atom.ServiceProviderExtensions">
            <summary>
            Defines extension methods for the <see cref="T:System.IServiceProvider"/> interface.
            </summary>
        </member>
        <member name="M:Atom.ServiceProviderExtensions.GetService``1(System.IServiceProvider)">
            <summary>
            Gets the service object of the specified type <typeparamref name="TService"/>.
            </summary>
            <typeparam name="TService">
            The type of the service to receive.
            </typeparam>
            <param name="serviceProvider">
            The <see cref="T:System.IServiceProvider"/> from which the service should be received.
            </param>
            <returns>
            A service object of type serviceType. -or-
            null if there is no service object of type serviceType.
            </returns>
        </member>
        <member name="T:Atom.SimpleEventHandler`1">
            <summary>
            Represents a typed handler for an event that doesn't contain special event data.
            </summary>
            <typeparam name="TSender">
            The type of the event data generated by the event.
            </typeparam>
            <param name="sender">
            The source of the event.
            </param>
        </member>
        <member name="T:Atom.Storage.BaseObjectReaderWriter`1">
            <summary>
            Represents an <see cref="T:Atom.Storage.IObjectReaderWriter"/> that serializes / deserializes objects
            of type <typeparamref name="TObject"/>.
            </summary>
            <typeparam name="TObject">
            The type of the object this BaseObjectReaderWriter{TObject} can serialize / deserialize.
            </typeparam>
        </member>
        <member name="P:Atom.Storage.BaseObjectReaderWriter`1.Type">
            <summary>
            Gets the <see cref="P:Atom.Storage.BaseObjectReaderWriter`1.Type"/> this IObjectReaderWriter serializes and deserializes.
            </summary>
        </member>
        <member name="M:Atom.Storage.BaseObjectReaderWriter`1.Serialize(System.Object,Atom.Storage.ISerializationContext)">
            <summary>
            Serializes the given object using the given ISerializationContext.
            </summary>
            <param name="object">
            The object to serialize.
            </param>
            <param name="context">
            The context that provides everything required for the serialization process.
            </param>
        </member>
        <member name="M:Atom.Storage.BaseObjectReaderWriter`1.Deserialize(System.Object,Atom.Storage.IDeserializationContext)">
            <summary>
            Deserializes the given object using the given IDeserializationContext.
            </summary>
            <param name="object">
            The object to deserialize.
            </param>
            <param name="context">
            The context that provides everything required for the deserialization process.
            </param>
        </member>
        <member name="M:Atom.Storage.BaseObjectReaderWriter`1.Serialize(`0,Atom.Storage.ISerializationContext)">
            <summary>
            Serializes the given object using the given ISerializationContext.
            </summary>
            <param name="object">
            The object to serialize.
            </param>
            <param name="context">
            The context that provides everything required for the serialization process.
            </param>
        </member>
        <member name="M:Atom.Storage.BaseObjectReaderWriter`1.Deserialize(`0,Atom.Storage.IDeserializationContext)">
            <summary>
            Deserializes the given object using the given IDeserializationContext.
            </summary>
            <param name="object">
            The object to deserialize.
            </param>
            <param name="context">
            The context that provides everything required for the deserialization process.
            </param>
        </member>
        <member name="T:Atom.Storage.BinaryDeserializationContext">
            <summary>
            Implements a mechanism that allows deserialization of build-in types
            from a binary stream.
            </summary>
        </member>
        <member name="P:Atom.Storage.BinaryDeserializationContext.Reader">
            <summary>
            Gets the <see cref="T:System.IO.BinaryReader"/> this BinarySerializationContext internally 
            uses to read data.
            </summary>
        </member>
        <member name="M:Atom.Storage.BinaryDeserializationContext.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the BinaryDeserializationContext class.
            </summary>
            <param name="stream">
            The stream of binary data from which will be read.
            </param>
        </member>
        <member name="M:Atom.Storage.BinaryDeserializationContext.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the BinaryDeserializationContext class.
            </summary>
            <param name="reader">
            The BinaryReader that is going to be read with.
            </param>
        </member>
        <member name="M:Atom.Storage.BinaryDeserializationContext.ReadBoolean">
            <summary>
            Reads a Boolean value.
            </summary>
            <returns>
            The Boolean value that has been read.
            </returns>
        </member>
        <member name="M:Atom.Storage.BinaryDeserializationContext.ReadByte">
            <summary>
            Reads a 8-bit unsigned integer.
            </summary>
            <returns>
            The 8-bit unsigned integer that has been read.
            </returns>
        </member>
        <member name="M:Atom.Storage.BinaryDeserializationContext.ReadInt16">
            <summary>
            Reads a 16-bit signed integer.
            </summary>
            <returns>
            The 16-bit signed integer that has been read.
            </returns>
        </member>
        <member name="M:Atom.Storage.BinaryDeserializationContext.ReadInt32">
            <summary>
            Reads a 32-bit signed integer.
            </summary>
            <returns>
            The 32-bit signed integer that has been read.
            </returns>
        </member>
        <member name="M:Atom.Storage.BinaryDeserializationContext.ReadInt64">
            <summary>
            Reads a 64-bit signed integer.
            </summary>
            <returns>
            The 64-bit signed integer that has been read.
            </returns>
        </member>
        <member name="M:Atom.Storage.BinaryDeserializationContext.ReadUInt32">
            <summary>
            Reads a 32-bit unsigned integer.
            </summary>
            <returns>
            The 32-bit unsigned integer that has been read.
            </returns>
        </member>
        <member name="M:Atom.Storage.BinaryDeserializationContext.ReadUInt64">
            <summary>
            Reads a 64-bit unsigned integer.
            </summary>
            <returns>
            The 64-bit unsigned integer that has been read.
            </returns>
        </member>
        <member name="M:Atom.Storage.BinaryDeserializationContext.ReadChar">
            <summary>
            Reads a Unicode character.
            </summary>
            <returns>
            The Unicode character that has been read.
            </returns>
        </member>
        <member name="M:Atom.Storage.BinaryDeserializationContext.ReadString">
            <summary>
            Reads a series of Unicode characters.
            </summary>
            <returns>
            The series of Unicode characters that has been read.
            </returns>
        </member>
        <member name="M:Atom.Storage.BinaryDeserializationContext.ReadSingle">
            <summary>
            Reads a single-precision floating-point number.
            </summary>
            <returns>
            The single-precision floating-point number that has been read.
            </returns>
        </member>
        <member name="M:Atom.Storage.BinaryDeserializationContext.ReadDouble">
            <summary>
            Reads a double-precision floating-point number.
            </summary>
            <returns>
            The double-precision floating-point number that has been read.
            </returns>
        </member>
        <member name="F:Atom.Storage.BinaryDeserializationContext.reader">
            <summary>
            The <see cref="T:System.IO.BinaryReader"/> this BinarySerializationContext internally 
            uses to read data.
            </summary>
        </member>
        <member name="T:Atom.Storage.IBinaryDeserializationContext">
            <summary>
            Provides a mechanism that allows deserialization of build-in types
            from a binary stream.
            </summary>
        </member>
        <member name="P:Atom.Storage.IBinaryDeserializationContext.Reader">
            <summary>
            Gets the <see cref="T:System.IO.BinaryReader"/> this IBinarySerializationContext internally 
            uses to read data.
            </summary>
        </member>
        <member name="T:Atom.Storage.IDeserializationContext">
            <summary>
            Provides a mechanism that allows deserialization of build-in types
            written by a matching <see cref="T:Atom.Storage.ISerializationContext"/>.
            </summary>
        </member>
        <member name="M:Atom.Storage.IDeserializationContext.ReadBoolean">
            <summary>
            Reads a Boolean value.
            </summary>
            <returns>
            The Boolean value that has been read.
            </returns>
        </member>
        <member name="M:Atom.Storage.IDeserializationContext.ReadByte">
            <summary>
            Reads a 8-bit unsigned integer.
            </summary>
            <returns>
            The 8-bit unsigned integer that has been read.
            </returns>
        </member>
        <member name="M:Atom.Storage.IDeserializationContext.ReadInt16">
            <summary>
            Reads a 16-bit signed integer.
            </summary>
            <returns>
            The 16-bit signed integer that has been read.
            </returns>
        </member>
        <member name="M:Atom.Storage.IDeserializationContext.ReadInt32">
            <summary>
            Reads a 32-bit signed integer.
            </summary>
            <returns>
            The 32-bit signed integer that has been read.
            </returns>
        </member>
        <member name="M:Atom.Storage.IDeserializationContext.ReadInt64">
            <summary>
            Reads a 64-bit signed integer.
            </summary>
            <returns>
            The 64-bit signed integer that has been read.
            </returns>
        </member>
        <member name="M:Atom.Storage.IDeserializationContext.ReadChar">
            <summary>
            Reads a Unicode character.
            </summary>
            <returns>
            The Unicode character that has been read.
            </returns>
        </member>
        <member name="M:Atom.Storage.IDeserializationContext.ReadString">
            <summary>
            Reads a series of Unicode characters.
            </summary>
            <returns>
            The series of Unicode characters that has been read.
            </returns>
        </member>
        <member name="M:Atom.Storage.IDeserializationContext.ReadSingle">
            <summary>
            Reads a single-precision floating-point number.
            </summary>
            <returns>
            The single-precision floating-point number that has been read.
            </returns>
        </member>
        <member name="M:Atom.Storage.IDeserializationContext.ReadDouble">
            <summary>
            Reads a double-precision floating-point number.
            </summary>
            <returns>
            The double-precision floating-point number that has been read.
            </returns>
        </member>
        <member name="T:Atom.Storage.IUnsignedBinaryDeserializationContext">
            <summary>
            Provides a mechanism that allows deserialization of build-in types (including unsigned types)
            from a binary stream.
            </summary>
        </member>
        <member name="T:Atom.Storage.IUnsignedDeserializationContext">
            <summary>
            Provides a mechanism that allows deserialization of build-in types
            written by a matching <see cref="T:Atom.Storage.IUnsignedDeserializationContext"/>.
            </summary>
        </member>
        <member name="M:Atom.Storage.IUnsignedDeserializationContext.ReadUInt32">
            <summary>
            Reads a 32-bit unsigned integer.
            </summary>
            <returns>
            The 32-bit unsigned integer that has been read.
            </returns>
        </member>
        <member name="M:Atom.Storage.IUnsignedDeserializationContext.ReadUInt64">
            <summary>
            Reads a 64-bit unsigned integer.
            </summary>
            <returns>
            The 64-bit unsigned integer that has been read.
            </returns>
        </member>
        <member name="T:Atom.Storage.IObjectReader">
            <summary>
            Provides a mechanism that allows the deserialization of a specific object type.
            </summary>
        </member>
        <member name="P:Atom.Storage.IObjectReader.Type">
            <summary>
            Gets the <see cref="P:Atom.Storage.IObjectReader.Type"/> this IObjectReader deserializes.
            </summary>
        </member>
        <member name="M:Atom.Storage.IObjectReader.Deserialize(System.Object,Atom.Storage.IDeserializationContext)">
            <summary>
            Deserializes the given object using the given IDeserializationContext.
            </summary>
            <param name="object">
            The object to deserialize.
            </param>
            <param name="context">
            The context that provides everything required for the deserialization process.
            </param>
        </member>
        <member name="T:Atom.Storage.IObjectReader`1">
            <summary>
            Provides a mechanism that allows the deserialization of a specific object type.
            </summary>
            <typeparam name="TObject">
            The type of the object that is deserialized.
            </typeparam>
        </member>
        <member name="M:Atom.Storage.IObjectReader`1.Deserialize(`0,Atom.Storage.IDeserializationContext)">
            <summary>
            Deserializes the given object using the given IDeserializationContext.
            </summary>
            <param name="object">
            The object to deserialize.
            </param>
            <param name="context">
            The context that provides everything required for the deserialization process.
            </param>
        </member>
        <member name="T:Atom.Storage.IObjectReaderWriter">
            <summary>
            Provides a mechanism that allows the serialization and deserialization
            of a specific object type.
            </summary>
        </member>
        <member name="T:Atom.Storage.IObjectReaderWriter`1">
            <summary>
            Provides a mechanism that allows the serialization and deserialization
            of a specific object type.
            </summary>
            <typeparam name="TObject">
            The type of the object that is serialized and deserialized.
            </typeparam>
        </member>
        <member name="T:Atom.Storage.IObjectWriter">
            <summary>
            Provides a mechanism that allows the deserialization of a specific object type.
            </summary>
        </member>
        <member name="P:Atom.Storage.IObjectWriter.Type">
            <summary>
            Gets the <see cref="P:Atom.Storage.IObjectWriter.Type"/> this IObjectWriter serializes.
            </summary>
        </member>
        <member name="M:Atom.Storage.IObjectWriter.Serialize(System.Object,Atom.Storage.ISerializationContext)">
            <summary>
            Serializes the given object using the given ISerializationContext.
            </summary>
            <param name="object">
            The object to serialize.
            </param>
            <param name="context">
            The context that provides everything required for the serialization process.
            </param>
        </member>
        <member name="T:Atom.Storage.IObjectWriter`1">
            <summary>
            Provides a mechanism that allows the serialization of a specific object type.
            </summary>
            <typeparam name="TObject">
            The type of the object that is serialized.
            </typeparam>
        </member>
        <member name="M:Atom.Storage.IObjectWriter`1.Serialize(`0,Atom.Storage.ISerializationContext)">
            <summary>
            Serializes the given object using the given ISerializationContext.
            </summary>
            <param name="object">
            The object to serialize.
            </param>
            <param name="context">
            The context that provides everything required for the serialization process.
            </param>
        </member>
        <member name="T:Atom.Storage.IStorable">
            <summary>
            Provides a mechanism to serialize and deserialize the object
            that implements the interface.
            </summary>
        </member>
        <member name="M:Atom.Storage.IStorable.Serialize(Atom.Storage.ISerializationContext)">
            <summary>
            Serializes this IStoreable object using the given ISerializationContext.
            </summary>
            <param name="context">
            Provides access to the mechanisms required to serialize this IStoreable object.
            </param>
        </member>
        <member name="M:Atom.Storage.IStorable.Deserialize(Atom.Storage.IDeserializationContext)">
            <summary>
            Deserializes this IStoreable object using the given IDeserializationContext.
            </summary>
            <param name="context">
            Provides access to the mechanisms required to deserialize this IStoreable object.
            </param>
        </member>
        <member name="T:Atom.Storage.IStorageContextFactory`5">
            <summary>
            Provides a mechanism that creates <see cref="T:Atom.Storage.ISerializationContext"/> and <see cref="T:Atom.Storage.IDeserializationContext"/>
            objects for a specific object type.
            </summary>
            <typeparam name="TObject">
            The type of the object supposed to be deserialized / serialized.
            </typeparam>
            <typeparam name="TSerializationContext">
            The type of the ISerializationContext created by the IStorageContextFactory.
            </typeparam>
            <typeparam name="TDeserializationContext">
            The type of the IDeserializationContext created by the IStorageContextFactory.
            </typeparam>
            <typeparam name="TSerializationBuildContext">
            The context under which the ISerializationContext is build.
            </typeparam>
            <typeparam name="TDeserializationBuildContext">
            The context under which the IDeserializationContext is build.
            </typeparam>
        </member>
        <member name="M:Atom.Storage.IStorageContextFactory`5.BuildSerializationContext(`0,`3)">
            <summary>
            Builds a new <see cref="T:Atom.Storage.ISerializationContext"/> for the given object.
            </summary>
            <param name="object">
            The object that is supposed to be serialized.
            </param>
            <param name="buildContext">
            The additional context under which the TSerializationContext is build.
            </param>
            <returns>
            The newly created TSerializationContext.
            </returns>
        </member>
        <member name="M:Atom.Storage.IStorageContextFactory`5.BuildDeserializationContext(`0,`4)">
            <summary>
            Builds a new <see cref="T:Atom.Storage.IDeserializationContext"/> for the given object.
            </summary>
            <param name="object">
            The object that is supposed to be deserialized.
            </param>
            <param name="buildContext">
            The additional context under which the TDeserializationContext is build.
            </param>
            <returns>
            The newly created TDeserializationContext.
            </returns>
        </member>
        <member name="T:Atom.Storage.BinarySerializationContext">
            <summary>
            Implements a mechanism that allows serialization of build-in types
            to a binary stream.
            </summary>
        </member>
        <member name="P:Atom.Storage.BinarySerializationContext.Writer">
            <summary>
            Gets the <see cref="T:System.IO.BinaryWriter"/> this BinarySerializationContext internally 
            uses to write data.
            </summary>
        </member>
        <member name="M:Atom.Storage.BinarySerializationContext.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the BinarySerializationContext class.
            </summary>
            <param name="stream">
            The output <see cref="T:System.IO.Stream"/> to write into.
            </param>
        </member>
        <member name="M:Atom.Storage.BinarySerializationContext.#ctor(System.IO.BinaryWriter)">
            <summary>
            Initializes a new instance of the BinarySerializationContext class.
            </summary>
            <param name="writer">
            The <see cref="T:System.IO.BinaryWriter"/> the new BinarySerializationContext internally 
            should use to write data.
            </param>
        </member>
        <member name="M:Atom.Storage.BinarySerializationContext.Write(System.Boolean)">
            <summary>
            Writes the given Boolean value.
            </summary>
            <param name="value">
            The value to write.
            </param>
        </member>
        <member name="M:Atom.Storage.BinarySerializationContext.Write(System.Byte)">
            <summary>
            Writes the given 8-bit unsigned integer.
            </summary>
            <param name="value">
            The value to write.
            </param>
        </member>
        <member name="M:Atom.Storage.BinarySerializationContext.Write(System.Int32)">
            <summary>
            Writes the given 32-bit signed integer.
            </summary>
            <param name="value">
            The value to write.
            </param>
        </member>
        <member name="M:Atom.Storage.BinarySerializationContext.Write(System.Int64)">
            <summary>
            Writes the given 64-bit signed value.
            </summary>
            <param name="value">
            The value to write.
            </param>
        </member>
        <member name="M:Atom.Storage.BinarySerializationContext.Write(System.Single)">
            <summary>
            Writes the given single-precision floating-point number.
            </summary>
            <param name="value">
            The value to write.
            </param>
        </member>
        <member name="M:Atom.Storage.BinarySerializationContext.Write(System.Double)">
            <summary>
            Writes the given double-precision floating-point value.
            </summary>
            <param name="value">
            The value to write.
            </param>
        </member>
        <member name="M:Atom.Storage.BinarySerializationContext.Write(System.Char)">
            <summary>
            Writes the given Unicode character.
            </summary>
            <param name="value">
            The value to write.
            </param>
        </member>
        <member name="M:Atom.Storage.BinarySerializationContext.Write(System.String)">
            <summary>
            Writes the given series of Unicode characters.
            </summary>
            <param name="value">
            The value to write.
            </param>
        </member>
        <member name="M:Atom.Storage.BinarySerializationContext.WriteUnsigned(System.UInt32)">
            <summary>
            Writes the given 32-bit unsigned integer.
            </summary>
            <param name="value">
            The value to write.
            </param>
        </member>
        <member name="F:Atom.Storage.BinarySerializationContext.writer">
            <summary>
            The <see cref="T:System.IO.BinaryWriter"/> this BinarySerializationContext internally 
            uses to write data.
            </summary>
        </member>
        <member name="T:Atom.Storage.IBinarySerializationContext">
            <summary>
            Provides a mechanism that allows serialization of build-in types
            to a binary stream.
            </summary>
        </member>
        <member name="P:Atom.Storage.IBinarySerializationContext.Writer">
            <summary>
            Gets the <see cref="T:System.IO.BinaryWriter"/> this IBinarySerializationContext internally 
            uses to write data.
            </summary>
        </member>
        <member name="T:Atom.Storage.ISerializationContext">
            <summary>
            Provides a mechanism that allows serialization of build-in types.
            </summary>
        </member>
        <member name="M:Atom.Storage.ISerializationContext.Write(System.Boolean)">
            <summary>
            Writes the given Boolean value.
            </summary>
            <param name="value">
            The value to write.
            </param>
        </member>
        <member name="M:Atom.Storage.ISerializationContext.Write(System.Byte)">
            <summary>
            Writes the given 8-bit unsigned integer.
            </summary>
            <param name="value">
            The value to write.
            </param>
        </member>
        <member name="M:Atom.Storage.ISerializationContext.Write(System.Int32)">
            <summary>
            Writes the given 32-bit signed integer.
            </summary>
            <param name="value">
            The value to write.
            </param>
        </member>
        <member name="M:Atom.Storage.ISerializationContext.Write(System.Int64)">
            <summary>
            Writes the given 64-bit signed value.
            </summary>
            <param name="value">
            The value to write.
            </param>
        </member>
        <member name="M:Atom.Storage.ISerializationContext.Write(System.Single)">
            <summary>
            Writes the given single-precision floating-point number.
            </summary>
            <param name="value">
            The value to write.
            </param>
        </member>
        <member name="M:Atom.Storage.ISerializationContext.Write(System.Double)">
            <summary>
            Writes the given double-precision floating-point value.
            </summary>
            <param name="value">
            The value to write.
            </param>
        </member>
        <member name="M:Atom.Storage.ISerializationContext.Write(System.Char)">
            <summary>
            Writes the given Unicode character.
            </summary>
            <param name="value">
            The value to write.
            </param>
        </member>
        <member name="M:Atom.Storage.ISerializationContext.Write(System.String)">
            <summary>
            Writes the given series of Unicode characters.
            </summary>
            <param name="value">
            The value to write.
            </param>
        </member>
        <member name="T:Atom.Storage.IUnsignedBinarySerializationContext">
            <summary>
            Provides a mechanism that allows serialization of build-in types, including unsigned
            to a binary strea,.
            </summary>
        </member>
        <member name="T:Atom.Storage.IUnsignedSerializationContext">
            <summary>
            Provides a mechanism that allows serialization of build-in types, including unsigned.
            </summary>
        </member>
        <member name="M:Atom.Storage.IUnsignedSerializationContext.WriteUnsigned(System.UInt32)">
            <summary>
            Writes the given 32-bit unsigned integer.
            </summary>
            <param name="value">
            The value to write.
            </param>
        </member>
        <member name="T:Atom.Storage.StorageUtilities">
            <summary>
            Defines static storage related utility methods.
            </summary>
        </member>
        <member name="M:Atom.Storage.StorageUtilities.LoadFromFile``1(System.String,Atom.Storage.IObjectReader{``0})">
            <summary>
            Loads an object of type <typeparamref name="T"/> by deserializing the data stored
            within the file at the given <paramref name="filePath"/>.
            </summary>
            <typeparam name="T">
            The type of object to deserialize. Is required to have a public parameterless constructor.
            </typeparam>
            <param name="filePath">
            The path of the file to open.
            </param>
            <param name="reader">
            The IObjectReader{T} that contains the actual deserialization logic.
            </param>
            <returns>
            The de-serialized object.
            </returns>
        </member>
        <member name="M:Atom.Storage.StorageUtilities.SaveToFile``1(System.String,``0,Atom.Storage.IObjectWriter{``0})">
            <summary>
            Saves an object of type <typeparamref name="T"/> by serializing the data stored
            into a file at the given <paramref name="filePath"/>.
            </summary>
            <typeparam name="T">
            The type of object to serialize.
            </typeparam>
            <param name="filePath">
            The path of the file to open.
            </param>
            <param name="object">
            The object to serialize.
            </param>
            <param name="writer">
            The IObjectWriter{T} that contains the actual serialization logic.
            </param>
        </member>
        <member name="M:Atom.Storage.StorageUtilities.SafeSaveToFile``1(System.String,``0,Atom.Storage.IObjectWriter{``0})">
            <summary>
            Saves an object of type <typeparamref name="T"/> by serializing the data stored
            into a file at the given <paramref name="filePath"/>.
            The file won't be corrupted if an exception occurs during the serializing
            process.
            </summary>
            <typeparam name="T">
            The type of object to serialize.
            </typeparam>
            <param name="filePath">
            The path of the file to save to.
            </param>
            <param name="object">
            The object to serialize.
            </param>
            <param name="writer">
            The IObjectWriter{T} that contains the actual serialization logic.
            </param>
        </member>
        <member name="M:Atom.Storage.StorageUtilities.CopyToFile(System.IO.Stream,System.String)">
            <summary>
            Copies the complete content of the specified <see cref="T:System.IO.Stream"/> into the file
            at the specified <paramref name="filePath"/>.
            </summary>
            <param name="stream">
            The Stream to copy.
            </param>
            <param name="filePath">
            The path of the file to save to.
            </param>
        </member>
        <member name="T:Atom.Storage.XmlUtilities">
            <summary>
            Provides XML serialization related utility methods.
            </summary>
        </member>
        <member name="M:Atom.Storage.XmlUtilities.Serialize``1(System.String,``0)">
            <summary>
            Serializes the specified object of type <typeparamref name="T"/> to the file
            at the specified <paramref name="path"/>
            </summary>
            <typeparam name="T">
            The type of the object to serialize.
            </typeparam>
            <param name="path">
            The path of the target file.
            </param>
            <param name="obj">
            The object to serialize.
            </param>
        </member>
        <member name="M:Atom.Storage.XmlUtilities.Deserialize``1(System.String)">
            <summary>
            Deserializes an object of the given type <typeparamref name="T"/> from
            the file at the given <paramref name="path"/>.
            </summary>
            <typeparam name="T">
            The type of the object to deserialize.
            </typeparam>
            <param name="path">
            The path of the file to open.
            </param>
            <returns>
            The deserialized object.
            </returns>
        </member>
        <member name="M:Atom.Storage.XmlUtilities.TryDeserialize``1(System.String,System.Func{System.Exception,``0})">
            <summary>
            Deserializes an object of the given type <typeparamref name="T"/> from
            the file at the given <paramref name="path"/>.
            If an error has occurred the specified <paramref name="defaultFactory"/> will
            be used to create an instance of type T.
            </summary>
            <typeparam name="T">
            The type of the object to deserialize.
            </typeparam>
            <param name="path">
            The path of the file to open.
            </param>
            <param name="defaultFactory">
            The factory method used when an exception occurs during the process.
            </param>
            <returns>
            The deserialized object.
            </returns>
        </member>
        <member name="T:Atom.StringExtensions">
            <summary>
            Defines extension methods for the <see cref="T:System.String"/> class.
            </summary>
        </member>
        <member name="M:Atom.StringExtensions.Contains(System.String,System.String,System.StringComparison)">
            <summary>
            Returns a value indicating whether the specified System.String object occurs within this string,
            using the specified <see cref="T:System.StringComparison"/>.
            </summary>
            <param name="this">
            The original string to operate on.
            </param>
            <param name="value">
            The string to seek.
            </param>
            <param name="comparisonType">
            Specifies the rule of the search.
            </param>
            <returns>
            true if the value parameter occurs within this string,
            or if value is the empty string (""); otherwise, false.
            </returns>
        </member>
        <member name="T:Atom.StringUtilities">
            <summary>
            Defines static string-related utility methods.
            </summary>
        </member>
        <member name="M:Atom.StringUtilities.Reverse(System.String)">
            <summary>
            Reverses the given <see cref="T:System.String"/>.
            </summary>
            <param name="str">
            The input string to reverse.
            </param>
            <returns>
            The reversed output string.
            </returns>
        </member>
        <member name="M:Atom.StringUtilities.ExtractTrailingInteger(System.String)">
            <summary>
            Extracts an integer string from the end of the given string.
            </summary>
            <param name="str">
            The input string.
            </param>
            <returns>
            The integer that has been extracted;
            or <see cref="F:System.String.Empty"/> if the given string doesn't
            end with an integer.
            </returns>
        </member>
        <member name="M:Atom.StringUtilities.TransformTrailingInteger(System.String,System.Func{System.Int32,System.String})">
            <summary>
            Transforms the integer at the end of the given <see cref="T:System.String"/>.
            </summary>
            <param name="str">
            The input string.
            </param>
            <param name="transform">
            The transform to apply to the integer.
            </param>
            <returns>
            The transformed output string.
            </returns>
        </member>
        <member name="M:Atom.StringUtilities.IncrementTrailingInteger(System.String)">
            <summary>
            Increments the integer at the end of the given <see cref="T:System.String"/>.
            </summary>
            <param name="str">
            The input string.
            </param>
            <returns>
            The output string.
            </returns>
        </member>
        <member name="M:Atom.StringUtilities.DecrementTrailingInteger(System.String)">
            <summary>
            Decrements the integer at the end of the given <see cref="T:System.String"/>.
            </summary>
            <param name="str">
            The input string.
            </param>
            <returns>
            The output string.
            </returns>
        </member>
        <member name="M:Atom.StringUtilities.ConvertFromValues``1(``0[])">
            <summary>
            Converts the given values into a string.
            </summary>
            <typeparam name="T">
            The type of data to convert.
            </typeparam>
            <param name="values">
            The values to convert.
            </param>
            <returns>
            The converted string.
            </returns>
        </member>
        <member name="M:Atom.StringUtilities.ConvertFromValues``1(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,``0[])">
            <summary>
            Converts the given values into a string.
            </summary>
            <typeparam name="T">
            The type of data to convert.
            </typeparam>
            <param name="context">
            An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.
            </param>
            <param name="culture">
            A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, 
            the current culture is assumed.
            </param>
            <param name="values">
            The values to convert.
            </param>
            <returns>
            The converted string.
            </returns>
        </member>
        <member name="M:Atom.StringUtilities.ConvertFromValues``1(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,``0[],System.String)">
            <summary>
            Converts the given values into a string.
            </summary>
            <typeparam name="T">
            The type of data to convert.
            </typeparam>
            <param name="context">
            An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.
            </param>
            <param name="culture">
            A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, 
            the current culture is assumed.
            </param>
            <param name="values">
            The values to convert.
            </param>
            <param name="separator">
            The string the values should be seperated by in the output string.
            </param>
            <returns>
            The converted string.
            </returns>
        </member>
        <member name="M:Atom.StringUtilities.ConvertToValues``1(System.String,System.Int32,System.String)">
            <summary>
            Tries to convert the given value string into the equivalent of real values.
            </summary>
            <typeparam name="T">
            The type of data to convert to.
            </typeparam>
            <param name="input">
            The string to convert into values.
            </param>
            <param name="expectedValueCount">
            The number of values expected.
            </param>
            <param name="message">
            A message string that descripes the format the paramters are in.
            </param>
            <returns>
            The converted values.
            </returns>
            <exception cref="T:System.ArgumentException">
            If the format of the value string is not as expected.
            </exception>
        </member>
        <member name="M:Atom.StringUtilities.ConvertToValues``1(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String,System.Int32,System.String)">
            <summary>
            Tries to convert the given value string into the equivalent of real values.
            </summary>
            <typeparam name="T">
            The type of data to convert to.
            </typeparam>
            <param name="context">
            An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.
            </param>
            <param name="culture">
            A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, 
            the current culture is assumed.
            </param>
            <param name="input">
            The string to convert into values.
            </param>
            <param name="expectedValueCount">
            The number of values expected.
            </param>
            <param name="message">
            A message string that descripes the format the paramters are in.
            </param>
            <returns>
            The converted values.
            </returns>
            <exception cref="T:System.ArgumentException">
            If the format of the value string is not as expected.
            </exception>
        </member>
        <member name="M:Atom.StringUtilities.ConvertToValues``1(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String,System.Int32,System.String,System.String)">
            <summary>
            Tries to convert the given value string into the equivalent of real values.
            </summary>
            <typeparam name="T">
            The type of data to convert to.
            </typeparam>
            <param name="context">
            An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.
            </param>
            <param name="culture">
            A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, 
            the current culture is assumed.
            </param>
            <param name="input">
            The string to convert into values.
            </param>
            <param name="expectedValueCount">
            The number of values expected.
            </param>
            <param name="message">
            A message string that descripes the format the paramters are in.
            </param>
            <param name="separator">
            Tge string the individual values in the input are separated with.
            </param>
            <returns>
            The converted values.
            </returns>
            <exception cref="T:System.ArgumentException">
            If the format of the value string is not as expected.
            </exception>
        </member>
        <member name="T:Atom.Swap">
            <summary>
            Defines a mechanism for swapping two objects.
            </summary>
        </member>
        <member name="M:Atom.Swap.Them``1(``0@,``0@)">
            <summary>
            Swaps the the specified items.
            </summary>
            <typeparam name="T">
            The type of the items to swap.
            </typeparam>
            <param name="first">
            The first item.
            </param>
            <param name="second">
            The second item.
            </param>
        </member>
        <member name="T:Atom.Threading.Timeout">
            <summary>
            Provides utility mechanism for working with timeoutable actions.
            </summary>
        </member>
        <member name="M:Atom.Threading.Timeout.Invoke(System.TimeSpan,System.Action,System.Action)">
            <summary>
            Executes the specified action, giving it the specified time to complete
            before it is aborted.
            </summary>
            <exception cref="T:System.TimeoutException">
            Thrown when the timeout has been reached.
            </exception>
            <param name="timeout">
            The TimeSpan the action is allowed to take at max.
            </param>
            <param name="action">
            The action to execute.
            </param>
            <param name="abort">
            The (optional) action that should be executed when the timeout has been reached.
            </param>
        </member>
        <member name="T:Atom.TypeActivator">
            <summary>
            Implements a mechanism that creates new objects given a type name.
            This class can't be inherited.
            </summary>
        </member>
        <member name="F:Atom.TypeActivator.Instance">
            <summary>
            Represents the singleton instance of the TypeActivator class.
            </summary>
        </member>
        <member name="M:Atom.TypeActivator.CreateInstance(System.String)">
            <summary>
            Creates an instance of the type with the given typeName.
            </summary>
            <param name="typeName">
            The name that uniquely identifies the type to initiate.
            </param>
            <returns>
            The object that has been created.
            </returns>
        </member>
        <member name="T:Atom.TypeStringConverter">
            <summary>
            Implements an <see cref="T:Atom.IStringConverter"/> that uses ITypeConverters to
            convert values to and from strings.
            </summary>
        </member>
        <member name="M:Atom.TypeStringConverter.ConvertToString(System.Object)">
            <summary>
            Attempts to convert the given source object value into a string.
            </summary>
            <param name="value">
            The input source value.
            </param>
            <returns>
            The output value.
            </returns>
        </member>
        <member name="M:Atom.TypeStringConverter.ConvertFromString(System.String,System.Type)">
            <summary>
            Attempts to convert the given target string value into
            the a source value.
            </summary>
            <param name="value">
            The input target value, encoded in a string.
            </param>
            <param name="targetType">
            The type the target value encodes.
            </param>
            <returns>
            The output source value.
            </returns>
        </member>
        <member name="T:Atom.UnmanagedDisposable">
            <summary>
            Represents an abstract base class that implements the IDisposable pattern;
            resources are disposed automatically incase the user has not called Dipose manually.
            </summary>
            <remarks>
            Warning: Implementing this class over ManagedDisposable brings large perfomance penalities
            because of finalization.
            </remarks>
        </member>
        <member name="M:Atom.UnmanagedDisposable.Finalize">
            <summary>
            Finalizes an instance of the UnmanagedDisposable class.
            </summary>
        </member>
    </members>
</doc>
